Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% (131806)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 92
% Passive clauses: 1752
% Generated clauses: 8177
% Final active clauses: 84
% Final passive clauses: 1396
% Input formulas: 36
% Initial clauses: 88
% 
% Duplicate literals: 454
% Trivial inequalities: 191
% Fw subsumption resolutions: 1452
% Fw demodulations: 179
% Bw demodulations: 3
% 
% Simple tautologies: 269
% Equational tautologies: 68
% Forward subsumptions: 2866
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 286
% Factoring: 2
% Forward superposition: 1961
% Backward superposition: 3089
% Self superposition: 191
% Equality factoring: 166
% Equality resolution: 31
% 
% Split clauses: 491
% Split components: 1057
% SAT solver clauses: 869
% SAT solver unit clauses: 37
% SAT solver binary clauses: 192
% 
% Sat splits: 491
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 836
% TWLsolver calls for satisfiability: 152
% 
% Memory used [KB]: 5245
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.evalProps
% (131823)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 158
% Passive clauses: 930
% Generated clauses: 10864
% Final active clauses: 122
% Final passive clauses: 686
% Input formulas: 36
% Initial clauses: 88
% 
% Duplicate literals: 279
% Trivial inequalities: 172
% Fw subsumption resolutions: 1077
% Fw demodulations: 1471
% Bw demodulations: 84
% Condensations: 443
% Global subsumptions: 9
% 
% Simple tautologies: 181
% Equational tautologies: 25
% Forward subsumptions: 4710
% Fw demodulations to eq. taut.: 26
% Bw demodulations to eq. taut.: 9
% 
% Binary resolution: 314
% Factoring: 2
% Forward superposition: 3113
% Backward superposition: 2629
% Self superposition: 61
% Equality factoring: 36
% Equality resolution: 37
% 
% Split clauses: 58
% Split components: 121
% SAT solver clauses: 1532
% SAT solver unit clauses: 91
% SAT solver binary clauses: 59
% SAT solver learnt clauses: 19
% SAT solver learnt literals: 4
% 
% Sat splits: 58
% Sat splitting refutations: 21
% 
% TWLsolver clauses: 1495
% TWLsolver calls for satisfiability: 485
% 
% Memory used [KB]: 10490
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f24999,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f146,f251,f250,f145,f253,f144,f255,f249,f1364,f1356,f1387,f1350,f1341,f1385,f1297,f1463,f1565,f1566,f1567,f1568,f1570,f1571,f1573,f1575,f2619,f2642,f6026,f6062,f6064,f6313,f6317,f6319,f6320,f7247,f7255,f7476,f7482,f7480,f8903,f8906,f8921,f8923,f8759,f8934,f8935,f8938,f8939,f8922,f8905,f9425,f9424,f9439,f9440,f9438,f9245,f8904,f9464,f9822,f9865,f9820,f9873,f10377,f10392,f10401,f10393,f10394,f10395,f10405,f10398,f10396,f10404,f10402,f10666,f10786,f10399,f11874,f11877,f11895,f11900,f11897,f14254,f14255,f14693,f14694,f15314,f15484,f16411,f11901,f16492,f16495,f16576,f16493,f16578,f6063,f16804,f16805,f17640,f17641,f23785,f23788,f23792,f23793,f23794,f23795,f23798,f23801,f23802,f23803,f23804,f23805,f23806,f23807,f23808,f23809,f23810,f23811,f23812,f23813,f23814,f23815,f23816,f23817,f23818,f23819,f23820,f23823,f23826,f23830,f23831,f23832,f23833,f23834,f23835,f23836,f23837,f23838,f23839,f23840,f23841,f23844,f23845,f23847,f23848,f23849,f23850,f23851,f23852,f23853,f23854,f23855,f23856,f23857,f23858,f23859,f23860,f23861,f23863,f23864,f23866,f23867,f23868,f23869,f23870,f23871,f23872,f23873,f23874,f23875,f23876,f23877,f23878,f23879,f23880,f23881,f23882,f23883,f23884,f23885,f23886,f23887,f23888,f23889,f23890,f23891,f23892,f23893,f23894,f23895,f23896,f23897,f23898,f23899,f23900,f23901,f23902,f23913,f23914,f23915,f23916,f23918,f23919,f23920,f23921,f23922,f23923,f23924,f23925,f23926,f23927,f23929,f23930,f23931,f23932,f23933,f23934,f23938,f23942,f23945,f23947,f23948,f23949,f23950,f23951,f23952,f23954,f23955,f23956,f23957,f23958,f23962,f23963,f23966,f23967,f23968,f23969,f23970,f23971,f23972,f23973,f23974,f23975,f23976,f23977,f23978,f23979,f23980,f23983,f23984,f23987,f23988,f23989,f23990,f23991,f23992,f23993,f23994,f23995,f23996,f23997,f23998,f23999,f24000,f24001,f24002,f24003,f24004,f24005,f24006,f24007,f24008,f24009,f24010,f24011,f24012,f24013,f24014,f24015,f24016,f24017,f24018,f24019,f24020,f24021,f24022,f24023,f24024,f24025,f24026,f24027,f24028,f24029,f24030,f24031,f24032,f24033,f24034,f24035,f24036,f24037,f24038,f24039,f24040,f24041,f24043,f24044,f24046,f24047,f24048,f24049,f24050,f24051,f24052,f24054,f24056,f24058,f24060,f24061,f24064,f24067,f24068,f24071,f24072,f24073,f24074,f24075,f24076,f24077,f24078,f24079,f24080,f24081,f24082,f24083,f24084,f24085,f24086,f24111,f10009,f10008,f24120,f24123,f24124,f9463,f7254,f1386,f24444,f24446,f24447,f24450,f24452,f24454,f24456,f24932,f24957,f24961,f24962,f24967,f24934,f24933,f24985,f24987,f24986])).
fof(f24986,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | $spl88),
  inference(cnf_transformation,[],[f24986_D])).
fof(f24986_D,plain,(
  ( ! [X6,X3] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f24987,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) | $spl90),
  inference(cnf_transformation,[],[f24987_D])).
fof(f24987_D,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f24985,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900,f24966,f24728,f24967,f24898,f24968,f24749,f24896,f24973,f24983,f24984])).
fof(f24984,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900,f24966,f24728,f24967,f24898,f24968,f24749,f24896,f24973,f24983])).
fof(f24983,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl22),
  inference(subsumption_resolution,[],[f24783,f149])).
fof(f24783,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f10811])).
fof(f24973,plain,(
  ( ! [X47,X52,X50,X48,X46,X55,X53,X51,X49] : (s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X47,bool)),X48),s(fun(X49,fun(X50,bool)),X51),s('type.semanticPrimitives.result'(X46,X49),'const.semanticPrimitives.Rval_1'(s(X46,X52))),s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,X53)))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900,f24966,f24728,f24967,f24898,f24968,f24749,f24896])).
fof(f24896,plain,(
  ( ! [X47,X52,X50,X48,X46,X55,X53,X51,X49] : (s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X47,bool)),X48),s(fun(X49,fun(X50,bool)),X51),s('type.semanticPrimitives.result'(X46,X49),'const.semanticPrimitives.Rval_1'(s(X46,X52))),s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,X53))))) | s(bool,'T_0') = s(bool,X55)) ) | $spl22),
  inference(trivial_inequality_removal,[],[f24752])).
fof(f24752,plain,(
  ( ! [X47,X54,X52,X50,X48,X46,X55,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X47,bool)),X48),s(fun(X49,fun(X50,bool)),X51),s('type.semanticPrimitives.result'(X46,X49),'const.semanticPrimitives.Rval_1'(s(X46,X52))),s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,X53))))) | s(bool,'T_0') = s(bool,X55)) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f8502])).
fof(f24749,plain,(
  ( ! [X428,X430,X436,X432,X434,X429,X431,X437,X433,X435] : (s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rval_1'(s(bool,X437))) | s(bool,X437) = s(bool,'const.evalProps.result_rel_4'(s(fun(X428,fun(X429,bool)),X430),s(fun(X431,fun(X432,bool)),X433),s('type.semanticPrimitives.result'(X428,X431),'const.semanticPrimitives.Rval_1'(s(X428,X434))),s('type.semanticPrimitives.result'(X429,X432),'const.semanticPrimitives.Rval_1'(s(X429,X435)))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f5665])).
fof(f24968,plain,(
  ( ! [X208,X206,X204,X202,X211,X209,X207,X205,X203] : (s(bool,X211) = s(bool,'const.evalProps.result_rel_4'(s(fun(X202,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X202,X205),X208),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),X209))))) | s('type.semanticPrimitives.result'(X202,X205),X208) = s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,sK10(X208,X205,X202))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900,f24966,f24728,f24967,f24898])).
fof(f24898,plain,(
  ( ! [X208,X206,X204,X202,X211,X209,X207,X205,X203] : (s(bool,X211) = s(bool,'const.evalProps.result_rel_4'(s(fun(X202,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X202,X205),X208),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),X209))))) | s(bool,'T_0') = s(bool,X211) | s('type.semanticPrimitives.result'(X202,X205),X208) = s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,sK10(X208,X205,X202))))) ) | $spl22),
  inference(trivial_inequality_removal,[],[f24729])).
fof(f24729,plain,(
  ( ! [X210,X208,X206,X204,X202,X211,X209,X207,X205,X203] : (s('type.semanticPrimitives.result'(bool,X210),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X210),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X211) = s(bool,'const.evalProps.result_rel_4'(s(fun(X202,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X202,X205),X208),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),X209))))) | s(bool,'T_0') = s(bool,X211) | s('type.semanticPrimitives.result'(X202,X205),X208) = s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,sK10(X208,X205,X202))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f22920])).
fof(f24728,plain,(
  ( ! [X825,X831,X829,X823,X826,X824,X830,X828,X822,X827] : (s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,X830))) | s(bool,X830) != s(bool,'const.evalProps.result_rel_4'(s(fun(X826,fun(X828,bool)),X829),s(fun(X822,fun(X823,bool)),X824),s('type.semanticPrimitives.result'(X826,X822),X825),s('type.semanticPrimitives.result'(X828,X823),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X823),X827))))) | s('type.semanticPrimitives.result'(X826,X822),X825) = s('type.semanticPrimitives.result'(X826,X822),'const.semanticPrimitives.Rval_1'(s(X826,sK10(X825,X822,X826))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f22878])).
fof(f24966,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X75,X73] : (s(bool,X75) = s(bool,'const.evalProps.result_rel_4'(s(fun(X66,fun(X67,bool)),X68),s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.result'(X66,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73)))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900])).
fof(f24900,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X75,X73] : (s(bool,X75) = s(bool,'const.evalProps.result_rel_4'(s(fun(X66,fun(X67,bool)),X68),s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.result'(X66,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))))) | s(bool,'T_0') = s(bool,X75)) ) | $spl22),
  inference(trivial_inequality_removal,[],[f24717])).
fof(f24717,plain,(
  ( ! [X70,X68,X66,X74,X72,X71,X69,X67,X75,X73] : (s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X75) = s(bool,'const.evalProps.result_rel_4'(s(fun(X66,fun(X67,bool)),X68),s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.result'(X66,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))))) | s(bool,'T_0') = s(bool,X75)) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f8504])).
fof(f24714,plain,(
  ( ! [X420,X422,X428,X424,X426,X421,X423,X429,X425,X427] : (s('type.semanticPrimitives.result'(bool,X428),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X428),'const.semanticPrimitives.Rval_1'(s(bool,X429))) | s(bool,X429) = s(bool,'const.evalProps.result_rel_4'(s(fun(X420,fun(X421,bool)),X422),s(fun(X423,fun(X424,bool)),X425),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X423),X426))),s('type.semanticPrimitives.result'(X421,X424),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X424),X427)))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f5382])).
fof(f24963,plain,(
  ( ! [X212,X210,X216,X215,X213,X211,X217,X219,X214] : (s('type.semanticPrimitives.result'(X211,X214),X217) = s('type.semanticPrimitives.result'(X211,X214),'const.semanticPrimitives.Rval_1'(s(X211,sK10(X217,X214,X211)))) | s(bool,X219) = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X211,bool)),X212),s(fun(X213,fun(X214,bool)),X215),s('type.semanticPrimitives.result'(X210,X213),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X213),X216))),s('type.semanticPrimitives.result'(X211,X214),X217)))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902])).
fof(f24902,plain,(
  ( ! [X212,X210,X216,X215,X213,X219,X211,X217,X214] : (s(bool,X219) = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X211,bool)),X212),s(fun(X213,fun(X214,bool)),X215),s('type.semanticPrimitives.result'(X210,X213),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X213),X216))),s('type.semanticPrimitives.result'(X211,X214),X217))) | s(bool,'T_0') = s(bool,X219) | s('type.semanticPrimitives.result'(X211,X214),X217) = s('type.semanticPrimitives.result'(X211,X214),'const.semanticPrimitives.Rval_1'(s(X211,sK10(X217,X214,X211))))) ) | $spl22),
  inference(trivial_inequality_removal,[],[f24705])).
fof(f24705,plain,(
  ( ! [X212,X218,X210,X216,X215,X213,X219,X211,X217,X214] : (s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X219) = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X211,bool)),X212),s(fun(X213,fun(X214,bool)),X215),s('type.semanticPrimitives.result'(X210,X213),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X213),X216))),s('type.semanticPrimitives.result'(X211,X214),X217))) | s(bool,'T_0') = s(bool,X219) | s('type.semanticPrimitives.result'(X211,X214),X217) = s('type.semanticPrimitives.result'(X211,X214),'const.semanticPrimitives.Rval_1'(s(X211,sK10(X217,X214,X211))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f23584])).
fof(f24704,plain,(
  ( ! [X850,X854,X852,X857,X851,X849,X855,X853,X858,X856] : (s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,X857))) | s(bool,X857) != s(bool,'const.evalProps.result_rel_4'(s(fun(X855,fun(X854,bool)),X856),s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.result'(X855,X849),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X849),X852))),s('type.semanticPrimitives.result'(X854,X850),X853))) | s('type.semanticPrimitives.result'(X854,X850),X853) = s('type.semanticPrimitives.result'(X854,X850),'const.semanticPrimitives.Rval_1'(s(X854,sK10(X853,X850,X854))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f23540])).
fof(f24946,plain,(
  ( ! [X134,X132,X140,X136,X135,X133,X137] : (s('type.semanticPrimitives.result'(X137,X133),X136) = s('type.semanticPrimitives.result'(X137,X133),'const.semanticPrimitives.Rval_1'(s(X137,sK10(X136,X133,X137)))) | s(bool,X140) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.error_result'(X132),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X137))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945])).
fof(f24945,plain,(
  ( ! [X134,X132,X140,X136,X135,X133,X137] : (s(bool,X140) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.error_result'(X132),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X137)))) | s(bool,'T_0') = s(bool,X140) | s('type.semanticPrimitives.result'(X137,X133),X136) = s('type.semanticPrimitives.result'(X137,X133),'const.semanticPrimitives.Rval_1'(s(X137,sK10(X136,X133,X137))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24617,f149])).
fof(f24617,plain,(
  ( ! [X134,X132,X140,X136,X135,X133,X137] : (p(s(bool,'F_0')) | s(bool,X140) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.error_result'(X132),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X137)))) | s(bool,'T_0') = s(bool,X140) | s('type.semanticPrimitives.result'(X137,X133),X136) = s('type.semanticPrimitives.result'(X137,X133),'const.semanticPrimitives.Rval_1'(s(X137,sK10(X136,X133,X137))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f23460])).
fof(f24941,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.error_result'(X19),X22),s('type.semanticPrimitives.error_result'(X20),sK11(X23,X20,X24)))) | s('type.semanticPrimitives.result'(X24,X20),X23) = s('type.semanticPrimitives.result'(X24,X20),'const.semanticPrimitives.Rval_1'(s(X24,sK10(X23,X20,X24))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24609,f149])).
fof(f24609,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.error_result'(X19),X22),s('type.semanticPrimitives.error_result'(X20),sK11(X23,X20,X24)))) | s('type.semanticPrimitives.result'(X24,X20),X23) = s('type.semanticPrimitives.result'(X24,X20),'const.semanticPrimitives.Rval_1'(s(X24,sK10(X23,X20,X24))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f23447])).
fof(f24921,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X129] : (s('type.semanticPrimitives.result'(X125,X121),X124) = s('type.semanticPrimitives.result'(X125,X121),'const.semanticPrimitives.Rval_1'(s(X125,sK10(X124,X121,X125)))) | s(bool,X129) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X121,fun(X122,bool)),X123),s('type.semanticPrimitives.error_result'(X121),sK11(X124,X121,X125)),s('type.semanticPrimitives.error_result'(X122),X126)))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920])).
fof(f24920,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X129] : (s(bool,X129) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X121,fun(X122,bool)),X123),s('type.semanticPrimitives.error_result'(X121),sK11(X124,X121,X125)),s('type.semanticPrimitives.error_result'(X122),X126))) | s(bool,'T_0') = s(bool,X129) | s('type.semanticPrimitives.result'(X125,X121),X124) = s('type.semanticPrimitives.result'(X125,X121),'const.semanticPrimitives.Rval_1'(s(X125,sK10(X124,X121,X125))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24504,f149])).
fof(f24504,plain,(
  ( ! [X125,X123,X121,X126,X124,X122,X129] : (p(s(bool,'F_0')) | s(bool,X129) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X121,fun(X122,bool)),X123),s('type.semanticPrimitives.error_result'(X121),sK11(X124,X121,X125)),s('type.semanticPrimitives.error_result'(X122),X126))) | s(bool,'T_0') = s(bool,X129) | s('type.semanticPrimitives.result'(X125,X121),X124) = s('type.semanticPrimitives.result'(X125,X121),'const.semanticPrimitives.Rval_1'(s(X125,sK10(X124,X121,X125))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f22800])).
fof(f24916,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X10),s('type.semanticPrimitives.error_result'(X8),sK11(X11,X8,X12)),s('type.semanticPrimitives.error_result'(X9),X13))) | s('type.semanticPrimitives.result'(X12,X8),X11) = s('type.semanticPrimitives.result'(X12,X8),'const.semanticPrimitives.Rval_1'(s(X12,sK10(X11,X8,X12))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24496,f149])).
fof(f24496,plain,(
  ( ! [X12,X10,X8,X13,X11,X9] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X10),s('type.semanticPrimitives.error_result'(X8),sK11(X11,X8,X12)),s('type.semanticPrimitives.error_result'(X9),X13))) | s('type.semanticPrimitives.result'(X12,X8),X11) = s('type.semanticPrimitives.result'(X12,X8),'const.semanticPrimitives.Rval_1'(s(X12,sK10(X11,X8,X12))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f22787])).
fof(f24911,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK12(X1,X2,bool,X0))))) ) | $spl22),
  inference(trivial_inequality_removal,[],[f24465])).
fof(f24465,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK12(X1,X2,bool,X0))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f2927])).
fof(f22893,plain,(
  ( ! [X1017,X1011,X1009,X1015,X1013,X1006,X1004,X1016,X1010,X1008,X1014,X1012,X1007,X1005] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X1012,bool)),X1013),s(fun(X1014,fun(X1015,bool)),X1016),s('type.semanticPrimitives.result'(bool,X1014),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X1008,fun(X1010,bool)),X1011),s(fun(X1004,fun(X1005,bool)),X1006),s('type.semanticPrimitives.result'(X1008,X1004),X1007),s('type.semanticPrimitives.result'(X1010,X1005),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1005),X1009))))))),s('type.semanticPrimitives.result'(X1012,X1015),'const.semanticPrimitives.Rval_1'(s(X1012,X1017))))) | s(bool,'F_0') = s(bool,happ(s(fun(X1012,bool),happ(s(fun(bool,fun(X1012,bool)),X1013),s(bool,'const.evalProps.exc_rel_3'(s(fun(X1004,fun(X1005,bool)),X1006),s('type.semanticPrimitives.error_result'(X1004),sK11(X1007,X1004,X1008)),s('type.semanticPrimitives.error_result'(X1005),X1009))))),s(X1012,X1017))) | s('type.semanticPrimitives.result'(X1008,X1004),X1007) = s('type.semanticPrimitives.result'(X1008,X1004),'const.semanticPrimitives.Rval_1'(s(X1008,sK10(X1007,X1004,X1008))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f22894,plain,(
  ( ! [X1019,X1023,X1021,X1027,X1025,X1031,X1029,X1018,X1022,X1020,X1026,X1024,X1030,X1028] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1026,fun(bool,bool)),X1027),s(fun(X1028,fun(X1029,bool)),X1030),s('type.semanticPrimitives.result'(X1026,X1028),'const.semanticPrimitives.Rval_1'(s(X1026,X1031))),s('type.semanticPrimitives.result'(bool,X1029),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X1022,fun(X1024,bool)),X1025),s(fun(X1018,fun(X1019,bool)),X1020),s('type.semanticPrimitives.result'(X1022,X1018),X1021),s('type.semanticPrimitives.result'(X1024,X1019),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1019),X1023))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X1026,fun(bool,bool)),X1027),s(X1026,X1031))),s(bool,'const.evalProps.exc_rel_3'(s(fun(X1018,fun(X1019,bool)),X1020),s('type.semanticPrimitives.error_result'(X1018),sK11(X1021,X1018,X1022)),s('type.semanticPrimitives.error_result'(X1019),X1023))))) | s('type.semanticPrimitives.result'(X1022,X1018),X1021) = s('type.semanticPrimitives.result'(X1022,X1018),'const.semanticPrimitives.Rval_1'(s(X1022,sK10(X1021,X1018,X1022))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23011,plain,(
  ( ! [X1075,X1073,X1079,X1077,X1070,X1068,X1080,X1074,X1072,X1078,X1076,X1067,X1071,X1069] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X1075,bool)),X1076),s(fun(X1077,fun(X1078,bool)),X1079),s('type.semanticPrimitives.result'(bool,X1077),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1070,fun(X1071,bool)),X1072),s('type.semanticPrimitives.error_result'(X1070),sK11(X1073,X1070,X1067)),s('type.semanticPrimitives.error_result'(X1071),X1074))))),s('type.semanticPrimitives.result'(X1075,X1078),'const.semanticPrimitives.Rval_1'(s(X1075,X1080))))) | s(bool,'F_0') = s(bool,happ(s(fun(X1075,bool),happ(s(fun(bool,fun(X1075,bool)),X1076),s(bool,'const.evalProps.result_rel_4'(s(fun(X1067,fun(X1068,bool)),X1069),s(fun(X1070,fun(X1071,bool)),X1072),s('type.semanticPrimitives.result'(X1067,X1070),X1073),s('type.semanticPrimitives.result'(X1068,X1071),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1071),X1074))))))),s(X1075,X1080))) | s('type.semanticPrimitives.result'(X1067,X1070),X1073) = s('type.semanticPrimitives.result'(X1067,X1070),'const.semanticPrimitives.Rval_1'(s(X1067,sK10(X1073,X1070,X1067))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23012,plain,(
  ( ! [X1081,X1087,X1085,X1091,X1089,X1093,X1082,X1086,X1084,X1090,X1088,X1094,X1092,X1083] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1089,fun(bool,bool)),X1090),s(fun(X1091,fun(X1092,bool)),X1093),s('type.semanticPrimitives.result'(X1089,X1091),'const.semanticPrimitives.Rval_1'(s(X1089,X1094))),s('type.semanticPrimitives.result'(bool,X1092),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1084,fun(X1085,bool)),X1086),s('type.semanticPrimitives.error_result'(X1084),sK11(X1087,X1084,X1081)),s('type.semanticPrimitives.error_result'(X1085),X1088))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X1089,fun(bool,bool)),X1090),s(X1089,X1094))),s(bool,'const.evalProps.result_rel_4'(s(fun(X1081,fun(X1082,bool)),X1083),s(fun(X1084,fun(X1085,bool)),X1086),s('type.semanticPrimitives.result'(X1081,X1084),X1087),s('type.semanticPrimitives.result'(X1082,X1085),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1085),X1088))))))) | s('type.semanticPrimitives.result'(X1081,X1084),X1087) = s('type.semanticPrimitives.result'(X1081,X1084),'const.semanticPrimitives.Rval_1'(s(X1081,sK10(X1087,X1084,X1081))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f18712,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X26))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X28))) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X26,X25,bool)))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X28,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X28) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,sK10(X28,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(superposition,[],[f3078,f3058])).
fof(f18931,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.semanticPrimitives.result'(bool,X25),X26) != s('type.semanticPrimitives.result'(bool,X25),X27) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X26,X25,bool)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X28),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X27,X25,bool)))))) | s('type.semanticPrimitives.result'(bool,X25),X27) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,sK10(X27,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(superposition,[],[f3080,f3058])).
fof(f21892,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.semanticPrimitives.result'(bool,X25),X26) != s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X27,X25,bool)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X25),bool),X28),s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X26,X25,bool))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X25),bool),X28),s('type.semanticPrimitives.result'(bool,X25),X27)))) | s('type.semanticPrimitives.result'(bool,X25),X27) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,sK10(X27,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(superposition,[],[f3076,f3058])).
fof(f9395,plain,(
  ( ! [X114,X112,X115,X113] : (s(bool,X112) != s(bool,X114) | s('type.semanticPrimitives.result'(bool,X115),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X115),'const.semanticPrimitives.Rval_1'(s(bool,X114))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X112)),X113,bool))) )),
  inference(superposition,[],[f429,f7120])).
fof(f9169,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) )),
  inference(condensation,[],[f9168])).
fof(f9168,plain,(
  ( ! [X33,X31,X32] : (s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,X31)) )),
  inference(trivial_inequality_removal,[],[f9145])).
fof(f9145,plain,(
  ( ! [X33,X31,X32] : (s(bool,X31) != s(bool,X31) | s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f428,f150])).
fof(f23678,plain,(
  ( ! [X1112,X1118,X1116,X1106,X1110,X1108,X1115,X1113,X1117,X1107,X1105,X1111,X1109,X1114] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1113,fun(bool,bool)),X1114),s(fun(X1115,fun(X1116,bool)),X1117),s('type.semanticPrimitives.result'(X1113,X1115),'const.semanticPrimitives.Rval_1'(s(X1113,X1118))),s('type.semanticPrimitives.result'(bool,X1116),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1108,fun(X1109,bool)),X1110),s('type.semanticPrimitives.error_result'(X1108),X1111),s('type.semanticPrimitives.error_result'(X1109),sK11(X1112,X1109,X1106)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X1113,fun(bool,bool)),X1114),s(X1113,X1118))),s(bool,'const.evalProps.result_rel_4'(s(fun(X1105,fun(X1106,bool)),X1107),s(fun(X1108,fun(X1109,bool)),X1110),s('type.semanticPrimitives.result'(X1105,X1108),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1108),X1111))),s('type.semanticPrimitives.result'(X1106,X1109),X1112))))) | s('type.semanticPrimitives.result'(X1106,X1109),X1112) = s('type.semanticPrimitives.result'(X1106,X1109),'const.semanticPrimitives.Rval_1'(s(X1106,sK10(X1112,X1109,X1106))))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23677,plain,(
  ( ! [X1104,X1099,X1097,X1103,X1101,X1091,X1095,X1093,X1098,X1096,X1102,X1100,X1094,X1092] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X1099,bool)),X1100),s(fun(X1101,fun(X1102,bool)),X1103),s('type.semanticPrimitives.result'(bool,X1101),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1094,fun(X1095,bool)),X1096),s('type.semanticPrimitives.error_result'(X1094),X1097),s('type.semanticPrimitives.error_result'(X1095),sK11(X1098,X1095,X1092)))))),s('type.semanticPrimitives.result'(X1099,X1102),'const.semanticPrimitives.Rval_1'(s(X1099,X1104))))) | s(bool,'F_0') = s(bool,happ(s(fun(X1099,bool),happ(s(fun(bool,fun(X1099,bool)),X1100),s(bool,'const.evalProps.result_rel_4'(s(fun(X1091,fun(X1092,bool)),X1093),s(fun(X1094,fun(X1095,bool)),X1096),s('type.semanticPrimitives.result'(X1091,X1094),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1094),X1097))),s('type.semanticPrimitives.result'(X1092,X1095),X1098))))),s(X1099,X1104))) | s('type.semanticPrimitives.result'(X1092,X1095),X1098) = s('type.semanticPrimitives.result'(X1092,X1095),'const.semanticPrimitives.Rval_1'(s(X1092,sK10(X1098,X1095,X1092))))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f12055,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X34,fun(X32,bool)),X35),s('type.semanticPrimitives.error_result'(X34),X36),s('type.semanticPrimitives.error_result'(X32),sK11(X33,X32,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(bool,bool)),X38),s(fun(X34,fun(X32,bool)),X35),s('type.semanticPrimitives.result'(X37,X34),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X34),X36))),s('type.semanticPrimitives.result'(bool,X32),X33))) | s('type.semanticPrimitives.result'(bool,X32),X33) = s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X33,X32,bool))) )),
  inference(superposition,[],[f230,f3058])).
fof(f14201,plain,(
  ( ! [X146,X144,X142,X140,X138,X136,X147,X145,X143,X141,X139,X137] : (s(bool,sK10(X137,X136,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(bool,bool)),X139),s(fun(X140,fun(X136,bool)),X141),s('type.semanticPrimitives.result'(X138,X140),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X140),X142))),s('type.semanticPrimitives.result'(bool,X136),X137))) | s(bool,'T_0') = s(bool,sK10(X137,X136,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X143,fun(bool,bool)),X144),s(fun(X145,fun(X136,bool)),X146),s('type.semanticPrimitives.result'(X143,X145),'const.semanticPrimitives.Rval_1'(s(X143,X147))),s('type.semanticPrimitives.result'(bool,X136),X137)))) )),
  inference(superposition,[],[f4984,f3215])).
fof(f14636,plain,(
  ( ! [X158,X156,X154,X152,X163,X161,X159,X157,X155,X153,X162,X160] : (s(bool,sK10(X153,X152,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X154,fun(bool,bool)),X155),s(fun(X156,fun(X152,bool)),X157),s('type.semanticPrimitives.result'(X154,X156),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X156),X158))),s('type.semanticPrimitives.result'(bool,X152),X153))) | s(bool,'T_0') = s(bool,sK10(X153,X152,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X159,bool)),X160),s(fun(X152,fun(X161,bool)),X162),s('type.semanticPrimitives.result'(bool,X152),X153),s('type.semanticPrimitives.result'(X159,X161),'const.semanticPrimitives.Rval_1'(s(X159,X163)))))) )),
  inference(superposition,[],[f4984,f4953])).
fof(f23036,plain,(
  ( ! [X255,X261,X257,X259,X263,X265,X260,X262,X256,X258,X264,X266] : (s(bool,sK10(X256,X255,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X257,fun(bool,bool)),X258),s(fun(X259,fun(X255,bool)),X260),s('type.semanticPrimitives.result'(X257,X259),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X259),X261))),s('type.semanticPrimitives.result'(bool,X255),X256))) | s(bool,'T_0') = s(bool,sK10(X256,X255,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X255,fun(X262,bool)),X263),s('type.semanticPrimitives.error_result'(X255),sK11(X256,X255,bool)),s('type.semanticPrimitives.error_result'(X262),X264))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X265,bool)),X266),s(fun(X255,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(bool,X255),X256),s('type.semanticPrimitives.result'(X265,X262),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X262),X264)))))) )),
  inference(superposition,[],[f4984,f5312])).
fof(f23697,plain,(
  ( ! [X212,X210,X208,X213,X211,X209,X207,X214] : (s('type.semanticPrimitives.result'(bool,X207),X208) != s('type.semanticPrimitives.result'(bool,X207),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X209) = s(bool,sK10(X208,X207,bool)) | s(bool,'T_0') = s(bool,X209) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X210,fun(X207,bool)),X211),s('type.semanticPrimitives.error_result'(X210),X212),s('type.semanticPrimitives.error_result'(X207),sK11(X208,X207,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X213,fun(bool,bool)),X214),s(fun(X210,fun(X207,bool)),X211),s('type.semanticPrimitives.result'(X213,X210),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X210),X212))),s('type.semanticPrimitives.result'(bool,X207),X208)))) )),
  inference(superposition,[],[f397,f5315])).
fof(f23698,plain,(
  ( ! [X218,X216,X222,X220,X215,X219,X217,X221] : (s('type.semanticPrimitives.result'(bool,X215),X216) != s('type.semanticPrimitives.result'(bool,X215),'const.semanticPrimitives.Rval_1'(s(bool,X217))) | s(bool,'F_0') = s(bool,sK10(X216,X215,bool)) | s(bool,'T_0') = s(bool,X217) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X218,fun(X215,bool)),X219),s('type.semanticPrimitives.error_result'(X218),X220),s('type.semanticPrimitives.error_result'(X215),sK11(X216,X215,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X221,fun(bool,bool)),X222),s(fun(X218,fun(X215,bool)),X219),s('type.semanticPrimitives.result'(X221,X218),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X218),X220))),s('type.semanticPrimitives.result'(bool,X215),X216)))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23699,plain,(
  ( ! [X229,X227,X225,X223,X230,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X223),X224) != s('type.semanticPrimitives.result'(bool,X223),'const.semanticPrimitives.Rval_1'(s(bool,X225))) | s(bool,'F_0') = s(bool,X225) | s(bool,'T_0') = s(bool,sK10(X224,X223,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X226,fun(X223,bool)),X227),s('type.semanticPrimitives.error_result'(X226),X228),s('type.semanticPrimitives.error_result'(X223),sK11(X224,X223,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X229,fun(bool,bool)),X230),s(fun(X226,fun(X223,bool)),X227),s('type.semanticPrimitives.result'(X229,X226),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X226),X228))),s('type.semanticPrimitives.result'(bool,X223),X224)))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23700,plain,(
  ( ! [X241,X231,X239,X237,X235,X233,X242,X240,X238,X236,X234,X232] : (s(bool,sK10(X232,X231,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X233,bool)),X234),s(fun(X231,fun(X235,bool)),X236),s('type.semanticPrimitives.result'(bool,X231),X232),s('type.semanticPrimitives.result'(X233,X235),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X235),X237))))) | s(bool,'T_0') = s(bool,sK10(X232,X231,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X238,fun(X231,bool)),X239),s('type.semanticPrimitives.error_result'(X238),X240),s('type.semanticPrimitives.error_result'(X231),sK11(X232,X231,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X241,fun(bool,bool)),X242),s(fun(X238,fun(X231,bool)),X239),s('type.semanticPrimitives.result'(X241,X238),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X238),X240))),s('type.semanticPrimitives.result'(bool,X231),X232)))) )),
  inference(superposition,[],[f3205,f5315])).
fof(f23702,plain,(
  ( ! [X261,X263,X259,X269,X265,X267,X260,X262,X258,X268,X264,X266] : (s(bool,sK10(X259,X258,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X260,fun(bool,bool)),X261),s(fun(X262,fun(X258,bool)),X263),s('type.semanticPrimitives.result'(X260,X262),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X262),X264))),s('type.semanticPrimitives.result'(bool,X258),X259))) | s(bool,'T_0') = s(bool,sK10(X259,X258,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X265,fun(X258,bool)),X266),s('type.semanticPrimitives.error_result'(X265),X267),s('type.semanticPrimitives.error_result'(X258),sK11(X259,X258,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X268,fun(bool,bool)),X269),s(fun(X265,fun(X258,bool)),X266),s('type.semanticPrimitives.result'(X268,X265),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X265),X267))),s('type.semanticPrimitives.result'(bool,X258),X259)))) )),
  inference(superposition,[],[f4984,f5315])).
fof(f5315,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X6,bool)),X9),s('type.semanticPrimitives.error_result'(X8),X10),s('type.semanticPrimitives.error_result'(X6),sK11(X7,X6,X5)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X11,fun(X5,bool)),X12),s(fun(X8,fun(X6,bool)),X9),s('type.semanticPrimitives.result'(X11,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X10))),s('type.semanticPrimitives.result'(X5,X6),X7))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X7,X6,X5))))) )),
  inference(superposition,[],[f230,f207])).
fof(f16757,plain,(
  ( ! [X80,X70,X78,X76,X74,X72,X81,X71,X69,X79,X77,X75,X73] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X72,fun(X70,bool)),X73),s('type.semanticPrimitives.error_result'(X72),X74),s('type.semanticPrimitives.error_result'(X70),sK11(X71,X70,X69)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X75,fun(X69,bool)),X76),s(fun(X72,fun(X70,bool)),X73),s('type.semanticPrimitives.result'(X75,X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),X74))),s('type.semanticPrimitives.result'(X69,X70),X71))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X69,fun(X77,bool)),X78),s(fun(X70,fun(X79,bool)),X80),s('type.semanticPrimitives.result'(X69,X70),X71),s('type.semanticPrimitives.result'(X77,X79),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X79),X81)))))) )),
  inference(superposition,[],[f230,f3212])).
fof(f17564,plain,(
  ( ! [X584,X586,X580,X582,X578,X585,X587,X581,X583,X579] : (~p(s(bool,happ(s(fun(bool,bool),X586),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X586),s(bool,X587)))) | s(bool,X587) != s(bool,'const.evalProps.result_rel_4'(s(fun(X578,fun(X579,bool)),X580),s(fun(X581,fun(X582,bool)),X583),s('type.semanticPrimitives.result'(X578,X581),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X581),X584))),s('type.semanticPrimitives.result'(X579,X582),X585))) | s('type.semanticPrimitives.result'(X579,X582),X585) = s('type.semanticPrimitives.result'(X579,X582),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X582),sK11(X585,X582,X579))))) )),
  inference(superposition,[],[f194,f4992])).
fof(f17565,plain,(
  ( ! [X596,X592,X594,X588,X590,X593,X595,X589,X591] : (~p(s(bool,happ(s(fun(bool,bool),X596),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X588,fun(X589,bool)),X590),s(fun(X591,fun(X592,bool)),X593),s('type.semanticPrimitives.result'(X588,X591),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X591),X594))),s('type.semanticPrimitives.result'(X589,X592),X595))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X588,fun(X589,bool)),X590),s(fun(X591,fun(X592,bool)),X593),s('type.semanticPrimitives.result'(X588,X591),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X591),X594))),s('type.semanticPrimitives.result'(X589,X592),X595)),X596,bool)) | s('type.semanticPrimitives.result'(X589,X592),X595) = s('type.semanticPrimitives.result'(X589,X592),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X592),sK11(X595,X592,X589))))) )),
  inference(superposition,[],[f195,f4992])).
fof(f17568,plain,(
  ( ! [X625,X621,X623,X617,X619,X624,X626,X620,X622,X618] : (s(bool,'F_0') != s(bool,X625) | s('type.semanticPrimitives.result'(bool,X626),'const.semanticPrimitives.Rval_1'(s(bool,X625))) = s('type.semanticPrimitives.result'(bool,X626),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X617,fun(X618,bool)),X619),s(fun(X620,fun(X621,bool)),X622),s('type.semanticPrimitives.result'(X617,X620),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X620),X623))),s('type.semanticPrimitives.result'(X618,X621),X624))))) | s('type.semanticPrimitives.result'(X618,X621),X624) = s('type.semanticPrimitives.result'(X618,X621),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X621),sK11(X624,X621,X618))))) )),
  inference(superposition,[],[f210,f4992])).
fof(f17578,plain,(
  ( ! [X736,X738,X734,X741,X737,X733,X735,X739,X740,X742] : (s('type.semanticPrimitives.result'(bool,X741),X742) != s('type.semanticPrimitives.result'(bool,X741),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X742,X741,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X733,fun(X734,bool)),X735),s(fun(X736,fun(X737,bool)),X738),s('type.semanticPrimitives.result'(X733,X736),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X736),X739))),s('type.semanticPrimitives.result'(X734,X737),X740))) | s('type.semanticPrimitives.result'(bool,X741),X742) = s('type.semanticPrimitives.result'(bool,X741),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X741),sK11(X742,X741,bool)))) | s('type.semanticPrimitives.result'(X734,X737),X740) = s('type.semanticPrimitives.result'(X734,X737),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X737),sK11(X740,X737,X734))))) )),
  inference(superposition,[],[f3085,f4992])).
fof(f17590,plain,(
  ( ! [X80,X78,X76,X74,X72,X83,X81,X79,X77,X75,X73,X84,X82] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X75,fun(X73,bool)),X76),s('type.semanticPrimitives.error_result'(X75),X77),s('type.semanticPrimitives.error_result'(X73),sK11(X74,X73,X72)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X78,fun(X72,bool)),X79),s(fun(X75,fun(X73,bool)),X76),s('type.semanticPrimitives.result'(X78,X75),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),X77))),s('type.semanticPrimitives.result'(X72,X73),X74))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X80,fun(X72,bool)),X81),s(fun(X82,fun(X73,bool)),X83),s('type.semanticPrimitives.result'(X80,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),X84))),s('type.semanticPrimitives.result'(X72,X73),X74)))) )),
  inference(superposition,[],[f230,f4992])).
fof(f17608,plain,(
  ( ! [X269,X271,X265,X267,X273,X268,X270,X266,X272,X274] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X265,X266),bool),X268),s('type.semanticPrimitives.result'(X265,X266),X267)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X265,X266),bool),X268),s('type.semanticPrimitives.result'(X265,X266),X269)))) | s('type.semanticPrimitives.result'(X265,X266),X269) != s('type.semanticPrimitives.result'(X265,X266),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X266),sK11(X267,X266,X265)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X270,fun(X265,bool)),X271),s(fun(X272,fun(X266,bool)),X273),s('type.semanticPrimitives.result'(X270,X272),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X272),X274))),s('type.semanticPrimitives.result'(X265,X266),X267)))) )),
  inference(superposition,[],[f194,f4992])).
fof(f17609,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X283,X276,X278] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X275,X276),bool),X278),s('type.semanticPrimitives.result'(X275,X276),X277)))) | s('type.semanticPrimitives.result'(X275,X276),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X276),sK11(X277,X276,X275)))) = s('type.semanticPrimitives.result'(X275,X276),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X276),sK11(X277,X276,X275))),X278,'type.semanticPrimitives.result'(X275,X276))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X279,fun(X275,bool)),X280),s(fun(X281,fun(X276,bool)),X282),s('type.semanticPrimitives.result'(X279,X281),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X281),X283))),s('type.semanticPrimitives.result'(X275,X276),X277)))) )),
  inference(superposition,[],[f195,f4992])).
fof(f17620,plain,(
  ( ! [X408,X405,X407,X401,X403,X409,X404,X406,X402] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X401,X402),bool),X404),s('type.semanticPrimitives.result'(X401,X402),X403)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X401,X402),bool),X404),s('type.semanticPrimitives.result'(X401,X402),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X402),sK11(X403,X402,X401))),X404,'type.semanticPrimitives.result'(X401,X402))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X405,fun(X401,bool)),X406),s(fun(X407,fun(X402,bool)),X408),s('type.semanticPrimitives.result'(X405,X407),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X407),X409))),s('type.semanticPrimitives.result'(X401,X402),X403)))) )),
  inference(superposition,[],[f471,f4992])).
fof(f17629,plain,(
  ( ! [X218,X216,X222,X220,X225,X219,X217,X223,X221,X224] : (s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X225))) = s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X216,fun(X217,bool)),X218),s(fun(X219,fun(X220,bool)),X221),s('type.semanticPrimitives.result'(X216,X219),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X219),X222))),s('type.semanticPrimitives.result'(X217,X220),X223))))) | s(bool,'T_0') = s(bool,X225) | s('type.semanticPrimitives.result'(X217,X220),X223) = s('type.semanticPrimitives.result'(X217,X220),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X220),sK11(X223,X220,X217))))) )),
  inference(trivial_inequality_removal,[],[f17525])).
fof(f17525,plain,(
  ( ! [X218,X216,X222,X220,X225,X219,X217,X223,X221,X224] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,X225))) = s('type.semanticPrimitives.result'(bool,X224),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X216,fun(X217,bool)),X218),s(fun(X219,fun(X220,bool)),X221),s('type.semanticPrimitives.result'(X216,X219),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X219),X222))),s('type.semanticPrimitives.result'(X217,X220),X223))))) | s(bool,'T_0') = s(bool,X225) | s('type.semanticPrimitives.result'(X217,X220),X223) = s('type.semanticPrimitives.result'(X217,X220),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X220),sK11(X223,X220,X217))))) )),
  inference(superposition,[],[f428,f4992])).
fof(f17631,plain,(
  ( ! [X78,X76,X74,X72,X71,X77,X75,X73] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X72,bool)),X73),s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X74),X77))),s('type.semanticPrimitives.result'(X72,X75),X78)))) | s('type.semanticPrimitives.result'(X72,X75),X78) = s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),sK11(X78,X75,X72))))) )),
  inference(trivial_inequality_removal,[],[f17509])).
fof(f17509,plain,(
  ( ! [X78,X76,X74,X72,X71,X77,X75,X73] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X72,bool)),X73),s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X74),X77))),s('type.semanticPrimitives.result'(X72,X75),X78)))) | s('type.semanticPrimitives.result'(X72,X75),X78) = s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),sK11(X78,X75,X72))))) )),
  inference(superposition,[],[f156,f4992])).
fof(f17638,plain,(
  ( ! [X94,X92,X90,X88,X87,X95,X93,X91,X89] : (p(s(bool,X95)) | s(bool,X95) = s(bool,'const.evalProps.result_rel_4'(s(fun(X87,fun(X88,bool)),X89),s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.result'(X87,X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),X93))),s('type.semanticPrimitives.result'(X88,X91),X94))) | s('type.semanticPrimitives.result'(X88,X91),X94) = s('type.semanticPrimitives.result'(X88,X91),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X91),sK11(X94,X91,X88))))) )),
  inference(subsumption_resolution,[],[f17511,f149])).
fof(f17511,plain,(
  ( ! [X94,X92,X90,X88,X87,X95,X93,X91,X89] : (p(s(bool,'F_0')) | p(s(bool,X95)) | s(bool,X95) = s(bool,'const.evalProps.result_rel_4'(s(fun(X87,fun(X88,bool)),X89),s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.result'(X87,X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),X93))),s('type.semanticPrimitives.result'(X88,X91),X94))) | s('type.semanticPrimitives.result'(X88,X91),X94) = s('type.semanticPrimitives.result'(X88,X91),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X91),sK11(X94,X91,X88))))) )),
  inference(superposition,[],[f197,f4992])).
fof(f20729,plain,(
  ( ! [X280,X292,X282,X288,X290,X279,X285,X287,X281,X283,X289,X291,X284,X286] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X287,bool)),X288),s(fun(X289,fun(X290,bool)),X291),s('type.semanticPrimitives.result'(bool,X289),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.semanticPrimitives.result'(X287,X290),'const.semanticPrimitives.Rval_1'(s(X287,X292))))) | s(bool,'F_0') = s(bool,happ(s(fun(X287,bool),happ(s(fun(bool,fun(X287,bool)),X288),s(bool,'const.evalProps.result_rel_4'(s(fun(X279,fun(X280,bool)),X281),s(fun(X282,fun(X283,bool)),X284),s('type.semanticPrimitives.result'(X279,X282),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X282),X285))),s('type.semanticPrimitives.result'(X280,X283),X286))))),s(X287,X292))) | s('type.semanticPrimitives.result'(X280,X283),X286) = s('type.semanticPrimitives.result'(X280,X283),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X283),sK11(X286,X283,X280))))) )),
  inference(superposition,[],[f5598,f4992])).
fof(f20789,plain,(
  ( ! [X280,X292,X282,X288,X290,X279,X285,X287,X281,X283,X289,X291,X284,X286] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X287,fun(bool,bool)),X288),s(fun(X289,fun(X290,bool)),X291),s('type.semanticPrimitives.result'(X287,X289),'const.semanticPrimitives.Rval_1'(s(X287,X292))),s('type.semanticPrimitives.result'(bool,X290),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X287,fun(bool,bool)),X288),s(X287,X292))),s(bool,'const.evalProps.result_rel_4'(s(fun(X279,fun(X280,bool)),X281),s(fun(X282,fun(X283,bool)),X284),s('type.semanticPrimitives.result'(X279,X282),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X282),X285))),s('type.semanticPrimitives.result'(X280,X283),X286))))) | s('type.semanticPrimitives.result'(X280,X283),X286) = s('type.semanticPrimitives.result'(X280,X283),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X283),sK11(X286,X283,X280))))) )),
  inference(superposition,[],[f5598,f4992])).
fof(f21889,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X4),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X4),s('type.semanticPrimitives.result'(X0,X1),X3)))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X0,bool)),X6),s(fun(X7,fun(X1,bool)),X8),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f3076,f4992])).
fof(f23658,plain,(
  ( ! [X874,X872,X878,X876,X870,X875,X873,X879,X877,X871] : (~p(s(bool,happ(s(fun(bool,bool),X878),s(bool,'const.evalProps.exc_rel_3'(s(fun(X873,fun(X874,bool)),X875),s('type.semanticPrimitives.error_result'(X873),X876),s('type.semanticPrimitives.error_result'(X874),sK11(X877,X874,X871))))))) | p(s(bool,happ(s(fun(bool,bool),X878),s(bool,X879)))) | s(bool,X879) != s(bool,'const.evalProps.result_rel_4'(s(fun(X870,fun(X871,bool)),X872),s(fun(X873,fun(X874,bool)),X875),s('type.semanticPrimitives.result'(X870,X873),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X873),X876))),s('type.semanticPrimitives.result'(X871,X874),X877))) | s('type.semanticPrimitives.result'(X871,X874),X877) = s('type.semanticPrimitives.result'(X871,X874),'const.semanticPrimitives.Rval_1'(s(X871,sK10(X877,X874,X871))))) )),
  inference(superposition,[],[f194,f5315])).
fof(f23659,plain,(
  ( ! [X883,X881,X887,X885,X888,X882,X880,X886,X884] : (~p(s(bool,happ(s(fun(bool,bool),X888),s(bool,'const.evalProps.exc_rel_3'(s(fun(X883,fun(X884,bool)),X885),s('type.semanticPrimitives.error_result'(X883),X886),s('type.semanticPrimitives.error_result'(X884),sK11(X887,X884,X881))))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X880,fun(X881,bool)),X882),s(fun(X883,fun(X884,bool)),X885),s('type.semanticPrimitives.result'(X880,X883),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X883),X886))),s('type.semanticPrimitives.result'(X881,X884),X887))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X880,fun(X881,bool)),X882),s(fun(X883,fun(X884,bool)),X885),s('type.semanticPrimitives.result'(X880,X883),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X883),X886))),s('type.semanticPrimitives.result'(X881,X884),X887)),X888,bool)) | s('type.semanticPrimitives.result'(X881,X884),X887) = s('type.semanticPrimitives.result'(X881,X884),'const.semanticPrimitives.Rval_1'(s(X881,sK10(X887,X884,X881))))) )),
  inference(superposition,[],[f195,f5315])).
fof(f23663,plain,(
  ( ! [X922,X920,X926,X924,X928,X923,X921,X927,X925,X919] : (s(bool,X927) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X922,fun(X923,bool)),X924),s('type.semanticPrimitives.error_result'(X922),X925),s('type.semanticPrimitives.error_result'(X923),sK11(X926,X923,X920)))) | s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,X927))) = s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X919,fun(X920,bool)),X921),s(fun(X922,fun(X923,bool)),X924),s('type.semanticPrimitives.result'(X919,X922),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X922),X925))),s('type.semanticPrimitives.result'(X920,X923),X926))))) | s('type.semanticPrimitives.result'(X920,X923),X926) = s('type.semanticPrimitives.result'(X920,X923),'const.semanticPrimitives.Rval_1'(s(X920,sK10(X926,X923,X920))))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23672,plain,(
  ( ! [X1033,X1027,X1025,X1031,X1029,X1034,X1032,X1026,X1030,X1028] : (s('type.semanticPrimitives.result'(bool,X1033),X1034) != s('type.semanticPrimitives.result'(bool,X1033),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1028,fun(X1029,bool)),X1030),s('type.semanticPrimitives.error_result'(X1028),X1031),s('type.semanticPrimitives.error_result'(X1029),sK11(X1032,X1029,X1026)))))) | s(bool,sK10(X1034,X1033,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X1025,fun(X1026,bool)),X1027),s(fun(X1028,fun(X1029,bool)),X1030),s('type.semanticPrimitives.result'(X1025,X1028),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1028),X1031))),s('type.semanticPrimitives.result'(X1026,X1029),X1032))) | s('type.semanticPrimitives.result'(bool,X1033),X1034) = s('type.semanticPrimitives.result'(bool,X1033),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1033),sK11(X1034,X1033,bool)))) | s('type.semanticPrimitives.result'(X1026,X1029),X1032) = s('type.semanticPrimitives.result'(X1026,X1029),'const.semanticPrimitives.Rval_1'(s(X1026,sK10(X1032,X1029,X1026))))) )),
  inference(superposition,[],[f3085,f5315])).
fof(f23682,plain,(
  ( ! [X39,X37,X35,X33,X31,X38,X36,X34,X32] : (s('type.semanticPrimitives.result'(X31,X32),X33) != s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,X34))) | s(X31,X34) = s(X31,sK10(X33,X32,X31)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X35,fun(X32,bool)),X36),s('type.semanticPrimitives.error_result'(X35),X37),s('type.semanticPrimitives.error_result'(X32),sK11(X33,X32,X31)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X38,fun(X31,bool)),X39),s(fun(X35,fun(X32,bool)),X36),s('type.semanticPrimitives.result'(X38,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),X37))),s('type.semanticPrimitives.result'(X31,X32),X33)))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23686,plain,(
  ( ! [X80,X78,X76,X87,X85,X83,X81,X79,X77,X75,X86,X84,X82] : (s(bool,happ(s(fun(X78,bool),happ(s(fun(X75,fun(X78,bool)),X79),s(X75,sK10(X77,X76,X75)))),s(X78,X80))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X75,fun(X78,bool)),X79),s(fun(X76,fun(X81,bool)),X82),s('type.semanticPrimitives.result'(X75,X76),X77),s('type.semanticPrimitives.result'(X78,X81),'const.semanticPrimitives.Rval_1'(s(X78,X80))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X83,fun(X76,bool)),X84),s('type.semanticPrimitives.error_result'(X83),X85),s('type.semanticPrimitives.error_result'(X76),sK11(X77,X76,X75)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X86,fun(X75,bool)),X87),s(fun(X83,fun(X76,bool)),X84),s('type.semanticPrimitives.result'(X86,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),X85))),s('type.semanticPrimitives.result'(X75,X76),X77)))) )),
  inference(superposition,[],[f231,f5315])).
fof(f23687,plain,(
  ( ! [X94,X92,X90,X88,X99,X97,X95,X93,X91,X89,X100,X98,X96] : (s(bool,happ(s(fun(X88,bool),happ(s(fun(X91,fun(X88,bool)),X92),s(X91,X93))),s(X88,sK10(X90,X89,X88)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(X88,bool)),X92),s(fun(X94,fun(X89,bool)),X95),s('type.semanticPrimitives.result'(X91,X94),'const.semanticPrimitives.Rval_1'(s(X91,X93))),s('type.semanticPrimitives.result'(X88,X89),X90))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X96,fun(X89,bool)),X97),s('type.semanticPrimitives.error_result'(X96),X98),s('type.semanticPrimitives.error_result'(X89),sK11(X90,X89,X88)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X99,fun(X88,bool)),X100),s(fun(X96,fun(X89,bool)),X97),s('type.semanticPrimitives.result'(X99,X96),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X96),X98))),s('type.semanticPrimitives.result'(X88,X89),X90)))) )),
  inference(superposition,[],[f231,f5315])).
fof(f23688,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X110,X108,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),X103))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X101,X102),X104),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X102),X105))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X106,fun(X102,bool)),X107),s('type.semanticPrimitives.error_result'(X106),X108),s('type.semanticPrimitives.error_result'(X102),sK11(X103,X102,X101)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X109,fun(X101,bool)),X110),s(fun(X106,fun(X102,bool)),X107),s('type.semanticPrimitives.result'(X109,X106),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X106),X108))),s('type.semanticPrimitives.result'(X101,X102),X103)))) )),
  inference(superposition,[],[f394,f5315])).
fof(f23690,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120] : (s('type.semanticPrimitives.result'(X120,X121),X122) != s('type.semanticPrimitives.result'(X120,X121),X123) | s(X120,sK10(X122,X121,X120)) = s(X120,sK10(X123,X121,X120)) | s('type.semanticPrimitives.result'(X120,X121),X123) = s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),sK11(X123,X121,X120)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.error_result'(X124),X126),s('type.semanticPrimitives.error_result'(X121),sK11(X122,X121,X120)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X127,fun(X120,bool)),X128),s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.result'(X127,X124),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X124),X126))),s('type.semanticPrimitives.result'(X120,X121),X122)))) )),
  inference(superposition,[],[f3085,f5315])).
fof(f23691,plain,(
  ( ! [X134,X132,X130,X140,X138,X136,X135,X133,X131,X129,X141,X139,X137] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X129,fun(X132,bool)),X133),s(fun(X130,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X129,X130),X131),s('type.semanticPrimitives.result'(X132,X134),X136))) | s('type.semanticPrimitives.result'(X132,X134),X136) = s('type.semanticPrimitives.result'(X132,X134),'const.semanticPrimitives.Rval_1'(s(X132,sK10(X136,X134,X132)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X137,fun(X130,bool)),X138),s('type.semanticPrimitives.error_result'(X137),X139),s('type.semanticPrimitives.error_result'(X130),sK11(X131,X130,X129)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X140,fun(X129,bool)),X141),s(fun(X137,fun(X130,bool)),X138),s('type.semanticPrimitives.result'(X140,X137),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X137),X139))),s('type.semanticPrimitives.result'(X129,X130),X131)))) )),
  inference(superposition,[],[f3215,f5315])).
fof(f23692,plain,(
  ( ! [X146,X144,X154,X152,X142,X151,X149,X147,X145,X153,X143,X150,X148] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X142,fun(X145,bool)),X146),s(fun(X143,fun(X147,bool)),X148),s('type.semanticPrimitives.result'(X142,X143),X144),s('type.semanticPrimitives.result'(X145,X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),X149))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X150,fun(X143,bool)),X151),s('type.semanticPrimitives.error_result'(X150),X152),s('type.semanticPrimitives.error_result'(X143),sK11(X144,X143,X142)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X153,fun(X142,bool)),X154),s(fun(X150,fun(X143,bool)),X151),s('type.semanticPrimitives.result'(X153,X150),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X150),X152))),s('type.semanticPrimitives.result'(X142,X143),X144)))) )),
  inference(superposition,[],[f3299,f5315])).
fof(f23693,plain,(
  ( ! [X158,X156,X167,X165,X163,X161,X159,X157,X155,X166,X164,X162,X160] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X158,fun(X155,bool)),X159),s(fun(X160,fun(X156,bool)),X161),s('type.semanticPrimitives.result'(X158,X160),X162),s('type.semanticPrimitives.result'(X155,X156),X157))) | s('type.semanticPrimitives.result'(X158,X160),X162) = s('type.semanticPrimitives.result'(X158,X160),'const.semanticPrimitives.Rval_1'(s(X158,sK10(X162,X160,X158)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X163,fun(X156,bool)),X164),s('type.semanticPrimitives.error_result'(X163),X165),s('type.semanticPrimitives.error_result'(X156),sK11(X157,X156,X155)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X166,fun(X155,bool)),X167),s(fun(X163,fun(X156,bool)),X164),s('type.semanticPrimitives.result'(X166,X163),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X163),X165))),s('type.semanticPrimitives.result'(X155,X156),X157)))) )),
  inference(superposition,[],[f4953,f5315])).
fof(f23694,plain,(
  ( ! [X177,X175,X173,X171,X169,X180,X178,X176,X174,X172,X170,X168,X179] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X171,fun(X168,bool)),X172),s(fun(X173,fun(X169,bool)),X174),s('type.semanticPrimitives.result'(X171,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),X175))),s('type.semanticPrimitives.result'(X168,X169),X170))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X176,fun(X169,bool)),X177),s('type.semanticPrimitives.error_result'(X176),X178),s('type.semanticPrimitives.error_result'(X169),sK11(X170,X169,X168)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X179,fun(X168,bool)),X180),s(fun(X176,fun(X169,bool)),X177),s('type.semanticPrimitives.result'(X179,X176),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X176),X178))),s('type.semanticPrimitives.result'(X168,X169),X170)))) )),
  inference(superposition,[],[f5104,f5315])).
fof(f23695,plain,(
  ( ! [X191,X189,X187,X185,X192,X182,X190,X188,X186,X184,X193,X183,X181] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X181,fun(X184,bool)),X185),s(fun(X182,fun(X186,bool)),X187),s('type.semanticPrimitives.result'(X181,X182),X183),s('type.semanticPrimitives.result'(X184,X186),'const.semanticPrimitives.Rval_1'(s(X184,X188))))) | s(bool,'F_0') = s(bool,happ(s(fun(X184,bool),happ(s(fun(X181,fun(X184,bool)),X185),s(X181,sK10(X183,X182,X181)))),s(X184,X188))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X189,fun(X182,bool)),X190),s('type.semanticPrimitives.error_result'(X189),X191),s('type.semanticPrimitives.error_result'(X182),sK11(X183,X182,X181)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X192,fun(X181,bool)),X193),s(fun(X189,fun(X182,bool)),X190),s('type.semanticPrimitives.result'(X192,X189),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X189),X191))),s('type.semanticPrimitives.result'(X181,X182),X183)))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23696,plain,(
  ( ! [X198,X196,X194,X206,X204,X202,X200,X199,X197,X195,X205,X203,X201] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X197,fun(X194,bool)),X198),s(fun(X199,fun(X195,bool)),X200),s('type.semanticPrimitives.result'(X197,X199),'const.semanticPrimitives.Rval_1'(s(X197,X201))),s('type.semanticPrimitives.result'(X194,X195),X196))) | s(bool,'F_0') = s(bool,happ(s(fun(X194,bool),happ(s(fun(X197,fun(X194,bool)),X198),s(X197,X201))),s(X194,sK10(X196,X195,X194)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X202,fun(X195,bool)),X203),s('type.semanticPrimitives.error_result'(X202),X204),s('type.semanticPrimitives.error_result'(X195),sK11(X196,X195,X194)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X205,fun(X194,bool)),X206),s(fun(X202,fun(X195,bool)),X203),s('type.semanticPrimitives.result'(X205,X202),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X202),X204))),s('type.semanticPrimitives.result'(X194,X195),X196)))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23721,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442,X448,X439] : (s('type.semanticPrimitives.result'(X439,X440),X441) != s('type.semanticPrimitives.result'(X439,X440),'const.semanticPrimitives.Rval_1'(s(X439,sK10(X442,X440,X439)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X439,X440),bool),X443),s('type.semanticPrimitives.result'(X439,X440),'const.semanticPrimitives.Rval_1'(s(X439,sK10(X441,X440,X439))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X439,X440),bool),X443),s('type.semanticPrimitives.result'(X439,X440),X442)))) | s('type.semanticPrimitives.result'(X439,X440),X442) = s('type.semanticPrimitives.result'(X439,X440),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X440),sK11(X442,X440,X439)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X444,fun(X440,bool)),X445),s('type.semanticPrimitives.error_result'(X444),X446),s('type.semanticPrimitives.error_result'(X440),sK11(X441,X440,X439)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X447,fun(X439,bool)),X448),s(fun(X444,fun(X440,bool)),X445),s('type.semanticPrimitives.result'(X447,X444),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X444),X446))),s('type.semanticPrimitives.result'(X439,X440),X441)))) )),
  inference(superposition,[],[f3092,f5315])).
fof(f23724,plain,(
  ( ! [X476,X472,X474,X469,X471,X475,X477,X473,X468,X470] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X468,X469),X471),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X468,X469),X470))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X468,X469),X471),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X468,X469),X472))) | s('type.semanticPrimitives.result'(X468,X469),'const.semanticPrimitives.Rval_1'(s(X468,sK10(X470,X469,X468)))) = s('type.semanticPrimitives.result'(X468,X469),'const.semanticPrimitives.Rval_1'(s(X468,sK10(X472,X469,X468)))) | s('type.semanticPrimitives.result'(X468,X469),X472) = s('type.semanticPrimitives.result'(X468,X469),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X469),sK11(X472,X469,X468)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X473,fun(X469,bool)),X474),s('type.semanticPrimitives.error_result'(X473),X475),s('type.semanticPrimitives.error_result'(X469),sK11(X470,X469,X468)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X476,fun(X468,bool)),X477),s(fun(X473,fun(X469,bool)),X474),s('type.semanticPrimitives.result'(X476,X473),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X473),X475))),s('type.semanticPrimitives.result'(X468,X469),X470)))) )),
  inference(superposition,[],[f3094,f5315])).
fof(f23726,plain,(
  ( ! [X492,X494,X488,X490,X496,X493,X495,X489,X491,X497] : (s('type.semanticPrimitives.result'(X488,X489),X490) != s('type.semanticPrimitives.result'(X488,X489),X491) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X488,X489),X492),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X488,X489),'const.semanticPrimitives.Rval_1'(s(X488,sK10(X490,X489,X488)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X488,X489),X492),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X488,X489),'const.semanticPrimitives.Rval_1'(s(X488,sK10(X491,X489,X488)))))) | s('type.semanticPrimitives.result'(X488,X489),X491) = s('type.semanticPrimitives.result'(X488,X489),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X489),sK11(X491,X489,X488)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X493,fun(X489,bool)),X494),s('type.semanticPrimitives.error_result'(X493),X495),s('type.semanticPrimitives.error_result'(X489),sK11(X490,X489,X488)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X496,fun(X488,bool)),X497),s(fun(X493,fun(X489,bool)),X494),s('type.semanticPrimitives.result'(X496,X493),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X493),X495))),s('type.semanticPrimitives.result'(X488,X489),X490)))) )),
  inference(superposition,[],[f3096,f5315])).
fof(f23732,plain,(
  ( ! [X569,X571,X565,X567,X563,X572,X568,X570,X564,X566] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X563,X564),bool),X566),s('type.semanticPrimitives.result'(X563,X564),X565)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X563,X564),bool),X566),s('type.semanticPrimitives.result'(X563,X564),X567)))) | s('type.semanticPrimitives.result'(X563,X564),X567) != s('type.semanticPrimitives.result'(X563,X564),'const.semanticPrimitives.Rval_1'(s(X563,sK10(X565,X564,X563)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X568,fun(X564,bool)),X569),s('type.semanticPrimitives.error_result'(X568),X570),s('type.semanticPrimitives.error_result'(X564),sK11(X565,X564,X563)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X571,fun(X563,bool)),X572),s(fun(X568,fun(X564,bool)),X569),s('type.semanticPrimitives.result'(X571,X568),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X568),X570))),s('type.semanticPrimitives.result'(X563,X564),X565)))) )),
  inference(superposition,[],[f194,f5315])).
fof(f23733,plain,(
  ( ! [X573,X575,X580,X576,X578,X574,X581,X577,X579] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X573,X574),bool),X576),s('type.semanticPrimitives.result'(X573,X574),X575)))) | s('type.semanticPrimitives.result'(X573,X574),'const.semanticPrimitives.Rval_1'(s(X573,sK10(X575,X574,X573)))) = s('type.semanticPrimitives.result'(X573,X574),sK9('const.semanticPrimitives.Rval_1'(s(X573,sK10(X575,X574,X573))),X576,'type.semanticPrimitives.result'(X573,X574))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X577,fun(X574,bool)),X578),s('type.semanticPrimitives.error_result'(X577),X579),s('type.semanticPrimitives.error_result'(X574),sK11(X575,X574,X573)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X580,fun(X573,bool)),X581),s(fun(X577,fun(X574,bool)),X578),s('type.semanticPrimitives.result'(X580,X577),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X577),X579))),s('type.semanticPrimitives.result'(X573,X574),X575)))) )),
  inference(superposition,[],[f195,f5315])).
fof(f23735,plain,(
  ( ! [X600,X596,X598,X592,X594,X601,X597,X599,X593,X595] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X592,X593),X595),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X592,X593),X594))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X592,X593),X595),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X592,X593),X596))) | s('type.semanticPrimitives.result'(X592,X593),X596) = s('type.semanticPrimitives.result'(X592,X593),'const.semanticPrimitives.Rval_1'(s(X592,sK10(X594,X593,X592)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X597,fun(X593,bool)),X598),s('type.semanticPrimitives.error_result'(X597),X599),s('type.semanticPrimitives.error_result'(X593),sK11(X594,X593,X592)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X600,fun(X592,bool)),X601),s(fun(X597,fun(X593,bool)),X598),s('type.semanticPrimitives.result'(X600,X597),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X597),X599))),s('type.semanticPrimitives.result'(X592,X593),X594)))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23737,plain,(
  ( ! [X621,X617,X619,X613,X615,X620,X616,X618,X612,X614] : (s('type.semanticPrimitives.result'(X612,X613),X614) != s('type.semanticPrimitives.result'(X612,X613),X615) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X612,X613),X616),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X612,X613),X615))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X612,X613),X616),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X612,X613),'const.semanticPrimitives.Rval_1'(s(X612,sK10(X614,X613,X612)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X617,fun(X613,bool)),X618),s('type.semanticPrimitives.error_result'(X617),X619),s('type.semanticPrimitives.error_result'(X613),sK11(X614,X613,X612)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X620,fun(X612,bool)),X621),s(fun(X617,fun(X613,bool)),X618),s('type.semanticPrimitives.result'(X620,X617),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X617),X619))),s('type.semanticPrimitives.result'(X612,X613),X614)))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23744,plain,(
  ( ! [X705,X699,X707,X700,X702,X704,X706,X701,X703] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X699,X700),bool),X702),s('type.semanticPrimitives.result'(X699,X700),X701)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X699,X700),bool),X702),s('type.semanticPrimitives.result'(X699,X700),sK9('const.semanticPrimitives.Rval_1'(s(X699,sK10(X701,X700,X699))),X702,'type.semanticPrimitives.result'(X699,X700))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X703,fun(X700,bool)),X704),s('type.semanticPrimitives.error_result'(X703),X705),s('type.semanticPrimitives.error_result'(X700),sK11(X701,X700,X699)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X706,fun(X699,bool)),X707),s(fun(X703,fun(X700,bool)),X704),s('type.semanticPrimitives.result'(X706,X703),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X703),X705))),s('type.semanticPrimitives.result'(X699,X700),X701)))) )),
  inference(superposition,[],[f471,f5315])).
fof(f23746,plain,(
  ( ! [X724,X726,X720,X722,X718,X725,X727,X721,X723,X719] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X718,X719),X721),X722) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X718,X719),X721),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X718,X719),X720))) | s('type.semanticPrimitives.result'(X718,X719),sK10(X722,X721,'type.semanticPrimitives.result'(X718,X719))) = s('type.semanticPrimitives.result'(X718,X719),'const.semanticPrimitives.Rval_1'(s(X718,sK10(X720,X719,X718)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X718,X719),X721),X722) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X718,X719),X721),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X721),sK11(X722,X721,'type.semanticPrimitives.result'(X718,X719))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X723,fun(X719,bool)),X724),s('type.semanticPrimitives.error_result'(X723),X725),s('type.semanticPrimitives.error_result'(X719),sK11(X720,X719,X718)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X726,fun(X718,bool)),X727),s(fun(X723,fun(X719,bool)),X724),s('type.semanticPrimitives.result'(X726,X723),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X723),X725))),s('type.semanticPrimitives.result'(X718,X719),X720)))) )),
  inference(superposition,[],[f3085,f5315])).
fof(f23751,plain,(
  ( ! [X796,X786,X784,X790,X788,X795,X793,X797,X787,X785,X791,X789,X794,X792] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X784,X785),fun(X787,bool)),X788),s(fun(X789,fun(X790,bool)),X791),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X784,X785),X789),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X784,X785),X786))),s('type.semanticPrimitives.result'(X787,X790),'const.semanticPrimitives.Rval_1'(s(X787,X792))))) | s(bool,'F_0') = s(bool,happ(s(fun(X787,bool),happ(s(fun('type.semanticPrimitives.result'(X784,X785),fun(X787,bool)),X788),s('type.semanticPrimitives.result'(X784,X785),'const.semanticPrimitives.Rval_1'(s(X784,sK10(X786,X785,X784)))))),s(X787,X792))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X793,fun(X785,bool)),X794),s('type.semanticPrimitives.error_result'(X793),X795),s('type.semanticPrimitives.error_result'(X785),sK11(X786,X785,X784)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X796,fun(X784,bool)),X797),s(fun(X793,fun(X785,bool)),X794),s('type.semanticPrimitives.result'(X796,X793),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X793),X795))),s('type.semanticPrimitives.result'(X784,X785),X786)))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23752,plain,(
  ( ! [X798,X810,X808,X802,X800,X806,X804,X799,X811,X809,X803,X801,X807,X805] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X801,fun('type.semanticPrimitives.result'(X798,X799),bool)),X802),s(fun(X803,fun(X804,bool)),X805),s('type.semanticPrimitives.result'(X801,X803),'const.semanticPrimitives.Rval_1'(s(X801,X806))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X798,X799),X804),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X798,X799),X800))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X798,X799),bool),happ(s(fun(X801,fun('type.semanticPrimitives.result'(X798,X799),bool)),X802),s(X801,X806))),s('type.semanticPrimitives.result'(X798,X799),'const.semanticPrimitives.Rval_1'(s(X798,sK10(X800,X799,X798)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X807,fun(X799,bool)),X808),s('type.semanticPrimitives.error_result'(X807),X809),s('type.semanticPrimitives.error_result'(X799),sK11(X800,X799,X798)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X810,fun(X798,bool)),X811),s(fun(X807,fun(X799,bool)),X808),s('type.semanticPrimitives.result'(X810,X807),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X807),X809))),s('type.semanticPrimitives.result'(X798,X799),X800)))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23754,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X5,bool)),X7),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X6,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X3))),s('type.semanticPrimitives.result'(X5,X1),X4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X5,bool)),X9),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X8,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X3))),s('type.semanticPrimitives.result'(X5,X1),X4))) | s('type.semanticPrimitives.result'(X5,X1),X4) = s('type.semanticPrimitives.result'(X5,X1),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X4,X1,X5))))) )),
  inference(duplicate_literal_removal,[],[f23379])).
fof(f23379,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X5,bool)),X7),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X6,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X3))),s('type.semanticPrimitives.result'(X5,X1),X4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X5,bool)),X9),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X8,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X3))),s('type.semanticPrimitives.result'(X5,X1),X4))) | s('type.semanticPrimitives.result'(X5,X1),X4) = s('type.semanticPrimitives.result'(X5,X1),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X4,X1,X5)))) | s('type.semanticPrimitives.result'(X5,X1),X4) = s('type.semanticPrimitives.result'(X5,X1),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X4,X1,X5))))) )),
  inference(superposition,[],[f5315,f5315])).
fof(f23774,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120] : (s('type.semanticPrimitives.result'(X120,X121),X122) = s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X120,X121),X122)),X123,'type.semanticPrimitives.result'(X120,X121)),X121,X120)))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X127,fun(X120,bool)),X128),s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.result'(X127,X124),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X124),X126))),s('type.semanticPrimitives.result'(X120,X121),X122))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.error_result'(X124),X126),s('type.semanticPrimitives.error_result'(X121),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X120,X121),X122)),X123,'type.semanticPrimitives.result'(X120,X121)),X121,X120))))) )),
  inference(forward_demodulation,[],[f23411,f7120])).
fof(f23411,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X127,fun(X120,bool)),X128),s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.result'(X127,X124),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X124),X126))),s('type.semanticPrimitives.result'(X120,X121),X122))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X124,fun(X121,bool)),X125),s('type.semanticPrimitives.error_result'(X124),X126),s('type.semanticPrimitives.error_result'(X121),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X120,X121),X122)),X123,'type.semanticPrimitives.result'(X120,X121)),X121,X120)))) | s('type.semanticPrimitives.result'(X120,X121),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X120,X121),X122)),X123,'type.semanticPrimitives.result'(X120,X121))) = s('type.semanticPrimitives.result'(X120,X121),'const.semanticPrimitives.Rval_1'(s(X120,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X120,X121),X122)),X123,'type.semanticPrimitives.result'(X120,X121)),X121,X120))))) )),
  inference(superposition,[],[f5315,f7120])).
fof(f24053,plain,(
  ( ! [X391,X397,X399,X393,X395,X396,X398,X392,X394,X400] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X391,X392),X393))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X391,X392),X395))) | s('type.semanticPrimitives.result'(X391,X392),X395) = s('type.semanticPrimitives.result'(X391,X392),'const.semanticPrimitives.Rval_1'(s(X391,sK10(X395,X392,X391)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X396,fun(X392,bool)),X397),s('type.semanticPrimitives.error_result'(X396),X398),s('type.semanticPrimitives.error_result'(X392),sK11(X393,X392,X391)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X399,fun(X391,bool)),X400),s(fun(X396,fun(X392,bool)),X397),s('type.semanticPrimitives.result'(X399,X396),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X396),X398))),s('type.semanticPrimitives.result'(X391,X392),X393)))) )),
  inference(subsumption_resolution,[],[f23716,f213])).
fof(f23716,plain,(
  ( ! [X391,X397,X399,X393,X395,X396,X398,X392,X394,X400] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X391,X392),X393))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X391,X392),X395))) | s('type.semanticPrimitives.result'(X391,X392),'const.semanticPrimitives.Rval_1'(s(X391,sK10(X393,X392,X391)))) = s('type.semanticPrimitives.result'(X391,X392),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X392),sK11(X395,X392,X391)))) | s('type.semanticPrimitives.result'(X391,X392),X395) = s('type.semanticPrimitives.result'(X391,X392),'const.semanticPrimitives.Rval_1'(s(X391,sK10(X395,X392,X391)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X396,fun(X392,bool)),X397),s('type.semanticPrimitives.error_result'(X396),X398),s('type.semanticPrimitives.error_result'(X392),sK11(X393,X392,X391)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X399,fun(X391,bool)),X400),s(fun(X396,fun(X392,bool)),X397),s('type.semanticPrimitives.result'(X399,X396),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X396),X398))),s('type.semanticPrimitives.result'(X391,X392),X393)))) )),
  inference(superposition,[],[f3078,f5315])).
fof(f24055,plain,(
  ( ! [X412,X414,X420,X416,X418,X413,X411,X417,X419] : (s('type.semanticPrimitives.result'(X411,X412),X413) != s('type.semanticPrimitives.result'(X411,X412),X414) | s('type.semanticPrimitives.result'(X411,X412),X414) = s('type.semanticPrimitives.result'(X411,X412),'const.semanticPrimitives.Rval_1'(s(X411,sK10(X414,X412,X411)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X416,fun(X412,bool)),X417),s('type.semanticPrimitives.error_result'(X416),X418),s('type.semanticPrimitives.error_result'(X412),sK11(X413,X412,X411)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X419,fun(X411,bool)),X420),s(fun(X416,fun(X412,bool)),X417),s('type.semanticPrimitives.result'(X419,X416),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X416),X418))),s('type.semanticPrimitives.result'(X411,X412),X413)))) )),
  inference(subsumption_resolution,[],[f23718,f394])).
fof(f23718,plain,(
  ( ! [X412,X414,X420,X416,X418,X413,X415,X411,X417,X419] : (s('type.semanticPrimitives.result'(X411,X412),X413) != s('type.semanticPrimitives.result'(X411,X412),X414) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X411,X412),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X411,X412),'const.semanticPrimitives.Rval_1'(s(X411,sK10(X413,X412,X411)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X411,X412),X415),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X411,X412),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X412),sK11(X414,X412,X411)))))) | s('type.semanticPrimitives.result'(X411,X412),X414) = s('type.semanticPrimitives.result'(X411,X412),'const.semanticPrimitives.Rval_1'(s(X411,sK10(X414,X412,X411)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X416,fun(X412,bool)),X417),s('type.semanticPrimitives.error_result'(X416),X418),s('type.semanticPrimitives.error_result'(X412),sK11(X413,X412,X411)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X419,fun(X411,bool)),X420),s(fun(X416,fun(X412,bool)),X417),s('type.semanticPrimitives.result'(X419,X416),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X416),X418))),s('type.semanticPrimitives.result'(X411,X412),X413)))) )),
  inference(superposition,[],[f3080,f5315])).
fof(f24057,plain,(
  ( ! [X422,X428,X424,X426,X421,X423,X429,X425,X427] : (s('type.semanticPrimitives.result'(X421,X422),X423) != s('type.semanticPrimitives.result'(X421,X422),'const.semanticPrimitives.Rval_1'(s(X421,X424))) | s(X421,X424) = s(X421,sK10('const.semanticPrimitives.Rval_1'(s(X421,sK10(X423,X422,X421))),X422,X421)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X425,fun(X422,bool)),X426),s('type.semanticPrimitives.error_result'(X425),X427),s('type.semanticPrimitives.error_result'(X422),sK11(X423,X422,X421)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X428,fun(X421,bool)),X429),s(fun(X425,fun(X422,bool)),X426),s('type.semanticPrimitives.result'(X428,X425),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X425),X427))),s('type.semanticPrimitives.result'(X421,X422),X423)))) )),
  inference(subsumption_resolution,[],[f23719,f213])).
fof(f23719,plain,(
  ( ! [X422,X428,X424,X426,X421,X423,X429,X425,X427] : (s('type.semanticPrimitives.result'(X421,X422),X423) != s('type.semanticPrimitives.result'(X421,X422),'const.semanticPrimitives.Rval_1'(s(X421,X424))) | s(X421,X424) = s(X421,sK10('const.semanticPrimitives.Rval_1'(s(X421,sK10(X423,X422,X421))),X422,X421)) | s('type.semanticPrimitives.result'(X421,X422),'const.semanticPrimitives.Rval_1'(s(X421,sK10(X423,X422,X421)))) = s('type.semanticPrimitives.result'(X421,X422),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X422),sK11('const.semanticPrimitives.Rval_1'(s(X421,sK10(X423,X422,X421))),X422,X421)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X425,fun(X422,bool)),X426),s('type.semanticPrimitives.error_result'(X425),X427),s('type.semanticPrimitives.error_result'(X422),sK11(X423,X422,X421)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X428,fun(X421,bool)),X429),s(fun(X425,fun(X422,bool)),X426),s('type.semanticPrimitives.result'(X428,X425),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X425),X427))),s('type.semanticPrimitives.result'(X421,X422),X423)))) )),
  inference(superposition,[],[f3085,f5315])).
fof(f24059,plain,(
  ( ! [X430,X436,X438,X432,X434,X431,X437,X433,X435] : (s('type.semanticPrimitives.result'(X430,X431),X432) != s('type.semanticPrimitives.result'(X430,X431),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X431),X433))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X434,fun(X431,bool)),X435),s('type.semanticPrimitives.error_result'(X434),X436),s('type.semanticPrimitives.error_result'(X431),sK11(X432,X431,X430)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X437,fun(X430,bool)),X438),s(fun(X434,fun(X431,bool)),X435),s('type.semanticPrimitives.result'(X437,X434),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X434),X436))),s('type.semanticPrimitives.result'(X430,X431),X432)))) )),
  inference(subsumption_resolution,[],[f23720,f213])).
fof(f23720,plain,(
  ( ! [X430,X436,X438,X432,X434,X431,X437,X433,X435] : (s('type.semanticPrimitives.result'(X430,X431),X432) != s('type.semanticPrimitives.result'(X430,X431),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X431),X433))) | s('type.semanticPrimitives.result'(X430,X431),'const.semanticPrimitives.Rval_1'(s(X430,sK10(X432,X431,X430)))) = s('type.semanticPrimitives.result'(X430,X431),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X431),sK11('const.semanticPrimitives.Rval_1'(s(X430,sK10(X432,X431,X430))),X431,X430)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X434,fun(X431,bool)),X435),s('type.semanticPrimitives.error_result'(X434),X436),s('type.semanticPrimitives.error_result'(X431),sK11(X432,X431,X430)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X437,fun(X430,bool)),X438),s(fun(X434,fun(X431,bool)),X435),s('type.semanticPrimitives.result'(X437,X434),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X434),X436))),s('type.semanticPrimitives.result'(X430,X431),X432)))) )),
  inference(superposition,[],[f3087,f5315])).
fof(f23380,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X20,X18,X16] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X14,fun(X17,bool)),X18),s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.result'(X14,X10),X13),s('type.semanticPrimitives.result'(X17,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X15,X11,X16)))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X19,fun(X16,bool)),X20),s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.result'(X19,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK11(X13,X10,X14)))),s('type.semanticPrimitives.result'(X16,X11),X15))) | s('type.semanticPrimitives.result'(X16,X11),X15) = s('type.semanticPrimitives.result'(X16,X11),'const.semanticPrimitives.Rval_1'(s(X16,sK10(X15,X11,X16)))) | s('type.semanticPrimitives.result'(X14,X10),X13) = s('type.semanticPrimitives.result'(X14,X10),'const.semanticPrimitives.Rval_1'(s(X14,sK10(X13,X10,X14))))) )),
  inference(superposition,[],[f5315,f5312])).
fof(f23705,plain,(
  ( ! [X292,X294,X300,X296,X298,X293,X295,X301,X297,X299] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X292,X293),X294),X295) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X292,X293),X294),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X292,X293),X296))) | s('type.semanticPrimitives.result'(X292,X293),sK10(X295,X294,'type.semanticPrimitives.result'(X292,X293))) = s('type.semanticPrimitives.result'(X292,X293),'const.semanticPrimitives.Rval_1'(s(X292,sK10(X296,X293,X292)))) | s('type.semanticPrimitives.result'(X292,X293),X296) = s('type.semanticPrimitives.result'(X292,X293),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X293),sK11(X296,X293,X292)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X297,fun(X294,bool)),X298),s('type.semanticPrimitives.error_result'(X297),X299),s('type.semanticPrimitives.error_result'(X294),sK11(X295,X294,'type.semanticPrimitives.result'(X292,X293))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X300,fun('type.semanticPrimitives.result'(X292,X293),bool)),X301),s(fun(X297,fun(X294,bool)),X298),s('type.semanticPrimitives.result'(X300,X297),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X297),X299))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X292,X293),X294),X295)))) )),
  inference(superposition,[],[f3094,f5315])).
fof(f23706,plain,(
  ( ! [X302,X308,X310,X304,X306,X303,X309,X311,X305,X307] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X302,X303),X304),X305) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X302,X303),X304),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X302,X303),X306))) | s('type.semanticPrimitives.result'(X302,X303),X306) = s('type.semanticPrimitives.result'(X302,X303),'const.semanticPrimitives.Rval_1'(s(X302,sK10(sK10(X305,X304,'type.semanticPrimitives.result'(X302,X303)),X303,X302)))) | s('type.semanticPrimitives.result'(X302,X303),sK10(X305,X304,'type.semanticPrimitives.result'(X302,X303))) = s('type.semanticPrimitives.result'(X302,X303),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X303),sK11(sK10(X305,X304,'type.semanticPrimitives.result'(X302,X303)),X303,X302)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X307,fun(X304,bool)),X308),s('type.semanticPrimitives.error_result'(X307),X309),s('type.semanticPrimitives.error_result'(X304),sK11(X305,X304,'type.semanticPrimitives.result'(X302,X303))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X310,fun('type.semanticPrimitives.result'(X302,X303),bool)),X311),s(fun(X307,fun(X304,bool)),X308),s('type.semanticPrimitives.result'(X310,X307),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X307),X309))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X302,X303),X304),X305)))) )),
  inference(superposition,[],[f3094,f5315])).
fof(f23707,plain,(
  ( ! [X313,X315,X321,X316,X318,X312,X314,X320,X317,X319] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X312,X313),X314),X315) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X312,X313),X314),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X312,X313),X316))) | s('type.semanticPrimitives.result'(X312,X313),sK10(X315,X314,'type.semanticPrimitives.result'(X312,X313))) = s('type.semanticPrimitives.result'(X312,X313),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X313),sK11(X316,X313,X312)))) | s('type.semanticPrimitives.result'(X312,X313),X316) = s('type.semanticPrimitives.result'(X312,X313),'const.semanticPrimitives.Rval_1'(s(X312,sK10(X316,X313,X312)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X317,fun(X314,bool)),X318),s('type.semanticPrimitives.error_result'(X317),X319),s('type.semanticPrimitives.error_result'(X314),sK11(X315,X314,'type.semanticPrimitives.result'(X312,X313))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X320,fun('type.semanticPrimitives.result'(X312,X313),bool)),X321),s(fun(X317,fun(X314,bool)),X318),s('type.semanticPrimitives.result'(X320,X317),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X317),X319))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X312,X313),X314),X315)))) )),
  inference(superposition,[],[f3078,f5315])).
fof(f23708,plain,(
  ( ! [X325,X327,X323,X329,X331,X324,X326,X322,X328,X330] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X322,X323),X324),X325) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X322,X323),X324),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X322,X323),X326))) | s('type.semanticPrimitives.result'(X322,X323),X326) = s('type.semanticPrimitives.result'(X322,X323),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X323),sK11(sK10(X325,X324,'type.semanticPrimitives.result'(X322,X323)),X323,X322)))) | s('type.semanticPrimitives.result'(X322,X323),sK10(X325,X324,'type.semanticPrimitives.result'(X322,X323))) = s('type.semanticPrimitives.result'(X322,X323),'const.semanticPrimitives.Rval_1'(s(X322,sK10(sK10(X325,X324,'type.semanticPrimitives.result'(X322,X323)),X323,X322)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X327,fun(X324,bool)),X328),s('type.semanticPrimitives.error_result'(X327),X329),s('type.semanticPrimitives.error_result'(X324),sK11(X325,X324,'type.semanticPrimitives.result'(X322,X323))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X330,fun('type.semanticPrimitives.result'(X322,X323),bool)),X331),s(fun(X327,fun(X324,bool)),X328),s('type.semanticPrimitives.result'(X330,X327),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X327),X329))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X322,X323),X324),X325)))) )),
  inference(superposition,[],[f3078,f5315])).
fof(f230,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.error_result'(X2),X6),s('type.semanticPrimitives.error_result'(X3),X5))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X4),s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X6))),s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X5)))))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.error_result'(X2),X6),s('type.semanticPrimitives.error_result'(X3),X5))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X4),s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X6))),s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X5)))))),
  inference(flattening,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.error_result'(X2),X6),s('type.semanticPrimitives.error_result'(X3),X5))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X4),s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X6))),s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X5)))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X7,X8,X9] : ! [X28,X29,X30,X12] : s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.error_result'(X8),X30),s('type.semanticPrimitives.error_result'(X9),X29))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X28),s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X30))),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X29)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.evalProps.result_rel_def|split|1')).
fof(f12311,plain,(
  ( ! [X94,X92,X101,X99,X97,X95,X93,X100,X98,X96] : (s('type.semanticPrimitives.result'(bool,X100),X101) != s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X95,fun(X96,bool)),X97),s('type.semanticPrimitives.error_result'(X95),X98),s('type.semanticPrimitives.error_result'(X96),X99))))) | s(bool,sK10(X101,X100,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X92,fun(X93,bool)),X94),s(fun(X95,fun(X96,bool)),X97),s('type.semanticPrimitives.result'(X92,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),X98))),s('type.semanticPrimitives.result'(X93,X96),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X96),X99))))) | s('type.semanticPrimitives.result'(bool,X100),X101) = s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X100),sK11(X101,X100,bool))))) )),
  inference(superposition,[],[f3085,f230])).
fof(f19739,plain,(
  ( ! [X872,X866,X864,X870,X868,X873,X867,X865,X871,X869] : (s('type.semanticPrimitives.result'(bool,X872),X873) != s('type.semanticPrimitives.result'(bool,X872),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK10(X873,X872,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X864,fun(X865,bool)),X866),s(fun(X867,fun(X868,bool)),X869),s('type.semanticPrimitives.result'(X864,X867),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X867),X870))),s('type.semanticPrimitives.result'(X865,X868),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X868),X871))))) | s('type.semanticPrimitives.result'(bool,X872),X873) = s('type.semanticPrimitives.result'(bool,X872),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X872),sK11(X873,X872,bool)))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X867,fun(X868,bool)),X869),s('type.semanticPrimitives.error_result'(X867),X870),s('type.semanticPrimitives.error_result'(X868),X871)))) )),
  inference(superposition,[],[f3085,f5316])).
fof(f5316,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X15))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.error_result'(X11),X14),s('type.semanticPrimitives.error_result'(X12),X15)))) )),
  inference(superposition,[],[f230,f150])).
fof(f5317,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.error_result'(X19),X22),s('type.semanticPrimitives.error_result'(X20),X23))) | s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f230,f273])).
fof(f5318,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X25,X32] : (s(bool,X33) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X28,fun(X29,bool)),X30),s('type.semanticPrimitives.error_result'(X28),X31),s('type.semanticPrimitives.error_result'(X29),X32))) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X25,fun(X26,bool)),X27),s(fun(X28,fun(X29,bool)),X30),s('type.semanticPrimitives.result'(X25,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),X31))),s('type.semanticPrimitives.result'(X26,X29),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X29),X32)))))) )),
  inference(superposition,[],[f230,f273])).
fof(f5382,plain,(
  ( ! [X420,X422,X428,X424,X426,X421,X423,X429,X425,X427] : (s('type.semanticPrimitives.result'(bool,X428),'const.semanticPrimitives.Rval_1'(s(bool,X429))) != s('type.semanticPrimitives.result'(bool,X428),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X423,fun(X424,bool)),X425),s('type.semanticPrimitives.error_result'(X423),X426),s('type.semanticPrimitives.error_result'(X424),X427))))) | s(bool,X429) = s(bool,'const.evalProps.result_rel_4'(s(fun(X420,fun(X421,bool)),X422),s(fun(X423,fun(X424,bool)),X425),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X423),X426))),s('type.semanticPrimitives.result'(X421,X424),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X424),X427)))))) )),
  inference(superposition,[],[f209,f230])).
fof(f5419,plain,(
  ( ! [X412,X414,X416,X418,X413,X415,X411,X417,X419] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.error_result'(X414),X417),s('type.semanticPrimitives.error_result'(X415),X418))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X411,fun(X412,bool)),X413),s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.result'(X411,X414),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X414),X417))),s('type.semanticPrimitives.result'(X412,X415),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X415),X418)))),X419,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X419),s(bool,'const.evalProps.exc_rel_3'(s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.error_result'(X414),X417),s('type.semanticPrimitives.error_result'(X415),X418))))))) )),
  inference(forward_demodulation,[],[f5381,f230])).
fof(f5381,plain,(
  ( ! [X412,X414,X416,X418,X413,X415,X411,X417,X419] : (~p(s(bool,happ(s(fun(bool,bool),X419),s(bool,'const.evalProps.exc_rel_3'(s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.error_result'(X414),X417),s('type.semanticPrimitives.error_result'(X415),X418)))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X411,fun(X412,bool)),X413),s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.result'(X411,X414),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X414),X417))),s('type.semanticPrimitives.result'(X412,X415),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X415),X418))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X411,fun(X412,bool)),X413),s(fun(X414,fun(X415,bool)),X416),s('type.semanticPrimitives.result'(X411,X414),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X414),X417))),s('type.semanticPrimitives.result'(X412,X415),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X415),X418)))),X419,bool))) )),
  inference(superposition,[],[f195,f230])).
fof(f8352,plain,(
  ( ! [X61,X68,X66,X64,X62,X60,X67,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.evalProps.exc_rel_3'(s(fun(X63,fun(X64,bool)),X65),s('type.semanticPrimitives.error_result'(X63),X66),s('type.semanticPrimitives.error_result'(X64),X67)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X60,fun(X61,bool)),X62),s(fun(X63,fun(X64,bool)),X65),s('type.semanticPrimitives.result'(X60,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),X66))),s('type.semanticPrimitives.result'(X61,X64),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X64),X67)))),X68,bool))))) )),
  inference(superposition,[],[f471,f230])).
fof(f8504,plain,(
  ( ! [X70,X68,X66,X74,X72,X71,X69,X67,X75,X73] : (s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X74),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.error_result'(X69),X72),s('type.semanticPrimitives.error_result'(X70),X73))))) | s(bool,X75) = s(bool,'const.evalProps.result_rel_4'(s(fun(X66,fun(X67,bool)),X68),s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.result'(X66,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f397,f230])).
fof(f8675,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,X77))) != s('type.semanticPrimitives.result'(bool,X76),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X71,fun(X72,bool)),X73),s('type.semanticPrimitives.error_result'(X71),X74),s('type.semanticPrimitives.error_result'(X72),X75))))) | s(bool,'F_0') = s(bool,X77) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X68,fun(X69,bool)),X70),s(fun(X71,fun(X72,bool)),X73),s('type.semanticPrimitives.result'(X68,X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X74))),s('type.semanticPrimitives.result'(X69,X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),X75)))))) )),
  inference(superposition,[],[f398,f230])).
fof(f8699,plain,(
  ( ! [X70,X78,X76,X74,X72,X71,X79,X77,X75,X73] : (s('type.semanticPrimitives.result'(bool,X78),'const.semanticPrimitives.Rval_1'(s(bool,X79))) != s('type.semanticPrimitives.result'(bool,X78),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X73,fun(X74,bool)),X75),s('type.semanticPrimitives.error_result'(X73),X76),s('type.semanticPrimitives.error_result'(X74),X77))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X70,fun(X71,bool)),X72),s(fun(X73,fun(X74,bool)),X75),s('type.semanticPrimitives.result'(X70,X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),X76))),s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X74),X77))))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f398,f230])).
fof(f9384,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(bool,X76) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X71,fun(X72,bool)),X73),s('type.semanticPrimitives.error_result'(X71),X74),s('type.semanticPrimitives.error_result'(X72),X75))) | s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X77),'const.semanticPrimitives.Rval_1'(s(bool,X76))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X68,fun(X69,bool)),X70),s(fun(X71,fun(X72,bool)),X73),s('type.semanticPrimitives.result'(X68,X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X74))),s('type.semanticPrimitives.result'(X69,X72),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X72),X75)))))) )),
  inference(superposition,[],[f429,f230])).
fof(f10186,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'const.evalProps.exc_rel_3'(s(fun(X60,fun(X61,bool)),X62),s('type.semanticPrimitives.error_result'(X60),X63),s('type.semanticPrimitives.error_result'(X61),X64)))))) | p(s(bool,happ(s(fun(bool,bool),X65),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X57,fun(X58,bool)),X59),s(fun(X60,fun(X61,bool)),X62),s('type.semanticPrimitives.result'(X57,X60),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X60),X63))),s('type.semanticPrimitives.result'(X58,X61),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X61),X64)))),X65,bool))) )),
  inference(superposition,[],[f469,f230])).
fof(f19671,plain,(
  ( ! [X222,X229,X227,X225,X223,X221,X228,X226,X224] : (~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X221,fun(X222,bool)),X223),s(fun(X224,fun(X225,bool)),X226),s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X224),X227))),s('type.semanticPrimitives.result'(X222,X225),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X225),X228)))),X229,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X224,fun(X225,bool)),X226),s('type.semanticPrimitives.error_result'(X224),X227),s('type.semanticPrimitives.error_result'(X225),X228)))) )),
  inference(superposition,[],[f469,f5316])).
fof(f19727,plain,(
  ( ! [X736,X732,X734,X728,X730,X737,X733,X735,X729,X731] : (s('type.semanticPrimitives.result'(bool,X736),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X736),'const.semanticPrimitives.Rval_1'(s(bool,X737))) | s(bool,X737) = s(bool,'const.evalProps.result_rel_4'(s(fun(X728,fun(X729,bool)),X730),s(fun(X731,fun(X732,bool)),X733),s('type.semanticPrimitives.result'(X728,X731),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X731),X734))),s('type.semanticPrimitives.result'(X729,X732),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X732),X735))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X731,fun(X732,bool)),X733),s('type.semanticPrimitives.error_result'(X731),X734),s('type.semanticPrimitives.error_result'(X732),X735)))) )),
  inference(superposition,[],[f209,f5316])).
fof(f19737,plain,(
  ( ! [X850,X848,X852,X847,X845,X851,X849,X853,X846] : (~p(s(bool,happ(s(fun(bool,bool),X853),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X853),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X845,fun(X846,bool)),X847),s(fun(X848,fun(X849,bool)),X850),s('type.semanticPrimitives.result'(X845,X848),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X848),X851))),s('type.semanticPrimitives.result'(X846,X849),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X849),X852)))),X853,bool)))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X848,fun(X849,bool)),X850),s('type.semanticPrimitives.error_result'(X848),X851),s('type.semanticPrimitives.error_result'(X849),X852)))) )),
  inference(superposition,[],[f471,f5316])).
fof(f19766,plain,(
  ( ! [X90,X88,X87,X85,X89,X86] : (s(bool,X90) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.error_result'(X85),X88),s('type.semanticPrimitives.error_result'(X86),X89))) | ~p(s(bool,X90)) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.error_result'(X85),X88),s('type.semanticPrimitives.error_result'(X86),X89)))) )),
  inference(forward_demodulation,[],[f19765,f230])).
fof(f19765,plain,(
  ( ! [X90,X88,X87,X85,X83,X89,X86,X84,X82] : (~p(s(bool,X90)) | s(bool,X90) = s(bool,'const.evalProps.result_rel_4'(s(fun(X82,fun(X83,bool)),X84),s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.result'(X82,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),X88))),s('type.semanticPrimitives.result'(X83,X86),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X86),X89))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.error_result'(X85),X88),s('type.semanticPrimitives.error_result'(X86),X89)))) )),
  inference(subsumption_resolution,[],[f19658,f147])).
fof(f19658,plain,(
  ( ! [X90,X88,X87,X85,X83,X89,X86,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X90)) | s(bool,X90) = s(bool,'const.evalProps.result_rel_4'(s(fun(X82,fun(X83,bool)),X84),s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.result'(X82,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),X88))),s('type.semanticPrimitives.result'(X83,X86),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X86),X89))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.error_result'(X85),X88),s('type.semanticPrimitives.error_result'(X86),X89)))) )),
  inference(superposition,[],[f200,f5316])).
fof(f19768,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (s(bool,X99) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.error_result'(X94),X97),s('type.semanticPrimitives.error_result'(X95),X98))) | p(s(bool,X99)) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.error_result'(X94),X97),s('type.semanticPrimitives.error_result'(X95),X98)))) )),
  inference(forward_demodulation,[],[f19767,f230])).
fof(f19767,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X91,X98,X96] : (p(s(bool,X99)) | s(bool,X99) != s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(X92,bool)),X93),s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.result'(X91,X94),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X94),X97))),s('type.semanticPrimitives.result'(X92,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),X98))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.error_result'(X94),X97),s('type.semanticPrimitives.error_result'(X95),X98)))) )),
  inference(subsumption_resolution,[],[f19659,f147])).
fof(f19659,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X91,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | s(bool,X99) != s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(X92,bool)),X93),s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.result'(X91,X94),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X94),X97))),s('type.semanticPrimitives.result'(X92,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),X98))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.error_result'(X94),X97),s('type.semanticPrimitives.error_result'(X95),X98)))) )),
  inference(superposition,[],[f202,f5316])).
fof(f19769,plain,(
  ( ! [X134,X142,X140,X138,X136,X135,X141,X139,X137] : (s(bool,X142) != s(bool,'const.evalProps.result_rel_4'(s(fun(X134,fun(X135,bool)),X136),s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.result'(X134,X137),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X137),X140))),s('type.semanticPrimitives.result'(X135,X138),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X138),X141))))) | s(bool,'T_0') = s(bool,X142) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.error_result'(X137),X140),s('type.semanticPrimitives.error_result'(X138),X141)))) )),
  inference(subsumption_resolution,[],[f19662,f147])).
fof(f19662,plain,(
  ( ! [X134,X142,X140,X138,X136,X135,X141,X139,X137] : (~p(s(bool,'T_0')) | s(bool,X142) != s(bool,'const.evalProps.result_rel_4'(s(fun(X134,fun(X135,bool)),X136),s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.result'(X134,X137),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X137),X140))),s('type.semanticPrimitives.result'(X135,X138),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X138),X141))))) | s(bool,'T_0') = s(bool,X142) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.error_result'(X137),X140),s('type.semanticPrimitives.error_result'(X138),X141)))) )),
  inference(superposition,[],[f276,f5316])).
fof(f19783,plain,(
  ( ! [X716,X718,X712,X714,X717,X713,X715] : (s(bool,X718) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X712,fun(X713,bool)),X714),s('type.semanticPrimitives.error_result'(X712),X715),s('type.semanticPrimitives.error_result'(X713),X716))) | ~p(s(bool,happ(s(fun(bool,bool),X717),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X717),s(bool,X718)))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X712,fun(X713,bool)),X714),s('type.semanticPrimitives.error_result'(X712),X715),s('type.semanticPrimitives.error_result'(X713),X716)))) )),
  inference(forward_demodulation,[],[f19725,f230])).
fof(f19725,plain,(
  ( ! [X716,X718,X712,X714,X710,X717,X713,X715,X709,X711] : (~p(s(bool,happ(s(fun(bool,bool),X717),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X717),s(bool,X718)))) | s(bool,X718) != s(bool,'const.evalProps.result_rel_4'(s(fun(X709,fun(X710,bool)),X711),s(fun(X712,fun(X713,bool)),X714),s('type.semanticPrimitives.result'(X709,X712),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X712),X715))),s('type.semanticPrimitives.result'(X710,X713),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X713),X716))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X712,fun(X713,bool)),X714),s('type.semanticPrimitives.error_result'(X712),X715),s('type.semanticPrimitives.error_result'(X713),X716)))) )),
  inference(superposition,[],[f194,f5316])).
fof(f19784,plain,(
  ( ! [X724,X726,X720,X722,X725,X727,X721,X723,X719] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.error_result'(X722),X725),s('type.semanticPrimitives.error_result'(X723),X726))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X719,fun(X720,bool)),X721),s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.result'(X719,X722),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X722),X725))),s('type.semanticPrimitives.result'(X720,X723),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X723),X726)))),X727,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X727),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.error_result'(X722),X725),s('type.semanticPrimitives.error_result'(X723),X726)))) )),
  inference(forward_demodulation,[],[f19726,f230])).
fof(f19726,plain,(
  ( ! [X724,X726,X720,X722,X725,X727,X721,X723,X719] : (~p(s(bool,happ(s(fun(bool,bool),X727),s(bool,'T_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X719,fun(X720,bool)),X721),s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.result'(X719,X722),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X722),X725))),s('type.semanticPrimitives.result'(X720,X723),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X723),X726))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X719,fun(X720,bool)),X721),s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.result'(X719,X722),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X722),X725))),s('type.semanticPrimitives.result'(X720,X723),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X723),X726)))),X727,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.error_result'(X722),X725),s('type.semanticPrimitives.error_result'(X723),X726)))) )),
  inference(superposition,[],[f195,f5316])).
fof(f19786,plain,(
  ( ! [X765,X767,X761,X763,X764,X766,X762] : (s('type.semanticPrimitives.result'(bool,X767),'const.semanticPrimitives.Rval_1'(s(bool,X766))) = s('type.semanticPrimitives.result'(bool,X767),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.error_result'(X761),X764),s('type.semanticPrimitives.error_result'(X762),X765))))) | s(bool,'T_0') != s(bool,X766) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.error_result'(X761),X764),s('type.semanticPrimitives.error_result'(X762),X765)))) )),
  inference(forward_demodulation,[],[f19730,f230])).
fof(f19730,plain,(
  ( ! [X765,X767,X761,X763,X759,X764,X766,X760,X762,X758] : (s(bool,'T_0') != s(bool,X766) | s('type.semanticPrimitives.result'(bool,X767),'const.semanticPrimitives.Rval_1'(s(bool,X766))) = s('type.semanticPrimitives.result'(bool,X767),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X758,fun(X759,bool)),X760),s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.result'(X758,X761),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X761),X764))),s('type.semanticPrimitives.result'(X759,X762),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X762),X765))))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.error_result'(X761),X764),s('type.semanticPrimitives.error_result'(X762),X765)))) )),
  inference(superposition,[],[f210,f5316])).
fof(f20953,plain,(
  ( ! [X255,X261,X257,X259,X263,X260,X254,X256,X258,X262,X264] : (s(bool,'F_0') = s(bool,happ(s(fun(X259,bool),happ(s(fun(bool,fun(X259,bool)),X260),s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258))))),s(X259,X264))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X259,bool)),X260),s(fun(X261,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X259,X262),'const.semanticPrimitives.Rval_1'(s(X259,X264))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258)))) )),
  inference(forward_demodulation,[],[f20727,f230])).
fof(f20727,plain,(
  ( ! [X261,X263,X251,X259,X253,X255,X257,X260,X262,X252,X254,X256,X258,X264] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X259,bool)),X260),s(fun(X261,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X259,X262),'const.semanticPrimitives.Rval_1'(s(X259,X264))))) | s(bool,'F_0') = s(bool,happ(s(fun(X259,bool),happ(s(fun(bool,fun(X259,bool)),X260),s(bool,'const.evalProps.result_rel_4'(s(fun(X251,fun(X252,bool)),X253),s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.result'(X251,X254),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X254),X257))),s('type.semanticPrimitives.result'(X252,X255),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X255),X258))))))),s(X259,X264))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258)))) )),
  inference(superposition,[],[f5598,f5316])).
fof(f20982,plain,(
  ( ! [X255,X261,X257,X259,X263,X260,X254,X256,X258,X262,X264] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X259,fun(bool,bool)),X260),s(X259,X264))),s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X259,fun(bool,bool)),X260),s(fun(X261,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(X259,X261),'const.semanticPrimitives.Rval_1'(s(X259,X264))),s('type.semanticPrimitives.result'(bool,X262),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258)))) )),
  inference(forward_demodulation,[],[f20787,f230])).
fof(f20787,plain,(
  ( ! [X261,X263,X251,X259,X253,X255,X257,X260,X262,X252,X254,X256,X258,X264] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X259,fun(bool,bool)),X260),s(fun(X261,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(X259,X261),'const.semanticPrimitives.Rval_1'(s(X259,X264))),s('type.semanticPrimitives.result'(bool,X262),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X259,fun(bool,bool)),X260),s(X259,X264))),s(bool,'const.evalProps.result_rel_4'(s(fun(X251,fun(X252,bool)),X253),s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.result'(X251,X254),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X254),X257))),s('type.semanticPrimitives.result'(X252,X255),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X255),X258))))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X254,fun(X255,bool)),X256),s('type.semanticPrimitives.error_result'(X254),X257),s('type.semanticPrimitives.error_result'(X255),X258)))) )),
  inference(superposition,[],[f5598,f5316])).
fof(f23661,plain,(
  ( ! [X907,X905,X899,X903,X901,X906,X904,X908,X902,X900] : (s('type.semanticPrimitives.result'(bool,X907),'const.semanticPrimitives.Rval_1'(s(bool,X908))) != s('type.semanticPrimitives.result'(bool,X907),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X902,fun(X903,bool)),X904),s('type.semanticPrimitives.error_result'(X902),X905),s('type.semanticPrimitives.error_result'(X903),sK11(X906,X903,X900)))))) | s(bool,X908) = s(bool,'const.evalProps.result_rel_4'(s(fun(X899,fun(X900,bool)),X901),s(fun(X902,fun(X903,bool)),X904),s('type.semanticPrimitives.result'(X899,X902),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X902),X905))),s('type.semanticPrimitives.result'(X900,X903),X906))) | s('type.semanticPrimitives.result'(X900,X903),X906) = s('type.semanticPrimitives.result'(X900,X903),'const.semanticPrimitives.Rval_1'(s(X900,sK10(X906,X903,X900))))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23670,plain,(
  ( ! [X1011,X1009,X1013,X1006,X1010,X1008,X1014,X1012,X1007] : (~p(s(bool,happ(s(fun(bool,bool),X1014),s(bool,'const.evalProps.exc_rel_3'(s(fun(X1009,fun(X1010,bool)),X1011),s('type.semanticPrimitives.error_result'(X1009),X1012),s('type.semanticPrimitives.error_result'(X1010),sK11(X1013,X1010,X1007))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X1014),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X1006,fun(X1007,bool)),X1008),s(fun(X1009,fun(X1010,bool)),X1011),s('type.semanticPrimitives.result'(X1006,X1009),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1009),X1012))),s('type.semanticPrimitives.result'(X1007,X1010),X1013)),X1014,bool)))) | s('type.semanticPrimitives.result'(X1007,X1010),X1013) = s('type.semanticPrimitives.result'(X1007,X1010),'const.semanticPrimitives.Rval_1'(s(X1007,sK10(X1013,X1010,X1007))))) )),
  inference(superposition,[],[f471,f5315])).
fof(f12054,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X25,fun(X27,bool)),X28),s('type.semanticPrimitives.error_result'(X25),sK11(X26,X25,bool)),s('type.semanticPrimitives.error_result'(X27),X29))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X30,bool)),X31),s(fun(X25,fun(X27,bool)),X28),s('type.semanticPrimitives.result'(bool,X25),X26),s('type.semanticPrimitives.result'(X30,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X29))))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(superposition,[],[f230,f3058])).
fof(f22777,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X48),X47) = s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X48,fun(X49,bool)),X50),s('type.semanticPrimitives.error_result'(X48),sK11(X47,X48,bool)),s('type.semanticPrimitives.error_result'(X49),X51))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X52,bool)),X53),s(fun(X48,fun(X49,bool)),X50),s('type.semanticPrimitives.result'(bool,X48),X47),s('type.semanticPrimitives.result'(X52,X49),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X49),X51))))) | s(bool,X54) = s(bool,sK10(X47,X48,bool)) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f5312,f273])).
fof(f22778,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s('type.semanticPrimitives.result'(bool,X56),X55) = s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X56,fun(X58,bool)),X59),s('type.semanticPrimitives.error_result'(X56),sK11(X55,X56,bool)),s('type.semanticPrimitives.error_result'(X58),X60))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X61,bool)),X62),s(fun(X56,fun(X58,bool)),X59),s('type.semanticPrimitives.result'(bool,X56),X55),s('type.semanticPrimitives.result'(X61,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X60))))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,sK10(X55,X56,bool))) )),
  inference(superposition,[],[f5312,f273])).
fof(f23031,plain,(
  ( ! [X210,X208,X206,X204,X211,X209,X207,X205] : (s('type.semanticPrimitives.result'(bool,X204),X205) != s('type.semanticPrimitives.result'(bool,X204),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X206) = s(bool,sK10(X205,X204,bool)) | s(bool,'T_0') = s(bool,X206) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X204,fun(X207,bool)),X208),s('type.semanticPrimitives.error_result'(X204),sK11(X205,X204,bool)),s('type.semanticPrimitives.error_result'(X207),X209))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X210,bool)),X211),s(fun(X204,fun(X207,bool)),X208),s('type.semanticPrimitives.result'(bool,X204),X205),s('type.semanticPrimitives.result'(X210,X207),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X207),X209)))))) )),
  inference(superposition,[],[f397,f5312])).
fof(f23032,plain,(
  ( ! [X212,X218,X216,X215,X213,X219,X217,X214] : (s('type.semanticPrimitives.result'(bool,X212),X213) != s('type.semanticPrimitives.result'(bool,X212),'const.semanticPrimitives.Rval_1'(s(bool,X214))) | s(bool,'F_0') = s(bool,sK10(X213,X212,bool)) | s(bool,'T_0') = s(bool,X214) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X212,fun(X215,bool)),X216),s('type.semanticPrimitives.error_result'(X212),sK11(X213,X212,bool)),s('type.semanticPrimitives.error_result'(X215),X217))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X218,bool)),X219),s(fun(X212,fun(X215,bool)),X216),s('type.semanticPrimitives.result'(bool,X212),X213),s('type.semanticPrimitives.result'(X218,X215),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X215),X217)))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f23033,plain,(
  ( ! [X222,X220,X227,X225,X223,X221,X226,X224] : (s('type.semanticPrimitives.result'(bool,X220),X221) != s('type.semanticPrimitives.result'(bool,X220),'const.semanticPrimitives.Rval_1'(s(bool,X222))) | s(bool,'F_0') = s(bool,X222) | s(bool,'T_0') = s(bool,sK10(X221,X220,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X220,fun(X223,bool)),X224),s('type.semanticPrimitives.error_result'(X220),sK11(X221,X220,bool)),s('type.semanticPrimitives.error_result'(X223),X225))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X226,bool)),X227),s(fun(X220,fun(X223,bool)),X224),s('type.semanticPrimitives.result'(bool,X220),X221),s('type.semanticPrimitives.result'(X226,X223),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X223),X225)))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f23034,plain,(
  ( ! [X231,X229,X239,X237,X235,X233,X230,X228,X238,X236,X234,X232] : (s(bool,sK10(X229,X228,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X230,bool)),X231),s(fun(X228,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(bool,X228),X229),s('type.semanticPrimitives.result'(X230,X232),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X232),X234))))) | s(bool,'T_0') = s(bool,sK10(X229,X228,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X228,fun(X235,bool)),X236),s('type.semanticPrimitives.error_result'(X228),sK11(X229,X228,bool)),s('type.semanticPrimitives.error_result'(X235),X237))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X238,bool)),X239),s(fun(X228,fun(X235,bool)),X236),s('type.semanticPrimitives.result'(bool,X228),X229),s('type.semanticPrimitives.result'(X238,X235),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X235),X237)))))) )),
  inference(superposition,[],[f3205,f5312])).
fof(f5312,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X6,fun(X8,bool)),X9),s('type.semanticPrimitives.error_result'(X6),sK11(X7,X6,X5)),s('type.semanticPrimitives.error_result'(X8),X10))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X11,bool)),X12),s(fun(X6,fun(X8,bool)),X9),s('type.semanticPrimitives.result'(X5,X6),X7),s('type.semanticPrimitives.result'(X11,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X10))))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X7,X6,X5))))) )),
  inference(superposition,[],[f230,f207])).
fof(f16756,plain,(
  ( ! [X61,X59,X57,X68,X66,X64,X62,X60,X58,X56,X67,X65,X63] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X57,fun(X59,bool)),X60),s('type.semanticPrimitives.error_result'(X57),sK11(X58,X57,X56)),s('type.semanticPrimitives.error_result'(X59),X61))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X56,fun(X62,bool)),X63),s(fun(X57,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X56,X57),X58),s('type.semanticPrimitives.result'(X62,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),X61))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X56,fun(X64,bool)),X65),s(fun(X57,fun(X66,bool)),X67),s('type.semanticPrimitives.result'(X56,X57),X58),s('type.semanticPrimitives.result'(X64,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),X68)))))) )),
  inference(superposition,[],[f230,f3212])).
fof(f17589,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X62,X60,X71,X69,X67,X65,X63] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X60,fun(X62,bool)),X63),s('type.semanticPrimitives.error_result'(X60),sK11(X61,X60,X59)),s('type.semanticPrimitives.error_result'(X62),X64))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X59,fun(X65,bool)),X66),s(fun(X60,fun(X62,bool)),X63),s('type.semanticPrimitives.result'(X59,X60),X61),s('type.semanticPrimitives.result'(X65,X62),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X62),X64))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X67,fun(X59,bool)),X68),s(fun(X69,fun(X60,bool)),X70),s('type.semanticPrimitives.result'(X67,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X71))),s('type.semanticPrimitives.result'(X59,X60),X61)))) )),
  inference(superposition,[],[f230,f4992])).
fof(f22787,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X12,fun(X14,bool)),X15),s(fun(X8,fun(X9,bool)),X10),s('type.semanticPrimitives.result'(X12,X8),X11),s('type.semanticPrimitives.result'(X14,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X13)))))) | s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X10),s('type.semanticPrimitives.error_result'(X8),sK11(X11,X8,X12)),s('type.semanticPrimitives.error_result'(X9),X13))) | s('type.semanticPrimitives.result'(X12,X8),X11) = s('type.semanticPrimitives.result'(X12,X8),'const.semanticPrimitives.Rval_1'(s(X12,sK10(X11,X8,X12))))) )),
  inference(superposition,[],[f152,f5312])).
fof(f22788,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X20,fun(X22,bool)),X23),s(fun(X16,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X20,X16),X19),s('type.semanticPrimitives.result'(X22,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X21)))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X16,fun(X17,bool)),X18),s('type.semanticPrimitives.error_result'(X16),sK11(X19,X16,X20)),s('type.semanticPrimitives.error_result'(X17),X21))) | s('type.semanticPrimitives.result'(X20,X16),X19) = s('type.semanticPrimitives.result'(X20,X16),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X19,X16,X20))))) )),
  inference(superposition,[],[f153,f5312])).
fof(f22789,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X28,fun(X30,bool)),X31),s(fun(X24,fun(X25,bool)),X26),s('type.semanticPrimitives.result'(X28,X24),X27),s('type.semanticPrimitives.result'(X30,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),X29))))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X24,fun(X25,bool)),X26),s('type.semanticPrimitives.error_result'(X24),sK11(X27,X24,X28)),s('type.semanticPrimitives.error_result'(X25),X29)))) | s('type.semanticPrimitives.result'(X28,X24),X27) = s('type.semanticPrimitives.result'(X28,X24),'const.semanticPrimitives.Rval_1'(s(X28,sK10(X27,X24,X28))))) )),
  inference(superposition,[],[f156,f5312])).
fof(f22790,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X32] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X36,fun(X38,bool)),X39),s(fun(X32,fun(X33,bool)),X34),s('type.semanticPrimitives.result'(X36,X32),X35),s('type.semanticPrimitives.result'(X38,X33),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X33),X37)))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X32,fun(X33,bool)),X34),s('type.semanticPrimitives.error_result'(X32),sK11(X35,X32,X36)),s('type.semanticPrimitives.error_result'(X33),X37))) | s('type.semanticPrimitives.result'(X36,X32),X35) = s('type.semanticPrimitives.result'(X36,X32),'const.semanticPrimitives.Rval_1'(s(X36,sK10(X35,X32,X36))))) )),
  inference(superposition,[],[f157,f5312])).
fof(f22791,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42,X40] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X44,fun(X46,bool)),X47),s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X44,X40),X43),s('type.semanticPrimitives.result'(X46,X41),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X41),X45)))))) | p(s(bool,X48)) | s(bool,X48) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.error_result'(X40),sK11(X43,X40,X44)),s('type.semanticPrimitives.error_result'(X41),X45))) | s('type.semanticPrimitives.result'(X44,X40),X43) = s('type.semanticPrimitives.result'(X44,X40),'const.semanticPrimitives.Rval_1'(s(X44,sK10(X43,X40,X44))))) )),
  inference(superposition,[],[f197,f5312])).
fof(f22793,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X58,X65,X63] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X62,fun(X64,bool)),X65),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X62,X58),X61),s('type.semanticPrimitives.result'(X64,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),X63)))))) | ~p(s(bool,X66)) | s(bool,X66) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.error_result'(X58),sK11(X61,X58,X62)),s('type.semanticPrimitives.error_result'(X59),X63))) | s('type.semanticPrimitives.result'(X62,X58),X61) = s('type.semanticPrimitives.result'(X62,X58),'const.semanticPrimitives.Rval_1'(s(X62,sK10(X61,X58,X62))))) )),
  inference(superposition,[],[f200,f5312])).
fof(f22794,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X73,bool)),X74),s(fun(X67,fun(X68,bool)),X69),s('type.semanticPrimitives.result'(X71,X67),X70),s('type.semanticPrimitives.result'(X73,X68),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X68),X72)))))) | p(s(bool,X75)) | s(bool,X75) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X67,fun(X68,bool)),X69),s('type.semanticPrimitives.error_result'(X67),sK11(X70,X67,X71)),s('type.semanticPrimitives.error_result'(X68),X72))) | s('type.semanticPrimitives.result'(X71,X67),X70) = s('type.semanticPrimitives.result'(X71,X67),'const.semanticPrimitives.Rval_1'(s(X71,sK10(X70,X67,X71))))) )),
  inference(superposition,[],[f202,f5312])).
fof(f22799,plain,(
  ( ! [X118,X116,X114,X112,X120,X119,X117,X115,X113] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X116,fun(X118,bool)),X119),s(fun(X112,fun(X113,bool)),X114),s('type.semanticPrimitives.result'(X116,X112),X115),s('type.semanticPrimitives.result'(X118,X113),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X113),X117)))))) | s(bool,X120) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X112,fun(X113,bool)),X114),s('type.semanticPrimitives.error_result'(X112),sK11(X115,X112,X116)),s('type.semanticPrimitives.error_result'(X113),X117))) | s(bool,'T_0') = s(bool,X120) | s('type.semanticPrimitives.result'(X116,X112),X115) = s('type.semanticPrimitives.result'(X116,X112),'const.semanticPrimitives.Rval_1'(s(X116,sK10(X115,X112,X116))))) )),
  inference(superposition,[],[f276,f5312])).
fof(f22800,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X129] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X125,fun(X127,bool)),X128),s(fun(X121,fun(X122,bool)),X123),s('type.semanticPrimitives.result'(X125,X121),X124),s('type.semanticPrimitives.result'(X127,X122),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X122),X126)))))) | s(bool,X129) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X121,fun(X122,bool)),X123),s('type.semanticPrimitives.error_result'(X121),sK11(X124,X121,X125)),s('type.semanticPrimitives.error_result'(X122),X126))) | s(bool,'T_0') = s(bool,X129) | s('type.semanticPrimitives.result'(X125,X121),X124) = s('type.semanticPrimitives.result'(X125,X121),'const.semanticPrimitives.Rval_1'(s(X125,sK10(X124,X121,X125))))) )),
  inference(superposition,[],[f306,f5312])).
fof(f22801,plain,(
  ( ! [X134,X132,X130,X138,X136,X135,X133,X131,X137] : (~p(s(bool,happ(s(fun(bool,bool),X138),s(bool,'const.evalProps.result_rel_4'(s(fun(X134,fun(X136,bool)),X137),s(fun(X130,fun(X131,bool)),X132),s('type.semanticPrimitives.result'(X134,X130),X133),s('type.semanticPrimitives.result'(X136,X131),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X131),X135)))))))) | s(bool,'F_0') = s(bool,sK9('F_0',X138,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X130,fun(X131,bool)),X132),s('type.semanticPrimitives.error_result'(X130),sK11(X133,X130,X134)),s('type.semanticPrimitives.error_result'(X131),X135))) | s('type.semanticPrimitives.result'(X134,X130),X133) = s('type.semanticPrimitives.result'(X134,X130),'const.semanticPrimitives.Rval_1'(s(X134,sK10(X133,X130,X134))))) )),
  inference(superposition,[],[f369,f5312])).
fof(f22805,plain,(
  ( ! [X177,X175,X173,X171,X169,X178,X176,X174,X172,X170] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X173,fun(X175,bool)),X176),s(fun(X169,fun(X170,bool)),X171),s('type.semanticPrimitives.result'(X173,X169),X172),s('type.semanticPrimitives.result'(X175,X170),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X170),X174))))) | s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,X178))) = s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X169,fun(X170,bool)),X171),s('type.semanticPrimitives.error_result'(X169),sK11(X172,X169,X173)),s('type.semanticPrimitives.error_result'(X170),X174))))) | s(bool,'T_0') = s(bool,X178) | s('type.semanticPrimitives.result'(X173,X169),X172) = s('type.semanticPrimitives.result'(X173,X169),'const.semanticPrimitives.Rval_1'(s(X173,sK10(X172,X169,X173))))) )),
  inference(superposition,[],[f428,f5312])).
fof(f22807,plain,(
  ( ! [X191,X189,X198,X196,X194,X192,X190,X197,X195,X193] : (s(bool,X197) != s(bool,'const.evalProps.result_rel_4'(s(fun(X193,fun(X195,bool)),X196),s(fun(X189,fun(X190,bool)),X191),s('type.semanticPrimitives.result'(X193,X189),X192),s('type.semanticPrimitives.result'(X195,X190),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X190),X194))))) | s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X198),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X189,fun(X190,bool)),X191),s('type.semanticPrimitives.error_result'(X189),sK11(X192,X189,X193)),s('type.semanticPrimitives.error_result'(X190),X194))))) | s(bool,'T_0') = s(bool,X197) | s('type.semanticPrimitives.result'(X193,X189),X192) = s('type.semanticPrimitives.result'(X193,X189),'const.semanticPrimitives.Rval_1'(s(X193,sK10(X192,X189,X193))))) )),
  inference(superposition,[],[f429,f5312])).
fof(f22809,plain,(
  ( ! [X212,X210,X216,X208,X215,X213,X211,X209,X217,X214] : (~p(s(bool,happ(s(fun(bool,bool),X216),s(bool,'const.evalProps.result_rel_4'(s(fun(X212,fun(X214,bool)),X215),s(fun(X208,fun(X209,bool)),X210),s('type.semanticPrimitives.result'(X212,X208),X211),s('type.semanticPrimitives.result'(X214,X209),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X209),X213)))))))) | p(s(bool,happ(s(fun(bool,bool),X216),s(bool,X217)))) | s(bool,'F_0') != s(bool,X217) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X208,fun(X209,bool)),X210),s('type.semanticPrimitives.error_result'(X208),sK11(X211,X208,X212)),s('type.semanticPrimitives.error_result'(X209),X213))) | s('type.semanticPrimitives.result'(X212,X208),X211) = s('type.semanticPrimitives.result'(X212,X208),'const.semanticPrimitives.Rval_1'(s(X212,sK10(X211,X208,X212))))) )),
  inference(superposition,[],[f937,f5312])).
fof(f22874,plain,(
  ( ! [X786,X784,X790,X788,X783,X787,X785,X791,X789,X792] : (~p(s(bool,happ(s(fun(bool,bool),X791),s(bool,'const.evalProps.result_rel_4'(s(fun(X787,fun(X789,bool)),X790),s(fun(X783,fun(X784,bool)),X785),s('type.semanticPrimitives.result'(X787,X783),X786),s('type.semanticPrimitives.result'(X789,X784),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X784),X788)))))))) | p(s(bool,happ(s(fun(bool,bool),X791),s(bool,X792)))) | s(bool,X792) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X783,fun(X784,bool)),X785),s('type.semanticPrimitives.error_result'(X783),sK11(X786,X783,X787)),s('type.semanticPrimitives.error_result'(X784),X788))) | s('type.semanticPrimitives.result'(X787,X783),X786) = s('type.semanticPrimitives.result'(X787,X783),'const.semanticPrimitives.Rval_1'(s(X787,sK10(X786,X783,X787))))) )),
  inference(superposition,[],[f194,f5312])).
fof(f22875,plain,(
  ( ! [X798,X796,X800,X795,X793,X799,X797,X801,X794] : (~p(s(bool,happ(s(fun(bool,bool),X801),s(bool,'const.evalProps.result_rel_4'(s(fun(X797,fun(X799,bool)),X800),s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.result'(X797,X793),X796),s('type.semanticPrimitives.result'(X799,X794),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X794),X798)))))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.error_result'(X793),sK11(X796,X793,X797)),s('type.semanticPrimitives.error_result'(X794),X798))) = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.error_result'(X793),sK11(X796,X793,X797)),s('type.semanticPrimitives.error_result'(X794),X798)),X801,bool)) | s('type.semanticPrimitives.result'(X797,X793),X796) = s('type.semanticPrimitives.result'(X797,X793),'const.semanticPrimitives.Rval_1'(s(X797,sK10(X796,X793,X797))))) )),
  inference(superposition,[],[f195,f5312])).
fof(f22878,plain,(
  ( ! [X825,X831,X829,X823,X826,X824,X830,X828,X822,X827] : (s(bool,X830) != s(bool,'const.evalProps.result_rel_4'(s(fun(X826,fun(X828,bool)),X829),s(fun(X822,fun(X823,bool)),X824),s('type.semanticPrimitives.result'(X826,X822),X825),s('type.semanticPrimitives.result'(X828,X823),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X823),X827))))) | s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,X830))) = s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X822,fun(X823,bool)),X824),s('type.semanticPrimitives.error_result'(X822),sK11(X825,X822,X826)),s('type.semanticPrimitives.error_result'(X823),X827))))) | s('type.semanticPrimitives.result'(X826,X822),X825) = s('type.semanticPrimitives.result'(X826,X822),'const.semanticPrimitives.Rval_1'(s(X826,sK10(X825,X822,X826))))) )),
  inference(superposition,[],[f210,f5312])).
fof(f22888,plain,(
  ( ! [X947,X945,X938,X942,X940,X946,X944,X939,X943,X941] : (s('type.semanticPrimitives.result'(bool,X946),X947) != s('type.semanticPrimitives.result'(bool,X946),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X942,fun(X944,bool)),X945),s(fun(X938,fun(X939,bool)),X940),s('type.semanticPrimitives.result'(X942,X938),X941),s('type.semanticPrimitives.result'(X944,X939),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X939),X943))))))) | s(bool,sK10(X947,X946,bool)) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X938,fun(X939,bool)),X940),s('type.semanticPrimitives.error_result'(X938),sK11(X941,X938,X942)),s('type.semanticPrimitives.error_result'(X939),X943))) | s('type.semanticPrimitives.result'(bool,X946),X947) = s('type.semanticPrimitives.result'(bool,X946),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X946),sK11(X947,X946,bool)))) | s('type.semanticPrimitives.result'(X942,X938),X941) = s('type.semanticPrimitives.result'(X942,X938),'const.semanticPrimitives.Rval_1'(s(X942,sK10(X941,X938,X942))))) )),
  inference(superposition,[],[f3085,f5312])).
fof(f22905,plain,(
  ( ! [X78,X76,X74,X72,X71,X77,X75,X73] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.error_result'(X74),sK11(X77,X74,X71)),s('type.semanticPrimitives.error_result'(X75),X78)))) | s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X72,bool)),X73),s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.result'(X71,X74),X77),s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),X78))))) | s('type.semanticPrimitives.result'(X71,X74),X77) = s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rval_1'(s(X71,sK10(X77,X74,X71))))) )),
  inference(superposition,[],[f152,f5312])).
fof(f22906,plain,(
  ( ! [X80,X85,X83,X81,X79,X86,X84,X82] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.error_result'(X82),sK11(X85,X82,X79)),s('type.semanticPrimitives.error_result'(X83),X86)))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),X85),s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),X86))))) | s('type.semanticPrimitives.result'(X79,X82),X85) = s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rval_1'(s(X79,sK10(X85,X82,X79))))) )),
  inference(superposition,[],[f153,f5312])).
fof(f22907,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.error_result'(X90),sK11(X93,X90,X87)),s('type.semanticPrimitives.error_result'(X91),X94))) | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X87,fun(X88,bool)),X89),s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.result'(X87,X90),X93),s('type.semanticPrimitives.result'(X88,X91),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X91),X94)))))) | s('type.semanticPrimitives.result'(X87,X90),X93) = s('type.semanticPrimitives.result'(X87,X90),'const.semanticPrimitives.Rval_1'(s(X87,sK10(X93,X90,X87))))) )),
  inference(superposition,[],[f156,f5312])).
fof(f22909,plain,(
  ( ! [X103,X111,X109,X107,X105,X110,X108,X106,X104] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.error_result'(X106),sK11(X109,X106,X103)),s('type.semanticPrimitives.error_result'(X107),X110)))) | p(s(bool,X111)) | s(bool,X111) = s(bool,'const.evalProps.result_rel_4'(s(fun(X103,fun(X104,bool)),X105),s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.result'(X103,X106),X109),s('type.semanticPrimitives.result'(X104,X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),X110))))) | s('type.semanticPrimitives.result'(X103,X106),X109) = s('type.semanticPrimitives.result'(X103,X106),'const.semanticPrimitives.Rval_1'(s(X103,sK10(X109,X106,X103))))) )),
  inference(superposition,[],[f197,f5312])).
fof(f22911,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X129] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X124,fun(X125,bool)),X126),s('type.semanticPrimitives.error_result'(X124),sK11(X127,X124,X121)),s('type.semanticPrimitives.error_result'(X125),X128)))) | ~p(s(bool,X129)) | s(bool,X129) = s(bool,'const.evalProps.result_rel_4'(s(fun(X121,fun(X122,bool)),X123),s(fun(X124,fun(X125,bool)),X126),s('type.semanticPrimitives.result'(X121,X124),X127),s('type.semanticPrimitives.result'(X122,X125),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X125),X128))))) | s('type.semanticPrimitives.result'(X121,X124),X127) = s('type.semanticPrimitives.result'(X121,X124),'const.semanticPrimitives.Rval_1'(s(X121,sK10(X127,X124,X121))))) )),
  inference(superposition,[],[f200,f5312])).
fof(f22912,plain,(
  ( ! [X134,X132,X130,X138,X136,X135,X133,X131,X137] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X130)),s('type.semanticPrimitives.error_result'(X134),X137)))) | p(s(bool,X138)) | s(bool,X138) != s(bool,'const.evalProps.result_rel_4'(s(fun(X130,fun(X131,bool)),X132),s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X130,X133),X136),s('type.semanticPrimitives.result'(X131,X134),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X134),X137))))) | s('type.semanticPrimitives.result'(X130,X133),X136) = s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rval_1'(s(X130,sK10(X136,X133,X130))))) )),
  inference(superposition,[],[f202,f5312])).
fof(f22917,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X183,X181,X179] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X178,fun(X179,bool)),X180),s('type.semanticPrimitives.error_result'(X178),sK11(X181,X178,X175)),s('type.semanticPrimitives.error_result'(X179),X182)))) | s(bool,X183) != s(bool,'const.evalProps.result_rel_4'(s(fun(X175,fun(X176,bool)),X177),s(fun(X178,fun(X179,bool)),X180),s('type.semanticPrimitives.result'(X175,X178),X181),s('type.semanticPrimitives.result'(X176,X179),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X179),X182))))) | s(bool,'T_0') = s(bool,X183) | s('type.semanticPrimitives.result'(X175,X178),X181) = s('type.semanticPrimitives.result'(X175,X178),'const.semanticPrimitives.Rval_1'(s(X175,sK10(X181,X178,X175))))) )),
  inference(superposition,[],[f276,f5312])).
fof(f22918,plain,(
  ( ! [X191,X189,X187,X185,X192,X190,X188,X186,X184] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X187,fun(X188,bool)),X189),s('type.semanticPrimitives.error_result'(X187),sK11(X190,X187,X184)),s('type.semanticPrimitives.error_result'(X188),X191)))) | s(bool,X192) = s(bool,'const.evalProps.result_rel_4'(s(fun(X184,fun(X185,bool)),X186),s(fun(X187,fun(X188,bool)),X189),s('type.semanticPrimitives.result'(X184,X187),X190),s('type.semanticPrimitives.result'(X185,X188),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X188),X191))))) | s(bool,'T_0') = s(bool,X192) | s('type.semanticPrimitives.result'(X184,X187),X190) = s('type.semanticPrimitives.result'(X184,X187),'const.semanticPrimitives.Rval_1'(s(X184,sK10(X190,X187,X184))))) )),
  inference(superposition,[],[f306,f5312])).
fof(f22919,plain,(
  ( ! [X198,X196,X194,X200,X199,X197,X195,X193,X201] : (~p(s(bool,happ(s(fun(bool,bool),X201),s(bool,'const.evalProps.exc_rel_3'(s(fun(X196,fun(X197,bool)),X198),s('type.semanticPrimitives.error_result'(X196),sK11(X199,X196,X193)),s('type.semanticPrimitives.error_result'(X197),X200)))))) | s(bool,'F_0') = s(bool,sK9('F_0',X201,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X193,fun(X194,bool)),X195),s(fun(X196,fun(X197,bool)),X198),s('type.semanticPrimitives.result'(X193,X196),X199),s('type.semanticPrimitives.result'(X194,X197),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X197),X200))))) | s('type.semanticPrimitives.result'(X193,X196),X199) = s('type.semanticPrimitives.result'(X193,X196),'const.semanticPrimitives.Rval_1'(s(X193,sK10(X199,X196,X193))))) )),
  inference(superposition,[],[f369,f5312])).
fof(f22920,plain,(
  ( ! [X210,X208,X206,X204,X202,X211,X209,X207,X205,X203] : (s('type.semanticPrimitives.result'(bool,X210),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X210),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.error_result'(X205),sK11(X208,X205,X202)),s('type.semanticPrimitives.error_result'(X206),X209))))) | s(bool,X211) = s(bool,'const.evalProps.result_rel_4'(s(fun(X202,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X202,X205),X208),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X206),X209))))) | s(bool,'T_0') = s(bool,X211) | s('type.semanticPrimitives.result'(X202,X205),X208) = s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,sK10(X208,X205,X202))))) )),
  inference(superposition,[],[f397,f5312])).
fof(f22921,plain,(
  ( ! [X212,X218,X216,X220,X215,X213,X219,X217,X221,X214] : (s('type.semanticPrimitives.result'(bool,X220),'const.semanticPrimitives.Rval_1'(s(bool,X221))) != s('type.semanticPrimitives.result'(bool,X220),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X215,fun(X216,bool)),X217),s('type.semanticPrimitives.error_result'(X215),sK11(X218,X215,X212)),s('type.semanticPrimitives.error_result'(X216),X219))))) | s(bool,'F_0') = s(bool,X221) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X212,fun(X213,bool)),X214),s(fun(X215,fun(X216,bool)),X217),s('type.semanticPrimitives.result'(X212,X215),X218),s('type.semanticPrimitives.result'(X213,X216),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X216),X219))))) | s('type.semanticPrimitives.result'(X212,X215),X218) = s('type.semanticPrimitives.result'(X212,X215),'const.semanticPrimitives.Rval_1'(s(X212,sK10(X218,X215,X212))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f22926,plain,(
  ( ! [X263,X269,X265,X267,X262,X268,X270,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),X270),s(bool,'const.evalProps.exc_rel_3'(s(fun(X265,fun(X266,bool)),X267),s('type.semanticPrimitives.error_result'(X265),sK11(X268,X265,X262)),s('type.semanticPrimitives.error_result'(X266),X269)))))) | p(s(bool,happ(s(fun(bool,bool),X270),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X262,fun(X263,bool)),X264),s(fun(X265,fun(X266,bool)),X267),s('type.semanticPrimitives.result'(X262,X265),X268),s('type.semanticPrimitives.result'(X263,X266),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X266),X269)))),X270,bool)) | s('type.semanticPrimitives.result'(X262,X265),X268) = s('type.semanticPrimitives.result'(X262,X265),'const.semanticPrimitives.Rval_1'(s(X262,sK10(X268,X265,X262))))) )),
  inference(superposition,[],[f469,f5312])).
fof(f22927,plain,(
  ( ! [X280,X271,X277,X279,X273,X275,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun(bool,bool),X279),s(bool,'const.evalProps.exc_rel_3'(s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.error_result'(X274),sK11(X277,X274,X271)),s('type.semanticPrimitives.error_result'(X275),X278)))))) | p(s(bool,happ(s(fun(bool,bool),X279),s(bool,X280)))) | s(bool,'F_0') != s(bool,X280) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X271,fun(X272,bool)),X273),s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.result'(X271,X274),X277),s('type.semanticPrimitives.result'(X272,X275),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X275),X278))))) | s('type.semanticPrimitives.result'(X271,X274),X277) = s('type.semanticPrimitives.result'(X271,X274),'const.semanticPrimitives.Rval_1'(s(X271,sK10(X277,X274,X271))))) )),
  inference(superposition,[],[f937,f5312])).
fof(f22992,plain,(
  ( ! [X850,X848,X854,X852,X847,X851,X849,X855,X853,X846] : (~p(s(bool,happ(s(fun(bool,bool),X854),s(bool,'const.evalProps.exc_rel_3'(s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.error_result'(X849),sK11(X852,X849,X846)),s('type.semanticPrimitives.error_result'(X850),X853)))))) | p(s(bool,happ(s(fun(bool,bool),X854),s(bool,X855)))) | s(bool,X855) != s(bool,'const.evalProps.result_rel_4'(s(fun(X846,fun(X847,bool)),X848),s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.result'(X846,X849),X852),s('type.semanticPrimitives.result'(X847,X850),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X850),X853))))) | s('type.semanticPrimitives.result'(X846,X849),X852) = s('type.semanticPrimitives.result'(X846,X849),'const.semanticPrimitives.Rval_1'(s(X846,sK10(X852,X849,X846))))) )),
  inference(superposition,[],[f194,f5312])).
fof(f22993,plain,(
  ( ! [X860,X864,X859,X857,X863,X861,X858,X856,X862] : (~p(s(bool,happ(s(fun(bool,bool),X864),s(bool,'const.evalProps.exc_rel_3'(s(fun(X859,fun(X860,bool)),X861),s('type.semanticPrimitives.error_result'(X859),sK11(X862,X859,X856)),s('type.semanticPrimitives.error_result'(X860),X863)))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X856,fun(X857,bool)),X858),s(fun(X859,fun(X860,bool)),X861),s('type.semanticPrimitives.result'(X856,X859),X862),s('type.semanticPrimitives.result'(X857,X860),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X860),X863))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X856,fun(X857,bool)),X858),s(fun(X859,fun(X860,bool)),X861),s('type.semanticPrimitives.result'(X856,X859),X862),s('type.semanticPrimitives.result'(X857,X860),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X860),X863)))),X864,bool)) | s('type.semanticPrimitives.result'(X856,X859),X862) = s('type.semanticPrimitives.result'(X856,X859),'const.semanticPrimitives.Rval_1'(s(X856,sK10(X862,X859,X856))))) )),
  inference(superposition,[],[f195,f5312])).
fof(f22994,plain,(
  ( ! [X874,X872,X866,X870,X868,X873,X867,X865,X871,X869] : (s('type.semanticPrimitives.result'(bool,X873),'const.semanticPrimitives.Rval_1'(s(bool,X874))) != s('type.semanticPrimitives.result'(bool,X873),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X868,fun(X869,bool)),X870),s('type.semanticPrimitives.error_result'(X868),sK11(X871,X868,X865)),s('type.semanticPrimitives.error_result'(X869),X872))))) | s(bool,X874) = s(bool,'const.evalProps.result_rel_4'(s(fun(X865,fun(X866,bool)),X867),s(fun(X868,fun(X869,bool)),X870),s('type.semanticPrimitives.result'(X865,X868),X871),s('type.semanticPrimitives.result'(X866,X869),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X869),X872))))) | s('type.semanticPrimitives.result'(X865,X868),X871) = s('type.semanticPrimitives.result'(X865,X868),'const.semanticPrimitives.Rval_1'(s(X865,sK10(X871,X868,X865))))) )),
  inference(superposition,[],[f209,f5312])).
fof(f23004,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X986] : (~p(s(bool,happ(s(fun(bool,bool),X990),s(bool,'const.evalProps.exc_rel_3'(s(fun(X985,fun(X986,bool)),X987),s('type.semanticPrimitives.error_result'(X985),sK11(X988,X985,X982)),s('type.semanticPrimitives.error_result'(X986),X989)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X990),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X982,fun(X983,bool)),X984),s(fun(X985,fun(X986,bool)),X987),s('type.semanticPrimitives.result'(X982,X985),X988),s('type.semanticPrimitives.result'(X983,X986),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X986),X989)))),X990,bool)))) | s('type.semanticPrimitives.result'(X982,X985),X988) = s('type.semanticPrimitives.result'(X982,X985),'const.semanticPrimitives.Rval_1'(s(X982,sK10(X988,X985,X982))))) )),
  inference(superposition,[],[f471,f5312])).
fof(f23006,plain,(
  ( ! [X1009,X1002,X1006,X1004,X1010,X1008,X1003,X1001,X1007,X1005] : (s('type.semanticPrimitives.result'(bool,X1009),X1010) != s('type.semanticPrimitives.result'(bool,X1009),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X1004,fun(X1005,bool)),X1006),s('type.semanticPrimitives.error_result'(X1004),sK11(X1007,X1004,X1001)),s('type.semanticPrimitives.error_result'(X1005),X1008))))) | s(bool,sK10(X1010,X1009,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X1001,fun(X1002,bool)),X1003),s(fun(X1004,fun(X1005,bool)),X1006),s('type.semanticPrimitives.result'(X1001,X1004),X1007),s('type.semanticPrimitives.result'(X1002,X1005),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1005),X1008))))) | s('type.semanticPrimitives.result'(bool,X1009),X1010) = s('type.semanticPrimitives.result'(bool,X1009),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1009),sK11(X1010,X1009,bool)))) | s('type.semanticPrimitives.result'(X1001,X1004),X1007) = s('type.semanticPrimitives.result'(X1001,X1004),'const.semanticPrimitives.Rval_1'(s(X1001,sK10(X1007,X1004,X1001))))) )),
  inference(superposition,[],[f3085,f5312])).
fof(f23015,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20] : (s('type.semanticPrimitives.result'(X19,X20),X21) != s('type.semanticPrimitives.result'(X19,X20),'const.semanticPrimitives.Rval_1'(s(X19,X22))) | s(X19,X22) = s(X19,sK10(X21,X20,X19)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X20,fun(X23,bool)),X24),s('type.semanticPrimitives.error_result'(X20),sK11(X21,X20,X19)),s('type.semanticPrimitives.error_result'(X23),X25))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X19,fun(X26,bool)),X27),s(fun(X20,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X19,X20),X21),s('type.semanticPrimitives.result'(X26,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f209,f5312])).
fof(f23017,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X44,X42,X40] : (s('type.semanticPrimitives.result'(X37,X38),X39) != s('type.semanticPrimitives.result'(X37,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),X40))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X38,fun(X41,bool)),X42),s('type.semanticPrimitives.error_result'(X38),sK11(X39,X38,X37)),s('type.semanticPrimitives.error_result'(X41),X43))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(X44,bool)),X45),s(fun(X38,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X37,X38),X39),s('type.semanticPrimitives.result'(X44,X41),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X41),X43)))))) )),
  inference(superposition,[],[f213,f5312])).
fof(f23020,plain,(
  ( ! [X80,X78,X76,X74,X72,X83,X81,X79,X77,X75,X73,X84,X82] : (s(bool,happ(s(fun(X75,bool),happ(s(fun(X72,fun(X75,bool)),X76),s(X72,sK10(X74,X73,X72)))),s(X75,X77))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X72,fun(X75,bool)),X76),s(fun(X73,fun(X78,bool)),X79),s('type.semanticPrimitives.result'(X72,X73),X74),s('type.semanticPrimitives.result'(X75,X78),'const.semanticPrimitives.Rval_1'(s(X75,X77))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X73,fun(X80,bool)),X81),s('type.semanticPrimitives.error_result'(X73),sK11(X74,X73,X72)),s('type.semanticPrimitives.error_result'(X80),X82))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X72,fun(X83,bool)),X84),s(fun(X73,fun(X80,bool)),X81),s('type.semanticPrimitives.result'(X72,X73),X74),s('type.semanticPrimitives.result'(X83,X80),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),X82)))))) )),
  inference(superposition,[],[f231,f5312])).
fof(f23021,plain,(
  ( ! [X94,X92,X90,X88,X97,X87,X85,X95,X93,X91,X89,X96,X86] : (s(bool,happ(s(fun(X85,bool),happ(s(fun(X88,fun(X85,bool)),X89),s(X88,X90))),s(X85,sK10(X87,X86,X85)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X88,fun(X85,bool)),X89),s(fun(X91,fun(X86,bool)),X92),s('type.semanticPrimitives.result'(X88,X91),'const.semanticPrimitives.Rval_1'(s(X88,X90))),s('type.semanticPrimitives.result'(X85,X86),X87))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X86,fun(X93,bool)),X94),s('type.semanticPrimitives.error_result'(X86),sK11(X87,X86,X85)),s('type.semanticPrimitives.error_result'(X93),X95))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X85,fun(X96,bool)),X97),s(fun(X86,fun(X93,bool)),X94),s('type.semanticPrimitives.result'(X85,X86),X87),s('type.semanticPrimitives.result'(X96,X93),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X93),X95)))))) )),
  inference(superposition,[],[f231,f5312])).
fof(f23022,plain,(
  ( ! [X103,X101,X99,X107,X105,X102,X100,X98,X106,X104] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X98,X99),X101),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),X100))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X98,X99),X101),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X98,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),X102))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X99,fun(X103,bool)),X104),s('type.semanticPrimitives.error_result'(X99),sK11(X100,X99,X98)),s('type.semanticPrimitives.error_result'(X103),X105))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X98,fun(X106,bool)),X107),s(fun(X99,fun(X103,bool)),X104),s('type.semanticPrimitives.result'(X98,X99),X100),s('type.semanticPrimitives.result'(X106,X103),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X103),X105)))))) )),
  inference(superposition,[],[f394,f5312])).
fof(f23023,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X108,X115,X113] : (s('type.semanticPrimitives.result'(X108,X109),X110) != s('type.semanticPrimitives.result'(X108,X109),X111) | s('type.semanticPrimitives.result'(X108,X109),X111) = s('type.semanticPrimitives.result'(X108,X109),'const.semanticPrimitives.Rval_1'(s(X108,sK10(X111,X109,X108)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X109,fun(X112,bool)),X113),s('type.semanticPrimitives.error_result'(X109),sK11(X110,X109,X108)),s('type.semanticPrimitives.error_result'(X112),X114))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X108,fun(X115,bool)),X116),s(fun(X109,fun(X112,bool)),X113),s('type.semanticPrimitives.result'(X108,X109),X110),s('type.semanticPrimitives.result'(X115,X112),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X112),X114)))))) )),
  inference(superposition,[],[f3075,f5312])).
fof(f23024,plain,(
  ( ! [X125,X123,X121,X118,X124,X122,X120,X119,X117] : (s('type.semanticPrimitives.result'(X117,X118),X119) != s('type.semanticPrimitives.result'(X117,X118),X120) | s(X117,sK10(X119,X118,X117)) = s(X117,sK10(X120,X118,X117)) | s('type.semanticPrimitives.result'(X117,X118),X120) = s('type.semanticPrimitives.result'(X117,X118),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X118),sK11(X120,X118,X117)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X118,fun(X121,bool)),X122),s('type.semanticPrimitives.error_result'(X118),sK11(X119,X118,X117)),s('type.semanticPrimitives.error_result'(X121),X123))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X117,fun(X124,bool)),X125),s(fun(X118,fun(X121,bool)),X122),s('type.semanticPrimitives.result'(X117,X118),X119),s('type.semanticPrimitives.result'(X124,X121),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X121),X123)))))) )),
  inference(superposition,[],[f3085,f5312])).
fof(f23025,plain,(
  ( ! [X127,X134,X132,X130,X128,X138,X136,X126,X135,X133,X131,X129,X137] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X126,fun(X129,bool)),X130),s(fun(X127,fun(X131,bool)),X132),s('type.semanticPrimitives.result'(X126,X127),X128),s('type.semanticPrimitives.result'(X129,X131),X133))) | s('type.semanticPrimitives.result'(X129,X131),X133) = s('type.semanticPrimitives.result'(X129,X131),'const.semanticPrimitives.Rval_1'(s(X129,sK10(X133,X131,X129)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X127,fun(X134,bool)),X135),s('type.semanticPrimitives.error_result'(X127),sK11(X128,X127,X126)),s('type.semanticPrimitives.error_result'(X134),X136))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X126,fun(X137,bool)),X138),s(fun(X127,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X126,X127),X128),s('type.semanticPrimitives.result'(X137,X134),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X134),X136)))))) )),
  inference(superposition,[],[f3215,f5312])).
fof(f23026,plain,(
  ( ! [X146,X144,X142,X140,X151,X149,X147,X145,X143,X141,X139,X150,X148] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X139,fun(X142,bool)),X143),s(fun(X140,fun(X144,bool)),X145),s('type.semanticPrimitives.result'(X139,X140),X141),s('type.semanticPrimitives.result'(X142,X144),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X144),X146))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X140,fun(X147,bool)),X148),s('type.semanticPrimitives.error_result'(X140),sK11(X141,X140,X139)),s('type.semanticPrimitives.error_result'(X147),X149))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X139,fun(X150,bool)),X151),s(fun(X140,fun(X147,bool)),X148),s('type.semanticPrimitives.result'(X139,X140),X141),s('type.semanticPrimitives.result'(X150,X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),X149)))))) )),
  inference(superposition,[],[f3299,f5312])).
fof(f23027,plain,(
  ( ! [X158,X156,X154,X152,X163,X161,X159,X157,X155,X153,X164,X162,X160] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X155,fun(X152,bool)),X156),s(fun(X157,fun(X153,bool)),X158),s('type.semanticPrimitives.result'(X155,X157),X159),s('type.semanticPrimitives.result'(X152,X153),X154))) | s('type.semanticPrimitives.result'(X155,X157),X159) = s('type.semanticPrimitives.result'(X155,X157),'const.semanticPrimitives.Rval_1'(s(X155,sK10(X159,X157,X155)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X153,fun(X160,bool)),X161),s('type.semanticPrimitives.error_result'(X153),sK11(X154,X153,X152)),s('type.semanticPrimitives.error_result'(X160),X162))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X152,fun(X163,bool)),X164),s(fun(X153,fun(X160,bool)),X161),s('type.semanticPrimitives.result'(X152,X153),X154),s('type.semanticPrimitives.result'(X163,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),X162)))))) )),
  inference(superposition,[],[f4953,f5312])).
fof(f23028,plain,(
  ( ! [X177,X167,X165,X175,X173,X171,X169,X176,X166,X174,X172,X170,X168] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X168,fun(X165,bool)),X169),s(fun(X170,fun(X166,bool)),X171),s('type.semanticPrimitives.result'(X168,X170),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X170),X172))),s('type.semanticPrimitives.result'(X165,X166),X167))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X166,fun(X173,bool)),X174),s('type.semanticPrimitives.error_result'(X166),sK11(X167,X166,X165)),s('type.semanticPrimitives.error_result'(X173),X175))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X165,fun(X176,bool)),X177),s(fun(X166,fun(X173,bool)),X174),s('type.semanticPrimitives.result'(X165,X166),X167),s('type.semanticPrimitives.result'(X176,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),X175)))))) )),
  inference(superposition,[],[f5104,f5312])).
fof(f23029,plain,(
  ( ! [X189,X187,X185,X182,X180,X178,X190,X188,X186,X184,X183,X181,X179] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X178,fun(X181,bool)),X182),s(fun(X179,fun(X183,bool)),X184),s('type.semanticPrimitives.result'(X178,X179),X180),s('type.semanticPrimitives.result'(X181,X183),'const.semanticPrimitives.Rval_1'(s(X181,X185))))) | s(bool,'F_0') = s(bool,happ(s(fun(X181,bool),happ(s(fun(X178,fun(X181,bool)),X182),s(X178,sK10(X180,X179,X178)))),s(X181,X185))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X179,fun(X186,bool)),X187),s('type.semanticPrimitives.error_result'(X179),sK11(X180,X179,X178)),s('type.semanticPrimitives.error_result'(X186),X188))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X178,fun(X189,bool)),X190),s(fun(X179,fun(X186,bool)),X187),s('type.semanticPrimitives.result'(X178,X179),X180),s('type.semanticPrimitives.result'(X189,X186),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X186),X188)))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23030,plain,(
  ( ! [X191,X198,X196,X194,X192,X202,X200,X199,X197,X195,X193,X203,X201] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X194,fun(X191,bool)),X195),s(fun(X196,fun(X192,bool)),X197),s('type.semanticPrimitives.result'(X194,X196),'const.semanticPrimitives.Rval_1'(s(X194,X198))),s('type.semanticPrimitives.result'(X191,X192),X193))) | s(bool,'F_0') = s(bool,happ(s(fun(X191,bool),happ(s(fun(X194,fun(X191,bool)),X195),s(X194,X198))),s(X191,sK10(X193,X192,X191)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X192,fun(X199,bool)),X200),s('type.semanticPrimitives.error_result'(X192),sK11(X193,X192,X191)),s('type.semanticPrimitives.error_result'(X199),X201))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X191,fun(X202,bool)),X203),s(fun(X192,fun(X199,bool)),X200),s('type.semanticPrimitives.result'(X191,X192),X193),s('type.semanticPrimitives.result'(X202,X199),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X199),X201)))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23055,plain,(
  ( ! [X445,X441,X443,X436,X438,X444,X440,X442,X437,X439] : (s('type.semanticPrimitives.result'(X436,X437),X438) != s('type.semanticPrimitives.result'(X436,X437),'const.semanticPrimitives.Rval_1'(s(X436,sK10(X439,X437,X436)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X436,X437),bool),X440),s('type.semanticPrimitives.result'(X436,X437),'const.semanticPrimitives.Rval_1'(s(X436,sK10(X438,X437,X436))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X436,X437),bool),X440),s('type.semanticPrimitives.result'(X436,X437),X439)))) | s('type.semanticPrimitives.result'(X436,X437),X439) = s('type.semanticPrimitives.result'(X436,X437),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X437),sK11(X439,X437,X436)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X437,fun(X441,bool)),X442),s('type.semanticPrimitives.error_result'(X437),sK11(X438,X437,X436)),s('type.semanticPrimitives.error_result'(X441),X443))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X436,fun(X444,bool)),X445),s(fun(X437,fun(X441,bool)),X442),s('type.semanticPrimitives.result'(X436,X437),X438),s('type.semanticPrimitives.result'(X444,X441),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X441),X443)))))) )),
  inference(superposition,[],[f3092,f5312])).
fof(f23058,plain,(
  ( ! [X466,X472,X474,X469,X471,X465,X467,X473,X468,X470] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X465,X466),X468),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X465,X466),X467))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X465,X466),X468),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X465,X466),X469))) | s('type.semanticPrimitives.result'(X465,X466),'const.semanticPrimitives.Rval_1'(s(X465,sK10(X467,X466,X465)))) = s('type.semanticPrimitives.result'(X465,X466),'const.semanticPrimitives.Rval_1'(s(X465,sK10(X469,X466,X465)))) | s('type.semanticPrimitives.result'(X465,X466),X469) = s('type.semanticPrimitives.result'(X465,X466),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X466),sK11(X469,X466,X465)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X466,fun(X470,bool)),X471),s('type.semanticPrimitives.error_result'(X466),sK11(X467,X466,X465)),s('type.semanticPrimitives.error_result'(X470),X472))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X465,fun(X473,bool)),X474),s(fun(X466,fun(X470,bool)),X471),s('type.semanticPrimitives.result'(X465,X466),X467),s('type.semanticPrimitives.result'(X473,X470),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X470),X472)))))) )),
  inference(superposition,[],[f3094,f5312])).
fof(f23060,plain,(
  ( ! [X486,X492,X494,X488,X490,X485,X487,X493,X489,X491] : (s('type.semanticPrimitives.result'(X485,X486),X487) != s('type.semanticPrimitives.result'(X485,X486),X488) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X485,X486),X489),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X485,X486),'const.semanticPrimitives.Rval_1'(s(X485,sK10(X487,X486,X485)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X485,X486),X489),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X485,X486),'const.semanticPrimitives.Rval_1'(s(X485,sK10(X488,X486,X485)))))) | s('type.semanticPrimitives.result'(X485,X486),X488) = s('type.semanticPrimitives.result'(X485,X486),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X486),sK11(X488,X486,X485)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X486,fun(X490,bool)),X491),s('type.semanticPrimitives.error_result'(X486),sK11(X487,X486,X485)),s('type.semanticPrimitives.error_result'(X490),X492))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X485,fun(X493,bool)),X494),s(fun(X486,fun(X490,bool)),X491),s('type.semanticPrimitives.result'(X485,X486),X487),s('type.semanticPrimitives.result'(X493,X490),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X490),X492)))))) )),
  inference(superposition,[],[f3096,f5312])).
fof(f23065,plain,(
  ( ! [X553,X555,X549,X551,X547,X556,X552,X554,X548,X550] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X547,X548),bool),X550),s('type.semanticPrimitives.result'(X547,X548),X549)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X547,X548),bool),X550),s('type.semanticPrimitives.result'(X547,X548),X551)))) | s('type.semanticPrimitives.result'(X547,X548),X551) != s('type.semanticPrimitives.result'(X547,X548),'const.semanticPrimitives.Rval_1'(s(X547,sK10(X549,X548,X547)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X548,fun(X552,bool)),X553),s('type.semanticPrimitives.error_result'(X548),sK11(X549,X548,X547)),s('type.semanticPrimitives.error_result'(X552),X554))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X547,fun(X555,bool)),X556),s(fun(X548,fun(X552,bool)),X553),s('type.semanticPrimitives.result'(X547,X548),X549),s('type.semanticPrimitives.result'(X555,X552),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X552),X554)))))) )),
  inference(superposition,[],[f194,f5312])).
fof(f23077,plain,(
  ( ! [X689,X691,X685,X687,X683,X688,X690,X684,X686] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X683,X684),bool),X686),s('type.semanticPrimitives.result'(X683,X684),X685)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X683,X684),bool),X686),s('type.semanticPrimitives.result'(X683,X684),sK9('const.semanticPrimitives.Rval_1'(s(X683,sK10(X685,X684,X683))),X686,'type.semanticPrimitives.result'(X683,X684))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X684,fun(X687,bool)),X688),s('type.semanticPrimitives.error_result'(X684),sK11(X685,X684,X683)),s('type.semanticPrimitives.error_result'(X687),X689))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X683,fun(X690,bool)),X691),s(fun(X684,fun(X687,bool)),X688),s('type.semanticPrimitives.result'(X683,X684),X685),s('type.semanticPrimitives.result'(X690,X687),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X687),X689)))))) )),
  inference(superposition,[],[f471,f5312])).
fof(f23079,plain,(
  ( ! [X705,X707,X708,X710,X702,X706,X704,X709,X711,X703] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X702,X703),X705),X706) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X702,X703),X705),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X702,X703),X704))) | s('type.semanticPrimitives.result'(X702,X703),sK10(X706,X705,'type.semanticPrimitives.result'(X702,X703))) = s('type.semanticPrimitives.result'(X702,X703),'const.semanticPrimitives.Rval_1'(s(X702,sK10(X704,X703,X702)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X702,X703),X705),X706) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X702,X703),X705),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X705),sK11(X706,X705,'type.semanticPrimitives.result'(X702,X703))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X703,fun(X707,bool)),X708),s('type.semanticPrimitives.error_result'(X703),sK11(X704,X703,X702)),s('type.semanticPrimitives.error_result'(X707),X709))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X702,fun(X710,bool)),X711),s(fun(X703,fun(X707,bool)),X708),s('type.semanticPrimitives.result'(X702,X703),X704),s('type.semanticPrimitives.result'(X710,X707),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X707),X709)))))) )),
  inference(superposition,[],[f3085,f5312])).
fof(f23084,plain,(
  ( ! [X779,X777,X781,X771,X769,X775,X773,X778,X776,X780,X770,X768,X774,X772] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X768,X769),fun(X771,bool)),X772),s(fun(X773,fun(X774,bool)),X775),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X768,X769),X773),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X768,X769),X770))),s('type.semanticPrimitives.result'(X771,X774),'const.semanticPrimitives.Rval_1'(s(X771,X776))))) | s(bool,'F_0') = s(bool,happ(s(fun(X771,bool),happ(s(fun('type.semanticPrimitives.result'(X768,X769),fun(X771,bool)),X772),s('type.semanticPrimitives.result'(X768,X769),'const.semanticPrimitives.Rval_1'(s(X768,sK10(X770,X769,X768)))))),s(X771,X776))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X769,fun(X777,bool)),X778),s('type.semanticPrimitives.error_result'(X769),sK11(X770,X769,X768)),s('type.semanticPrimitives.error_result'(X777),X779))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X768,fun(X780,bool)),X781),s(fun(X769,fun(X777,bool)),X778),s('type.semanticPrimitives.result'(X768,X769),X770),s('type.semanticPrimitives.result'(X780,X777),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X777),X779)))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23085,plain,(
  ( ! [X786,X784,X790,X788,X783,X795,X793,X787,X785,X791,X789,X782,X794,X792] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X785,fun('type.semanticPrimitives.result'(X782,X783),bool)),X786),s(fun(X787,fun(X788,bool)),X789),s('type.semanticPrimitives.result'(X785,X787),'const.semanticPrimitives.Rval_1'(s(X785,X790))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X782,X783),X788),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X782,X783),X784))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X782,X783),bool),happ(s(fun(X785,fun('type.semanticPrimitives.result'(X782,X783),bool)),X786),s(X785,X790))),s('type.semanticPrimitives.result'(X782,X783),'const.semanticPrimitives.Rval_1'(s(X782,sK10(X784,X783,X782)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X783,fun(X791,bool)),X792),s('type.semanticPrimitives.error_result'(X783),sK11(X784,X783,X782)),s('type.semanticPrimitives.error_result'(X791),X793))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X782,fun(X794,bool)),X795),s(fun(X783,fun(X791,bool)),X792),s('type.semanticPrimitives.result'(X782,X783),X784),s('type.semanticPrimitives.result'(X794,X791),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X791),X793)))))) )),
  inference(superposition,[],[f5598,f5312])).
fof(f23141,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.error_result'(X98),sK11(X101,X98,X95)),s('type.semanticPrimitives.error_result'(X99),X102)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X95,fun(X96,bool)),X97),s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.result'(X95,X98),X101),s('type.semanticPrimitives.result'(X96,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),X102)))))) )),
  inference(subsumption_resolution,[],[f22908,f16753])).
fof(f22908,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.error_result'(X98),sK11(X101,X98,X95)),s('type.semanticPrimitives.error_result'(X99),X102)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X95,fun(X96,bool)),X97),s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.result'(X95,X98),X101),s('type.semanticPrimitives.result'(X96,X99),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X99),X102))))) | s('type.semanticPrimitives.result'(X95,X98),X101) = s('type.semanticPrimitives.result'(X95,X98),'const.semanticPrimitives.Rval_1'(s(X95,sK10(X101,X98,X95))))) )),
  inference(superposition,[],[f157,f5312])).
fof(f23142,plain,(
  ( ! [X222,X231,X229,X227,X225,X223,X230,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X231))) != s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X225,fun(X226,bool)),X227),s('type.semanticPrimitives.error_result'(X225),sK11(X228,X225,X222)),s('type.semanticPrimitives.error_result'(X226),X229))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X222,fun(X223,bool)),X224),s(fun(X225,fun(X226,bool)),X227),s('type.semanticPrimitives.result'(X222,X225),X228),s('type.semanticPrimitives.result'(X223,X226),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X226),X229))))) | s(bool,'T_0') = s(bool,X231)) )),
  inference(subsumption_resolution,[],[f22922,f16753])).
fof(f22922,plain,(
  ( ! [X222,X231,X229,X227,X225,X223,X230,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,X231))) != s('type.semanticPrimitives.result'(bool,X230),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X225,fun(X226,bool)),X227),s('type.semanticPrimitives.error_result'(X225),sK11(X228,X225,X222)),s('type.semanticPrimitives.error_result'(X226),X229))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X222,fun(X223,bool)),X224),s(fun(X225,fun(X226,bool)),X227),s('type.semanticPrimitives.result'(X222,X225),X228),s('type.semanticPrimitives.result'(X223,X226),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X226),X229))))) | s(bool,'T_0') = s(bool,X231) | s('type.semanticPrimitives.result'(X222,X225),X228) = s('type.semanticPrimitives.result'(X222,X225),'const.semanticPrimitives.Rval_1'(s(X222,sK10(X228,X225,X222))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f23145,plain,(
  ( ! [X300,X302,X296,X298,X295,X301,X303,X297,X299] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X295,fun(X296,bool)),X297),s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.result'(X295,X298),X301),s('type.semanticPrimitives.result'(X296,X299),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X299),X302))))) | s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.error_result'(X298),sK11(X301,X298,X295)),s('type.semanticPrimitives.error_result'(X299),X302)))))) )),
  inference(subsumption_resolution,[],[f23144,f16753])).
fof(f23144,plain,(
  ( ! [X300,X302,X296,X298,X295,X301,X303,X297,X299] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X295,fun(X296,bool)),X297),s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.result'(X295,X298),X301),s('type.semanticPrimitives.result'(X296,X299),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X299),X302))))) | s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.error_result'(X298),sK11(X301,X298,X295)),s('type.semanticPrimitives.error_result'(X299),X302))))) | s('type.semanticPrimitives.result'(X295,X298),X301) = s('type.semanticPrimitives.result'(X295,X298),'const.semanticPrimitives.Rval_1'(s(X295,sK10(X301,X298,X295))))) )),
  inference(forward_demodulation,[],[f22929,f228])).
fof(f22929,plain,(
  ( ! [X300,X302,X296,X298,X308,X310,X304,X306,X295,X301,X303,X297,X299,X309,X311,X305,X307] : (s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.error_result'(X298),sK11(X301,X298,X295)),s('type.semanticPrimitives.error_result'(X299),X302))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X295,fun(X296,bool)),X297),s(fun(X298,fun(X299,bool)),X300),s('type.semanticPrimitives.result'(X295,X298),X301),s('type.semanticPrimitives.result'(X296,X299),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X299),X302))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X304,fun(X305,bool)),X306),s(fun(X307,fun(X308,bool)),X309),s('type.semanticPrimitives.result'(X304,X307),'const.semanticPrimitives.Rval_1'(s(X304,X310))),s('type.semanticPrimitives.result'(X305,X308),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X308),X311))))) | s('type.semanticPrimitives.result'(X295,X298),X301) = s('type.semanticPrimitives.result'(X295,X298),'const.semanticPrimitives.Rval_1'(s(X295,sK10(X301,X298,X295))))) )),
  inference(superposition,[],[f3261,f5312])).
fof(f23164,plain,(
  ( ! [X389,X391,X397,X393,X395,X388,X390,X396,X392,X394] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X388,X389),X390))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X388,X389),X392))) | s('type.semanticPrimitives.result'(X388,X389),X392) = s('type.semanticPrimitives.result'(X388,X389),'const.semanticPrimitives.Rval_1'(s(X388,sK10(X392,X389,X388)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X389,fun(X393,bool)),X394),s('type.semanticPrimitives.error_result'(X389),sK11(X390,X389,X388)),s('type.semanticPrimitives.error_result'(X393),X395))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X388,fun(X396,bool)),X397),s(fun(X389,fun(X393,bool)),X394),s('type.semanticPrimitives.result'(X388,X389),X390),s('type.semanticPrimitives.result'(X396,X393),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X393),X395)))))) )),
  inference(subsumption_resolution,[],[f23050,f213])).
fof(f23050,plain,(
  ( ! [X389,X391,X397,X393,X395,X388,X390,X396,X392,X394] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X388,X389),X390))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X388,X389),X392))) | s('type.semanticPrimitives.result'(X388,X389),'const.semanticPrimitives.Rval_1'(s(X388,sK10(X390,X389,X388)))) = s('type.semanticPrimitives.result'(X388,X389),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X389),sK11(X392,X389,X388)))) | s('type.semanticPrimitives.result'(X388,X389),X392) = s('type.semanticPrimitives.result'(X388,X389),'const.semanticPrimitives.Rval_1'(s(X388,sK10(X392,X389,X388)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X389,fun(X393,bool)),X394),s('type.semanticPrimitives.error_result'(X389),sK11(X390,X389,X388)),s('type.semanticPrimitives.error_result'(X393),X395))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X388,fun(X396,bool)),X397),s(fun(X389,fun(X393,bool)),X394),s('type.semanticPrimitives.result'(X388,X389),X390),s('type.semanticPrimitives.result'(X396,X393),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X393),X395)))))) )),
  inference(superposition,[],[f3078,f5312])).
fof(f23165,plain,(
  ( ! [X420,X422,X418,X424,X426,X421,X423,X419,X425] : (s('type.semanticPrimitives.result'(X418,X419),X420) != s('type.semanticPrimitives.result'(X418,X419),'const.semanticPrimitives.Rval_1'(s(X418,X421))) | s(X418,X421) = s(X418,sK10('const.semanticPrimitives.Rval_1'(s(X418,sK10(X420,X419,X418))),X419,X418)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X419,fun(X422,bool)),X423),s('type.semanticPrimitives.error_result'(X419),sK11(X420,X419,X418)),s('type.semanticPrimitives.error_result'(X422),X424))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X418,fun(X425,bool)),X426),s(fun(X419,fun(X422,bool)),X423),s('type.semanticPrimitives.result'(X418,X419),X420),s('type.semanticPrimitives.result'(X425,X422),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X422),X424)))))) )),
  inference(subsumption_resolution,[],[f23053,f213])).
fof(f23053,plain,(
  ( ! [X420,X422,X418,X424,X426,X421,X423,X419,X425] : (s('type.semanticPrimitives.result'(X418,X419),X420) != s('type.semanticPrimitives.result'(X418,X419),'const.semanticPrimitives.Rval_1'(s(X418,X421))) | s(X418,X421) = s(X418,sK10('const.semanticPrimitives.Rval_1'(s(X418,sK10(X420,X419,X418))),X419,X418)) | s('type.semanticPrimitives.result'(X418,X419),'const.semanticPrimitives.Rval_1'(s(X418,sK10(X420,X419,X418)))) = s('type.semanticPrimitives.result'(X418,X419),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X419),sK11('const.semanticPrimitives.Rval_1'(s(X418,sK10(X420,X419,X418))),X419,X418)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X419,fun(X422,bool)),X423),s('type.semanticPrimitives.error_result'(X419),sK11(X420,X419,X418)),s('type.semanticPrimitives.error_result'(X422),X424))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X418,fun(X425,bool)),X426),s(fun(X419,fun(X422,bool)),X423),s('type.semanticPrimitives.result'(X418,X419),X420),s('type.semanticPrimitives.result'(X425,X422),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X422),X424)))))) )),
  inference(superposition,[],[f3085,f5312])).
fof(f23167,plain,(
  ( ! [X447,X453,X449,X451,X446,X452,X454,X448,X450] : (s('type.semanticPrimitives.result'(X446,X447),'const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446)))) = s('type.semanticPrimitives.result'(X446,X447),sK9('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X449,'type.semanticPrimitives.result'(X446,X447))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X446,X447),bool),X449),s('type.semanticPrimitives.result'(X446,X447),X448)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.error_result'(X447),sK11(X448,X447,X446)),s('type.semanticPrimitives.error_result'(X450),X452))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X446,fun(X453,bool)),X454),s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.result'(X446,X447),X448),s('type.semanticPrimitives.result'(X453,X450),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X450),X452)))))) )),
  inference(forward_demodulation,[],[f23166,f7120])).
fof(f23166,plain,(
  ( ! [X447,X453,X449,X451,X446,X452,X454,X448,X450] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X446,X447),bool),X449),s('type.semanticPrimitives.result'(X446,X447),X448)))) | s('type.semanticPrimitives.result'(X446,X447),'const.semanticPrimitives.Rval_1'(s(X446,sK10('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X447,X446)))) = s('type.semanticPrimitives.result'(X446,X447),sK9('const.semanticPrimitives.Rval_1'(s(X446,sK10('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X447,X446))),X449,'type.semanticPrimitives.result'(X446,X447))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.error_result'(X447),sK11(X448,X447,X446)),s('type.semanticPrimitives.error_result'(X450),X452))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X446,fun(X453,bool)),X454),s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.result'(X446,X447),X448),s('type.semanticPrimitives.result'(X453,X450),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X450),X452)))))) )),
  inference(subsumption_resolution,[],[f23056,f213])).
fof(f23056,plain,(
  ( ! [X447,X453,X449,X451,X446,X452,X454,X448,X450] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X446,X447),bool),X449),s('type.semanticPrimitives.result'(X446,X447),X448)))) | s('type.semanticPrimitives.result'(X446,X447),'const.semanticPrimitives.Rval_1'(s(X446,sK10('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X447,X446)))) = s('type.semanticPrimitives.result'(X446,X447),sK9('const.semanticPrimitives.Rval_1'(s(X446,sK10('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X447,X446))),X449,'type.semanticPrimitives.result'(X446,X447))) | s('type.semanticPrimitives.result'(X446,X447),'const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446)))) = s('type.semanticPrimitives.result'(X446,X447),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X447),sK11('const.semanticPrimitives.Rval_1'(s(X446,sK10(X448,X447,X446))),X447,X446)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.error_result'(X447),sK11(X448,X447,X446)),s('type.semanticPrimitives.error_result'(X450),X452))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X446,fun(X453,bool)),X454),s(fun(X447,fun(X450,bool)),X451),s('type.semanticPrimitives.result'(X446,X447),X448),s('type.semanticPrimitives.result'(X453,X450),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X450),X452)))))) )),
  inference(superposition,[],[f3093,f5312])).
fof(f23169,plain,(
  ( ! [X455,X461,X463,X457,X459,X460,X462,X456,X458,X464] : (s('type.semanticPrimitives.result'(X455,X456),X459) = s('type.semanticPrimitives.result'(X455,X456),'const.semanticPrimitives.Rval_1'(s(X455,sK10(X457,X456,X455)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X457))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X459))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.error_result'(X456),sK11(X457,X456,X455)),s('type.semanticPrimitives.error_result'(X460),X462))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X455,fun(X463,bool)),X464),s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.result'(X455,X456),X457),s('type.semanticPrimitives.result'(X463,X460),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X460),X462)))))) )),
  inference(forward_demodulation,[],[f23168,f7120])).
fof(f23168,plain,(
  ( ! [X455,X461,X463,X457,X459,X460,X462,X456,X458,X464] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X457))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X459))) | s('type.semanticPrimitives.result'(X455,X456),X459) = s('type.semanticPrimitives.result'(X455,X456),'const.semanticPrimitives.Rval_1'(s(X455,sK10('const.semanticPrimitives.Rval_1'(s(X455,sK10(X457,X456,X455))),X456,X455)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.error_result'(X456),sK11(X457,X456,X455)),s('type.semanticPrimitives.error_result'(X460),X462))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X455,fun(X463,bool)),X464),s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.result'(X455,X456),X457),s('type.semanticPrimitives.result'(X463,X460),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X460),X462)))))) )),
  inference(subsumption_resolution,[],[f23057,f213])).
fof(f23057,plain,(
  ( ! [X455,X461,X463,X457,X459,X460,X462,X456,X458,X464] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X457))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X455,X456),X458),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X455,X456),X459))) | s('type.semanticPrimitives.result'(X455,X456),X459) = s('type.semanticPrimitives.result'(X455,X456),'const.semanticPrimitives.Rval_1'(s(X455,sK10('const.semanticPrimitives.Rval_1'(s(X455,sK10(X457,X456,X455))),X456,X455)))) | s('type.semanticPrimitives.result'(X455,X456),'const.semanticPrimitives.Rval_1'(s(X455,sK10(X457,X456,X455)))) = s('type.semanticPrimitives.result'(X455,X456),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X456),sK11('const.semanticPrimitives.Rval_1'(s(X455,sK10(X457,X456,X455))),X456,X455)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.error_result'(X456),sK11(X457,X456,X455)),s('type.semanticPrimitives.error_result'(X460),X462))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X455,fun(X463,bool)),X464),s(fun(X456,fun(X460,bool)),X461),s('type.semanticPrimitives.result'(X455,X456),X457),s('type.semanticPrimitives.result'(X463,X460),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X460),X462)))))) )),
  inference(superposition,[],[f3094,f5312])).
fof(f23171,plain,(
  ( ! [X476,X478,X484,X480,X482,X475,X477,X479,X481,X483] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),X478))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),'const.semanticPrimitives.Rval_1'(s(X475,sK10(X477,X476,X475)))))) | s('type.semanticPrimitives.result'(X475,X476),X477) != s('type.semanticPrimitives.result'(X475,X476),X478) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.error_result'(X476),sK11(X477,X476,X475)),s('type.semanticPrimitives.error_result'(X480),X482))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X475,fun(X483,bool)),X484),s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.result'(X475,X476),X477),s('type.semanticPrimitives.result'(X483,X480),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X480),X482)))))) )),
  inference(forward_demodulation,[],[f23170,f7120])).
fof(f23170,plain,(
  ( ! [X476,X478,X484,X480,X482,X475,X477,X479,X481,X483] : (s('type.semanticPrimitives.result'(X475,X476),X477) != s('type.semanticPrimitives.result'(X475,X476),X478) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),X478))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),'const.semanticPrimitives.Rval_1'(s(X475,sK10('const.semanticPrimitives.Rval_1'(s(X475,sK10(X477,X476,X475))),X476,X475)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.error_result'(X476),sK11(X477,X476,X475)),s('type.semanticPrimitives.error_result'(X480),X482))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X475,fun(X483,bool)),X484),s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.result'(X475,X476),X477),s('type.semanticPrimitives.result'(X483,X480),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X480),X482)))))) )),
  inference(subsumption_resolution,[],[f23059,f213])).
fof(f23059,plain,(
  ( ! [X476,X478,X484,X480,X482,X475,X477,X479,X481,X483] : (s('type.semanticPrimitives.result'(X475,X476),X477) != s('type.semanticPrimitives.result'(X475,X476),X478) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),X478))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X475,X476),X479),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X475,X476),'const.semanticPrimitives.Rval_1'(s(X475,sK10('const.semanticPrimitives.Rval_1'(s(X475,sK10(X477,X476,X475))),X476,X475)))))) | s('type.semanticPrimitives.result'(X475,X476),'const.semanticPrimitives.Rval_1'(s(X475,sK10(X477,X476,X475)))) = s('type.semanticPrimitives.result'(X475,X476),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X476),sK11('const.semanticPrimitives.Rval_1'(s(X475,sK10(X477,X476,X475))),X476,X475)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.error_result'(X476),sK11(X477,X476,X475)),s('type.semanticPrimitives.error_result'(X480),X482))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X475,fun(X483,bool)),X484),s(fun(X476,fun(X480,bool)),X481),s('type.semanticPrimitives.result'(X475,X476),X477),s('type.semanticPrimitives.result'(X483,X480),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X480),X482)))))) )),
  inference(superposition,[],[f3096,f5312])).
fof(f23042,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X320,X322,X328,X319] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X319,X320),X321),X322) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X319,X320),X321),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X319,X320),X323))) | s('type.semanticPrimitives.result'(X319,X320),X323) = s('type.semanticPrimitives.result'(X319,X320),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X320),sK11(sK10(X322,X321,'type.semanticPrimitives.result'(X319,X320)),X320,X319)))) | s('type.semanticPrimitives.result'(X319,X320),sK10(X322,X321,'type.semanticPrimitives.result'(X319,X320))) = s('type.semanticPrimitives.result'(X319,X320),'const.semanticPrimitives.Rval_1'(s(X319,sK10(sK10(X322,X321,'type.semanticPrimitives.result'(X319,X320)),X320,X319)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X321,fun(X324,bool)),X325),s('type.semanticPrimitives.error_result'(X321),sK11(X322,X321,'type.semanticPrimitives.result'(X319,X320))),s('type.semanticPrimitives.error_result'(X324),X326))) = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X319,X320),fun(X327,bool)),X328),s(fun(X321,fun(X324,bool)),X325),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X319,X320),X321),X322),s('type.semanticPrimitives.result'(X327,X324),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X324),X326)))))) )),
  inference(superposition,[],[f3078,f5312])).
fof(f23041,plain,(
  ( ! [X313,X315,X310,X316,X318,X312,X314,X309,X311,X317] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X309,X310),X311),X312) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X309,X310),X311),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X309,X310),X313))) | s('type.semanticPrimitives.result'(X309,X310),sK10(X312,X311,'type.semanticPrimitives.result'(X309,X310))) = s('type.semanticPrimitives.result'(X309,X310),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X310),sK11(X313,X310,X309)))) | s('type.semanticPrimitives.result'(X309,X310),X313) = s('type.semanticPrimitives.result'(X309,X310),'const.semanticPrimitives.Rval_1'(s(X309,sK10(X313,X310,X309)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X311,fun(X314,bool)),X315),s('type.semanticPrimitives.error_result'(X311),sK11(X312,X311,'type.semanticPrimitives.result'(X309,X310))),s('type.semanticPrimitives.error_result'(X314),X316))) = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X309,X310),fun(X317,bool)),X318),s(fun(X311,fun(X314,bool)),X315),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X309,X310),X311),X312),s('type.semanticPrimitives.result'(X317,X314),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X314),X316)))))) )),
  inference(superposition,[],[f3078,f5312])).
fof(f23040,plain,(
  ( ! [X300,X302,X308,X304,X306,X301,X303,X299,X305,X307] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X299,X300),X301),X302) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X299,X300),X301),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X299,X300),X303))) | s('type.semanticPrimitives.result'(X299,X300),X303) = s('type.semanticPrimitives.result'(X299,X300),'const.semanticPrimitives.Rval_1'(s(X299,sK10(sK10(X302,X301,'type.semanticPrimitives.result'(X299,X300)),X300,X299)))) | s('type.semanticPrimitives.result'(X299,X300),sK10(X302,X301,'type.semanticPrimitives.result'(X299,X300))) = s('type.semanticPrimitives.result'(X299,X300),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X300),sK11(sK10(X302,X301,'type.semanticPrimitives.result'(X299,X300)),X300,X299)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X301,fun(X304,bool)),X305),s('type.semanticPrimitives.error_result'(X301),sK11(X302,X301,'type.semanticPrimitives.result'(X299,X300))),s('type.semanticPrimitives.error_result'(X304),X306))) = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X299,X300),fun(X307,bool)),X308),s(fun(X301,fun(X304,bool)),X305),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X299,X300),X301),X302),s('type.semanticPrimitives.result'(X307,X304),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X304),X306)))))) )),
  inference(superposition,[],[f3094,f5312])).
fof(f23039,plain,(
  ( ! [X292,X294,X290,X296,X298,X293,X295,X289,X291,X297] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X289,X290),X291),X292) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X289,X290),X291),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X289,X290),X293))) | s('type.semanticPrimitives.result'(X289,X290),sK10(X292,X291,'type.semanticPrimitives.result'(X289,X290))) = s('type.semanticPrimitives.result'(X289,X290),'const.semanticPrimitives.Rval_1'(s(X289,sK10(X293,X290,X289)))) | s('type.semanticPrimitives.result'(X289,X290),X293) = s('type.semanticPrimitives.result'(X289,X290),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X290),sK11(X293,X290,X289)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X291,fun(X294,bool)),X295),s('type.semanticPrimitives.error_result'(X291),sK11(X292,X291,'type.semanticPrimitives.result'(X289,X290))),s('type.semanticPrimitives.error_result'(X294),X296))) = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X289,X290),fun(X297,bool)),X298),s(fun(X291,fun(X294,bool)),X295),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X289,X290),X291),X292),s('type.semanticPrimitives.result'(X297,X294),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X294),X296)))))) )),
  inference(superposition,[],[f3094,f5312])).
fof(f23395,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X14,fun(X16,bool)),X17),s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13)),s('type.semanticPrimitives.error_result'(X16),sK11(X18,X16,X19)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X19,bool)),X20),s(fun(X14,fun(X16,bool)),X17),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X19,X16),X18))) | s('type.semanticPrimitives.result'(X19,X16),X18) = s('type.semanticPrimitives.result'(X19,X16),'const.semanticPrimitives.Rval_1'(s(X19,sK10(X18,X16,X19)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X21,bool)),X22),s(fun(X14,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f5315,f3212])).
fof(f23394,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X1,fun(X3,bool)),X4),s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)),s('type.semanticPrimitives.error_result'(X3),sK11(X5,X3,X6)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X6,bool)),X7),s(fun(X1,fun(X3,bool)),X4),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X6,X3),X5))) | s('type.semanticPrimitives.result'(X6,X3),X5) = s('type.semanticPrimitives.result'(X6,X3),'const.semanticPrimitives.Rval_1'(s(X6,sK10(X5,X3,X6)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f5315,f4992])).
fof(f22752,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X29,fun(X27,bool)),X30),s('type.semanticPrimitives.error_result'(X29),sK11(X31,X29,X32)),s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X32,fun(X26,bool)),X33),s(fun(X29,fun(X27,bool)),X30),s('type.semanticPrimitives.result'(X32,X29),X31),s('type.semanticPrimitives.result'(X26,X27),X28))) | s('type.semanticPrimitives.result'(X32,X29),X31) = s('type.semanticPrimitives.result'(X32,X29),'const.semanticPrimitives.Rval_1'(s(X32,sK10(X31,X29,X32)))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,sK10(X28,X27,X26))))) )),
  inference(superposition,[],[f5312,f207])).
fof(f22751,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X16,fun(X14,bool)),X17),s('type.semanticPrimitives.error_result'(X16),sK11(X18,X16,X19)),s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X19,fun(X13,bool)),X20),s(fun(X16,fun(X14,bool)),X17),s('type.semanticPrimitives.result'(X19,X16),X18),s('type.semanticPrimitives.result'(X13,X14),X15))) | s('type.semanticPrimitives.result'(X19,X16),X18) = s('type.semanticPrimitives.result'(X19,X16),'const.semanticPrimitives.Rval_1'(s(X19,sK10(X18,X16,X19)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X21,bool)),X22),s(fun(X14,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f5312,f3212])).
fof(f22750,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X3,fun(X1,bool)),X4),s('type.semanticPrimitives.error_result'(X3),sK11(X5,X3,X6)),s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X0,bool)),X7),s(fun(X3,fun(X1,bool)),X4),s('type.semanticPrimitives.result'(X6,X3),X5),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X6,X3),X5) = s('type.semanticPrimitives.result'(X6,X3),'const.semanticPrimitives.Rval_1'(s(X6,sK10(X5,X3,X6)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f5312,f4992])).
fof(f22753,plain,(
  ( ! [X39,X37,X35,X38,X36,X34,X40] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X36,fun(X34,bool)),X37),s('type.semanticPrimitives.error_result'(X36),sK11(X38,X36,X39)),s('type.semanticPrimitives.error_result'(X34),sK11(X35,X34,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X39,fun(bool,bool)),X40),s(fun(X36,fun(X34,bool)),X37),s('type.semanticPrimitives.result'(X39,X36),X38),s('type.semanticPrimitives.result'(bool,X34),X35))) | s('type.semanticPrimitives.result'(X39,X36),X38) = s('type.semanticPrimitives.result'(X39,X36),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X38,X36,X39)))) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X35,X34,bool))) )),
  inference(superposition,[],[f5312,f3058])).
fof(f23397,plain,(
  ( ! [X39,X37,X35,X38,X36,X34,X40] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X34,fun(X36,bool)),X37),s('type.semanticPrimitives.error_result'(X34),sK11(X35,X34,bool)),s('type.semanticPrimitives.error_result'(X36),sK11(X38,X36,X39)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X39,bool)),X40),s(fun(X34,fun(X36,bool)),X37),s('type.semanticPrimitives.result'(bool,X34),X35),s('type.semanticPrimitives.result'(X39,X36),X38))) | s('type.semanticPrimitives.result'(X39,X36),X38) = s('type.semanticPrimitives.result'(X39,X36),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X38,X36,X39)))) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X35,X34,bool))) )),
  inference(superposition,[],[f5315,f3058])).
fof(f23107,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X115,X113] : (s('type.semanticPrimitives.result'(X107,X108),X109) = s('type.semanticPrimitives.result'(X107,X108),'const.semanticPrimitives.Rval_1'(s(X107,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X107,X108),X109)),X110,'type.semanticPrimitives.result'(X107,X108)),X108,X107)))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X107,fun(X114,bool)),X115),s(fun(X108,fun(X111,bool)),X112),s('type.semanticPrimitives.result'(X107,X108),X109),s('type.semanticPrimitives.result'(X114,X111),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X111),X113))))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X108,fun(X111,bool)),X112),s('type.semanticPrimitives.error_result'(X108),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X107,X108),X109)),X110,'type.semanticPrimitives.result'(X107,X108)),X108,X107)),s('type.semanticPrimitives.error_result'(X111),X113)))) )),
  inference(forward_demodulation,[],[f22747,f7120])).
fof(f22747,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X115,X113] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X107,fun(X114,bool)),X115),s(fun(X108,fun(X111,bool)),X112),s('type.semanticPrimitives.result'(X107,X108),X109),s('type.semanticPrimitives.result'(X114,X111),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X111),X113))))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X108,fun(X111,bool)),X112),s('type.semanticPrimitives.error_result'(X108),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X107,X108),X109)),X110,'type.semanticPrimitives.result'(X107,X108)),X108,X107)),s('type.semanticPrimitives.error_result'(X111),X113))) | s('type.semanticPrimitives.result'(X107,X108),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X107,X108),X109)),X110,'type.semanticPrimitives.result'(X107,X108))) = s('type.semanticPrimitives.result'(X107,X108),'const.semanticPrimitives.Rval_1'(s(X107,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X107,X108),X109)),X110,'type.semanticPrimitives.result'(X107,X108)),X108,X107))))) )),
  inference(superposition,[],[f5312,f7120])).
fof(f14202,plain,(
  ( ! [X158,X156,X154,X152,X151,X149,X159,X157,X155,X153,X150,X148] : (s(bool,sK10(X149,X148,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X150,bool)),X151),s(fun(X148,fun(X152,bool)),X153),s('type.semanticPrimitives.result'(bool,X148),X149),s('type.semanticPrimitives.result'(X150,X152),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X152),X154))))) | s(bool,'T_0') = s(bool,sK10(X149,X148,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X155,fun(bool,bool)),X156),s(fun(X157,fun(X148,bool)),X158),s('type.semanticPrimitives.result'(X155,X157),'const.semanticPrimitives.Rval_1'(s(X155,X159))),s('type.semanticPrimitives.result'(bool,X148),X149)))) )),
  inference(superposition,[],[f3205,f3215])).
fof(f14637,plain,(
  ( ! [X167,X165,X175,X173,X171,X169,X166,X164,X174,X172,X170,X168] : (s(bool,sK10(X165,X164,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X166,bool)),X167),s(fun(X164,fun(X168,bool)),X169),s('type.semanticPrimitives.result'(bool,X164),X165),s('type.semanticPrimitives.result'(X166,X168),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X168),X170))))) | s(bool,'T_0') = s(bool,sK10(X165,X164,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X171,bool)),X172),s(fun(X164,fun(X173,bool)),X174),s('type.semanticPrimitives.result'(bool,X164),X165),s('type.semanticPrimitives.result'(X171,X173),'const.semanticPrimitives.Rval_1'(s(X171,X175)))))) )),
  inference(superposition,[],[f3205,f4953])).
fof(f16731,plain,(
  ( ! [X561,X563,X557,X559,X555,X560,X562,X556,X558,X554] : (~p(s(bool,happ(s(fun(bool,bool),X562),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X562),s(bool,X563)))) | s(bool,X563) != s(bool,'const.evalProps.result_rel_4'(s(fun(X554,fun(X555,bool)),X556),s(fun(X557,fun(X558,bool)),X559),s('type.semanticPrimitives.result'(X554,X557),X560),s('type.semanticPrimitives.result'(X555,X558),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X558),X561))))) | s('type.semanticPrimitives.result'(X554,X557),X560) = s('type.semanticPrimitives.result'(X554,X557),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X557),sK11(X560,X557,X554))))) )),
  inference(superposition,[],[f194,f3212])).
fof(f16732,plain,(
  ( ! [X569,X571,X565,X567,X572,X568,X570,X564,X566] : (~p(s(bool,happ(s(fun(bool,bool),X572),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X564,fun(X565,bool)),X566),s(fun(X567,fun(X568,bool)),X569),s('type.semanticPrimitives.result'(X564,X567),X570),s('type.semanticPrimitives.result'(X565,X568),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X568),X571))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X564,fun(X565,bool)),X566),s(fun(X567,fun(X568,bool)),X569),s('type.semanticPrimitives.result'(X564,X567),X570),s('type.semanticPrimitives.result'(X565,X568),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X568),X571)))),X572,bool)) | s('type.semanticPrimitives.result'(X564,X567),X570) = s('type.semanticPrimitives.result'(X564,X567),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X567),sK11(X570,X567,X564))))) )),
  inference(superposition,[],[f195,f3212])).
fof(f16735,plain,(
  ( ! [X600,X602,X596,X598,X594,X601,X597,X599,X593,X595] : (s(bool,'F_0') != s(bool,X601) | s('type.semanticPrimitives.result'(bool,X602),'const.semanticPrimitives.Rval_1'(s(bool,X601))) = s('type.semanticPrimitives.result'(bool,X602),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X593,fun(X594,bool)),X595),s(fun(X596,fun(X597,bool)),X598),s('type.semanticPrimitives.result'(X593,X596),X599),s('type.semanticPrimitives.result'(X594,X597),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X597),X600))))))) | s('type.semanticPrimitives.result'(X593,X596),X599) = s('type.semanticPrimitives.result'(X593,X596),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X596),sK11(X599,X596,X593))))) )),
  inference(superposition,[],[f210,f3212])).
fof(f16745,plain,(
  ( ! [X716,X718,X712,X714,X710,X717,X713,X715,X709,X711] : (s('type.semanticPrimitives.result'(bool,X717),X718) != s('type.semanticPrimitives.result'(bool,X717),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X718,X717,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X709,fun(X710,bool)),X711),s(fun(X712,fun(X713,bool)),X714),s('type.semanticPrimitives.result'(X709,X712),X715),s('type.semanticPrimitives.result'(X710,X713),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X713),X716))))) | s('type.semanticPrimitives.result'(bool,X717),X718) = s('type.semanticPrimitives.result'(bool,X717),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X717),sK11(X718,X717,bool)))) | s('type.semanticPrimitives.result'(X709,X712),X715) = s('type.semanticPrimitives.result'(X709,X712),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X712),sK11(X715,X712,X709))))) )),
  inference(superposition,[],[f3085,f3212])).
fof(f16773,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236,X245] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X236,X237),bool),X239),s('type.semanticPrimitives.result'(X236,X237),X238)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X236,X237),bool),X239),s('type.semanticPrimitives.result'(X236,X237),X240)))) | s('type.semanticPrimitives.result'(X236,X237),X240) != s('type.semanticPrimitives.result'(X236,X237),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X237),sK11(X238,X237,X236)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X241,bool)),X242),s(fun(X237,fun(X243,bool)),X244),s('type.semanticPrimitives.result'(X236,X237),X238),s('type.semanticPrimitives.result'(X241,X243),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X243),X245)))))) )),
  inference(superposition,[],[f194,f3212])).
fof(f16774,plain,(
  ( ! [X253,X251,X249,X246,X254,X252,X250,X248,X247] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X246,X247),bool),X249),s('type.semanticPrimitives.result'(X246,X247),X248)))) | s('type.semanticPrimitives.result'(X246,X247),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X247),sK11(X248,X247,X246)))) = s('type.semanticPrimitives.result'(X246,X247),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X247),sK11(X248,X247,X246))),X249,'type.semanticPrimitives.result'(X246,X247))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X246,fun(X250,bool)),X251),s(fun(X247,fun(X252,bool)),X253),s('type.semanticPrimitives.result'(X246,X247),X248),s('type.semanticPrimitives.result'(X250,X252),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X252),X254)))))) )),
  inference(superposition,[],[f195,f3212])).
fof(f16785,plain,(
  ( ! [X377,X379,X372,X374,X380,X376,X378,X373,X375] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X372,X373),bool),X375),s('type.semanticPrimitives.result'(X372,X373),X374)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X372,X373),bool),X375),s('type.semanticPrimitives.result'(X372,X373),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X373),sK11(X374,X373,X372))),X375,'type.semanticPrimitives.result'(X372,X373))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X372,fun(X376,bool)),X377),s(fun(X373,fun(X378,bool)),X379),s('type.semanticPrimitives.result'(X372,X373),X374),s('type.semanticPrimitives.result'(X376,X378),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X378),X380)))))) )),
  inference(superposition,[],[f471,f3212])).
fof(f16794,plain,(
  ( ! [X212,X210,X216,X208,X215,X213,X211,X217,X209,X214] : (s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X208,fun(X209,bool)),X210),s(fun(X211,fun(X212,bool)),X213),s('type.semanticPrimitives.result'(X208,X211),X214),s('type.semanticPrimitives.result'(X209,X212),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X212),X215))))))) | s(bool,'T_0') = s(bool,X217) | s('type.semanticPrimitives.result'(X208,X211),X214) = s('type.semanticPrimitives.result'(X208,X211),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X211),sK11(X214,X211,X208))))) )),
  inference(trivial_inequality_removal,[],[f16694])).
fof(f16694,plain,(
  ( ! [X212,X210,X216,X208,X215,X213,X211,X217,X209,X214] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X208,fun(X209,bool)),X210),s(fun(X211,fun(X212,bool)),X213),s('type.semanticPrimitives.result'(X208,X211),X214),s('type.semanticPrimitives.result'(X209,X212),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X212),X215))))))) | s(bool,'T_0') = s(bool,X217) | s('type.semanticPrimitives.result'(X208,X211),X214) = s('type.semanticPrimitives.result'(X208,X211),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X211),sK11(X214,X211,X208))))) )),
  inference(superposition,[],[f428,f3212])).
fof(f16796,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X64,bool)),X65),s(fun(X66,fun(X67,bool)),X68),s('type.semanticPrimitives.result'(X63,X66),X69),s('type.semanticPrimitives.result'(X64,X67),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X67),X70)))))) | s('type.semanticPrimitives.result'(X63,X66),X69) = s('type.semanticPrimitives.result'(X63,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),sK11(X69,X66,X63))))) )),
  inference(trivial_inequality_removal,[],[f16678])).
fof(f16678,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X64,bool)),X65),s(fun(X66,fun(X67,bool)),X68),s('type.semanticPrimitives.result'(X63,X66),X69),s('type.semanticPrimitives.result'(X64,X67),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X67),X70)))))) | s('type.semanticPrimitives.result'(X63,X66),X69) = s('type.semanticPrimitives.result'(X63,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),sK11(X69,X66,X63))))) )),
  inference(superposition,[],[f156,f3212])).
fof(f16802,plain,(
  ( ! [X80,X87,X85,X83,X81,X79,X86,X84,X82] : (p(s(bool,X87)) | s(bool,X87) = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),X85),s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),X86))))) | s('type.semanticPrimitives.result'(X79,X82),X85) = s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),sK11(X85,X82,X79))))) )),
  inference(subsumption_resolution,[],[f16680,f149])).
fof(f16680,plain,(
  ( ! [X80,X87,X85,X83,X81,X79,X86,X84,X82] : (p(s(bool,'F_0')) | p(s(bool,X87)) | s(bool,X87) = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),X85),s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),X86))))) | s('type.semanticPrimitives.result'(X79,X82),X85) = s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),sK11(X85,X82,X79))))) )),
  inference(superposition,[],[f197,f3212])).
fof(f20731,plain,(
  ( ! [X313,X315,X308,X310,X316,X318,X312,X314,X320,X309,X311,X307,X317,X319] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X315,bool)),X316),s(fun(X317,fun(X318,bool)),X319),s('type.semanticPrimitives.result'(bool,X317),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.semanticPrimitives.result'(X315,X318),'const.semanticPrimitives.Rval_1'(s(X315,X320))))) | s(bool,'F_0') = s(bool,happ(s(fun(X315,bool),happ(s(fun(bool,fun(X315,bool)),X316),s(bool,'const.evalProps.result_rel_4'(s(fun(X307,fun(X308,bool)),X309),s(fun(X310,fun(X311,bool)),X312),s('type.semanticPrimitives.result'(X307,X310),X313),s('type.semanticPrimitives.result'(X308,X311),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X311),X314))))))),s(X315,X320))) | s('type.semanticPrimitives.result'(X307,X310),X313) = s('type.semanticPrimitives.result'(X307,X310),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X310),sK11(X313,X310,X307))))) )),
  inference(superposition,[],[f5598,f3212])).
fof(f20791,plain,(
  ( ! [X313,X315,X308,X310,X316,X318,X312,X314,X320,X309,X311,X307,X317,X319] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X315,fun(bool,bool)),X316),s(fun(X317,fun(X318,bool)),X319),s('type.semanticPrimitives.result'(X315,X317),'const.semanticPrimitives.Rval_1'(s(X315,X320))),s('type.semanticPrimitives.result'(bool,X318),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X315,fun(bool,bool)),X316),s(X315,X320))),s(bool,'const.evalProps.result_rel_4'(s(fun(X307,fun(X308,bool)),X309),s(fun(X310,fun(X311,bool)),X312),s('type.semanticPrimitives.result'(X307,X310),X313),s('type.semanticPrimitives.result'(X308,X311),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X311),X314))))))) | s('type.semanticPrimitives.result'(X307,X310),X313) = s('type.semanticPrimitives.result'(X307,X310),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X310),sK11(X313,X310,X307))))) )),
  inference(superposition,[],[f5598,f3212])).
fof(f21890,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'(X10,X11),X12) != s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X13,X11,X10)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X10,X11),bool),X14),s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X12,X11,X10))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X10,X11),bool),X14),s('type.semanticPrimitives.result'(X10,X11),X13)))) | s('type.semanticPrimitives.result'(X10,X11),X13) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X13,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X15,bool)),X16),s(fun(X11,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X10,X11),X12),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19)))))) )),
  inference(superposition,[],[f3076,f3212])).
fof(f22802,plain,(
  ( ! [X146,X144,X142,X140,X147,X145,X143,X141,X139,X148] : (s('type.semanticPrimitives.result'(bool,X147),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X147),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X143,fun(X145,bool)),X146),s(fun(X139,fun(X140,bool)),X141),s('type.semanticPrimitives.result'(X143,X139),X142),s('type.semanticPrimitives.result'(X145,X140),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X140),X144))))))) | s(bool,X148) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X139,fun(X140,bool)),X141),s('type.semanticPrimitives.error_result'(X139),sK11(X142,X139,X143)),s('type.semanticPrimitives.error_result'(X140),X144))) | s(bool,'T_0') = s(bool,X148) | s('type.semanticPrimitives.result'(X143,X139),X142) = s('type.semanticPrimitives.result'(X143,X139),'const.semanticPrimitives.Rval_1'(s(X143,sK10(X142,X139,X143))))) )),
  inference(superposition,[],[f397,f5312])).
fof(f22803,plain,(
  ( ! [X158,X156,X154,X152,X151,X149,X157,X155,X153,X150] : (s('type.semanticPrimitives.result'(bool,X157),'const.semanticPrimitives.Rval_1'(s(bool,X158))) != s('type.semanticPrimitives.result'(bool,X157),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X153,fun(X155,bool)),X156),s(fun(X149,fun(X150,bool)),X151),s('type.semanticPrimitives.result'(X153,X149),X152),s('type.semanticPrimitives.result'(X155,X150),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X150),X154))))))) | s(bool,'F_0') = s(bool,X158) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X149,fun(X150,bool)),X151),s('type.semanticPrimitives.error_result'(X149),sK11(X152,X149,X153)),s('type.semanticPrimitives.error_result'(X150),X154))) | s('type.semanticPrimitives.result'(X153,X149),X152) = s('type.semanticPrimitives.result'(X153,X149),'const.semanticPrimitives.Rval_1'(s(X153,sK10(X152,X149,X153))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f22804,plain,(
  ( ! [X167,X165,X163,X161,X159,X166,X164,X162,X160,X168] : (s('type.semanticPrimitives.result'(bool,X167),'const.semanticPrimitives.Rval_1'(s(bool,X168))) != s('type.semanticPrimitives.result'(bool,X167),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X163,fun(X165,bool)),X166),s(fun(X159,fun(X160,bool)),X161),s('type.semanticPrimitives.result'(X163,X159),X162),s('type.semanticPrimitives.result'(X165,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),X164))))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X159,fun(X160,bool)),X161),s('type.semanticPrimitives.error_result'(X159),sK11(X162,X159,X163)),s('type.semanticPrimitives.error_result'(X160),X164))) | s(bool,'T_0') = s(bool,X168) | s('type.semanticPrimitives.result'(X163,X159),X162) = s('type.semanticPrimitives.result'(X163,X159),'const.semanticPrimitives.Rval_1'(s(X163,sK10(X162,X159,X163))))) )),
  inference(superposition,[],[f398,f5312])).
fof(f22808,plain,(
  ( ! [X206,X204,X202,X200,X199,X207,X205,X203,X201] : (~p(s(bool,happ(s(fun(bool,bool),X207),s(bool,'const.evalProps.result_rel_4'(s(fun(X203,fun(X205,bool)),X206),s(fun(X199,fun(X200,bool)),X201),s('type.semanticPrimitives.result'(X203,X199),X202),s('type.semanticPrimitives.result'(X205,X200),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X200),X204)))))))) | p(s(bool,happ(s(fun(bool,bool),X207),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X199,fun(X200,bool)),X201),s('type.semanticPrimitives.error_result'(X199),sK11(X202,X199,X203)),s('type.semanticPrimitives.error_result'(X200),X204)),X207,bool)) | s('type.semanticPrimitives.result'(X203,X199),X202) = s('type.semanticPrimitives.result'(X203,X199),'const.semanticPrimitives.Rval_1'(s(X203,sK10(X202,X199,X203))))) )),
  inference(superposition,[],[f469,f5312])).
fof(f22876,plain,(
  ( ! [X810,X808,X802,X806,X804,X811,X809,X803,X807,X805] : (s('type.semanticPrimitives.result'(bool,X810),'const.semanticPrimitives.Rval_1'(s(bool,X811))) != s('type.semanticPrimitives.result'(bool,X810),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X806,fun(X808,bool)),X809),s(fun(X802,fun(X803,bool)),X804),s('type.semanticPrimitives.result'(X806,X802),X805),s('type.semanticPrimitives.result'(X808,X803),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X803),X807))))))) | s(bool,X811) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X802,fun(X803,bool)),X804),s('type.semanticPrimitives.error_result'(X802),sK11(X805,X802,X806)),s('type.semanticPrimitives.error_result'(X803),X807))) | s('type.semanticPrimitives.result'(X806,X802),X805) = s('type.semanticPrimitives.result'(X806,X802),'const.semanticPrimitives.Rval_1'(s(X806,sK10(X805,X802,X806))))) )),
  inference(superposition,[],[f209,f5312])).
fof(f22886,plain,(
  ( ! [X922,X920,X926,X924,X923,X921,X927,X925,X919] : (~p(s(bool,happ(s(fun(bool,bool),X927),s(bool,'const.evalProps.result_rel_4'(s(fun(X923,fun(X925,bool)),X926),s(fun(X919,fun(X920,bool)),X921),s('type.semanticPrimitives.result'(X923,X919),X922),s('type.semanticPrimitives.result'(X925,X920),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X920),X924)))))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X927),s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X919,fun(X920,bool)),X921),s('type.semanticPrimitives.error_result'(X919),sK11(X922,X919,X923)),s('type.semanticPrimitives.error_result'(X920),X924)),X927,bool)))) | s('type.semanticPrimitives.result'(X923,X919),X922) = s('type.semanticPrimitives.result'(X923,X919),'const.semanticPrimitives.Rval_1'(s(X923,sK10(X922,X919,X923))))) )),
  inference(superposition,[],[f471,f5312])).
fof(f22923,plain,(
  ( ! [X241,X239,X237,X235,X233,X240,X238,X236,X234,X232] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X235,fun(X236,bool)),X237),s('type.semanticPrimitives.error_result'(X235),sK11(X238,X235,X232)),s('type.semanticPrimitives.error_result'(X236),X239))) | s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,X241))) = s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X232,fun(X233,bool)),X234),s(fun(X235,fun(X236,bool)),X237),s('type.semanticPrimitives.result'(X232,X235),X238),s('type.semanticPrimitives.result'(X233,X236),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X236),X239))))))) | s(bool,'T_0') = s(bool,X241) | s('type.semanticPrimitives.result'(X232,X235),X238) = s('type.semanticPrimitives.result'(X232,X235),'const.semanticPrimitives.Rval_1'(s(X232,sK10(X238,X235,X232))))) )),
  inference(superposition,[],[f428,f5312])).
fof(f22925,plain,(
  ( ! [X255,X261,X257,X259,X253,X260,X254,X256,X258,X252] : (s(bool,X260) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X255,fun(X256,bool)),X257),s('type.semanticPrimitives.error_result'(X255),sK11(X258,X255,X252)),s('type.semanticPrimitives.error_result'(X256),X259))) | s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X261),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X252,fun(X253,bool)),X254),s(fun(X255,fun(X256,bool)),X257),s('type.semanticPrimitives.result'(X252,X255),X258),s('type.semanticPrimitives.result'(X253,X256),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X256),X259))))))) | s(bool,'T_0') = s(bool,X260) | s('type.semanticPrimitives.result'(X252,X255),X258) = s('type.semanticPrimitives.result'(X252,X255),'const.semanticPrimitives.Rval_1'(s(X252,sK10(X258,X255,X252))))) )),
  inference(superposition,[],[f429,f5312])).
fof(f22996,plain,(
  ( ! [X893,X887,X885,X890,X888,X894,X892,X886,X891,X889] : (s(bool,X893) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X888,fun(X889,bool)),X890),s('type.semanticPrimitives.error_result'(X888),sK11(X891,X888,X885)),s('type.semanticPrimitives.error_result'(X889),X892))) | s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,X893))) = s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X885,fun(X886,bool)),X887),s(fun(X888,fun(X889,bool)),X890),s('type.semanticPrimitives.result'(X885,X888),X891),s('type.semanticPrimitives.result'(X886,X889),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X889),X892))))))) | s('type.semanticPrimitives.result'(X885,X888),X891) = s('type.semanticPrimitives.result'(X885,X888),'const.semanticPrimitives.Rval_1'(s(X885,sK10(X891,X888,X885))))) )),
  inference(superposition,[],[f210,f5312])).
fof(f23087,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X4,fun(X6,bool)),X7),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X4,X0),X3),s('type.semanticPrimitives.result'(X6,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X4,fun(X8,bool)),X9),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X4,X0),X3),s('type.semanticPrimitives.result'(X8,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))))) | s('type.semanticPrimitives.result'(X4,X0),X3) = s('type.semanticPrimitives.result'(X4,X0),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X3,X0,X4))))) )),
  inference(duplicate_literal_removal,[],[f22724])).
fof(f22724,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X4,fun(X6,bool)),X7),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X4,X0),X3),s('type.semanticPrimitives.result'(X6,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X4,fun(X8,bool)),X9),s(fun(X0,fun(X1,bool)),X2),s('type.semanticPrimitives.result'(X4,X0),X3),s('type.semanticPrimitives.result'(X8,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5))))) | s('type.semanticPrimitives.result'(X4,X0),X3) = s('type.semanticPrimitives.result'(X4,X0),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X3,X0,X4)))) | s('type.semanticPrimitives.result'(X4,X0),X3) = s('type.semanticPrimitives.result'(X4,X0),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X3,X0,X4))))) )),
  inference(superposition,[],[f5312,f5312])).
fof(f23124,plain,(
  ( ! [X239,X237,X235,X233,X240,X238,X236,X234,X232] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X232,fun(X233,bool)),X234),s('type.semanticPrimitives.error_result'(X232),sK11(X235,X232,X236)),s('type.semanticPrimitives.error_result'(X233),X237))) | s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X238,bool)),X239),s(fun(X232,fun(X233,bool)),X234),s('type.semanticPrimitives.result'(X236,X232),X235),s('type.semanticPrimitives.result'(X238,X233),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X233),X237))))))) | s('type.semanticPrimitives.result'(X236,X232),X235) = s('type.semanticPrimitives.result'(X236,X232),'const.semanticPrimitives.Rval_1'(s(X236,sK10(X235,X232,X236))))) )),
  inference(forward_demodulation,[],[f22811,f228])).
fof(f22811,plain,(
  ( ! [X243,X241,X247,X239,X237,X235,X233,X246,X244,X242,X240,X248,X238,X236,X234,X232,X245] : (s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X240),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X238,bool)),X239),s(fun(X232,fun(X233,bool)),X234),s('type.semanticPrimitives.result'(X236,X232),X235),s('type.semanticPrimitives.result'(X238,X233),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X233),X237))))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X232,fun(X233,bool)),X234),s('type.semanticPrimitives.error_result'(X232),sK11(X235,X232,X236)),s('type.semanticPrimitives.error_result'(X233),X237))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X241,fun(X242,bool)),X243),s(fun(X244,fun(X245,bool)),X246),s('type.semanticPrimitives.result'(X241,X244),'const.semanticPrimitives.Rval_1'(s(X241,X247))),s('type.semanticPrimitives.result'(X242,X245),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X245),X248))))) | s('type.semanticPrimitives.result'(X236,X232),X235) = s('type.semanticPrimitives.result'(X236,X232),'const.semanticPrimitives.Rval_1'(s(X236,sK10(X235,X232,X236))))) )),
  inference(superposition,[],[f3261,f5312])).
fof(f23937,plain,(
  ( ! [X308,X310,X304,X306,X303,X309,X311,X305,X307] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X303,fun(X304,bool)),X305),s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.result'(X303,X306),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X306),X309))),s('type.semanticPrimitives.result'(X304,X307),X310))) | s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.error_result'(X306),X309),s('type.semanticPrimitives.error_result'(X307),sK11(X310,X307,X304))))))) )),
  inference(subsumption_resolution,[],[f23936,f17586])).
fof(f23936,plain,(
  ( ! [X308,X310,X304,X306,X303,X309,X311,X305,X307] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X303,fun(X304,bool)),X305),s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.result'(X303,X306),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X306),X309))),s('type.semanticPrimitives.result'(X304,X307),X310))) | s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.error_result'(X306),X309),s('type.semanticPrimitives.error_result'(X307),sK11(X310,X307,X304)))))) | s('type.semanticPrimitives.result'(X304,X307),X310) = s('type.semanticPrimitives.result'(X304,X307),'const.semanticPrimitives.Rval_1'(s(X304,sK10(X310,X307,X304))))) )),
  inference(forward_demodulation,[],[f23593,f228])).
fof(f23593,plain,(
  ( ! [X313,X315,X308,X310,X304,X306,X316,X318,X312,X314,X303,X309,X311,X305,X307,X317,X319] : (s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X311),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.error_result'(X306),X309),s('type.semanticPrimitives.error_result'(X307),sK11(X310,X307,X304)))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X303,fun(X304,bool)),X305),s(fun(X306,fun(X307,bool)),X308),s('type.semanticPrimitives.result'(X303,X306),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X306),X309))),s('type.semanticPrimitives.result'(X304,X307),X310))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X312,fun(X313,bool)),X314),s(fun(X315,fun(X316,bool)),X317),s('type.semanticPrimitives.result'(X312,X315),'const.semanticPrimitives.Rval_1'(s(X312,X318))),s('type.semanticPrimitives.result'(X313,X316),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X316),X319))))) | s('type.semanticPrimitives.result'(X304,X307),X310) = s('type.semanticPrimitives.result'(X304,X307),'const.semanticPrimitives.Rval_1'(s(X304,sK10(X310,X307,X304))))) )),
  inference(superposition,[],[f3261,f5315])).
fof(f23591,plain,(
  ( ! [X280,X282,X288,X279,X285,X287,X281,X283,X284,X286] : (~p(s(bool,happ(s(fun(bool,bool),X287),s(bool,'const.evalProps.exc_rel_3'(s(fun(X282,fun(X283,bool)),X284),s('type.semanticPrimitives.error_result'(X282),X285),s('type.semanticPrimitives.error_result'(X283),sK11(X286,X283,X280))))))) | p(s(bool,happ(s(fun(bool,bool),X287),s(bool,X288)))) | s(bool,'F_0') != s(bool,X288) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X279,fun(X280,bool)),X281),s(fun(X282,fun(X283,bool)),X284),s('type.semanticPrimitives.result'(X279,X282),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X282),X285))),s('type.semanticPrimitives.result'(X280,X283),X286))) | s('type.semanticPrimitives.result'(X280,X283),X286) = s('type.semanticPrimitives.result'(X280,X283),'const.semanticPrimitives.Rval_1'(s(X280,sK10(X286,X283,X280))))) )),
  inference(superposition,[],[f937,f5315])).
fof(f23590,plain,(
  ( ! [X271,X277,X273,X275,X270,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun(bool,bool),X278),s(bool,'const.evalProps.exc_rel_3'(s(fun(X273,fun(X274,bool)),X275),s('type.semanticPrimitives.error_result'(X273),X276),s('type.semanticPrimitives.error_result'(X274),sK11(X277,X274,X271))))))) | p(s(bool,happ(s(fun(bool,bool),X278),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X270,fun(X271,bool)),X272),s(fun(X273,fun(X274,bool)),X275),s('type.semanticPrimitives.result'(X270,X273),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X273),X276))),s('type.semanticPrimitives.result'(X271,X274),X277)),X278,bool)) | s('type.semanticPrimitives.result'(X271,X274),X277) = s('type.semanticPrimitives.result'(X271,X274),'const.semanticPrimitives.Rval_1'(s(X271,sK10(X277,X274,X271))))) )),
  inference(superposition,[],[f469,f5315])).
fof(f23589,plain,(
  ( ! [X261,X263,X269,X265,X267,X260,X262,X268,X264,X266] : (s(bool,X268) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X263,fun(X264,bool)),X265),s('type.semanticPrimitives.error_result'(X263),X266),s('type.semanticPrimitives.error_result'(X264),sK11(X267,X264,X261)))) | s('type.semanticPrimitives.result'(bool,X269),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X269),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X260,fun(X261,bool)),X262),s(fun(X263,fun(X264,bool)),X265),s('type.semanticPrimitives.result'(X260,X263),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X263),X266))),s('type.semanticPrimitives.result'(X261,X264),X267))))) | s(bool,'T_0') = s(bool,X268) | s('type.semanticPrimitives.result'(X261,X264),X267) = s('type.semanticPrimitives.result'(X261,X264),'const.semanticPrimitives.Rval_1'(s(X261,sK10(X267,X264,X261))))) )),
  inference(superposition,[],[f429,f5315])).
fof(f23588,plain,(
  ( ! [X255,X253,X257,X251,X259,X254,X256,X258,X250,X252] : (s(bool,X258) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X253,fun(X254,bool)),X255),s('type.semanticPrimitives.error_result'(X253),X256),s('type.semanticPrimitives.error_result'(X254),sK11(X257,X254,X251)))) | s('type.semanticPrimitives.result'(bool,X259),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X259),'const.semanticPrimitives.Rval_1'(s(bool,X258))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X250,fun(X251,bool)),X252),s(fun(X253,fun(X254,bool)),X255),s('type.semanticPrimitives.result'(X250,X253),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X253),X256))),s('type.semanticPrimitives.result'(X251,X254),X257))) | s('type.semanticPrimitives.result'(X251,X254),X257) = s('type.semanticPrimitives.result'(X251,X254),'const.semanticPrimitives.Rval_1'(s(X251,sK10(X257,X254,X251))))) )),
  inference(superposition,[],[f429,f5315])).
fof(f23587,plain,(
  ( ! [X243,X241,X249,X246,X244,X242,X240,X248,X247,X245] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.error_result'(X243),X246),s('type.semanticPrimitives.error_result'(X244),sK11(X247,X244,X241)))) | s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,X249))) = s('type.semanticPrimitives.result'(bool,X248),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X240,fun(X241,bool)),X242),s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.result'(X240,X243),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X243),X246))),s('type.semanticPrimitives.result'(X241,X244),X247))))) | s(bool,'T_0') = s(bool,X249) | s('type.semanticPrimitives.result'(X241,X244),X247) = s('type.semanticPrimitives.result'(X241,X244),'const.semanticPrimitives.Rval_1'(s(X241,sK10(X247,X244,X241))))) )),
  inference(superposition,[],[f428,f5315])).
fof(f23928,plain,(
  ( ! [X231,X239,X237,X235,X233,X230,X238,X236,X234,X232] : (s('type.semanticPrimitives.result'(bool,X238),'const.semanticPrimitives.Rval_1'(s(bool,X239))) != s('type.semanticPrimitives.result'(bool,X238),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.error_result'(X233),X236),s('type.semanticPrimitives.error_result'(X234),sK11(X237,X234,X231)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X230,fun(X231,bool)),X232),s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.result'(X230,X233),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X233),X236))),s('type.semanticPrimitives.result'(X231,X234),X237))) | s(bool,'T_0') = s(bool,X239)) )),
  inference(subsumption_resolution,[],[f23586,f17586])).
fof(f23586,plain,(
  ( ! [X231,X239,X237,X235,X233,X230,X238,X236,X234,X232] : (s('type.semanticPrimitives.result'(bool,X238),'const.semanticPrimitives.Rval_1'(s(bool,X239))) != s('type.semanticPrimitives.result'(bool,X238),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.error_result'(X233),X236),s('type.semanticPrimitives.error_result'(X234),sK11(X237,X234,X231)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X230,fun(X231,bool)),X232),s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.result'(X230,X233),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X233),X236))),s('type.semanticPrimitives.result'(X231,X234),X237))) | s(bool,'T_0') = s(bool,X239) | s('type.semanticPrimitives.result'(X231,X234),X237) = s('type.semanticPrimitives.result'(X231,X234),'const.semanticPrimitives.Rval_1'(s(X231,sK10(X237,X234,X231))))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23585,plain,(
  ( ! [X222,X220,X229,X227,X225,X223,X221,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X228),'const.semanticPrimitives.Rval_1'(s(bool,X229))) != s('type.semanticPrimitives.result'(bool,X228),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.error_result'(X223),X226),s('type.semanticPrimitives.error_result'(X224),sK11(X227,X224,X221)))))) | s(bool,'F_0') = s(bool,X229) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X220,fun(X221,bool)),X222),s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.result'(X220,X223),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X223),X226))),s('type.semanticPrimitives.result'(X221,X224),X227))) | s('type.semanticPrimitives.result'(X221,X224),X227) = s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,sK10(X227,X224,X221))))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23584,plain,(
  ( ! [X212,X218,X216,X210,X215,X213,X211,X217,X219,X214] : (s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X218),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X213,fun(X214,bool)),X215),s('type.semanticPrimitives.error_result'(X213),X216),s('type.semanticPrimitives.error_result'(X214),sK11(X217,X214,X211)))))) | s(bool,X219) = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X211,bool)),X212),s(fun(X213,fun(X214,bool)),X215),s('type.semanticPrimitives.result'(X210,X213),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X213),X216))),s('type.semanticPrimitives.result'(X211,X214),X217))) | s(bool,'T_0') = s(bool,X219) | s('type.semanticPrimitives.result'(X211,X214),X217) = s('type.semanticPrimitives.result'(X211,X214),'const.semanticPrimitives.Rval_1'(s(X211,sK10(X217,X214,X211))))) )),
  inference(superposition,[],[f397,f5315])).
fof(f23583,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203,X201] : (~p(s(bool,happ(s(fun(bool,bool),X209),s(bool,'const.evalProps.exc_rel_3'(s(fun(X204,fun(X205,bool)),X206),s('type.semanticPrimitives.error_result'(X204),X207),s('type.semanticPrimitives.error_result'(X205),sK11(X208,X205,X202))))))) | s(bool,'F_0') = s(bool,sK9('F_0',X209,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X201,fun(X202,bool)),X203),s(fun(X204,fun(X205,bool)),X206),s('type.semanticPrimitives.result'(X201,X204),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X204),X207))),s('type.semanticPrimitives.result'(X202,X205),X208))) | s('type.semanticPrimitives.result'(X202,X205),X208) = s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,sK10(X208,X205,X202))))) )),
  inference(superposition,[],[f369,f5315])).
fof(f23582,plain,(
  ( ! [X198,X196,X194,X192,X200,X199,X197,X195,X193] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X195,fun(X196,bool)),X197),s('type.semanticPrimitives.error_result'(X195),X198),s('type.semanticPrimitives.error_result'(X196),sK11(X199,X196,X193))))) | s(bool,X200) = s(bool,'const.evalProps.result_rel_4'(s(fun(X192,fun(X193,bool)),X194),s(fun(X195,fun(X196,bool)),X197),s('type.semanticPrimitives.result'(X192,X195),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X195),X198))),s('type.semanticPrimitives.result'(X193,X196),X199))) | s(bool,'T_0') = s(bool,X200) | s('type.semanticPrimitives.result'(X193,X196),X199) = s('type.semanticPrimitives.result'(X193,X196),'const.semanticPrimitives.Rval_1'(s(X193,sK10(X199,X196,X193))))) )),
  inference(superposition,[],[f306,f5315])).
fof(f23581,plain,(
  ( ! [X191,X189,X187,X185,X190,X188,X186,X184,X183] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X186,fun(X187,bool)),X188),s('type.semanticPrimitives.error_result'(X186),X189),s('type.semanticPrimitives.error_result'(X187),sK11(X190,X187,X184))))) | s(bool,X191) != s(bool,'const.evalProps.result_rel_4'(s(fun(X183,fun(X184,bool)),X185),s(fun(X186,fun(X187,bool)),X188),s('type.semanticPrimitives.result'(X183,X186),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X186),X189))),s('type.semanticPrimitives.result'(X184,X187),X190))) | s(bool,'T_0') = s(bool,X191) | s('type.semanticPrimitives.result'(X184,X187),X190) = s('type.semanticPrimitives.result'(X184,X187),'const.semanticPrimitives.Rval_1'(s(X184,sK10(X190,X187,X184))))) )),
  inference(superposition,[],[f276,f5315])).
fof(f23576,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.error_result'(X141),X144),s('type.semanticPrimitives.error_result'(X142),sK11(X145,X142,X139))))) | p(s(bool,X146)) | s(bool,X146) != s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X139,bool)),X140),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X138,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),X144))),s('type.semanticPrimitives.result'(X139,X142),X145))) | s('type.semanticPrimitives.result'(X139,X142),X145) = s('type.semanticPrimitives.result'(X139,X142),'const.semanticPrimitives.Rval_1'(s(X139,sK10(X145,X142,X139))))) )),
  inference(superposition,[],[f202,f5315])).
fof(f23575,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X129,X137] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.error_result'(X132),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X130))))) | ~p(s(bool,X137)) | s(bool,X137) = s(bool,'const.evalProps.result_rel_4'(s(fun(X129,fun(X130,bool)),X131),s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.result'(X129,X132),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X132),X135))),s('type.semanticPrimitives.result'(X130,X133),X136))) | s('type.semanticPrimitives.result'(X130,X133),X136) = s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rval_1'(s(X130,sK10(X136,X133,X130))))) )),
  inference(superposition,[],[f200,f5315])).
fof(f23573,plain,(
  ( ! [X111,X118,X116,X114,X112,X119,X117,X115,X113] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X114,fun(X115,bool)),X116),s('type.semanticPrimitives.error_result'(X114),X117),s('type.semanticPrimitives.error_result'(X115),sK11(X118,X115,X112))))) | p(s(bool,X119)) | s(bool,X119) = s(bool,'const.evalProps.result_rel_4'(s(fun(X111,fun(X112,bool)),X113),s(fun(X114,fun(X115,bool)),X116),s('type.semanticPrimitives.result'(X111,X114),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X114),X117))),s('type.semanticPrimitives.result'(X112,X115),X118))) | s('type.semanticPrimitives.result'(X112,X115),X118) = s('type.semanticPrimitives.result'(X112,X115),'const.semanticPrimitives.Rval_1'(s(X112,sK10(X118,X115,X112))))) )),
  inference(superposition,[],[f197,f5315])).
fof(f23917,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.error_result'(X106),X109),s('type.semanticPrimitives.error_result'(X107),sK11(X110,X107,X104))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X103,fun(X104,bool)),X105),s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.result'(X103,X106),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X106),X109))),s('type.semanticPrimitives.result'(X104,X107),X110)))) )),
  inference(subsumption_resolution,[],[f23572,f17586])).
fof(f23572,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.error_result'(X106),X109),s('type.semanticPrimitives.error_result'(X107),sK11(X110,X107,X104))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X103,fun(X104,bool)),X105),s(fun(X106,fun(X107,bool)),X108),s('type.semanticPrimitives.result'(X103,X106),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X106),X109))),s('type.semanticPrimitives.result'(X104,X107),X110))) | s('type.semanticPrimitives.result'(X104,X107),X110) = s('type.semanticPrimitives.result'(X104,X107),'const.semanticPrimitives.Rval_1'(s(X104,sK10(X110,X107,X104))))) )),
  inference(superposition,[],[f157,f5315])).
fof(f23571,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.error_result'(X98),X101),s('type.semanticPrimitives.error_result'(X99),sK11(X102,X99,X96)))) | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X95,fun(X96,bool)),X97),s(fun(X98,fun(X99,bool)),X100),s('type.semanticPrimitives.result'(X95,X98),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X98),X101))),s('type.semanticPrimitives.result'(X96,X99),X102)))) | s('type.semanticPrimitives.result'(X96,X99),X102) = s('type.semanticPrimitives.result'(X96,X99),'const.semanticPrimitives.Rval_1'(s(X96,sK10(X102,X99,X96))))) )),
  inference(superposition,[],[f156,f5315])).
fof(f23570,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.error_result'(X90),X93),s('type.semanticPrimitives.error_result'(X91),sK11(X94,X91,X88))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X87,fun(X88,bool)),X89),s(fun(X90,fun(X91,bool)),X92),s('type.semanticPrimitives.result'(X87,X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),X93))),s('type.semanticPrimitives.result'(X88,X91),X94))) | s('type.semanticPrimitives.result'(X88,X91),X94) = s('type.semanticPrimitives.result'(X88,X91),'const.semanticPrimitives.Rval_1'(s(X88,sK10(X94,X91,X88))))) )),
  inference(superposition,[],[f153,f5315])).
fof(f23569,plain,(
  ( ! [X80,X85,X83,X81,X79,X86,X84,X82] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.error_result'(X82),X85),s('type.semanticPrimitives.error_result'(X83),sK11(X86,X83,X80))))) | s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),X85))),s('type.semanticPrimitives.result'(X80,X83),X86))) | s('type.semanticPrimitives.result'(X80,X83),X86) = s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rval_1'(s(X80,sK10(X86,X83,X80))))) )),
  inference(superposition,[],[f152,f5315])).
fof(f3076,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s('type.semanticPrimitives.result'(X13,X14),X17) != s('type.semanticPrimitives.result'(X13,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X13,X14),bool),X16),s('type.semanticPrimitives.result'(X13,X14),X17)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X13,X14),bool),X16),s('type.semanticPrimitives.result'(X13,X14),X15)))) | s('type.semanticPrimitives.result'(X13,X14),X15) = s('type.semanticPrimitives.result'(X13,X14),'const.semanticPrimitives.Rval_1'(s(X13,sK10(X15,X14,X13))))) )),
  inference(superposition,[],[f194,f207])).
fof(f3077,plain,(
  ( ! [X21,X19,X20,X18] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X18,X19),bool),X21),s('type.semanticPrimitives.result'(X18,X19),X20)))) | s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK11(X20,X19,X18)))) = s('type.semanticPrimitives.result'(X18,X19),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),sK11(X20,X19,X18))),X21,'type.semanticPrimitives.result'(X18,X19))) | s('type.semanticPrimitives.result'(X18,X19),X20) = s('type.semanticPrimitives.result'(X18,X19),'const.semanticPrimitives.Rval_1'(s(X18,sK10(X20,X19,X18))))) )),
  inference(superposition,[],[f195,f207])).
fof(f3080,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.semanticPrimitives.result'(X32,X33),X34) != s('type.semanticPrimitives.result'(X32,X33),X35) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X32,X33),X36),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X32,X33),X35))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X32,X33),X36),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X32,X33),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X33),sK11(X34,X33,X32)))))) | s('type.semanticPrimitives.result'(X32,X33),X34) = s('type.semanticPrimitives.result'(X32,X33),'const.semanticPrimitives.Rval_1'(s(X32,sK10(X34,X33,X32))))) )),
  inference(superposition,[],[f210,f207])).
fof(f3092,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'(X20,X21),X24) != s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X22,X21,X20)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X20,X21),bool),X23),s('type.semanticPrimitives.result'(X20,X21),X24)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X20,X21),bool),X23),s('type.semanticPrimitives.result'(X20,X21),X22)))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X22,X21,X20))))) )),
  inference(superposition,[],[f194,f207])).
fof(f3093,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X25,X26),bool),X28),s('type.semanticPrimitives.result'(X25,X26),X27)))) | s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rval_1'(s(X25,sK10(X27,X26,X25)))) = s('type.semanticPrimitives.result'(X25,X26),sK9('const.semanticPrimitives.Rval_1'(s(X25,sK10(X27,X26,X25))),X28,'type.semanticPrimitives.result'(X25,X26))) | s('type.semanticPrimitives.result'(X25,X26),X27) = s('type.semanticPrimitives.result'(X25,X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),sK11(X27,X26,X25))))) )),
  inference(superposition,[],[f195,f207])).
fof(f3096,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s('type.semanticPrimitives.result'(X39,X40),X41) != s('type.semanticPrimitives.result'(X39,X40),X42) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),X42))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X43),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X41,X40,X39)))))) | s('type.semanticPrimitives.result'(X39,X40),X41) = s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK11(X41,X40,X39))))) )),
  inference(superposition,[],[f210,f207])).
fof(f8360,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X82,X83),bool),X85),s('type.semanticPrimitives.result'(X82,X83),X84)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X82,X83),bool),X85),s('type.semanticPrimitives.result'(X82,X83),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),sK11(X84,X83,X82))),X85,'type.semanticPrimitives.result'(X82,X83))))) | s('type.semanticPrimitives.result'(X82,X83),X84) = s('type.semanticPrimitives.result'(X82,X83),'const.semanticPrimitives.Rval_1'(s(X82,sK10(X84,X83,X82))))) )),
  inference(superposition,[],[f471,f207])).
fof(f14171,plain,(
  ( ! [X573,X575,X571,X576,X578,X572,X574,X570,X577,X579] : (~p(s(bool,happ(s(fun(bool,bool),X578),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X578),s(bool,X579)))) | s(bool,X579) != s(bool,'const.evalProps.result_rel_4'(s(fun(X570,fun(X571,bool)),X572),s(fun(X573,fun(X574,bool)),X575),s('type.semanticPrimitives.result'(X570,X573),'const.semanticPrimitives.Rval_1'(s(X570,X576))),s('type.semanticPrimitives.result'(X571,X574),X577))) | s('type.semanticPrimitives.result'(X571,X574),X577) = s('type.semanticPrimitives.result'(X571,X574),'const.semanticPrimitives.Rval_1'(s(X571,sK10(X577,X574,X571))))) )),
  inference(superposition,[],[f194,f3215])).
fof(f14172,plain,(
  ( ! [X588,X584,X586,X580,X582,X585,X587,X581,X583] : (~p(s(bool,happ(s(fun(bool,bool),X588),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X580,fun(X581,bool)),X582),s(fun(X583,fun(X584,bool)),X585),s('type.semanticPrimitives.result'(X580,X583),'const.semanticPrimitives.Rval_1'(s(X580,X586))),s('type.semanticPrimitives.result'(X581,X584),X587))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X580,fun(X581,bool)),X582),s(fun(X583,fun(X584,bool)),X585),s('type.semanticPrimitives.result'(X580,X583),'const.semanticPrimitives.Rval_1'(s(X580,X586))),s('type.semanticPrimitives.result'(X581,X584),X587)),X588,bool)) | s('type.semanticPrimitives.result'(X581,X584),X587) = s('type.semanticPrimitives.result'(X581,X584),'const.semanticPrimitives.Rval_1'(s(X581,sK10(X587,X584,X581))))) )),
  inference(superposition,[],[f195,f3215])).
fof(f14183,plain,(
  ( ! [X707,X712,X714,X708,X710,X706,X713,X709,X711] : (~p(s(bool,happ(s(fun(bool,bool),X714),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X714),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X706,fun(X707,bool)),X708),s(fun(X709,fun(X710,bool)),X711),s('type.semanticPrimitives.result'(X706,X709),'const.semanticPrimitives.Rval_1'(s(X706,X712))),s('type.semanticPrimitives.result'(X707,X710),X713)),X714,bool)))) | s('type.semanticPrimitives.result'(X707,X710),X713) = s('type.semanticPrimitives.result'(X707,X710),'const.semanticPrimitives.Rval_1'(s(X707,sK10(X713,X710,X707))))) )),
  inference(superposition,[],[f471,f3215])).
fof(f14212,plain,(
  ( ! [X241,X239,X237,X235,X233,X242,X240,X238,X236,X234] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X233,X234),bool),X236),s('type.semanticPrimitives.result'(X233,X234),X235)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X233,X234),bool),X236),s('type.semanticPrimitives.result'(X233,X234),X237)))) | s('type.semanticPrimitives.result'(X233,X234),X237) != s('type.semanticPrimitives.result'(X233,X234),'const.semanticPrimitives.Rval_1'(s(X233,sK10(X235,X234,X233)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X238,fun(X233,bool)),X239),s(fun(X240,fun(X234,bool)),X241),s('type.semanticPrimitives.result'(X238,X240),'const.semanticPrimitives.Rval_1'(s(X238,X242))),s('type.semanticPrimitives.result'(X233,X234),X235)))) )),
  inference(superposition,[],[f194,f3215])).
fof(f14213,plain,(
  ( ! [X243,X251,X249,X246,X244,X250,X248,X247,X245] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X243,X244),bool),X246),s('type.semanticPrimitives.result'(X243,X244),X245)))) | s('type.semanticPrimitives.result'(X243,X244),'const.semanticPrimitives.Rval_1'(s(X243,sK10(X245,X244,X243)))) = s('type.semanticPrimitives.result'(X243,X244),sK9('const.semanticPrimitives.Rval_1'(s(X243,sK10(X245,X244,X243))),X246,'type.semanticPrimitives.result'(X243,X244))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X247,fun(X243,bool)),X248),s(fun(X249,fun(X244,bool)),X250),s('type.semanticPrimitives.result'(X247,X249),'const.semanticPrimitives.Rval_1'(s(X247,X251))),s('type.semanticPrimitives.result'(X243,X244),X245)))) )),
  inference(superposition,[],[f195,f3215])).
fof(f14216,plain,(
  ( ! [X280,X277,X279,X273,X275,X281,X276,X278,X272,X274] : (s('type.semanticPrimitives.result'(X272,X273),X274) != s('type.semanticPrimitives.result'(X272,X273),X275) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X272,X273),X276),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X272,X273),X275))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X272,X273),X276),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X272,X273),'const.semanticPrimitives.Rval_1'(s(X272,sK10(X274,X273,X272)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X277,fun(X272,bool)),X278),s(fun(X279,fun(X273,bool)),X280),s('type.semanticPrimitives.result'(X277,X279),'const.semanticPrimitives.Rval_1'(s(X277,X281))),s('type.semanticPrimitives.result'(X272,X273),X274)))) )),
  inference(superposition,[],[f210,f3215])).
fof(f14234,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rval_1'(s(X55,X61))),s('type.semanticPrimitives.result'(X56,X59),X62)))) | s('type.semanticPrimitives.result'(X56,X59),X62) = s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rval_1'(s(X56,sK10(X62,X59,X56))))) )),
  inference(trivial_inequality_removal,[],[f14115])).
fof(f14115,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rval_1'(s(X55,X61))),s('type.semanticPrimitives.result'(X56,X59),X62)))) | s('type.semanticPrimitives.result'(X56,X59),X62) = s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rval_1'(s(X56,sK10(X62,X59,X56))))) )),
  inference(superposition,[],[f156,f3215])).
fof(f14252,plain,(
  ( ! [X78,X76,X74,X72,X71,X79,X77,X75,X73] : (p(s(bool,X79)) | s(bool,X79) = s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X72,bool)),X73),s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rval_1'(s(X71,X77))),s('type.semanticPrimitives.result'(X72,X75),X78))) | s('type.semanticPrimitives.result'(X72,X75),X78) = s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rval_1'(s(X72,sK10(X78,X75,X72))))) )),
  inference(subsumption_resolution,[],[f14117,f149])).
fof(f14117,plain,(
  ( ! [X78,X76,X74,X72,X71,X79,X77,X75,X73] : (p(s(bool,'F_0')) | p(s(bool,X79)) | s(bool,X79) = s(bool,'const.evalProps.result_rel_4'(s(fun(X71,fun(X72,bool)),X73),s(fun(X74,fun(X75,bool)),X76),s('type.semanticPrimitives.result'(X71,X74),'const.semanticPrimitives.Rval_1'(s(X71,X77))),s('type.semanticPrimitives.result'(X72,X75),X78))) | s('type.semanticPrimitives.result'(X72,X75),X78) = s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rval_1'(s(X72,sK10(X78,X75,X72))))) )),
  inference(superposition,[],[f197,f3215])).
fof(f14604,plain,(
  ( ! [X600,X602,X596,X598,X594,X601,X603,X597,X599,X595] : (~p(s(bool,happ(s(fun(bool,bool),X602),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X602),s(bool,X603)))) | s(bool,X603) != s(bool,'const.evalProps.result_rel_4'(s(fun(X594,fun(X595,bool)),X596),s(fun(X597,fun(X598,bool)),X599),s('type.semanticPrimitives.result'(X594,X597),X600),s('type.semanticPrimitives.result'(X595,X598),'const.semanticPrimitives.Rval_1'(s(X595,X601))))) | s('type.semanticPrimitives.result'(X594,X597),X600) = s('type.semanticPrimitives.result'(X594,X597),'const.semanticPrimitives.Rval_1'(s(X594,sK10(X600,X597,X594))))) )),
  inference(superposition,[],[f194,f4953])).
fof(f14605,plain,(
  ( ! [X606,X610,X609,X605,X607,X611,X612,X608,X604] : (~p(s(bool,happ(s(fun(bool,bool),X612),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X604,fun(X605,bool)),X606),s(fun(X607,fun(X608,bool)),X609),s('type.semanticPrimitives.result'(X604,X607),X610),s('type.semanticPrimitives.result'(X605,X608),'const.semanticPrimitives.Rval_1'(s(X605,X611))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X604,fun(X605,bool)),X606),s(fun(X607,fun(X608,bool)),X609),s('type.semanticPrimitives.result'(X604,X607),X610),s('type.semanticPrimitives.result'(X605,X608),'const.semanticPrimitives.Rval_1'(s(X605,X611)))),X612,bool)) | s('type.semanticPrimitives.result'(X604,X607),X610) = s('type.semanticPrimitives.result'(X604,X607),'const.semanticPrimitives.Rval_1'(s(X604,sK10(X610,X607,X604))))) )),
  inference(superposition,[],[f195,f4953])).
fof(f14616,plain,(
  ( ! [X736,X738,X732,X734,X730,X737,X733,X735,X731] : (~p(s(bool,happ(s(fun(bool,bool),X738),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X738),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X730,fun(X731,bool)),X732),s(fun(X733,fun(X734,bool)),X735),s('type.semanticPrimitives.result'(X730,X733),X736),s('type.semanticPrimitives.result'(X731,X734),'const.semanticPrimitives.Rval_1'(s(X731,X737)))),X738,bool)))) | s('type.semanticPrimitives.result'(X730,X733),X736) = s('type.semanticPrimitives.result'(X730,X733),'const.semanticPrimitives.Rval_1'(s(X730,sK10(X736,X733,X730))))) )),
  inference(superposition,[],[f471,f4953])).
fof(f14648,plain,(
  ( ! [X263,X269,X271,X265,X267,X262,X268,X270,X264,X266] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X262,X263),bool),X265),s('type.semanticPrimitives.result'(X262,X263),X264)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X262,X263),bool),X265),s('type.semanticPrimitives.result'(X262,X263),X266)))) | s('type.semanticPrimitives.result'(X262,X263),X266) != s('type.semanticPrimitives.result'(X262,X263),'const.semanticPrimitives.Rval_1'(s(X262,sK10(X264,X263,X262)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X262,fun(X267,bool)),X268),s(fun(X263,fun(X269,bool)),X270),s('type.semanticPrimitives.result'(X262,X263),X264),s('type.semanticPrimitives.result'(X267,X269),'const.semanticPrimitives.Rval_1'(s(X267,X271)))))) )),
  inference(superposition,[],[f194,f4953])).
fof(f14649,plain,(
  ( ! [X280,X277,X279,X273,X275,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X272,X273),bool),X275),s('type.semanticPrimitives.result'(X272,X273),X274)))) | s('type.semanticPrimitives.result'(X272,X273),'const.semanticPrimitives.Rval_1'(s(X272,sK10(X274,X273,X272)))) = s('type.semanticPrimitives.result'(X272,X273),sK9('const.semanticPrimitives.Rval_1'(s(X272,sK10(X274,X273,X272))),X275,'type.semanticPrimitives.result'(X272,X273))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X272,fun(X276,bool)),X277),s(fun(X273,fun(X278,bool)),X279),s('type.semanticPrimitives.result'(X272,X273),X274),s('type.semanticPrimitives.result'(X276,X278),'const.semanticPrimitives.Rval_1'(s(X276,X280)))))) )),
  inference(superposition,[],[f195,f4953])).
fof(f14652,plain,(
  ( ! [X302,X308,X310,X304,X306,X301,X303,X309,X305,X307] : (s('type.semanticPrimitives.result'(X301,X302),X303) != s('type.semanticPrimitives.result'(X301,X302),X304) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X301,X302),X305),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X301,X302),X304))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X301,X302),X305),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X301,X302),'const.semanticPrimitives.Rval_1'(s(X301,sK10(X303,X302,X301)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X301,fun(X306,bool)),X307),s(fun(X302,fun(X308,bool)),X309),s('type.semanticPrimitives.result'(X301,X302),X303),s('type.semanticPrimitives.result'(X306,X308),'const.semanticPrimitives.Rval_1'(s(X306,X310)))))) )),
  inference(superposition,[],[f210,f4953])).
fof(f14672,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X64,bool)),X65),s(fun(X66,fun(X67,bool)),X68),s('type.semanticPrimitives.result'(X63,X66),X69),s('type.semanticPrimitives.result'(X64,X67),'const.semanticPrimitives.Rval_1'(s(X64,X70)))))) | s('type.semanticPrimitives.result'(X63,X66),X69) = s('type.semanticPrimitives.result'(X63,X66),'const.semanticPrimitives.Rval_1'(s(X63,sK10(X69,X66,X63))))) )),
  inference(trivial_inequality_removal,[],[f14546])).
fof(f14546,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X64,bool)),X65),s(fun(X66,fun(X67,bool)),X68),s('type.semanticPrimitives.result'(X63,X66),X69),s('type.semanticPrimitives.result'(X64,X67),'const.semanticPrimitives.Rval_1'(s(X64,X70)))))) | s('type.semanticPrimitives.result'(X63,X66),X69) = s('type.semanticPrimitives.result'(X63,X66),'const.semanticPrimitives.Rval_1'(s(X63,sK10(X69,X66,X63))))) )),
  inference(superposition,[],[f156,f4953])).
fof(f14691,plain,(
  ( ! [X80,X87,X85,X83,X81,X79,X86,X84,X82] : (p(s(bool,X87)) | s(bool,X87) = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),X85),s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rval_1'(s(X80,X86))))) | s('type.semanticPrimitives.result'(X79,X82),X85) = s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rval_1'(s(X79,sK10(X85,X82,X79))))) )),
  inference(subsumption_resolution,[],[f14548,f149])).
fof(f14548,plain,(
  ( ! [X80,X87,X85,X83,X81,X79,X86,X84,X82] : (p(s(bool,'F_0')) | p(s(bool,X87)) | s(bool,X87) = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(X80,bool)),X81),s(fun(X82,fun(X83,bool)),X84),s('type.semanticPrimitives.result'(X79,X82),X85),s('type.semanticPrimitives.result'(X80,X83),'const.semanticPrimitives.Rval_1'(s(X80,X86))))) | s('type.semanticPrimitives.result'(X79,X82),X85) = s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rval_1'(s(X79,sK10(X85,X82,X79))))) )),
  inference(superposition,[],[f197,f4953])).
fof(f18928,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X4),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X0,bool)),X6),s(fun(X7,fun(X1,bool)),X8),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f3080,f4992])).
fof(f18929,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'(X10,X11),X12) != s('type.semanticPrimitives.result'(X10,X11),X13) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X12,X11,X10)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X14),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X13,X11,X10)))))) | s('type.semanticPrimitives.result'(X10,X11),X13) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X13,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X15,bool)),X16),s(fun(X11,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X10,X11),X12),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19)))))) )),
  inference(superposition,[],[f3080,f3212])).
fof(f18930,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'(X20,X21),X22) != s('type.semanticPrimitives.result'(X20,X21),X23) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X22,X21,X20)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X24),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X23,X21,X20)))))) | s('type.semanticPrimitives.result'(X20,X21),X23) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X23,X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X22,X21,X20))))) )),
  inference(superposition,[],[f3080,f207])).
fof(f18938,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f3080])).
fof(f19391,plain,(
  ( ! [X39,X37,X35,X33,X31,X38,X36,X34,X32,X40] : (s('type.semanticPrimitives.result'(X31,X32),X33) != s('type.semanticPrimitives.result'(X31,X32),X34) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X31,X32),X35),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X33,X32,X31)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X31,X32),X35),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X34,X32,X31)))))) | s('type.semanticPrimitives.result'(X31,X32),X34) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),sK11(X34,X32,X31)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X31,fun(X36,bool)),X37),s(fun(X32,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(X31,X32),X33),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rval_1'(s(X36,X40)))))) )),
  inference(superposition,[],[f3096,f4953])).
fof(f19392,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (s('type.semanticPrimitives.result'(X41,X42),X43) != s('type.semanticPrimitives.result'(X41,X42),X44) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X41,X42),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X43,X42,X41)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X41,X42),X45),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X44,X42,X41)))))) | s('type.semanticPrimitives.result'(X41,X42),X44) = s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK11(X44,X42,X41)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X41,bool)),X47),s(fun(X48,fun(X42,bool)),X49),s('type.semanticPrimitives.result'(X46,X48),'const.semanticPrimitives.Rval_1'(s(X46,X50))),s('type.semanticPrimitives.result'(X41,X42),X43)))) )),
  inference(superposition,[],[f3096,f3215])).
fof(f19393,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.semanticPrimitives.result'(X51,X52),X53) != s('type.semanticPrimitives.result'(X51,X52),X54) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X51,X52),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X53,X52,X51)))))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X51,X52),X55),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X54,X52,X51)))))) | s('type.semanticPrimitives.result'(X51,X52),X54) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X54,X52,X51)))) | s('type.semanticPrimitives.result'(X51,X52),X53) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X53,X52,X51))))) )),
  inference(superposition,[],[f3096,f207])).
fof(f19397,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X3))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0)))))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f3096])).
fof(f20236,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),X4)))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),sK9('const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0))),sK10('const.semanticPrimitives.Rval_1'(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2)),X3,fun('type.semanticPrimitives.result'(X0,X1),bool)),'type.semanticPrimitives.result'(X0,X1))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0))))) )),
  inference(superposition,[],[f3093,f7120])).
fof(f20268,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4)))) = s('type.semanticPrimitives.result'(X4,X5),sK9('const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4))),X6,'type.semanticPrimitives.result'(X4,X5))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4)))) | s(bool,X8) = s(bool,happ(s(fun('type.semanticPrimitives.result'(X4,X5),bool),X6),s('type.semanticPrimitives.result'(X4,X5),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f20249,f147])).
fof(f20249,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4)))) = s('type.semanticPrimitives.result'(X4,X5),sK9('const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4))),X6,'type.semanticPrimitives.result'(X4,X5))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4)))) | s(bool,X8) = s(bool,happ(s(fun('type.semanticPrimitives.result'(X4,X5),bool),X6),s('type.semanticPrimitives.result'(X4,X5),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3093,f273])).
fof(f20744,plain,(
  ( ! [X436,X438,X432,X434,X431,X437,X439,X433,X435] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X431,X432),fun(X434,bool)),X435),s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X431,X432),X436),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X431,X432),X433))),s('type.semanticPrimitives.result'(X434,X437),'const.semanticPrimitives.Rval_1'(s(X434,X439))))) | s(bool,'F_0') = s(bool,happ(s(fun(X434,bool),happ(s(fun('type.semanticPrimitives.result'(X431,X432),fun(X434,bool)),X435),s('type.semanticPrimitives.result'(X431,X432),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X432),sK11(X433,X432,X431)))))),s(X434,X439))) | s('type.semanticPrimitives.result'(X431,X432),X433) = s('type.semanticPrimitives.result'(X431,X432),'const.semanticPrimitives.Rval_1'(s(X431,sK10(X433,X432,X431))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f20747,plain,(
  ( ! [X466,X455,X461,X463,X457,X459,X465,X467,X454,X460,X462,X456,X458,X464] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X454,X455),fun(X457,bool)),X458),s(fun(X459,fun(X460,bool)),X461),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X454,X455),X459),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X454,X455),X456))),s('type.semanticPrimitives.result'(X457,X460),'const.semanticPrimitives.Rval_1'(s(X457,X462))))) | s(bool,'F_0') = s(bool,happ(s(fun(X457,bool),happ(s(fun('type.semanticPrimitives.result'(X454,X455),fun(X457,bool)),X458),s('type.semanticPrimitives.result'(X454,X455),'const.semanticPrimitives.Rval_1'(s(X454,sK10(X456,X455,X454)))))),s(X457,X462))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X454,fun(X463,bool)),X464),s(fun(X455,fun(X465,bool)),X466),s('type.semanticPrimitives.result'(X454,X455),X456),s('type.semanticPrimitives.result'(X463,X465),'const.semanticPrimitives.Rval_1'(s(X463,X467)))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20748,plain,(
  ( ! [X476,X478,X472,X474,X480,X469,X471,X475,X477,X479,X473,X481,X468,X470] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X468,X469),fun(X471,bool)),X472),s(fun(X473,fun(X474,bool)),X475),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X468,X469),X473),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X468,X469),X470))),s('type.semanticPrimitives.result'(X471,X474),'const.semanticPrimitives.Rval_1'(s(X471,X476))))) | s(bool,'F_0') = s(bool,happ(s(fun(X471,bool),happ(s(fun('type.semanticPrimitives.result'(X468,X469),fun(X471,bool)),X472),s('type.semanticPrimitives.result'(X468,X469),'const.semanticPrimitives.Rval_1'(s(X468,sK10(X470,X469,X468)))))),s(X471,X476))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X477,fun(X468,bool)),X478),s(fun(X479,fun(X469,bool)),X480),s('type.semanticPrimitives.result'(X477,X479),'const.semanticPrimitives.Rval_1'(s(X477,X481))),s('type.semanticPrimitives.result'(X468,X469),X470)))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20749,plain,(
  ( ! [X484,X486,X482,X488,X490,X485,X487,X483,X489] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X482,X483),fun(X485,bool)),X486),s(fun(X487,fun(X488,bool)),X489),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X482,X483),X487),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X482,X483),X484))),s('type.semanticPrimitives.result'(X485,X488),'const.semanticPrimitives.Rval_1'(s(X485,X490))))) | s(bool,'F_0') = s(bool,happ(s(fun(X485,bool),happ(s(fun('type.semanticPrimitives.result'(X482,X483),fun(X485,bool)),X486),s('type.semanticPrimitives.result'(X482,X483),'const.semanticPrimitives.Rval_1'(s(X482,sK10(X484,X483,X482)))))),s(X485,X490))) | s('type.semanticPrimitives.result'(X482,X483),X484) = s('type.semanticPrimitives.result'(X482,X483),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X483),sK11(X484,X483,X482))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f20804,plain,(
  ( ! [X436,X438,X432,X434,X431,X437,X439,X433,X435] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X434,fun('type.semanticPrimitives.result'(X431,X432),bool)),X435),s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.result'(X434,X436),'const.semanticPrimitives.Rval_1'(s(X434,X439))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X431,X432),X437),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X431,X432),X433))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X431,X432),bool),happ(s(fun(X434,fun('type.semanticPrimitives.result'(X431,X432),bool)),X435),s(X434,X439))),s('type.semanticPrimitives.result'(X431,X432),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X432),sK11(X433,X432,X431)))))) | s('type.semanticPrimitives.result'(X431,X432),X433) = s('type.semanticPrimitives.result'(X431,X432),'const.semanticPrimitives.Rval_1'(s(X431,sK10(X433,X432,X431))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f20807,plain,(
  ( ! [X466,X455,X461,X463,X457,X459,X465,X467,X454,X460,X462,X456,X458,X464] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X457,fun('type.semanticPrimitives.result'(X454,X455),bool)),X458),s(fun(X459,fun(X460,bool)),X461),s('type.semanticPrimitives.result'(X457,X459),'const.semanticPrimitives.Rval_1'(s(X457,X462))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X454,X455),X460),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X454,X455),X456))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X454,X455),bool),happ(s(fun(X457,fun('type.semanticPrimitives.result'(X454,X455),bool)),X458),s(X457,X462))),s('type.semanticPrimitives.result'(X454,X455),'const.semanticPrimitives.Rval_1'(s(X454,sK10(X456,X455,X454)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X454,fun(X463,bool)),X464),s(fun(X455,fun(X465,bool)),X466),s('type.semanticPrimitives.result'(X454,X455),X456),s('type.semanticPrimitives.result'(X463,X465),'const.semanticPrimitives.Rval_1'(s(X463,X467)))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20808,plain,(
  ( ! [X476,X478,X472,X474,X480,X469,X471,X475,X477,X479,X473,X481,X468,X470] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X471,fun('type.semanticPrimitives.result'(X468,X469),bool)),X472),s(fun(X473,fun(X474,bool)),X475),s('type.semanticPrimitives.result'(X471,X473),'const.semanticPrimitives.Rval_1'(s(X471,X476))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X468,X469),X474),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X468,X469),X470))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X468,X469),bool),happ(s(fun(X471,fun('type.semanticPrimitives.result'(X468,X469),bool)),X472),s(X471,X476))),s('type.semanticPrimitives.result'(X468,X469),'const.semanticPrimitives.Rval_1'(s(X468,sK10(X470,X469,X468)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X477,fun(X468,bool)),X478),s(fun(X479,fun(X469,bool)),X480),s('type.semanticPrimitives.result'(X477,X479),'const.semanticPrimitives.Rval_1'(s(X477,X481))),s('type.semanticPrimitives.result'(X468,X469),X470)))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20809,plain,(
  ( ! [X484,X486,X482,X488,X490,X485,X487,X483,X489] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X485,fun('type.semanticPrimitives.result'(X482,X483),bool)),X486),s(fun(X487,fun(X488,bool)),X489),s('type.semanticPrimitives.result'(X485,X487),'const.semanticPrimitives.Rval_1'(s(X485,X490))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X482,X483),X488),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X482,X483),X484))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X482,X483),bool),happ(s(fun(X485,fun('type.semanticPrimitives.result'(X482,X483),bool)),X486),s(X485,X490))),s('type.semanticPrimitives.result'(X482,X483),'const.semanticPrimitives.Rval_1'(s(X482,sK10(X484,X483,X482)))))) | s('type.semanticPrimitives.result'(X482,X483),X484) = s('type.semanticPrimitives.result'(X482,X483),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X483),sK11(X484,X483,X482))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f21353,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),X4)))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0))),sK10('const.semanticPrimitives.Rval_1'(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2)),X3,fun('type.semanticPrimitives.result'(X0,X1),bool)),'type.semanticPrimitives.result'(X0,X1))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0))))) )),
  inference(superposition,[],[f3077,f7120])).
fof(f21386,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4)))) = s('type.semanticPrimitives.result'(X4,X5),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4))),X6,'type.semanticPrimitives.result'(X4,X5))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4)))) | s(bool,X8) = s(bool,happ(s(fun('type.semanticPrimitives.result'(X4,X5),bool),X6),s('type.semanticPrimitives.result'(X4,X5),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f21366,f147])).
fof(f21366,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4)))) = s('type.semanticPrimitives.result'(X4,X5),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X4))),X6,'type.semanticPrimitives.result'(X4,X5))) | s('type.semanticPrimitives.result'(X4,X5),X7) = s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rval_1'(s(X4,sK10(X7,X5,X4)))) | s(bool,X8) = s(bool,happ(s(fun('type.semanticPrimitives.result'(X4,X5),bool),X6),s('type.semanticPrimitives.result'(X4,X5),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3077,f273])).
fof(f21891,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'(X20,X21),X22) != s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X23,X21,X20)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X20,X21),bool),X24),s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X22,X21,X20))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X20,X21),bool),X24),s('type.semanticPrimitives.result'(X20,X21),X23)))) | s('type.semanticPrimitives.result'(X20,X21),X23) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X23,X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X22,X21,X20))))) )),
  inference(superposition,[],[f3076,f207])).
fof(f21905,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),X3)))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f3076])).
fof(f22381,plain,(
  ( ! [X39,X37,X35,X33,X31,X38,X36,X34,X32,X40] : (s('type.semanticPrimitives.result'(X31,X32),X33) != s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X34,X32,X31)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X31,X32),bool),X35),s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X33,X32,X31))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X31,X32),bool),X35),s('type.semanticPrimitives.result'(X31,X32),X34)))) | s('type.semanticPrimitives.result'(X31,X32),X34) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),sK11(X34,X32,X31)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X31,fun(X36,bool)),X37),s(fun(X32,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(X31,X32),X33),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rval_1'(s(X36,X40)))))) )),
  inference(superposition,[],[f3092,f4953])).
fof(f22382,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (s('type.semanticPrimitives.result'(X41,X42),X43) != s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X44,X42,X41)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X41,X42),bool),X45),s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X43,X42,X41))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X41,X42),bool),X45),s('type.semanticPrimitives.result'(X41,X42),X44)))) | s('type.semanticPrimitives.result'(X41,X42),X44) = s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK11(X44,X42,X41)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X41,bool)),X47),s(fun(X48,fun(X42,bool)),X49),s('type.semanticPrimitives.result'(X46,X48),'const.semanticPrimitives.Rval_1'(s(X46,X50))),s('type.semanticPrimitives.result'(X41,X42),X43)))) )),
  inference(superposition,[],[f3092,f3215])).
fof(f22383,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.semanticPrimitives.result'(X51,X52),X53) != s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X54,X52,X51)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X51,X52),bool),X55),s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X53,X52,X51))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X51,X52),bool),X55),s('type.semanticPrimitives.result'(X51,X52),X54)))) | s('type.semanticPrimitives.result'(X51,X52),X54) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X54,X52,X51)))) | s('type.semanticPrimitives.result'(X51,X52),X53) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X53,X52,X51))))) )),
  inference(superposition,[],[f3092,f207])).
fof(f22405,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X0,X1),bool),X2),s('type.semanticPrimitives.result'(X0,X1),X3)))) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0))))) )),
  inference(equality_resolution,[],[f3092])).
fof(f18949,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'(X62,X63),X64) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62)))) | s('type.semanticPrimitives.result'(X62,X63),X64) != s('type.semanticPrimitives.result'(X62,X63),X66) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X66))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62))))))) )),
  inference(forward_demodulation,[],[f18927,f7120])).
fof(f18927,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'(X62,X63),X64) != s('type.semanticPrimitives.result'(X62,X63),X66) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X66))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X67),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62)))))) | s('type.semanticPrimitives.result'(X62,X63),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63))) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62))))) )),
  inference(superposition,[],[f3080,f7120])).
fof(f19410,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64)))) | s('type.semanticPrimitives.result'(X64,X65),X66) != s('type.semanticPrimitives.result'(X64,X65),X68) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X68))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64))))))) )),
  inference(forward_demodulation,[],[f19385,f7120])).
fof(f19385,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.semanticPrimitives.result'(X64,X65),X66) != s('type.semanticPrimitives.result'(X64,X65),X68) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X68))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X69),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64)))))) | s('type.semanticPrimitives.result'(X64,X65),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65))) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64))))) )),
  inference(superposition,[],[f3096,f7120])).
fof(f20267,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s('type.semanticPrimitives.result'(X54,X55),X56) = s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X54,X55),bool),X58),s('type.semanticPrimitives.result'(X54,X55),X56)))) | s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) = s('type.semanticPrimitives.result'(X54,X55),sK9('const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))),X58,'type.semanticPrimitives.result'(X54,X55)))) )),
  inference(forward_demodulation,[],[f20247,f7120])).
fof(f20247,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X54,X55),bool),X58),s('type.semanticPrimitives.result'(X54,X55),X56)))) | s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) = s('type.semanticPrimitives.result'(X54,X55),sK9('const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))),X58,'type.semanticPrimitives.result'(X54,X55))) | s('type.semanticPrimitives.result'(X54,X55),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55))) = s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))))) )),
  inference(superposition,[],[f3093,f7120])).
fof(f21385,plain,(
  ( ! [X57,X54,X58,X56,X55] : (s('type.semanticPrimitives.result'(X54,X55),X56) = s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X54,X55),bool),X58),s('type.semanticPrimitives.result'(X54,X55),X56)))) | s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) = s('type.semanticPrimitives.result'(X54,X55),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))),X58,'type.semanticPrimitives.result'(X54,X55)))) )),
  inference(forward_demodulation,[],[f21364,f7120])).
fof(f21364,plain,(
  ( ! [X57,X54,X58,X56,X55] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X54,X55),bool),X58),s('type.semanticPrimitives.result'(X54,X55),X56)))) | s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54)))) = s('type.semanticPrimitives.result'(X54,X55),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X55),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))),X58,'type.semanticPrimitives.result'(X54,X55))) | s('type.semanticPrimitives.result'(X54,X55),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55))) = s('type.semanticPrimitives.result'(X54,X55),'const.semanticPrimitives.Rval_1'(s(X54,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X54,X55),X56)),X57,'type.semanticPrimitives.result'(X54,X55)),X55,X54))))) )),
  inference(superposition,[],[f3077,f7120])).
fof(f23556,plain,(
  ( ! [X1050,X1048,X1054,X1052,X1046,X1058,X1056,X1051,X1049,X1055,X1053,X1047,X1045,X1057] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1053,fun(bool,bool)),X1054),s(fun(X1055,fun(X1056,bool)),X1057),s('type.semanticPrimitives.result'(X1053,X1055),'const.semanticPrimitives.Rval_1'(s(X1053,X1058))),s('type.semanticPrimitives.result'(bool,X1056),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X1051,fun(X1050,bool)),X1052),s(fun(X1045,fun(X1046,bool)),X1047),s('type.semanticPrimitives.result'(X1051,X1045),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1045),X1048))),s('type.semanticPrimitives.result'(X1050,X1046),X1049))))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X1053,fun(bool,bool)),X1054),s(X1053,X1058))),s(bool,'const.evalProps.exc_rel_3'(s(fun(X1045,fun(X1046,bool)),X1047),s('type.semanticPrimitives.error_result'(X1045),X1048),s('type.semanticPrimitives.error_result'(X1046),sK11(X1049,X1046,X1050)))))) | s('type.semanticPrimitives.result'(X1050,X1046),X1049) = s('type.semanticPrimitives.result'(X1050,X1046),'const.semanticPrimitives.Rval_1'(s(X1050,sK10(X1049,X1046,X1050))))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23555,plain,(
  ( ! [X1042,X1040,X1035,X1033,X1039,X1037,X1044,X1031,X1043,X1041,X1034,X1032,X1038,X1036] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X1039,bool)),X1040),s(fun(X1041,fun(X1042,bool)),X1043),s('type.semanticPrimitives.result'(bool,X1041),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X1037,fun(X1036,bool)),X1038),s(fun(X1031,fun(X1032,bool)),X1033),s('type.semanticPrimitives.result'(X1037,X1031),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1031),X1034))),s('type.semanticPrimitives.result'(X1036,X1032),X1035))))),s('type.semanticPrimitives.result'(X1039,X1042),'const.semanticPrimitives.Rval_1'(s(X1039,X1044))))) | s(bool,'F_0') = s(bool,happ(s(fun(X1039,bool),happ(s(fun(bool,fun(X1039,bool)),X1040),s(bool,'const.evalProps.exc_rel_3'(s(fun(X1031,fun(X1032,bool)),X1033),s('type.semanticPrimitives.error_result'(X1031),X1034),s('type.semanticPrimitives.error_result'(X1032),sK11(X1035,X1032,X1036)))))),s(X1039,X1044))) | s('type.semanticPrimitives.result'(X1036,X1032),X1035) = s('type.semanticPrimitives.result'(X1036,X1032),'const.semanticPrimitives.Rval_1'(s(X1036,sK10(X1035,X1032,X1036))))) )),
  inference(superposition,[],[f5598,f5315])).
fof(f23550,plain,(
  ( ! [X971,X969,X973,X967,X965,X970,X968,X974,X972,X966] : (s('type.semanticPrimitives.result'(bool,X973),X974) != s('type.semanticPrimitives.result'(bool,X973),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X971,fun(X970,bool)),X972),s(fun(X965,fun(X966,bool)),X967),s('type.semanticPrimitives.result'(X971,X965),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X965),X968))),s('type.semanticPrimitives.result'(X970,X966),X969))))) | s(bool,sK10(X974,X973,bool)) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X965,fun(X966,bool)),X967),s('type.semanticPrimitives.error_result'(X965),X968),s('type.semanticPrimitives.error_result'(X966),sK11(X969,X966,X970)))) | s('type.semanticPrimitives.result'(bool,X973),X974) = s('type.semanticPrimitives.result'(bool,X973),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X973),sK11(X974,X973,bool)))) | s('type.semanticPrimitives.result'(X970,X966),X969) = s('type.semanticPrimitives.result'(X970,X966),'const.semanticPrimitives.Rval_1'(s(X970,sK10(X969,X966,X970))))) )),
  inference(superposition,[],[f3085,f5315])).
fof(f23548,plain,(
  ( ! [X947,X951,X949,X954,X952,X946,X950,X948,X953] : (~p(s(bool,happ(s(fun(bool,bool),X954),s(bool,'const.evalProps.result_rel_4'(s(fun(X952,fun(X951,bool)),X953),s(fun(X946,fun(X947,bool)),X948),s('type.semanticPrimitives.result'(X952,X946),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X946),X949))),s('type.semanticPrimitives.result'(X951,X947),X950)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X954),s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X946,fun(X947,bool)),X948),s('type.semanticPrimitives.error_result'(X946),X949),s('type.semanticPrimitives.error_result'(X947),sK11(X950,X947,X951))),X954,bool)))) | s('type.semanticPrimitives.result'(X951,X947),X950) = s('type.semanticPrimitives.result'(X951,X947),'const.semanticPrimitives.Rval_1'(s(X951,sK10(X950,X947,X951))))) )),
  inference(superposition,[],[f471,f5315])).
fof(f23540,plain,(
  ( ! [X850,X854,X852,X857,X851,X849,X855,X853,X858,X856] : (s(bool,X857) != s(bool,'const.evalProps.result_rel_4'(s(fun(X855,fun(X854,bool)),X856),s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.result'(X855,X849),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X849),X852))),s('type.semanticPrimitives.result'(X854,X850),X853))) | s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,X857))) = s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.error_result'(X849),X852),s('type.semanticPrimitives.error_result'(X850),sK11(X853,X850,X854)))))) | s('type.semanticPrimitives.result'(X854,X850),X853) = s('type.semanticPrimitives.result'(X854,X850),'const.semanticPrimitives.Rval_1'(s(X854,sK10(X853,X850,X854))))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23538,plain,(
  ( ! [X831,X829,X835,X833,X837,X830,X834,X832,X838,X836] : (s('type.semanticPrimitives.result'(bool,X837),'const.semanticPrimitives.Rval_1'(s(bool,X838))) != s('type.semanticPrimitives.result'(bool,X837),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X835,fun(X834,bool)),X836),s(fun(X829,fun(X830,bool)),X831),s('type.semanticPrimitives.result'(X835,X829),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X829),X832))),s('type.semanticPrimitives.result'(X834,X830),X833))))) | s(bool,X838) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X829,fun(X830,bool)),X831),s('type.semanticPrimitives.error_result'(X829),X832),s('type.semanticPrimitives.error_result'(X830),sK11(X833,X830,X834)))) | s('type.semanticPrimitives.result'(X834,X830),X833) = s('type.semanticPrimitives.result'(X834,X830),'const.semanticPrimitives.Rval_1'(s(X834,sK10(X833,X830,X834))))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23537,plain,(
  ( ! [X825,X823,X821,X826,X824,X828,X822,X820,X827] : (~p(s(bool,happ(s(fun(bool,bool),X828),s(bool,'const.evalProps.result_rel_4'(s(fun(X826,fun(X825,bool)),X827),s(fun(X820,fun(X821,bool)),X822),s('type.semanticPrimitives.result'(X826,X820),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X820),X823))),s('type.semanticPrimitives.result'(X825,X821),X824)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X820,fun(X821,bool)),X822),s('type.semanticPrimitives.error_result'(X820),X823),s('type.semanticPrimitives.error_result'(X821),sK11(X824,X821,X825)))) = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X820,fun(X821,bool)),X822),s('type.semanticPrimitives.error_result'(X820),X823),s('type.semanticPrimitives.error_result'(X821),sK11(X824,X821,X825))),X828,bool)) | s('type.semanticPrimitives.result'(X825,X821),X824) = s('type.semanticPrimitives.result'(X825,X821),'const.semanticPrimitives.Rval_1'(s(X825,sK10(X824,X821,X825))))) )),
  inference(superposition,[],[f195,f5315])).
fof(f23536,plain,(
  ( ! [X819,X817,X810,X814,X812,X818,X816,X811,X815,X813] : (~p(s(bool,happ(s(fun(bool,bool),X818),s(bool,'const.evalProps.result_rel_4'(s(fun(X816,fun(X815,bool)),X817),s(fun(X810,fun(X811,bool)),X812),s('type.semanticPrimitives.result'(X816,X810),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X810),X813))),s('type.semanticPrimitives.result'(X815,X811),X814)))))) | p(s(bool,happ(s(fun(bool,bool),X818),s(bool,X819)))) | s(bool,X819) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X810,fun(X811,bool)),X812),s('type.semanticPrimitives.error_result'(X810),X813),s('type.semanticPrimitives.error_result'(X811),sK11(X814,X811,X815)))) | s('type.semanticPrimitives.result'(X815,X811),X814) = s('type.semanticPrimitives.result'(X815,X811),'const.semanticPrimitives.Rval_1'(s(X815,sK10(X814,X811,X815))))) )),
  inference(superposition,[],[f194,f5315])).
fof(f23822,plain,(
  ( ! [X243,X251,X249,X246,X244,X250,X248,X247,X245] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.error_result'(X243),X246),s('type.semanticPrimitives.error_result'(X244),sK11(X247,X244,X248)))) | s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X249,fun(X248,bool)),X250),s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.result'(X249,X243),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X243),X246))),s('type.semanticPrimitives.result'(X248,X244),X247))))) | s('type.semanticPrimitives.result'(X248,X244),X247) = s('type.semanticPrimitives.result'(X248,X244),'const.semanticPrimitives.Rval_1'(s(X248,sK10(X247,X244,X248))))) )),
  inference(forward_demodulation,[],[f23471,f228])).
fof(f23471,plain,(
  ( ! [X243,X255,X253,X251,X249,X257,X259,X246,X244,X254,X252,X250,X248,X256,X258,X247,X245] : (s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X249,fun(X248,bool)),X250),s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.result'(X249,X243),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X243),X246))),s('type.semanticPrimitives.result'(X248,X244),X247))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X243,fun(X244,bool)),X245),s('type.semanticPrimitives.error_result'(X243),X246),s('type.semanticPrimitives.error_result'(X244),sK11(X247,X244,X248)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X252,fun(X253,bool)),X254),s(fun(X255,fun(X256,bool)),X257),s('type.semanticPrimitives.result'(X252,X255),'const.semanticPrimitives.Rval_1'(s(X252,X258))),s('type.semanticPrimitives.result'(X253,X256),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X256),X259))))) | s('type.semanticPrimitives.result'(X248,X244),X247) = s('type.semanticPrimitives.result'(X248,X244),'const.semanticPrimitives.Rval_1'(s(X248,sK10(X247,X244,X248))))) )),
  inference(superposition,[],[f3261,f5315])).
fof(f23469,plain,(
  ( ! [X222,X220,X227,X225,X219,X223,X221,X228,X226,X224] : (~p(s(bool,happ(s(fun(bool,bool),X227),s(bool,'const.evalProps.result_rel_4'(s(fun(X225,fun(X224,bool)),X226),s(fun(X219,fun(X220,bool)),X221),s('type.semanticPrimitives.result'(X225,X219),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X219),X222))),s('type.semanticPrimitives.result'(X224,X220),X223)))))) | p(s(bool,happ(s(fun(bool,bool),X227),s(bool,X228)))) | s(bool,'F_0') != s(bool,X228) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X219,fun(X220,bool)),X221),s('type.semanticPrimitives.error_result'(X219),X222),s('type.semanticPrimitives.error_result'(X220),sK11(X223,X220,X224)))) | s('type.semanticPrimitives.result'(X224,X220),X223) = s('type.semanticPrimitives.result'(X224,X220),'const.semanticPrimitives.Rval_1'(s(X224,sK10(X223,X220,X224))))) )),
  inference(superposition,[],[f937,f5315])).
fof(f23468,plain,(
  ( ! [X212,X218,X216,X210,X215,X213,X211,X217,X214] : (~p(s(bool,happ(s(fun(bool,bool),X218),s(bool,'const.evalProps.result_rel_4'(s(fun(X216,fun(X215,bool)),X217),s(fun(X210,fun(X211,bool)),X212),s('type.semanticPrimitives.result'(X216,X210),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X210),X213))),s('type.semanticPrimitives.result'(X215,X211),X214)))))) | p(s(bool,happ(s(fun(bool,bool),X218),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(X210,fun(X211,bool)),X212),s('type.semanticPrimitives.error_result'(X210),X213),s('type.semanticPrimitives.error_result'(X211),sK11(X214,X211,X215))),X218,bool)) | s('type.semanticPrimitives.result'(X215,X211),X214) = s('type.semanticPrimitives.result'(X215,X211),'const.semanticPrimitives.Rval_1'(s(X215,sK10(X214,X211,X215))))) )),
  inference(superposition,[],[f469,f5315])).
fof(f23467,plain,(
  ( ! [X208,X206,X204,X202,X200,X209,X207,X205,X203,X201] : (s(bool,X208) != s(bool,'const.evalProps.result_rel_4'(s(fun(X206,fun(X205,bool)),X207),s(fun(X200,fun(X201,bool)),X202),s('type.semanticPrimitives.result'(X206,X200),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X200),X203))),s('type.semanticPrimitives.result'(X205,X201),X204))) | s('type.semanticPrimitives.result'(bool,X209),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X209),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X200,fun(X201,bool)),X202),s('type.semanticPrimitives.error_result'(X200),X203),s('type.semanticPrimitives.error_result'(X201),sK11(X204,X201,X205)))))) | s(bool,'T_0') = s(bool,X208) | s('type.semanticPrimitives.result'(X205,X201),X204) = s('type.semanticPrimitives.result'(X205,X201),'const.semanticPrimitives.Rval_1'(s(X205,sK10(X204,X201,X205))))) )),
  inference(superposition,[],[f429,f5315])).
fof(f23466,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X199,X197,X195,X193] : (s(bool,X198) != s(bool,'const.evalProps.result_rel_4'(s(fun(X196,fun(X195,bool)),X197),s(fun(X190,fun(X191,bool)),X192),s('type.semanticPrimitives.result'(X196,X190),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X190),X193))),s('type.semanticPrimitives.result'(X195,X191),X194))) | s('type.semanticPrimitives.result'(bool,X199),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X199),'const.semanticPrimitives.Rval_1'(s(bool,X198))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X190,fun(X191,bool)),X192),s('type.semanticPrimitives.error_result'(X190),X193),s('type.semanticPrimitives.error_result'(X191),sK11(X194,X191,X195)))) | s('type.semanticPrimitives.result'(X195,X191),X194) = s('type.semanticPrimitives.result'(X195,X191),'const.semanticPrimitives.Rval_1'(s(X195,sK10(X194,X191,X195))))) )),
  inference(superposition,[],[f429,f5315])).
fof(f23465,plain,(
  ( ! [X189,X187,X185,X182,X180,X188,X186,X184,X183,X181] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X186,fun(X185,bool)),X187),s(fun(X180,fun(X181,bool)),X182),s('type.semanticPrimitives.result'(X186,X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),X183))),s('type.semanticPrimitives.result'(X185,X181),X184))) | s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X189))) = s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X180,fun(X181,bool)),X182),s('type.semanticPrimitives.error_result'(X180),X183),s('type.semanticPrimitives.error_result'(X181),sK11(X184,X181,X185)))))) | s(bool,'T_0') = s(bool,X189) | s('type.semanticPrimitives.result'(X185,X181),X184) = s('type.semanticPrimitives.result'(X185,X181),'const.semanticPrimitives.Rval_1'(s(X185,sK10(X184,X181,X185))))) )),
  inference(superposition,[],[f428,f5315])).
fof(f23464,plain,(
  ( ! [X177,X175,X173,X171,X178,X176,X174,X172,X170,X179] : (s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,X179))) != s('type.semanticPrimitives.result'(bool,X178),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X176,fun(X175,bool)),X177),s(fun(X170,fun(X171,bool)),X172),s('type.semanticPrimitives.result'(X176,X170),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X170),X173))),s('type.semanticPrimitives.result'(X175,X171),X174))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X170,fun(X171,bool)),X172),s('type.semanticPrimitives.error_result'(X170),X173),s('type.semanticPrimitives.error_result'(X171),sK11(X174,X171,X175)))) | s(bool,'T_0') = s(bool,X179) | s('type.semanticPrimitives.result'(X175,X171),X174) = s('type.semanticPrimitives.result'(X175,X171),'const.semanticPrimitives.Rval_1'(s(X175,sK10(X174,X171,X175))))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23463,plain,(
  ( ! [X167,X165,X163,X161,X169,X166,X164,X162,X160,X168] : (s('type.semanticPrimitives.result'(bool,X168),'const.semanticPrimitives.Rval_1'(s(bool,X169))) != s('type.semanticPrimitives.result'(bool,X168),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X166,fun(X165,bool)),X167),s(fun(X160,fun(X161,bool)),X162),s('type.semanticPrimitives.result'(X166,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),X163))),s('type.semanticPrimitives.result'(X165,X161),X164))))) | s(bool,'F_0') = s(bool,X169) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X160,fun(X161,bool)),X162),s('type.semanticPrimitives.error_result'(X160),X163),s('type.semanticPrimitives.error_result'(X161),sK11(X164,X161,X165)))) | s('type.semanticPrimitives.result'(X165,X161),X164) = s('type.semanticPrimitives.result'(X165,X161),'const.semanticPrimitives.Rval_1'(s(X165,sK10(X164,X161,X165))))) )),
  inference(superposition,[],[f398,f5315])).
fof(f23462,plain,(
  ( ! [X158,X156,X154,X152,X151,X159,X157,X155,X153,X150] : (s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X158),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X156,fun(X155,bool)),X157),s(fun(X150,fun(X151,bool)),X152),s('type.semanticPrimitives.result'(X156,X150),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X150),X153))),s('type.semanticPrimitives.result'(X155,X151),X154))))) | s(bool,X159) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X150,fun(X151,bool)),X152),s('type.semanticPrimitives.error_result'(X150),X153),s('type.semanticPrimitives.error_result'(X151),sK11(X154,X151,X155)))) | s(bool,'T_0') = s(bool,X159) | s('type.semanticPrimitives.result'(X155,X151),X154) = s('type.semanticPrimitives.result'(X155,X151),'const.semanticPrimitives.Rval_1'(s(X155,sK10(X154,X151,X155))))) )),
  inference(superposition,[],[f397,f5315])).
fof(f23461,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X141,X148] : (~p(s(bool,happ(s(fun(bool,bool),X149),s(bool,'const.evalProps.result_rel_4'(s(fun(X147,fun(X146,bool)),X148),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X147,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),X144))),s('type.semanticPrimitives.result'(X146,X142),X145)))))) | s(bool,'F_0') = s(bool,sK9('F_0',X149,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.error_result'(X141),X144),s('type.semanticPrimitives.error_result'(X142),sK11(X145,X142,X146)))) | s('type.semanticPrimitives.result'(X146,X142),X145) = s('type.semanticPrimitives.result'(X146,X142),'const.semanticPrimitives.Rval_1'(s(X146,sK10(X145,X142,X146))))) )),
  inference(superposition,[],[f369,f5315])).
fof(f23460,plain,(
  ( ! [X134,X132,X140,X138,X136,X135,X133,X139,X137] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X137,bool)),X139),s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.result'(X138,X132),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X132),X135))),s('type.semanticPrimitives.result'(X137,X133),X136)))) | s(bool,X140) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X132,fun(X133,bool)),X134),s('type.semanticPrimitives.error_result'(X132),X135),s('type.semanticPrimitives.error_result'(X133),sK11(X136,X133,X137)))) | s(bool,'T_0') = s(bool,X140) | s('type.semanticPrimitives.result'(X137,X133),X136) = s('type.semanticPrimitives.result'(X137,X133),'const.semanticPrimitives.Rval_1'(s(X137,sK10(X136,X133,X137))))) )),
  inference(superposition,[],[f306,f5315])).
fof(f23459,plain,(
  ( ! [X127,X125,X123,X130,X128,X126,X124,X131,X129] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X129,fun(X128,bool)),X130),s(fun(X123,fun(X124,bool)),X125),s('type.semanticPrimitives.result'(X129,X123),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X123),X126))),s('type.semanticPrimitives.result'(X128,X124),X127)))) | s(bool,X131) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X123,fun(X124,bool)),X125),s('type.semanticPrimitives.error_result'(X123),X126),s('type.semanticPrimitives.error_result'(X124),sK11(X127,X124,X128)))) | s(bool,'T_0') = s(bool,X131) | s('type.semanticPrimitives.result'(X128,X124),X127) = s('type.semanticPrimitives.result'(X128,X124),'const.semanticPrimitives.Rval_1'(s(X128,sK10(X127,X124,X128))))) )),
  inference(superposition,[],[f276,f5315])).
fof(f23454,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X86,X84,X82] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X84,fun(X83,bool)),X85),s(fun(X78,fun(X79,bool)),X80),s('type.semanticPrimitives.result'(X84,X78),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X78),X81))),s('type.semanticPrimitives.result'(X83,X79),X82)))) | p(s(bool,X86)) | s(bool,X86) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X78,fun(X79,bool)),X80),s('type.semanticPrimitives.error_result'(X78),X81),s('type.semanticPrimitives.error_result'(X79),sK11(X82,X79,X83)))) | s('type.semanticPrimitives.result'(X83,X79),X82) = s('type.semanticPrimitives.result'(X83,X79),'const.semanticPrimitives.Rval_1'(s(X83,sK10(X82,X79,X83))))) )),
  inference(superposition,[],[f202,f5315])).
fof(f23453,plain,(
  ( ! [X70,X76,X74,X72,X71,X69,X77,X75,X73] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X75,fun(X74,bool)),X76),s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.result'(X75,X69),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X69),X72))),s('type.semanticPrimitives.result'(X74,X70),X73)))) | ~p(s(bool,X77)) | s(bool,X77) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X69,fun(X70,bool)),X71),s('type.semanticPrimitives.error_result'(X69),X72),s('type.semanticPrimitives.error_result'(X70),sK11(X73,X70,X74)))) | s('type.semanticPrimitives.result'(X74,X70),X73) = s('type.semanticPrimitives.result'(X74,X70),'const.semanticPrimitives.Rval_1'(s(X74,sK10(X73,X70,X74))))) )),
  inference(superposition,[],[f200,f5315])).
fof(f23451,plain,(
  ( ! [X59,X57,X54,X52,X58,X56,X55,X53,X51] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X57,fun(X56,bool)),X58),s(fun(X51,fun(X52,bool)),X53),s('type.semanticPrimitives.result'(X57,X51),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X51),X54))),s('type.semanticPrimitives.result'(X56,X52),X55)))) | p(s(bool,X59)) | s(bool,X59) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X51,fun(X52,bool)),X53),s('type.semanticPrimitives.error_result'(X51),X54),s('type.semanticPrimitives.error_result'(X52),sK11(X55,X52,X56)))) | s('type.semanticPrimitives.result'(X56,X52),X55) = s('type.semanticPrimitives.result'(X56,X52),'const.semanticPrimitives.Rval_1'(s(X56,sK10(X55,X52,X56))))) )),
  inference(superposition,[],[f197,f5315])).
fof(f23450,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X49] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(X48,bool)),X50),s(fun(X43,fun(X44,bool)),X45),s('type.semanticPrimitives.result'(X49,X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),X46))),s('type.semanticPrimitives.result'(X48,X44),X47)))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X43,fun(X44,bool)),X45),s('type.semanticPrimitives.error_result'(X43),X46),s('type.semanticPrimitives.error_result'(X44),sK11(X47,X44,X48)))) | s('type.semanticPrimitives.result'(X48,X44),X47) = s('type.semanticPrimitives.result'(X48,X44),'const.semanticPrimitives.Rval_1'(s(X48,sK10(X47,X44,X48))))) )),
  inference(superposition,[],[f157,f5315])).
fof(f23449,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X42,X40] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X41,fun(X40,bool)),X42),s(fun(X35,fun(X36,bool)),X37),s('type.semanticPrimitives.result'(X41,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),X38))),s('type.semanticPrimitives.result'(X40,X36),X39))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X35,fun(X36,bool)),X37),s('type.semanticPrimitives.error_result'(X35),X38),s('type.semanticPrimitives.error_result'(X36),sK11(X39,X36,X40))))) | s('type.semanticPrimitives.result'(X40,X36),X39) = s('type.semanticPrimitives.result'(X40,X36),'const.semanticPrimitives.Rval_1'(s(X40,sK10(X39,X36,X40))))) )),
  inference(superposition,[],[f156,f5315])).
fof(f23448,plain,(
  ( ! [X30,X28,X33,X31,X29,X27,X34,X32] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X33,fun(X32,bool)),X34),s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.result'(X33,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X30))),s('type.semanticPrimitives.result'(X32,X28),X31)))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.error_result'(X27),X30),s('type.semanticPrimitives.error_result'(X28),sK11(X31,X28,X32)))) | s('type.semanticPrimitives.result'(X32,X28),X31) = s('type.semanticPrimitives.result'(X32,X28),'const.semanticPrimitives.Rval_1'(s(X32,sK10(X31,X28,X32))))) )),
  inference(superposition,[],[f153,f5315])).
fof(f23447,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X25,fun(X24,bool)),X26),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X25,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),X22))),s('type.semanticPrimitives.result'(X24,X20),X23)))) | s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.error_result'(X19),X22),s('type.semanticPrimitives.error_result'(X20),sK11(X23,X20,X24)))) | s('type.semanticPrimitives.result'(X24,X20),X23) = s('type.semanticPrimitives.result'(X24,X20),'const.semanticPrimitives.Rval_1'(s(X24,sK10(X23,X20,X24))))) )),
  inference(superposition,[],[f152,f5315])).
fof(f23437,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s('type.semanticPrimitives.result'(bool,X56),X55) = s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X58,fun(X56,bool)),X59),s('type.semanticPrimitives.error_result'(X58),X60),s('type.semanticPrimitives.error_result'(X56),sK11(X55,X56,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X61,fun(bool,bool)),X62),s(fun(X58,fun(X56,bool)),X59),s('type.semanticPrimitives.result'(X61,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X60))),s('type.semanticPrimitives.result'(bool,X56),X55))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,sK10(X55,X56,bool))) )),
  inference(superposition,[],[f5315,f273])).
fof(f23436,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X48),X47) = s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X49,fun(X48,bool)),X50),s('type.semanticPrimitives.error_result'(X49),X51),s('type.semanticPrimitives.error_result'(X48),sK11(X47,X48,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X52,fun(bool,bool)),X53),s(fun(X49,fun(X48,bool)),X50),s('type.semanticPrimitives.result'(X52,X49),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X49),X51))),s('type.semanticPrimitives.result'(bool,X48),X47))) | s(bool,X54) = s(bool,sK10(X47,X48,bool)) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f5315,f273])).
fof(f24045,plain,(
  ( ! [X280,X282,X271,X281,X283,X270,X284] : (s(bool,'F_0') = s(bool,sK10(X271,X270,bool)) | s('type.semanticPrimitives.result'(bool,X270),X271) != s('type.semanticPrimitives.result'(bool,X270),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X280,fun(X270,bool)),X281),s('type.semanticPrimitives.error_result'(X280),X282),s('type.semanticPrimitives.error_result'(X270),sK11(X271,X270,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X283,fun(bool,bool)),X284),s(fun(X280,fun(X270,bool)),X281),s('type.semanticPrimitives.result'(X283,X280),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X280),X282))),s('type.semanticPrimitives.result'(bool,X270),X271)))) )),
  inference(forward_demodulation,[],[f23703,f229])).
fof(f23703,plain,(
  ( ! [X280,X282,X271,X277,X279,X273,X275,X281,X283,X270,X276,X278,X272,X274,X284] : (s('type.semanticPrimitives.result'(bool,X270),X271) != s('type.semanticPrimitives.result'(bool,X270),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X271,X270,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X272,fun(X273,bool)),X274),s(fun(X275,fun(X276,bool)),X277),s('type.semanticPrimitives.result'(X272,X275),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X275),X278))),s('type.semanticPrimitives.result'(X273,X276),'const.semanticPrimitives.Rval_1'(s(X273,X279))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X280,fun(X270,bool)),X281),s('type.semanticPrimitives.error_result'(X280),X282),s('type.semanticPrimitives.error_result'(X270),sK11(X271,X270,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X283,fun(bool,bool)),X284),s(fun(X280,fun(X270,bool)),X281),s('type.semanticPrimitives.result'(X283,X280),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X280),X282))),s('type.semanticPrimitives.result'(bool,X270),X271)))) )),
  inference(superposition,[],[f5050,f5315])).
fof(f8683,plain,(
  ( ! [X101,X99,X100,X98] : (s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rval_1'(s(bool,X98))) != s('type.semanticPrimitives.result'(bool,X100),'const.semanticPrimitives.Rval_1'(s(bool,X101))) | s(bool,'F_0') = s(bool,X101) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X98)),X99,bool))) )),
  inference(superposition,[],[f398,f7120])).
fof(f13062,plain,(
  ( ! [X282,X288,X285,X287,X281,X283,X284,X286] : (s(bool,X281) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X283,bool)),X284),s(fun(X285,fun(X286,bool)),X287),s('type.semanticPrimitives.result'(bool,X285),'const.semanticPrimitives.Rval_1'(s(bool,X281))),s('type.semanticPrimitives.result'(X283,X286),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X286),X288))))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X281)),X282,bool))) )),
  inference(superposition,[],[f3205,f7120])).
fof(f13612,plain,(
  ( ! [X302,X308,X304,X306,X301,X303,X305,X307] : (s(bool,X301) = s(bool,'const.evalProps.result_rel_4'(s(fun(X303,fun(bool,bool)),X304),s(fun(X305,fun(X306,bool)),X307),s('type.semanticPrimitives.result'(X303,X305),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X305),X308))),s('type.semanticPrimitives.result'(bool,X306),'const.semanticPrimitives.Rval_1'(s(bool,X301))))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X301)),X302,bool))) )),
  inference(superposition,[],[f4984,f7120])).
fof(f13744,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) )),
  inference(condensation,[],[f13743])).
fof(f13743,plain,(
  ( ! [X171,X172,X170] : (s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) | s(bool,'T_0') = s(bool,X172) | s(bool,'T_0') = s(bool,X170)) )),
  inference(forward_demodulation,[],[f13742,f229])).
fof(f13742,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X172,X170,X168] : (s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X164,fun(bool,bool)),X165),s(fun(X166,fun(X167,bool)),X168),s('type.semanticPrimitives.result'(X164,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),X169))),s('type.semanticPrimitives.result'(bool,X167),'const.semanticPrimitives.Rval_1'(s(bool,X170))))))) | s(bool,'T_0') = s(bool,X172) | s(bool,'T_0') = s(bool,X170)) )),
  inference(subsumption_resolution,[],[f13648,f150])).
fof(f13648,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X172,X170,X168] : (s(bool,'F_0') != s(bool,X170) | s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,X172))) = s('type.semanticPrimitives.result'(bool,X171),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X164,fun(bool,bool)),X165),s(fun(X166,fun(X167,bool)),X168),s('type.semanticPrimitives.result'(X164,X166),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X166),X169))),s('type.semanticPrimitives.result'(bool,X167),'const.semanticPrimitives.Rval_1'(s(bool,X170))))))) | s(bool,'T_0') = s(bool,X172) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f428,f4984])).
fof(f20950,plain,(
  ( ! [X208,X196,X206,X204,X202,X197,X195,X207,X205,X203,X201] : (s(bool,'F_0') = s(bool,happ(s(fun(X203,bool),happ(s(fun(bool,fun(X203,bool)),X204),s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202))))),s(X203,X208))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(bool,X205),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rval_1'(s(X203,X208))))) | s(bool,'F_0') = s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202)))) )),
  inference(forward_demodulation,[],[f20723,f231])).
fof(f20723,plain,(
  ( ! [X208,X198,X196,X206,X204,X202,X200,X199,X197,X195,X207,X205,X203,X201] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X203,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(bool,X205),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X203,X206),'const.semanticPrimitives.Rval_1'(s(X203,X208))))) | s(bool,'F_0') = s(bool,happ(s(fun(X203,bool),happ(s(fun(bool,fun(X203,bool)),X204),s(bool,'const.evalProps.result_rel_4'(s(fun(X195,fun(X196,bool)),X197),s(fun(X198,fun(X199,bool)),X200),s('type.semanticPrimitives.result'(X195,X198),'const.semanticPrimitives.Rval_1'(s(X195,X201))),s('type.semanticPrimitives.result'(X196,X199),'const.semanticPrimitives.Rval_1'(s(X196,X202))))))),s(X203,X208))) | s(bool,'F_0') = s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202)))) )),
  inference(superposition,[],[f5598,f5598])).
fof(f20979,plain,(
  ( ! [X208,X196,X206,X204,X202,X197,X195,X207,X205,X203,X201] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X203,fun(bool,bool)),X204),s(X203,X208))),s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X203,fun(bool,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X203,X205),'const.semanticPrimitives.Rval_1'(s(X203,X208))),s('type.semanticPrimitives.result'(bool,X206),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202)))) )),
  inference(forward_demodulation,[],[f20783,f231])).
fof(f20783,plain,(
  ( ! [X208,X198,X196,X206,X204,X202,X200,X199,X197,X195,X207,X205,X203,X201] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X203,fun(bool,bool)),X204),s(fun(X205,fun(X206,bool)),X207),s('type.semanticPrimitives.result'(X203,X205),'const.semanticPrimitives.Rval_1'(s(X203,X208))),s('type.semanticPrimitives.result'(bool,X206),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X203,fun(bool,bool)),X204),s(X203,X208))),s(bool,'const.evalProps.result_rel_4'(s(fun(X195,fun(X196,bool)),X197),s(fun(X198,fun(X199,bool)),X200),s('type.semanticPrimitives.result'(X195,X198),'const.semanticPrimitives.Rval_1'(s(X195,X201))),s('type.semanticPrimitives.result'(X196,X199),'const.semanticPrimitives.Rval_1'(s(X196,X202))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X196,bool),happ(s(fun(X195,fun(X196,bool)),X197),s(X195,X201))),s(X196,X202)))) )),
  inference(superposition,[],[f5598,f5598])).
fof(f21004,plain,(
  ( ! [X90,X88,X83,X89,X84,X82] : (s(bool,X90) = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X88))),s(X83,X89))) | ~p(s(bool,X90)) | s(bool,'F_0') = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X88))),s(X83,X89)))) )),
  inference(forward_demodulation,[],[f21003,f231])).
fof(f21003,plain,(
  ( ! [X90,X88,X87,X85,X83,X89,X86,X84,X82] : (~p(s(bool,X90)) | s(bool,X90) = s(bool,'const.evalProps.result_rel_4'(s(fun(X82,fun(X83,bool)),X84),s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.result'(X82,X85),'const.semanticPrimitives.Rval_1'(s(X82,X88))),s('type.semanticPrimitives.result'(X83,X86),'const.semanticPrimitives.Rval_1'(s(X83,X89))))) | s(bool,'F_0') = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X88))),s(X83,X89)))) )),
  inference(subsumption_resolution,[],[f20838,f147])).
fof(f20838,plain,(
  ( ! [X90,X88,X87,X85,X83,X89,X86,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X90)) | s(bool,X90) = s(bool,'const.evalProps.result_rel_4'(s(fun(X82,fun(X83,bool)),X84),s(fun(X85,fun(X86,bool)),X87),s('type.semanticPrimitives.result'(X82,X85),'const.semanticPrimitives.Rval_1'(s(X82,X88))),s('type.semanticPrimitives.result'(X83,X86),'const.semanticPrimitives.Rval_1'(s(X83,X89))))) | s(bool,'F_0') = s(bool,happ(s(fun(X83,bool),happ(s(fun(X82,fun(X83,bool)),X84),s(X82,X88))),s(X83,X89)))) )),
  inference(superposition,[],[f200,f5598])).
fof(f21006,plain,(
  ( ! [X92,X99,X97,X93,X91,X98] : (s(bool,X99) != s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X97))),s(X92,X98))) | p(s(bool,X99)) | s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X97))),s(X92,X98)))) )),
  inference(forward_demodulation,[],[f21005,f231])).
fof(f21005,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X91,X98,X96] : (p(s(bool,X99)) | s(bool,X99) != s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(X92,bool)),X93),s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.result'(X91,X94),'const.semanticPrimitives.Rval_1'(s(X91,X97))),s('type.semanticPrimitives.result'(X92,X95),'const.semanticPrimitives.Rval_1'(s(X92,X98))))) | s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X97))),s(X92,X98)))) )),
  inference(subsumption_resolution,[],[f20839,f147])).
fof(f20839,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X91,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | s(bool,X99) != s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(X92,bool)),X93),s(fun(X94,fun(X95,bool)),X96),s('type.semanticPrimitives.result'(X91,X94),'const.semanticPrimitives.Rval_1'(s(X91,X97))),s('type.semanticPrimitives.result'(X92,X95),'const.semanticPrimitives.Rval_1'(s(X92,X98))))) | s(bool,'F_0') = s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X97))),s(X92,X98)))) )),
  inference(superposition,[],[f202,f5598])).
fof(f21021,plain,(
  ( ! [X749,X747,X741,X743,X748,X750,X742] : (s(bool,X750) != s(bool,happ(s(fun(X742,bool),happ(s(fun(X741,fun(X742,bool)),X743),s(X741,X747))),s(X742,X748))) | ~p(s(bool,happ(s(fun(bool,bool),X749),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X749),s(bool,X750)))) | s(bool,'F_0') = s(bool,happ(s(fun(X742,bool),happ(s(fun(X741,fun(X742,bool)),X743),s(X741,X747))),s(X742,X748)))) )),
  inference(forward_demodulation,[],[f20909,f231])).
fof(f20909,plain,(
  ( ! [X749,X745,X747,X741,X743,X748,X750,X744,X746,X742] : (~p(s(bool,happ(s(fun(bool,bool),X749),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X749),s(bool,X750)))) | s(bool,X750) != s(bool,'const.evalProps.result_rel_4'(s(fun(X741,fun(X742,bool)),X743),s(fun(X744,fun(X745,bool)),X746),s('type.semanticPrimitives.result'(X741,X744),'const.semanticPrimitives.Rval_1'(s(X741,X747))),s('type.semanticPrimitives.result'(X742,X745),'const.semanticPrimitives.Rval_1'(s(X742,X748))))) | s(bool,'F_0') = s(bool,happ(s(fun(X742,bool),happ(s(fun(X741,fun(X742,bool)),X743),s(X741,X747))),s(X742,X748)))) )),
  inference(superposition,[],[f194,f5598])).
fof(f21024,plain,(
  ( ! [X798,X796,X790,X799,X797,X791,X792] : (s('type.semanticPrimitives.result'(bool,X799),'const.semanticPrimitives.Rval_1'(s(bool,X798))) = s('type.semanticPrimitives.result'(bool,X799),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X791,bool),happ(s(fun(X790,fun(X791,bool)),X792),s(X790,X796))),s(X791,X797))))) | s(bool,'T_0') != s(bool,X798) | s(bool,'F_0') = s(bool,happ(s(fun(X791,bool),happ(s(fun(X790,fun(X791,bool)),X792),s(X790,X796))),s(X791,X797)))) )),
  inference(forward_demodulation,[],[f20914,f231])).
fof(f20914,plain,(
  ( ! [X798,X796,X790,X795,X793,X799,X797,X791,X794,X792] : (s(bool,'T_0') != s(bool,X798) | s('type.semanticPrimitives.result'(bool,X799),'const.semanticPrimitives.Rval_1'(s(bool,X798))) = s('type.semanticPrimitives.result'(bool,X799),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X790,fun(X791,bool)),X792),s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.result'(X790,X793),'const.semanticPrimitives.Rval_1'(s(X790,X796))),s('type.semanticPrimitives.result'(X791,X794),'const.semanticPrimitives.Rval_1'(s(X791,X797))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X791,bool),happ(s(fun(X790,fun(X791,bool)),X792),s(X790,X796))),s(X791,X797)))) )),
  inference(superposition,[],[f210,f5598])).
fof(f23736,plain,(
  ( ! [X606,X610,X602,X609,X605,X607,X611,X603,X608,X604] : (s('type.semanticPrimitives.result'(X602,X603),X604) != s('type.semanticPrimitives.result'(X602,X603),X605) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X602,X603),X606),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X602,X603),X605))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X602,X603),X606),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X602,X603),'const.semanticPrimitives.Rval_1'(s(X602,sK10(X604,X603,X602)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X607,fun(X603,bool)),X608),s('type.semanticPrimitives.error_result'(X607),X609),s('type.semanticPrimitives.error_result'(X603),sK11(X604,X603,X602)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X610,fun(X602,bool)),X611),s(fun(X607,fun(X603,bool)),X608),s('type.semanticPrimitives.result'(X610,X607),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X607),X609))),s('type.semanticPrimitives.result'(X602,X603),X604)))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23734,plain,(
  ( ! [X588,X590,X584,X586,X582,X589,X591,X585,X587,X583] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X582,X583),X585),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X582,X583),X584))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X582,X583),X585),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X582,X583),X586))) | s('type.semanticPrimitives.result'(X582,X583),X586) = s('type.semanticPrimitives.result'(X582,X583),'const.semanticPrimitives.Rval_1'(s(X582,sK10(X584,X583,X582)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X587,fun(X583,bool)),X588),s('type.semanticPrimitives.error_result'(X587),X589),s('type.semanticPrimitives.error_result'(X583),sK11(X584,X583,X582)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X590,fun(X582,bool)),X591),s(fun(X587,fun(X583,bool)),X588),s('type.semanticPrimitives.result'(X590,X587),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X587),X589))),s('type.semanticPrimitives.result'(X582,X583),X584)))) )),
  inference(superposition,[],[f209,f5315])).
fof(f24070,plain,(
  ( ! [X478,X484,X486,X480,X482,X479,X485,X487,X481,X483] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),X481))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),'const.semanticPrimitives.Rval_1'(s(X478,sK10(X480,X479,X478)))))) | s('type.semanticPrimitives.result'(X478,X479),X480) != s('type.semanticPrimitives.result'(X478,X479),X481) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.error_result'(X483),X485),s('type.semanticPrimitives.error_result'(X479),sK11(X480,X479,X478)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X486,fun(X478,bool)),X487),s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.result'(X486,X483),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X483),X485))),s('type.semanticPrimitives.result'(X478,X479),X480)))) )),
  inference(forward_demodulation,[],[f24069,f7120])).
fof(f24069,plain,(
  ( ! [X478,X484,X486,X480,X482,X479,X485,X487,X481,X483] : (s('type.semanticPrimitives.result'(X478,X479),X480) != s('type.semanticPrimitives.result'(X478,X479),X481) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),X481))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),'const.semanticPrimitives.Rval_1'(s(X478,sK10('const.semanticPrimitives.Rval_1'(s(X478,sK10(X480,X479,X478))),X479,X478)))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.error_result'(X483),X485),s('type.semanticPrimitives.error_result'(X479),sK11(X480,X479,X478)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X486,fun(X478,bool)),X487),s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.result'(X486,X483),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X483),X485))),s('type.semanticPrimitives.result'(X478,X479),X480)))) )),
  inference(subsumption_resolution,[],[f23725,f213])).
fof(f23725,plain,(
  ( ! [X478,X484,X486,X480,X482,X479,X485,X487,X481,X483] : (s('type.semanticPrimitives.result'(X478,X479),X480) != s('type.semanticPrimitives.result'(X478,X479),X481) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),X481))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X478,X479),X482),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X478,X479),'const.semanticPrimitives.Rval_1'(s(X478,sK10('const.semanticPrimitives.Rval_1'(s(X478,sK10(X480,X479,X478))),X479,X478)))))) | s('type.semanticPrimitives.result'(X478,X479),'const.semanticPrimitives.Rval_1'(s(X478,sK10(X480,X479,X478)))) = s('type.semanticPrimitives.result'(X478,X479),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X479),sK11('const.semanticPrimitives.Rval_1'(s(X478,sK10(X480,X479,X478))),X479,X478)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.error_result'(X483),X485),s('type.semanticPrimitives.error_result'(X479),sK11(X480,X479,X478)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X486,fun(X478,bool)),X487),s(fun(X483,fun(X479,bool)),X484),s('type.semanticPrimitives.result'(X486,X483),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X483),X485))),s('type.semanticPrimitives.result'(X478,X479),X480)))) )),
  inference(superposition,[],[f3096,f5315])).
fof(f24066,plain,(
  ( ! [X466,X461,X463,X459,X465,X467,X460,X462,X458,X464] : (s('type.semanticPrimitives.result'(X458,X459),X462) = s('type.semanticPrimitives.result'(X458,X459),'const.semanticPrimitives.Rval_1'(s(X458,sK10(X460,X459,X458)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X460))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X462))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.error_result'(X463),X465),s('type.semanticPrimitives.error_result'(X459),sK11(X460,X459,X458)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X466,fun(X458,bool)),X467),s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.result'(X466,X463),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X463),X465))),s('type.semanticPrimitives.result'(X458,X459),X460)))) )),
  inference(forward_demodulation,[],[f24065,f7120])).
fof(f24065,plain,(
  ( ! [X466,X461,X463,X459,X465,X467,X460,X462,X458,X464] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X460))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X462))) | s('type.semanticPrimitives.result'(X458,X459),X462) = s('type.semanticPrimitives.result'(X458,X459),'const.semanticPrimitives.Rval_1'(s(X458,sK10('const.semanticPrimitives.Rval_1'(s(X458,sK10(X460,X459,X458))),X459,X458)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.error_result'(X463),X465),s('type.semanticPrimitives.error_result'(X459),sK11(X460,X459,X458)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X466,fun(X458,bool)),X467),s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.result'(X466,X463),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X463),X465))),s('type.semanticPrimitives.result'(X458,X459),X460)))) )),
  inference(subsumption_resolution,[],[f23723,f213])).
fof(f23723,plain,(
  ( ! [X466,X461,X463,X459,X465,X467,X460,X462,X458,X464] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X460))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X458,X459),X461),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X458,X459),X462))) | s('type.semanticPrimitives.result'(X458,X459),X462) = s('type.semanticPrimitives.result'(X458,X459),'const.semanticPrimitives.Rval_1'(s(X458,sK10('const.semanticPrimitives.Rval_1'(s(X458,sK10(X460,X459,X458))),X459,X458)))) | s('type.semanticPrimitives.result'(X458,X459),'const.semanticPrimitives.Rval_1'(s(X458,sK10(X460,X459,X458)))) = s('type.semanticPrimitives.result'(X458,X459),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X459),sK11('const.semanticPrimitives.Rval_1'(s(X458,sK10(X460,X459,X458))),X459,X458)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.error_result'(X463),X465),s('type.semanticPrimitives.error_result'(X459),sK11(X460,X459,X458)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X466,fun(X458,bool)),X467),s(fun(X463,fun(X459,bool)),X464),s('type.semanticPrimitives.result'(X466,X463),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X463),X465))),s('type.semanticPrimitives.result'(X458,X459),X460)))) )),
  inference(superposition,[],[f3094,f5315])).
fof(f24063,plain,(
  ( ! [X453,X455,X449,X451,X457,X452,X454,X450,X456] : (s('type.semanticPrimitives.result'(X449,X450),'const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449)))) = s('type.semanticPrimitives.result'(X449,X450),sK9('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X452,'type.semanticPrimitives.result'(X449,X450))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X449,X450),bool),X452),s('type.semanticPrimitives.result'(X449,X450),X451)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.error_result'(X453),X455),s('type.semanticPrimitives.error_result'(X450),sK11(X451,X450,X449)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X456,fun(X449,bool)),X457),s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.result'(X456,X453),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X453),X455))),s('type.semanticPrimitives.result'(X449,X450),X451)))) )),
  inference(forward_demodulation,[],[f24062,f7120])).
fof(f24062,plain,(
  ( ! [X453,X455,X449,X451,X457,X452,X454,X450,X456] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X449,X450),bool),X452),s('type.semanticPrimitives.result'(X449,X450),X451)))) | s('type.semanticPrimitives.result'(X449,X450),'const.semanticPrimitives.Rval_1'(s(X449,sK10('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X450,X449)))) = s('type.semanticPrimitives.result'(X449,X450),sK9('const.semanticPrimitives.Rval_1'(s(X449,sK10('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X450,X449))),X452,'type.semanticPrimitives.result'(X449,X450))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.error_result'(X453),X455),s('type.semanticPrimitives.error_result'(X450),sK11(X451,X450,X449)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X456,fun(X449,bool)),X457),s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.result'(X456,X453),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X453),X455))),s('type.semanticPrimitives.result'(X449,X450),X451)))) )),
  inference(subsumption_resolution,[],[f23722,f213])).
fof(f23722,plain,(
  ( ! [X453,X455,X449,X451,X457,X452,X454,X450,X456] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X449,X450),bool),X452),s('type.semanticPrimitives.result'(X449,X450),X451)))) | s('type.semanticPrimitives.result'(X449,X450),'const.semanticPrimitives.Rval_1'(s(X449,sK10('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X450,X449)))) = s('type.semanticPrimitives.result'(X449,X450),sK9('const.semanticPrimitives.Rval_1'(s(X449,sK10('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X450,X449))),X452,'type.semanticPrimitives.result'(X449,X450))) | s('type.semanticPrimitives.result'(X449,X450),'const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449)))) = s('type.semanticPrimitives.result'(X449,X450),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X450),sK11('const.semanticPrimitives.Rval_1'(s(X449,sK10(X451,X450,X449))),X450,X449)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.error_result'(X453),X455),s('type.semanticPrimitives.error_result'(X450),sK11(X451,X450,X449)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X456,fun(X449,bool)),X457),s(fun(X453,fun(X450,bool)),X454),s('type.semanticPrimitives.result'(X456,X453),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X453),X455))),s('type.semanticPrimitives.result'(X449,X450),X451)))) )),
  inference(superposition,[],[f3093,f5315])).
fof(f23713,plain,(
  ( ! [X364,X366,X362,X368,X370,X365,X367,X363,X369,X371] : (s('type.semanticPrimitives.result'(X362,X363),X364) != s('type.semanticPrimitives.result'(X362,X363),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X363),sK11(X365,X363,X362)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X362,X363),bool),X366),s('type.semanticPrimitives.result'(X362,X363),'const.semanticPrimitives.Rval_1'(s(X362,sK10(X364,X363,X362))))))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X362,X363),bool),X366),s('type.semanticPrimitives.result'(X362,X363),X365)))) | s('type.semanticPrimitives.result'(X362,X363),X365) = s('type.semanticPrimitives.result'(X362,X363),'const.semanticPrimitives.Rval_1'(s(X362,sK10(X365,X363,X362)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X367,fun(X363,bool)),X368),s('type.semanticPrimitives.error_result'(X367),X369),s('type.semanticPrimitives.error_result'(X363),sK11(X364,X363,X362)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X370,fun(X362,bool)),X371),s(fun(X367,fun(X363,bool)),X368),s('type.semanticPrimitives.result'(X370,X367),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X367),X369))),s('type.semanticPrimitives.result'(X362,X363),X364)))) )),
  inference(superposition,[],[f3076,f5315])).
fof(f24042,plain,(
  ( ! [X243,X255,X253,X257,X244,X254,X256] : (s(bool,'F_0') = s(bool,sK10(X244,X243,bool)) | s('type.semanticPrimitives.result'(bool,X243),X244) != s('type.semanticPrimitives.result'(bool,X243),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X253,fun(X243,bool)),X254),s('type.semanticPrimitives.error_result'(X253),X255),s('type.semanticPrimitives.error_result'(X243),sK11(X244,X243,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X256,fun(bool,bool)),X257),s(fun(X253,fun(X243,bool)),X254),s('type.semanticPrimitives.result'(X256,X253),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X253),X255))),s('type.semanticPrimitives.result'(bool,X243),X244)))) )),
  inference(forward_demodulation,[],[f23701,f228])).
fof(f23701,plain,(
  ( ! [X243,X255,X253,X251,X249,X257,X246,X244,X254,X252,X250,X248,X256,X247,X245] : (s('type.semanticPrimitives.result'(bool,X243),X244) != s('type.semanticPrimitives.result'(bool,X243),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X244,X243,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X245,fun(X246,bool)),X247),s(fun(X248,fun(X249,bool)),X250),s('type.semanticPrimitives.result'(X245,X248),'const.semanticPrimitives.Rval_1'(s(X245,X251))),s('type.semanticPrimitives.result'(X246,X249),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X249),X252))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X253,fun(X243,bool)),X254),s('type.semanticPrimitives.error_result'(X253),X255),s('type.semanticPrimitives.error_result'(X243),sK11(X244,X243,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X256,fun(bool,bool)),X257),s(fun(X253,fun(X243,bool)),X254),s('type.semanticPrimitives.result'(X256,X253),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X253),X255))),s('type.semanticPrimitives.result'(bool,X243),X244)))) )),
  inference(superposition,[],[f3261,f5315])).
fof(f23689,plain,(
  ( ! [X111,X118,X116,X114,X112,X119,X117,X115,X113] : (s('type.semanticPrimitives.result'(X111,X112),X113) != s('type.semanticPrimitives.result'(X111,X112),X114) | s('type.semanticPrimitives.result'(X111,X112),X114) = s('type.semanticPrimitives.result'(X111,X112),'const.semanticPrimitives.Rval_1'(s(X111,sK10(X114,X112,X111)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X115,fun(X112,bool)),X116),s('type.semanticPrimitives.error_result'(X115),X117),s('type.semanticPrimitives.error_result'(X112),sK11(X113,X112,X111)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X118,fun(X111,bool)),X119),s(fun(X115,fun(X112,bool)),X116),s('type.semanticPrimitives.result'(X118,X115),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X115),X117))),s('type.semanticPrimitives.result'(X111,X112),X113)))) )),
  inference(superposition,[],[f3075,f5315])).
fof(f23683,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42,X40] : (s('type.semanticPrimitives.result'(X40,X41),X42) != s('type.semanticPrimitives.result'(X40,X41),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X41),X43))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X44,fun(X41,bool)),X45),s('type.semanticPrimitives.error_result'(X44),X46),s('type.semanticPrimitives.error_result'(X41),sK11(X42,X41,X40)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X47,fun(X40,bool)),X48),s(fun(X44,fun(X41,bool)),X45),s('type.semanticPrimitives.result'(X47,X44),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X44),X46))),s('type.semanticPrimitives.result'(X40,X41),X42)))) )),
  inference(superposition,[],[f213,f5315])).
fof(f23681,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25,X22] : (s('type.semanticPrimitives.result'(X22,X23),X24) != s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rval_1'(s(X22,X25))) | s(X22,X25) = s(X22,sK10(X24,X23,X22)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X26,fun(X23,bool)),X27),s('type.semanticPrimitives.error_result'(X26),X28),s('type.semanticPrimitives.error_result'(X23),sK11(X24,X23,X22)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X22,bool)),X30),s(fun(X26,fun(X23,bool)),X27),s('type.semanticPrimitives.result'(X29,X26),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X26),X28))),s('type.semanticPrimitives.result'(X22,X23),X24)))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23662,plain,(
  ( ! [X912,X918,X916,X914,X911,X909,X915,X913,X917,X910] : (s(bool,X917) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X912,fun(X913,bool)),X914),s('type.semanticPrimitives.error_result'(X912),X915),s('type.semanticPrimitives.error_result'(X913),sK11(X916,X913,X910)))) | s('type.semanticPrimitives.result'(bool,X918),'const.semanticPrimitives.Rval_1'(s(bool,X917))) = s('type.semanticPrimitives.result'(bool,X918),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X909,fun(X910,bool)),X911),s(fun(X912,fun(X913,bool)),X914),s('type.semanticPrimitives.result'(X909,X912),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X912),X915))),s('type.semanticPrimitives.result'(X910,X913),X916))))) | s('type.semanticPrimitives.result'(X910,X913),X916) = s('type.semanticPrimitives.result'(X910,X913),'const.semanticPrimitives.Rval_1'(s(X910,sK10(X916,X913,X910))))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23660,plain,(
  ( ! [X895,X893,X897,X890,X894,X892,X898,X896,X891,X889] : (s('type.semanticPrimitives.result'(bool,X897),'const.semanticPrimitives.Rval_1'(s(bool,X898))) != s('type.semanticPrimitives.result'(bool,X897),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X892,fun(X893,bool)),X894),s('type.semanticPrimitives.error_result'(X892),X895),s('type.semanticPrimitives.error_result'(X893),sK11(X896,X893,X890)))))) | s(bool,X898) = s(bool,'const.evalProps.result_rel_4'(s(fun(X889,fun(X890,bool)),X891),s(fun(X892,fun(X893,bool)),X894),s('type.semanticPrimitives.result'(X889,X892),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X892),X895))),s('type.semanticPrimitives.result'(X890,X893),X896))) | s('type.semanticPrimitives.result'(X890,X893),X896) = s('type.semanticPrimitives.result'(X890,X893),'const.semanticPrimitives.Rval_1'(s(X890,sK10(X896,X893,X890))))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23941,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X342,X336,X338] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(X335,bool)),X336),s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X337),X340))),s('type.semanticPrimitives.result'(X335,X338),X341))) | s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.error_result'(X337),X340),s('type.semanticPrimitives.error_result'(X338),sK11(X341,X338,X335))))))) )),
  inference(subsumption_resolution,[],[f23940,f17586])).
fof(f23940,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X342,X336,X338] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(X335,bool)),X336),s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X337),X340))),s('type.semanticPrimitives.result'(X335,X338),X341))) | s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.error_result'(X337),X340),s('type.semanticPrimitives.error_result'(X338),sK11(X341,X338,X335)))))) | s('type.semanticPrimitives.result'(X335,X338),X341) = s('type.semanticPrimitives.result'(X335,X338),'const.semanticPrimitives.Rval_1'(s(X335,sK10(X341,X338,X335))))) )),
  inference(forward_demodulation,[],[f23595,f229])).
fof(f23595,plain,(
  ( ! [X350,X344,X346,X335,X341,X343,X337,X339,X349,X345,X347,X334,X340,X342,X336,X338,X348] : (s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X342),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.error_result'(X337),X340),s('type.semanticPrimitives.error_result'(X338),sK11(X341,X338,X335)))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(X335,bool)),X336),s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X337),X340))),s('type.semanticPrimitives.result'(X335,X338),X341))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X343,fun(X344,bool)),X345),s(fun(X346,fun(X347,bool)),X348),s('type.semanticPrimitives.result'(X343,X346),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X346),X349))),s('type.semanticPrimitives.result'(X344,X347),'const.semanticPrimitives.Rval_1'(s(X344,X350))))) | s('type.semanticPrimitives.result'(X335,X338),X341) = s('type.semanticPrimitives.result'(X335,X338),'const.semanticPrimitives.Rval_1'(s(X335,sK10(X341,X338,X335))))) )),
  inference(superposition,[],[f5050,f5315])).
fof(f23574,plain,(
  ( ! [X127,X125,X123,X121,X128,X126,X124,X122,X120] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X123,fun(X124,bool)),X125),s('type.semanticPrimitives.error_result'(X123),X126),s('type.semanticPrimitives.error_result'(X124),sK11(X127,X124,X121))))) | p(s(bool,X128)) | s(bool,X128) = s(bool,'const.evalProps.result_rel_4'(s(fun(X120,fun(X121,bool)),X122),s(fun(X123,fun(X124,bool)),X125),s('type.semanticPrimitives.result'(X120,X123),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X123),X126))),s('type.semanticPrimitives.result'(X121,X124),X127))) | s('type.semanticPrimitives.result'(X121,X124),X127) = s('type.semanticPrimitives.result'(X121,X124),'const.semanticPrimitives.Rval_1'(s(X121,sK10(X127,X124,X121))))) )),
  inference(superposition,[],[f197,f5315])).
fof(f23541,plain,(
  ( ! [X860,X866,X864,X868,X859,X863,X861,X867,X865,X862] : (s(bool,X867) != s(bool,'const.evalProps.result_rel_4'(s(fun(X865,fun(X864,bool)),X866),s(fun(X859,fun(X860,bool)),X861),s('type.semanticPrimitives.result'(X865,X859),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X859),X862))),s('type.semanticPrimitives.result'(X864,X860),X863))) | s('type.semanticPrimitives.result'(bool,X868),'const.semanticPrimitives.Rval_1'(s(bool,X867))) = s('type.semanticPrimitives.result'(bool,X868),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X859,fun(X860,bool)),X861),s('type.semanticPrimitives.error_result'(X859),X862),s('type.semanticPrimitives.error_result'(X860),sK11(X863,X860,X864)))))) | s('type.semanticPrimitives.result'(X864,X860),X863) = s('type.semanticPrimitives.result'(X864,X860),'const.semanticPrimitives.Rval_1'(s(X864,sK10(X863,X860,X864))))) )),
  inference(superposition,[],[f210,f5315])).
fof(f23539,plain,(
  ( ! [X848,X843,X841,X847,X845,X839,X842,X840,X846,X844] : (s('type.semanticPrimitives.result'(bool,X847),'const.semanticPrimitives.Rval_1'(s(bool,X848))) != s('type.semanticPrimitives.result'(bool,X847),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X845,fun(X844,bool)),X846),s(fun(X839,fun(X840,bool)),X841),s('type.semanticPrimitives.result'(X845,X839),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X839),X842))),s('type.semanticPrimitives.result'(X844,X840),X843))))) | s(bool,X848) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X839,fun(X840,bool)),X841),s('type.semanticPrimitives.error_result'(X839),X842),s('type.semanticPrimitives.error_result'(X840),sK11(X843,X840,X844)))) | s('type.semanticPrimitives.result'(X844,X840),X843) = s('type.semanticPrimitives.result'(X844,X840),'const.semanticPrimitives.Rval_1'(s(X844,sK10(X843,X840,X844))))) )),
  inference(superposition,[],[f209,f5315])).
fof(f23825,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X276,X278,X274] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.error_result'(X274),X277),s('type.semanticPrimitives.error_result'(X275),sK11(X278,X275,X279)))) | s('type.semanticPrimitives.result'(bool,X282),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X282),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X280,fun(X279,bool)),X281),s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.result'(X280,X274),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X274),X277))),s('type.semanticPrimitives.result'(X279,X275),X278))))) | s('type.semanticPrimitives.result'(X279,X275),X278) = s('type.semanticPrimitives.result'(X279,X275),'const.semanticPrimitives.Rval_1'(s(X279,sK10(X278,X275,X279))))) )),
  inference(forward_demodulation,[],[f23473,f229])).
fof(f23473,plain,(
  ( ! [X280,X282,X288,X290,X277,X279,X275,X285,X287,X281,X283,X289,X276,X278,X274,X284,X286] : (s('type.semanticPrimitives.result'(bool,X282),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X282),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X280,fun(X279,bool)),X281),s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.result'(X280,X274),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X274),X277))),s('type.semanticPrimitives.result'(X279,X275),X278))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X274,fun(X275,bool)),X276),s('type.semanticPrimitives.error_result'(X274),X277),s('type.semanticPrimitives.error_result'(X275),sK11(X278,X275,X279)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X283,fun(X284,bool)),X285),s(fun(X286,fun(X287,bool)),X288),s('type.semanticPrimitives.result'(X283,X286),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X286),X289))),s('type.semanticPrimitives.result'(X284,X287),'const.semanticPrimitives.Rval_1'(s(X284,X290))))) | s('type.semanticPrimitives.result'(X279,X275),X278) = s('type.semanticPrimitives.result'(X279,X275),'const.semanticPrimitives.Rval_1'(s(X279,sK10(X278,X275,X279))))) )),
  inference(superposition,[],[f5050,f5315])).
fof(f23452,plain,(
  ( ! [X61,X68,X66,X64,X62,X60,X67,X65,X63] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X66,fun(X65,bool)),X67),s(fun(X60,fun(X61,bool)),X62),s('type.semanticPrimitives.result'(X66,X60),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X60),X63))),s('type.semanticPrimitives.result'(X65,X61),X64)))) | p(s(bool,X68)) | s(bool,X68) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X60,fun(X61,bool)),X62),s('type.semanticPrimitives.error_result'(X60),X63),s('type.semanticPrimitives.error_result'(X61),sK11(X64,X61,X65)))) | s('type.semanticPrimitives.result'(X65,X61),X64) = s('type.semanticPrimitives.result'(X65,X61),'const.semanticPrimitives.Rval_1'(s(X65,sK10(X64,X61,X65))))) )),
  inference(superposition,[],[f197,f5315])).
fof(f23439,plain,(
  ( ! [X78,X76,X74,X72,X71,X77,X75,X73] : (s('type.semanticPrimitives.result'(bool,X72),X71) = s('type.semanticPrimitives.result'(bool,X72),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X73,fun(X72,bool)),X74),s('type.semanticPrimitives.error_result'(X73),X75),s('type.semanticPrimitives.error_result'(X72),sK11(X71,X72,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X76,fun(bool,bool)),X77),s(fun(X73,fun(X72,bool)),X74),s('type.semanticPrimitives.result'(X76,X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),X75))),s('type.semanticPrimitives.result'(bool,X72),X71))) | s(bool,X78) = s(bool,sK10(X71,X72,bool)) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f5315,f273])).
fof(f23438,plain,(
  ( ! [X70,X68,X66,X64,X69,X67,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),X63) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X65))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X66,fun(X64,bool)),X67),s('type.semanticPrimitives.error_result'(X66),X68),s('type.semanticPrimitives.error_result'(X64),sK11(X63,X64,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X69,fun(bool,bool)),X70),s(fun(X66,fun(X64,bool)),X67),s('type.semanticPrimitives.result'(X69,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),X68))),s('type.semanticPrimitives.result'(bool,X64),X63))) | s(bool,'T_0') = s(bool,sK10(X63,X64,bool)) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f5315,f273])).
fof(f23383,plain,(
  ( ! [X39,X45,X43,X41,X38,X46,X44,X42,X40] : (s(bool,X44) = s(bool,'const.evalProps.result_rel_4'(s(fun(X45,fun(X43,bool)),X46),s(fun(X38,fun(X39,bool)),X40),s('type.semanticPrimitives.result'(X45,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),X41))),s('type.semanticPrimitives.result'(X43,X39),X42))) | s('type.semanticPrimitives.result'(X43,X39),X42) = s('type.semanticPrimitives.result'(X43,X39),'const.semanticPrimitives.Rval_1'(s(X43,sK10(X42,X39,X43)))) | s(bool,'T_0') = s(bool,X44) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X38,fun(X39,bool)),X40),s('type.semanticPrimitives.error_result'(X38),X41),s('type.semanticPrimitives.error_result'(X39),sK11(X42,X39,X43))))) )),
  inference(superposition,[],[f5315,f273])).
fof(f23382,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X36,X34,X32] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X35,fun(X34,bool)),X36),s(fun(X29,fun(X30,bool)),X31),s('type.semanticPrimitives.result'(X35,X29),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X29),X32))),s('type.semanticPrimitives.result'(X34,X30),X33))) | s('type.semanticPrimitives.result'(X34,X30),X33) = s('type.semanticPrimitives.result'(X34,X30),'const.semanticPrimitives.Rval_1'(s(X34,sK10(X33,X30,X34)))) | s(bool,X37) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X29,fun(X30,bool)),X31),s('type.semanticPrimitives.error_result'(X29),X32),s('type.semanticPrimitives.error_result'(X30),sK11(X33,X30,X34)))) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f5315,f273])).
fof(f23756,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X27,fun(X26,bool)),X28),s(fun(X21,fun(X22,bool)),X23),s('type.semanticPrimitives.result'(X27,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),X24))),s('type.semanticPrimitives.result'(X26,X22),X25))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X21,fun(X22,bool)),X23),s('type.semanticPrimitives.error_result'(X21),X24),s('type.semanticPrimitives.error_result'(X22),sK11(X25,X22,X26))))) )),
  inference(subsumption_resolution,[],[f23381,f17586])).
fof(f23381,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X27,fun(X26,bool)),X28),s(fun(X21,fun(X22,bool)),X23),s('type.semanticPrimitives.result'(X27,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),X24))),s('type.semanticPrimitives.result'(X26,X22),X25))) | s('type.semanticPrimitives.result'(X26,X22),X25) = s('type.semanticPrimitives.result'(X26,X22),'const.semanticPrimitives.Rval_1'(s(X26,sK10(X25,X22,X26)))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X21,fun(X22,bool)),X23),s('type.semanticPrimitives.error_result'(X21),X24),s('type.semanticPrimitives.error_result'(X22),sK11(X25,X22,X26))))) )),
  inference(superposition,[],[f5315,f150])).
fof(f22924,plain,(
  ( ! [X243,X251,X249,X246,X244,X242,X250,X248,X247,X245] : (s(bool,X250) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X245,fun(X246,bool)),X247),s('type.semanticPrimitives.error_result'(X245),sK11(X248,X245,X242)),s('type.semanticPrimitives.error_result'(X246),X249))) | s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X251),'const.semanticPrimitives.Rval_1'(s(bool,X250))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X242,fun(X243,bool)),X244),s(fun(X245,fun(X246,bool)),X247),s('type.semanticPrimitives.result'(X242,X245),X248),s('type.semanticPrimitives.result'(X243,X246),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X246),X249))))) | s('type.semanticPrimitives.result'(X242,X245),X248) = s('type.semanticPrimitives.result'(X242,X245),'const.semanticPrimitives.Rval_1'(s(X242,sK10(X248,X245,X242))))) )),
  inference(superposition,[],[f429,f5312])).
fof(f22806,plain,(
  ( ! [X187,X185,X182,X180,X188,X186,X184,X183,X181,X179] : (s(bool,X187) != s(bool,'const.evalProps.result_rel_4'(s(fun(X183,fun(X185,bool)),X186),s(fun(X179,fun(X180,bool)),X181),s('type.semanticPrimitives.result'(X183,X179),X182),s('type.semanticPrimitives.result'(X185,X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),X184))))) | s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X188),'const.semanticPrimitives.Rval_1'(s(bool,X187))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X179,fun(X180,bool)),X181),s('type.semanticPrimitives.error_result'(X179),sK11(X182,X179,X183)),s('type.semanticPrimitives.error_result'(X180),X184))) | s('type.semanticPrimitives.result'(X183,X179),X182) = s('type.semanticPrimitives.result'(X183,X179),'const.semanticPrimitives.Rval_1'(s(X183,sK10(X182,X179,X183))))) )),
  inference(superposition,[],[f429,f5312])).
fof(f22727,plain,(
  ( ! [X30,X28,X35,X33,X31,X29,X27,X34,X32] : (s(bool,X33) = s(bool,'const.evalProps.result_rel_4'(s(fun(X31,fun(X34,bool)),X35),s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.result'(X31,X27),X30),s('type.semanticPrimitives.result'(X34,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),X32))))) | s('type.semanticPrimitives.result'(X31,X27),X30) = s('type.semanticPrimitives.result'(X31,X27),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X30,X27,X31)))) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.error_result'(X27),sK11(X30,X27,X31)),s('type.semanticPrimitives.error_result'(X28),X32)))) )),
  inference(superposition,[],[f5312,f273])).
fof(f22726,plain,(
  ( ! [X26,X24,X23,X21,X19,X25,X22,X20,X18] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X22,fun(X24,bool)),X25),s(fun(X18,fun(X19,bool)),X20),s('type.semanticPrimitives.result'(X22,X18),X21),s('type.semanticPrimitives.result'(X24,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),X23))))) | s('type.semanticPrimitives.result'(X22,X18),X21) = s('type.semanticPrimitives.result'(X22,X18),'const.semanticPrimitives.Rval_1'(s(X22,sK10(X21,X18,X22)))) | s(bool,X26) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X18,fun(X19,bool)),X20),s('type.semanticPrimitives.error_result'(X18),sK11(X21,X18,X22)),s('type.semanticPrimitives.error_result'(X19),X23))) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f5312,f273])).
fof(f23089,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X14,fun(X16,bool)),X17),s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.result'(X14,X10),X13),s('type.semanticPrimitives.result'(X16,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),X15))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.error_result'(X10),sK11(X13,X10,X14)),s('type.semanticPrimitives.error_result'(X11),X15)))) )),
  inference(subsumption_resolution,[],[f22725,f16753])).
fof(f22725,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X14,fun(X16,bool)),X17),s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.result'(X14,X10),X13),s('type.semanticPrimitives.result'(X16,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),X15))))) | s('type.semanticPrimitives.result'(X14,X10),X13) = s('type.semanticPrimitives.result'(X14,X10),'const.semanticPrimitives.Rval_1'(s(X14,sK10(X13,X10,X14)))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X10,fun(X11,bool)),X12),s('type.semanticPrimitives.error_result'(X10),sK11(X13,X10,X14)),s('type.semanticPrimitives.error_result'(X11),X15)))) )),
  inference(superposition,[],[f5312,f150])).
fof(f22394,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s('type.semanticPrimitives.result'(bool,X37),X39) != s('type.semanticPrimitives.result'(bool,X37),'const.semanticPrimitives.Rval_1'(s(bool,X38))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X37),bool),X40),s('type.semanticPrimitives.result'(bool,X37),X39)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X37),bool),X40),s('type.semanticPrimitives.result'(bool,X37),X36)))) | s('type.semanticPrimitives.result'(bool,X37),X36) = s('type.semanticPrimitives.result'(bool,X37),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X37),sK11(X36,X37,bool)))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,sK10(X36,X37,bool))) )),
  inference(superposition,[],[f3092,f273])).
fof(f22393,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s('type.semanticPrimitives.result'(bool,X32),X33) != s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X32),bool),X34),s('type.semanticPrimitives.result'(bool,X32),X33)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X32),bool),X34),s('type.semanticPrimitives.result'(bool,X32),X31)))) | s('type.semanticPrimitives.result'(bool,X32),X31) = s('type.semanticPrimitives.result'(bool,X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),sK11(X31,X32,bool)))) | s(bool,X35) = s(bool,sK10(X31,X32,bool)) | s(bool,'T_0') = s(bool,X35)) )),
  inference(superposition,[],[f3092,f273])).
fof(f22392,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.semanticPrimitives.result'(bool,X28),X29) != s('type.semanticPrimitives.result'(bool,X28),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X28),bool),X30),s('type.semanticPrimitives.result'(bool,X28),X29)))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X28),bool),X30),s('type.semanticPrimitives.result'(bool,X28),X27)))) | s('type.semanticPrimitives.result'(bool,X28),X27) = s('type.semanticPrimitives.result'(bool,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),sK11(X27,X28,bool)))) | s(bool,'T_0') = s(bool,sK10(X27,X28,bool))) )),
  inference(superposition,[],[f3092,f150])).
fof(f20923,plain,(
  ( ! [X905,X899,X897,X903,X901,X904,X898,X896,X902,X900] : (s('type.semanticPrimitives.result'(bool,X904),X905) != s('type.semanticPrimitives.result'(bool,X904),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,sK10(X905,X904,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X896,fun(X897,bool)),X898),s(fun(X899,fun(X900,bool)),X901),s('type.semanticPrimitives.result'(X896,X899),'const.semanticPrimitives.Rval_1'(s(X896,X902))),s('type.semanticPrimitives.result'(X897,X900),'const.semanticPrimitives.Rval_1'(s(X897,X903))))) | s('type.semanticPrimitives.result'(bool,X904),X905) = s('type.semanticPrimitives.result'(bool,X904),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X904),sK11(X905,X904,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(X897,bool),happ(s(fun(X896,fun(X897,bool)),X898),s(X896,X902))),s(X897,X903)))) )),
  inference(superposition,[],[f3085,f5598])).
fof(f20921,plain,(
  ( ! [X883,X881,X885,X878,X882,X880,X884,X879,X877] : (~p(s(bool,happ(s(fun(bool,bool),X885),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X885),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X877,fun(X878,bool)),X879),s(fun(X880,fun(X881,bool)),X882),s('type.semanticPrimitives.result'(X877,X880),'const.semanticPrimitives.Rval_1'(s(X877,X883))),s('type.semanticPrimitives.result'(X878,X881),'const.semanticPrimitives.Rval_1'(s(X878,X884)))),X885,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(X878,bool),happ(s(fun(X877,fun(X878,bool)),X879),s(X877,X883))),s(X878,X884)))) )),
  inference(superposition,[],[f471,f5598])).
fof(f20911,plain,(
  ( ! [X765,X767,X761,X763,X769,X764,X766,X760,X762,X768] : (s('type.semanticPrimitives.result'(bool,X768),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X768),'const.semanticPrimitives.Rval_1'(s(bool,X769))) | s(bool,X769) = s(bool,'const.evalProps.result_rel_4'(s(fun(X760,fun(X761,bool)),X762),s(fun(X763,fun(X764,bool)),X765),s('type.semanticPrimitives.result'(X760,X763),'const.semanticPrimitives.Rval_1'(s(X760,X766))),s('type.semanticPrimitives.result'(X761,X764),'const.semanticPrimitives.Rval_1'(s(X761,X767))))) | s(bool,'F_0') = s(bool,happ(s(fun(X761,bool),happ(s(fun(X760,fun(X761,bool)),X762),s(X760,X766))),s(X761,X767)))) )),
  inference(superposition,[],[f209,f5598])).
fof(f21022,plain,(
  ( ! [X757,X759,X753,X755,X751,X756,X758,X752,X754] : (s(bool,happ(s(fun(X752,bool),happ(s(fun(X751,fun(X752,bool)),X753),s(X751,X757))),s(X752,X758))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X751,fun(X752,bool)),X753),s(fun(X754,fun(X755,bool)),X756),s('type.semanticPrimitives.result'(X751,X754),'const.semanticPrimitives.Rval_1'(s(X751,X757))),s('type.semanticPrimitives.result'(X752,X755),'const.semanticPrimitives.Rval_1'(s(X752,X758)))),X759,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X759),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X752,bool),happ(s(fun(X751,fun(X752,bool)),X753),s(X751,X757))),s(X752,X758)))) )),
  inference(forward_demodulation,[],[f20910,f231])).
fof(f20910,plain,(
  ( ! [X757,X759,X753,X755,X751,X756,X758,X752,X754] : (~p(s(bool,happ(s(fun(bool,bool),X759),s(bool,'T_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X751,fun(X752,bool)),X753),s(fun(X754,fun(X755,bool)),X756),s('type.semanticPrimitives.result'(X751,X754),'const.semanticPrimitives.Rval_1'(s(X751,X757))),s('type.semanticPrimitives.result'(X752,X755),'const.semanticPrimitives.Rval_1'(s(X752,X758))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X751,fun(X752,bool)),X753),s(fun(X754,fun(X755,bool)),X756),s('type.semanticPrimitives.result'(X751,X754),'const.semanticPrimitives.Rval_1'(s(X751,X757))),s('type.semanticPrimitives.result'(X752,X755),'const.semanticPrimitives.Rval_1'(s(X752,X758)))),X759,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X752,bool),happ(s(fun(X751,fun(X752,bool)),X753),s(X751,X757))),s(X752,X758)))) )),
  inference(superposition,[],[f195,f5598])).
fof(f20851,plain,(
  ( ! [X222,X229,X227,X225,X223,X221,X228,X226,X224] : (~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X221,fun(X222,bool)),X223),s(fun(X224,fun(X225,bool)),X226),s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,X227))),s('type.semanticPrimitives.result'(X222,X225),'const.semanticPrimitives.Rval_1'(s(X222,X228)))),X229,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X222,bool),happ(s(fun(X221,fun(X222,bool)),X223),s(X221,X227))),s(X222,X228)))) )),
  inference(superposition,[],[f469,f5598])).
fof(f21007,plain,(
  ( ! [X134,X142,X140,X138,X136,X135,X141,X139,X137] : (s(bool,X142) != s(bool,'const.evalProps.result_rel_4'(s(fun(X134,fun(X135,bool)),X136),s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.result'(X134,X137),'const.semanticPrimitives.Rval_1'(s(X134,X140))),s('type.semanticPrimitives.result'(X135,X138),'const.semanticPrimitives.Rval_1'(s(X135,X141))))) | s(bool,'T_0') = s(bool,X142) | s(bool,'F_0') = s(bool,happ(s(fun(X135,bool),happ(s(fun(X134,fun(X135,bool)),X136),s(X134,X140))),s(X135,X141)))) )),
  inference(subsumption_resolution,[],[f20842,f147])).
fof(f20842,plain,(
  ( ! [X134,X142,X140,X138,X136,X135,X141,X139,X137] : (~p(s(bool,'T_0')) | s(bool,X142) != s(bool,'const.evalProps.result_rel_4'(s(fun(X134,fun(X135,bool)),X136),s(fun(X137,fun(X138,bool)),X139),s('type.semanticPrimitives.result'(X134,X137),'const.semanticPrimitives.Rval_1'(s(X134,X140))),s('type.semanticPrimitives.result'(X135,X138),'const.semanticPrimitives.Rval_1'(s(X135,X141))))) | s(bool,'T_0') = s(bool,X142) | s(bool,'F_0') = s(bool,happ(s(fun(X135,bool),happ(s(fun(X134,fun(X135,bool)),X136),s(X134,X140))),s(X135,X141)))) )),
  inference(superposition,[],[f276,f5598])).
fof(f20815,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X26,bool)),X30),s(fun(X31,fun(X27,bool)),X32),s('type.semanticPrimitives.result'(X29,X31),'const.semanticPrimitives.Rval_1'(s(X29,X33))),s('type.semanticPrimitives.result'(X26,X27),X28))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),happ(s(fun(X29,fun(X26,bool)),X30),s(X29,X33))),s(X26,sK10(X28,X27,X26)))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f20814,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X13,bool)),X17),s(fun(X18,fun(X14,bool)),X19),s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rval_1'(s(X16,X20))),s('type.semanticPrimitives.result'(X13,X14),X15))) | s(bool,'F_0') = s(bool,happ(s(fun(X13,bool),happ(s(fun(X16,fun(X13,bool)),X17),s(X16,X20))),s(X13,sK10(X15,X14,X13)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X13,bool)),X22),s(fun(X23,fun(X14,bool)),X24),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rval_1'(s(X21,X25))),s('type.semanticPrimitives.result'(X13,X14),X15)))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20813,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,X7))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X3,fun(X0,bool)),X4),s(X3,X7))),s(X0,sK10(X2,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X8,bool)),X9),s(fun(X1,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12)))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20805,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X442,fun('type.semanticPrimitives.result'(bool,X440),bool)),X443),s(fun(X444,fun(X445,bool)),X446),s('type.semanticPrimitives.result'(X442,X444),'const.semanticPrimitives.Rval_1'(s(X442,X447))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X440),X445),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X440),X441))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X440),bool),happ(s(fun(X442,fun('type.semanticPrimitives.result'(bool,X440),bool)),X443),s(X442,X447))),s('type.semanticPrimitives.result'(bool,X440),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X440),sK11(X441,X440,bool)))))) | s('type.semanticPrimitives.result'(bool,X440),X441) = s('type.semanticPrimitives.result'(bool,X440),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X441,X440,bool))) )),
  inference(superposition,[],[f5598,f3058])).
fof(f20803,plain,(
  ( ! [X420,X422,X418,X428,X430,X424,X426,X421,X423,X417,X419,X429,X425,X427] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X420,fun('type.semanticPrimitives.result'(X417,X418),bool)),X421),s(fun(X422,fun(X423,bool)),X424),s('type.semanticPrimitives.result'(X420,X422),'const.semanticPrimitives.Rval_1'(s(X420,X425))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X423),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X417,X418),X419))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X417,X418),bool),happ(s(fun(X420,fun('type.semanticPrimitives.result'(X417,X418),bool)),X421),s(X420,X425))),s('type.semanticPrimitives.result'(X417,X418),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X418),sK11(X419,X418,X417)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X417,fun(X426,bool)),X427),s(fun(X418,fun(X428,bool)),X429),s('type.semanticPrimitives.result'(X417,X418),X419),s('type.semanticPrimitives.result'(X426,X428),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X428),X430)))))) )),
  inference(superposition,[],[f5598,f3212])).
fof(f20802,plain,(
  ( ! [X412,X414,X408,X410,X416,X405,X407,X403,X413,X415,X409,X411,X404,X406] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X406,fun('type.semanticPrimitives.result'(X403,X404),bool)),X407),s(fun(X408,fun(X409,bool)),X410),s('type.semanticPrimitives.result'(X406,X408),'const.semanticPrimitives.Rval_1'(s(X406,X411))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X403,X404),X409),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X403,X404),X405))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X403,X404),bool),happ(s(fun(X406,fun('type.semanticPrimitives.result'(X403,X404),bool)),X407),s(X406,X411))),s('type.semanticPrimitives.result'(X403,X404),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X404),sK11(X405,X404,X403)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X412,fun(X403,bool)),X413),s(fun(X414,fun(X404,bool)),X415),s('type.semanticPrimitives.result'(X412,X414),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X414),X416))),s('type.semanticPrimitives.result'(X403,X404),X405)))) )),
  inference(superposition,[],[f5598,f4992])).
fof(f20790,plain,(
  ( ! [X294,X300,X302,X296,X298,X304,X306,X293,X295,X301,X303,X297,X299,X305] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X301,fun(bool,bool)),X302),s(fun(X303,fun(X304,bool)),X305),s('type.semanticPrimitives.result'(X301,X303),'const.semanticPrimitives.Rval_1'(s(X301,X306))),s('type.semanticPrimitives.result'(bool,X304),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X301,fun(bool,bool)),X302),s(X301,X306))),s(bool,'const.evalProps.result_rel_4'(s(fun(X293,fun(X294,bool)),X295),s(fun(X296,fun(X297,bool)),X298),s('type.semanticPrimitives.result'(X293,X296),X299),s('type.semanticPrimitives.result'(X294,X297),'const.semanticPrimitives.Rval_1'(s(X294,X300))))))) | s('type.semanticPrimitives.result'(X293,X296),X299) = s('type.semanticPrimitives.result'(X293,X296),'const.semanticPrimitives.Rval_1'(s(X293,sK10(X299,X296,X293))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20785,plain,(
  ( ! [X231,X229,X227,X225,X235,X233,X223,X230,X228,X226,X224,X236,X234,X232] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X231,fun(bool,bool)),X232),s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.result'(X231,X233),'const.semanticPrimitives.Rval_1'(s(X231,X236))),s('type.semanticPrimitives.result'(bool,X234),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X231,fun(bool,bool)),X232),s(X231,X236))),s(bool,'const.evalProps.result_rel_4'(s(fun(X223,fun(X224,bool)),X225),s(fun(X226,fun(X227,bool)),X228),s('type.semanticPrimitives.result'(X223,X226),'const.semanticPrimitives.Rval_1'(s(X223,X229))),s('type.semanticPrimitives.result'(X224,X227),X230))))) | s('type.semanticPrimitives.result'(X224,X227),X230) = s('type.semanticPrimitives.result'(X224,X227),'const.semanticPrimitives.Rval_1'(s(X224,sK10(X230,X227,X224))))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20770,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X95,fun(bool,bool)),X96),s(fun(X97,fun(X98,bool)),X99),s('type.semanticPrimitives.result'(X95,X97),'const.semanticPrimitives.Rval_1'(s(X95,X100))),s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X94))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X95,fun(bool,bool)),X96),s(X95,X100))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f5598,f150])).
fof(f20768,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(bool,X78) = s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(bool,bool)),X80),s(fun(X81,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(X79,X81),'const.semanticPrimitives.Rval_1'(s(X79,X84))),s('type.semanticPrimitives.result'(bool,X82),'const.semanticPrimitives.Rval_1'(s(bool,X78))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X79,fun(bool,bool)),X80),s(X79,X84))),s(bool,'T_0'))) | s(bool,X78) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20761,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X26,fun(bool,bool)),X27),s(fun(X28,fun(X29,bool)),X30),s('type.semanticPrimitives.result'(X26,X28),'const.semanticPrimitives.Rval_1'(s(X26,X31))),s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,X25))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X26,fun(bool,bool)),X27),s(X26,X31))),s(bool,X24))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20760,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X17,fun(bool,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X17,X19),'const.semanticPrimitives.Rval_1'(s(X17,X22))),s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X17,fun(bool,bool)),X18),s(X17,X22))),s(bool,X16))) | s(bool,X16) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20759,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(bool,bool)),X11),s(fun(X12,fun(X13,bool)),X14),s('type.semanticPrimitives.result'(X10,X12),'const.semanticPrimitives.Rval_1'(s(X10,X15))),s('type.semanticPrimitives.result'(bool,X13),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X10,fun(bool,bool)),X11),s(X10,X15))),s(bool,X9))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f5598,f150])).
fof(f20755,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X26,fun(X29,bool)),X30),s(fun(X27,fun(X31,bool)),X32),s('type.semanticPrimitives.result'(X26,X27),X28),s('type.semanticPrimitives.result'(X29,X31),'const.semanticPrimitives.Rval_1'(s(X29,X33))))) | s(bool,'F_0') = s(bool,happ(s(fun(X29,bool),happ(s(fun(X26,fun(X29,bool)),X30),s(X26,sK10(X28,X27,X26)))),s(X29,X33))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26))))) )),
  inference(superposition,[],[f5598,f207])).
fof(f20754,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X16,bool)),X17),s(fun(X14,fun(X18,bool)),X19),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rval_1'(s(X16,X20))))) | s(bool,'F_0') = s(bool,happ(s(fun(X16,bool),happ(s(fun(X13,fun(X16,bool)),X17),s(X13,sK10(X15,X14,X13)))),s(X16,X20))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X13,bool)),X22),s(fun(X23,fun(X14,bool)),X24),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rval_1'(s(X21,X25))),s('type.semanticPrimitives.result'(X13,X14),X15)))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20753,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,X7))))) | s(bool,'F_0') = s(bool,happ(s(fun(X3,bool),happ(s(fun(X0,fun(X3,bool)),X4),s(X0,sK10(X2,X1,X0)))),s(X3,X7))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X8,bool)),X9),s(fun(X1,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12)))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20745,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(bool,X440),fun(X442,bool)),X443),s(fun(X444,fun(X445,bool)),X446),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X440),X444),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X440),X441))),s('type.semanticPrimitives.result'(X442,X445),'const.semanticPrimitives.Rval_1'(s(X442,X447))))) | s(bool,'F_0') = s(bool,happ(s(fun(X442,bool),happ(s(fun('type.semanticPrimitives.result'(bool,X440),fun(X442,bool)),X443),s('type.semanticPrimitives.result'(bool,X440),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X440),sK11(X441,X440,bool)))))),s(X442,X447))) | s('type.semanticPrimitives.result'(bool,X440),X441) = s('type.semanticPrimitives.result'(bool,X440),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X441,X440,bool))) )),
  inference(superposition,[],[f5598,f3058])).
fof(f20743,plain,(
  ( ! [X420,X422,X418,X428,X430,X424,X426,X421,X423,X417,X419,X429,X425,X427] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X417,X418),fun(X420,bool)),X421),s(fun(X422,fun(X423,bool)),X424),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X422),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X417,X418),X419))),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rval_1'(s(X420,X425))))) | s(bool,'F_0') = s(bool,happ(s(fun(X420,bool),happ(s(fun('type.semanticPrimitives.result'(X417,X418),fun(X420,bool)),X421),s('type.semanticPrimitives.result'(X417,X418),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X418),sK11(X419,X418,X417)))))),s(X420,X425))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X417,fun(X426,bool)),X427),s(fun(X418,fun(X428,bool)),X429),s('type.semanticPrimitives.result'(X417,X418),X419),s('type.semanticPrimitives.result'(X426,X428),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X428),X430)))))) )),
  inference(superposition,[],[f5598,f3212])).
fof(f20742,plain,(
  ( ! [X412,X414,X408,X410,X416,X405,X407,X403,X413,X415,X409,X411,X404,X406] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X403,X404),fun(X406,bool)),X407),s(fun(X408,fun(X409,bool)),X410),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X403,X404),X408),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X403,X404),X405))),s('type.semanticPrimitives.result'(X406,X409),'const.semanticPrimitives.Rval_1'(s(X406,X411))))) | s(bool,'F_0') = s(bool,happ(s(fun(X406,bool),happ(s(fun('type.semanticPrimitives.result'(X403,X404),fun(X406,bool)),X407),s('type.semanticPrimitives.result'(X403,X404),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X404),sK11(X405,X404,X403)))))),s(X406,X411))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X412,fun(X403,bool)),X413),s(fun(X414,fun(X404,bool)),X415),s('type.semanticPrimitives.result'(X412,X414),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X414),X416))),s('type.semanticPrimitives.result'(X403,X404),X405)))) )),
  inference(superposition,[],[f5598,f4992])).
fof(f20730,plain,(
  ( ! [X294,X300,X302,X296,X298,X304,X306,X293,X295,X301,X303,X297,X299,X305] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X301,bool)),X302),s(fun(X303,fun(X304,bool)),X305),s('type.semanticPrimitives.result'(bool,X303),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.semanticPrimitives.result'(X301,X304),'const.semanticPrimitives.Rval_1'(s(X301,X306))))) | s(bool,'F_0') = s(bool,happ(s(fun(X301,bool),happ(s(fun(bool,fun(X301,bool)),X302),s(bool,'const.evalProps.result_rel_4'(s(fun(X293,fun(X294,bool)),X295),s(fun(X296,fun(X297,bool)),X298),s('type.semanticPrimitives.result'(X293,X296),X299),s('type.semanticPrimitives.result'(X294,X297),'const.semanticPrimitives.Rval_1'(s(X294,X300))))))),s(X301,X306))) | s('type.semanticPrimitives.result'(X293,X296),X299) = s('type.semanticPrimitives.result'(X293,X296),'const.semanticPrimitives.Rval_1'(s(X293,sK10(X299,X296,X293))))) )),
  inference(superposition,[],[f5598,f4953])).
fof(f20725,plain,(
  ( ! [X231,X229,X227,X225,X235,X233,X223,X230,X228,X226,X224,X236,X234,X232] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X231,bool)),X232),s(fun(X233,fun(X234,bool)),X235),s('type.semanticPrimitives.result'(bool,X233),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.semanticPrimitives.result'(X231,X234),'const.semanticPrimitives.Rval_1'(s(X231,X236))))) | s(bool,'F_0') = s(bool,happ(s(fun(X231,bool),happ(s(fun(bool,fun(X231,bool)),X232),s(bool,'const.evalProps.result_rel_4'(s(fun(X223,fun(X224,bool)),X225),s(fun(X226,fun(X227,bool)),X228),s('type.semanticPrimitives.result'(X223,X226),'const.semanticPrimitives.Rval_1'(s(X223,X229))),s('type.semanticPrimitives.result'(X224,X227),X230))))),s(X231,X236))) | s('type.semanticPrimitives.result'(X224,X227),X230) = s('type.semanticPrimitives.result'(X224,X227),'const.semanticPrimitives.Rval_1'(s(X224,sK10(X230,X227,X224))))) )),
  inference(superposition,[],[f5598,f3215])).
fof(f20710,plain,(
  ( ! [X94,X99,X97,X95,X100,X98,X96] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X95,bool)),X96),s(fun(X97,fun(X98,bool)),X99),s('type.semanticPrimitives.result'(bool,X97),'const.semanticPrimitives.Rval_1'(s(bool,X94))),s('type.semanticPrimitives.result'(X95,X98),'const.semanticPrimitives.Rval_1'(s(X95,X100))))) | s(bool,'F_0') = s(bool,happ(s(fun(X95,bool),happ(s(fun(bool,fun(X95,bool)),X96),s(bool,'F_0'))),s(X95,X100))) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f5598,f150])).
fof(f20708,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(bool,X78) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X79,bool)),X80),s(fun(X81,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(bool,X81),'const.semanticPrimitives.Rval_1'(s(bool,X78))),s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rval_1'(s(X79,X84))))) | s(bool,'F_0') = s(bool,happ(s(fun(X79,bool),happ(s(fun(bool,fun(X79,bool)),X80),s(bool,'T_0'))),s(X79,X84))) | s(bool,X78) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20701,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X26,bool)),X27),s(fun(X28,fun(X29,bool)),X30),s('type.semanticPrimitives.result'(bool,X28),'const.semanticPrimitives.Rval_1'(s(bool,X25))),s('type.semanticPrimitives.result'(X26,X29),'const.semanticPrimitives.Rval_1'(s(X26,X31))))) | s(bool,'F_0') = s(bool,happ(s(fun(X26,bool),happ(s(fun(bool,fun(X26,bool)),X27),s(bool,X24))),s(X26,X31))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20700,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(bool,X19),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rval_1'(s(X17,X22))))) | s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),happ(s(fun(bool,fun(X17,bool)),X18),s(bool,X16))),s(X17,X22))) | s(bool,X16) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f5598,f273])).
fof(f20699,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X10,bool)),X11),s(fun(X12,fun(X13,bool)),X14),s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))),s('type.semanticPrimitives.result'(X10,X13),'const.semanticPrimitives.Rval_1'(s(X10,X15))))) | s(bool,'F_0') = s(bool,happ(s(fun(X10,bool),happ(s(fun(bool,fun(X10,bool)),X11),s(bool,X9))),s(X10,X15))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f5598,f150])).
fof(f19636,plain,(
  ( ! [X39,X37,X35,X38,X36,X34,X40] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X36,fun(bool,bool)),X37),s(fun(X38,fun(X34,bool)),X39),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),X40))),s('type.semanticPrimitives.result'(bool,X34),X35))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X38,fun(X34,bool)),X39),s('type.semanticPrimitives.error_result'(X38),X40),s('type.semanticPrimitives.error_result'(X34),sK11(X35,X34,bool)))) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X35,X34,bool))) )),
  inference(superposition,[],[f5316,f3058])).
fof(f19635,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X26,bool)),X30),s(fun(X31,fun(X27,bool)),X32),s('type.semanticPrimitives.result'(X29,X31),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X31),X33))),s('type.semanticPrimitives.result'(X26,X27),X28))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X31,fun(X27,bool)),X32),s('type.semanticPrimitives.error_result'(X31),X33),s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26)))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,sK10(X28,X27,X26))))) )),
  inference(superposition,[],[f5316,f207])).
fof(f19634,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X13,bool)),X17),s(fun(X18,fun(X14,bool)),X19),s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),X20))),s('type.semanticPrimitives.result'(X13,X14),X15))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X18,fun(X14,bool)),X19),s('type.semanticPrimitives.error_result'(X18),X20),s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X21,bool)),X22),s(fun(X14,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f5316,f3212])).
fof(f19633,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.error_result'(X5),X7),s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f5316,f4992])).
fof(f19629,plain,(
  ( ! [X39,X37,X35,X38,X36,X34,X40] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X36,bool)),X37),s(fun(X34,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(bool,X34),X35),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),X40))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X34,fun(X38,bool)),X39),s('type.semanticPrimitives.error_result'(X34),sK11(X35,X34,bool)),s('type.semanticPrimitives.error_result'(X38),X40))) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X35,X34,bool))) )),
  inference(superposition,[],[f5316,f3058])).
fof(f19628,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X26,fun(X29,bool)),X30),s(fun(X27,fun(X31,bool)),X32),s('type.semanticPrimitives.result'(X26,X27),X28),s('type.semanticPrimitives.result'(X29,X31),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X31),X33))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X27,fun(X31,bool)),X32),s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26)),s('type.semanticPrimitives.error_result'(X31),X33))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rval_1'(s(X26,sK10(X28,X27,X26))))) )),
  inference(superposition,[],[f5316,f207])).
fof(f19627,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X16,bool)),X17),s(fun(X14,fun(X18,bool)),X19),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),X20))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X14,fun(X18,bool)),X19),s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13)),s('type.semanticPrimitives.error_result'(X18),X20))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X21,bool)),X22),s(fun(X14,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f5316,f3212])).
fof(f19626,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)),s('type.semanticPrimitives.error_result'(X5),X7))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f5316,f4992])).
fof(f19146,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X14,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X15,fun('type.semanticPrimitives.result'(X10,X11),bool)),X16),s(fun(X17,fun(X12,bool)),X18),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rval_1'(s(X15,X19))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13)))) )),
  inference(superposition,[],[f3094,f3215])).
fof(f19145,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X0,X1),fun(X5,bool)),X6),s(fun(X2,fun(X7,bool)),X8),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rval_1'(s(X5,X9)))))) )),
  inference(superposition,[],[f3094,f4953])).
fof(f19144,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X69))) | s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK10(X69,X65,X64)))) = s('type.semanticPrimitives.result'(X64,X65),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65))) | s('type.semanticPrimitives.result'(X64,X65),X69) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK11(X69,X65,X64))))) )),
  inference(superposition,[],[f3094,f7120])).
fof(f19141,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X51,X52),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X51,X52),X53))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X51,X52),X54),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X51,X52),X55))) | s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X53,X52,X51)))) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rval_1'(s(X51,sK10(X55,X52,X51)))) | s('type.semanticPrimitives.result'(X51,X52),X55) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X55,X52,X51)))) | s('type.semanticPrimitives.result'(X51,X52),X53) = s('type.semanticPrimitives.result'(X51,X52),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X52),sK11(X53,X52,X51))))) )),
  inference(superposition,[],[f3094,f207])).
fof(f19140,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X41,X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X41,X42),X43))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X41,X42),X44),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X41,X42),X45))) | s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X43,X42,X41)))) = s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rval_1'(s(X41,sK10(X45,X42,X41)))) | s('type.semanticPrimitives.result'(X41,X42),X45) = s('type.semanticPrimitives.result'(X41,X42),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X42),sK11(X45,X42,X41)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X41,bool)),X47),s(fun(X48,fun(X42,bool)),X49),s('type.semanticPrimitives.result'(X46,X48),'const.semanticPrimitives.Rval_1'(s(X46,X50))),s('type.semanticPrimitives.result'(X41,X42),X43)))) )),
  inference(superposition,[],[f3094,f3215])).
fof(f19139,plain,(
  ( ! [X39,X37,X35,X33,X31,X38,X36,X34,X32,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X31,X32),X34),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X31,X32),X33))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X31,X32),X34),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X31,X32),X35))) | s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X33,X32,X31)))) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rval_1'(s(X31,sK10(X35,X32,X31)))) | s('type.semanticPrimitives.result'(X31,X32),X35) = s('type.semanticPrimitives.result'(X31,X32),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X32),sK11(X35,X32,X31)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X31,fun(X36,bool)),X37),s(fun(X32,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(X31,X32),X33),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rval_1'(s(X36,X40)))))) )),
  inference(superposition,[],[f3094,f4953])).
fof(f19162,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X26))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X28))) | s('type.semanticPrimitives.result'(bool,X25),X28) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X28,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(subsumption_resolution,[],[f19137,f213])).
fof(f19137,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X26))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X25),X27),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X25),X28))) | s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,sK10(X28,X25,bool)))) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X26,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X28) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X28,X25,bool)))) | s('type.semanticPrimitives.result'(bool,X25),X26) = s('type.semanticPrimitives.result'(bool,X25),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X26,X25,bool))) )),
  inference(superposition,[],[f3094,f3058])).
fof(f19161,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X14,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X15,bool)),X16),s(fun(X11,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X10,X11),X12),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19)))))) )),
  inference(subsumption_resolution,[],[f19135,f213])).
fof(f19135,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X14,X11,X10)))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X12,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X14,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X15,bool)),X16),s(fun(X11,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X10,X11),X12),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19)))))) )),
  inference(superposition,[],[f3094,f3212])).
fof(f19160,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X0,bool)),X6),s(fun(X7,fun(X1,bool)),X8),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(subsumption_resolution,[],[f19134,f213])).
fof(f19134,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X0,bool)),X6),s(fun(X7,fun(X1,bool)),X8),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f3094,f4992])).
fof(f19133,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),X23) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),X24))) | s('type.semanticPrimitives.result'(X20,X21),X24) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21)),X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21))) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21)),X21,X20)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),X23) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X22),sK11(X23,X22,'type.semanticPrimitives.result'(X20,X21)))))) )),
  inference(superposition,[],[f3094,f207])).
fof(f19132,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X15,fun('type.semanticPrimitives.result'(X10,X11),bool)),X16),s(fun(X17,fun(X12,bool)),X18),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rval_1'(s(X15,X19))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13)))) )),
  inference(superposition,[],[f3094,f3215])).
fof(f19131,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1)),X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1)),X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X0,X1),fun(X5,bool)),X6),s(fun(X2,fun(X7,bool)),X8),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rval_1'(s(X5,X9)))))) )),
  inference(superposition,[],[f3094,f4953])).
fof(f19159,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.semanticPrimitives.result'(X64,X65),X66) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X69))) | s('type.semanticPrimitives.result'(X64,X65),X69) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64))))) )),
  inference(forward_demodulation,[],[f19130,f7120])).
fof(f19130,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X64,X65),X68),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X69))) | s('type.semanticPrimitives.result'(X64,X65),X69) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rval_1'(s(X64,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64)))) | s('type.semanticPrimitives.result'(X64,X65),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65))) = s('type.semanticPrimitives.result'(X64,X65),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X65),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X64,X65),X66)),X67,'type.semanticPrimitives.result'(X64,X65)),X65,X64))))) )),
  inference(superposition,[],[f3094,f7120])).
fof(f18720,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X14,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X15,fun('type.semanticPrimitives.result'(X10,X11),bool)),X16),s(fun(X17,fun(X12,bool)),X18),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rval_1'(s(X15,X19))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13)))) )),
  inference(superposition,[],[f3078,f3215])).
fof(f18719,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X0,X1),fun(X5,bool)),X6),s(fun(X2,fun(X7,bool)),X8),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rval_1'(s(X5,X9)))))) )),
  inference(superposition,[],[f3078,f4953])).
fof(f18718,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X67))) | s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK11(X67,X63,X62)))) = s('type.semanticPrimitives.result'(X62,X63),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63))) | s('type.semanticPrimitives.result'(X62,X63),X67) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK10(X67,X63,X62))))) )),
  inference(superposition,[],[f3078,f7120])).
fof(f18734,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X49,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X49,X50),X51))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X49,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X49,X50),X53))) | s('type.semanticPrimitives.result'(X49,X50),X53) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rval_1'(s(X49,sK10(X53,X50,X49)))) | s('type.semanticPrimitives.result'(X49,X50),X51) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK11(X51,X50,X49))))) )),
  inference(subsumption_resolution,[],[f18715,f213])).
fof(f18715,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X49,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X49,X50),X51))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X49,X50),X52),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X49,X50),X53))) | s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rval_1'(s(X49,sK10(X51,X50,X49)))) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK11(X53,X50,X49)))) | s('type.semanticPrimitives.result'(X49,X50),X53) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rval_1'(s(X49,sK10(X53,X50,X49)))) | s('type.semanticPrimitives.result'(X49,X50),X51) = s('type.semanticPrimitives.result'(X49,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK11(X51,X50,X49))))) )),
  inference(superposition,[],[f3078,f207])).
fof(f18733,plain,(
  ( ! [X39,X47,X45,X43,X41,X48,X46,X44,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),X41))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),X43))) | s('type.semanticPrimitives.result'(X39,X40),X43) = s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X43,X40,X39)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X44,fun(X39,bool)),X45),s(fun(X46,fun(X40,bool)),X47),s('type.semanticPrimitives.result'(X44,X46),'const.semanticPrimitives.Rval_1'(s(X44,X48))),s('type.semanticPrimitives.result'(X39,X40),X41)))) )),
  inference(subsumption_resolution,[],[f18714,f213])).
fof(f18714,plain,(
  ( ! [X39,X47,X45,X43,X41,X48,X46,X44,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),X41))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X39,X40),X42),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X39,X40),X43))) | s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X41,X40,X39)))) = s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),sK11(X43,X40,X39)))) | s('type.semanticPrimitives.result'(X39,X40),X43) = s('type.semanticPrimitives.result'(X39,X40),'const.semanticPrimitives.Rval_1'(s(X39,sK10(X43,X40,X39)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X44,fun(X39,bool)),X45),s(fun(X46,fun(X40,bool)),X47),s('type.semanticPrimitives.result'(X44,X46),'const.semanticPrimitives.Rval_1'(s(X44,X48))),s('type.semanticPrimitives.result'(X39,X40),X41)))) )),
  inference(superposition,[],[f3078,f3215])).
fof(f18732,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X31))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X33))) | s('type.semanticPrimitives.result'(X29,X30),X33) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK10(X33,X30,X29)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X34,bool)),X35),s(fun(X30,fun(X36,bool)),X37),s('type.semanticPrimitives.result'(X29,X30),X31),s('type.semanticPrimitives.result'(X34,X36),'const.semanticPrimitives.Rval_1'(s(X34,X38)))))) )),
  inference(subsumption_resolution,[],[f18713,f213])).
fof(f18713,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X31))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X33))) | s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK10(X31,X30,X29)))) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK11(X33,X30,X29)))) | s('type.semanticPrimitives.result'(X29,X30),X33) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK10(X33,X30,X29)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X34,bool)),X35),s(fun(X30,fun(X36,bool)),X37),s('type.semanticPrimitives.result'(X29,X30),X31),s('type.semanticPrimitives.result'(X34,X36),'const.semanticPrimitives.Rval_1'(s(X34,X38)))))) )),
  inference(superposition,[],[f3078,f4953])).
fof(f18711,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),X22))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),X24))) | s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X22,X21,X20)))) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(X24,X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),X24) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X24,X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),X22) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(X22,X21,X20))))) )),
  inference(superposition,[],[f3078,f207])).
fof(f18710,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X12))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X13),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X12,X11,X10)))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(X14,X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(X14,X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X15,bool)),X16),s(fun(X11,fun(X17,bool)),X18),s('type.semanticPrimitives.result'(X10,X11),X12),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X17),X19)))))) )),
  inference(superposition,[],[f3078,f3212])).
fof(f18709,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X4,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X4,X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X0,bool)),X6),s(fun(X7,fun(X1,bool)),X8),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f3078,f4992])).
fof(f18708,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),X23) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X20,X21),X24))) | s('type.semanticPrimitives.result'(X20,X21),X24) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X21),sK11(sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21)),X21,X20)))) | s('type.semanticPrimitives.result'(X20,X21),sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21))) = s('type.semanticPrimitives.result'(X20,X21),'const.semanticPrimitives.Rval_1'(s(X20,sK10(sK10(X23,X22,'type.semanticPrimitives.result'(X20,X21)),X21,X20)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),X23) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X20,X21),X22),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X22),sK11(X23,X22,'type.semanticPrimitives.result'(X20,X21)))))) )),
  inference(superposition,[],[f3078,f207])).
fof(f18707,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X10,X11),X14))) | s('type.semanticPrimitives.result'(X10,X11),X14) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),sK11(sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s('type.semanticPrimitives.result'(X10,X11),sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11))) = s('type.semanticPrimitives.result'(X10,X11),'const.semanticPrimitives.Rval_1'(s(X10,sK10(sK10(X13,X12,'type.semanticPrimitives.result'(X10,X11)),X11,X10)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X15,fun('type.semanticPrimitives.result'(X10,X11),bool)),X16),s(fun(X17,fun(X12,bool)),X18),s('type.semanticPrimitives.result'(X15,X17),'const.semanticPrimitives.Rval_1'(s(X15,X19))),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X10,X11),X12),X13)))) )),
  inference(superposition,[],[f3078,f3215])).
fof(f18706,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X4))) | s('type.semanticPrimitives.result'(X0,X1),X4) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1)),X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(sK10(X3,X2,'type.semanticPrimitives.result'(X0,X1)),X1,X0)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun('type.semanticPrimitives.result'(X0,X1),fun(X5,bool)),X6),s(fun(X2,fun(X7,bool)),X8),s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),s('type.semanticPrimitives.result'(X5,X7),'const.semanticPrimitives.Rval_1'(s(X5,X9)))))) )),
  inference(superposition,[],[f3078,f4953])).
fof(f18731,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'(X62,X63),X64) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X67))) | s('type.semanticPrimitives.result'(X62,X63),X67) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62))))) )),
  inference(forward_demodulation,[],[f18705,f7120])).
fof(f18705,plain,(
  ( ! [X66,X64,X62,X67,X65,X63] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X62,X63),X66),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X67))) | s('type.semanticPrimitives.result'(X62,X63),X67) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X63),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62)))) | s('type.semanticPrimitives.result'(X62,X63),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63))) = s('type.semanticPrimitives.result'(X62,X63),'const.semanticPrimitives.Rval_1'(s(X62,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X62,X63),X64)),X65,'type.semanticPrimitives.result'(X62,X63)),X63,X62))))) )),
  inference(superposition,[],[f3078,f7120])).
fof(f18409,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X4,bool)),X5),s(fun(X6,fun(X7,bool)),X8),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X9))),s('type.semanticPrimitives.result'(X4,X7),'const.semanticPrimitives.Rval_1'(s(X4,X10))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5050,f150])).
fof(f18021,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X2) = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X4,bool)),X5),s(fun(X6,fun(X7,bool)),X8),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rval_1'(s(X3,X9))),s('type.semanticPrimitives.result'(X4,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X10))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3261,f150])).
fof(f17873,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X10,fun(X11,bool)),X12),s(fun(X13,fun(X14,bool)),X15),s('type.semanticPrimitives.result'(X10,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X16))),s('type.semanticPrimitives.result'(X11,X14),'const.semanticPrimitives.Rval_1'(s(X11,X17)))),X9,bool)) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f17865,f147])).
fof(f17865,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X10,fun(X11,bool)),X12),s(fun(X13,fun(X14,bool)),X15),s('type.semanticPrimitives.result'(X10,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X16))),s('type.semanticPrimitives.result'(X11,X14),'const.semanticPrimitives.Rval_1'(s(X11,X17)))),X9,bool)) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f5120,f273])).
fof(f17858,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X4),s(fun(X5,fun(X6,bool)),X7),s('type.semanticPrimitives.result'(X2,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X8))),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rval_1'(s(X3,X9)))),X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f5120,f150])).
fof(f17857,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X4),s(fun(X5,fun(X6,bool)),X7),s('type.semanticPrimitives.result'(X2,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X8))),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rval_1'(s(X3,X9)))),sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool))) )),
  inference(superposition,[],[f5120,f7120])).
fof(f17622,plain,(
  ( ! [X420,X422,X428,X424,X426,X421,X423,X429,X425,X427] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X420,X421),X423),X424) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X420,X421),X423),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X420,X421),X422))) | s('type.semanticPrimitives.result'(X420,X421),sK10(X424,X423,'type.semanticPrimitives.result'(X420,X421))) = s('type.semanticPrimitives.result'(X420,X421),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X421),sK11(X422,X421,X420)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X420,X421),X423),X424) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X420,X421),X423),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X423),sK11(X424,X423,'type.semanticPrimitives.result'(X420,X421))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X425,fun(X420,bool)),X426),s(fun(X427,fun(X421,bool)),X428),s('type.semanticPrimitives.result'(X425,X427),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X427),X429))),s('type.semanticPrimitives.result'(X420,X421),X422)))) )),
  inference(superposition,[],[f3085,f4992])).
fof(f17612,plain,(
  ( ! [X313,X308,X310,X304,X306,X312,X309,X311,X305,X307] : (s('type.semanticPrimitives.result'(X304,X305),X306) != s('type.semanticPrimitives.result'(X304,X305),X307) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X304,X305),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X304,X305),X307))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X304,X305),X308),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X304,X305),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X305),sK11(X306,X305,X304)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X309,fun(X304,bool)),X310),s(fun(X311,fun(X305,bool)),X312),s('type.semanticPrimitives.result'(X309,X311),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X311),X313))),s('type.semanticPrimitives.result'(X304,X305),X306)))) )),
  inference(superposition,[],[f210,f4992])).
fof(f17610,plain,(
  ( ! [X292,X288,X290,X285,X287,X293,X289,X291,X284,X286] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X284,X285),X287),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X284,X285),X286))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X284,X285),X287),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X284,X285),X288))) | s('type.semanticPrimitives.result'(X284,X285),X288) = s('type.semanticPrimitives.result'(X284,X285),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X285),sK11(X286,X285,X284)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X289,fun(X284,bool)),X290),s(fun(X291,fun(X285,bool)),X292),s('type.semanticPrimitives.result'(X289,X291),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X291),X293))),s('type.semanticPrimitives.result'(X284,X285),X286)))) )),
  inference(superposition,[],[f209,f4992])).
fof(f17661,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X197,X195,X193] : (s('type.semanticPrimitives.result'(X190,X191),X192) != s('type.semanticPrimitives.result'(X190,X191),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),X193))) | s('type.semanticPrimitives.error_result'(X191),X193) = s('type.semanticPrimitives.error_result'(X191),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),sK11(X192,X191,X190))),X191,X190)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X194,fun(X190,bool)),X195),s(fun(X196,fun(X191,bool)),X197),s('type.semanticPrimitives.result'(X194,X196),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X196),X198))),s('type.semanticPrimitives.result'(X190,X191),X192)))) )),
  inference(subsumption_resolution,[],[f17601,f213])).
fof(f17601,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X197,X195,X193] : (s('type.semanticPrimitives.result'(X190,X191),X192) != s('type.semanticPrimitives.result'(X190,X191),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),X193))) | s('type.semanticPrimitives.error_result'(X191),X193) = s('type.semanticPrimitives.error_result'(X191),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),sK11(X192,X191,X190))),X191,X190)) | s('type.semanticPrimitives.result'(X190,X191),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),sK11(X192,X191,X190)))) = s('type.semanticPrimitives.result'(X190,X191),'const.semanticPrimitives.Rval_1'(s(X190,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X191),sK11(X192,X191,X190))),X191,X190)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X194,fun(X190,bool)),X195),s(fun(X196,fun(X191,bool)),X197),s('type.semanticPrimitives.result'(X194,X196),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X196),X198))),s('type.semanticPrimitives.result'(X190,X191),X192)))) )),
  inference(superposition,[],[f3073,f4992])).
fof(f17598,plain,(
  ( ! [X167,X165,X163,X175,X173,X171,X169,X166,X164,X174,X172,X170,X168] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X163,fun(X166,bool)),X167),s(fun(X164,fun(X168,bool)),X169),s('type.semanticPrimitives.result'(X163,X164),X165),s('type.semanticPrimitives.result'(X166,X168),'const.semanticPrimitives.Rval_1'(s(X166,X170))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X171,fun(X163,bool)),X172),s(fun(X173,fun(X164,bool)),X174),s('type.semanticPrimitives.result'(X171,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),X175))),s('type.semanticPrimitives.result'(X163,X164),X165)))) )),
  inference(superposition,[],[f5104,f4992])).
fof(f17597,plain,(
  ( ! [X158,X156,X154,X152,X161,X151,X159,X157,X155,X153,X162,X160] : (s(bool,X154) = s(bool,'const.evalProps.result_rel_4'(s(fun(X151,fun(bool,bool)),X155),s(fun(X152,fun(X156,bool)),X157),s('type.semanticPrimitives.result'(X151,X152),X153),s('type.semanticPrimitives.result'(bool,X156),'const.semanticPrimitives.Rval_1'(s(bool,X154))))) | s(bool,'T_0') = s(bool,X154) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X158,fun(X151,bool)),X159),s(fun(X160,fun(X152,bool)),X161),s('type.semanticPrimitives.result'(X158,X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),X162))),s('type.semanticPrimitives.result'(X151,X152),X153)))) )),
  inference(superposition,[],[f4984,f4992])).
fof(f17596,plain,(
  ( ! [X146,X144,X142,X140,X138,X149,X147,X145,X143,X141,X139,X150,X148] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X141,fun(X138,bool)),X142),s(fun(X143,fun(X139,bool)),X144),s('type.semanticPrimitives.result'(X141,X143),'const.semanticPrimitives.Rval_1'(s(X141,X145))),s('type.semanticPrimitives.result'(X138,X139),X140))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X146,fun(X138,bool)),X147),s(fun(X148,fun(X139,bool)),X149),s('type.semanticPrimitives.result'(X146,X148),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X148),X150))),s('type.semanticPrimitives.result'(X138,X139),X140)))) )),
  inference(superposition,[],[f3299,f4992])).
fof(f17595,plain,(
  ( ! [X127,X125,X134,X132,X130,X128,X136,X126,X135,X133,X131,X129,X137] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X128,fun(X125,bool)),X129),s(fun(X130,fun(X126,bool)),X131),s('type.semanticPrimitives.result'(X128,X130),X132),s('type.semanticPrimitives.result'(X125,X126),X127))) | s('type.semanticPrimitives.result'(X128,X130),X132) = s('type.semanticPrimitives.result'(X128,X130),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X130),sK11(X132,X130,X128)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X133,fun(X125,bool)),X134),s(fun(X135,fun(X126,bool)),X136),s('type.semanticPrimitives.result'(X133,X135),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X135),X137))),s('type.semanticPrimitives.result'(X125,X126),X127)))) )),
  inference(superposition,[],[f3212,f4992])).
fof(f17594,plain,(
  ( ! [X123,X121,X118,X116,X114,X124,X122,X120,X119,X117,X115,X113] : (s(bool,X116) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X113,bool)),X117),s(fun(X118,fun(X114,bool)),X119),s('type.semanticPrimitives.result'(bool,X118),'const.semanticPrimitives.Rval_1'(s(bool,X116))),s('type.semanticPrimitives.result'(X113,X114),X115))) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X120,fun(X113,bool)),X121),s(fun(X122,fun(X114,bool)),X123),s('type.semanticPrimitives.result'(X120,X122),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X122),X124))),s('type.semanticPrimitives.result'(X113,X114),X115)))) )),
  inference(superposition,[],[f3205,f4992])).
fof(f17593,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X104] : (s('type.semanticPrimitives.result'(X104,X105),X106) != s('type.semanticPrimitives.result'(X104,X105),X107) | s('type.semanticPrimitives.result'(X104,X105),X107) = s('type.semanticPrimitives.result'(X104,X105),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X105),sK11(X107,X105,X104)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X108,fun(X104,bool)),X109),s(fun(X110,fun(X105,bool)),X111),s('type.semanticPrimitives.result'(X108,X110),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X110),X112))),s('type.semanticPrimitives.result'(X104,X105),X106)))) )),
  inference(superposition,[],[f3087,f4992])).
fof(f17592,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.semanticPrimitives.result'(X95,X96),X97) != s('type.semanticPrimitives.result'(X95,X96),X98) | s('type.semanticPrimitives.error_result'(X96),sK11(X97,X96,X95)) = s('type.semanticPrimitives.error_result'(X96),sK11(X98,X96,X95)) | s('type.semanticPrimitives.result'(X95,X96),X98) = s('type.semanticPrimitives.result'(X95,X96),'const.semanticPrimitives.Rval_1'(s(X95,sK10(X98,X96,X95)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X99,fun(X95,bool)),X100),s(fun(X101,fun(X96,bool)),X102),s('type.semanticPrimitives.result'(X99,X101),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X101),X103))),s('type.semanticPrimitives.result'(X95,X96),X97)))) )),
  inference(superposition,[],[f3073,f4992])).
fof(f17591,plain,(
  ( ! [X94,X92,X90,X88,X87,X85,X93,X91,X89,X86] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X85,X86),X88),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X85,X86),X87))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X85,X86),X88),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X85,X86),'const.semanticPrimitives.Rval_1'(s(X85,X89))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X90,fun(X85,bool)),X91),s(fun(X92,fun(X86,bool)),X93),s('type.semanticPrimitives.result'(X90,X92),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X92),X94))),s('type.semanticPrimitives.result'(X85,X86),X87)))) )),
  inference(superposition,[],[f394,f4992])).
fof(f17586,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25,X32] : (s('type.semanticPrimitives.result'(X24,X25),X26) != s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rval_1'(s(X24,X27))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X28,fun(X24,bool)),X29),s(fun(X30,fun(X25,bool)),X31),s('type.semanticPrimitives.result'(X28,X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),X32))),s('type.semanticPrimitives.result'(X24,X25),X26)))) )),
  inference(superposition,[],[f213,f4992])).
fof(f17584,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.semanticPrimitives.result'(X6,X7),X8) != s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X9))) | s('type.semanticPrimitives.error_result'(X7),X9) = s('type.semanticPrimitives.error_result'(X7),sK11(X8,X7,X6)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X10,fun(X6,bool)),X11),s(fun(X12,fun(X7,bool)),X13),s('type.semanticPrimitives.result'(X10,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X14))),s('type.semanticPrimitives.result'(X6,X7),X8)))) )),
  inference(superposition,[],[f211,f4992])).
fof(f17576,plain,(
  ( ! [X720,X722,X716,X718,X714,X721,X717,X719,X715] : (~p(s(bool,happ(s(fun(bool,bool),X722),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X722),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X714,fun(X715,bool)),X716),s(fun(X717,fun(X718,bool)),X719),s('type.semanticPrimitives.result'(X714,X717),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X717),X720))),s('type.semanticPrimitives.result'(X715,X718),X721)),X722,bool)))) | s('type.semanticPrimitives.result'(X715,X718),X721) = s('type.semanticPrimitives.result'(X715,X718),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X718),sK11(X721,X718,X715))))) )),
  inference(superposition,[],[f471,f4992])).
fof(f17566,plain,(
  ( ! [X606,X600,X602,X598,X605,X601,X603,X597,X599,X604] : (s('type.semanticPrimitives.result'(bool,X605),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X605),'const.semanticPrimitives.Rval_1'(s(bool,X606))) | s(bool,X606) = s(bool,'const.evalProps.result_rel_4'(s(fun(X597,fun(X598,bool)),X599),s(fun(X600,fun(X601,bool)),X602),s('type.semanticPrimitives.result'(X597,X600),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X600),X603))),s('type.semanticPrimitives.result'(X598,X601),X604))) | s('type.semanticPrimitives.result'(X598,X601),X604) = s('type.semanticPrimitives.result'(X598,X601),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X601),sK11(X604,X601,X598))))) )),
  inference(superposition,[],[f209,f4992])).
fof(f17635,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55,X63] : (s('type.semanticPrimitives.result'(X56,X59),X62) = s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK11(X62,X59,X56)))) | s(bool,X63) = s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X61))),s('type.semanticPrimitives.result'(X56,X59),X62))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(subsumption_resolution,[],[f17495,f256])).
fof(f17495,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55,X63] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(X56,X59),X62) = s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),sK11(X62,X59,X56)))) | s(bool,X63) = s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X61))),s('type.semanticPrimitives.result'(X56,X59),X62))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f4992,f273])).
fof(f17633,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X89,X96] : (s('type.semanticPrimitives.result'(X89,X90),X91) = s('type.semanticPrimitives.result'(X89,X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X89,X90),X91)),X92,'type.semanticPrimitives.result'(X89,X90)),X90,X89)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X93,fun(X89,bool)),X94),s(fun(X95,fun(X90,bool)),X96),s('type.semanticPrimitives.result'(X93,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),X97))),s('type.semanticPrimitives.result'(X89,X90),X91)))) )),
  inference(forward_demodulation,[],[f17491,f7120])).
fof(f17491,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X89,X96] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X93,fun(X89,bool)),X94),s(fun(X95,fun(X90,bool)),X96),s('type.semanticPrimitives.result'(X93,X95),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X95),X97))),s('type.semanticPrimitives.result'(X89,X90),X91))) | s('type.semanticPrimitives.result'(X89,X90),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X89,X90),X91)),X92,'type.semanticPrimitives.result'(X89,X90))) = s('type.semanticPrimitives.result'(X89,X90),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X89,X90),X91)),X92,'type.semanticPrimitives.result'(X89,X90)),X90,X89))))) )),
  inference(superposition,[],[f4992,f7120])).
fof(f17481,plain,(
  ( ! [X39,X37,X35,X38,X36,X34,X40] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X36,bool)),X37),s(fun(X34,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(bool,X34),X35),s('type.semanticPrimitives.result'(X36,X38),X40))) | s('type.semanticPrimitives.result'(X36,X38),X40) = s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),sK11(X40,X38,X36)))) | s('type.semanticPrimitives.result'(bool,X34),X35) = s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X35,X34,bool))) )),
  inference(superposition,[],[f4992,f3058])).
fof(f17479,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X16,bool)),X17),s(fun(X14,fun(X18,bool)),X19),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X16,X18),X20))) | s('type.semanticPrimitives.result'(X16,X18),X20) = s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK11(X20,X18,X16)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X21,bool)),X22),s(fun(X14,fun(X23,bool)),X24),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),X25)))))) )),
  inference(superposition,[],[f4992,f3212])).
fof(f17478,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),X7))) | s('type.semanticPrimitives.result'(X3,X5),X7) = s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X3)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f4992,f4992])).
fof(f17116,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X10,fun(X11,bool)),X12),s(fun(X13,fun(X14,bool)),X15),s('type.semanticPrimitives.result'(X10,X13),'const.semanticPrimitives.Rval_1'(s(X10,X16))),s('type.semanticPrimitives.result'(X11,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),X17)))),X9,bool)) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f17108,f147])).
fof(f17108,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X10,fun(X11,bool)),X12),s(fun(X13,fun(X14,bool)),X15),s('type.semanticPrimitives.result'(X10,X13),'const.semanticPrimitives.Rval_1'(s(X10,X16))),s('type.semanticPrimitives.result'(X11,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),X17)))),X9,bool)) | s(bool,X18) = s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f3313,f273])).
fof(f17101,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X4),s(fun(X5,fun(X6,bool)),X7),s('type.semanticPrimitives.result'(X2,X5),'const.semanticPrimitives.Rval_1'(s(X2,X8))),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X9)))),X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3313,f150])).
fof(f17100,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X4),s(fun(X5,fun(X6,bool)),X7),s('type.semanticPrimitives.result'(X2,X5),'const.semanticPrimitives.Rval_1'(s(X2,X8))),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),X9)))),sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool))) )),
  inference(superposition,[],[f3313,f7120])).
fof(f16787,plain,(
  ( ! [X391,X397,X399,X393,X395,X396,X398,X392,X394,X400] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),X395) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X391,X392),X393))) | s('type.semanticPrimitives.result'(X391,X392),sK10(X395,X394,'type.semanticPrimitives.result'(X391,X392))) = s('type.semanticPrimitives.result'(X391,X392),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X392),sK11(X393,X392,X391)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),X395) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X391,X392),X394),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X394),sK11(X395,X394,'type.semanticPrimitives.result'(X391,X392))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X391,fun(X396,bool)),X397),s(fun(X392,fun(X398,bool)),X399),s('type.semanticPrimitives.result'(X391,X392),X393),s('type.semanticPrimitives.result'(X396,X398),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X398),X400)))))) )),
  inference(superposition,[],[f3085,f3212])).
fof(f16777,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X283,X276,X278,X284] : (s('type.semanticPrimitives.result'(X275,X276),X277) != s('type.semanticPrimitives.result'(X275,X276),X278) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X275,X276),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X275,X276),X278))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X275,X276),X279),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X275,X276),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X276),sK11(X277,X276,X275)))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X275,fun(X280,bool)),X281),s(fun(X276,fun(X282,bool)),X283),s('type.semanticPrimitives.result'(X275,X276),X277),s('type.semanticPrimitives.result'(X280,X282),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X282),X284)))))) )),
  inference(superposition,[],[f210,f3212])).
fof(f16775,plain,(
  ( ! [X255,X261,X257,X259,X263,X260,X262,X256,X258,X264] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X255,X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X255,X256),X257))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X255,X256),X258),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X255,X256),X259))) | s('type.semanticPrimitives.result'(X255,X256),X259) = s('type.semanticPrimitives.result'(X255,X256),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X256),sK11(X257,X256,X255)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X255,fun(X260,bool)),X261),s(fun(X256,fun(X262,bool)),X263),s('type.semanticPrimitives.result'(X255,X256),X257),s('type.semanticPrimitives.result'(X260,X262),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X262),X264)))))) )),
  inference(superposition,[],[f209,f3212])).
fof(f16825,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X174,X181,X179] : (s('type.semanticPrimitives.result'(X174,X175),X176) != s('type.semanticPrimitives.result'(X174,X175),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),X177))) | s('type.semanticPrimitives.error_result'(X175),X177) = s('type.semanticPrimitives.error_result'(X175),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),sK11(X176,X175,X174))),X175,X174)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X174,fun(X178,bool)),X179),s(fun(X175,fun(X180,bool)),X181),s('type.semanticPrimitives.result'(X174,X175),X176),s('type.semanticPrimitives.result'(X178,X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),X182)))))) )),
  inference(subsumption_resolution,[],[f16767,f213])).
fof(f16767,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X174,X181,X179] : (s('type.semanticPrimitives.result'(X174,X175),X176) != s('type.semanticPrimitives.result'(X174,X175),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),X177))) | s('type.semanticPrimitives.error_result'(X175),X177) = s('type.semanticPrimitives.error_result'(X175),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),sK11(X176,X175,X174))),X175,X174)) | s('type.semanticPrimitives.result'(X174,X175),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),sK11(X176,X175,X174)))) = s('type.semanticPrimitives.result'(X174,X175),'const.semanticPrimitives.Rval_1'(s(X174,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X175),sK11(X176,X175,X174))),X175,X174)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X174,fun(X178,bool)),X179),s(fun(X175,fun(X180,bool)),X181),s('type.semanticPrimitives.result'(X174,X175),X176),s('type.semanticPrimitives.result'(X178,X180),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X180),X182)))))) )),
  inference(superposition,[],[f3073,f3212])).
fof(f16764,plain,(
  ( ! [X158,X156,X154,X152,X151,X149,X147,X159,X157,X155,X153,X150,X148] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X147,fun(X150,bool)),X151),s(fun(X148,fun(X152,bool)),X153),s('type.semanticPrimitives.result'(X147,X148),X149),s('type.semanticPrimitives.result'(X150,X152),'const.semanticPrimitives.Rval_1'(s(X150,X154))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X147,fun(X155,bool)),X156),s(fun(X148,fun(X157,bool)),X158),s('type.semanticPrimitives.result'(X147,X148),X149),s('type.semanticPrimitives.result'(X155,X157),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X157),X159)))))) )),
  inference(superposition,[],[f5104,f3212])).
fof(f16763,plain,(
  ( ! [X146,X144,X142,X140,X138,X136,X145,X135,X143,X141,X139,X137] : (s(bool,X138) = s(bool,'const.evalProps.result_rel_4'(s(fun(X135,fun(bool,bool)),X139),s(fun(X136,fun(X140,bool)),X141),s('type.semanticPrimitives.result'(X135,X136),X137),s('type.semanticPrimitives.result'(bool,X140),'const.semanticPrimitives.Rval_1'(s(bool,X138))))) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X135,fun(X142,bool)),X143),s(fun(X136,fun(X144,bool)),X145),s('type.semanticPrimitives.result'(X135,X136),X137),s('type.semanticPrimitives.result'(X142,X144),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X144),X146)))))) )),
  inference(superposition,[],[f4984,f3212])).
fof(f16762,plain,(
  ( ! [X127,X125,X123,X134,X132,X130,X128,X126,X124,X122,X133,X131,X129] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X125,fun(X122,bool)),X126),s(fun(X127,fun(X123,bool)),X128),s('type.semanticPrimitives.result'(X125,X127),'const.semanticPrimitives.Rval_1'(s(X125,X129))),s('type.semanticPrimitives.result'(X122,X123),X124))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X122,fun(X130,bool)),X131),s(fun(X123,fun(X132,bool)),X133),s('type.semanticPrimitives.result'(X122,X123),X124),s('type.semanticPrimitives.result'(X130,X132),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X132),X134)))))) )),
  inference(superposition,[],[f3299,f3212])).
fof(f16761,plain,(
  ( ! [X121,X111,X118,X116,X114,X112,X120,X110,X119,X117,X115,X113] : (s(bool,X113) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X110,bool)),X114),s(fun(X115,fun(X111,bool)),X116),s('type.semanticPrimitives.result'(bool,X115),'const.semanticPrimitives.Rval_1'(s(bool,X113))),s('type.semanticPrimitives.result'(X110,X111),X112))) | s(bool,'T_0') = s(bool,X113) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X110,fun(X117,bool)),X118),s(fun(X111,fun(X119,bool)),X120),s('type.semanticPrimitives.result'(X110,X111),X112),s('type.semanticPrimitives.result'(X117,X119),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X119),X121)))))) )),
  inference(superposition,[],[f3205,f3212])).
fof(f16760,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X108,X106,X104] : (s('type.semanticPrimitives.result'(X101,X102),X103) != s('type.semanticPrimitives.result'(X101,X102),X104) | s('type.semanticPrimitives.result'(X101,X102),X104) = s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X102),sK11(X104,X102,X101)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X101,fun(X105,bool)),X106),s(fun(X102,fun(X107,bool)),X108),s('type.semanticPrimitives.result'(X101,X102),X103),s('type.semanticPrimitives.result'(X105,X107),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X107),X109)))))) )),
  inference(superposition,[],[f3087,f3212])).
fof(f16759,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X100,X98,X96] : (s('type.semanticPrimitives.result'(X92,X93),X94) != s('type.semanticPrimitives.result'(X92,X93),X95) | s('type.semanticPrimitives.error_result'(X93),sK11(X94,X93,X92)) = s('type.semanticPrimitives.error_result'(X93),sK11(X95,X93,X92)) | s('type.semanticPrimitives.result'(X92,X93),X95) = s('type.semanticPrimitives.result'(X92,X93),'const.semanticPrimitives.Rval_1'(s(X92,sK10(X95,X93,X92)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X92,fun(X96,bool)),X97),s(fun(X93,fun(X98,bool)),X99),s('type.semanticPrimitives.result'(X92,X93),X94),s('type.semanticPrimitives.result'(X96,X98),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X98),X100)))))) )),
  inference(superposition,[],[f3073,f3212])).
fof(f16758,plain,(
  ( ! [X90,X88,X87,X85,X83,X91,X89,X86,X84,X82] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X82,X83),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X82,X83),X84))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X82,X83),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X82,X83),'const.semanticPrimitives.Rval_1'(s(X82,X86))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X82,fun(X87,bool)),X88),s(fun(X83,fun(X89,bool)),X90),s('type.semanticPrimitives.result'(X82,X83),X84),s('type.semanticPrimitives.result'(X87,X89),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X89),X91)))))) )),
  inference(superposition,[],[f394,f3212])).
fof(f16753,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22] : (s('type.semanticPrimitives.result'(X21,X22),X23) != s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rval_1'(s(X21,X24))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X25,bool)),X26),s(fun(X22,fun(X27,bool)),X28),s('type.semanticPrimitives.result'(X21,X22),X23),s('type.semanticPrimitives.result'(X25,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),X29)))))) )),
  inference(superposition,[],[f213,f3212])).
fof(f16751,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X11,X9] : (s('type.semanticPrimitives.result'(X3,X4),X5) != s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))) | s('type.semanticPrimitives.error_result'(X4),X6) = s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,X3)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X7,bool)),X8),s(fun(X4,fun(X9,bool)),X10),s('type.semanticPrimitives.result'(X3,X4),X5),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X11)))))) )),
  inference(superposition,[],[f211,f3212])).
fof(f16743,plain,(
  ( ! [X697,X693,X695,X691,X696,X698,X692,X694,X690] : (~p(s(bool,happ(s(fun(bool,bool),X698),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X698),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X690,fun(X691,bool)),X692),s(fun(X693,fun(X694,bool)),X695),s('type.semanticPrimitives.result'(X690,X693),X696),s('type.semanticPrimitives.result'(X691,X694),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X694),X697)))),X698,bool)))) | s('type.semanticPrimitives.result'(X690,X693),X696) = s('type.semanticPrimitives.result'(X690,X693),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X693),sK11(X696,X693,X690))))) )),
  inference(superposition,[],[f471,f3212])).
fof(f16733,plain,(
  ( ! [X573,X575,X580,X582,X576,X578,X574,X581,X577,X579] : (s('type.semanticPrimitives.result'(bool,X581),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X581),'const.semanticPrimitives.Rval_1'(s(bool,X582))) | s(bool,X582) = s(bool,'const.evalProps.result_rel_4'(s(fun(X573,fun(X574,bool)),X575),s(fun(X576,fun(X577,bool)),X578),s('type.semanticPrimitives.result'(X573,X576),X579),s('type.semanticPrimitives.result'(X574,X577),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X577),X580))))) | s('type.semanticPrimitives.result'(X573,X576),X579) = s('type.semanticPrimitives.result'(X573,X576),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X576),sK11(X579,X576,X573))))) )),
  inference(superposition,[],[f209,f3212])).
fof(f16799,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s('type.semanticPrimitives.result'(X47,X50),X53) = s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK11(X53,X50,X47)))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X47,fun(X48,bool)),X49),s(fun(X50,fun(X51,bool)),X52),s('type.semanticPrimitives.result'(X47,X50),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X51),X54))))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f16665,f256])).
fof(f16665,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(X47,X50),X53) = s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X50),sK11(X53,X50,X47)))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X47,fun(X48,bool)),X49),s(fun(X50,fun(X51,bool)),X52),s('type.semanticPrimitives.result'(X47,X50),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X51),X54))))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f3212,f273])).
fof(f16662,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X23,fun(bool,bool)),X24),s(fun(X25,fun(X21,bool)),X26),s('type.semanticPrimitives.result'(X23,X25),X27),s('type.semanticPrimitives.result'(bool,X21),X22))) | s('type.semanticPrimitives.result'(X23,X25),X27) = s('type.semanticPrimitives.result'(X23,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),sK11(X27,X25,X23)))) | s('type.semanticPrimitives.result'(bool,X21),X22) = s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X22,X21,bool))) )),
  inference(superposition,[],[f3212,f3058])).
fof(f16660,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),X7),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X3,X5),X7) = s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),sK11(X7,X5,X3)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X8,bool)),X9),s(fun(X1,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12)))))) )),
  inference(superposition,[],[f3212,f3212])).
fof(f16798,plain,(
  ( ! [X80,X78,X76,X83,X81,X79,X77,X84,X82] : (s('type.semanticPrimitives.result'(X76,X77),X78) = s('type.semanticPrimitives.result'(X76,X77),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X77),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X76,X77),X78)),X79,'type.semanticPrimitives.result'(X76,X77)),X77,X76)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X76,fun(X80,bool)),X81),s(fun(X77,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(X76,X77),X78),s('type.semanticPrimitives.result'(X80,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),X84)))))) )),
  inference(forward_demodulation,[],[f16657,f7120])).
fof(f16657,plain,(
  ( ! [X80,X78,X76,X83,X81,X79,X77,X84,X82] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X76,fun(X80,bool)),X81),s(fun(X77,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(X76,X77),X78),s('type.semanticPrimitives.result'(X80,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),X84))))) | s('type.semanticPrimitives.result'(X76,X77),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X76,X77),X78)),X79,'type.semanticPrimitives.result'(X76,X77))) = s('type.semanticPrimitives.result'(X76,X77),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X77),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X76,X77),X78)),X79,'type.semanticPrimitives.result'(X76,X77)),X77,X76))))) )),
  inference(superposition,[],[f3212,f7120])).
fof(f14662,plain,(
  ( ! [X420,X422,X418,X424,X426,X421,X423,X417,X419,X425] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X420),X421) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X420),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X417,X418),X419))) | s('type.semanticPrimitives.result'(X417,X418),sK10(X421,X420,'type.semanticPrimitives.result'(X417,X418))) = s('type.semanticPrimitives.result'(X417,X418),'const.semanticPrimitives.Rval_1'(s(X417,sK10(X419,X418,X417)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X420),X421) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X417,X418),X420),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X420),sK11(X421,X420,'type.semanticPrimitives.result'(X417,X418))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X417,fun(X422,bool)),X423),s(fun(X418,fun(X424,bool)),X425),s('type.semanticPrimitives.result'(X417,X418),X419),s('type.semanticPrimitives.result'(X422,X424),'const.semanticPrimitives.Rval_1'(s(X422,X426)))))) )),
  inference(superposition,[],[f3085,f4953])).
fof(f14660,plain,(
  ( ! [X399,X405,X401,X403,X398,X404,X406,X400,X402] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X398,X399),bool),X401),s('type.semanticPrimitives.result'(X398,X399),X400)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X398,X399),bool),X401),s('type.semanticPrimitives.result'(X398,X399),sK9('const.semanticPrimitives.Rval_1'(s(X398,sK10(X400,X399,X398))),X401,'type.semanticPrimitives.result'(X398,X399))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X398,fun(X402,bool)),X403),s(fun(X399,fun(X404,bool)),X405),s('type.semanticPrimitives.result'(X398,X399),X400),s('type.semanticPrimitives.result'(X402,X404),'const.semanticPrimitives.Rval_1'(s(X402,X406)))))) )),
  inference(superposition,[],[f471,f4953])).
fof(f14650,plain,(
  ( ! [X282,X288,X290,X285,X287,X281,X283,X289,X284,X286] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X281,X282),X284),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X281,X282),X283))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X281,X282),X284),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X281,X282),X285))) | s('type.semanticPrimitives.result'(X281,X282),X285) = s('type.semanticPrimitives.result'(X281,X282),'const.semanticPrimitives.Rval_1'(s(X281,sK10(X283,X282,X281)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X281,fun(X286,bool)),X287),s(fun(X282,fun(X288,bool)),X289),s('type.semanticPrimitives.result'(X281,X282),X283),s('type.semanticPrimitives.result'(X286,X288),'const.semanticPrimitives.Rval_1'(s(X286,X290)))))) )),
  inference(superposition,[],[f209,f4953])).
fof(f14719,plain,(
  ( ! [X243,X241,X239,X237,X235,X242,X240,X238,X236] : (s('type.semanticPrimitives.result'(X235,X236),X237) != s('type.semanticPrimitives.result'(X235,X236),'const.semanticPrimitives.Rval_1'(s(X235,X238))) | s(X235,X238) = s(X235,sK10('const.semanticPrimitives.Rval_1'(s(X235,sK10(X237,X236,X235))),X236,X235)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X235,fun(X239,bool)),X240),s(fun(X236,fun(X241,bool)),X242),s('type.semanticPrimitives.result'(X235,X236),X237),s('type.semanticPrimitives.result'(X239,X241),'const.semanticPrimitives.Rval_1'(s(X239,X243)))))) )),
  inference(subsumption_resolution,[],[f14645,f213])).
fof(f14645,plain,(
  ( ! [X243,X241,X239,X237,X235,X242,X240,X238,X236] : (s('type.semanticPrimitives.result'(X235,X236),X237) != s('type.semanticPrimitives.result'(X235,X236),'const.semanticPrimitives.Rval_1'(s(X235,X238))) | s(X235,X238) = s(X235,sK10('const.semanticPrimitives.Rval_1'(s(X235,sK10(X237,X236,X235))),X236,X235)) | s('type.semanticPrimitives.result'(X235,X236),'const.semanticPrimitives.Rval_1'(s(X235,sK10(X237,X236,X235)))) = s('type.semanticPrimitives.result'(X235,X236),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X236),sK11('const.semanticPrimitives.Rval_1'(s(X235,sK10(X237,X236,X235))),X236,X235)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X235,fun(X239,bool)),X240),s(fun(X236,fun(X241,bool)),X242),s('type.semanticPrimitives.result'(X235,X236),X237),s('type.semanticPrimitives.result'(X239,X241),'const.semanticPrimitives.Rval_1'(s(X239,X243)))))) )),
  inference(superposition,[],[f3085,f4953])).
fof(f14641,plain,(
  ( ! [X206,X204,X202,X200,X199,X205,X203,X201] : (s('type.semanticPrimitives.result'(bool,X199),X200) != s('type.semanticPrimitives.result'(bool,X199),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X201) = s(bool,sK10(X200,X199,bool)) | s(bool,'T_0') = s(bool,X201) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X202,bool)),X203),s(fun(X199,fun(X204,bool)),X205),s('type.semanticPrimitives.result'(bool,X199),X200),s('type.semanticPrimitives.result'(X202,X204),'const.semanticPrimitives.Rval_1'(s(X202,X206)))))) )),
  inference(superposition,[],[f397,f4953])).
fof(f14640,plain,(
  ( ! [X191,X198,X196,X194,X192,X197,X195,X193] : (s('type.semanticPrimitives.result'(bool,X191),X192) != s('type.semanticPrimitives.result'(bool,X191),'const.semanticPrimitives.Rval_1'(s(bool,X193))) | s(bool,'F_0') = s(bool,X193) | s(bool,'T_0') = s(bool,sK10(X192,X191,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X194,bool)),X195),s(fun(X191,fun(X196,bool)),X197),s('type.semanticPrimitives.result'(bool,X191),X192),s('type.semanticPrimitives.result'(X194,X196),'const.semanticPrimitives.Rval_1'(s(X194,X198)))))) )),
  inference(superposition,[],[f398,f4953])).
fof(f14639,plain,(
  ( ! [X189,X187,X185,X190,X188,X186,X184,X183] : (s('type.semanticPrimitives.result'(bool,X183),X184) != s('type.semanticPrimitives.result'(bool,X183),'const.semanticPrimitives.Rval_1'(s(bool,X185))) | s(bool,'F_0') = s(bool,sK10(X184,X183,bool)) | s(bool,'T_0') = s(bool,X185) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X186,bool)),X187),s(fun(X183,fun(X188,bool)),X189),s('type.semanticPrimitives.result'(bool,X183),X184),s('type.semanticPrimitives.result'(X186,X188),'const.semanticPrimitives.Rval_1'(s(X186,X190)))))) )),
  inference(superposition,[],[f398,f4953])).
fof(f14635,plain,(
  ( ! [X146,X144,X142,X140,X151,X149,X147,X145,X143,X141,X139,X150,X148] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X142,fun(X139,bool)),X143),s(fun(X144,fun(X140,bool)),X145),s('type.semanticPrimitives.result'(X142,X144),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X144),X146))),s('type.semanticPrimitives.result'(X139,X140),X141))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X139,fun(X147,bool)),X148),s(fun(X140,fun(X149,bool)),X150),s('type.semanticPrimitives.result'(X139,X140),X141),s('type.semanticPrimitives.result'(X147,X149),'const.semanticPrimitives.Rval_1'(s(X147,X151)))))) )),
  inference(superposition,[],[f5104,f4953])).
fof(f14634,plain,(
  ( ! [X127,X134,X132,X130,X128,X138,X136,X126,X135,X133,X131,X129,X137] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X126,fun(X129,bool)),X130),s(fun(X127,fun(X131,bool)),X132),s('type.semanticPrimitives.result'(X126,X127),X128),s('type.semanticPrimitives.result'(X129,X131),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X131),X133))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X126,fun(X134,bool)),X135),s(fun(X127,fun(X136,bool)),X137),s('type.semanticPrimitives.result'(X126,X127),X128),s('type.semanticPrimitives.result'(X134,X136),'const.semanticPrimitives.Rval_1'(s(X134,X138)))))) )),
  inference(superposition,[],[f3299,f4953])).
fof(f14633,plain,(
  ( ! [X125,X123,X121,X118,X116,X114,X124,X122,X120,X119,X117,X115,X113] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X113,fun(X116,bool)),X117),s(fun(X114,fun(X118,bool)),X119),s('type.semanticPrimitives.result'(X113,X114),X115),s('type.semanticPrimitives.result'(X116,X118),X120))) | s('type.semanticPrimitives.result'(X116,X118),X120) = s('type.semanticPrimitives.result'(X116,X118),'const.semanticPrimitives.Rval_1'(s(X116,sK10(X120,X118,X116)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X113,fun(X121,bool)),X122),s(fun(X114,fun(X123,bool)),X124),s('type.semanticPrimitives.result'(X113,X114),X115),s('type.semanticPrimitives.result'(X121,X123),'const.semanticPrimitives.Rval_1'(s(X121,X125)))))) )),
  inference(superposition,[],[f3215,f4953])).
fof(f14632,plain,(
  ( ! [X111,X109,X107,X105,X112,X110,X108,X106,X104] : (s('type.semanticPrimitives.result'(X104,X105),X106) != s('type.semanticPrimitives.result'(X104,X105),X107) | s(X104,sK10(X106,X105,X104)) = s(X104,sK10(X107,X105,X104)) | s('type.semanticPrimitives.result'(X104,X105),X107) = s('type.semanticPrimitives.result'(X104,X105),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X105),sK11(X107,X105,X104)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X104,fun(X108,bool)),X109),s(fun(X105,fun(X110,bool)),X111),s('type.semanticPrimitives.result'(X104,X105),X106),s('type.semanticPrimitives.result'(X108,X110),'const.semanticPrimitives.Rval_1'(s(X108,X112)))))) )),
  inference(superposition,[],[f3085,f4953])).
fof(f14631,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.semanticPrimitives.result'(X95,X96),X97) != s('type.semanticPrimitives.result'(X95,X96),X98) | s('type.semanticPrimitives.result'(X95,X96),X98) = s('type.semanticPrimitives.result'(X95,X96),'const.semanticPrimitives.Rval_1'(s(X95,sK10(X98,X96,X95)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X95,fun(X99,bool)),X100),s(fun(X96,fun(X101,bool)),X102),s('type.semanticPrimitives.result'(X95,X96),X97),s('type.semanticPrimitives.result'(X99,X101),'const.semanticPrimitives.Rval_1'(s(X99,X103)))))) )),
  inference(superposition,[],[f3075,f4953])).
fof(f14630,plain,(
  ( ! [X94,X92,X90,X88,X87,X85,X93,X91,X89,X86] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X85,X86),X88),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X85,X86),X87))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X85,X86),X88),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X85,X86),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X86),X89))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X85,fun(X90,bool)),X91),s(fun(X86,fun(X92,bool)),X93),s('type.semanticPrimitives.result'(X85,X86),X87),s('type.semanticPrimitives.result'(X90,X92),'const.semanticPrimitives.Rval_1'(s(X90,X94)))))) )),
  inference(superposition,[],[f394,f4953])).
fof(f14629,plain,(
  ( ! [X80,X78,X76,X74,X72,X83,X81,X79,X77,X75,X73,X84,X82] : (s(bool,happ(s(fun(X72,bool),happ(s(fun(X75,fun(X72,bool)),X76),s(X75,X77))),s(X72,sK10(X74,X73,X72)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X75,fun(X72,bool)),X76),s(fun(X78,fun(X73,bool)),X79),s('type.semanticPrimitives.result'(X75,X78),'const.semanticPrimitives.Rval_1'(s(X75,X77))),s('type.semanticPrimitives.result'(X72,X73),X74))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X72,fun(X80,bool)),X81),s(fun(X73,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(X72,X73),X74),s('type.semanticPrimitives.result'(X80,X82),'const.semanticPrimitives.Rval_1'(s(X80,X84)))))) )),
  inference(superposition,[],[f231,f4953])).
fof(f14628,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X62,X60,X71,X69,X67,X65,X63] : (s(bool,happ(s(fun(X62,bool),happ(s(fun(X59,fun(X62,bool)),X63),s(X59,sK10(X61,X60,X59)))),s(X62,X64))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X59,fun(X62,bool)),X63),s(fun(X60,fun(X65,bool)),X66),s('type.semanticPrimitives.result'(X59,X60),X61),s('type.semanticPrimitives.result'(X62,X65),'const.semanticPrimitives.Rval_1'(s(X62,X64))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X59,fun(X67,bool)),X68),s(fun(X60,fun(X69,bool)),X70),s('type.semanticPrimitives.result'(X59,X60),X61),s('type.semanticPrimitives.result'(X67,X69),'const.semanticPrimitives.Rval_1'(s(X67,X71)))))) )),
  inference(superposition,[],[f231,f4953])).
fof(f14627,plain,(
  ( ! [X57,X47,X54,X52,X50,X48,X58,X56,X46,X55,X53,X51,X49] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(X46,bool)),X50),s(fun(X51,fun(X47,bool)),X52),s('type.semanticPrimitives.result'(X49,X51),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X51),X53))),s('type.semanticPrimitives.result'(X46,X47),X48))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X54,bool)),X55),s(fun(X47,fun(X56,bool)),X57),s('type.semanticPrimitives.result'(X46,X47),X48),s('type.semanticPrimitives.result'(X54,X56),'const.semanticPrimitives.Rval_1'(s(X54,X58)))))) )),
  inference(superposition,[],[f229,f4953])).
fof(f14626,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X44,X42,X40] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X33,fun(X36,bool)),X37),s(fun(X34,fun(X38,bool)),X39),s('type.semanticPrimitives.result'(X33,X34),X35),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X38),X40))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X33,fun(X41,bool)),X42),s(fun(X34,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(X33,X34),X35),s('type.semanticPrimitives.result'(X41,X43),'const.semanticPrimitives.Rval_1'(s(X41,X45)))))) )),
  inference(superposition,[],[f228,f4953])).
fof(f14625,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25,X32] : (s('type.semanticPrimitives.result'(X24,X25),X26) != s('type.semanticPrimitives.result'(X24,X25),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X25),X27))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X24,fun(X28,bool)),X29),s(fun(X25,fun(X30,bool)),X31),s('type.semanticPrimitives.result'(X24,X25),X26),s('type.semanticPrimitives.result'(X28,X30),'const.semanticPrimitives.Rval_1'(s(X28,X32)))))) )),
  inference(superposition,[],[f213,f4953])).
fof(f14623,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.semanticPrimitives.result'(X6,X7),X8) != s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X9))) | s(X6,X9) = s(X6,sK10(X8,X7,X6)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X10,bool)),X11),s(fun(X7,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X6,X7),X8),s('type.semanticPrimitives.result'(X10,X12),'const.semanticPrimitives.Rval_1'(s(X10,X14)))))) )),
  inference(superposition,[],[f209,f4953])).
fof(f14618,plain,(
  ( ! [X757,X753,X755,X749,X751,X756,X758,X752,X754,X750] : (s('type.semanticPrimitives.result'(bool,X757),X758) != s('type.semanticPrimitives.result'(bool,X757),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X758,X757,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X749,fun(X750,bool)),X751),s(fun(X752,fun(X753,bool)),X754),s('type.semanticPrimitives.result'(X749,X752),X755),s('type.semanticPrimitives.result'(X750,X753),'const.semanticPrimitives.Rval_1'(s(X750,X756))))) | s('type.semanticPrimitives.result'(bool,X757),X758) = s('type.semanticPrimitives.result'(bool,X757),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X757),sK11(X758,X757,bool)))) | s('type.semanticPrimitives.result'(X749,X752),X755) = s('type.semanticPrimitives.result'(X749,X752),'const.semanticPrimitives.Rval_1'(s(X749,sK10(X755,X752,X749))))) )),
  inference(superposition,[],[f3085,f4953])).
fof(f14608,plain,(
  ( ! [X639,X633,X635,X640,X642,X636,X638,X634,X641,X637] : (s(bool,'F_0') != s(bool,X641) | s('type.semanticPrimitives.result'(bool,X642),'const.semanticPrimitives.Rval_1'(s(bool,X641))) = s('type.semanticPrimitives.result'(bool,X642),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X633,fun(X634,bool)),X635),s(fun(X636,fun(X637,bool)),X638),s('type.semanticPrimitives.result'(X633,X636),X639),s('type.semanticPrimitives.result'(X634,X637),'const.semanticPrimitives.Rval_1'(s(X634,X640))))))) | s('type.semanticPrimitives.result'(X633,X636),X639) = s('type.semanticPrimitives.result'(X633,X636),'const.semanticPrimitives.Rval_1'(s(X633,sK10(X639,X636,X633))))) )),
  inference(superposition,[],[f210,f4953])).
fof(f14606,plain,(
  ( ! [X621,X617,X619,X613,X615,X620,X622,X616,X618,X614] : (s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X621),'const.semanticPrimitives.Rval_1'(s(bool,X622))) | s(bool,X622) = s(bool,'const.evalProps.result_rel_4'(s(fun(X613,fun(X614,bool)),X615),s(fun(X616,fun(X617,bool)),X618),s('type.semanticPrimitives.result'(X613,X616),X619),s('type.semanticPrimitives.result'(X614,X617),'const.semanticPrimitives.Rval_1'(s(X614,X620))))) | s('type.semanticPrimitives.result'(X613,X616),X619) = s('type.semanticPrimitives.result'(X613,X616),'const.semanticPrimitives.Rval_1'(s(X613,sK10(X619,X616,X613))))) )),
  inference(superposition,[],[f209,f4953])).
fof(f14670,plain,(
  ( ! [X212,X210,X216,X208,X215,X213,X211,X217,X209,X214] : (s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X208,fun(X209,bool)),X210),s(fun(X211,fun(X212,bool)),X213),s('type.semanticPrimitives.result'(X208,X211),X214),s('type.semanticPrimitives.result'(X209,X212),'const.semanticPrimitives.Rval_1'(s(X209,X215))))))) | s(bool,'T_0') = s(bool,X217) | s('type.semanticPrimitives.result'(X208,X211),X214) = s('type.semanticPrimitives.result'(X208,X211),'const.semanticPrimitives.Rval_1'(s(X208,sK10(X214,X211,X208))))) )),
  inference(trivial_inequality_removal,[],[f14562])).
fof(f14562,plain,(
  ( ! [X212,X210,X216,X208,X215,X213,X211,X217,X209,X214] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,X217))) = s('type.semanticPrimitives.result'(bool,X216),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X208,fun(X209,bool)),X210),s(fun(X211,fun(X212,bool)),X213),s('type.semanticPrimitives.result'(X208,X211),X214),s('type.semanticPrimitives.result'(X209,X212),'const.semanticPrimitives.Rval_1'(s(X209,X215))))))) | s(bool,'T_0') = s(bool,X217) | s('type.semanticPrimitives.result'(X208,X211),X214) = s('type.semanticPrimitives.result'(X208,X211),'const.semanticPrimitives.Rval_1'(s(X208,sK10(X214,X211,X208))))) )),
  inference(superposition,[],[f428,f4953])).
fof(f14532,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s('type.semanticPrimitives.result'(bool,X56),X55) = s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X58,bool)),X59),s(fun(X56,fun(X60,bool)),X61),s('type.semanticPrimitives.result'(bool,X56),X55),s('type.semanticPrimitives.result'(X58,X60),'const.semanticPrimitives.Rval_1'(s(X58,X62))))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,sK10(X55,X56,bool))) )),
  inference(superposition,[],[f4953,f273])).
fof(f14531,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X48),X47) = s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X49,bool)),X50),s(fun(X48,fun(X51,bool)),X52),s('type.semanticPrimitives.result'(bool,X48),X47),s('type.semanticPrimitives.result'(X49,X51),'const.semanticPrimitives.Rval_1'(s(X49,X53))))) | s(bool,X54) = s(bool,sK10(X47,X48,bool)) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f4953,f273])).
fof(f14683,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s('type.semanticPrimitives.result'(X47,X50),X53) = s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,sK10(X53,X50,X47)))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X47,fun(X48,bool)),X49),s(fun(X50,fun(X51,bool)),X52),s('type.semanticPrimitives.result'(X47,X50),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rval_1'(s(X48,X54))))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(subsumption_resolution,[],[f14516,f256])).
fof(f14516,plain,(
  ( ! [X47,X54,X52,X50,X48,X55,X53,X51,X49] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(X47,X50),X53) = s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,sK10(X53,X50,X47)))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X47,fun(X48,bool)),X49),s(fun(X50,fun(X51,bool)),X52),s('type.semanticPrimitives.result'(X47,X50),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rval_1'(s(X48,X54))))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f4953,f273])).
fof(f14511,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X29,fun(X26,bool)),X30),s(fun(X31,fun(X27,bool)),X32),s('type.semanticPrimitives.result'(X29,X31),X33),s('type.semanticPrimitives.result'(X26,X27),X28))) | s('type.semanticPrimitives.result'(X29,X31),X33) = s('type.semanticPrimitives.result'(X29,X31),'const.semanticPrimitives.Rval_1'(s(X29,sK10(X33,X31,X29)))) | s('type.semanticPrimitives.result'(X26,X27),X28) = s('type.semanticPrimitives.result'(X26,X27),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X27),sK11(X28,X27,X26))))) )),
  inference(superposition,[],[f4953,f207])).
fof(f14510,plain,(
  ( ! [X24,X14,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X13,bool)),X17),s(fun(X18,fun(X14,bool)),X19),s('type.semanticPrimitives.result'(X16,X18),X20),s('type.semanticPrimitives.result'(X13,X14),X15))) | s('type.semanticPrimitives.result'(X16,X18),X20) = s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rval_1'(s(X16,sK10(X20,X18,X16)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X13,bool)),X22),s(fun(X23,fun(X14,bool)),X24),s('type.semanticPrimitives.result'(X21,X23),'const.semanticPrimitives.Rval_1'(s(X21,X25))),s('type.semanticPrimitives.result'(X13,X14),X15)))) )),
  inference(superposition,[],[f4953,f3215])).
fof(f14509,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),X7),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X3,X5),X7) = s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,sK10(X7,X5,X3)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X8,bool)),X9),s(fun(X1,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12)))))) )),
  inference(superposition,[],[f4953,f4953])).
fof(f14682,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65,X63] : (s('type.semanticPrimitives.result'(X63,X64),X65) = s('type.semanticPrimitives.result'(X63,X64),'const.semanticPrimitives.Rval_1'(s(X63,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X63,X64),X65)),X66,'type.semanticPrimitives.result'(X63,X64)),X64,X63)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X67,bool)),X68),s(fun(X64,fun(X69,bool)),X70),s('type.semanticPrimitives.result'(X63,X64),X65),s('type.semanticPrimitives.result'(X67,X69),'const.semanticPrimitives.Rval_1'(s(X67,X71)))))) )),
  inference(forward_demodulation,[],[f14461,f7120])).
fof(f14461,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65,X63] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X63,fun(X67,bool)),X68),s(fun(X64,fun(X69,bool)),X70),s('type.semanticPrimitives.result'(X63,X64),X65),s('type.semanticPrimitives.result'(X67,X69),'const.semanticPrimitives.Rval_1'(s(X67,X71))))) | s('type.semanticPrimitives.result'(X63,X64),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X63,X64),X65)),X66,'type.semanticPrimitives.result'(X63,X64))) = s('type.semanticPrimitives.result'(X63,X64),'const.semanticPrimitives.Rval_1'(s(X63,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X63,X64),X65)),X66,'type.semanticPrimitives.result'(X63,X64)),X64,X63))))) )),
  inference(superposition,[],[f4953,f7120])).
fof(f14226,plain,(
  ( ! [X389,X391,X397,X393,X395,X388,X390,X396,X392,X394] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),X392) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X388,X389),X390))) | s('type.semanticPrimitives.result'(X388,X389),sK10(X392,X391,'type.semanticPrimitives.result'(X388,X389))) = s('type.semanticPrimitives.result'(X388,X389),'const.semanticPrimitives.Rval_1'(s(X388,sK10(X390,X389,X388)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),X392) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X388,X389),X391),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X391),sK11(X392,X391,'type.semanticPrimitives.result'(X388,X389))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X393,fun(X388,bool)),X394),s(fun(X395,fun(X389,bool)),X396),s('type.semanticPrimitives.result'(X393,X395),'const.semanticPrimitives.Rval_1'(s(X393,X397))),s('type.semanticPrimitives.result'(X388,X389),X390)))) )),
  inference(superposition,[],[f3085,f3215])).
fof(f14224,plain,(
  ( ! [X377,X372,X374,X370,X376,X373,X375,X369,X371] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X369,X370),bool),X372),s('type.semanticPrimitives.result'(X369,X370),X371)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X369,X370),bool),X372),s('type.semanticPrimitives.result'(X369,X370),sK9('const.semanticPrimitives.Rval_1'(s(X369,sK10(X371,X370,X369))),X372,'type.semanticPrimitives.result'(X369,X370))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X373,fun(X369,bool)),X374),s(fun(X375,fun(X370,bool)),X376),s('type.semanticPrimitives.result'(X373,X375),'const.semanticPrimitives.Rval_1'(s(X373,X377))),s('type.semanticPrimitives.result'(X369,X370),X371)))) )),
  inference(superposition,[],[f471,f3215])).
fof(f14214,plain,(
  ( ! [X255,X253,X257,X259,X261,X260,X254,X252,X256,X258] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X252,X253),X255),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X252,X253),X254))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X252,X253),X255),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X252,X253),X256))) | s('type.semanticPrimitives.result'(X252,X253),X256) = s('type.semanticPrimitives.result'(X252,X253),'const.semanticPrimitives.Rval_1'(s(X252,sK10(X254,X253,X252)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X257,fun(X252,bool)),X258),s(fun(X259,fun(X253,bool)),X260),s('type.semanticPrimitives.result'(X257,X259),'const.semanticPrimitives.Rval_1'(s(X257,X261))),s('type.semanticPrimitives.result'(X252,X253),X254)))) )),
  inference(superposition,[],[f209,f3215])).
fof(f14278,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s('type.semanticPrimitives.result'(X206,X207),X208) != s('type.semanticPrimitives.result'(X206,X207),'const.semanticPrimitives.Rval_1'(s(X206,X209))) | s(X206,X209) = s(X206,sK10('const.semanticPrimitives.Rval_1'(s(X206,sK10(X208,X207,X206))),X207,X206)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X206,bool)),X211),s(fun(X212,fun(X207,bool)),X213),s('type.semanticPrimitives.result'(X210,X212),'const.semanticPrimitives.Rval_1'(s(X210,X214))),s('type.semanticPrimitives.result'(X206,X207),X208)))) )),
  inference(subsumption_resolution,[],[f14209,f213])).
fof(f14209,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s('type.semanticPrimitives.result'(X206,X207),X208) != s('type.semanticPrimitives.result'(X206,X207),'const.semanticPrimitives.Rval_1'(s(X206,X209))) | s(X206,X209) = s(X206,sK10('const.semanticPrimitives.Rval_1'(s(X206,sK10(X208,X207,X206))),X207,X206)) | s('type.semanticPrimitives.result'(X206,X207),'const.semanticPrimitives.Rval_1'(s(X206,sK10(X208,X207,X206)))) = s('type.semanticPrimitives.result'(X206,X207),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X207),sK11('const.semanticPrimitives.Rval_1'(s(X206,sK10(X208,X207,X206))),X207,X206)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X210,fun(X206,bool)),X211),s(fun(X212,fun(X207,bool)),X213),s('type.semanticPrimitives.result'(X210,X212),'const.semanticPrimitives.Rval_1'(s(X210,X214))),s('type.semanticPrimitives.result'(X206,X207),X208)))) )),
  inference(superposition,[],[f3085,f3215])).
fof(f14206,plain,(
  ( ! [X189,X187,X185,X190,X188,X186,X184,X183] : (s('type.semanticPrimitives.result'(bool,X183),X184) != s('type.semanticPrimitives.result'(bool,X183),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X185) = s(bool,sK10(X184,X183,bool)) | s(bool,'T_0') = s(bool,X185) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X186,fun(bool,bool)),X187),s(fun(X188,fun(X183,bool)),X189),s('type.semanticPrimitives.result'(X186,X188),'const.semanticPrimitives.Rval_1'(s(X186,X190))),s('type.semanticPrimitives.result'(bool,X183),X184)))) )),
  inference(superposition,[],[f397,f3215])).
fof(f14205,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X181,X179] : (s('type.semanticPrimitives.result'(bool,X175),X176) != s('type.semanticPrimitives.result'(bool,X175),'const.semanticPrimitives.Rval_1'(s(bool,X177))) | s(bool,'F_0') = s(bool,X177) | s(bool,'T_0') = s(bool,sK10(X176,X175,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X178,fun(bool,bool)),X179),s(fun(X180,fun(X175,bool)),X181),s('type.semanticPrimitives.result'(X178,X180),'const.semanticPrimitives.Rval_1'(s(X178,X182))),s('type.semanticPrimitives.result'(bool,X175),X176)))) )),
  inference(superposition,[],[f398,f3215])).
fof(f14204,plain,(
  ( ! [X167,X173,X171,X169,X174,X172,X170,X168] : (s('type.semanticPrimitives.result'(bool,X167),X168) != s('type.semanticPrimitives.result'(bool,X167),'const.semanticPrimitives.Rval_1'(s(bool,X169))) | s(bool,'F_0') = s(bool,sK10(X168,X167,bool)) | s(bool,'T_0') = s(bool,X169) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X170,fun(bool,bool)),X171),s(fun(X172,fun(X167,bool)),X173),s('type.semanticPrimitives.result'(X170,X172),'const.semanticPrimitives.Rval_1'(s(X170,X174))),s('type.semanticPrimitives.result'(bool,X167),X168)))) )),
  inference(superposition,[],[f398,f3215])).
fof(f14200,plain,(
  ( ! [X127,X125,X123,X134,X132,X130,X128,X126,X124,X135,X133,X131,X129] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X126,fun(X123,bool)),X127),s(fun(X128,fun(X124,bool)),X129),s('type.semanticPrimitives.result'(X126,X128),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X128),X130))),s('type.semanticPrimitives.result'(X123,X124),X125))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X131,fun(X123,bool)),X132),s(fun(X133,fun(X124,bool)),X134),s('type.semanticPrimitives.result'(X131,X133),'const.semanticPrimitives.Rval_1'(s(X131,X135))),s('type.semanticPrimitives.result'(X123,X124),X125)))) )),
  inference(superposition,[],[f5104,f3215])).
fof(f14199,plain,(
  ( ! [X121,X111,X118,X116,X114,X112,X122,X120,X110,X119,X117,X115,X113] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X110,fun(X113,bool)),X114),s(fun(X111,fun(X115,bool)),X116),s('type.semanticPrimitives.result'(X110,X111),X112),s('type.semanticPrimitives.result'(X113,X115),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X115),X117))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X118,fun(X110,bool)),X119),s(fun(X120,fun(X111,bool)),X121),s('type.semanticPrimitives.result'(X118,X120),'const.semanticPrimitives.Rval_1'(s(X118,X122))),s('type.semanticPrimitives.result'(X110,X111),X112)))) )),
  inference(superposition,[],[f3299,f3215])).
fof(f14198,plain,(
  ( ! [X103,X101,X109,X107,X105,X102,X108,X106,X104] : (s('type.semanticPrimitives.result'(X101,X102),X103) != s('type.semanticPrimitives.result'(X101,X102),X104) | s(X101,sK10(X103,X102,X101)) = s(X101,sK10(X104,X102,X101)) | s('type.semanticPrimitives.result'(X101,X102),X104) = s('type.semanticPrimitives.result'(X101,X102),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X102),sK11(X104,X102,X101)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X105,fun(X101,bool)),X106),s(fun(X107,fun(X102,bool)),X108),s('type.semanticPrimitives.result'(X105,X107),'const.semanticPrimitives.Rval_1'(s(X105,X109))),s('type.semanticPrimitives.result'(X101,X102),X103)))) )),
  inference(superposition,[],[f3085,f3215])).
fof(f14197,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X100,X98,X96] : (s('type.semanticPrimitives.result'(X92,X93),X94) != s('type.semanticPrimitives.result'(X92,X93),X95) | s('type.semanticPrimitives.result'(X92,X93),X95) = s('type.semanticPrimitives.result'(X92,X93),'const.semanticPrimitives.Rval_1'(s(X92,sK10(X95,X93,X92)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X96,fun(X92,bool)),X97),s(fun(X98,fun(X93,bool)),X99),s('type.semanticPrimitives.result'(X96,X98),'const.semanticPrimitives.Rval_1'(s(X96,X100))),s('type.semanticPrimitives.result'(X92,X93),X94)))) )),
  inference(superposition,[],[f3075,f3215])).
fof(f14196,plain,(
  ( ! [X90,X88,X87,X85,X83,X91,X89,X86,X84,X82] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X82,X83),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X82,X83),X84))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X82,X83),X85),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X82,X83),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X83),X86))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X87,fun(X82,bool)),X88),s(fun(X89,fun(X83,bool)),X90),s('type.semanticPrimitives.result'(X87,X89),'const.semanticPrimitives.Rval_1'(s(X87,X91))),s('type.semanticPrimitives.result'(X82,X83),X84)))) )),
  inference(superposition,[],[f394,f3215])).
fof(f14195,plain,(
  ( ! [X80,X70,X78,X76,X74,X72,X81,X71,X69,X79,X77,X75,X73] : (s(bool,happ(s(fun(X69,bool),happ(s(fun(X72,fun(X69,bool)),X73),s(X72,X74))),s(X69,sK10(X71,X70,X69)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X72,fun(X69,bool)),X73),s(fun(X75,fun(X70,bool)),X76),s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rval_1'(s(X72,X74))),s('type.semanticPrimitives.result'(X69,X70),X71))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X77,fun(X69,bool)),X78),s(fun(X79,fun(X70,bool)),X80),s('type.semanticPrimitives.result'(X77,X79),'const.semanticPrimitives.Rval_1'(s(X77,X81))),s('type.semanticPrimitives.result'(X69,X70),X71)))) )),
  inference(superposition,[],[f231,f3215])).
fof(f14194,plain,(
  ( ! [X61,X59,X57,X68,X66,X64,X62,X60,X58,X56,X67,X65,X63] : (s(bool,happ(s(fun(X59,bool),happ(s(fun(X56,fun(X59,bool)),X60),s(X56,sK10(X58,X57,X56)))),s(X59,X61))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X56,fun(X59,bool)),X60),s(fun(X57,fun(X62,bool)),X63),s('type.semanticPrimitives.result'(X56,X57),X58),s('type.semanticPrimitives.result'(X59,X62),'const.semanticPrimitives.Rval_1'(s(X59,X61))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X64,fun(X56,bool)),X65),s(fun(X66,fun(X57,bool)),X67),s('type.semanticPrimitives.result'(X64,X66),'const.semanticPrimitives.Rval_1'(s(X64,X68))),s('type.semanticPrimitives.result'(X56,X57),X58)))) )),
  inference(superposition,[],[f231,f3215])).
fof(f14193,plain,(
  ( ! [X47,X45,X43,X54,X52,X50,X48,X46,X44,X55,X53,X51,X49] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X43,bool)),X47),s(fun(X48,fun(X44,bool)),X49),s('type.semanticPrimitives.result'(X46,X48),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X48),X50))),s('type.semanticPrimitives.result'(X43,X44),X45))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X51,fun(X43,bool)),X52),s(fun(X53,fun(X44,bool)),X54),s('type.semanticPrimitives.result'(X51,X53),'const.semanticPrimitives.Rval_1'(s(X51,X55))),s('type.semanticPrimitives.result'(X43,X44),X45)))) )),
  inference(superposition,[],[f229,f3215])).
fof(f14192,plain,(
  ( ! [X30,X39,X37,X35,X33,X41,X31,X38,X36,X34,X32,X42,X40] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X30,fun(X33,bool)),X34),s(fun(X31,fun(X35,bool)),X36),s('type.semanticPrimitives.result'(X30,X31),X32),s('type.semanticPrimitives.result'(X33,X35),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X35),X37))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X38,fun(X30,bool)),X39),s(fun(X40,fun(X31,bool)),X41),s('type.semanticPrimitives.result'(X38,X40),'const.semanticPrimitives.Rval_1'(s(X38,X42))),s('type.semanticPrimitives.result'(X30,X31),X32)))) )),
  inference(superposition,[],[f228,f3215])).
fof(f14191,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22] : (s('type.semanticPrimitives.result'(X21,X22),X23) != s('type.semanticPrimitives.result'(X21,X22),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X22),X24))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X25,fun(X21,bool)),X26),s(fun(X27,fun(X22,bool)),X28),s('type.semanticPrimitives.result'(X25,X27),'const.semanticPrimitives.Rval_1'(s(X25,X29))),s('type.semanticPrimitives.result'(X21,X22),X23)))) )),
  inference(superposition,[],[f213,f3215])).
fof(f14189,plain,(
  ( ! [X6,X4,X10,X8,X7,X5,X3,X11,X9] : (s('type.semanticPrimitives.result'(X3,X4),X5) != s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,X6))) | s(X3,X6) = s(X3,sK10(X5,X4,X3)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X7,fun(X3,bool)),X8),s(fun(X9,fun(X4,bool)),X10),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rval_1'(s(X7,X11))),s('type.semanticPrimitives.result'(X3,X4),X5)))) )),
  inference(superposition,[],[f209,f3215])).
fof(f14185,plain,(
  ( ! [X732,X734,X728,X730,X726,X733,X729,X731,X725,X727] : (s('type.semanticPrimitives.result'(bool,X733),X734) != s('type.semanticPrimitives.result'(bool,X733),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,sK10(X734,X733,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X725,fun(X726,bool)),X727),s(fun(X728,fun(X729,bool)),X730),s('type.semanticPrimitives.result'(X725,X728),'const.semanticPrimitives.Rval_1'(s(X725,X731))),s('type.semanticPrimitives.result'(X726,X729),X732))) | s('type.semanticPrimitives.result'(bool,X733),X734) = s('type.semanticPrimitives.result'(bool,X733),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X733),sK11(X734,X733,bool)))) | s('type.semanticPrimitives.result'(X726,X729),X732) = s('type.semanticPrimitives.result'(X726,X729),'const.semanticPrimitives.Rval_1'(s(X726,sK10(X732,X729,X726))))) )),
  inference(superposition,[],[f3085,f3215])).
fof(f14175,plain,(
  ( ! [X617,X613,X615,X609,X611,X616,X618,X612,X614,X610] : (s(bool,'F_0') != s(bool,X617) | s('type.semanticPrimitives.result'(bool,X618),'const.semanticPrimitives.Rval_1'(s(bool,X617))) = s('type.semanticPrimitives.result'(bool,X618),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X609,fun(X610,bool)),X611),s(fun(X612,fun(X613,bool)),X614),s('type.semanticPrimitives.result'(X609,X612),'const.semanticPrimitives.Rval_1'(s(X609,X615))),s('type.semanticPrimitives.result'(X610,X613),X616))))) | s('type.semanticPrimitives.result'(X610,X613),X616) = s('type.semanticPrimitives.result'(X610,X613),'const.semanticPrimitives.Rval_1'(s(X610,sK10(X616,X613,X610))))) )),
  inference(superposition,[],[f210,f3215])).
fof(f14173,plain,(
  ( ! [X596,X598,X592,X594,X590,X597,X593,X595,X589,X591] : (s('type.semanticPrimitives.result'(bool,X597),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X597),'const.semanticPrimitives.Rval_1'(s(bool,X598))) | s(bool,X598) = s(bool,'const.evalProps.result_rel_4'(s(fun(X589,fun(X590,bool)),X591),s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.result'(X589,X592),'const.semanticPrimitives.Rval_1'(s(X589,X595))),s('type.semanticPrimitives.result'(X590,X593),X596))) | s('type.semanticPrimitives.result'(X590,X593),X596) = s('type.semanticPrimitives.result'(X590,X593),'const.semanticPrimitives.Rval_1'(s(X590,sK10(X596,X593,X590))))) )),
  inference(superposition,[],[f209,f3215])).
fof(f14232,plain,(
  ( ! [X208,X206,X204,X202,X200,X209,X207,X205,X203,X201] : (s('type.semanticPrimitives.result'(bool,X208),'const.semanticPrimitives.Rval_1'(s(bool,X209))) = s('type.semanticPrimitives.result'(bool,X208),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X200,fun(X201,bool)),X202),s(fun(X203,fun(X204,bool)),X205),s('type.semanticPrimitives.result'(X200,X203),'const.semanticPrimitives.Rval_1'(s(X200,X206))),s('type.semanticPrimitives.result'(X201,X204),X207))))) | s(bool,'T_0') = s(bool,X209) | s('type.semanticPrimitives.result'(X201,X204),X207) = s('type.semanticPrimitives.result'(X201,X204),'const.semanticPrimitives.Rval_1'(s(X201,sK10(X207,X204,X201))))) )),
  inference(trivial_inequality_removal,[],[f14131])).
fof(f14131,plain,(
  ( ! [X208,X206,X204,X202,X200,X209,X207,X205,X203,X201] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X208),'const.semanticPrimitives.Rval_1'(s(bool,X209))) = s('type.semanticPrimitives.result'(bool,X208),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X200,fun(X201,bool)),X202),s(fun(X203,fun(X204,bool)),X205),s('type.semanticPrimitives.result'(X200,X203),'const.semanticPrimitives.Rval_1'(s(X200,X206))),s('type.semanticPrimitives.result'(X201,X204),X207))))) | s(bool,'T_0') = s(bool,X209) | s('type.semanticPrimitives.result'(X201,X204),X207) = s('type.semanticPrimitives.result'(X201,X204),'const.semanticPrimitives.Rval_1'(s(X201,sK10(X207,X204,X201))))) )),
  inference(superposition,[],[f428,f3215])).
fof(f14101,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s('type.semanticPrimitives.result'(bool,X56),X55) = s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X57))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X58,fun(bool,bool)),X59),s(fun(X60,fun(X56,bool)),X61),s('type.semanticPrimitives.result'(X58,X60),'const.semanticPrimitives.Rval_1'(s(X58,X62))),s('type.semanticPrimitives.result'(bool,X56),X55))) | s(bool,'T_0') = s(bool,X57) | s(bool,'T_0') = s(bool,sK10(X55,X56,bool))) )),
  inference(superposition,[],[f3215,f273])).
fof(f14100,plain,(
  ( ! [X47,X54,X52,X50,X48,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X48),X47) = s('type.semanticPrimitives.result'(bool,X48),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(bool,bool)),X50),s(fun(X51,fun(X48,bool)),X52),s('type.semanticPrimitives.result'(X49,X51),'const.semanticPrimitives.Rval_1'(s(X49,X53))),s('type.semanticPrimitives.result'(bool,X48),X47))) | s(bool,X54) = s(bool,sK10(X47,X48,bool)) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f3215,f273])).
fof(f14244,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (s('type.semanticPrimitives.result'(X40,X43),X46) = s('type.semanticPrimitives.result'(X40,X43),'const.semanticPrimitives.Rval_1'(s(X40,sK10(X46,X43,X40)))) | s(bool,X47) = s(bool,'const.evalProps.result_rel_4'(s(fun(X39,fun(X40,bool)),X41),s(fun(X42,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(X39,X42),'const.semanticPrimitives.Rval_1'(s(X39,X45))),s('type.semanticPrimitives.result'(X40,X43),X46))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f14085,f256])).
fof(f14085,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(X40,X43),X46) = s('type.semanticPrimitives.result'(X40,X43),'const.semanticPrimitives.Rval_1'(s(X40,sK10(X46,X43,X40)))) | s(bool,X47) = s(bool,'const.evalProps.result_rel_4'(s(fun(X39,fun(X40,bool)),X41),s(fun(X42,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(X39,X42),'const.semanticPrimitives.Rval_1'(s(X39,X45))),s('type.semanticPrimitives.result'(X40,X43),X46))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f3215,f273])).
fof(f14243,plain,(
  ( ! [X57,X54,X52,X50,X58,X56,X55,X53,X51] : (s('type.semanticPrimitives.result'(X50,X51),X52) = s('type.semanticPrimitives.result'(X50,X51),'const.semanticPrimitives.Rval_1'(s(X50,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X50,X51),X52)),X53,'type.semanticPrimitives.result'(X50,X51)),X51,X50)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X54,fun(X50,bool)),X55),s(fun(X56,fun(X51,bool)),X57),s('type.semanticPrimitives.result'(X54,X56),'const.semanticPrimitives.Rval_1'(s(X54,X58))),s('type.semanticPrimitives.result'(X50,X51),X52)))) )),
  inference(forward_demodulation,[],[f14082,f7120])).
fof(f14082,plain,(
  ( ! [X57,X54,X52,X50,X58,X56,X55,X53,X51] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X54,fun(X50,bool)),X55),s(fun(X56,fun(X51,bool)),X57),s('type.semanticPrimitives.result'(X54,X56),'const.semanticPrimitives.Rval_1'(s(X54,X58))),s('type.semanticPrimitives.result'(X50,X51),X52))) | s('type.semanticPrimitives.result'(X50,X51),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X50,X51),X52)),X53,'type.semanticPrimitives.result'(X50,X51))) = s('type.semanticPrimitives.result'(X50,X51),'const.semanticPrimitives.Rval_1'(s(X50,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X50,X51),X52)),X53,'type.semanticPrimitives.result'(X50,X51)),X51,X50))))) )),
  inference(superposition,[],[f3215,f7120])).
fof(f14073,plain,(
  ( ! [X14,X19,X17,X15,X13,X20,X18,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(X16,bool)),X17),s(fun(X14,fun(X18,bool)),X19),s('type.semanticPrimitives.result'(X13,X14),X15),s('type.semanticPrimitives.result'(X16,X18),X20))) | s('type.semanticPrimitives.result'(X16,X18),X20) = s('type.semanticPrimitives.result'(X16,X18),'const.semanticPrimitives.Rval_1'(s(X16,sK10(X20,X18,X16)))) | s('type.semanticPrimitives.result'(X13,X14),X15) = s('type.semanticPrimitives.result'(X13,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,X13))))) )),
  inference(superposition,[],[f3215,f207])).
fof(f14072,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),X7))) | s('type.semanticPrimitives.result'(X3,X5),X7) = s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,sK10(X7,X5,X3)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X0,bool)),X9),s(fun(X10,fun(X1,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12))),s('type.semanticPrimitives.result'(X0,X1),X2)))) )),
  inference(superposition,[],[f3215,f3215])).
fof(f13698,plain,(
  ( ! [X596,X592,X594,X590,X597,X593,X595,X591] : (~p(s(bool,happ(s(fun(bool,bool),X597),s(bool,X596)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X597),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X590,fun(bool,bool)),X591),s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.result'(X590,X592),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X592),X595))),s('type.semanticPrimitives.result'(bool,X593),'const.semanticPrimitives.Rval_1'(s(bool,X596)))),X597,bool)))) | s(bool,'T_0') = s(bool,X596)) )),
  inference(superposition,[],[f471,f4984])).
fof(f13688,plain,(
  ( ! [X484,X486,X488,X490,X485,X487,X483,X489,X491] : (s('type.semanticPrimitives.result'(bool,X490),'const.semanticPrimitives.Rval_1'(s(bool,X489))) != s('type.semanticPrimitives.result'(bool,X490),'const.semanticPrimitives.Rval_1'(s(bool,X491))) | s(bool,X491) = s(bool,'const.evalProps.result_rel_4'(s(fun(X483,fun(bool,bool)),X484),s(fun(X485,fun(X486,bool)),X487),s('type.semanticPrimitives.result'(X483,X485),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X485),X488))),s('type.semanticPrimitives.result'(bool,X486),'const.semanticPrimitives.Rval_1'(s(bool,X489))))) | s(bool,'T_0') = s(bool,X489)) )),
  inference(superposition,[],[f209,f4984])).
fof(f13775,plain,(
  ( ! [X476,X478,X480,X482,X475,X477,X479,X481] : (s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X475,fun(bool,bool)),X476),s(fun(X477,fun(X478,bool)),X479),s('type.semanticPrimitives.result'(X475,X477),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X477),X480))),s('type.semanticPrimitives.result'(bool,X478),'const.semanticPrimitives.Rval_1'(s(bool,X481)))),X482,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X482),s(bool,X481)))) | s(bool,'T_0') = s(bool,X481)) )),
  inference(forward_demodulation,[],[f13687,f229])).
fof(f13687,plain,(
  ( ! [X476,X478,X480,X482,X475,X477,X479,X481] : (~p(s(bool,happ(s(fun(bool,bool),X482),s(bool,X481)))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X475,fun(bool,bool)),X476),s(fun(X477,fun(X478,bool)),X479),s('type.semanticPrimitives.result'(X475,X477),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X477),X480))),s('type.semanticPrimitives.result'(bool,X478),'const.semanticPrimitives.Rval_1'(s(bool,X481))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X475,fun(bool,bool)),X476),s(fun(X477,fun(X478,bool)),X479),s('type.semanticPrimitives.result'(X475,X477),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X477),X480))),s('type.semanticPrimitives.result'(bool,X478),'const.semanticPrimitives.Rval_1'(s(bool,X481)))),X482,bool)) | s(bool,'T_0') = s(bool,X481)) )),
  inference(superposition,[],[f195,f4984])).
fof(f13651,plain,(
  ( ! [X191,X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,happ(s(fun(bool,bool),X198),s(bool,X197)))) | p(s(bool,happ(s(fun(bool,bool),X198),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X191,fun(bool,bool)),X192),s(fun(X193,fun(X194,bool)),X195),s('type.semanticPrimitives.result'(X191,X193),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X193),X196))),s('type.semanticPrimitives.result'(bool,X194),'const.semanticPrimitives.Rval_1'(s(bool,X197)))),X198,bool)) | s(bool,'T_0') = s(bool,X197)) )),
  inference(superposition,[],[f469,f4984])).
fof(f13613,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,sK10(X1,X0,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X2,fun(bool,bool)),X3),s(fun(X4,fun(X0,bool)),X5),s('type.semanticPrimitives.result'(X2,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))),s('type.semanticPrimitives.result'(bool,X0),X1))) | s(bool,'T_0') = s(bool,sK10(X1,X0,bool)) | s('type.semanticPrimitives.result'(bool,X0),X1) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK11(X1,X0,bool))))) )),
  inference(superposition,[],[f4984,f207])).
fof(f13575,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(bool,X9) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(bool,bool)),X10),s(fun(X7,fun(X11,bool)),X12),s('type.semanticPrimitives.result'(bool,X7),X8),s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X9))))) | s(bool,'T_0') = s(bool,X9) | s('type.semanticPrimitives.result'(bool,X7),X8) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X8,X7,bool))) )),
  inference(superposition,[],[f4984,f3058])).
fof(f13574,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X3) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(bool,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X3))))) | s(bool,'T_0') = s(bool,X3) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f4984,f207])).
fof(f13149,plain,(
  ( ! [X569,X565,X567,X563,X568,X570,X564,X566] : (~p(s(bool,happ(s(fun(bool,bool),X570),s(bool,X568)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X570),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(bool,fun(X563,bool)),X564),s(fun(X565,fun(X566,bool)),X567),s('type.semanticPrimitives.result'(bool,X565),'const.semanticPrimitives.Rval_1'(s(bool,X568))),s('type.semanticPrimitives.result'(X563,X566),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X566),X569)))),X570,bool)))) | s(bool,'T_0') = s(bool,X568)) )),
  inference(superposition,[],[f471,f3205])).
fof(f13139,plain,(
  ( ! [X461,X463,X457,X459,X460,X462,X456,X458,X464] : (s('type.semanticPrimitives.result'(bool,X463),'const.semanticPrimitives.Rval_1'(s(bool,X461))) != s('type.semanticPrimitives.result'(bool,X463),'const.semanticPrimitives.Rval_1'(s(bool,X464))) | s(bool,X464) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X456,bool)),X457),s(fun(X458,fun(X459,bool)),X460),s('type.semanticPrimitives.result'(bool,X458),'const.semanticPrimitives.Rval_1'(s(bool,X461))),s('type.semanticPrimitives.result'(X456,X459),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X459),X462))))) | s(bool,'T_0') = s(bool,X461)) )),
  inference(superposition,[],[f209,f3205])).
fof(f13226,plain,(
  ( ! [X453,X455,X449,X451,X452,X454,X448,X450] : (s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(bool,fun(X448,bool)),X449),s(fun(X450,fun(X451,bool)),X452),s('type.semanticPrimitives.result'(bool,X450),'const.semanticPrimitives.Rval_1'(s(bool,X453))),s('type.semanticPrimitives.result'(X448,X451),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X451),X454)))),X455,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X455),s(bool,X453)))) | s(bool,'T_0') = s(bool,X453)) )),
  inference(forward_demodulation,[],[f13138,f228])).
fof(f13138,plain,(
  ( ! [X453,X455,X449,X451,X452,X454,X448,X450] : (~p(s(bool,happ(s(fun(bool,bool),X455),s(bool,X453)))) | s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X448,bool)),X449),s(fun(X450,fun(X451,bool)),X452),s('type.semanticPrimitives.result'(bool,X450),'const.semanticPrimitives.Rval_1'(s(bool,X453))),s('type.semanticPrimitives.result'(X448,X451),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X451),X454))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(bool,fun(X448,bool)),X449),s(fun(X450,fun(X451,bool)),X452),s('type.semanticPrimitives.result'(bool,X450),'const.semanticPrimitives.Rval_1'(s(bool,X453))),s('type.semanticPrimitives.result'(X448,X451),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X451),X454)))),X455,bool)) | s(bool,'T_0') = s(bool,X453)) )),
  inference(superposition,[],[f195,f3205])).
fof(f13105,plain,(
  ( ! [X191,X198,X196,X194,X192,X197,X195,X193] : (~p(s(bool,happ(s(fun(bool,bool),X198),s(bool,X196)))) | p(s(bool,happ(s(fun(bool,bool),X198),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(bool,fun(X191,bool)),X192),s(fun(X193,fun(X194,bool)),X195),s('type.semanticPrimitives.result'(bool,X193),'const.semanticPrimitives.Rval_1'(s(bool,X196))),s('type.semanticPrimitives.result'(X191,X194),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X194),X197)))),X198,bool)) | s(bool,'T_0') = s(bool,X196)) )),
  inference(superposition,[],[f469,f3205])).
fof(f13069,plain,(
  ( ! [X12,X10,X8,X7,X11,X9] : (s(bool,X9) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(bool,bool)),X10),s(fun(X11,fun(X7,bool)),X12),s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,X9))),s('type.semanticPrimitives.result'(bool,X7),X8))) | s(bool,'T_0') = s(bool,X9) | s('type.semanticPrimitives.result'(bool,X7),X8) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X8,X7,bool))) )),
  inference(superposition,[],[f3205,f3058])).
fof(f13068,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,X3) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(bool,X5),'const.semanticPrimitives.Rval_1'(s(bool,X3))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s(bool,'T_0') = s(bool,X3) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f3205,f207])).
fof(f13063,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(bool,sK10(X1,X0,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X2,bool)),X3),s(fun(X0,fun(X4,bool)),X5),s('type.semanticPrimitives.result'(bool,X0),X1),s('type.semanticPrimitives.result'(X2,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))))) | s(bool,'T_0') = s(bool,sK10(X1,X0,bool)) | s('type.semanticPrimitives.result'(bool,X0),X1) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK11(X1,X0,bool))))) )),
  inference(superposition,[],[f3205,f207])).
fof(f12574,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) != s('type.semanticPrimitives.result'(bool,X4),X6) | s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,bool)) = s('type.semanticPrimitives.error_result'(X4),sK11(X6,X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),X6) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,sK10(X6,X4,bool)))) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X5,X4,bool))) )),
  inference(superposition,[],[f3073,f3058])).
fof(f12573,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)) = s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f3073,f207])).
fof(f12572,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X8,X5),X9) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6))) | s('type.semanticPrimitives.error_result'(X5),sK11(X9,X5,X8)) = s('type.semanticPrimitives.error_result'(X5),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X5),X6)),X7,'type.semanticPrimitives.error_result'(X5))) | s('type.semanticPrimitives.result'(X8,X5),X9) = s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rval_1'(s(X8,sK10(X9,X5,X8))))) )),
  inference(superposition,[],[f3073,f7120])).
fof(f12571,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X3,X0),X4) != s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1))) | s('type.semanticPrimitives.error_result'(X0),sK11(X4,X0,X3)) = s('type.semanticPrimitives.error_result'(X0),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2)) | s('type.semanticPrimitives.result'(X3,X0),X4) = s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rval_1'(s(X3,sK10(X4,X0,X3))))) )),
  inference(superposition,[],[f3073,f7548])).
fof(f12578,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.semanticPrimitives.result'(X17,X18),X19) = s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17)))) | s('type.semanticPrimitives.result'(X17,X18),X19) != s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),X21))) | s('type.semanticPrimitives.error_result'(X18),X21) = s('type.semanticPrimitives.error_result'(X18),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17))) )),
  inference(forward_demodulation,[],[f12570,f7120])).
fof(f12570,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.semanticPrimitives.result'(X17,X18),X19) != s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),X21))) | s('type.semanticPrimitives.error_result'(X18),X21) = s('type.semanticPrimitives.error_result'(X18),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17)) | s('type.semanticPrimitives.result'(X17,X18),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18))) = s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17))))) )),
  inference(superposition,[],[f3073,f7120])).
fof(f12577,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) != s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))) | s('type.semanticPrimitives.error_result'(X4),X6) = s('type.semanticPrimitives.error_result'(X4),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,bool))),X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X5,X4,bool))) )),
  inference(subsumption_resolution,[],[f12567,f213])).
fof(f12567,plain,(
  ( ! [X6,X4,X5] : (s('type.semanticPrimitives.result'(bool,X4),X5) != s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),X6))) | s('type.semanticPrimitives.error_result'(X4),X6) = s('type.semanticPrimitives.error_result'(X4),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,bool))),X4,bool)) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,bool)))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X4),sK11(X5,X4,bool))),X4,bool)))) | s('type.semanticPrimitives.result'(bool,X4),X5) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X5,X4,bool))) )),
  inference(superposition,[],[f3073,f3058])).
fof(f12576,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))),X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f12566,f213])).
fof(f12566,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X3) = s('type.semanticPrimitives.error_result'(X1),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))),X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))),X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f3073,f207])).
fof(f12327,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s(X0,sK10(X2,X1,X0)) = s(X0,sK10(X3,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X3,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f3085,f207])).
fof(f12326,plain,(
  ( ! [X158,X161,X159,X157,X160] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X157),X160),X161) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X157),X160),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X157),X158))) | s('type.semanticPrimitives.error_result'(X157),sK10(X161,X160,'type.semanticPrimitives.error_result'(X157))) = s('type.semanticPrimitives.error_result'(X157),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X157),X158)),X157,X159)) | s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X157),X160),X161) = s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X157),X160),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X160),sK11(X161,X160,'type.semanticPrimitives.error_result'(X157)))))) )),
  inference(superposition,[],[f3085,f7548])).
fof(f12323,plain,(
  ( ! [X146,X144,X147,X145,X148] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X144,X145),X147),X148) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X144,X145),X147),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X144,X145),X146))) | s('type.semanticPrimitives.result'(X144,X145),sK10(X148,X147,'type.semanticPrimitives.result'(X144,X145))) = s('type.semanticPrimitives.result'(X144,X145),'const.semanticPrimitives.Rval_1'(s(X144,sK10(X146,X145,X144)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X144,X145),X147),X148) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X144,X145),X147),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X147),sK11(X148,X147,'type.semanticPrimitives.result'(X144,X145))))) | s('type.semanticPrimitives.result'(X144,X145),X146) = s('type.semanticPrimitives.result'(X144,X145),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X145),sK11(X146,X145,X144))))) )),
  inference(superposition,[],[f3085,f207])).
fof(f12322,plain,(
  ( ! [X142,X140,X143,X141] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X140),X142),X143) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X140),X142),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X140),X141))) | s('type.semanticPrimitives.result'(bool,X140),sK10(X143,X142,'type.semanticPrimitives.result'(bool,X140))) = s('type.semanticPrimitives.result'(bool,X140),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X140),sK11(X141,X140,bool)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X140),X142),X143) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X140),X142),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X142),sK11(X143,X142,'type.semanticPrimitives.result'(bool,X140))))) | s('type.semanticPrimitives.result'(bool,X140),X141) = s('type.semanticPrimitives.result'(bool,X140),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X141,X140,bool))) )),
  inference(superposition,[],[f3085,f3058])).
fof(f12321,plain,(
  ( ! [X138,X136,X135,X139,X137] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X135,X136),X138),X139) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X135,X136),X138),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X135,X136),X137))) | s('type.semanticPrimitives.result'(X135,X136),sK10(X139,X138,'type.semanticPrimitives.result'(X135,X136))) = s('type.semanticPrimitives.result'(X135,X136),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X136),sK11(X137,X136,X135)))) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X135,X136),X138),X139) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X135,X136),X138),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X138),sK11(X139,X138,'type.semanticPrimitives.result'(X135,X136))))) | s('type.semanticPrimitives.result'(X135,X136),X137) = s('type.semanticPrimitives.result'(X135,X136),'const.semanticPrimitives.Rval_1'(s(X135,sK10(X137,X136,X135))))) )),
  inference(superposition,[],[f3085,f207])).
fof(f12309,plain,(
  ( ! [X80,X78,X76,X74,X72,X81,X79,X77,X75,X73] : (s('type.semanticPrimitives.result'(bool,X80),X81) != s('type.semanticPrimitives.result'(bool,X80),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X73,bool),happ(s(fun(X72,fun(X73,bool)),X74),s(X72,X78))),s(X73,X79))))) | s(bool,sK10(X81,X80,bool)) = s(bool,'const.evalProps.result_rel_4'(s(fun(X72,fun(X73,bool)),X74),s(fun(X75,fun(X76,bool)),X77),s('type.semanticPrimitives.result'(X72,X75),'const.semanticPrimitives.Rval_1'(s(X72,X78))),s('type.semanticPrimitives.result'(X73,X76),'const.semanticPrimitives.Rval_1'(s(X73,X79))))) | s('type.semanticPrimitives.result'(bool,X80),X81) = s('type.semanticPrimitives.result'(bool,X80),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X80),sK11(X81,X80,bool))))) )),
  inference(superposition,[],[f3085,f231])).
fof(f12300,plain,(
  ( ! [X39,X41,X38,X40] : (s('type.semanticPrimitives.result'(bool,X39),X40) != s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,sK10(X40,X39,bool)) | s('type.semanticPrimitives.result'(bool,X39),X40) = s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X39),sK11(X40,X39,bool)))) | s(bool,X38) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f3085,f273])).
fof(f12293,plain,(
  ( ! [X14,X12,X15,X13] : (s('type.semanticPrimitives.result'(bool,X14),X15) != s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rval_1'(s(bool,X13))) | s(bool,X12) = s(bool,sK10(X15,X14,bool)) | s('type.semanticPrimitives.result'(bool,X14),X15) = s('type.semanticPrimitives.result'(bool,X14),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X14),sK11(X15,X14,bool)))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f3085,f273])).
fof(f12292,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(bool,X9),X10) != s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X8) = s(bool,sK10(X10,X9,bool)) | s('type.semanticPrimitives.result'(bool,X9),X10) = s('type.semanticPrimitives.result'(bool,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK11(X10,X9,bool)))) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f3085,f273])).
fof(f12290,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X3),X4) != s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rval_1'(s(X0,X1))) | s(X0,sK10(X4,X3,X0)) = s(X0,sK10('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0)) | s('type.semanticPrimitives.result'(X0,X3),X4) = s('type.semanticPrimitives.result'(X0,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),sK11(X4,X3,X0))))) )),
  inference(superposition,[],[f3085,f7120])).
fof(f12332,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.semanticPrimitives.result'(X17,X18),X19) = s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17)))) | s('type.semanticPrimitives.result'(X17,X18),X19) != s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,X21))) | s(X17,X21) = s(X17,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17))) )),
  inference(forward_demodulation,[],[f12289,f7120])).
fof(f12289,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.semanticPrimitives.result'(X17,X18),X19) != s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rval_1'(s(X17,X21))) | s(X17,X21) = s(X17,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17)) | s('type.semanticPrimitives.result'(X17,X18),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18))) = s('type.semanticPrimitives.result'(X17,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X17,X18),X19)),X20,'type.semanticPrimitives.result'(X17,X18)),X18,X17))))) )),
  inference(superposition,[],[f3085,f7120])).
fof(f12331,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'(X7,X8),X9) != s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X10))) | s(X7,X10) = s(X7,sK10('const.semanticPrimitives.Rval_1'(s(X7,sK10(X9,X8,X7))),X8,X7)) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK11(X9,X8,X7))))) )),
  inference(subsumption_resolution,[],[f12286,f213])).
fof(f12286,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'(X7,X8),X9) != s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,X10))) | s(X7,X10) = s(X7,sK10('const.semanticPrimitives.Rval_1'(s(X7,sK10(X9,X8,X7))),X8,X7)) | s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rval_1'(s(X7,sK10(X9,X8,X7)))) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK11('const.semanticPrimitives.Rval_1'(s(X7,sK10(X9,X8,X7))),X8,X7)))) | s('type.semanticPrimitives.result'(X7,X8),X9) = s('type.semanticPrimitives.result'(X7,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),sK11(X9,X8,X7))))) )),
  inference(superposition,[],[f3085,f207])).
fof(f12074,plain,(
  ( ! [X132,X130,X131] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X130),bool),X132),s('type.semanticPrimitives.result'(bool,X130),X131)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X130),bool),X132),s('type.semanticPrimitives.result'(bool,X130),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X130),sK11(X131,X130,bool))),X132,'type.semanticPrimitives.result'(bool,X130))))) | s('type.semanticPrimitives.result'(bool,X130),X131) = s('type.semanticPrimitives.result'(bool,X130),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X131,X130,bool))) )),
  inference(superposition,[],[f471,f3058])).
fof(f12066,plain,(
  ( ! [X83,X81,X84,X82] : (s('type.semanticPrimitives.result'(bool,X81),X82) != s('type.semanticPrimitives.result'(bool,X81),X83) | s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X81),X84),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X81),X83))) = s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X81),X84),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X81),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X81),sK11(X82,X81,bool)))))) | s('type.semanticPrimitives.result'(bool,X81),X82) = s('type.semanticPrimitives.result'(bool,X81),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X82,X81,bool))) )),
  inference(superposition,[],[f210,f3058])).
fof(f12064,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X73),X75),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X73),X74))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X73),X75),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X73),X76))) | s('type.semanticPrimitives.result'(bool,X73),X76) = s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X73),sK11(X74,X73,bool)))) | s('type.semanticPrimitives.result'(bool,X73),X74) = s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X74,X73,bool))) )),
  inference(superposition,[],[f209,f3058])).
fof(f12063,plain,(
  ( ! [X70,X72,X71] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X70),bool),X72),s('type.semanticPrimitives.result'(bool,X70),X71)))) | s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),sK11(X71,X70,bool)))) = s('type.semanticPrimitives.result'(bool,X70),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),sK11(X71,X70,bool))),X72,'type.semanticPrimitives.result'(bool,X70))) | s('type.semanticPrimitives.result'(bool,X70),X71) = s('type.semanticPrimitives.result'(bool,X70),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X71,X70,bool))) )),
  inference(superposition,[],[f195,f3058])).
fof(f12062,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X66),bool),X68),s('type.semanticPrimitives.result'(bool,X66),X67)))) | p(s(bool,happ(s(fun('type.semanticPrimitives.result'(bool,X66),bool),X68),s('type.semanticPrimitives.result'(bool,X66),X69)))) | s('type.semanticPrimitives.result'(bool,X66),X69) != s('type.semanticPrimitives.result'(bool,X66),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X66),sK11(X67,X66,bool)))) | s('type.semanticPrimitives.result'(bool,X66),X67) = s('type.semanticPrimitives.result'(bool,X66),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X67,X66,bool))) )),
  inference(superposition,[],[f194,f3058])).
fof(f12059,plain,(
  ( ! [X59,X57,X54,X58,X56,X55,X53] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X55,bool)),X56),s(fun(X53,fun(X57,bool)),X58),s('type.semanticPrimitives.result'(bool,X53),X54),s('type.semanticPrimitives.result'(X55,X57),'const.semanticPrimitives.Rval_1'(s(X55,X59))))) | s('type.semanticPrimitives.result'(bool,X53),X54) = s('type.semanticPrimitives.result'(bool,X53),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X54,X53,bool))) )),
  inference(superposition,[],[f5104,f3058])).
fof(f12058,plain,(
  ( ! [X47,X52,X50,X48,X46,X51,X49] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X48,fun(bool,bool)),X49),s(fun(X50,fun(X46,bool)),X51),s('type.semanticPrimitives.result'(X48,X50),'const.semanticPrimitives.Rval_1'(s(X48,X52))),s('type.semanticPrimitives.result'(bool,X46),X47))) | s('type.semanticPrimitives.result'(bool,X46),X47) = s('type.semanticPrimitives.result'(bool,X46),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X47,X46,bool))) )),
  inference(superposition,[],[f3299,f3058])).
fof(f12057,plain,(
  ( ! [X45,X43,X44] : (s('type.semanticPrimitives.result'(bool,X43),X44) != s('type.semanticPrimitives.result'(bool,X43),X45) | s('type.semanticPrimitives.result'(bool,X43),X45) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),sK11(X45,X43,bool)))) | s('type.semanticPrimitives.result'(bool,X43),X44) = s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X44,X43,bool))) )),
  inference(superposition,[],[f3087,f3058])).
fof(f12056,plain,(
  ( ! [X39,X41,X42,X40] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X39),X41),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X39),X40))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X39),X41),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,X42))))) | s('type.semanticPrimitives.result'(bool,X39),X40) = s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X40,X39,bool))) )),
  inference(superposition,[],[f394,f3058])).
fof(f12053,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X20,bool)),X21),s(fun(X18,fun(X22,bool)),X23),s('type.semanticPrimitives.result'(bool,X18),X19),s('type.semanticPrimitives.result'(X20,X22),'const.semanticPrimitives.Rval_1'(s(X20,X24))))) | s('type.semanticPrimitives.result'(bool,X18),X19) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X19,X18,bool))) )),
  inference(superposition,[],[f229,f3058])).
fof(f12052,plain,(
  ( ! [X14,X12,X17,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X13,fun(bool,bool)),X14),s(fun(X15,fun(X11,bool)),X16),s('type.semanticPrimitives.result'(X13,X15),'const.semanticPrimitives.Rval_1'(s(X13,X17))),s('type.semanticPrimitives.result'(bool,X11),X12))) | s('type.semanticPrimitives.result'(bool,X11),X12) = s('type.semanticPrimitives.result'(bool,X11),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X12,X11,bool))) )),
  inference(superposition,[],[f228,f3058])).
fof(f12051,plain,(
  ( ! [X10,X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),X9) != s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X10))) | s('type.semanticPrimitives.result'(bool,X8),X9) = s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X9,X8,bool))) )),
  inference(superposition,[],[f213,f3058])).
fof(f12049,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X2),X3) != s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X4))) | s('type.semanticPrimitives.error_result'(X2),X4) = s('type.semanticPrimitives.error_result'(X2),sK11(X3,X2,bool)) | s('type.semanticPrimitives.result'(bool,X2),X3) = s('type.semanticPrimitives.result'(bool,X2),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X3,X2,bool))) )),
  inference(superposition,[],[f211,f3058])).
fof(f11893,plain,(
  ( ! [X6,X4,X5] : (s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK12(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK12(X5,X6,bool,X4))))) )),
  inference(trivial_inequality_removal,[],[f11884])).
fof(f11884,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X4,bool),X5) = s(fun(X4,bool),X6) | s(bool,'T_0') = s(bool,g(s(X4,sK12(X5,X6,bool,X4)))) | s(bool,'T_0') = s(bool,f(s(X4,sK12(X5,X6,bool,X4))))) )),
  inference(superposition,[],[f2927,f150])).
fof(f11623,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f5104,f207])).
fof(f11598,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(bool,X78) != s(bool,'const.evalProps.result_rel_4'(s(fun(X79,fun(bool,bool)),X80),s(fun(X81,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(X79,X81),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X81),X84))),s('type.semanticPrimitives.result'(bool,X82),'const.semanticPrimitives.Rval_1'(s(bool,X78))))) | s(bool,X78) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f5104,f273])).
fof(f11587,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,X7))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f5104,f207])).
fof(f11337,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,X7))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f3299,f207])).
fof(f11332,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f3299,f207])).
fof(f11307,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(bool,X78) != s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X79,bool)),X80),s(fun(X81,fun(X82,bool)),X83),s('type.semanticPrimitives.result'(bool,X81),'const.semanticPrimitives.Rval_1'(s(bool,X78))),s('type.semanticPrimitives.result'(X79,X82),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X82),X84))))) | s(bool,X78) = s(bool,X85) | s(bool,'T_0') = s(bool,X85)) )),
  inference(superposition,[],[f3299,f273])).
fof(f11051,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f11025,f147])).
fof(f11025,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,'F_0') != s(bool,X5) | s(bool,'T_0') = s(bool,X4) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f937,f273])).
fof(f10811,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f10802,f147])).
fof(f10802,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f934,f273])).
fof(f10212,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f10198,f147])).
fof(f10198,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X3,X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f469,f273])).
fof(f10196,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X90)))) | p(s(bool,happ(s(fun(bool,bool),X92),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(sK10('const.semanticPrimitives.Rval_1'(s(bool,X90)),X91,bool),X92,bool))) )),
  inference(superposition,[],[f469,f7120])).
fof(f10184,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,happ(s(fun(X40,bool),happ(s(fun(X39,fun(X40,bool)),X41),s(X39,X45))),s(X40,X46)))))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X39,fun(X40,bool)),X41),s(fun(X42,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(X39,X42),'const.semanticPrimitives.Rval_1'(s(X39,X45))),s('type.semanticPrimitives.result'(X40,X43),'const.semanticPrimitives.Rval_1'(s(X40,X46)))),X47,bool))) )),
  inference(superposition,[],[f469,f231])).
fof(f10182,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,X28)))) | p(s(bool,happ(s(fun(bool,bool),X29),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9('F_0',X29,bool)) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f469,f150])).
fof(f10174,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f469,f273])).
fof(f10173,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f469,f273])).
fof(f10205,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK9(X2,sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool))) )),
  inference(forward_demodulation,[],[f10171,f7120])).
fof(f10171,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X2,sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool))) )),
  inference(superposition,[],[f469,f7120])).
fof(f10064,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.semanticPrimitives.result'(X9,X10),X11) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10)),X10,X9)))) | s('type.semanticPrimitives.result'(X9,X10),X11) != s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X13)))) )),
  inference(forward_demodulation,[],[f10058,f7120])).
fof(f10058,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.semanticPrimitives.result'(X9,X10),X11) != s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X13))) | s('type.semanticPrimitives.result'(X9,X10),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10))) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10)),X10,X9))))) )),
  inference(superposition,[],[f3087,f7120])).
fof(f10063,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f10052,f7120])).
fof(f10052,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f7120,f3087])).
fof(f9952,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(superposition,[],[f394,f207])).
fof(f9948,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),X2))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f394,f207])).
fof(f9921,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),X3),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X5)))))))) )),
  inference(unit_resulting_resolution,[],[f394,f209])).
fof(f9617,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),X3) | s('type.semanticPrimitives.result'(X0,X1),X3) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X3,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f3075,f207])).
fof(f9625,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.semanticPrimitives.result'(X9,X10),X11) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10)),X10,X9)))) | s('type.semanticPrimitives.result'(X9,X10),X11) != s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,X13)))) )),
  inference(forward_demodulation,[],[f9589,f7120])).
fof(f9589,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s('type.semanticPrimitives.result'(X9,X10),X11) != s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,X13))) | s('type.semanticPrimitives.result'(X9,X10),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10))) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X9,X10),X11)),X12,'type.semanticPrimitives.result'(X9,X10)),X10,X9))))) )),
  inference(superposition,[],[f3075,f7120])).
fof(f9624,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(forward_demodulation,[],[f9584,f7120])).
fof(f9584,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2)))),X3,'type.semanticPrimitives.result'(X0,X1)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f7120,f3075])).
fof(f9382,plain,(
  ( ! [X57,X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s(bool,X56) != s(bool,happ(s(fun(X49,bool),happ(s(fun(X48,fun(X49,bool)),X50),s(X48,X54))),s(X49,X55))) | s('type.semanticPrimitives.result'(bool,X57),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X57),'const.semanticPrimitives.Rval_1'(s(bool,X56))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X48,fun(X49,bool)),X50),s(fun(X51,fun(X52,bool)),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rval_1'(s(X48,X54))),s('type.semanticPrimitives.result'(X49,X52),'const.semanticPrimitives.Rval_1'(s(X49,X55)))))) )),
  inference(superposition,[],[f429,f231])).
fof(f9170,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f9137])).
fof(f9137,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f428,f150])).
fof(f8708,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),X1) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'F_0') = s(bool,sK10(X1,X0,bool)) | s(bool,'T_0') = s(bool,X2) | s('type.semanticPrimitives.result'(bool,X0),X1) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK11(X1,X0,bool))))) )),
  inference(superposition,[],[f398,f207])).
fof(f8707,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X100))) != s('type.semanticPrimitives.result'(bool,X102),'const.semanticPrimitives.Rval_1'(s(bool,X103))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X100)),X101,bool)) | s(bool,'T_0') = s(bool,X103)) )),
  inference(superposition,[],[f398,f7120])).
fof(f8697,plain,(
  ( ! [X59,X57,X54,X52,X50,X58,X56,X55,X53,X51] : (s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,X59))) != s('type.semanticPrimitives.result'(bool,X58),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X51,bool),happ(s(fun(X50,fun(X51,bool)),X52),s(X50,X56))),s(X51,X57))))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X50,fun(X51,bool)),X52),s(fun(X53,fun(X54,bool)),X55),s('type.semanticPrimitives.result'(X50,X53),'const.semanticPrimitives.Rval_1'(s(X50,X56))),s('type.semanticPrimitives.result'(X51,X54),'const.semanticPrimitives.Rval_1'(s(X51,X57))))) | s(bool,'T_0') = s(bool,X59)) )),
  inference(superposition,[],[f398,f231])).
fof(f8684,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),X1) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,sK10(X1,X0,bool)) | s('type.semanticPrimitives.result'(bool,X0),X1) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK11(X1,X0,bool))))) )),
  inference(superposition,[],[f398,f207])).
fof(f8673,plain,(
  ( ! [X57,X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,X57))) != s('type.semanticPrimitives.result'(bool,X56),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X49,bool),happ(s(fun(X48,fun(X49,bool)),X50),s(X48,X54))),s(X49,X55))))) | s(bool,'F_0') = s(bool,X57) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X48,fun(X49,bool)),X50),s(fun(X51,fun(X52,bool)),X53),s('type.semanticPrimitives.result'(X48,X51),'const.semanticPrimitives.Rval_1'(s(X48,X54))),s('type.semanticPrimitives.result'(X49,X52),'const.semanticPrimitives.Rval_1'(s(X49,X55)))))) )),
  inference(superposition,[],[f398,f231])).
fof(f8513,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(bool,X0),X1) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X2) = s(bool,sK10(X1,X0,bool)) | s(bool,'T_0') = s(bool,X2) | s('type.semanticPrimitives.result'(bool,X0),X1) = s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),sK11(X1,X0,bool))))) )),
  inference(superposition,[],[f397,f207])).
fof(f8512,plain,(
  ( ! [X99,X97,X98,X96] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X96))) | s(bool,X99) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X96)),X97,bool)) | s(bool,'T_0') = s(bool,X99)) )),
  inference(superposition,[],[f397,f7120])).
fof(f8502,plain,(
  ( ! [X47,X54,X52,X50,X48,X46,X55,X53,X51,X49] : (s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X54),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X47,bool),happ(s(fun(X46,fun(X47,bool)),X48),s(X46,X52))),s(X47,X53))))) | s(bool,X55) = s(bool,'const.evalProps.result_rel_4'(s(fun(X46,fun(X47,bool)),X48),s(fun(X49,fun(X50,bool)),X51),s('type.semanticPrimitives.result'(X46,X49),'const.semanticPrimitives.Rval_1'(s(X46,X52))),s('type.semanticPrimitives.result'(X47,X50),'const.semanticPrimitives.Rval_1'(s(X47,X53))))) | s(bool,'T_0') = s(bool,X55)) )),
  inference(superposition,[],[f397,f231])).
fof(f8378,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f8364,f147])).
fof(f8364,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X4),s(X3,sK9(X5,X4,X3)))) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),X4),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f471,f273])).
fof(f8362,plain,(
  ( ! [X92,X90,X93,X91] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.error_result'(X90),bool),X93),s('type.semanticPrimitives.error_result'(X90),X91)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.error_result'(X90),bool),X93),s('type.semanticPrimitives.error_result'(X90),sK9(sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X90),X91)),X90,X92),X93,'type.semanticPrimitives.error_result'(X90)))))) )),
  inference(superposition,[],[f471,f7548])).
fof(f8361,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(X86,X87),bool),X89),s('type.semanticPrimitives.result'(X86,X87),X88)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(X86,X87),bool),X89),s('type.semanticPrimitives.result'(X86,X87),sK9('const.semanticPrimitives.Rval_1'(s(X86,sK10(X88,X87,X86))),X89,'type.semanticPrimitives.result'(X86,X87))))) | s('type.semanticPrimitives.result'(X86,X87),X88) = s('type.semanticPrimitives.result'(X86,X87),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X87),sK11(X88,X87,X86))))) )),
  inference(superposition,[],[f471,f207])).
fof(f8351,plain,(
  ( ! [X59,X57,X54,X52,X58,X56,X55,X53,X51] : (~p(s(bool,happ(s(fun(bool,bool),X59),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X59),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X51,fun(X52,bool)),X53),s(fun(X54,fun(X55,bool)),X56),s('type.semanticPrimitives.result'(X51,X54),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X54),X57))),s('type.semanticPrimitives.result'(X52,X55),'const.semanticPrimitives.Rval_1'(s(X52,X58)))),X59,bool))))) )),
  inference(superposition,[],[f471,f229])).
fof(f8350,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X42,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,happ(s(fun(X43,bool),happ(s(fun(X42,fun(X43,bool)),X44),s(X42,X48))),s(X43,X49)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X50),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X42,fun(X43,bool)),X44),s(fun(X45,fun(X46,bool)),X47),s('type.semanticPrimitives.result'(X42,X45),'const.semanticPrimitives.Rval_1'(s(X42,X48))),s('type.semanticPrimitives.result'(X43,X46),'const.semanticPrimitives.Rval_1'(s(X43,X49)))),X50,bool))))) )),
  inference(superposition,[],[f471,f231])).
fof(f8349,plain,(
  ( ! [X39,X37,X35,X33,X41,X38,X36,X34,X40] : (~p(s(bool,happ(s(fun(bool,bool),X41),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X33,fun(X34,bool)),X35),s(fun(X36,fun(X37,bool)),X38),s('type.semanticPrimitives.result'(X33,X36),'const.semanticPrimitives.Rval_1'(s(X33,X39))),s('type.semanticPrimitives.result'(X34,X37),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X37),X40)))),X41,bool))))) )),
  inference(superposition,[],[f471,f228])).
fof(f8348,plain,(
  ( ! [X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X31)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X32),s(bool,sK9('F_0',X32,bool)))) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f471,f150])).
fof(f8346,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X25)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X26),s(bool,sK9('T_0',X26,bool)))) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f471,f273])).
fof(f8340,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X11),s(bool,sK9(X9,X11,bool)))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f471,f273])).
fof(f8339,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X7),s(bool,sK9(X6,X7,bool)))) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f471,f273])).
fof(f8338,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X5),s(bool,sK9(X4,X5,bool)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f471,f150])).
fof(f8337,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X3),s(X0,X1)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X3),s(X0,sK9(sK10('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0),X3,X0))))) )),
  inference(superposition,[],[f471,f7120])).
fof(f8371,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X3,sK10('const.semanticPrimitives.Rval_1'(s(fun(X0,bool),X1)),X2,fun(X0,bool)),X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(forward_demodulation,[],[f8336,f7120])).
fof(f8336,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK10('const.semanticPrimitives.Rval_1'(s(fun(X0,bool),X1)),X2,fun(X0,bool))),s(X0,sK9(X3,sK10('const.semanticPrimitives.Rval_1'(s(fun(X0,bool),X1)),X2,fun(X0,bool)),X0))))) )),
  inference(superposition,[],[f471,f7120])).
fof(f8048,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f388,f209])).
fof(f8042,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') = s(bool,sK9('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f8024,f147])).
fof(f8024,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK9('F_0',X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f369,f273])).
fof(f8002,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'F_0') = s(bool,sK9('F_0',sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f369,f7120])).
fof(f7823,plain,(
  ( ! [X78,X76,X79,X77,X75] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X75),X78),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X75),X76))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.error_result'(X75),X78),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X75),X79))) | s('type.semanticPrimitives.error_result'(X75),X79) = s('type.semanticPrimitives.error_result'(X75),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X75),X76)),X75,X77))) )),
  inference(superposition,[],[f209,f7548])).
fof(f7837,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.semanticPrimitives.error_result'(X71),X72) = s('type.semanticPrimitives.error_result'(X71),sK9(sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X72)),X71,X73),X74,'type.semanticPrimitives.error_result'(X71))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.error_result'(X71),bool),X74),s('type.semanticPrimitives.error_result'(X71),X72))))) )),
  inference(forward_demodulation,[],[f7822,f7548])).
fof(f7822,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.error_result'(X71),bool),X74),s('type.semanticPrimitives.error_result'(X71),X72)))) | s('type.semanticPrimitives.error_result'(X71),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X72)),X71,X73)) = s('type.semanticPrimitives.error_result'(X71),sK9(sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X72)),X71,X73),X74,'type.semanticPrimitives.error_result'(X71)))) )),
  inference(superposition,[],[f195,f7548])).
fof(f7812,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6))) != s('type.semanticPrimitives.result'(X8,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X9))) | s('type.semanticPrimitives.error_result'(X5),X9) = s('type.semanticPrimitives.error_result'(X5),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6)),X5,X7))) )),
  inference(superposition,[],[f211,f7548])).
fof(f7803,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK9(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f7798,f147])).
fof(f7798,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X3) = s(bool,sK9(X3,X2,bool)) | s(bool,'T_0') = s(bool,X3) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f368,f273])).
fof(f7790,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,X2) = s(bool,sK9(X2,sK10('const.semanticPrimitives.Rval_1'(s(fun(bool,bool),X0)),X1,fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f368,f7120])).
fof(f7552,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6))) != s('type.semanticPrimitives.result'(X4,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))) | s('type.semanticPrimitives.error_result'(X5),X7) = s('type.semanticPrimitives.error_result'(X5),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X6)),X5,X4))) )),
  inference(superposition,[],[f211,f3056])).
fof(f7548,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.error_result'(X0),X1) = s('type.semanticPrimitives.error_result'(X0),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X1)),X0,X2))) )),
  inference(unit_resulting_resolution,[],[f3056,f211])).
fof(f7432,plain,(
  ( ! [X204,X202,X200,X203,X201] : (s('type.semanticPrimitives.result'(X203,X200),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X200),X201))) != s('type.semanticPrimitives.result'(X203,X200),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X200),X204))) | s('type.semanticPrimitives.error_result'(X200),X204) = s('type.semanticPrimitives.error_result'(X200),sK10('const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.error_result'(X200),X201)),X202,'type.semanticPrimitives.error_result'(X200)))) )),
  inference(superposition,[],[f211,f7120])).
fof(f7430,plain,(
  ( ! [X196,X194,X197,X195] : (~p(s(bool,happ(s(fun(X194,bool),X195),s(X194,X197)))) | s(X194,X197) = s(X194,sK9(X197,sK10('const.semanticPrimitives.Rval_1'(s(fun(X194,bool),X195)),X196,fun(X194,bool)),X194))) )),
  inference(superposition,[],[f195,f7120])).
fof(f7469,plain,(
  ( ! [X191,X192,X190,X193] : (~p(s(bool,happ(s(fun(X190,bool),X191),s(X190,X193)))) | p(s(bool,happ(s(fun(X190,bool),X191),s(X190,sK9(X193,sK10('const.semanticPrimitives.Rval_1'(s(fun(X190,bool),X191)),X192,fun(X190,bool)),X190)))))) )),
  inference(forward_demodulation,[],[f7429,f7120])).
fof(f7429,plain,(
  ( ! [X191,X192,X190,X193] : (p(s(bool,happ(s(fun(X190,bool),X191),s(X190,sK9(X193,sK10('const.semanticPrimitives.Rval_1'(s(fun(X190,bool),X191)),X192,fun(X190,bool)),X190))))) | ~p(s(bool,happ(s(fun(X190,bool),sK10('const.semanticPrimitives.Rval_1'(s(fun(X190,bool),X191)),X192,fun(X190,bool))),s(X190,X193))))) )),
  inference(superposition,[],[f196,f7120])).
fof(f7396,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.semanticPrimitives.result'(X12,X15),'const.semanticPrimitives.Rval_1'(s(X12,X13))) != s('type.semanticPrimitives.result'(X12,X15),'const.semanticPrimitives.Rval_1'(s(X12,X16))) | s(X12,X16) = s(X12,sK10('const.semanticPrimitives.Rval_1'(s(X12,X13)),X14,X12))) )),
  inference(superposition,[],[f209,f7120])).
fof(f7455,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X9) = s(X8,sK9(sK10('const.semanticPrimitives.Rval_1'(s(X8,X9)),X10,X8),X11,X8)) | ~p(s(bool,happ(s(fun(X8,bool),X11),s(X8,X9))))) )),
  inference(forward_demodulation,[],[f7395,f7120])).
fof(f7395,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),X11),s(X8,X9)))) | s(X8,sK10('const.semanticPrimitives.Rval_1'(s(X8,X9)),X10,X8)) = s(X8,sK9(sK10('const.semanticPrimitives.Rval_1'(s(X8,X9)),X10,X8),X11,X8))) )),
  inference(superposition,[],[f195,f7120])).
fof(f7391,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X6,bool))) )),
  inference(superposition,[],[f7120,f273])).
fof(f7390,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X4) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f7120,f273])).
fof(f7389,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool))) )),
  inference(superposition,[],[f7120,f150])).
fof(f7156,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,X5))) != s('type.semanticPrimitives.result'(X3,X4),'const.semanticPrimitives.Rval_1'(s(X3,X6))) | s(X3,X6) = s(X3,sK10('const.semanticPrimitives.Rval_1'(s(X3,X5)),X4,X3))) )),
  inference(superposition,[],[f209,f3057])).
fof(f7148,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X5))) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X6,bool))) )),
  inference(superposition,[],[f3057,f273])).
fof(f7147,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X2))) | s(bool,X4) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f3057,f273])).
fof(f7146,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool))) )),
  inference(superposition,[],[f3057,f150])).
fof(f7120,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,sK10('const.semanticPrimitives.Rval_1'(s(X0,X1)),X2,X0))) )),
  inference(unit_resulting_resolution,[],[f3057,f209])).
fof(f388,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) )),
  inference(unit_resulting_resolution,[],[f256,f209])).
fof(f5665,plain,(
  ( ! [X428,X430,X436,X432,X434,X429,X431,X437,X433,X435] : (s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rval_1'(s(bool,X437))) != s('type.semanticPrimitives.result'(bool,X436),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X429,bool),happ(s(fun(X428,fun(X429,bool)),X430),s(X428,X434))),s(X429,X435))))) | s(bool,X437) = s(bool,'const.evalProps.result_rel_4'(s(fun(X428,fun(X429,bool)),X430),s(fun(X431,fun(X432,bool)),X433),s('type.semanticPrimitives.result'(X428,X431),'const.semanticPrimitives.Rval_1'(s(X428,X434))),s('type.semanticPrimitives.result'(X429,X432),'const.semanticPrimitives.Rval_1'(s(X429,X435)))))) )),
  inference(superposition,[],[f209,f231])).
fof(f5735,plain,(
  ( ! [X420,X422,X424,X426,X421,X423,X419,X425,X427] : (s(bool,happ(s(fun(X420,bool),happ(s(fun(X419,fun(X420,bool)),X421),s(X419,X425))),s(X420,X426))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X419,fun(X420,bool)),X421),s(fun(X422,fun(X423,bool)),X424),s('type.semanticPrimitives.result'(X419,X422),'const.semanticPrimitives.Rval_1'(s(X419,X425))),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rval_1'(s(X420,X426)))),X427,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X427),s(bool,happ(s(fun(X420,bool),happ(s(fun(X419,fun(X420,bool)),X421),s(X419,X425))),s(X420,X426))))))) )),
  inference(forward_demodulation,[],[f5664,f231])).
fof(f5664,plain,(
  ( ! [X420,X422,X424,X426,X421,X423,X419,X425,X427] : (~p(s(bool,happ(s(fun(bool,bool),X427),s(bool,happ(s(fun(X420,bool),happ(s(fun(X419,fun(X420,bool)),X421),s(X419,X425))),s(X420,X426)))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X419,fun(X420,bool)),X421),s(fun(X422,fun(X423,bool)),X424),s('type.semanticPrimitives.result'(X419,X422),'const.semanticPrimitives.Rval_1'(s(X419,X425))),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rval_1'(s(X420,X426))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X419,fun(X420,bool)),X421),s(fun(X422,fun(X423,bool)),X424),s('type.semanticPrimitives.result'(X419,X422),'const.semanticPrimitives.Rval_1'(s(X419,X425))),s('type.semanticPrimitives.result'(X420,X423),'const.semanticPrimitives.Rval_1'(s(X420,X426)))),X427,bool))) )),
  inference(superposition,[],[f195,f231])).
fof(f5600,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X25,X32] : (s(bool,X33) = s(bool,happ(s(fun(X26,bool),happ(s(fun(X25,fun(X26,bool)),X27),s(X25,X31))),s(X26,X32))) | s(bool,'T_0') = s(bool,X33) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X25,fun(X26,bool)),X27),s(fun(X28,fun(X29,bool)),X30),s('type.semanticPrimitives.result'(X25,X28),'const.semanticPrimitives.Rval_1'(s(X25,X31))),s('type.semanticPrimitives.result'(X26,X29),'const.semanticPrimitives.Rval_1'(s(X26,X32)))))) )),
  inference(superposition,[],[f231,f273])).
fof(f5599,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),happ(s(fun(X16,fun(X17,bool)),X18),s(X16,X22))),s(X17,X23))) | s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rval_1'(s(X16,X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rval_1'(s(X17,X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f231,f273])).
fof(f5598,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rval_1'(s(X8,X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rval_1'(s(X9,X15))))) | s(bool,'F_0') = s(bool,happ(s(fun(X9,bool),happ(s(fun(X8,fun(X9,bool)),X10),s(X8,X14))),s(X9,X15)))) )),
  inference(superposition,[],[f231,f150])).
fof(f5597,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,happ(s(fun(X0,bool),happ(s(fun(X3,fun(X0,bool)),X4),s(X3,X5))),s(X0,sK10(X2,X1,X0)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X6,fun(X1,bool)),X7),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rval_1'(s(X3,X5))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f231,f207])).
fof(f5556,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,happ(s(fun(X3,bool),happ(s(fun(X0,fun(X3,bool)),X4),s(X0,sK10(X2,X1,X0)))),s(X3,X5))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X6,bool)),X7),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X6),'const.semanticPrimitives.Rval_1'(s(X3,X5))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f231,f207])).
fof(f5050,plain,(
  ( ! [X412,X414,X408,X410,X407,X413,X415,X409,X411,X406] : (s('type.semanticPrimitives.result'(bool,X414),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X414),'const.semanticPrimitives.Rval_1'(s(bool,X415))) | s(bool,X415) = s(bool,'const.evalProps.result_rel_4'(s(fun(X406,fun(X407,bool)),X408),s(fun(X409,fun(X410,bool)),X411),s('type.semanticPrimitives.result'(X406,X409),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X409),X412))),s('type.semanticPrimitives.result'(X407,X410),'const.semanticPrimitives.Rval_1'(s(X407,X413)))))) )),
  inference(superposition,[],[f209,f229])).
fof(f5120,plain,(
  ( ! [X397,X399,X405,X401,X403,X398,X404,X400,X402] : (~p(s(bool,happ(s(fun(bool,bool),X405),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X397,fun(X398,bool)),X399),s(fun(X400,fun(X401,bool)),X402),s('type.semanticPrimitives.result'(X397,X400),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X400),X403))),s('type.semanticPrimitives.result'(X398,X401),'const.semanticPrimitives.Rval_1'(s(X398,X404)))),X405,bool))) )),
  inference(forward_demodulation,[],[f5049,f229])).
fof(f5049,plain,(
  ( ! [X397,X399,X405,X401,X403,X398,X404,X400,X402] : (~p(s(bool,happ(s(fun(bool,bool),X405),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X397,fun(X398,bool)),X399),s(fun(X400,fun(X401,bool)),X402),s('type.semanticPrimitives.result'(X397,X400),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X400),X403))),s('type.semanticPrimitives.result'(X398,X401),'const.semanticPrimitives.Rval_1'(s(X398,X404))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X397,fun(X398,bool)),X399),s(fun(X400,fun(X401,bool)),X402),s('type.semanticPrimitives.result'(X397,X400),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X400),X403))),s('type.semanticPrimitives.result'(X398,X401),'const.semanticPrimitives.Rval_1'(s(X398,X404)))),X405,bool))) )),
  inference(superposition,[],[f195,f229])).
fof(f5104,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rval_1'(s(X9,X15)))))) )),
  inference(subsumption_resolution,[],[f5009,f149])).
fof(f5009,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X11),X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rval_1'(s(X9,X15)))))) )),
  inference(superposition,[],[f152,f229])).
fof(f5097,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rval_1'(s(X17,X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f4993,f256])).
fof(f4993,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X19),X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rval_1'(s(X17,X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f229,f273])).
fof(f4992,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(X0,bool)),X4),s(fun(X5,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))),s('type.semanticPrimitives.result'(X0,X1),X2))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f229,f207])).
fof(f4984,plain,(
  ( ! [X251,X249,X246,X252,X250,X248,X247] : (s(bool,X246) = s(bool,'const.evalProps.result_rel_4'(s(fun(X247,fun(bool,bool)),X248),s(fun(X249,fun(X250,bool)),X251),s('type.semanticPrimitives.result'(X247,X249),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X249),X252))),s('type.semanticPrimitives.result'(bool,X250),'const.semanticPrimitives.Rval_1'(s(bool,X246))))) | s(bool,'T_0') = s(bool,X246)) )),
  inference(superposition,[],[f229,f150])).
fof(f4953,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X5,fun(X8,bool)),X9),s(fun(X6,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(X5,X6),X7),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12))))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X7,X6,X5))))) )),
  inference(superposition,[],[f229,f207])).
fof(f3261,plain,(
  ( ! [X333,X335,X329,X331,X337,X332,X334,X328,X330,X336] : (s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,X337))) | s(bool,X337) = s(bool,'const.evalProps.result_rel_4'(s(fun(X328,fun(X329,bool)),X330),s(fun(X331,fun(X332,bool)),X333),s('type.semanticPrimitives.result'(X328,X331),'const.semanticPrimitives.Rval_1'(s(X328,X334))),s('type.semanticPrimitives.result'(X329,X332),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X332),X335)))))) )),
  inference(superposition,[],[f209,f228])).
fof(f3313,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X320,X322,X319] : (~p(s(bool,happ(s(fun(bool,bool),X327),s(bool,'F_0')))) | s(bool,'F_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X319,fun(X320,bool)),X321),s(fun(X322,fun(X323,bool)),X324),s('type.semanticPrimitives.result'(X319,X322),'const.semanticPrimitives.Rval_1'(s(X319,X325))),s('type.semanticPrimitives.result'(X320,X323),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X323),X326)))),X327,bool))) )),
  inference(forward_demodulation,[],[f3260,f228])).
fof(f3260,plain,(
  ( ! [X325,X327,X321,X323,X324,X326,X320,X322,X319] : (~p(s(bool,happ(s(fun(bool,bool),X327),s(bool,'F_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X319,fun(X320,bool)),X321),s(fun(X322,fun(X323,bool)),X324),s('type.semanticPrimitives.result'(X319,X322),'const.semanticPrimitives.Rval_1'(s(X319,X325))),s('type.semanticPrimitives.result'(X320,X323),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X323),X326))))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(X319,fun(X320,bool)),X321),s(fun(X322,fun(X323,bool)),X324),s('type.semanticPrimitives.result'(X319,X322),'const.semanticPrimitives.Rval_1'(s(X319,X325))),s('type.semanticPrimitives.result'(X320,X323),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X323),X326)))),X327,bool))) )),
  inference(superposition,[],[f195,f228])).
fof(f3299,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rval_1'(s(X8,X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X15)))))) )),
  inference(subsumption_resolution,[],[f3227,f149])).
fof(f3227,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X9,bool)),X10),s(fun(X11,fun(X12,bool)),X13),s('type.semanticPrimitives.result'(X8,X11),'const.semanticPrimitives.Rval_1'(s(X8,X14))),s('type.semanticPrimitives.result'(X9,X12),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X12),X15)))))) )),
  inference(superposition,[],[f152,f228])).
fof(f3296,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rval_1'(s(X16,X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f3216,f256])).
fof(f3216,plain,(
  ( ! [X24,X23,X21,X19,X17,X22,X20,X18,X16] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X24) = s(bool,'const.evalProps.result_rel_4'(s(fun(X16,fun(X17,bool)),X18),s(fun(X19,fun(X20,bool)),X21),s('type.semanticPrimitives.result'(X16,X19),'const.semanticPrimitives.Rval_1'(s(X16,X22))),s('type.semanticPrimitives.result'(X17,X20),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X20),X23))))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f228,f273])).
fof(f3215,plain,(
  ( ! [X6,X12,X10,X8,X7,X5,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(X5,bool)),X9),s(fun(X10,fun(X6,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12))),s('type.semanticPrimitives.result'(X5,X6),X7))) | s('type.semanticPrimitives.result'(X5,X6),X7) = s('type.semanticPrimitives.result'(X5,X6),'const.semanticPrimitives.Rval_1'(s(X5,sK10(X7,X6,X5))))) )),
  inference(superposition,[],[f228,f207])).
fof(f3212,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X4),s(fun(X1,fun(X5,bool)),X6),s('type.semanticPrimitives.result'(X0,X1),X2),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X5),X7))))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f228,f207])).
fof(f3205,plain,(
  ( ! [X177,X175,X180,X178,X176,X174,X179] : (s(bool,X174) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X175,bool)),X176),s(fun(X177,fun(X178,bool)),X179),s('type.semanticPrimitives.result'(bool,X177),'const.semanticPrimitives.Rval_1'(s(bool,X174))),s('type.semanticPrimitives.result'(X175,X178),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X178),X180))))) | s(bool,'T_0') = s(bool,X174)) )),
  inference(superposition,[],[f228,f150])).
fof(f3094,plain,(
  ( ! [X30,X33,X31,X29,X32] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X31))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X29,X30),X32),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X29,X30),X33))) | s('type.semanticPrimitives.result'(X29,X30),X33) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rval_1'(s(X29,sK10(X31,X30,X29)))) | s('type.semanticPrimitives.result'(X29,X30),X31) = s('type.semanticPrimitives.result'(X29,X30),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X30),sK11(X31,X30,X29))))) )),
  inference(superposition,[],[f209,f207])).
fof(f3087,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.semanticPrimitives.result'(X8,X9),X10) != s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X11))) | s('type.semanticPrimitives.result'(X8,X9),X10) = s('type.semanticPrimitives.result'(X8,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),sK11(X10,X9,X8))))) )),
  inference(superposition,[],[f213,f207])).
fof(f3085,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) | s(X0,X3) = s(X0,sK10(X2,X1,X0)) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0))))) )),
  inference(superposition,[],[f209,f207])).
fof(f3078,plain,(
  ( ! [X26,X24,X23,X25,X22] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X22,X23),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X22,X23),X24))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X22,X23),X25),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X22,X23),X26))) | s('type.semanticPrimitives.result'(X22,X23),X26) = s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X23),sK11(X24,X23,X22)))) | s('type.semanticPrimitives.result'(X22,X23),X24) = s('type.semanticPrimitives.result'(X22,X23),'const.semanticPrimitives.Rval_1'(s(X22,sK10(X24,X23,X22))))) )),
  inference(superposition,[],[f209,f207])).
fof(f3075,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.semanticPrimitives.result'(X9,X10),X11) != s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,X12))) | s('type.semanticPrimitives.result'(X9,X10),X11) = s('type.semanticPrimitives.result'(X9,X10),'const.semanticPrimitives.Rval_1'(s(X9,sK10(X11,X10,X9))))) )),
  inference(superposition,[],[f213,f207])).
fof(f3073,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.semanticPrimitives.result'(X1,X2),X3) != s('type.semanticPrimitives.result'(X1,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X4))) | s('type.semanticPrimitives.error_result'(X2),X4) = s('type.semanticPrimitives.error_result'(X2),sK11(X3,X2,X1)) | s('type.semanticPrimitives.result'(X1,X2),X3) = s('type.semanticPrimitives.result'(X1,X2),'const.semanticPrimitives.Rval_1'(s(X1,sK10(X3,X2,X1))))) )),
  inference(superposition,[],[f211,f207])).
fof(f3060,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X6),X5) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s('type.semanticPrimitives.result'(bool,X6),X5) = s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X6),sK11(X5,X6,bool)))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK10(X5,X6,bool))) )),
  inference(superposition,[],[f207,f273])).
fof(f3059,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X3),X2) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X3),X2) = s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),sK11(X2,X3,bool)))) | s(bool,X4) = s(bool,sK10(X2,X3,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f207,f273])).
fof(f3058,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),X0) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X0,X1,bool)))) | s('type.semanticPrimitives.result'(bool,X1),X0) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK10(X0,X1,bool))) )),
  inference(superposition,[],[f207,f150])).
fof(f3056,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f213,f207])).
fof(f3057,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10('const.semanticPrimitives.Rval_1'(s(X0,X2)),X1,X0))))) )),
  inference(unit_resulting_resolution,[],[f213,f207])).
fof(f2929,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK12(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK12(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f208,f273])).
fof(f2928,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK12(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK12(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f208,f273])).
fof(f2927,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK12(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK12(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f208,f150])).
fof(f2915,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK12(X7,X8,X9,bool))) )),
  inference(superposition,[],[f208,f273])).
fof(f2914,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK12(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f208,f273])).
fof(f2913,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,X2,bool))) )),
  inference(superposition,[],[f208,f150])).
fof(f149,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.evalProps.result_rel_Rerr|49|',aHL_FALSITY)).
fof(f156,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X17] : (s(bool,'F_0') = s(bool,X17) <=> ~p(s(bool,X17)))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.EQ_CLAUSES|split|2')).
fof(f157,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f106])).
fof(f228,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1,fun(X2,bool)),X5),s(fun(X0,fun(X3,bool)),X4),s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X7))),s('type.semanticPrimitives.result'(X2,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X6)))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1,fun(X2,bool)),X5),s(fun(X0,fun(X3,bool)),X4),s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X7))),s('type.semanticPrimitives.result'(X2,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X6)))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X1,fun(X2,bool)),X5),s(fun(X0,fun(X3,bool)),X4),s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X7))),s('type.semanticPrimitives.result'(X2,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X6)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X8,X6,X7,X9] : ! [X31,X32,X33,X34] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X32),s(fun(X8,fun(X9,bool)),X31),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rval_1'(s(X6,X34))),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X33)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.evalProps.result_rel_def|split|2')).
fof(f229,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X5),s(fun(X1,fun(X2,bool)),X4),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X7))),s('type.semanticPrimitives.result'(X3,X2),'const.semanticPrimitives.Rval_1'(s(X3,X6)))))) )),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X5),s(fun(X1,fun(X2,bool)),X4),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X7))),s('type.semanticPrimitives.result'(X3,X2),'const.semanticPrimitives.Rval_1'(s(X3,X6)))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X3,bool)),X5),s(fun(X1,fun(X2,bool)),X4),s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X7))),s('type.semanticPrimitives.result'(X3,X2),'const.semanticPrimitives.Rval_1'(s(X3,X6)))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X6,X8,X9,X7] : ! [X31,X32,X35,X36] : s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X32),s(fun(X8,fun(X9,bool)),X31),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X36))),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rval_1'(s(X7,X35)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.evalProps.result_rel_def|split|3')).
fof(f368,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,X1) = s(bool,sK9(X1,X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f195,f150])).
fof(f369,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK9('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f195,f150])).
fof(f397,plain,(
  ( ! [X4,X2,X3] : (s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X3),'const.semanticPrimitives.Rval_1'(s(bool,X4))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f209,f150])).
fof(f398,plain,(
  ( ! [X6,X7,X5] : (s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X5))) != s('type.semanticPrimitives.result'(bool,X6),'const.semanticPrimitives.Rval_1'(s(bool,X7))) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f209,f150])).
fof(f428,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,X3) | s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X2))) = s('type.semanticPrimitives.result'(bool,X4),'const.semanticPrimitives.Rval_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f210,f150])).
fof(f429,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,X6) | s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X7),'const.semanticPrimitives.Rval_1'(s(bool,X6))) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f210,f150])).
fof(f469,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(X0,X1,bool))) )),
  inference(superposition,[],[f196,f150])).
fof(f934,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) | s(bool,X18) != s(bool,X20) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f194,f150])).
fof(f937,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),X30),s(bool,X29)))) | p(s(bool,happ(s(fun(bool,bool),X30),s(bool,X31)))) | s(bool,'F_0') != s(bool,X31) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f194,f150])).
fof(f231,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,happ(s(fun(X3,bool),happ(s(fun(X2,fun(X3,bool)),X7),s(X2,X5))),s(X3,X4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X7),s(fun(X0,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X2,X0),'const.semanticPrimitives.Rval_1'(s(X2,X5))),s('type.semanticPrimitives.result'(X3,X1),'const.semanticPrimitives.Rval_1'(s(X3,X4)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(bool,happ(s(fun(X3,bool),happ(s(fun(X2,fun(X3,bool)),X7),s(X2,X5))),s(X3,X4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X7),s(fun(X0,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X2,X0),'const.semanticPrimitives.Rval_1'(s(X2,X5))),s('type.semanticPrimitives.result'(X3,X1),'const.semanticPrimitives.Rval_1'(s(X3,X4)))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(bool,happ(s(fun(X3,bool),happ(s(fun(X2,fun(X3,bool)),X7),s(X2,X5))),s(X3,X4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X2,fun(X3,bool)),X7),s(fun(X0,fun(X1,bool)),X6),s('type.semanticPrimitives.result'(X2,X0),'const.semanticPrimitives.Rval_1'(s(X2,X5))),s('type.semanticPrimitives.result'(X3,X1),'const.semanticPrimitives.Rval_1'(s(X3,X4)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X8,X9,X6,X7] : ! [X25,X26,X27,X13] : s(bool,happ(s(fun(X7,bool),happ(s(fun(X6,fun(X7,bool)),X13),s(X6,X26))),s(X7,X25))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X13),s(fun(X8,fun(X9,bool)),X27),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rval_1'(s(X6,X26))),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rval_1'(s(X7,X25)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.evalProps.result_rel_def|split|0')).
fof(f471,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f470,f149])).
fof(f470,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) )),
  inference(superposition,[],[f196,f150])).
fof(f196,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK9(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f131])).
fof(f131,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X23,X24] : (? [X18] : (s(X6,X18) = s(X6,X24) & p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X18))))) <=> p(s(bool,happ(s(fun(X6,bool),X23),s(X6,X24)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.UNWIND_THM2')).
fof(f194,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f133])).
fof(f195,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK9(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f133])).
fof(f948,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f940,f147])).
fof(f940,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | s(X0,X2) != s(X0,X3) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f194,f273])).
fof(f591,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X100),s(bool,X99)))) | s(bool,X98) = s(bool,sK9(X98,X100,bool)) | s(bool,'T_0') = s(bool,X99) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f195,f273])).
fof(f593,plain,(
  ( ! [X107,X105,X106] : (p(s(bool,happ(s(fun(bool,bool),X106),s(bool,X107)))) | ~p(s(bool,happ(s(fun(bool,bool),X106),s(bool,X105)))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,sK9(X105,X106,bool))) )),
  inference(superposition,[],[f196,f273])).
fof(f652,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun(bool,bool),X70),s(bool,X69)))) | s(bool,'T_0') = s(bool,sK9('T_0',X70,bool)) | s(bool,X69) = s(bool,X71) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f195,f273])).
fof(f690,plain,(
  ( ! [X101,X102,X100] : (p(s(bool,happ(s(fun(bool,bool),X101),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X101),s(bool,X100)))) | s(bool,X102) = s(bool,sK9(X100,X101,bool)) | s(bool,'T_0') = s(bool,X102)) )),
  inference(superposition,[],[f196,f273])).
fof(f930,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | s(bool,X2) != s(bool,X4) | s(bool,X2) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f194,f273])).
fof(f932,plain,(
  ( ! [X12,X10,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X11)))) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X13)))) | s(bool,X10) != s(bool,X13) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f194,f273])).
fof(f935,plain,(
  ( ! [X24,X23,X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X21)))) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) | s(bool,'T_0') != s(bool,X23) | s(bool,X21) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f194,f273])).
fof(f688,plain,(
  ( ! [X94,X95,X93] : (~p(s(bool,happ(s(fun(bool,bool),X94),s(bool,'T_0')))) | s(bool,X93) = s(bool,sK9(X93,X94,bool)) | s(bool,X93) = s(bool,X95) | s(bool,'T_0') = s(bool,X95)) )),
  inference(superposition,[],[f195,f273])).
fof(f686,plain,(
  ( ! [X88,X87,X85,X86] : (s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X86),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,X85) = s(bool,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f209,f273])).
fof(f684,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,'T_0') != s(bool,X78) | s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,X77))) = s('type.semanticPrimitives.result'(bool,X79),'const.semanticPrimitives.Rval_1'(s(bool,X78))) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f210,f273])).
fof(f921,plain,(
  ( ! [X68,X66,X67,X65] : (s(X65,X67) = s(X65,sK9(X67,X66,X65)) | s(bool,X68) = s(bool,happ(s(fun(X65,bool),X66),s(X65,X67))) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f680,f147])).
fof(f680,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | s(X65,X67) = s(X65,sK9(X67,X66,X65)) | s(bool,X68) = s(bool,happ(s(fun(X65,bool),X66),s(X65,X67))) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f195,f273])).
fof(f919,plain,(
  ( ! [X24,X23,X22] : (s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f662,f147])).
fof(f662,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s(bool,X22) != s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f276,f273])).
fof(f918,plain,(
  ( ! [X21,X19,X20] : (p(s(bool,X20)) | s(bool,X19) != s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f661,f147])).
fof(f661,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,X20)) | s(bool,X19) != s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f202,f273])).
fof(f917,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f660,f147])).
fof(f660,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f200,f273])).
fof(f648,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,X53) != s(bool,X54) | s('type.semanticPrimitives.result'(bool,X55),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X55),'const.semanticPrimitives.Rval_1'(s(bool,X54))) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f210,f273])).
fof(f589,plain,(
  ( ! [X92,X90,X93,X91] : (s('type.semanticPrimitives.result'(bool,X92),'const.semanticPrimitives.Rval_1'(s(bool,X91))) != s('type.semanticPrimitives.result'(bool,X92),'const.semanticPrimitives.Rval_1'(s(bool,X93))) | s(bool,X90) = s(bool,X93) | s(bool,'T_0') = s(bool,X91) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f209,f273])).
fof(f587,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X83) != s(bool,X84) | s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rval_1'(s(bool,X82))) = s('type.semanticPrimitives.result'(bool,X85),'const.semanticPrimitives.Rval_1'(s(bool,X84))) | s(bool,'T_0') = s(bool,X83) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f210,f273])).
fof(f533,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f273,f273])).
fof(f394,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(X0,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X4)))))) )),
  inference(unit_resulting_resolution,[],[f213,f209])).
fof(f306,plain,(
  ( ! [X4,X3] : (p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f302,f149])).
fof(f302,plain,(
  ( ! [X4,X3] : (p(s(bool,'F_0')) | p(s(bool,X4)) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f197,f150])).
fof(f276,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f156,f150])).
fof(f273,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f150,f150])).
fof(f256,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f149,f152])).
fof(f213,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))) )),
  inference(cnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(flattening,[],[f74])).
fof(f74,plain,(
  ! [X0,X1] : ! [X2,X3] : ~s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X3))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2)))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X6,X7] : ! [X37,X24] : ~s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X24))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X37)))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.semanticPrimitives.result_distinct')).
fof(f211,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) != s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) | s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3)) & (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(flattening,[],[f72])).
fof(f72,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))) <=> s('type.semanticPrimitives.error_result'(X1),X2) = s('type.semanticPrimitives.error_result'(X1),X3))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X6,X7] : ! [X24,X37] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X24))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X37))) <=> s('type.semanticPrimitives.error_result'(X7),X24) = s('type.semanticPrimitives.error_result'(X7),X37))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.semanticPrimitives.result_|49||49||split|1')).
fof(f212,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.error_result'(X1),X2) != s('type.semanticPrimitives.error_result'(X1),X3) | s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X2))) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f209,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2,X3] : ((s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) != s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) | s(X1,X2) = s(X1,X3)) & (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))))),
  inference(nnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3))) <=> s(X1,X2) = s(X1,X3))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X7,X6] : ! [X24,X37] : (s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X24))) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X37))) <=> s(X6,X24) = s(X6,X37))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.semanticPrimitives.result_|49||49||split|0')).
fof(f210,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) != s(X1,X3) | s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X2))) = s('type.semanticPrimitives.result'(X1,X0),'const.semanticPrimitives.Rval_1'(s(X1,X3)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f208,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK12(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK12(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12])],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f69])).
fof(f69,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f68])).
fof(f68,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.evalProps.result_rel_Rerr|49|',aHL_EXT)).
fof(f207,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : (s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,sK10(X2,X1,X0)))) | s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),sK11(X2,X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0,X1] : ! [X2] : (? [X4] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rval_1'(s(X0,X4))) | ? [X3] : s('type.semanticPrimitives.result'(X0,X1),X2) = s('type.semanticPrimitives.result'(X0,X1),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X1),X3))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X6,X7] : ! [X38] : (? [X24] : s('type.semanticPrimitives.result'(X6,X7),X38) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rval_1'(s(X6,X24))) | ? [X11] : s('type.semanticPrimitives.result'(X6,X7),X38) = s('type.semanticPrimitives.result'(X6,X7),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X7),X11))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.semanticPrimitives.result_nchotomy')).
fof(f202,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) != s(bool,X1)) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : ((s(bool,X0) != s(bool,X1) | ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0))))) & (((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0)))) | s(bool,X0) = s(bool,X1)))),
  inference(nnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((~p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | p(s(bool,X0)))))),
  inference(ennf_transformation,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : (s(bool,X0) = s(bool,X1) <=> ((p(s(bool,X0)) => p(s(bool,X1))) & (p(s(bool,X1)) => p(s(bool,X0)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X15,X16] : (s(bool,X15) = s(bool,X16) <=> ((p(s(bool,X15)) => p(s(bool,X16))) & (p(s(bool,X16)) => p(s(bool,X15)))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.EQ_IMP_THM')).
fof(f197,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X15,X16] : ((p(s(bool,X15)) => p(s(bool,X16))) => ((p(s(bool,X16)) => p(s(bool,X15))) => s(bool,X15) = s(bool,X16)))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.IMP_ANTISYM_AX')).
fof(f200,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f94])).
fof(f152,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f42])).
fof(f42,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X17] : (s(bool,'T_0') = s(bool,X17) <=> p(s(bool,X17)))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.EQ_CLAUSES|split|0')).
fof(f153,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f104])).
fof(f150,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.evalProps.result_rel_Rerr|49|',aHL_BOOL_CASES)).
fof(f147,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.bool.TRUTH')).
fof(f24933,plain,(
  ( ! [X885,X888,X891] : (s('type.semanticPrimitives.result'(X885,X888),X891) = s('type.semanticPrimitives.result'(X885,X888),'const.semanticPrimitives.Rval_1'(s(X885,sK10(X891,X888,X885))))) ) | $spl84),
  inference(cnf_transformation,[],[f24933_D])).
fof(f24933_D,plain,(
  ( ! [X885,X888,X891] : (s('type.semanticPrimitives.result'(X885,X888),X891) = s('type.semanticPrimitives.result'(X885,X888),'const.semanticPrimitives.Rval_1'(s(X885,sK10(X891,X888,X885))))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f24934,plain,(
  ( ! [X893,X894] : (s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,X893)))) ) | $spl86),
  inference(cnf_transformation,[],[f24934_D])).
fof(f24934_D,plain,(
  ( ! [X893,X894] : (s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,X893)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f24967,plain,(
  ( ! [X825,X831,X826,X830,X822] : (s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X831),'const.semanticPrimitives.Rval_1'(s(bool,X830))) | s('type.semanticPrimitives.result'(X826,X822),X825) = s('type.semanticPrimitives.result'(X826,X822),'const.semanticPrimitives.Rval_1'(s(X826,sK10(X825,X822,X826))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704,f24962,f24902,f24963,f24714,f24900,f24966,f24728])).
fof(f24962,plain,(
  ( ! [X850,X854,X857,X853,X858] : (s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X858),'const.semanticPrimitives.Rval_1'(s(bool,X857))) | s('type.semanticPrimitives.result'(X854,X850),X853) = s('type.semanticPrimitives.result'(X854,X850),'const.semanticPrimitives.Rval_1'(s(X854,sK10(X853,X850,X854))))) ) | $spl22),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3078,f3085,f3087,f3094,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8361,f8362,f8378,f8502,f8512,f8513,f8673,f8684,f8697,f8707,f8708,f9170,f9382,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14232,f14254,f14173,f14175,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14204,f14205,f14206,f14278,f14214,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14670,f14693,f14606,f14608,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14639,f14640,f14641,f14719,f14650,f14660,f14662,f16798,f16660,f16662,f16799,f16804,f16733,f16743,f16751,f16753,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16775,f16777,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17640,f17566,f17576,f17584,f17586,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17610,f17612,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18732,f18733,f18734,f18718,f18719,f18720,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f20699,f20700,f20701,f20708,f20710,f20725,f20730,f20742,f20743,f20745,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20790,f20802,f20803,f20805,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f22392,f22393,f22394,f23089,f22726,f22727,f22806,f22924,f23756,f23382,f23383,f23438,f23439,f23452,f23825,f23539,f23541,f23574,f23941,f23660,f23662,f23681,f23683,f23689,f24042,f23713,f24063,f24066,f24070,f23734,f23736,f21024,f21021,f21006,f21004,f20979,f20950,f13744,f13612,f13062,f8683,f24045,f23436,f23437,f23447,f23448,f23449,f23450,f23451,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23536,f23537,f23538,f23540,f23548,f23550,f23555,f23556,f21385,f20267,f19410,f18949,f22405,f22383,f22382,f22381,f21905,f21891,f21386,f21353,f20809,f20808,f20807,f20804,f20749,f20748,f20747,f20744,f20268,f20236,f19397,f19393,f19392,f19391,f18938,f18930,f18929,f18928,f14691,f14672,f14652,f14649,f14648,f14616,f14605,f14604,f14252,f14234,f14216,f14213,f14212,f14183,f14172,f14171,f8360,f3096,f3093,f3092,f3080,f3077,f3076,f23569,f23570,f23571,f23917,f23573,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23124,f23087,f22996,f22925,f22923,f22886,f22876,f22808,f22804,f22803,f22802,f21890,f20791,f20731,f16802,f16796,f16794,f16785,f16774,f16773,f16745,f16735,f16732,f16731,f14637,f14202,f23107,f23397,f22753,f22750,f22751,f22752,f23394,f23395,f23039,f23040,f23041,f23042,f23171,f23169,f23167,f23165,f23164,f23145,f23142,f23141,f23085,f23084,f23079,f23077,f23065,f23060,f23058,f23055,f23030,f23029,f23028,f23027,f23026,f23025,f23024,f23023,f23022,f23021,f23020,f23017,f23015,f23006,f23004,f22994,f22993,f22992,f22927,f22926,f22921,f22920,f22919,f22918,f22917,f22912,f22911,f22909,f22907,f22906,f22905,f22888,f22878,f22875,f22874,f22809,f22807,f22805,f22801,f22800,f22799,f22794,f22793,f22791,f22790,f22789,f22788,f22787,f17589,f16756,f5312,f23034,f23033,f23032,f23031,f22778,f22777,f12054,f23670,f23661,f20982,f20953,f19786,f19784,f19783,f19769,f19768,f19766,f19737,f19727,f19671,f10186,f9384,f8699,f8675,f8504,f8352,f5419,f5382,f5318,f5317,f5316,f19739,f12311,f230,f23708,f23707,f23706,f23705,f23380,f24059,f24057,f24055,f24053,f23774,f23754,f23752,f23751,f23746,f23744,f23737,f23735,f23733,f23732,f23726,f23724,f23721,f23696,f23695,f23694,f23693,f23692,f23691,f23690,f23688,f23687,f23686,f23682,f23672,f23663,f23659,f23658,f21889,f20789,f20729,f17638,f17631,f17629,f17620,f17609,f17608,f17590,f17578,f17568,f17565,f17564,f16757,f5315,f23702,f23700,f23699,f23698,f23697,f23036,f14636,f14201,f12055,f23677,f23678,f9169,f9395,f21892,f18931,f18712,f23012,f23011,f22894,f22893,f7254,f24911,f24916,f24920,f24921,f24932,f24941,f24945,f24946,f24957,f24704])).
fof(f24961,plain,(
  $false | ($spl4 | $spl22)),
  inference(subsumption_resolution,[],[f24701,f149])).
fof(f24701,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl22)),
  inference(backward_demodulation,[],[f7254,f253])).
fof(f24957,plain,(
  ( ! [X920,X926,X928,X923,X927] : (s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,X927))) | s('type.semanticPrimitives.result'(X920,X923),X926) = s('type.semanticPrimitives.result'(X920,X923),'const.semanticPrimitives.Rval_1'(s(X920,sK10(X926,X923,X920))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24644,f24946])).
fof(f24644,plain,(
  ( ! [X922,X920,X926,X924,X928,X923,X927,X925] : (s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X928),'const.semanticPrimitives.Rval_1'(s(bool,X927))) | s(bool,X927) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X922,fun(X923,bool)),X924),s('type.semanticPrimitives.error_result'(X922),X925),s('type.semanticPrimitives.error_result'(X923),sK11(X926,X923,X920)))) | s('type.semanticPrimitives.result'(X920,X923),X926) = s('type.semanticPrimitives.result'(X920,X923),'const.semanticPrimitives.Rval_1'(s(X920,sK10(X926,X923,X920))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f23663])).
fof(f24932,plain,(
  ( ! [X893,X885,X888,X894,X891] : (s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,X893))) | s('type.semanticPrimitives.result'(X885,X888),X891) = s('type.semanticPrimitives.result'(X885,X888),'const.semanticPrimitives.Rval_1'(s(X885,sK10(X891,X888,X885))))) ) | $spl22),
  inference(subsumption_resolution,[],[f24531,f24921])).
fof(f24531,plain,(
  ( ! [X893,X885,X890,X888,X894,X892,X891,X889] : (s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X894),'const.semanticPrimitives.Rval_1'(s(bool,X893))) | s(bool,X893) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X888,fun(X889,bool)),X890),s('type.semanticPrimitives.error_result'(X888),sK11(X891,X888,X885)),s('type.semanticPrimitives.error_result'(X889),X892))) | s('type.semanticPrimitives.result'(X885,X888),X891) = s('type.semanticPrimitives.result'(X885,X888),'const.semanticPrimitives.Rval_1'(s(X885,sK10(X891,X888,X885))))) ) | $spl22),
  inference(backward_demodulation,[],[f7254,f22996])).
fof(f24456,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f24455,f147])).
fof(f24455,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19102,f23912])).
fof(f23912,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl0),
  inference(subsumption_resolution,[],[f23567,f19050])).
fof(f19050,plain,(
  ( ! [X2] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,X2)))) ) | $spl0),
  inference(superposition,[],[f213,f17634])).
fof(f17634,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl0),
  inference(subsumption_resolution,[],[f17494,f256])).
fof(f17494,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl0),
  inference(superposition,[],[f4992,f6331])).
fof(f6331,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | $spl0),
  inference(unit_resulting_resolution,[],[f147,f249,f200])).
fof(f23567,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(sK4,sK3,sK1)))) | $spl0),
  inference(superposition,[],[f6331,f5315])).
fof(f19102,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19101,f7548])).
fof(f19101,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))))) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f19097,f213])).
fof(f19097,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))))) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1)))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f19064])).
fof(f19064,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),sK4) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))))) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1)))) | ($spl0 | $spl2)),
  inference(superposition,[],[f6310,f17634])).
fof(f6310,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X0) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(X0,sK3,sK1))))) | s('type.semanticPrimitives.result'(sK1,sK3),X0) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(X0,sK3,sK1))))) ) | $spl2),
  inference(superposition,[],[f251,f207])).
fof(f24454,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f24453,f147])).
fof(f24453,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19098,f23912])).
fof(f19098,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl0 | $spl2)),
  inference(trivial_inequality_removal,[],[f19047])).
fof(f19047,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),sK4) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl0 | $spl2)),
  inference(superposition,[],[f251,f17634])).
fof(f24452,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f24451,f147])).
fof(f24451,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19041,f23912])).
fof(f19041,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f17634,f251])).
fof(f24450,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f24449,f147])).
fof(f24449,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19100,f23912])).
fof(f19100,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl0 | $spl2)),
  inference(forward_demodulation,[],[f19042,f7548])).
fof(f19042,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f213,f17634,f6310])).
fof(f24447,plain,(
  $false | ($spl0 | $spl26)),
  inference(subsumption_resolution,[],[f7480,f19050])).
fof(f24446,plain,(
  $false | ($spl4 | $spl36)),
  inference(subsumption_resolution,[],[f24445,f149])).
fof(f24445,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl36)),
  inference(forward_demodulation,[],[f253,f24191])).
fof(f24191,plain,(
  ( ! [X6,X2,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X7),s('type.semanticPrimitives.error_result'(X2),X6),s('type.semanticPrimitives.error_result'(X3),X5)))) ) | ($spl4 | $spl36)),
  inference(backward_demodulation,[],[f24127,f230])).
fof(f24127,plain,(
  ( ! [X335,X341,X337,X339,X334,X340,X336,X338] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(X335,bool)),X336),s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X337),X340))),s('type.semanticPrimitives.result'(X335,X338),X341)))) ) | ($spl4 | $spl36)),
  inference(subsumption_resolution,[],[f23941,f24102])).
fof(f24102,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0)))) ) | ($spl4 | $spl36)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f253,f256,f258,f273,f276,f306,f387,f394,f400,f533,f587,f589,f635,f648,f917,f918,f919,f817,f921,f684,f686,f1364,f1356,f1350,f1003,f1004,f1341,f1053,f1416,f1125,f1127,f1467,f1174,f1182,f1201,f1499,f1287,f1507,f1241,f1243,f375,f923,f688,f935,f932,f930,f690,f652,f634,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f1691,f2913,f2914,f2915,f2919,f2921,f2927,f2928,f2929,f2933,f2935,f3057,f3056,f3058,f3059,f3060,f3064,f3066,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5308,f5312,f5315,f5316,f5317,f5318,f5407,f5408,f5359,f5419,f5382,f5434,f5556,f5597,f5598,f5599,f5600,f5722,f5723,f5641,f5735,f5665,f6062,f388,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9382,f9384,f9438,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23774,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744,f23746,f23751,f23752,f21024,f21021,f21006,f21004,f20982,f20979,f20953,f20950,f19786,f19783,f19768,f19766,f13744])).
fof(f5641,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203,X201] : (s(bool,'F_0') != s(bool,happ(s(fun(X202,bool),happ(s(fun(X201,fun(X202,bool)),X203),s(X201,X207))),s(X202,X208))) | s(bool,X209) = s(bool,'const.evalProps.result_rel_4'(s(fun(X201,fun(X202,bool)),X203),s(fun(X204,fun(X205,bool)),X206),s('type.semanticPrimitives.result'(X201,X204),'const.semanticPrimitives.Rval_1'(s(X201,X207))),s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rval_1'(s(X202,X208))))) | s(bool,'T_0') = s(bool,X209)) ) | $spl4),
  inference(superposition,[],[f1416,f231])).
fof(f5723,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X139,bool)),X140),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X138,X141),'const.semanticPrimitives.Rval_1'(s(X138,X144))),s('type.semanticPrimitives.result'(X139,X142),'const.semanticPrimitives.Rval_1'(s(X139,X145))))) | s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X139,bool),happ(s(fun(X138,fun(X139,bool)),X140),s(X138,X144))),s(X139,X145)))))) ) | $spl4),
  inference(forward_demodulation,[],[f5634,f258])).
fof(f5634,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,happ(s(fun(X139,bool),happ(s(fun(X138,fun(X139,bool)),X140),s(X138,X144))),s(X139,X145))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X139,bool)),X140),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X138,X141),'const.semanticPrimitives.Rval_1'(s(X138,X144))),s('type.semanticPrimitives.result'(X139,X142),'const.semanticPrimitives.Rval_1'(s(X139,X145)))))) ) | $spl4),
  inference(superposition,[],[f400,f231])).
fof(f5722,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X137] : (s(bool,'T_0') != s(bool,happ(s(fun(X131,bool),happ(s(fun(X130,fun(X131,bool)),X132),s(X130,X136))),s(X131,X137))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X130,fun(X131,bool)),X132),s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rval_1'(s(X130,X136))),s('type.semanticPrimitives.result'(X131,X134),'const.semanticPrimitives.Rval_1'(s(X131,X137)))))) ) | $spl4),
  inference(forward_demodulation,[],[f5633,f258])).
fof(f5633,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X137] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) != s(bool,happ(s(fun(X131,bool),happ(s(fun(X130,fun(X131,bool)),X132),s(X130,X136))),s(X131,X137))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X130,fun(X131,bool)),X132),s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rval_1'(s(X130,X136))),s('type.semanticPrimitives.result'(X131,X134),'const.semanticPrimitives.Rval_1'(s(X131,X137)))))) ) | $spl4),
  inference(superposition,[],[f387,f231])).
fof(f5434,plain,(
  ( ! [X6,X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,X5) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X6) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X4) = s(bool,X6)) ) | $spl4),
  inference(superposition,[],[f1467,f817])).
fof(f5359,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203,X201] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X204,fun(X205,bool)),X206),s('type.semanticPrimitives.error_result'(X204),X207),s('type.semanticPrimitives.error_result'(X205),X208))) | s(bool,X209) = s(bool,'const.evalProps.result_rel_4'(s(fun(X201,fun(X202,bool)),X203),s(fun(X204,fun(X205,bool)),X206),s('type.semanticPrimitives.result'(X201,X204),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X204),X207))),s('type.semanticPrimitives.result'(X202,X205),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X205),X208))))) | s(bool,'T_0') = s(bool,X209)) ) | $spl4),
  inference(superposition,[],[f1416,f230])).
fof(f5408,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X139,bool)),X140),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X138,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),X144))),s('type.semanticPrimitives.result'(X139,X142),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X142),X145))))) | s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.error_result'(X141),X144),s('type.semanticPrimitives.error_result'(X142),X145)))))) ) | $spl4),
  inference(forward_demodulation,[],[f5352,f258])).
fof(f5352,plain,(
  ( ! [X146,X144,X142,X140,X138,X145,X143,X141,X139] : (s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X146),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.error_result'(X141),X144),s('type.semanticPrimitives.error_result'(X142),X145))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X138,fun(X139,bool)),X140),s(fun(X141,fun(X142,bool)),X143),s('type.semanticPrimitives.result'(X138,X141),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X141),X144))),s('type.semanticPrimitives.result'(X139,X142),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X142),X145)))))) ) | $spl4),
  inference(superposition,[],[f400,f230])).
fof(f5407,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X137] : (s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.error_result'(X133),X136),s('type.semanticPrimitives.error_result'(X134),X137))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X130,fun(X131,bool)),X132),s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X133),X136))),s('type.semanticPrimitives.result'(X131,X134),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X134),X137)))))) ) | $spl4),
  inference(forward_demodulation,[],[f5351,f258])).
fof(f5351,plain,(
  ( ! [X134,X132,X130,X136,X135,X133,X131,X137] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.error_result'(X133),X136),s('type.semanticPrimitives.error_result'(X134),X137))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X130,fun(X131,bool)),X132),s(fun(X133,fun(X134,bool)),X135),s('type.semanticPrimitives.result'(X130,X133),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X133),X136))),s('type.semanticPrimitives.result'(X131,X134),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X134),X137)))))) ) | $spl4),
  inference(superposition,[],[f387,f230])).
fof(f5308,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X2),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(X0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(X1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8)))))) ) | $spl4),
  inference(unit_resulting_resolution,[],[f230,f387])).
fof(f3066,plain,(
  ( ! [X24,X23,X25] : (s('type.semanticPrimitives.result'(bool,X24),X23) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X25))) | s('type.semanticPrimitives.result'(bool,X24),X23) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X24),sK11(X23,X24,bool)))) | s(bool,X25) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,sK10(X23,X24,bool))) ) | $spl4),
  inference(superposition,[],[f207,f817])).
fof(f3064,plain,(
  ( ! [X19,X17,X18] : (s('type.semanticPrimitives.result'(bool,X18),X17) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X18),X17) = s('type.semanticPrimitives.result'(bool,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),sK11(X17,X18,bool)))) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X19) = s(bool,sK10(X17,X18,bool))) ) | $spl4),
  inference(superposition,[],[f207,f817])).
fof(f2935,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,X34) != s(bool,f(s(X31,sK12(X32,X33,bool,X31)))) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,X34) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,g(s(X31,sK12(X32,X33,bool,X31))))) ) | $spl4),
  inference(superposition,[],[f208,f817])).
fof(f2933,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,'T_0') != s(bool,f(s(X23,sK12(X24,X25,bool,X23)))) | s(fun(X23,bool),X24) = s(fun(X23,bool),X25) | s(bool,X26) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X26) = s(bool,g(s(X23,sK12(X24,X25,bool,X23))))) ) | $spl4),
  inference(superposition,[],[f208,f817])).
fof(f2921,plain,(
  ( ! [X33,X31,X34,X32] : (s(X33,f(s(bool,X34))) != s(X33,g(s(bool,X34))) | s(fun(bool,X33),X31) = s(fun(bool,X33),X32) | s(bool,X34) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,sK12(X31,X32,X33,bool))) ) | $spl4),
  inference(superposition,[],[f208,f817])).
fof(f2919,plain,(
  ( ! [X26,X24,X23,X25] : (s(X25,f(s(bool,'T_0'))) != s(X25,g(s(bool,'T_0'))) | s(fun(bool,X25),X23) = s(fun(bool,X25),X24) | s(bool,X26) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X26) = s(bool,sK12(X23,X24,X25,bool))) ) | $spl4),
  inference(superposition,[],[f208,f817])).
fof(f1691,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X23) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(subsumption_resolution,[],[f1657,f256])).
fof(f1657,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) != s(bool,X24) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X23) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl4),
  inference(superposition,[],[f1416,f817])).
fof(f634,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,X4)))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X5,bool)) | s(bool,X4) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) ) | $spl4),
  inference(superposition,[],[f375,f273])).
fof(f923,plain,(
  ( ! [X76,X75] : (s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X75,bool)) | s(bool,X76) = s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X76)) ) | $spl4),
  inference(subsumption_resolution,[],[f683,f147])).
fof(f683,plain,(
  ( ! [X76,X75] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X75,bool)) | s(bool,X76) = s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X76)) ) | $spl4),
  inference(superposition,[],[f375,f273])).
fof(f375,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X6,bool))) ) | $spl4),
  inference(forward_demodulation,[],[f371,f258])).
fof(f371,plain,(
  ( ! [X6] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X6,bool))) ) | $spl4),
  inference(superposition,[],[f195,f258])).
fof(f1243,plain,(
  ( ! [X111,X114,X112,X113] : (s(bool,'T_0') != s(bool,X112) | s('type.semanticPrimitives.result'(bool,X113),'const.semanticPrimitives.Rval_1'(s(bool,X111))) = s('type.semanticPrimitives.result'(bool,X113),'const.semanticPrimitives.Rval_1'(s(bool,X112))) | s(bool,X114) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X111) = s(bool,X114)) ) | $spl4),
  inference(superposition,[],[f210,f817])).
fof(f1241,plain,(
  ( ! [X103,X105,X106,X104] : (s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X104),'const.semanticPrimitives.Rval_1'(s(bool,X105))) | s(bool,X103) = s(bool,X105) | s(bool,X106) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X103) = s(bool,X106)) ) | $spl4),
  inference(superposition,[],[f209,f817])).
fof(f1507,plain,(
  ( ! [X87,X85,X86,X84] : (s(X84,X86) = s(X84,sK9(X86,X85,X84)) | s(bool,X87) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X87) = s(bool,happ(s(fun(X84,bool),X85),s(X84,X86)))) ) | $spl4),
  inference(subsumption_resolution,[],[f1235,f147])).
fof(f1235,plain,(
  ( ! [X87,X85,X86,X84] : (~p(s(bool,'T_0')) | s(X84,X86) = s(X84,sK9(X86,X85,X84)) | s(bool,X87) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X87) = s(bool,happ(s(fun(X84,bool),X85),s(X84,X86)))) ) | $spl4),
  inference(superposition,[],[f195,f817])).
fof(f1287,plain,(
  ( ! [X38,X40] : (s(bool,X38) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X40) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X38) = s(bool,X40)) ) | $spl4),
  inference(trivial_inequality_removal,[],[f1217])).
fof(f1217,plain,(
  ( ! [X39,X38,X40] : (s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X39),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X38) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X40) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X38) = s(bool,X40)) ) | $spl4),
  inference(superposition,[],[f400,f817])).
fof(f1499,plain,(
  ( ! [X30,X31,X32] : (s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X30) = s(bool,X32)) ) | $spl4),
  inference(subsumption_resolution,[],[f1214,f147])).
fof(f1214,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | s(bool,X30) != s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X30) = s(bool,X32)) ) | $spl4),
  inference(superposition,[],[f276,f817])).
fof(f1201,plain,(
  ( ! [X85,X83,X84,X82] : (s(bool,X82) != s(bool,X83) | s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X83))) | s(bool,X85) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X82) = s(bool,X85)) ) | $spl4),
  inference(superposition,[],[f210,f817])).
fof(f1182,plain,(
  ( ! [X17,X15,X18,X16] : (s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,X15))) != s('type.semanticPrimitives.result'(bool,X16),'const.semanticPrimitives.Rval_1'(s(bool,X17))) | s(bool,X17) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X18) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X15) = s(bool,X18)) ) | $spl4),
  inference(superposition,[],[f400,f817])).
fof(f1174,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,X121) != s(bool,X122) | s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X120))) = s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X122))) | s(bool,X121) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X120)) ) | $spl4),
  inference(superposition,[],[f210,f817])).
fof(f1467,plain,(
  ( ! [X81] : (s(bool,'T_0') != s(bool,X81) | s(bool,X81) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(subsumption_resolution,[],[f1159,f256])).
fof(f1159,plain,(
  ( ! [X81] : (s(bool,'T_0') != s(bool,X81) | s(bool,X81) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl4),
  inference(superposition,[],[f256,f817])).
fof(f1127,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,X121) != s(bool,X122) | s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X120))) = s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X122))) | s(bool,X120) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X121)) ) | $spl4),
  inference(superposition,[],[f210,f817])).
fof(f1125,plain,(
  ( ! [X114,X112,X115,X113] : (s('type.semanticPrimitives.result'(bool,X114),'const.semanticPrimitives.Rval_1'(s(bool,X113))) != s('type.semanticPrimitives.result'(bool,X114),'const.semanticPrimitives.Rval_1'(s(bool,X115))) | s(bool,X112) = s(bool,X115) | s(bool,X112) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X113)) ) | $spl4),
  inference(superposition,[],[f209,f817])).
fof(f1416,plain,(
  ( ! [X12,X11] : (s(bool,'F_0') != s(bool,X11) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl4),
  inference(subsumption_resolution,[],[f1415,f147])).
fof(f1415,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X11) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl4),
  inference(forward_demodulation,[],[f1062,f258])).
fof(f1062,plain,(
  ( ! [X12,X11] : (s(bool,'F_0') != s(bool,X11) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | s(bool,X11) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl4),
  inference(superposition,[],[f156,f817])).
fof(f1053,plain,(
  ( ! [X88,X87,X89,X86] : (s(bool,X87) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,X86))) = s('type.semanticPrimitives.result'(bool,X88),'const.semanticPrimitives.Rval_1'(s(bool,X87))) | s(bool,X86) = s(bool,X89) | s(bool,'T_0') = s(bool,X89)) ) | $spl4),
  inference(superposition,[],[f210,f817])).
fof(f1004,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl4),
  inference(superposition,[],[f817,f273])).
fof(f1003,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X0) = s(bool,X3)) ) | $spl4),
  inference(superposition,[],[f817,f817])).
fof(f817,plain,(
  ( ! [X30,X32] : (s(bool,X30) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl4),
  inference(trivial_inequality_removal,[],[f665])).
fof(f665,plain,(
  ( ! [X30,X31,X32] : (s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,X30) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl4),
  inference(superposition,[],[f400,f273])).
fof(f635,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X7))) != s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X7) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) ) | $spl4),
  inference(superposition,[],[f400,f273])).
fof(f400,plain,(
  ( ! [X10,X11] : (s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X10),'const.semanticPrimitives.Rval_1'(s(bool,X11))) | s(bool,X11) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(superposition,[],[f209,f258])).
fof(f387,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(subsumption_resolution,[],[f385,f147])).
fof(f385,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | s(bool,X5) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X5)) ) | $spl4),
  inference(superposition,[],[f276,f258])).
fof(f258,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | $spl4),
  inference(unit_resulting_resolution,[],[f253,f153])).
fof(f24444,plain,(
  $false | ($spl4 | $spl28 | $spl36)),
  inference(subsumption_resolution,[],[f24443,f149])).
fof(f24443,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl28 | $spl36)),
  inference(forward_demodulation,[],[f7481,f24191])).
fof(f7481,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | $spl28),
  inference(cnf_transformation,[],[f7481_D])).
fof(f7481_D,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f1386,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,X18)) ) | $spl10),
  inference(cnf_transformation,[],[f1386_D])).
fof(f1386_D,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,X18)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f7254,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,X14)) ) | $spl22),
  inference(cnf_transformation,[],[f7254_D])).
fof(f7254_D,plain,(
  ( ! [X14] : (s(bool,'F_0') = s(bool,X14)) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f9463,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X2,bool))) ) | $spl40),
  inference(cnf_transformation,[],[f9463_D])).
fof(f9463_D,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X2,bool))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f24124,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X3,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl44)),
  inference(subsumption_resolution,[],[f9961,f24121])).
fof(f24121,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') = s(bool,X23) | s(bool,'T_0') = s(bool,X22) | s(bool,X22) != s(bool,X23)) ) | ($spl12 | $spl44)),
  inference(global_subsumption,[],[f9997,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f1387,f6347,f6434,f6435,f6357,f6444,f6446,f6448,f6454,f6456,f6458,f6459,f6460,f6390,f6462,f6463,f6464,f6465,f6477,f6478,f6418,f6479,f6500,f6590,f6592,f6613,f6615,f6639,f6658,f6659,f6719,f6720,f6721,f6723,f6730,f6731,f6732,f6733,f6785,f6786,f6803,f6804,f6807,f6809,f6810,f7108,f7109,f7110,f6841,f6842,f6843,f6845,f6852,f6853,f6854,f6855,f7120,f7146,f7147,f7148,f7182,f7152,f7153,f7156,f7247,f7211,f7213,f7232,f7234,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19139,f19140,f19141,f19144,f19145,f19146,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19633,f19634,f19635,f19636,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23774,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744,f23746,f23751,f23752,f21024,f21021,f21006,f21004,f20982,f20979,f20953,f20950,f19786,f19783,f19768,f19766,f13744,f13612,f13062])).
fof(f7234,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s(bool,X75) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.error_result'(X70),X73),s('type.semanticPrimitives.error_result'(X71),X74))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X67,fun(X68,bool)),X69),s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))),s('type.semanticPrimitives.result'(X68,X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X74))))) | s(bool,'F_0') = s(bool,X75)) ) | $spl12),
  inference(superposition,[],[f6448,f230])).
fof(f7232,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51,X49] : (s(bool,X57) != s(bool,happ(s(fun(X50,bool),happ(s(fun(X49,fun(X50,bool)),X51),s(X49,X55))),s(X50,X56))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(X50,bool)),X51),s(fun(X52,fun(X53,bool)),X54),s('type.semanticPrimitives.result'(X49,X52),'const.semanticPrimitives.Rval_1'(s(X49,X55))),s('type.semanticPrimitives.result'(X50,X53),'const.semanticPrimitives.Rval_1'(s(X50,X56))))) | s(bool,'F_0') = s(bool,X57)) ) | $spl12),
  inference(superposition,[],[f6448,f231])).
fof(f7213,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s(bool,X75) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.error_result'(X70),X73),s('type.semanticPrimitives.error_result'(X71),X74))) | s(bool,'T_0') = s(bool,X75) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X67,fun(X68,bool)),X69),s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))),s('type.semanticPrimitives.result'(X68,X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X74)))))) ) | $spl12),
  inference(superposition,[],[f6448,f230])).
fof(f7211,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51,X49] : (s(bool,X57) != s(bool,happ(s(fun(X50,bool),happ(s(fun(X49,fun(X50,bool)),X51),s(X49,X55))),s(X50,X56))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(X50,bool)),X51),s(fun(X52,fun(X53,bool)),X54),s('type.semanticPrimitives.result'(X49,X52),'const.semanticPrimitives.Rval_1'(s(X49,X55))),s('type.semanticPrimitives.result'(X50,X53),'const.semanticPrimitives.Rval_1'(s(X50,X56)))))) ) | $spl12),
  inference(superposition,[],[f6448,f231])).
fof(f7153,plain,(
  ( ! [X21,X19,X20] : (s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,X19))) = s('type.semanticPrimitives.result'(bool,X20),'const.semanticPrimitives.Rval_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,X21) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X19)),X20,bool))) ) | $spl12),
  inference(superposition,[],[f3057,f6357])).
fof(f7152,plain,(
  ( ! [X17,X18,X16] : (s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X17),'const.semanticPrimitives.Rval_1'(s(bool,X16))) | s(bool,X18) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X16)),X17,bool)) | s(bool,'F_0') = s(bool,X18)) ) | $spl12),
  inference(superposition,[],[f3057,f6357])).
fof(f7182,plain,(
  ( ! [X14,X15] : (s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rval_1'(s(bool,X14))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X14)),X15,bool))) ) | $spl12),
  inference(forward_demodulation,[],[f7151,f6347])).
fof(f7151,plain,(
  ( ! [X14,X15] : (s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rval_1'(s(bool,X14))) = s('type.semanticPrimitives.result'(bool,X15),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X14)),X15,bool))) ) | $spl12),
  inference(superposition,[],[f3057,f1387])).
fof(f6855,plain,(
  ( ! [X177,X175,X178,X176] : (s(X177,f(s(bool,'F_0'))) != s(X177,g(s(bool,'F_0'))) | s(fun(bool,X177),X175) = s(fun(bool,X177),X176) | s(bool,X178) = s(bool,sK12(X175,X176,X177,bool)) | s(bool,'F_0') = s(bool,X178)) ) | $spl12),
  inference(superposition,[],[f208,f6357])).
fof(f6854,plain,(
  ( ! [X173,X174,X172] : (s('type.semanticPrimitives.result'(bool,X173),X172) = s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s('type.semanticPrimitives.result'(bool,X173),X172) = s('type.semanticPrimitives.result'(bool,X173),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X173),sK11(X172,X173,bool)))) | s(bool,X174) = s(bool,sK10(X172,X173,bool)) | s(bool,'F_0') = s(bool,X174)) ) | $spl12),
  inference(superposition,[],[f207,f6357])).
fof(f6853,plain,(
  ( ! [X171,X169,X170] : (p(s(bool,happ(s(fun(bool,bool),X170),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X170),s(bool,X169)))) | s(bool,X171) = s(bool,sK9(X169,X170,bool)) | s(bool,'F_0') = s(bool,X171)) ) | $spl12),
  inference(superposition,[],[f196,f6357])).
fof(f6852,plain,(
  ( ! [X167,X165,X166,X168] : (s(bool,'F_0') != s(bool,f(s(X165,sK12(X166,X167,bool,X165)))) | s(fun(X165,bool),X166) = s(fun(X165,bool),X167) | s(bool,X168) = s(bool,g(s(X165,sK12(X166,X167,bool,X165)))) | s(bool,'F_0') = s(bool,X168)) ) | $spl12),
  inference(superposition,[],[f208,f6357])).
fof(f6845,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,'F_0') != s(bool,X119) | s('type.semanticPrimitives.result'(bool,X120),'const.semanticPrimitives.Rval_1'(s(bool,X118))) = s('type.semanticPrimitives.result'(bool,X120),'const.semanticPrimitives.Rval_1'(s(bool,X119))) | s(bool,X118) = s(bool,X121) | s(bool,'F_0') = s(bool,X121)) ) | $spl12),
  inference(superposition,[],[f210,f6357])).
fof(f6843,plain,(
  ( ! [X111,X112,X110,X113] : (s('type.semanticPrimitives.result'(bool,X111),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X111),'const.semanticPrimitives.Rval_1'(s(bool,X112))) | s(bool,X110) = s(bool,X112) | s(bool,X110) = s(bool,X113) | s(bool,'F_0') = s(bool,X113)) ) | $spl12),
  inference(superposition,[],[f209,f6357])).
fof(f6842,plain,(
  ( ! [X109,X107,X108] : (~p(s(bool,happ(s(fun(bool,bool),X108),s(bool,'F_0')))) | s(bool,X107) = s(bool,sK9(X107,X108,bool)) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X109)) ) | $spl12),
  inference(superposition,[],[f195,f6357])).
fof(f6841,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),X104),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X104),s(bool,X105)))) | s(bool,X103) != s(bool,X105) | s(bool,X103) = s(bool,X106) | s(bool,'F_0') = s(bool,X106)) ) | $spl12),
  inference(superposition,[],[f194,f6357])).
fof(f7110,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,happ(s(fun(X99,bool),X100),s(X99,X101)))) | s(bool,X102) = s(bool,happ(s(fun(X99,bool),X100),s(X99,sK9(X101,X100,X99)))) | s(bool,'F_0') = s(bool,X102)) ) | $spl12),
  inference(subsumption_resolution,[],[f6840,f149])).
fof(f6840,plain,(
  ( ! [X101,X99,X102,X100] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X99,bool),X100),s(X99,X101)))) | s(bool,X102) = s(bool,happ(s(fun(X99,bool),X100),s(X99,sK9(X101,X100,X99)))) | s(bool,'F_0') = s(bool,X102)) ) | $spl12),
  inference(superposition,[],[f196,f6357])).
fof(f7109,plain,(
  ( ! [X45,X46,X44] : (s(bool,X44) != s(bool,X45) | s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,X46) | s(bool,'F_0') = s(bool,X46)) ) | $spl12),
  inference(subsumption_resolution,[],[f6829,f149])).
fof(f6829,plain,(
  ( ! [X45,X46,X44] : (p(s(bool,'F_0')) | s(bool,X44) != s(bool,X45) | s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,X46) | s(bool,'F_0') = s(bool,X46)) ) | $spl12),
  inference(superposition,[],[f6446,f6357])).
fof(f7108,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl12),
  inference(subsumption_resolution,[],[f6817,f149])).
fof(f6817,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl12),
  inference(superposition,[],[f197,f6357])).
fof(f6810,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X89,X96] : (s(bool,X89) = s(bool,'const.evalProps.result_rel_4'(s(fun(X90,fun(bool,bool)),X91),s(fun(X92,fun(X93,bool)),X94),s('type.semanticPrimitives.result'(X90,X92),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X92),X95))),s('type.semanticPrimitives.result'(bool,X93),'const.semanticPrimitives.Rval_1'(s(bool,X89))))) | s(bool,X89) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | $spl12),
  inference(superposition,[],[f229,f6357])).
fof(f6809,plain,(
  ( ! [X88,X87,X85,X83,X81,X86,X84,X82] : (s(bool,X81) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X82,bool)),X83),s(fun(X84,fun(X85,bool)),X86),s('type.semanticPrimitives.result'(bool,X84),'const.semanticPrimitives.Rval_1'(s(bool,X81))),s('type.semanticPrimitives.result'(X82,X85),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X85),X87))))) | s(bool,X81) = s(bool,X88) | s(bool,'F_0') = s(bool,X88)) ) | $spl12),
  inference(superposition,[],[f228,f6357])).
fof(f6807,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X70) != s(bool,X71) | s('type.semanticPrimitives.result'(bool,X72),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X72),'const.semanticPrimitives.Rval_1'(s(bool,X71))) | s(bool,X70) = s(bool,X73) | s(bool,'F_0') = s(bool,X73)) ) | $spl12),
  inference(superposition,[],[f210,f6357])).
fof(f6804,plain,(
  ( ! [X61,X59,X60] : (~p(s(bool,happ(s(fun(bool,bool),X60),s(bool,X59)))) | s(bool,'F_0') = s(bool,sK9('F_0',X60,bool)) | s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f195,f6357])).
fof(f6803,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X56),s(bool,X55)))) | p(s(bool,happ(s(fun(bool,bool),X56),s(bool,X57)))) | s(bool,'F_0') != s(bool,X57) | s(bool,X55) = s(bool,X58) | s(bool,'F_0') = s(bool,X58)) ) | $spl12),
  inference(superposition,[],[f194,f6357])).
fof(f6786,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl12),
  inference(superposition,[],[f256,f6357])).
fof(f6785,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,X6) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl12),
  inference(superposition,[],[f156,f6357])).
fof(f6733,plain,(
  ( ! [X189,X187,X190,X188] : (s(X189,f(s(bool,X190))) != s(X189,g(s(bool,X190))) | s(fun(bool,X189),X187) = s(fun(bool,X189),X188) | s(bool,'F_0') = s(bool,X190) | s(bool,'F_0') = s(bool,sK12(X187,X188,X189,bool))) ) | $spl12),
  inference(superposition,[],[f208,f6357])).
fof(f6732,plain,(
  ( ! [X185,X186,X184] : (s('type.semanticPrimitives.result'(bool,X185),X184) = s('type.semanticPrimitives.result'(bool,X185),'const.semanticPrimitives.Rval_1'(s(bool,X186))) | s('type.semanticPrimitives.result'(bool,X185),X184) = s('type.semanticPrimitives.result'(bool,X185),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X185),sK11(X184,X185,bool)))) | s(bool,'F_0') = s(bool,X186) | s(bool,'F_0') = s(bool,sK10(X184,X185,bool))) ) | $spl12),
  inference(superposition,[],[f207,f6357])).
fof(f6731,plain,(
  ( ! [X182,X183,X181] : (p(s(bool,happ(s(fun(bool,bool),X182),s(bool,X183)))) | ~p(s(bool,happ(s(fun(bool,bool),X182),s(bool,X181)))) | s(bool,'F_0') = s(bool,X183) | s(bool,'F_0') = s(bool,sK9(X181,X182,bool))) ) | $spl12),
  inference(superposition,[],[f196,f6357])).
fof(f6730,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) != s(bool,f(s(X177,sK12(X178,X179,bool,X177)))) | s(fun(X177,bool),X178) = s(fun(X177,bool),X179) | s(bool,'F_0') = s(bool,X180) | s(bool,'F_0') = s(bool,g(s(X177,sK12(X178,X179,bool,X177))))) ) | $spl12),
  inference(superposition,[],[f208,f6357])).
fof(f6723,plain,(
  ( ! [X132,X130,X131,X129] : (s(bool,X130) != s(bool,X131) | s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X129))) = s('type.semanticPrimitives.result'(bool,X132),'const.semanticPrimitives.Rval_1'(s(bool,X131))) | s(bool,'F_0') = s(bool,X130) | s(bool,'F_0') = s(bool,X129)) ) | $spl12),
  inference(superposition,[],[f210,f6357])).
fof(f6721,plain,(
  ( ! [X123,X121,X124,X122] : (s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X122))) != s('type.semanticPrimitives.result'(bool,X123),'const.semanticPrimitives.Rval_1'(s(bool,X124))) | s(bool,X121) = s(bool,X124) | s(bool,'F_0') = s(bool,X122) | s(bool,'F_0') = s(bool,X121)) ) | $spl12),
  inference(superposition,[],[f209,f6357])).
fof(f6720,plain,(
  ( ! [X118,X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,X119)))) | s(bool,X118) = s(bool,sK9(X118,X120,bool)) | s(bool,'F_0') = s(bool,X119) | s(bool,'F_0') = s(bool,X118)) ) | $spl12),
  inference(superposition,[],[f195,f6357])).
fof(f6719,plain,(
  ( ! [X116,X114,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,X115)))) | p(s(bool,happ(s(fun(bool,bool),X116),s(bool,X117)))) | s(bool,X114) != s(bool,X117) | s(bool,'F_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X114)) ) | $spl12),
  inference(superposition,[],[f194,f6357])).
fof(f6659,plain,(
  ( ! [X61,X59,X57,X54,X60,X58,X56,X55,X53] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X56,fun(X57,bool)),X58),s('type.semanticPrimitives.error_result'(X56),X59),s('type.semanticPrimitives.error_result'(X57),X60))) | s(bool,X61) = s(bool,'const.evalProps.result_rel_4'(s(fun(X53,fun(X54,bool)),X55),s(fun(X56,fun(X57,bool)),X58),s('type.semanticPrimitives.result'(X53,X56),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X56),X59))),s('type.semanticPrimitives.result'(X54,X57),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X57),X60))))) | s(bool,'F_0') = s(bool,X61)) ) | $spl12),
  inference(superposition,[],[f6357,f230])).
fof(f6658,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X44,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X37,bool),happ(s(fun(X36,fun(X37,bool)),X38),s(X36,X42))),s(X37,X43))) | s(bool,X44) = s(bool,'const.evalProps.result_rel_4'(s(fun(X36,fun(X37,bool)),X38),s(fun(X39,fun(X40,bool)),X41),s('type.semanticPrimitives.result'(X36,X39),'const.semanticPrimitives.Rval_1'(s(X36,X42))),s('type.semanticPrimitives.result'(X37,X40),'const.semanticPrimitives.Rval_1'(s(X37,X43))))) | s(bool,'F_0') = s(bool,X44)) ) | $spl12),
  inference(superposition,[],[f6357,f231])).
fof(f6639,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl12),
  inference(superposition,[],[f6357,f6357])).
fof(f6615,plain,(
  ( ! [X70,X68,X74,X72,X71,X69,X67,X75,X73] : (s(bool,X75) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.error_result'(X70),X73),s('type.semanticPrimitives.error_result'(X71),X74))) | s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X67,fun(X68,bool)),X69),s(fun(X70,fun(X71,bool)),X72),s('type.semanticPrimitives.result'(X67,X70),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X70),X73))),s('type.semanticPrimitives.result'(X68,X71),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X71),X74)))))) ) | $spl12),
  inference(superposition,[],[f6357,f230])).
fof(f6613,plain,(
  ( ! [X57,X54,X52,X50,X56,X55,X53,X51,X49] : (s(bool,X57) = s(bool,happ(s(fun(X50,bool),happ(s(fun(X49,fun(X50,bool)),X51),s(X49,X55))),s(X50,X56))) | s(bool,'F_0') = s(bool,X57) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X49,fun(X50,bool)),X51),s(fun(X52,fun(X53,bool)),X54),s('type.semanticPrimitives.result'(X49,X52),'const.semanticPrimitives.Rval_1'(s(X49,X55))),s('type.semanticPrimitives.result'(X50,X53),'const.semanticPrimitives.Rval_1'(s(X50,X56)))))) ) | $spl12),
  inference(superposition,[],[f6357,f231])).
fof(f6592,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X42,X49] : (s(bool,X50) != s(bool,'const.evalProps.result_rel_4'(s(fun(X42,fun(X43,bool)),X44),s(fun(X45,fun(X46,bool)),X47),s('type.semanticPrimitives.result'(X42,X45),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X45),X48))),s('type.semanticPrimitives.result'(X43,X46),'const.semanticPrimitives.Rval_1'(s(X43,X49))))) | s(bool,'F_0') = s(bool,X50)) ) | $spl12),
  inference(subsumption_resolution,[],[f6578,f149])).
fof(f6578,plain,(
  ( ! [X47,X45,X43,X50,X48,X46,X44,X42,X49] : (p(s(bool,'F_0')) | s(bool,X50) != s(bool,'const.evalProps.result_rel_4'(s(fun(X42,fun(X43,bool)),X44),s(fun(X45,fun(X46,bool)),X47),s('type.semanticPrimitives.result'(X42,X45),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X45),X48))),s('type.semanticPrimitives.result'(X43,X46),'const.semanticPrimitives.Rval_1'(s(X43,X49))))) | s(bool,'F_0') = s(bool,X50)) ) | $spl12),
  inference(superposition,[],[f6446,f229])).
fof(f6590,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25,X32] : (s(bool,X32) != s(bool,'const.evalProps.result_rel_4'(s(fun(X24,fun(X25,bool)),X26),s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.result'(X24,X27),'const.semanticPrimitives.Rval_1'(s(X24,X30))),s('type.semanticPrimitives.result'(X25,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),X31))))) | s(bool,'F_0') = s(bool,X32)) ) | $spl12),
  inference(subsumption_resolution,[],[f6576,f149])).
fof(f6576,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25,X32] : (p(s(bool,'F_0')) | s(bool,X32) != s(bool,'const.evalProps.result_rel_4'(s(fun(X24,fun(X25,bool)),X26),s(fun(X27,fun(X28,bool)),X29),s('type.semanticPrimitives.result'(X24,X27),'const.semanticPrimitives.Rval_1'(s(X24,X30))),s('type.semanticPrimitives.result'(X25,X28),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X28),X31))))) | s(bool,'F_0') = s(bool,X32)) ) | $spl12),
  inference(superposition,[],[f6446,f228])).
fof(f6500,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f6486,f147])).
fof(f6486,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(superposition,[],[f6444,f273])).
fof(f6479,plain,(
  ( ! [X37,X38,X36] : (s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) = s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,X37))) | s(bool,X36) != s(bool,X37) | s(bool,'F_0') = s(bool,X36)) ) | $spl12),
  inference(forward_demodulation,[],[f6420,f6347])).
fof(f6420,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) != s(bool,X37) | s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,X37))) = s('type.semanticPrimitives.result'(bool,X38),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s(bool,'F_0') = s(bool,X36)) ) | $spl12),
  inference(superposition,[],[f210,f1387])).
fof(f6418,plain,(
  ( ! [X30,X31,X32] : (s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,X30))) != s('type.semanticPrimitives.result'(bool,X31),'const.semanticPrimitives.Rval_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X30)) ) | $spl12),
  inference(superposition,[],[f209,f1387])).
fof(f6478,plain,(
  ( ! [X28,X29] : (s(bool,'T_0') = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X29,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,X28)))) | s(bool,'F_0') = s(bool,X28)) ) | $spl12),
  inference(forward_demodulation,[],[f6417,f6347])).
fof(f6417,plain,(
  ( ! [X28,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,X28)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)),X29,bool)) | s(bool,'F_0') = s(bool,X28)) ) | $spl12),
  inference(superposition,[],[f195,f1387])).
fof(f6477,plain,(
  ( ! [X26,X27,X25] : (s(bool,'T_0') != s(bool,X27) | ~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X25)))) | p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X27)))) | s(bool,'F_0') = s(bool,X25)) ) | $spl12),
  inference(forward_demodulation,[],[f6416,f6347])).
fof(f6416,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X25)))) | p(s(bool,happ(s(fun(bool,bool),X26),s(bool,X27)))) | s(bool,X27) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X25)) ) | $spl12),
  inference(superposition,[],[f194,f1387])).
fof(f6465,plain,(
  ( ! [X127,X125,X126] : (s(X127,f(s(bool,'T_0'))) != s(X127,g(s(bool,'T_0'))) | s(fun(bool,X127),X125) = s(fun(bool,X127),X126) | s(bool,'F_0') = s(bool,sK12(X125,X126,X127,bool))) ) | $spl12),
  inference(forward_demodulation,[],[f6400,f6347])).
fof(f6400,plain,(
  ( ! [X127,X125,X126] : (s(X127,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) != s(X127,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s(fun(bool,X127),X125) = s(fun(bool,X127),X126) | s(bool,'F_0') = s(bool,sK12(X125,X126,X127,bool))) ) | $spl12),
  inference(superposition,[],[f208,f1387])).
fof(f6464,plain,(
  ( ! [X123,X124] : (s('type.semanticPrimitives.result'(bool,X124),X123) = s('type.semanticPrimitives.result'(bool,X124),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s('type.semanticPrimitives.result'(bool,X124),X123) = s('type.semanticPrimitives.result'(bool,X124),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X124),sK11(X123,X124,bool)))) | s(bool,'F_0') = s(bool,sK10(X123,X124,bool))) ) | $spl12),
  inference(forward_demodulation,[],[f6399,f6347])).
fof(f6399,plain,(
  ( ! [X123,X124] : (s('type.semanticPrimitives.result'(bool,X124),X123) = s('type.semanticPrimitives.result'(bool,X124),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s('type.semanticPrimitives.result'(bool,X124),X123) = s('type.semanticPrimitives.result'(bool,X124),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X124),sK11(X123,X124,bool)))) | s(bool,'F_0') = s(bool,sK10(X123,X124,bool))) ) | $spl12),
  inference(superposition,[],[f207,f1387])).
fof(f6463,plain,(
  ( ! [X121,X122] : (p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | s(bool,'F_0') = s(bool,sK9(X121,X122,bool))) ) | $spl12),
  inference(forward_demodulation,[],[f6398,f6347])).
fof(f6398,plain,(
  ( ! [X121,X122] : (p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))))) | ~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,X121)))) | s(bool,'F_0') = s(bool,sK9(X121,X122,bool))) ) | $spl12),
  inference(superposition,[],[f196,f1387])).
fof(f6462,plain,(
  ( ! [X118,X120,X119] : (s(bool,'T_0') != s(bool,f(s(X118,sK12(X119,X120,bool,X118)))) | s(fun(X118,bool),X119) = s(fun(X118,bool),X120) | s(bool,'F_0') = s(bool,g(s(X118,sK12(X119,X120,bool,X118))))) ) | $spl12),
  inference(forward_demodulation,[],[f6397,f6347])).
fof(f6397,plain,(
  ( ! [X118,X120,X119] : (s(bool,f(s(X118,sK12(X119,X120,bool,X118)))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(fun(X118,bool),X119) = s(fun(X118,bool),X120) | s(bool,'F_0') = s(bool,g(s(X118,sK12(X119,X120,bool,X118))))) ) | $spl12),
  inference(superposition,[],[f208,f1387])).
fof(f6390,plain,(
  ( ! [X80,X78,X79] : (s(bool,X79) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X80),'const.semanticPrimitives.Rval_1'(s(bool,X78))) = s('type.semanticPrimitives.result'(bool,X80),'const.semanticPrimitives.Rval_1'(s(bool,X79))) | s(bool,'F_0') = s(bool,X78)) ) | $spl12),
  inference(superposition,[],[f210,f1387])).
fof(f6460,plain,(
  ( ! [X74,X72,X73] : (s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,X74))) | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,X72)) ) | $spl12),
  inference(forward_demodulation,[],[f6388,f6347])).
fof(f6388,plain,(
  ( ! [X74,X72,X73] : (s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,X74))) != s('type.semanticPrimitives.result'(bool,X73),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,X72)) ) | $spl12),
  inference(superposition,[],[f209,f1387])).
fof(f6459,plain,(
  ( ! [X70,X71] : (~p(s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) | s(bool,X70) = s(bool,sK9(X70,X71,bool)) | s(bool,'F_0') = s(bool,X70)) ) | $spl12),
  inference(forward_demodulation,[],[f6387,f6347])).
fof(f6387,plain,(
  ( ! [X70,X71] : (~p(s(bool,happ(s(fun(bool,bool),X71),s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))))) | s(bool,X70) = s(bool,sK9(X70,X71,bool)) | s(bool,'F_0') = s(bool,X70)) ) | $spl12),
  inference(superposition,[],[f195,f1387])).
fof(f6458,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X68),s(bool,X69)))) | s(bool,X67) != s(bool,X69) | s(bool,'F_0') = s(bool,X67)) ) | $spl12),
  inference(forward_demodulation,[],[f6386,f6347])).
fof(f6386,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,happ(s(fun(bool,bool),X68),s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))))) | p(s(bool,happ(s(fun(bool,bool),X68),s(bool,X69)))) | s(bool,X67) != s(bool,X69) | s(bool,'F_0') = s(bool,X67)) ) | $spl12),
  inference(superposition,[],[f194,f1387])).
fof(f6456,plain,(
  ( ! [X61,X62,X63] : (s(X61,X63) = s(X61,sK9(X63,X62,X61)) | s(bool,'F_0') = s(bool,happ(s(fun(X61,bool),X62),s(X61,X63)))) ) | $spl12),
  inference(subsumption_resolution,[],[f6455,f147])).
fof(f6455,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | s(X61,X63) = s(X61,sK9(X63,X62,X61)) | s(bool,'F_0') = s(bool,happ(s(fun(X61,bool),X62),s(X61,X63)))) ) | $spl12),
  inference(forward_demodulation,[],[f6384,f6347])).
fof(f6384,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | s(X61,X63) = s(X61,sK9(X63,X62,X61)) | s(bool,'F_0') = s(bool,happ(s(fun(X61,bool),X62),s(X61,X63)))) ) | $spl12),
  inference(superposition,[],[f195,f1387])).
fof(f6454,plain,(
  ( ! [X59,X57,X60,X58] : (p(s(bool,happ(s(fun(X57,bool),X58),s(X57,X60)))) | s(X57,X59) != s(X57,X60) | s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),X58),s(X57,X59)))) ) | $spl12),
  inference(subsumption_resolution,[],[f6453,f147])).
fof(f6453,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X57,bool),X58),s(X57,X60)))) | s(X57,X59) != s(X57,X60) | s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),X58),s(X57,X59)))) ) | $spl12),
  inference(forward_demodulation,[],[f6383,f6347])).
fof(f6383,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | p(s(bool,happ(s(fun(X57,bool),X58),s(X57,X60)))) | s(X57,X59) != s(X57,X60) | s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),X58),s(X57,X59)))) ) | $spl12),
  inference(superposition,[],[f194,f1387])).
fof(f6448,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | $spl12),
  inference(subsumption_resolution,[],[f6447,f147])).
fof(f6447,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | $spl12),
  inference(forward_demodulation,[],[f6377,f6347])).
fof(f6377,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | $spl12),
  inference(superposition,[],[f276,f1387])).
fof(f6446,plain,(
  ( ! [X12,X11] : (p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X11)) ) | $spl12),
  inference(subsumption_resolution,[],[f6445,f147])).
fof(f6445,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X11)) ) | $spl12),
  inference(forward_demodulation,[],[f6372,f6347])).
fof(f6372,plain,(
  ( ! [X12,X11] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | p(s(bool,X12)) | s(bool,X11) != s(bool,X12) | s(bool,'F_0') = s(bool,X11)) ) | $spl12),
  inference(superposition,[],[f202,f1387])).
fof(f6444,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | $spl12),
  inference(subsumption_resolution,[],[f6443,f147])).
fof(f6443,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | $spl12),
  inference(forward_demodulation,[],[f6371,f6347])).
fof(f6371,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | $spl12),
  inference(superposition,[],[f200,f1387])).
fof(f6357,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl12),
  inference(superposition,[],[f1387,f1387])).
fof(f6435,plain,(
  ( ! [X39,X37,X43,X41,X38,X44,X42,X40] : (s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.error_result'(X40),X43),s('type.semanticPrimitives.error_result'(X41),X44))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(X38,bool)),X39),s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X37,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),X43))),s('type.semanticPrimitives.result'(X38,X41),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X41),X44)))))) ) | $spl12),
  inference(forward_demodulation,[],[f6356,f6347])).
fof(f6356,plain,(
  ( ! [X39,X37,X43,X41,X38,X44,X42,X40] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.error_result'(X40),X43),s('type.semanticPrimitives.error_result'(X41),X44))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(X38,bool)),X39),s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X37,X40),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X40),X43))),s('type.semanticPrimitives.result'(X38,X41),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X41),X44)))))) ) | $spl12),
  inference(superposition,[],[f1387,f230])).
fof(f6434,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),happ(s(fun(X21,fun(X22,bool)),X23),s(X21,X27))),s(X22,X28))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X22,bool)),X23),s(fun(X24,fun(X25,bool)),X26),s('type.semanticPrimitives.result'(X21,X24),'const.semanticPrimitives.Rval_1'(s(X21,X27))),s('type.semanticPrimitives.result'(X22,X25),'const.semanticPrimitives.Rval_1'(s(X22,X28)))))) ) | $spl12),
  inference(forward_demodulation,[],[f6354,f6347])).
fof(f6354,plain,(
  ( ! [X28,X26,X24,X23,X21,X27,X25,X22] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,happ(s(fun(X22,bool),happ(s(fun(X21,fun(X22,bool)),X23),s(X21,X27))),s(X22,X28))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(X22,bool)),X23),s(fun(X24,fun(X25,bool)),X26),s('type.semanticPrimitives.result'(X21,X24),'const.semanticPrimitives.Rval_1'(s(X21,X27))),s('type.semanticPrimitives.result'(X22,X25),'const.semanticPrimitives.Rval_1'(s(X22,X28)))))) ) | $spl12),
  inference(superposition,[],[f1387,f231])).
fof(f6347,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | $spl12),
  inference(unit_resulting_resolution,[],[f256,f1387])).
fof(f9997,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) != s(bool,X23) | s(bool,'F_0') = s(bool,X23) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X21,bool)) | s(bool,'T_0') = s(bool,X22)) ) | $spl44),
  inference(superposition,[],[f9873,f273])).
fof(f9961,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X3,bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl44),
  inference(superposition,[],[f9873,f273])).
fof(f24123,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X12,bool)) | s(bool,'F_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X13)) ) | ($spl12 | $spl44)),
  inference(subsumption_resolution,[],[f9964,f24121])).
fof(f9964,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X12,bool)) | s(bool,'F_0') = s(bool,X11) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl44),
  inference(superposition,[],[f9873,f273])).
fof(f24120,plain,(
  ( ! [X26,X24] : (s(bool,X26) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X24,bool)) | s(bool,'T_0') = s(bool,X26)) ) | $spl82),
  inference(cnf_transformation,[],[f24120_D])).
fof(f24120_D,plain,(
  ( ! [X26,X24] : (s(bool,X26) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X24,bool)) | s(bool,'T_0') = s(bool,X26)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f10008,plain,(
  ( ! [X17,X15,X16] : (s(bool,'F_0') = s(bool,X16) | s(bool,X17) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X15,bool)) | s(bool,'T_0') = s(bool,X17)) ) | $spl44),
  inference(subsumption_resolution,[],[f9995,f150])).
fof(f9995,plain,(
  ( ! [X17,X15,X16] : (s(bool,'T_0') != s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,X17) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X15,bool)) | s(bool,'T_0') = s(bool,X17)) ) | $spl44),
  inference(superposition,[],[f9873,f273])).
fof(f10009,plain,(
  ( ! [X26,X24,X25] : (s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X24,bool)) | s(bool,'T_0') = s(bool,X26)) ) | $spl44),
  inference(subsumption_resolution,[],[f9998,f150])).
fof(f9998,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') != s(bool,X25) | s(bool,'F_0') = s(bool,X25) | s(bool,X26) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X24,bool)) | s(bool,'T_0') = s(bool,X26)) ) | $spl44),
  inference(superposition,[],[f9873,f273])).
fof(f24111,plain,(
  $false | ($spl4 | $spl36 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f24110,f24102])).
fof(f24110,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0')))))) ) | ($spl4 | $spl36 | $spl55 | $spl63)),
  inference(forward_demodulation,[],[f12353,f24102])).
fof(f12353,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'F_0')))))) ) | ($spl55 | $spl63)),
  inference(unit_resulting_resolution,[],[f10404,f11897,f398])).
fof(f24086,plain,(
  ( ! [X445,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X442),X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X443),X446)))))) ) | $spl80),
  inference(cnf_transformation,[],[f24086_D])).
fof(f24086_D,plain,(
  ( ! [X445,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X442),X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X443),X446)))))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f24085,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X447,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X442),X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X443),X446)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f19692,f10007])).
fof(f10007,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.error_result'(X58),X61),s('type.semanticPrimitives.error_result'(X59),X62))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X61))),s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),X62)))))) ) | $spl44),
  inference(forward_demodulation,[],[f9972,f7120])).
fof(f9972,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55,X63] : (s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X63,bool)) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.error_result'(X58),X61),s('type.semanticPrimitives.error_result'(X59),X62))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X55,fun(X56,bool)),X57),s(fun(X58,fun(X59,bool)),X60),s('type.semanticPrimitives.result'(X55,X58),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X58),X61))),s('type.semanticPrimitives.result'(X56,X59),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X59),X62)))))) ) | $spl44),
  inference(superposition,[],[f9873,f230])).
fof(f19692,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X447,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X442),X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X443),X446))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.error_result'(X442),X445),s('type.semanticPrimitives.error_result'(X443),X446)))) ) | $spl44),
  inference(superposition,[],[f9873,f5316])).
fof(f24084,plain,(
  ( ! [X445,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rval_1'(s(X439,X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rval_1'(s(X440,X446)))))) ) | $spl78),
  inference(cnf_transformation,[],[f24084_D])).
fof(f24084_D,plain,(
  ( ! [X445,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rval_1'(s(X439,X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rval_1'(s(X440,X446)))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f24083,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X447,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rval_1'(s(X439,X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rval_1'(s(X440,X446)))))) ) | $spl44),
  inference(subsumption_resolution,[],[f20872,f10006])).
fof(f10006,plain,(
  ( ! [X39,X37,X43,X41,X38,X44,X42,X40] : (s(bool,'F_0') != s(bool,happ(s(fun(X38,bool),happ(s(fun(X37,fun(X38,bool)),X39),s(X37,X43))),s(X38,X44))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(X38,bool)),X39),s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X37,X40),'const.semanticPrimitives.Rval_1'(s(X37,X43))),s('type.semanticPrimitives.result'(X38,X41),'const.semanticPrimitives.Rval_1'(s(X38,X44)))))) ) | $spl44),
  inference(forward_demodulation,[],[f9970,f7120])).
fof(f9970,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X44,X42,X40] : (s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X45,bool)) != s(bool,happ(s(fun(X38,bool),happ(s(fun(X37,fun(X38,bool)),X39),s(X37,X43))),s(X38,X44))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X37,fun(X38,bool)),X39),s(fun(X40,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(X37,X40),'const.semanticPrimitives.Rval_1'(s(X37,X43))),s('type.semanticPrimitives.result'(X38,X41),'const.semanticPrimitives.Rval_1'(s(X38,X44)))))) ) | $spl44),
  inference(superposition,[],[f9873,f231])).
fof(f20872,plain,(
  ( ! [X445,X447,X441,X443,X444,X446,X440,X442,X439] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X447,bool)) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X439,fun(X440,bool)),X441),s(fun(X442,fun(X443,bool)),X444),s('type.semanticPrimitives.result'(X439,X442),'const.semanticPrimitives.Rval_1'(s(X439,X445))),s('type.semanticPrimitives.result'(X440,X443),'const.semanticPrimitives.Rval_1'(s(X440,X446))))) | s(bool,'F_0') = s(bool,happ(s(fun(X440,bool),happ(s(fun(X439,fun(X440,bool)),X441),s(X439,X445))),s(X440,X446)))) ) | $spl44),
  inference(superposition,[],[f9873,f5598])).
fof(f24082,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744,f23746,f23751,f23752])).
fof(f23709,plain,(
  ( ! [X333,X335,X337,X332,X334,X336] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X332) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X333,fun(sK3,bool)),X334),s('type.semanticPrimitives.error_result'(X333),X335),s('type.semanticPrimitives.error_result'(sK3),sK11(X332,sK3,sK1)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X336,fun(sK1,bool)),X337),s(fun(X333,fun(sK3,bool)),X334),s('type.semanticPrimitives.result'(X336,X333),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X333),X335))),s('type.semanticPrimitives.result'(sK1,sK3),X332)))) ) | $spl0),
  inference(superposition,[],[f19050,f5315])).
fof(f23784,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl0),
  inference(subsumption_resolution,[],[f23420,f19050])).
fof(f23420,plain,(
  s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(sK4,sK3,sK1)))) | $spl0),
  inference(superposition,[],[f5315,f6331])).
fof(f23398,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK3,fun(X41,bool)),X42),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)),s('type.semanticPrimitives.error_result'(X41),sK11(X43,X41,X44)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X44,bool)),X45),s(fun(sK3,fun(X41,bool)),X42),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X44,X41),X43))) | s('type.semanticPrimitives.result'(X44,X41),X43) = s('type.semanticPrimitives.result'(X44,X41),'const.semanticPrimitives.Rval_1'(s(X44,sK10(X43,X41,X44))))) ) | $spl0),
  inference(superposition,[],[f5315,f17634])).
fof(f23043,plain,(
  ( ! [X333,X329,X331,X332,X334,X330] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X329) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK3,fun(X330,bool)),X331),s('type.semanticPrimitives.error_result'(sK3),sK11(X329,sK3,sK1)),s('type.semanticPrimitives.error_result'(X330),X332))) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X333,bool)),X334),s(fun(sK3,fun(X330,bool)),X331),s('type.semanticPrimitives.result'(sK1,sK3),X329),s('type.semanticPrimitives.result'(X333,X330),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X330),X332)))))) ) | $spl0),
  inference(superposition,[],[f19050,f5312])).
fof(f22754,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X41,fun(sK3,bool)),X42),s('type.semanticPrimitives.error_result'(X41),sK11(X43,X41,X44)),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X44,fun(sK1,bool)),X45),s(fun(X41,fun(sK3,bool)),X42),s('type.semanticPrimitives.result'(X44,X41),X43),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s('type.semanticPrimitives.result'(X44,X41),X43) = s('type.semanticPrimitives.result'(X44,X41),'const.semanticPrimitives.Rval_1'(s(X44,sK10(X43,X41,X44))))) ) | $spl0),
  inference(superposition,[],[f5312,f17634])).
fof(f20985,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X334,fun(bool,bool)),X335),s(X334,X339))),s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(bool,bool)),X335),s(fun(X336,fun(X337,bool)),X338),s('type.semanticPrimitives.result'(X334,X336),'const.semanticPrimitives.Rval_1'(s(X334,X339))),s('type.semanticPrimitives.result'(bool,X337),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | $spl0),
  inference(forward_demodulation,[],[f20793,f19054])).
fof(f20793,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X334,fun(bool,bool)),X335),s(fun(X336,fun(X337,bool)),X338),s('type.semanticPrimitives.result'(X334,X336),'const.semanticPrimitives.Rval_1'(s(X334,X339))),s('type.semanticPrimitives.result'(bool,X337),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(X334,fun(bool,bool)),X335),s(X334,X339))),s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))))) ) | $spl0),
  inference(superposition,[],[f5598,f6331])).
fof(f20956,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s(bool,'F_0') = s(bool,happ(s(fun(X334,bool),happ(s(fun(bool,fun(X334,bool)),X335),s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))))),s(X334,X339))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X334,bool)),X335),s(fun(X336,fun(X337,bool)),X338),s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rval_1'(s(X334,X339)))))) ) | $spl0),
  inference(forward_demodulation,[],[f20733,f19054])).
fof(f20733,plain,(
  ( ! [X335,X337,X339,X334,X336,X338] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(X334,bool)),X335),s(fun(X336,fun(X337,bool)),X338),s('type.semanticPrimitives.result'(bool,X336),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))),s('type.semanticPrimitives.result'(X334,X337),'const.semanticPrimitives.Rval_1'(s(X334,X339))))) | s(bool,'F_0') = s(bool,happ(s(fun(X334,bool),happ(s(fun(bool,fun(X334,bool)),X335),s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))))),s(X334,X339)))) ) | $spl0),
  inference(superposition,[],[f5598,f6331])).
fof(f19637,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X41,fun(sK1,bool)),X42),s(fun(X43,fun(sK3,bool)),X44),s('type.semanticPrimitives.result'(X41,X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),X45))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X43,fun(sK3,bool)),X44),s('type.semanticPrimitives.error_result'(X43),X45),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) ) | $spl0),
  inference(superposition,[],[f5316,f17634])).
fof(f19630,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X41,bool)),X42),s(fun(sK3,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X41,X43),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X43),X45))))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK3,fun(X43,bool)),X44),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)),s('type.semanticPrimitives.error_result'(X43),X45)))) ) | $spl0),
  inference(superposition,[],[f5316,f17634])).
fof(f19178,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X6) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X7,fun(sK1,bool)),X8),s(fun(X9,fun(sK3,bool)),X10),s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rval_1'(s(X7,X11))),s('type.semanticPrimitives.result'(sK1,sK3),X6)))) ) | $spl0),
  inference(superposition,[],[f19050,f3215])).
fof(f19177,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X0) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X1,bool)),X2),s(fun(sK3,fun(X3,bool)),X4),s('type.semanticPrimitives.result'(sK1,sK3),X0),s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rval_1'(s(X1,X5)))))) ) | $spl0),
  inference(superposition,[],[f19050,f4953])).
fof(f19163,plain,(
  ( ! [X30,X29] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),sK4))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),X30))) | s('type.semanticPrimitives.result'(sK1,sK3),X30) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(X30,sK3,sK1))))) ) | $spl0),
  inference(subsumption_resolution,[],[f19138,f213])).
fof(f19138,plain,(
  ( ! [X30,X29] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),sK4))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X29),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),X30))) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(X30,sK3,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(sK1,sK3),X30) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(X30,sK3,sK1))))) ) | $spl0),
  inference(superposition,[],[f3094,f17634])).
fof(f19089,plain,(
  ( ! [X127] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X127),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X127),s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),X127,'type.semanticPrimitives.result'(sK1,sK3)))))) ) | $spl0),
  inference(superposition,[],[f471,f17634])).
fof(f19113,plain,(
  ( ! [X89] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),X89,'type.semanticPrimitives.result'(sK1,sK3))) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X89),s('type.semanticPrimitives.result'(sK1,sK3),sK4))))) ) | $spl0),
  inference(forward_demodulation,[],[f19078,f17634])).
fof(f19078,plain,(
  ( ! [X89] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X89),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),X89,'type.semanticPrimitives.result'(sK1,sK3)))) ) | $spl0),
  inference(superposition,[],[f195,f17634])).
fof(f19103,plain,(
  ( ! [X55] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X55))) | s('type.semanticPrimitives.error_result'(sK3),X55) = s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))) ) | $spl0),
  inference(subsumption_resolution,[],[f19065,f213])).
fof(f19065,plain,(
  ( ! [X55] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X55))) | s('type.semanticPrimitives.error_result'(sK3),X55) = s('type.semanticPrimitives.error_result'(sK3),sK11('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1)) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),sK3,sK1))))) ) | $spl0),
  inference(superposition,[],[f3073,f17634])).
fof(f19063,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X50,bool)),X51),s(fun(sK3,fun(X52,bool)),X53),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X50,X52),'const.semanticPrimitives.Rval_1'(s(X50,X54)))))) ) | $spl0),
  inference(superposition,[],[f5104,f17634])).
fof(f19062,plain,(
  ( ! [X47,X45,X48,X46,X49] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X45,bool)),X46),s(fun(sK3,fun(X47,bool)),X48),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X45,X47),X49))) | s('type.semanticPrimitives.result'(X45,X47),X49) = s('type.semanticPrimitives.result'(X45,X47),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X47),sK11(X49,X47,X45))))) ) | $spl0),
  inference(superposition,[],[f4992,f17634])).
fof(f19061,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,X41) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(bool,bool)),X42),s(fun(sK3,fun(X43,bool)),X44),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(bool,X43),'const.semanticPrimitives.Rval_1'(s(bool,X41))))) | s(bool,'T_0') = s(bool,X41)) ) | $spl0),
  inference(superposition,[],[f4984,f17634])).
fof(f19060,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X36,fun(sK1,bool)),X37),s(fun(X38,fun(sK3,bool)),X39),s('type.semanticPrimitives.result'(X36,X38),'const.semanticPrimitives.Rval_1'(s(X36,X40))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl0),
  inference(superposition,[],[f3299,f17634])).
fof(f19059,plain,(
  ( ! [X35,X33,X31,X34,X32] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X31,fun(sK1,bool)),X32),s(fun(X33,fun(sK3,bool)),X34),s('type.semanticPrimitives.result'(X31,X33),X35),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s('type.semanticPrimitives.result'(X31,X33),X35) = s('type.semanticPrimitives.result'(X31,X33),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X33),sK11(X35,X33,X31))))) ) | $spl0),
  inference(superposition,[],[f3212,f17634])).
fof(f19058,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,X27) = s(bool,'const.evalProps.result_rel_4'(s(fun(bool,fun(sK1,bool)),X28),s(fun(X29,fun(sK3,bool)),X30),s('type.semanticPrimitives.result'(bool,X29),'const.semanticPrimitives.Rval_1'(s(bool,X27))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f3205,f17634])).
fof(f19057,plain,(
  ( ! [X26] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X26) | s('type.semanticPrimitives.result'(sK1,sK3),X26) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(X26,sK3,sK1))))) ) | $spl0),
  inference(superposition,[],[f3087,f17634])).
fof(f19056,plain,(
  ( ! [X25] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),X25) | s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)) = s('type.semanticPrimitives.error_result'(sK3),sK11(X25,sK3,sK1)) | s('type.semanticPrimitives.result'(sK1,sK3),X25) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(X25,sK3,sK1))))) ) | $spl0),
  inference(superposition,[],[f3073,f17634])).
fof(f19055,plain,(
  ( ! [X24,X23] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),sK4))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(sK1,sK3),X23),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,X24)))))) ) | $spl0),
  inference(superposition,[],[f394,f17634])).
fof(f19054,plain,(
  ( ! [X21,X19,X22,X20,X18] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X18,fun(sK3,bool)),X19),s('type.semanticPrimitives.error_result'(X18),X20),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X21,fun(sK1,bool)),X22),s(fun(X18,fun(sK3,bool)),X19),s('type.semanticPrimitives.result'(X21,X18),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X18),X20))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl0),
  inference(superposition,[],[f230,f17634])).
fof(f19053,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK3,fun(X13,bool)),X14),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)),s('type.semanticPrimitives.error_result'(X13),X15))) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X16,bool)),X17),s(fun(sK3,fun(X13,bool)),X14),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X16,X13),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X13),X15)))))) ) | $spl0),
  inference(superposition,[],[f230,f17634])).
fof(f19052,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK1,fun(X8,bool)),X9),s(fun(sK3,fun(X10,bool)),X11),s('type.semanticPrimitives.result'(sK1,sK3),sK4),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rval_1'(s(X8,X12)))))) ) | $spl0),
  inference(superposition,[],[f229,f17634])).
fof(f19051,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(sK1,bool)),X4),s(fun(X5,fun(sK3,bool)),X6),s('type.semanticPrimitives.result'(X3,X5),'const.semanticPrimitives.Rval_1'(s(X3,X7))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl0),
  inference(superposition,[],[f228,f17634])).
fof(f19048,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X0))) | s('type.semanticPrimitives.error_result'(sK3),X0) = s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))) ) | $spl0),
  inference(superposition,[],[f211,f17634])).
fof(f8357,plain,(
  ( ! [X76,X77] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,X76)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X77),s(bool,sK9('const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))),X77,bool)))) | s(bool,'T_0') = s(bool,X76)) ) | $spl29),
  inference(superposition,[],[f471,f7505])).
fof(f8353,plain,(
  ( ! [X69] : (~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X69),s(bool,sK9('const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)),X69,bool))))) ) | $spl0),
  inference(superposition,[],[f471,f6331])).
fof(f7929,plain,(
  ( ! [X35,X33,X34] : (s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,X33))) != s('type.semanticPrimitives.result'(bool,X34),'const.semanticPrimitives.Rval_1'(s(bool,X35))) | s(bool,X35) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s(bool,'T_0') = s(bool,X33)) ) | $spl29),
  inference(superposition,[],[f209,f7505])).
fof(f7896,plain,(
  ( ! [X83,X81,X82] : (s(bool,X82) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,X81))) = s('type.semanticPrimitives.result'(bool,X83),'const.semanticPrimitives.Rval_1'(s(bool,X82))) | s(bool,'T_0') = s(bool,X81)) ) | $spl29),
  inference(superposition,[],[f210,f7505])).
fof(f7855,plain,(
  ( ! [X48,X49] : (s(bool,X48) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X48)),X49,bool))) ) | $spl29),
  inference(superposition,[],[f7505,f7120])).
fof(f7505,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(subsumption_resolution,[],[f7495,f147])).
fof(f7495,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl29),
  inference(superposition,[],[f7482,f273])).
fof(f7489,plain,(
  s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl29),
  inference(unit_resulting_resolution,[],[f147,f7482,f202])).
fof(f6534,plain,(
  ( ! [X12,X13] : (s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X12),'const.semanticPrimitives.Rval_1'(s(bool,X13))) | s(bool,X13) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl0),
  inference(superposition,[],[f209,f6331])).
fof(f6560,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)),X11,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'T_0'))))) ) | $spl0),
  inference(forward_demodulation,[],[f6533,f6331])).
fof(f6533,plain,(
  ( ! [X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,'T_0')))) | s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) = s(bool,sK9('const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)),X11,bool))) ) | $spl0),
  inference(superposition,[],[f195,f6331])).
fof(f6557,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(subsumption_resolution,[],[f6528,f147])).
fof(f6528,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f276,f6331])).
fof(f6334,plain,(
  s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | $spl0),
  inference(unit_resulting_resolution,[],[f256,f249,f276])).
fof(f24081,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744,f23746,f23751])).
fof(f24080,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744,f23746])).
fof(f24079,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737,f23744])).
fof(f24078,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736,f23737])).
fof(f24077,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735,f23736])).
fof(f24076,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734,f23735])).
fof(f24075,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733,f23734])).
fof(f24074,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732,f23733])).
fof(f24073,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726,f23732])).
fof(f24072,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070,f23726])).
fof(f24071,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724,f24070])).
fof(f24068,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066,f23724])).
fof(f24067,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063,f24066])).
fof(f24064,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721,f24063])).
fof(f24061,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059,f23721])).
fof(f24060,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057,f24059])).
fof(f24058,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055,f24057])).
fof(f24056,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053,f24055])).
fof(f24054,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713,f24053])).
fof(f24052,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709,f23713])).
fof(f24051,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708,f23709])).
fof(f24050,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707,f23708])).
fof(f24049,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706,f23707])).
fof(f24048,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705,f23706])).
fof(f24047,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045,f23705])).
fof(f24046,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702,f24045])).
fof(f24044,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042,f23702])).
fof(f24043,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700,f24042])).
fof(f24041,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699,f23700])).
fof(f24040,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698,f23699])).
fof(f24039,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697,f23698])).
fof(f24038,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696,f23697])).
fof(f24037,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695,f23696])).
fof(f24036,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694,f23695])).
fof(f24035,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693,f23694])).
fof(f24034,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692,f23693])).
fof(f24033,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691,f23692])).
fof(f24032,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690,f23691])).
fof(f24031,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689,f23690])).
fof(f24030,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688,f23689])).
fof(f24029,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687,f23688])).
fof(f24028,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686,f23687])).
fof(f24027,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683,f23686])).
fof(f24026,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682,f23683])).
fof(f24025,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681,f23682])).
fof(f24024,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678,f23681])).
fof(f24023,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677,f23678])).
fof(f24022,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672,f23677])).
fof(f24021,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670,f23672])).
fof(f24020,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663,f23670])).
fof(f24019,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662,f23663])).
fof(f24018,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661,f23662])).
fof(f24017,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660,f23661])).
fof(f24016,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659,f23660])).
fof(f24015,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658,f23659])).
fof(f24014,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941,f23658])).
fof(f24013,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23657,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23657,plain,(
  ( ! [X866,X864,X868,X863,X867,X865,X869,X862] : (~p(s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X865,fun(X866,bool)),X867),s('type.semanticPrimitives.error_result'(X865),X868),s('type.semanticPrimitives.error_result'(X866),sK11(X869,X866,X863))))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X862,fun(X863,bool)),X864),s(fun(X865,fun(X866,bool)),X867),s('type.semanticPrimitives.result'(X862,X865),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X865),X868))),s('type.semanticPrimitives.result'(X863,X866),X869))) | s('type.semanticPrimitives.result'(X863,X866),X869) = s('type.semanticPrimitives.result'(X863,X866),'const.semanticPrimitives.Rval_1'(s(X863,sK10(X869,X866,X863))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f22253,f5315])).
fof(f22253,plain,(
  ( ! [X11] : (~p(s(bool,f(s(bool,f(s(bool,X11)))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl5 | $spl55)),
  inference(trivial_inequality_removal,[],[f22145])).
fof(f22145,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,f(s(bool,f(s(bool,X11)))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f156,f12040])).
fof(f12040,plain,(
  ( ! [X58] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X58))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(forward_demodulation,[],[f12039,f7120])).
fof(f12039,plain,(
  ( ! [X59,X58] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X58)),X59,bool)))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f12004,f149])).
fof(f12004,plain,(
  ( ! [X59,X58] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X58)),X59,bool)))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11513,f8791])).
fof(f8791,plain,(
  ( ! [X35,X33] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X33)),X35,bool)) | s(bool,'T_0') = s(bool,X33)) ) | $spl5),
  inference(superposition,[],[f8248,f7120])).
fof(f8248,plain,(
  ( ! [X78,X79,X77] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X77)),X78,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X77)),X79,bool))) ) | $spl5),
  inference(forward_demodulation,[],[f8105,f7269])).
fof(f7269,plain,(
  s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | $spl5),
  inference(unit_resulting_resolution,[],[f256,f252,f306])).
fof(f252,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | $spl5),
  inference(cnf_transformation,[],[f252_D])).
fof(f252_D,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f8105,plain,(
  ( ! [X78,X79,X77] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X77)),X79,bool)) | s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X77)),X78,bool)) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(superposition,[],[f7650,f7120])).
fof(f7650,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X46)),X47,bool))) ) | $spl5),
  inference(superposition,[],[f7278,f7120])).
fof(f7278,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f7271,f147])).
fof(f7271,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f252,f273])).
fof(f11513,plain,(
  ( ! [X20] : (p(s(bool,X20)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X20)))))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11489,f152])).
fof(f11489,plain,(
  ( ! [X20] : (p(s(bool,X20)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11180,f10909])).
fof(f10909,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10856,f150])).
fof(f10856,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'F_0'))) | ($spl5 | $spl55)),
  inference(unit_resulting_resolution,[],[f147,f10404,f8324])).
fof(f8324,plain,(
  ( ! [X18,X16] : (~p(s(bool,X18)) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X16)) ) | $spl5),
  inference(forward_demodulation,[],[f8323,f7269])).
fof(f8323,plain,(
  ( ! [X18,X16] : (s(bool,X16) = s(bool,X18) | ~p(s(bool,X18)) | s(bool,X16) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(forward_demodulation,[],[f8322,f7120])).
fof(f8322,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X18)) | s(bool,X18) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X16)),X17,bool)) | s(bool,X16) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(subsumption_resolution,[],[f8201,f147])).
fof(f8201,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X18)) | s(bool,X18) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X16)),X17,bool)) | s(bool,X16) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(superposition,[],[f200,f7650])).
fof(f11180,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,f(s(bool,X4)))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11105,f152])).
fof(f11105,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,f(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f157,f10909])).
fof(f24012,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23656,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23656,plain,(
  ( ! [X860,X854,X859,X857,X861,X855,X858,X856] : (~p(s(bool,g(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X857,fun(X858,bool)),X859),s('type.semanticPrimitives.error_result'(X857),X860),s('type.semanticPrimitives.error_result'(X858),sK11(X861,X858,X855))))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X854,fun(X855,bool)),X856),s(fun(X857,fun(X858,bool)),X859),s('type.semanticPrimitives.result'(X854,X857),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X857),X860))),s('type.semanticPrimitives.result'(X855,X858),X861))) | s('type.semanticPrimitives.result'(X855,X858),X861) = s('type.semanticPrimitives.result'(X855,X858),'const.semanticPrimitives.Rval_1'(s(X855,sK10(X861,X858,X855))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f21581,f5315])).
fof(f21581,plain,(
  ( ! [X11] : (~p(s(bool,g(s(bool,g(s(bool,X11)))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl5 | $spl47 | $spl63)),
  inference(trivial_inequality_removal,[],[f21476])).
fof(f21476,plain,(
  ( ! [X11] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,g(s(bool,g(s(bool,X11)))))) | s(bool,'T_0') = s(bool,X11)) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f156,f18315])).
fof(f18315,plain,(
  ( ! [X134] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X134))))) | s(bool,'T_0') = s(bool,X134)) ) | ($spl5 | $spl47 | $spl63)),
  inference(subsumption_resolution,[],[f18245,f149])).
fof(f18245,plain,(
  ( ! [X134] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X134))))) | s(bool,'T_0') = s(bool,X134)) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f17450,f17447])).
fof(f17447,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl5 | $spl47 | $spl63)),
  inference(subsumption_resolution,[],[f17342,f12549])).
fof(f12549,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl63),
  inference(subsumption_resolution,[],[f12476,f147])).
fof(f12476,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl63),
  inference(superposition,[],[f276,f12379])).
fof(f12379,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f149,f11897,f306])).
fof(f17342,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f17141,f12555])).
fof(f12555,plain,(
  ( ! [X30] : (s(bool,X30) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X30)) ) | ($spl5 | $spl63)),
  inference(subsumption_resolution,[],[f12491,f147])).
fof(f12491,plain,(
  ( ! [X30] : (~p(s(bool,'T_0')) | s(bool,X30) = s(bool,f(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X30)) ) | ($spl5 | $spl63)),
  inference(superposition,[],[f8324,f12379])).
fof(f17141,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17048,f150])).
fof(f17048,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | ($spl5 | $spl47)),
  inference(unit_resulting_resolution,[],[f147,f10397,f8324])).
fof(f10397,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) | $spl47),
  inference(cnf_transformation,[],[f10397_D])).
fof(f10397_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'F_0'))) <=> ~$spl47),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl47])])).
fof(f17450,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X4)))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17348,f152])).
fof(f17348,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,g(s(bool,X4))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f157,f17141])).
fof(f24011,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23655,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23655,plain,(
  ( ! [X850,X848,X852,X847,X851,X849,X853,X846] : (~p(s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.error_result'(X849),X852),s('type.semanticPrimitives.error_result'(X850),sK11(X853,X850,X847))))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X846,fun(X847,bool)),X848),s(fun(X849,fun(X850,bool)),X851),s('type.semanticPrimitives.result'(X846,X849),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X849),X852))),s('type.semanticPrimitives.result'(X847,X850),X853))) | s('type.semanticPrimitives.result'(X847,X850),X853) = s('type.semanticPrimitives.result'(X847,X850),'const.semanticPrimitives.Rval_1'(s(X847,sK10(X853,X850,X847))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f20591,f5315])).
fof(f20591,plain,(
  ( ! [X10] : (~p(s(bool,f(s(bool,g(s(bool,X10)))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(trivial_inequality_removal,[],[f20491])).
fof(f20491,plain,(
  ( ! [X10] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,f(s(bool,g(s(bool,X10)))))) | s(bool,'T_0') = s(bool,X10)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f156,f18303])).
fof(f18303,plain,(
  ( ! [X115] : (s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,X115))))) | s(bool,'T_0') = s(bool,X115)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f18229,f149])).
fof(f18229,plain,(
  ( ! [X115] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,X115))))) | s(bool,'T_0') = s(bool,X115)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f11180,f17447])).
fof(f24010,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23654,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23654,plain,(
  ( ! [X843,X841,X845,X839,X842,X840,X844,X838] : (~p(s(bool,g(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X841,fun(X842,bool)),X843),s('type.semanticPrimitives.error_result'(X841),X844),s('type.semanticPrimitives.error_result'(X842),sK11(X845,X842,X839))))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X838,fun(X839,bool)),X840),s(fun(X841,fun(X842,bool)),X843),s('type.semanticPrimitives.result'(X838,X841),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X841),X844))),s('type.semanticPrimitives.result'(X839,X842),X845))) | s('type.semanticPrimitives.result'(X839,X842),X845) = s('type.semanticPrimitives.result'(X839,X842),'const.semanticPrimitives.Rval_1'(s(X839,sK10(X845,X842,X839))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f19961,f5315])).
fof(f19961,plain,(
  ( ! [X7] : (~p(s(bool,g(s(bool,f(s(bool,X7)))))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(trivial_inequality_removal,[],[f19864])).
fof(f19864,plain,(
  ( ! [X7] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,g(s(bool,f(s(bool,X7)))))) | s(bool,'T_0') = s(bool,X7)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f156,f17924])).
fof(f17924,plain,(
  ( ! [X20] : (s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f17892,f149])).
fof(f17892,plain,(
  ( ! [X20] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17450,f16637])).
fof(f16637,plain,(
  ( ! [X101] : (s(bool,'F_0') = s(bool,f(s(bool,X101))) | s(bool,'T_0') = s(bool,X101)) ) | ($spl5 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f12683,f12549])).
fof(f12683,plain,(
  ( ! [X101] : (s(bool,X101) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,f(s(bool,X101)))) ) | ($spl5 | $spl55 | $spl63)),
  inference(superposition,[],[f10909,f12555])).
fof(f24009,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23653,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23653,plain,(
  ( ! [X831,X835,X833,X837,X830,X834,X832,X836] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X833,fun(X834,bool)),X835),s('type.semanticPrimitives.error_result'(X833),X836),s('type.semanticPrimitives.error_result'(X834),sK11(X837,X834,X831))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X830,fun(X831,bool)),X832),s(fun(X833,fun(X834,bool)),X835),s('type.semanticPrimitives.result'(X830,X833),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X833),X836))),s('type.semanticPrimitives.result'(X831,X834),X837))) = s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X830,fun(X831,bool)),X832),s(fun(X833,fun(X834,bool)),X835),s('type.semanticPrimitives.result'(X830,X833),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X833),X836))),s('type.semanticPrimitives.result'(X831,X834),X837))))) | s('type.semanticPrimitives.result'(X831,X834),X837) = s('type.semanticPrimitives.result'(X831,X834),'const.semanticPrimitives.Rval_1'(s(X831,sK10(X837,X834,X831))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f19183,f5315])).
fof(f19183,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,g(s(bool,X0)))) ) | ($spl5 | $spl47)),
  inference(factoring,[],[f17451])).
fof(f17451,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5)))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17349,f152])).
fof(f17349,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f197,f17141])).
fof(f24008,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23652,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23652,plain,(
  ( ! [X825,X829,X823,X826,X824,X828,X822,X827] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X825,fun(X826,bool)),X827),s('type.semanticPrimitives.error_result'(X825),X828),s('type.semanticPrimitives.error_result'(X826),sK11(X829,X826,X823)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X822,fun(X823,bool)),X824),s(fun(X825,fun(X826,bool)),X827),s('type.semanticPrimitives.result'(X822,X825),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X825),X828))),s('type.semanticPrimitives.result'(X823,X826),X829))) | s('type.semanticPrimitives.result'(X823,X826),X829) = s('type.semanticPrimitives.result'(X823,X826),'const.semanticPrimitives.Rval_1'(s(X823,sK10(X829,X826,X823))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f18315,f5315])).
fof(f24007,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23651,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23651,plain,(
  ( ! [X819,X817,X821,X814,X818,X816,X820,X815] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X817,fun(X818,bool)),X819),s('type.semanticPrimitives.error_result'(X817),X820),s('type.semanticPrimitives.error_result'(X818),sK11(X821,X818,X815)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X814,fun(X815,bool)),X816),s(fun(X817,fun(X818,bool)),X819),s('type.semanticPrimitives.result'(X814,X817),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X817),X820))),s('type.semanticPrimitives.result'(X815,X818),X821))) | s('type.semanticPrimitives.result'(X815,X818),X821) = s('type.semanticPrimitives.result'(X815,X818),'const.semanticPrimitives.Rval_1'(s(X815,sK10(X821,X818,X815))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f18312,f5315])).
fof(f18312,plain,(
  ( ! [X132] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X132))))) | s(bool,'T_0') = s(bool,X132)) ) | ($spl5 | $spl47 | $spl63)),
  inference(subsumption_resolution,[],[f18243,f149])).
fof(f18243,plain,(
  ( ! [X132] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X132))))) | s(bool,'T_0') = s(bool,X132)) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f17448,f17447])).
fof(f17448,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,g(s(bool,X1)))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17345,f152])).
fof(f17345,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f152,f17141])).
fof(f24006,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23650,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23650,plain,(
  ( ! [X810,X808,X812,X806,X811,X809,X813,X807] : (s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X809,fun(X810,bool)),X811),s('type.semanticPrimitives.error_result'(X809),X812),s('type.semanticPrimitives.error_result'(X810),sK11(X813,X810,X807)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X806,fun(X807,bool)),X808),s(fun(X809,fun(X810,bool)),X811),s('type.semanticPrimitives.result'(X806,X809),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X809),X812))),s('type.semanticPrimitives.result'(X807,X810),X813))) | s('type.semanticPrimitives.result'(X807,X810),X813) = s('type.semanticPrimitives.result'(X807,X810),'const.semanticPrimitives.Rval_1'(s(X807,sK10(X813,X810,X807))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f18303,f5315])).
fof(f24005,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23649,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23649,plain,(
  ( ! [X798,X802,X800,X804,X799,X803,X801,X805] : (s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X801,fun(X802,bool)),X803),s('type.semanticPrimitives.error_result'(X801),X804),s('type.semanticPrimitives.error_result'(X802),sK11(X805,X802,X799)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X798,fun(X799,bool)),X800),s(fun(X801,fun(X802,bool)),X803),s('type.semanticPrimitives.result'(X798,X801),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X801),X804))),s('type.semanticPrimitives.result'(X799,X802),X805))) | s('type.semanticPrimitives.result'(X799,X802),X805) = s('type.semanticPrimitives.result'(X799,X802),'const.semanticPrimitives.Rval_1'(s(X799,sK10(X805,X802,X799))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f18300,f5315])).
fof(f18300,plain,(
  ( ! [X113] : (s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,X113))))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f18227,f149])).
fof(f18227,plain,(
  ( ! [X113] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,X113))))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f11178,f17447])).
fof(f11178,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,f(s(bool,X1)))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11102,f152])).
fof(f11102,plain,(
  ( ! [X1] : (p(s(bool,X1)) | s(bool,'T_0') != s(bool,f(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f152,f10909])).
fof(f24004,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23648,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23648,plain,(
  ( ! [X796,X790,X795,X793,X797,X791,X794,X792] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.error_result'(X793),X796),s('type.semanticPrimitives.error_result'(X794),sK11(X797,X794,X791))))) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X790,fun(X791,bool)),X792),s(fun(X793,fun(X794,bool)),X795),s('type.semanticPrimitives.result'(X790,X793),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X793),X796))),s('type.semanticPrimitives.result'(X791,X794),X797))))))) | s('type.semanticPrimitives.result'(X791,X794),X797) = s('type.semanticPrimitives.result'(X791,X794),'const.semanticPrimitives.Rval_1'(s(X791,sK10(X797,X794,X791))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17928,f5315])).
fof(f17928,plain,(
  ( ! [X23] : (p(s(bool,X23)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X23)))))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17898,f152])).
fof(f17898,plain,(
  ( ! [X23] : (p(s(bool,X23)) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,X23))))) | s(bool,'T_0') = s(bool,X23)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17450,f17141])).
fof(f24003,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23647,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23647,plain,(
  ( ! [X786,X784,X788,X783,X787,X785,X789,X782] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X785,fun(X786,bool)),X787),s('type.semanticPrimitives.error_result'(X785),X788),s('type.semanticPrimitives.error_result'(X786),sK11(X789,X786,X783))))) | s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X782,fun(X783,bool)),X784),s(fun(X785,fun(X786,bool)),X787),s('type.semanticPrimitives.result'(X782,X785),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X785),X788))),s('type.semanticPrimitives.result'(X783,X786),X789))))))) | s('type.semanticPrimitives.result'(X783,X786),X789) = s('type.semanticPrimitives.result'(X783,X786),'const.semanticPrimitives.Rval_1'(s(X783,sK10(X789,X786,X783))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17925,f5315])).
fof(f17925,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,X21)))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17893,f152])).
fof(f17893,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,X21))))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17450,f10909])).
fof(f24002,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23646,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23646,plain,(
  ( ! [X779,X777,X781,X775,X778,X776,X780,X774] : (s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X777,fun(X778,bool)),X779),s('type.semanticPrimitives.error_result'(X777),X780),s('type.semanticPrimitives.error_result'(X778),sK11(X781,X778,X775)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X774,fun(X775,bool)),X776),s(fun(X777,fun(X778,bool)),X779),s('type.semanticPrimitives.result'(X774,X777),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X777),X780))),s('type.semanticPrimitives.result'(X775,X778),X781))) | s('type.semanticPrimitives.result'(X775,X778),X781) = s('type.semanticPrimitives.result'(X775,X778),'const.semanticPrimitives.Rval_1'(s(X775,sK10(X781,X778,X775))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17924,f5315])).
fof(f24001,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23645,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23645,plain,(
  ( ! [X767,X771,X769,X773,X766,X770,X768,X772] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X769,fun(X770,bool)),X771),s('type.semanticPrimitives.error_result'(X769),X772),s('type.semanticPrimitives.error_result'(X770),sK11(X773,X770,X767))))) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X766,fun(X767,bool)),X768),s(fun(X769,fun(X770,bool)),X771),s('type.semanticPrimitives.result'(X766,X769),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X769),X772))),s('type.semanticPrimitives.result'(X767,X770),X773))))))) | s('type.semanticPrimitives.result'(X767,X770),X773) = s('type.semanticPrimitives.result'(X767,X770),'const.semanticPrimitives.Rval_1'(s(X767,sK10(X773,X770,X767))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17711,f5315])).
fof(f17711,plain,(
  ( ! [X23] : (p(s(bool,X23)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X23)))))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17681,f152])).
fof(f17681,plain,(
  ( ! [X23] : (p(s(bool,X23)) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,X23))))) | s(bool,'T_0') = s(bool,X23)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17448,f17141])).
fof(f24000,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23644,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23644,plain,(
  ( ! [X765,X761,X763,X759,X764,X760,X762,X758] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.error_result'(X761),X764),s('type.semanticPrimitives.error_result'(X762),sK11(X765,X762,X759))))) | s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X758,fun(X759,bool)),X760),s(fun(X761,fun(X762,bool)),X763),s('type.semanticPrimitives.result'(X758,X761),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X761),X764))),s('type.semanticPrimitives.result'(X759,X762),X765))))))) | s('type.semanticPrimitives.result'(X759,X762),X765) = s('type.semanticPrimitives.result'(X759,X762),'const.semanticPrimitives.Rval_1'(s(X759,sK10(X765,X762,X759))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17708,f5315])).
fof(f17708,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,X21)))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17676,f152])).
fof(f17676,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,X21))))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17448,f10909])).
fof(f23999,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23643,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23643,plain,(
  ( ! [X757,X753,X755,X751,X756,X752,X754,X750] : (s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X753,fun(X754,bool)),X755),s('type.semanticPrimitives.error_result'(X753),X756),s('type.semanticPrimitives.error_result'(X754),sK11(X757,X754,X751)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X750,fun(X751,bool)),X752),s(fun(X753,fun(X754,bool)),X755),s('type.semanticPrimitives.result'(X750,X753),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X753),X756))),s('type.semanticPrimitives.result'(X751,X754),X757))) | s('type.semanticPrimitives.result'(X751,X754),X757) = s('type.semanticPrimitives.result'(X751,X754),'const.semanticPrimitives.Rval_1'(s(X751,sK10(X757,X754,X751))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17707,f5315])).
fof(f17707,plain,(
  ( ! [X20] : (s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(subsumption_resolution,[],[f17675,f149])).
fof(f17675,plain,(
  ( ! [X20] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17448,f16637])).
fof(f23998,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23642,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23642,plain,(
  ( ! [X749,X745,X747,X743,X748,X744,X746,X742] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X745,fun(X746,bool)),X747),s('type.semanticPrimitives.error_result'(X745),X748),s('type.semanticPrimitives.error_result'(X746),sK11(X749,X746,X743))))) | s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X742,fun(X743,bool)),X744),s(fun(X745,fun(X746,bool)),X747),s('type.semanticPrimitives.result'(X742,X745),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X745),X748))),s('type.semanticPrimitives.result'(X743,X746),X749))))) = s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X742,fun(X743,bool)),X744),s(fun(X745,fun(X746,bool)),X747),s('type.semanticPrimitives.result'(X742,X745),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X745),X748))),s('type.semanticPrimitives.result'(X743,X746),X749))))))) | s('type.semanticPrimitives.result'(X743,X746),X749) = s('type.semanticPrimitives.result'(X743,X746),'const.semanticPrimitives.Rval_1'(s(X743,sK10(X749,X746,X743))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17469,f5315])).
fof(f17469,plain,(
  ( ! [X113] : (p(s(bool,X113)) | s(bool,g(s(bool,X113))) = s(bool,f(s(bool,g(s(bool,X113)))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17398,f152])).
fof(f17398,plain,(
  ( ! [X113] : (p(s(bool,X113)) | s(bool,g(s(bool,X113))) = s(bool,f(s(bool,g(s(bool,X113))))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f12081,f17141])).
fof(f12081,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,f(s(bool,X0)))) ) | ($spl5 | $spl55)),
  inference(factoring,[],[f11181])).
fof(f11181,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,f(s(bool,X5)))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11106,f152])).
fof(f11106,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,f(s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f197,f10909])).
fof(f23997,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23641,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23641,plain,(
  ( ! [X736,X738,X734,X741,X737,X739,X735,X740] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X737,fun(X738,bool)),X739),s('type.semanticPrimitives.error_result'(X737),X740),s('type.semanticPrimitives.error_result'(X738),sK11(X741,X738,X735))))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X734,fun(X735,bool)),X736),s(fun(X737,fun(X738,bool)),X739),s('type.semanticPrimitives.result'(X734,X737),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X737),X740))),s('type.semanticPrimitives.result'(X735,X738),X741))))))))) | s('type.semanticPrimitives.result'(X735,X738),X741) = s('type.semanticPrimitives.result'(X735,X738),'const.semanticPrimitives.Rval_1'(s(X735,sK10(X741,X738,X735))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17465,f5315])).
fof(f17465,plain,(
  ( ! [X108] : (p(s(bool,X108)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,g(s(bool,X108)))))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17394,f152])).
fof(f17394,plain,(
  ( ! [X108] : (p(s(bool,X108)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,g(s(bool,X108))))))) | s(bool,'T_0') = s(bool,X108)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f11513,f17141])).
fof(f23996,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23640,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23640,plain,(
  ( ! [X732,X728,X730,X726,X733,X729,X731,X727] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X729,fun(X730,bool)),X731),s('type.semanticPrimitives.error_result'(X729),X732),s('type.semanticPrimitives.error_result'(X730),sK11(X733,X730,X727))))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X726,fun(X727,bool)),X728),s(fun(X729,fun(X730,bool)),X731),s('type.semanticPrimitives.result'(X726,X729),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X729),X732))),s('type.semanticPrimitives.result'(X727,X730),X733))))))))) | s('type.semanticPrimitives.result'(X727,X730),X733) = s('type.semanticPrimitives.result'(X727,X730),'const.semanticPrimitives.Rval_1'(s(X727,sK10(X733,X730,X727))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17464,f5315])).
fof(f17464,plain,(
  ( ! [X107] : (p(s(bool,X107)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,g(s(bool,X107)))))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17393,f152])).
fof(f17393,plain,(
  ( ! [X107] : (p(s(bool,X107)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,g(s(bool,X107))))))) | s(bool,'T_0') = s(bool,X107)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f11228,f17141])).
fof(f11228,plain,(
  ( ! [X20] : (p(s(bool,X20)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X20)))))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11204,f152])).
fof(f11204,plain,(
  ( ! [X20] : (p(s(bool,X20)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X20))))) | s(bool,'T_0') = s(bool,X20)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11178,f10909])).
fof(f23995,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23639,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23639,plain,(
  ( ! [X724,X720,X722,X718,X725,X721,X723,X719] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X721,fun(X722,bool)),X723),s('type.semanticPrimitives.error_result'(X721),X724),s('type.semanticPrimitives.error_result'(X722),sK11(X725,X722,X719))))) | s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X718,fun(X719,bool)),X720),s(fun(X721,fun(X722,bool)),X723),s('type.semanticPrimitives.result'(X718,X721),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X721),X724))),s('type.semanticPrimitives.result'(X719,X722),X725))))))) | s('type.semanticPrimitives.result'(X719,X722),X725) = s('type.semanticPrimitives.result'(X719,X722),'const.semanticPrimitives.Rval_1'(s(X719,sK10(X725,X722,X719))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17461,f5315])).
fof(f17461,plain,(
  ( ! [X102] : (p(s(bool,X102)) | s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,X102)))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17390,f152])).
fof(f17390,plain,(
  ( ! [X102] : (p(s(bool,X102)) | s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,X102))))) | s(bool,'T_0') = s(bool,X102)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f11180,f17141])).
fof(f23994,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23638,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23638,plain,(
  ( ! [X716,X712,X714,X710,X717,X713,X715,X711] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X713,fun(X714,bool)),X715),s('type.semanticPrimitives.error_result'(X713),X716),s('type.semanticPrimitives.error_result'(X714),sK11(X717,X714,X711))))) | s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X710,fun(X711,bool)),X712),s(fun(X713,fun(X714,bool)),X715),s('type.semanticPrimitives.result'(X710,X713),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X713),X716))),s('type.semanticPrimitives.result'(X711,X714),X717))))))) | s('type.semanticPrimitives.result'(X711,X714),X717) = s('type.semanticPrimitives.result'(X711,X714),'const.semanticPrimitives.Rval_1'(s(X711,sK10(X717,X714,X711))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17460,f5315])).
fof(f17460,plain,(
  ( ! [X100] : (p(s(bool,X100)) | s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,X100)))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(subsumption_resolution,[],[f17388,f152])).
fof(f17388,plain,(
  ( ! [X100] : (p(s(bool,X100)) | s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,X100))))) | s(bool,'T_0') = s(bool,X100)) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f11178,f17141])).
fof(f23993,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23637,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23637,plain,(
  ( ! [X707,X703,X708,X704,X706,X702,X709,X701,X705] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X704,fun(X705,bool)),X706),s('type.semanticPrimitives.error_result'(X704),X707),s('type.semanticPrimitives.error_result'(X705),sK11(X708,X705,X702))))) | p(s(bool,X709)) | s(bool,g(s(bool,X709))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X701,fun(X702,bool)),X703),s(fun(X704,fun(X705,bool)),X706),s('type.semanticPrimitives.result'(X701,X704),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X704),X707))),s('type.semanticPrimitives.result'(X702,X705),X708))) | s('type.semanticPrimitives.result'(X702,X705),X708) = s('type.semanticPrimitives.result'(X702,X705),'const.semanticPrimitives.Rval_1'(s(X702,sK10(X708,X705,X702))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17451,f5315])).
fof(f23992,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23636,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23636,plain,(
  ( ! [X697,X699,X693,X695,X700,X696,X698,X692,X694] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X695,fun(X696,bool)),X697),s('type.semanticPrimitives.error_result'(X695),X698),s('type.semanticPrimitives.error_result'(X696),sK11(X699,X696,X693))))) | p(s(bool,X700)) | s(bool,X700) = s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X692,fun(X693,bool)),X694),s(fun(X695,fun(X696,bool)),X697),s('type.semanticPrimitives.result'(X692,X695),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X695),X698))),s('type.semanticPrimitives.result'(X693,X696),X699))))) | s('type.semanticPrimitives.result'(X693,X696),X699) = s('type.semanticPrimitives.result'(X693,X696),'const.semanticPrimitives.Rval_1'(s(X693,sK10(X699,X696,X693))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17451,f5315])).
fof(f23991,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23635,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23635,plain,(
  ( ! [X689,X691,X685,X687,X688,X690,X684,X686] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X687,fun(X688,bool)),X689),s('type.semanticPrimitives.error_result'(X687),X690),s('type.semanticPrimitives.error_result'(X688),sK11(X691,X688,X685))))) | s(bool,'F_0') = s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X684,fun(X685,bool)),X686),s(fun(X687,fun(X688,bool)),X689),s('type.semanticPrimitives.result'(X684,X687),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X687),X690))),s('type.semanticPrimitives.result'(X685,X688),X691))))) | s('type.semanticPrimitives.result'(X685,X688),X691) = s('type.semanticPrimitives.result'(X685,X688),'const.semanticPrimitives.Rval_1'(s(X685,sK10(X691,X688,X685))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17450,f5315])).
fof(f23990,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23634,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23634,plain,(
  ( ! [X681,X683,X677,X679,X680,X682,X676,X678] : (~p(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X679,fun(X680,bool)),X681),s('type.semanticPrimitives.error_result'(X679),X682),s('type.semanticPrimitives.error_result'(X680),sK11(X683,X680,X677))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X676,fun(X677,bool)),X678),s(fun(X679,fun(X680,bool)),X681),s('type.semanticPrimitives.result'(X676,X679),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X679),X682))),s('type.semanticPrimitives.result'(X677,X680),X683))) | s('type.semanticPrimitives.result'(X677,X680),X683) = s('type.semanticPrimitives.result'(X677,X680),'const.semanticPrimitives.Rval_1'(s(X677,sK10(X683,X680,X677))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17449,f5315])).
fof(f17449,plain,(
  ( ! [X3] : (~p(s(bool,g(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17347,f150])).
fof(f17347,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,X3) | ~p(s(bool,g(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f156,f17141])).
fof(f23989,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23633,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23633,plain,(
  ( ! [X668,X670,X673,X675,X669,X671,X672,X674] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X671,fun(X672,bool)),X673),s('type.semanticPrimitives.error_result'(X671),X674),s('type.semanticPrimitives.error_result'(X672),sK11(X675,X672,X669))))) | s(bool,'T_0') != s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X668,fun(X669,bool)),X670),s(fun(X671,fun(X672,bool)),X673),s('type.semanticPrimitives.result'(X668,X671),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X671),X674))),s('type.semanticPrimitives.result'(X669,X672),X675))))) | s('type.semanticPrimitives.result'(X669,X672),X675) = s('type.semanticPrimitives.result'(X669,X672),'const.semanticPrimitives.Rval_1'(s(X669,sK10(X675,X672,X669))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17448,f5315])).
fof(f23988,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23632,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23632,plain,(
  ( ! [X666,X660,X662,X664,X667,X661,X663,X665] : (s(bool,'F_0') = s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X663,fun(X664,bool)),X665),s('type.semanticPrimitives.error_result'(X663),X666),s('type.semanticPrimitives.error_result'(X664),sK11(X667,X664,X661)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X660,fun(X661,bool)),X662),s(fun(X663,fun(X664,bool)),X665),s('type.semanticPrimitives.result'(X660,X663),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X663),X666))),s('type.semanticPrimitives.result'(X661,X664),X667))) | s('type.semanticPrimitives.result'(X661,X664),X667) = s('type.semanticPrimitives.result'(X661,X664),'const.semanticPrimitives.Rval_1'(s(X661,sK10(X667,X664,X661))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f17447,f5315])).
fof(f23987,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23986,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23986,plain,(
  ( ! [X656,X658,X652,X654,X657,X659,X653,X655] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.error_result'(X655),X658),s('type.semanticPrimitives.error_result'(X656),sK11(X659,X656,X653)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X652,fun(X653,bool)),X654),s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.result'(X652,X655),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X655),X658))),s('type.semanticPrimitives.result'(X653,X656),X659)))) ) | ($spl5 | $spl47)),
  inference(forward_demodulation,[],[f23985,f17048])).
fof(f23985,plain,(
  ( ! [X656,X658,X652,X654,X657,X659,X653,X655] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.error_result'(X655),X658),s('type.semanticPrimitives.error_result'(X656),sK11(X659,X656,X653)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X652,fun(X653,bool)),X654),s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.result'(X652,X655),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X655),X658))),s('type.semanticPrimitives.result'(X653,X656),X659)))) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f23631,f17586])).
fof(f23631,plain,(
  ( ! [X656,X658,X652,X654,X657,X659,X653,X655] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.error_result'(X655),X658),s('type.semanticPrimitives.error_result'(X656),sK11(X659,X656,X653)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X652,fun(X653,bool)),X654),s(fun(X655,fun(X656,bool)),X657),s('type.semanticPrimitives.result'(X652,X655),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X655),X658))),s('type.semanticPrimitives.result'(X653,X656),X659))) | s('type.semanticPrimitives.result'(X653,X656),X659) = s('type.semanticPrimitives.result'(X653,X656),'const.semanticPrimitives.Rval_1'(s(X653,sK10(X659,X656,X653))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17250,f5315])).
fof(f17250,plain,(
  ( ! [X45] : (s(bool,X45) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X45)) ) | ($spl5 | $spl47)),
  inference(subsumption_resolution,[],[f17183,f149])).
fof(f17183,plain,(
  ( ! [X45] : (p(s(bool,'F_0')) | s(bool,X45) != s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X45)) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f8327,f17048])).
fof(f8327,plain,(
  ( ! [X21,X19] : (p(s(bool,X21)) | s(bool,X19) != s(bool,X21) | s(bool,'F_0') = s(bool,X19)) ) | $spl5),
  inference(forward_demodulation,[],[f8326,f7269])).
fof(f8326,plain,(
  ( ! [X21,X19] : (s(bool,X19) != s(bool,X21) | p(s(bool,X21)) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(forward_demodulation,[],[f8325,f7120])).
fof(f8325,plain,(
  ( ! [X21,X19,X20] : (p(s(bool,X21)) | s(bool,X21) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X19)),X20,bool)) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(subsumption_resolution,[],[f8202,f147])).
fof(f8202,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | s(bool,X21) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X19)),X20,bool)) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(superposition,[],[f202,f7650])).
fof(f23984,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23630,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23630,plain,(
  ( ! [X648,X650,X644,X646,X649,X651,X645,X647] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X647,fun(X648,bool)),X649),s('type.semanticPrimitives.error_result'(X647),X650),s('type.semanticPrimitives.error_result'(X648),sK11(X651,X648,X645)))) = s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X647,fun(X648,bool)),X649),s('type.semanticPrimitives.error_result'(X647),X650),s('type.semanticPrimitives.error_result'(X648),sK11(X651,X648,X645)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X644,fun(X645,bool)),X646),s(fun(X647,fun(X648,bool)),X649),s('type.semanticPrimitives.result'(X644,X647),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X647),X650))),s('type.semanticPrimitives.result'(X645,X648),X651))) | s('type.semanticPrimitives.result'(X645,X648),X651) = s('type.semanticPrimitives.result'(X645,X648),'const.semanticPrimitives.Rval_1'(s(X645,sK10(X651,X648,X645))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17141,f5315])).
fof(f23983,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23629,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23629,plain,(
  ( ! [X639,X640,X642,X636,X638,X641,X643,X637] : (s(bool,'F_0') = s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X639,fun(X640,bool)),X641),s('type.semanticPrimitives.error_result'(X639),X642),s('type.semanticPrimitives.error_result'(X640),sK11(X643,X640,X637)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X636,fun(X637,bool)),X638),s(fun(X639,fun(X640,bool)),X641),s('type.semanticPrimitives.result'(X636,X639),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X639),X642))),s('type.semanticPrimitives.result'(X637,X640),X643))) | s('type.semanticPrimitives.result'(X637,X640),X643) = s('type.semanticPrimitives.result'(X637,X640),'const.semanticPrimitives.Rval_1'(s(X637,sK10(X643,X640,X637))))) ) | ($spl5 | $spl55 | $spl63)),
  inference(superposition,[],[f16637,f5315])).
fof(f23980,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23627,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23627,plain,(
  ( ! [X625,X627,X621,X623,X624,X626,X620,X622] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X623,fun(X624,bool)),X625),s('type.semanticPrimitives.error_result'(X623),X626),s('type.semanticPrimitives.error_result'(X624),sK11(X627,X624,X621))))) | s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X620,fun(X621,bool)),X622),s(fun(X623,fun(X624,bool)),X625),s('type.semanticPrimitives.result'(X620,X623),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X623),X626))),s('type.semanticPrimitives.result'(X621,X624),X627))))) = s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X620,fun(X621,bool)),X622),s(fun(X623,fun(X624,bool)),X625),s('type.semanticPrimitives.result'(X620,X623),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X623),X626))),s('type.semanticPrimitives.result'(X621,X624),X627))))))) | s('type.semanticPrimitives.result'(X621,X624),X627) = s('type.semanticPrimitives.result'(X621,X624),'const.semanticPrimitives.Rval_1'(s(X621,sK10(X627,X624,X621))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12264,f5315])).
fof(f12264,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,f(s(bool,X21))) = s(bool,f(s(bool,f(s(bool,X21)))))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f12241,f152])).
fof(f12241,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,f(s(bool,X21))) = s(bool,f(s(bool,f(s(bool,X21))))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12081,f10909])).
fof(f23979,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23626,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23626,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X612,X614] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X615,fun(X616,bool)),X617),s('type.semanticPrimitives.error_result'(X615),X618),s('type.semanticPrimitives.error_result'(X616),sK11(X619,X616,X613))))) | s(bool,'const.evalProps.result_rel_4'(s(fun(X612,fun(X613,bool)),X614),s(fun(X615,fun(X616,bool)),X617),s('type.semanticPrimitives.result'(X612,X615),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X615),X618))),s('type.semanticPrimitives.result'(X613,X616),X619))) = s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X612,fun(X613,bool)),X614),s(fun(X615,fun(X616,bool)),X617),s('type.semanticPrimitives.result'(X612,X615),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X615),X618))),s('type.semanticPrimitives.result'(X613,X616),X619))))) | s('type.semanticPrimitives.result'(X613,X616),X619) = s('type.semanticPrimitives.result'(X613,X616),'const.semanticPrimitives.Rval_1'(s(X613,sK10(X619,X616,X613))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12081,f5315])).
fof(f23978,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23625,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23625,plain,(
  ( ! [X604,X606,X609,X611,X607,X605,X608,X610] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X607,fun(X608,bool)),X609),s('type.semanticPrimitives.error_result'(X607),X610),s('type.semanticPrimitives.error_result'(X608),sK11(X611,X608,X605)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X604,fun(X605,bool)),X606),s(fun(X607,fun(X608,bool)),X609),s('type.semanticPrimitives.result'(X604,X607),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X607),X610))),s('type.semanticPrimitives.result'(X605,X608),X611))) | s('type.semanticPrimitives.result'(X605,X608),X611) = s('type.semanticPrimitives.result'(X605,X608),'const.semanticPrimitives.Rval_1'(s(X605,sK10(X611,X608,X605))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12040,f5315])).
fof(f23977,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23624,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23624,plain,(
  ( ! [X600,X602,X596,X598,X601,X603,X597,X599] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X599,fun(X600,bool)),X601),s('type.semanticPrimitives.error_result'(X599),X602),s('type.semanticPrimitives.error_result'(X600),sK11(X603,X600,X597))))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X596,fun(X597,bool)),X598),s(fun(X599,fun(X600,bool)),X601),s('type.semanticPrimitives.result'(X596,X599),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X599),X602))),s('type.semanticPrimitives.result'(X597,X600),X603))))))))) | s('type.semanticPrimitives.result'(X597,X600),X603) = s('type.semanticPrimitives.result'(X597,X600),'const.semanticPrimitives.Rval_1'(s(X597,sK10(X603,X600,X597))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12022,f5315])).
fof(f12022,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,X21)))))))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11993,f152])).
fof(f11993,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,X21))))))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11513,f10909])).
fof(f23976,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23623,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23623,plain,(
  ( ! [X592,X594,X588,X590,X593,X595,X589,X591] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X591,fun(X592,bool)),X593),s('type.semanticPrimitives.error_result'(X591),X594),s('type.semanticPrimitives.error_result'(X592),sK11(X595,X592,X589)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X588,fun(X589,bool)),X590),s(fun(X591,fun(X592,bool)),X593),s('type.semanticPrimitives.result'(X588,X591),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X591),X594))),s('type.semanticPrimitives.result'(X589,X592),X595))) | s('type.semanticPrimitives.result'(X589,X592),X595) = s('type.semanticPrimitives.result'(X589,X592),'const.semanticPrimitives.Rval_1'(s(X589,sK10(X595,X592,X589))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11971,f5315])).
fof(f11971,plain,(
  ( ! [X58] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,X58))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(forward_demodulation,[],[f11970,f7120])).
fof(f11970,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X58)),X59,bool)))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11935,f149])).
fof(f11935,plain,(
  ( ! [X59,X58] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X58)),X59,bool)))))) | s(bool,'T_0') = s(bool,X58)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11228,f8791])).
fof(f23975,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23622,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23622,plain,(
  ( ! [X584,X586,X580,X582,X585,X587,X581,X583] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X583,fun(X584,bool)),X585),s('type.semanticPrimitives.error_result'(X583),X586),s('type.semanticPrimitives.error_result'(X584),sK11(X587,X584,X581))))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X580,fun(X581,bool)),X582),s(fun(X583,fun(X584,bool)),X585),s('type.semanticPrimitives.result'(X580,X583),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X583),X586))),s('type.semanticPrimitives.result'(X581,X584),X587))))))))) | s('type.semanticPrimitives.result'(X581,X584),X587) = s('type.semanticPrimitives.result'(X581,X584),'const.semanticPrimitives.Rval_1'(s(X581,sK10(X587,X584,X581))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11953,f5315])).
fof(f11953,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X21)))))))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11924,f152])).
fof(f11924,plain,(
  ( ! [X21] : (p(s(bool,X21)) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,X21))))))) | s(bool,'T_0') = s(bool,X21)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11228,f10909])).
fof(f23974,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23621,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23621,plain,(
  ( ! [X573,X575,X571,X576,X578,X572,X574,X577,X579] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X574,fun(X575,bool)),X576),s('type.semanticPrimitives.error_result'(X574),X577),s('type.semanticPrimitives.error_result'(X575),sK11(X578,X575,X572)))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X571,fun(X572,bool)),X573),s(fun(X574,fun(X575,bool)),X576),s('type.semanticPrimitives.result'(X571,X574),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X574),X577))),s('type.semanticPrimitives.result'(X572,X575),X578)))),X579,bool)) | s('type.semanticPrimitives.result'(X572,X575),X578) = s('type.semanticPrimitives.result'(X572,X575),'const.semanticPrimitives.Rval_1'(s(X572,sK10(X578,X575,X572))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11727,f5315])).
fof(f11727,plain,(
  ( ! [X68,X67] : (s(bool,'F_0') != s(bool,X67) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X67)),X68,bool))) ) | ($spl5 | $spl55)),
  inference(forward_demodulation,[],[f11705,f10856])).
fof(f11705,plain,(
  ( ! [X68,X67] : (s(bool,X67) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X67)),X68,bool))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10987,f7120])).
fof(f10987,plain,(
  ( ! [X31] : (s(bool,X31) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X31)) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f10947,f149])).
fof(f10947,plain,(
  ( ! [X31] : (p(s(bool,'F_0')) | s(bool,X31) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X31)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f8327,f10856])).
fof(f23973,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23620,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23620,plain,(
  ( ! [X569,X565,X567,X563,X568,X570,X564,X566] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X566,fun(X567,bool)),X568),s('type.semanticPrimitives.error_result'(X566),X569),s('type.semanticPrimitives.error_result'(X567),sK11(X570,X567,X564))))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X563,fun(X564,bool)),X565),s(fun(X566,fun(X567,bool)),X568),s('type.semanticPrimitives.result'(X563,X566),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X566),X569))),s('type.semanticPrimitives.result'(X564,X567),X570))))))) | s('type.semanticPrimitives.result'(X564,X567),X570) = s('type.semanticPrimitives.result'(X564,X567),'const.semanticPrimitives.Rval_1'(s(X564,sK10(X570,X567,X564))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11513,f5315])).
fof(f23972,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23619,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23619,plain,(
  ( ! [X561,X557,X559,X555,X560,X562,X556,X558] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X558,fun(X559,bool)),X560),s('type.semanticPrimitives.error_result'(X558),X561),s('type.semanticPrimitives.error_result'(X559),sK11(X562,X559,X556))))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X555,fun(X556,bool)),X557),s(fun(X558,fun(X559,bool)),X560),s('type.semanticPrimitives.result'(X555,X558),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X558),X561))),s('type.semanticPrimitives.result'(X556,X559),X562))))))) | s('type.semanticPrimitives.result'(X556,X559),X562) = s('type.semanticPrimitives.result'(X556,X559),'const.semanticPrimitives.Rval_1'(s(X556,sK10(X562,X559,X556))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11228,f5315])).
fof(f23971,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23618,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23618,plain,(
  ( ! [X546,X553,X549,X551,X547,X552,X554,X548,X550] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X549,fun(X550,bool)),X551),s('type.semanticPrimitives.error_result'(X549),X552),s('type.semanticPrimitives.error_result'(X550),sK11(X553,X550,X547))))) | p(s(bool,X554)) | s(bool,f(s(bool,X554))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X546,fun(X547,bool)),X548),s(fun(X549,fun(X550,bool)),X551),s('type.semanticPrimitives.result'(X546,X549),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X549),X552))),s('type.semanticPrimitives.result'(X547,X550),X553))) | s('type.semanticPrimitives.result'(X547,X550),X553) = s('type.semanticPrimitives.result'(X547,X550),'const.semanticPrimitives.Rval_1'(s(X547,sK10(X553,X550,X547))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11181,f5315])).
fof(f23970,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23617,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23617,plain,(
  ( ! [X540,X542,X538,X545,X541,X543,X537,X539,X544] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X540,fun(X541,bool)),X542),s('type.semanticPrimitives.error_result'(X540),X543),s('type.semanticPrimitives.error_result'(X541),sK11(X544,X541,X538))))) | p(s(bool,X545)) | s(bool,X545) = s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X537,fun(X538,bool)),X539),s(fun(X540,fun(X541,bool)),X542),s('type.semanticPrimitives.result'(X537,X540),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X540),X543))),s('type.semanticPrimitives.result'(X538,X541),X544))))) | s('type.semanticPrimitives.result'(X538,X541),X544) = s('type.semanticPrimitives.result'(X538,X541),'const.semanticPrimitives.Rval_1'(s(X538,sK10(X544,X541,X538))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11181,f5315])).
fof(f23969,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23616,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23616,plain,(
  ( ! [X536,X532,X534,X530,X533,X535,X529,X531] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X532,fun(X533,bool)),X534),s('type.semanticPrimitives.error_result'(X532),X535),s('type.semanticPrimitives.error_result'(X533),sK11(X536,X533,X530))))) | s(bool,'F_0') = s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X529,fun(X530,bool)),X531),s(fun(X532,fun(X533,bool)),X534),s('type.semanticPrimitives.result'(X529,X532),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X532),X535))),s('type.semanticPrimitives.result'(X530,X533),X536))))) | s('type.semanticPrimitives.result'(X530,X533),X536) = s('type.semanticPrimitives.result'(X530,X533),'const.semanticPrimitives.Rval_1'(s(X530,sK10(X536,X533,X530))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11180,f5315])).
fof(f23968,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23615,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23615,plain,(
  ( ! [X528,X524,X526,X522,X525,X527,X521,X523] : (~p(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X524,fun(X525,bool)),X526),s('type.semanticPrimitives.error_result'(X524),X527),s('type.semanticPrimitives.error_result'(X525),sK11(X528,X525,X522))))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X521,fun(X522,bool)),X523),s(fun(X524,fun(X525,bool)),X526),s('type.semanticPrimitives.result'(X521,X524),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X524),X527))),s('type.semanticPrimitives.result'(X522,X525),X528))) | s('type.semanticPrimitives.result'(X522,X525),X528) = s('type.semanticPrimitives.result'(X522,X525),'const.semanticPrimitives.Rval_1'(s(X522,sK10(X528,X525,X522))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11179,f5315])).
fof(f11179,plain,(
  ( ! [X3] : (~p(s(bool,f(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f11104,f150])).
fof(f11104,plain,(
  ( ! [X3] : (s(bool,'F_0') != s(bool,X3) | ~p(s(bool,f(s(bool,X3)))) | s(bool,'T_0') = s(bool,X3)) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f156,f10909])).
fof(f23967,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23614,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23614,plain,(
  ( ! [X520,X516,X518,X514,X517,X519,X513,X515] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X516,fun(X517,bool)),X518),s('type.semanticPrimitives.error_result'(X516),X519),s('type.semanticPrimitives.error_result'(X517),sK11(X520,X517,X514))))) | s(bool,'T_0') != s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X513,fun(X514,bool)),X515),s(fun(X516,fun(X517,bool)),X518),s('type.semanticPrimitives.result'(X513,X516),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X516),X519))),s('type.semanticPrimitives.result'(X514,X517),X520))))) | s('type.semanticPrimitives.result'(X514,X517),X520) = s('type.semanticPrimitives.result'(X514,X517),'const.semanticPrimitives.Rval_1'(s(X514,sK10(X520,X517,X514))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11178,f5315])).
fof(f23966,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23965,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23965,plain,(
  ( ! [X509,X511,X505,X507,X512,X508,X510,X506] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.error_result'(X508),X511),s('type.semanticPrimitives.error_result'(X509),sK11(X512,X509,X506)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X505,fun(X506,bool)),X507),s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.result'(X505,X508),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X508),X511))),s('type.semanticPrimitives.result'(X506,X509),X512)))) ) | ($spl5 | $spl55)),
  inference(forward_demodulation,[],[f23964,f10856])).
fof(f23964,plain,(
  ( ! [X509,X511,X505,X507,X512,X508,X510,X506] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.error_result'(X508),X511),s('type.semanticPrimitives.error_result'(X509),sK11(X512,X509,X506)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X505,fun(X506,bool)),X507),s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.result'(X505,X508),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X508),X511))),s('type.semanticPrimitives.result'(X506,X509),X512)))) ) | ($spl5 | $spl55)),
  inference(subsumption_resolution,[],[f23613,f17586])).
fof(f23613,plain,(
  ( ! [X509,X511,X505,X507,X512,X508,X510,X506] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.error_result'(X508),X511),s('type.semanticPrimitives.error_result'(X509),sK11(X512,X509,X506)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X505,fun(X506,bool)),X507),s(fun(X508,fun(X509,bool)),X510),s('type.semanticPrimitives.result'(X505,X508),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X508),X511))),s('type.semanticPrimitives.result'(X506,X509),X512))) | s('type.semanticPrimitives.result'(X506,X509),X512) = s('type.semanticPrimitives.result'(X506,X509),'const.semanticPrimitives.Rval_1'(s(X506,sK10(X512,X509,X506))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10987,f5315])).
fof(f23963,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23612,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23612,plain,(
  ( ! [X499,X500,X502,X498,X504,X501,X503,X497] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X500,fun(X501,bool)),X502),s('type.semanticPrimitives.error_result'(X500),X503),s('type.semanticPrimitives.error_result'(X501),sK11(X504,X501,X498)))) = s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X500,fun(X501,bool)),X502),s('type.semanticPrimitives.error_result'(X500),X503),s('type.semanticPrimitives.error_result'(X501),sK11(X504,X501,X498)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X497,fun(X498,bool)),X499),s(fun(X500,fun(X501,bool)),X502),s('type.semanticPrimitives.result'(X497,X500),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X500),X503))),s('type.semanticPrimitives.result'(X498,X501),X504))) | s('type.semanticPrimitives.result'(X498,X501),X504) = s('type.semanticPrimitives.result'(X498,X501),'const.semanticPrimitives.Rval_1'(s(X498,sK10(X504,X501,X498))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10909,f5315])).
fof(f23962,plain,(
  $false | ($spl0 | $spl29 | $spl44)),
  inference(global_subsumption,[],[f23961,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23961,plain,(
  ( ! [X492,X494,X488,X490,X493,X495,X489,X491] : (s(bool,'F_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.error_result'(X491),X494),s('type.semanticPrimitives.error_result'(X492),sK11(X495,X492,X489)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X488,fun(X489,bool)),X490),s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.result'(X488,X491),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X491),X494))),s('type.semanticPrimitives.result'(X489,X492),X495)))) ) | $spl44),
  inference(forward_demodulation,[],[f23960,f7120])).
fof(f23960,plain,(
  ( ! [X492,X494,X488,X490,X496,X493,X495,X489,X491] : (s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X496,bool)) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.error_result'(X491),X494),s('type.semanticPrimitives.error_result'(X492),sK11(X495,X492,X489)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X488,fun(X489,bool)),X490),s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.result'(X488,X491),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X491),X494))),s('type.semanticPrimitives.result'(X489,X492),X495)))) ) | $spl44),
  inference(subsumption_resolution,[],[f23611,f17586])).
fof(f23611,plain,(
  ( ! [X492,X494,X488,X490,X496,X493,X495,X489,X491] : (s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X496,bool)) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.error_result'(X491),X494),s('type.semanticPrimitives.error_result'(X492),sK11(X495,X492,X489)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X488,fun(X489,bool)),X490),s(fun(X491,fun(X492,bool)),X493),s('type.semanticPrimitives.result'(X488,X491),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X491),X494))),s('type.semanticPrimitives.result'(X489,X492),X495))) | s('type.semanticPrimitives.result'(X489,X492),X495) = s('type.semanticPrimitives.result'(X489,X492),'const.semanticPrimitives.Rval_1'(s(X489,sK10(X495,X492,X489))))) ) | $spl44),
  inference(superposition,[],[f9873,f5315])).
fof(f23958,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23609,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23609,plain,(
  ( ! [X476,X478,X472,X474,X471,X475,X477,X473,X470] : (s('type.semanticPrimitives.result'(bool,X478),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X478),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X473,fun(X474,bool)),X475),s('type.semanticPrimitives.error_result'(X473),X476),s('type.semanticPrimitives.error_result'(X474),sK11(X477,X474,X471)))))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X470,fun(X471,bool)),X472),s(fun(X473,fun(X474,bool)),X475),s('type.semanticPrimitives.result'(X470,X473),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X473),X476))),s('type.semanticPrimitives.result'(X471,X474),X477))) | s('type.semanticPrimitives.result'(X471,X474),X477) = s('type.semanticPrimitives.result'(X471,X474),'const.semanticPrimitives.Rval_1'(s(X471,sK10(X477,X474,X471))))) ) | $spl5),
  inference(superposition,[],[f9110,f5315])).
fof(f9110,plain,(
  ( ! [X97,X98] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) | s(bool,'T_0') = s(bool,X97)) ) | $spl5),
  inference(subsumption_resolution,[],[f9069,f213])).
fof(f9069,plain,(
  ( ! [X97,X98] : (s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) | s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rval_1'(s(bool,X97))) = s('type.semanticPrimitives.result'(bool,X98),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X98),sK11('const.semanticPrimitives.Rval_1'(s(bool,X97)),X98,bool)))) | s(bool,'T_0') = s(bool,X97)) ) | $spl5),
  inference(superposition,[],[f207,f8791])).
fof(f23957,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23608,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23608,plain,(
  ( ! [X466,X461,X463,X469,X465,X467,X462,X468,X464] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X464,fun(X465,bool)),X466),s('type.semanticPrimitives.error_result'(X464),X467),s('type.semanticPrimitives.error_result'(X465),sK11(X468,X465,X462))))),X469,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X461,fun(X462,bool)),X463),s(fun(X464,fun(X465,bool)),X466),s('type.semanticPrimitives.result'(X461,X464),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X464),X467))),s('type.semanticPrimitives.result'(X462,X465),X468))) | s('type.semanticPrimitives.result'(X462,X465),X468) = s('type.semanticPrimitives.result'(X462,X465),'const.semanticPrimitives.Rval_1'(s(X462,sK10(X468,X465,X462))))) ) | $spl5),
  inference(superposition,[],[f9099,f5315])).
fof(f9099,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(subsumption_resolution,[],[f9039,f149])).
fof(f9039,plain,(
  ( ! [X10,X9] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X9)),X10,bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl5),
  inference(superposition,[],[f152,f8791])).
fof(f23956,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23607,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23607,plain,(
  ( ! [X453,X455,X451,X457,X459,X452,X454,X460,X456,X458] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X454,fun(X455,bool)),X456),s('type.semanticPrimitives.error_result'(X454),X457),s('type.semanticPrimitives.error_result'(X455),sK11(X458,X455,X452))))),X459,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X451,fun(X452,bool)),X453),s(fun(X454,fun(X455,bool)),X456),s('type.semanticPrimitives.result'(X451,X454),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X454),X457))),s('type.semanticPrimitives.result'(X452,X455),X458)))),X460,bool)) | s('type.semanticPrimitives.result'(X452,X455),X458) = s('type.semanticPrimitives.result'(X452,X455),'const.semanticPrimitives.Rval_1'(s(X452,sK10(X458,X455,X452))))) ) | $spl5),
  inference(superposition,[],[f8956,f5315])).
fof(f8956,plain,(
  ( ! [X6,X7,X5] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X6,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X7,bool))) ) | $spl5),
  inference(subsumption_resolution,[],[f8793,f149])).
fof(f8793,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X6,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X5)),X7,bool))) ) | $spl5),
  inference(superposition,[],[f152,f8248])).
fof(f23955,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23606,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23606,plain,(
  ( ! [X445,X447,X443,X449,X444,X446,X442,X448,X450] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.error_result'(X445),X448),s('type.semanticPrimitives.error_result'(X446),sK11(X449,X446,X443))))),X450,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X442,fun(X443,bool)),X444),s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.result'(X442,X445),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X445),X448))),s('type.semanticPrimitives.result'(X443,X446),X449))) | s('type.semanticPrimitives.result'(X443,X446),X449) = s('type.semanticPrimitives.result'(X443,X446),'const.semanticPrimitives.Rval_1'(s(X443,sK10(X449,X446,X443))))) ) | $spl5),
  inference(superposition,[],[f8791,f5315])).
fof(f23954,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23953,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23953,plain,(
  ( ! [X441,X436,X438,X434,X440,X437,X439,X433,X435] : (s(bool,X441) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.error_result'(X436),X439),s('type.semanticPrimitives.error_result'(X437),sK11(X440,X437,X434)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X433,fun(X434,bool)),X435),s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.result'(X433,X436),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X436),X439))),s('type.semanticPrimitives.result'(X434,X437),X440))) | s(bool,'T_0') = s(bool,X441)) ) | $spl5),
  inference(subsumption_resolution,[],[f23605,f17586])).
fof(f23605,plain,(
  ( ! [X441,X436,X438,X434,X440,X437,X439,X433,X435] : (s(bool,X441) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.error_result'(X436),X439),s('type.semanticPrimitives.error_result'(X437),sK11(X440,X437,X434)))) | s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X433,fun(X434,bool)),X435),s(fun(X436,fun(X437,bool)),X438),s('type.semanticPrimitives.result'(X433,X436),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X436),X439))),s('type.semanticPrimitives.result'(X434,X437),X440))) | s(bool,'T_0') = s(bool,X441) | s('type.semanticPrimitives.result'(X434,X437),X440) = s('type.semanticPrimitives.result'(X434,X437),'const.semanticPrimitives.Rval_1'(s(X434,sK10(X440,X437,X434))))) ) | $spl5),
  inference(superposition,[],[f8464,f5315])).
fof(f8464,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(subsumption_resolution,[],[f8439,f149])).
fof(f8439,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f8327,f150])).
fof(f23952,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23604,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23604,plain,(
  ( ! [X428,X430,X424,X426,X432,X429,X431,X425,X427] : (s(bool,X432) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X427,fun(X428,bool)),X429),s('type.semanticPrimitives.error_result'(X427),X430),s('type.semanticPrimitives.error_result'(X428),sK11(X431,X428,X425)))) | s(bool,'F_0') = s(bool,X432) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X424,fun(X425,bool)),X426),s(fun(X427,fun(X428,bool)),X429),s('type.semanticPrimitives.result'(X424,X427),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X427),X430))),s('type.semanticPrimitives.result'(X425,X428),X431))) | s('type.semanticPrimitives.result'(X425,X428),X431) = s('type.semanticPrimitives.result'(X425,X428),'const.semanticPrimitives.Rval_1'(s(X425,sK10(X431,X428,X425))))) ) | $spl5),
  inference(superposition,[],[f8464,f5315])).
fof(f23951,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23603,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23603,plain,(
  ( ! [X420,X422,X416,X418,X415,X421,X423,X417,X419] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X418,fun(X419,bool)),X420),s('type.semanticPrimitives.error_result'(X418),X421),s('type.semanticPrimitives.error_result'(X419),sK11(X422,X419,X416))))) | s(bool,X423) != s(bool,'const.evalProps.result_rel_4'(s(fun(X415,fun(X416,bool)),X417),s(fun(X418,fun(X419,bool)),X420),s('type.semanticPrimitives.result'(X415,X418),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X418),X421))),s('type.semanticPrimitives.result'(X416,X419),X422))) | s(bool,'F_0') = s(bool,X423) | s('type.semanticPrimitives.result'(X416,X419),X422) = s('type.semanticPrimitives.result'(X416,X419),'const.semanticPrimitives.Rval_1'(s(X416,sK10(X422,X419,X416))))) ) | $spl5),
  inference(superposition,[],[f8327,f5315])).
fof(f23950,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23602,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23602,plain,(
  ( ! [X412,X414,X408,X410,X407,X413,X409,X411,X406] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X409,fun(X410,bool)),X411),s('type.semanticPrimitives.error_result'(X409),X412),s('type.semanticPrimitives.error_result'(X410),sK11(X413,X410,X407))))) | s(bool,X414) = s(bool,'const.evalProps.result_rel_4'(s(fun(X406,fun(X407,bool)),X408),s(fun(X409,fun(X410,bool)),X411),s('type.semanticPrimitives.result'(X406,X409),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X409),X412))),s('type.semanticPrimitives.result'(X407,X410),X413))) | s(bool,'F_0') = s(bool,X414) | s('type.semanticPrimitives.result'(X407,X410),X413) = s('type.semanticPrimitives.result'(X407,X410),'const.semanticPrimitives.Rval_1'(s(X407,sK10(X413,X410,X407))))) ) | $spl5),
  inference(superposition,[],[f8324,f5315])).
fof(f23949,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23601,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23601,plain,(
  ( ! [X397,X399,X405,X401,X403,X398,X404,X400,X402] : (s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(X400,fun(X401,bool)),X402),s('type.semanticPrimitives.error_result'(X400),X403),s('type.semanticPrimitives.error_result'(X401),sK11(X404,X401,X398)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X397,fun(X398,bool)),X399),s(fun(X400,fun(X401,bool)),X402),s('type.semanticPrimitives.result'(X397,X400),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X400),X403))),s('type.semanticPrimitives.result'(X398,X401),X404)))),X405,bool)) | s('type.semanticPrimitives.result'(X398,X401),X404) = s('type.semanticPrimitives.result'(X398,X401),'const.semanticPrimitives.Rval_1'(s(X398,sK10(X404,X401,X398))))) ) | $spl5),
  inference(superposition,[],[f8252,f5315])).
fof(f8252,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool))) ) | $spl5),
  inference(subsumption_resolution,[],[f8251,f149])).
fof(f8251,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool))) ) | $spl5),
  inference(forward_demodulation,[],[f8114,f7269])).
fof(f8114,plain,(
  ( ! [X2,X3] : (p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | s(bool,'T_0') != s(bool,X2) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X2)),X3,bool))) ) | $spl5),
  inference(superposition,[],[f152,f7650])).
fof(f23948,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23600,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23600,plain,(
  ( ! [X389,X391,X387,X393,X395,X388,X390,X396,X392,X394] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X390,fun(X391,bool)),X392),s('type.semanticPrimitives.error_result'(X390),X393),s('type.semanticPrimitives.error_result'(X391),sK11(X394,X391,X388))))),X395,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X387,fun(X388,bool)),X389),s(fun(X390,fun(X391,bool)),X392),s('type.semanticPrimitives.result'(X387,X390),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X390),X393))),s('type.semanticPrimitives.result'(X388,X391),X394)))),X396,bool)) | s('type.semanticPrimitives.result'(X388,X391),X394) = s('type.semanticPrimitives.result'(X388,X391),'const.semanticPrimitives.Rval_1'(s(X388,sK10(X394,X391,X388))))) ) | $spl5),
  inference(superposition,[],[f8248,f5315])).
fof(f23947,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23599,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23599,plain,(
  ( ! [X383,X377,X379,X385,X380,X382,X378,X384,X386,X381] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X380,fun(X381,bool)),X382),s('type.semanticPrimitives.error_result'(X380),X383),s('type.semanticPrimitives.error_result'(X381),sK11(X384,X381,X378))))),X385,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X377,fun(X378,bool)),X379),s(fun(X380,fun(X381,bool)),X382),s('type.semanticPrimitives.result'(X377,X380),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X380),X383))),s('type.semanticPrimitives.result'(X378,X381),X384)))),X386,bool)) | s('type.semanticPrimitives.result'(X378,X381),X384) = s('type.semanticPrimitives.result'(X378,X381),'const.semanticPrimitives.Rval_1'(s(X378,sK10(X384,X381,X378))))) ) | $spl5),
  inference(superposition,[],[f8248,f5315])).
fof(f23945,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23944,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23944,plain,(
  ( ! [X364,X366,X360,X362,X359,X365,X367,X361,X363] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X362,fun(X363,bool)),X364),s('type.semanticPrimitives.error_result'(X362),X365),s('type.semanticPrimitives.error_result'(X363),sK11(X366,X363,X360)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X359,fun(X360,bool)),X361),s(fun(X362,fun(X363,bool)),X364),s('type.semanticPrimitives.result'(X359,X362),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X362),X365))),s('type.semanticPrimitives.result'(X360,X363),X366)))),X367,bool)) | s('type.semanticPrimitives.result'(X360,X363),X366) = s('type.semanticPrimitives.result'(X360,X363),'const.semanticPrimitives.Rval_1'(s(X360,sK10(X366,X363,X360))))) ) | $spl5),
  inference(forward_demodulation,[],[f23597,f7269])).
fof(f23597,plain,(
  ( ! [X364,X366,X360,X362,X359,X365,X367,X361,X363] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X362,fun(X363,bool)),X364),s('type.semanticPrimitives.error_result'(X362),X365),s('type.semanticPrimitives.error_result'(X363),sK11(X366,X363,X360)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X359,fun(X360,bool)),X361),s(fun(X362,fun(X363,bool)),X364),s('type.semanticPrimitives.result'(X359,X362),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X362),X365))),s('type.semanticPrimitives.result'(X360,X363),X366)))),X367,bool)) | s('type.semanticPrimitives.result'(X360,X363),X366) = s('type.semanticPrimitives.result'(X360,X363),'const.semanticPrimitives.Rval_1'(s(X360,sK10(X366,X363,X360))))) ) | $spl5),
  inference(superposition,[],[f7650,f5315])).
fof(f23942,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937,f23941])).
fof(f23938,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591,f23937])).
fof(f23934,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590,f23591])).
fof(f23933,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589,f23590])).
fof(f23932,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588,f23589])).
fof(f23931,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587,f23588])).
fof(f23930,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928,f23587])).
fof(f23929,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585,f23928])).
fof(f23927,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584,f23585])).
fof(f23926,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583,f23584])).
fof(f23925,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582,f23583])).
fof(f23924,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581,f23582])).
fof(f23923,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576,f23581])).
fof(f23922,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575,f23576])).
fof(f23921,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574,f23575])).
fof(f23920,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573,f23574])).
fof(f23919,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917,f23573])).
fof(f23918,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571,f23917])).
fof(f23916,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570,f23571])).
fof(f23915,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569,f23570])).
fof(f23914,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912,f23569])).
fof(f23913,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556,f23912])).
fof(f23902,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555,f23556])).
fof(f23901,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550,f23555])).
fof(f23900,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548,f23550])).
fof(f23899,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541,f23548])).
fof(f23898,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540,f23541])).
fof(f23897,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539,f23540])).
fof(f23896,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538,f23539])).
fof(f23895,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537,f23538])).
fof(f23894,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536,f23537])).
fof(f23893,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825,f23536])).
fof(f23892,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23535,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23535,plain,(
  ( ! [X808,X802,X806,X804,X809,X803,X807,X805] : (~p(s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X808,fun(X807,bool)),X809),s(fun(X802,fun(X803,bool)),X804),s('type.semanticPrimitives.result'(X808,X802),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X802),X805))),s('type.semanticPrimitives.result'(X807,X803),X806)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X802,fun(X803,bool)),X804),s('type.semanticPrimitives.error_result'(X802),X805),s('type.semanticPrimitives.error_result'(X803),sK11(X806,X803,X807)))) | s('type.semanticPrimitives.result'(X807,X803),X806) = s('type.semanticPrimitives.result'(X807,X803),'const.semanticPrimitives.Rval_1'(s(X807,sK10(X806,X803,X807))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f22253,f5315])).
fof(f23891,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23534,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23534,plain,(
  ( ! [X798,X796,X800,X795,X799,X797,X801,X794] : (~p(s(bool,g(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X800,fun(X799,bool)),X801),s(fun(X794,fun(X795,bool)),X796),s('type.semanticPrimitives.result'(X800,X794),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X794),X797))),s('type.semanticPrimitives.result'(X799,X795),X798)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X794,fun(X795,bool)),X796),s('type.semanticPrimitives.error_result'(X794),X797),s('type.semanticPrimitives.error_result'(X795),sK11(X798,X795,X799)))) | s('type.semanticPrimitives.result'(X799,X795),X798) = s('type.semanticPrimitives.result'(X799,X795),'const.semanticPrimitives.Rval_1'(s(X799,sK10(X798,X795,X799))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f21581,f5315])).
fof(f23890,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23533,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23533,plain,(
  ( ! [X786,X790,X788,X793,X787,X791,X789,X792] : (~p(s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X792,fun(X791,bool)),X793),s(fun(X786,fun(X787,bool)),X788),s('type.semanticPrimitives.result'(X792,X786),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X786),X789))),s('type.semanticPrimitives.result'(X791,X787),X790)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X786,fun(X787,bool)),X788),s('type.semanticPrimitives.error_result'(X786),X789),s('type.semanticPrimitives.error_result'(X787),sK11(X790,X787,X791)))) | s('type.semanticPrimitives.result'(X791,X787),X790) = s('type.semanticPrimitives.result'(X791,X787),'const.semanticPrimitives.Rval_1'(s(X791,sK10(X790,X787,X791))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f20591,f5315])).
fof(f23889,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23532,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23532,plain,(
  ( ! [X784,X779,X783,X781,X785,X778,X782,X780] : (~p(s(bool,g(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X784,fun(X783,bool)),X785),s(fun(X778,fun(X779,bool)),X780),s('type.semanticPrimitives.result'(X784,X778),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X778),X781))),s('type.semanticPrimitives.result'(X783,X779),X782)))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X778,fun(X779,bool)),X780),s('type.semanticPrimitives.error_result'(X778),X781),s('type.semanticPrimitives.error_result'(X779),sK11(X782,X779,X783)))) | s('type.semanticPrimitives.result'(X783,X779),X782) = s('type.semanticPrimitives.result'(X783,X779),'const.semanticPrimitives.Rval_1'(s(X783,sK10(X782,X779,X783))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f19961,f5315])).
fof(f23888,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23531,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23531,plain,(
  ( ! [X777,X771,X775,X773,X776,X770,X774,X772] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X776,fun(X775,bool)),X777),s(fun(X770,fun(X771,bool)),X772),s('type.semanticPrimitives.result'(X776,X770),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X770),X773))),s('type.semanticPrimitives.result'(X775,X771),X774)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X770,fun(X771,bool)),X772),s('type.semanticPrimitives.error_result'(X770),X773),s('type.semanticPrimitives.error_result'(X771),sK11(X774,X771,X775)))) = s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X770,fun(X771,bool)),X772),s('type.semanticPrimitives.error_result'(X770),X773),s('type.semanticPrimitives.error_result'(X771),sK11(X774,X771,X775)))))) | s('type.semanticPrimitives.result'(X775,X771),X774) = s('type.semanticPrimitives.result'(X775,X771),'const.semanticPrimitives.Rval_1'(s(X775,sK10(X774,X771,X775))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f19183,f5315])).
fof(f23887,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23530,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23530,plain,(
  ( ! [X765,X767,X763,X769,X764,X766,X762,X768] : (s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X768,fun(X767,bool)),X769),s(fun(X762,fun(X763,bool)),X764),s('type.semanticPrimitives.result'(X768,X762),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X762),X765))),s('type.semanticPrimitives.result'(X767,X763),X766))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X762,fun(X763,bool)),X764),s('type.semanticPrimitives.error_result'(X762),X765),s('type.semanticPrimitives.error_result'(X763),sK11(X766,X763,X767)))) | s('type.semanticPrimitives.result'(X767,X763),X766) = s('type.semanticPrimitives.result'(X767,X763),'const.semanticPrimitives.Rval_1'(s(X767,sK10(X766,X763,X767))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f18315,f5315])).
fof(f23886,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23529,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23529,plain,(
  ( ! [X761,X757,X759,X755,X760,X756,X758,X754] : (s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X760,fun(X759,bool)),X761),s(fun(X754,fun(X755,bool)),X756),s('type.semanticPrimitives.result'(X760,X754),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X754),X757))),s('type.semanticPrimitives.result'(X759,X755),X758))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X754,fun(X755,bool)),X756),s('type.semanticPrimitives.error_result'(X754),X757),s('type.semanticPrimitives.error_result'(X755),sK11(X758,X755,X759)))) | s('type.semanticPrimitives.result'(X759,X755),X758) = s('type.semanticPrimitives.result'(X759,X755),'const.semanticPrimitives.Rval_1'(s(X759,sK10(X758,X755,X759))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f18312,f5315])).
fof(f23885,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23528,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23528,plain,(
  ( ! [X753,X749,X751,X747,X752,X748,X750,X746] : (s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X752,fun(X751,bool)),X753),s(fun(X746,fun(X747,bool)),X748),s('type.semanticPrimitives.result'(X752,X746),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X746),X749))),s('type.semanticPrimitives.result'(X751,X747),X750))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X746,fun(X747,bool)),X748),s('type.semanticPrimitives.error_result'(X746),X749),s('type.semanticPrimitives.error_result'(X747),sK11(X750,X747,X751)))) | s('type.semanticPrimitives.result'(X751,X747),X750) = s('type.semanticPrimitives.result'(X751,X747),'const.semanticPrimitives.Rval_1'(s(X751,sK10(X750,X747,X751))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f18303,f5315])).
fof(f23884,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23527,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23527,plain,(
  ( ! [X738,X745,X741,X743,X739,X744,X740,X742] : (s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X744,fun(X743,bool)),X745),s(fun(X738,fun(X739,bool)),X740),s('type.semanticPrimitives.result'(X744,X738),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X738),X741))),s('type.semanticPrimitives.result'(X743,X739),X742))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X738,fun(X739,bool)),X740),s('type.semanticPrimitives.error_result'(X738),X741),s('type.semanticPrimitives.error_result'(X739),sK11(X742,X739,X743)))) | s('type.semanticPrimitives.result'(X743,X739),X742) = s('type.semanticPrimitives.result'(X743,X739),'const.semanticPrimitives.Rval_1'(s(X743,sK10(X742,X739,X743))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f18300,f5315])).
fof(f23883,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23526,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23526,plain,(
  ( ! [X736,X732,X734,X730,X737,X733,X735,X731] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X736,fun(X735,bool)),X737),s(fun(X730,fun(X731,bool)),X732),s('type.semanticPrimitives.result'(X736,X730),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X730),X733))),s('type.semanticPrimitives.result'(X735,X731),X734)))) | s(bool,'F_0') = s(bool,g(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X730,fun(X731,bool)),X732),s('type.semanticPrimitives.error_result'(X730),X733),s('type.semanticPrimitives.error_result'(X731),sK11(X734,X731,X735)))))))) | s('type.semanticPrimitives.result'(X735,X731),X734) = s('type.semanticPrimitives.result'(X735,X731),'const.semanticPrimitives.Rval_1'(s(X735,sK10(X734,X731,X735))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17928,f5315])).
fof(f23882,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23525,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23525,plain,(
  ( ! [X728,X724,X726,X722,X729,X725,X727,X723] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X728,fun(X727,bool)),X729),s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.result'(X728,X722),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X722),X725))),s('type.semanticPrimitives.result'(X727,X723),X726)))) | s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X722,fun(X723,bool)),X724),s('type.semanticPrimitives.error_result'(X722),X725),s('type.semanticPrimitives.error_result'(X723),sK11(X726,X723,X727)))))))) | s('type.semanticPrimitives.result'(X727,X723),X726) = s('type.semanticPrimitives.result'(X727,X723),'const.semanticPrimitives.Rval_1'(s(X727,sK10(X726,X723,X727))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17925,f5315])).
fof(f23881,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23524,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23524,plain,(
  ( ! [X720,X716,X718,X714,X721,X717,X719,X715] : (s(bool,'F_0') = s(bool,g(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X720,fun(X719,bool)),X721),s(fun(X714,fun(X715,bool)),X716),s('type.semanticPrimitives.result'(X720,X714),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X714),X717))),s('type.semanticPrimitives.result'(X719,X715),X718))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X714,fun(X715,bool)),X716),s('type.semanticPrimitives.error_result'(X714),X717),s('type.semanticPrimitives.error_result'(X715),sK11(X718,X715,X719)))) | s('type.semanticPrimitives.result'(X719,X715),X718) = s('type.semanticPrimitives.result'(X719,X715),'const.semanticPrimitives.Rval_1'(s(X719,sK10(X718,X715,X719))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17924,f5315])).
fof(f23880,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23523,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23523,plain,(
  ( ! [X707,X712,X708,X710,X706,X713,X709,X711] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X712,fun(X711,bool)),X713),s(fun(X706,fun(X707,bool)),X708),s('type.semanticPrimitives.result'(X712,X706),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X706),X709))),s('type.semanticPrimitives.result'(X711,X707),X710)))) | s(bool,'T_0') != s(bool,g(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X706,fun(X707,bool)),X708),s('type.semanticPrimitives.error_result'(X706),X709),s('type.semanticPrimitives.error_result'(X707),sK11(X710,X707,X711)))))))) | s('type.semanticPrimitives.result'(X711,X707),X710) = s('type.semanticPrimitives.result'(X711,X707),'const.semanticPrimitives.Rval_1'(s(X711,sK10(X710,X707,X711))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17711,f5315])).
fof(f23879,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23522,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23522,plain,(
  ( ! [X705,X699,X700,X704,X702,X698,X701,X703] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X704,fun(X703,bool)),X705),s(fun(X698,fun(X699,bool)),X700),s('type.semanticPrimitives.result'(X704,X698),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X698),X701))),s('type.semanticPrimitives.result'(X703,X699),X702)))) | s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X698,fun(X699,bool)),X700),s('type.semanticPrimitives.error_result'(X698),X701),s('type.semanticPrimitives.error_result'(X699),sK11(X702,X699,X703)))))))) | s('type.semanticPrimitives.result'(X703,X699),X702) = s('type.semanticPrimitives.result'(X703,X699),'const.semanticPrimitives.Rval_1'(s(X703,sK10(X702,X699,X703))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17708,f5315])).
fof(f23878,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23521,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23521,plain,(
  ( ! [X697,X693,X695,X691,X696,X692,X694,X690] : (s(bool,'T_0') != s(bool,g(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X696,fun(X695,bool)),X697),s(fun(X690,fun(X691,bool)),X692),s('type.semanticPrimitives.result'(X696,X690),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X690),X693))),s('type.semanticPrimitives.result'(X695,X691),X694))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X690,fun(X691,bool)),X692),s('type.semanticPrimitives.error_result'(X690),X693),s('type.semanticPrimitives.error_result'(X691),sK11(X694,X691,X695)))) | s('type.semanticPrimitives.result'(X695,X691),X694) = s('type.semanticPrimitives.result'(X695,X691),'const.semanticPrimitives.Rval_1'(s(X695,sK10(X694,X691,X695))))) ) | ($spl5 | $spl47 | $spl55 | $spl63)),
  inference(superposition,[],[f17707,f5315])).
fof(f23877,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23520,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23520,plain,(
  ( ! [X689,X685,X687,X683,X688,X684,X686,X682] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X688,fun(X687,bool)),X689),s(fun(X682,fun(X683,bool)),X684),s('type.semanticPrimitives.result'(X688,X682),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X682),X685))),s('type.semanticPrimitives.result'(X687,X683),X686)))) | s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X682,fun(X683,bool)),X684),s('type.semanticPrimitives.error_result'(X682),X685),s('type.semanticPrimitives.error_result'(X683),sK11(X686,X683,X687)))))) = s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X682,fun(X683,bool)),X684),s('type.semanticPrimitives.error_result'(X682),X685),s('type.semanticPrimitives.error_result'(X683),sK11(X686,X683,X687)))))))) | s('type.semanticPrimitives.result'(X687,X683),X686) = s('type.semanticPrimitives.result'(X687,X683),'const.semanticPrimitives.Rval_1'(s(X687,sK10(X686,X683,X687))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17469,f5315])).
fof(f23876,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23519,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23519,plain,(
  ( ! [X681,X677,X679,X675,X680,X676,X678,X674] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X680,fun(X679,bool)),X681),s(fun(X674,fun(X675,bool)),X676),s('type.semanticPrimitives.result'(X680,X674),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X674),X677))),s('type.semanticPrimitives.result'(X679,X675),X678)))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X674,fun(X675,bool)),X676),s('type.semanticPrimitives.error_result'(X674),X677),s('type.semanticPrimitives.error_result'(X675),sK11(X678,X675,X679)))))))))) | s('type.semanticPrimitives.result'(X679,X675),X678) = s('type.semanticPrimitives.result'(X679,X675),'const.semanticPrimitives.Rval_1'(s(X679,sK10(X678,X675,X679))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17465,f5315])).
fof(f23875,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23518,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23518,plain,(
  ( ! [X666,X668,X670,X673,X667,X669,X671,X672] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X672,fun(X671,bool)),X673),s(fun(X666,fun(X667,bool)),X668),s('type.semanticPrimitives.result'(X672,X666),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X666),X669))),s('type.semanticPrimitives.result'(X671,X667),X670)))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X666,fun(X667,bool)),X668),s('type.semanticPrimitives.error_result'(X666),X669),s('type.semanticPrimitives.error_result'(X667),sK11(X670,X667,X671)))))))))) | s('type.semanticPrimitives.result'(X671,X667),X670) = s('type.semanticPrimitives.result'(X671,X667),'const.semanticPrimitives.Rval_1'(s(X671,sK10(X670,X667,X671))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17464,f5315])).
fof(f23874,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23517,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23517,plain,(
  ( ! [X660,X662,X664,X658,X661,X663,X665,X659] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X664,fun(X663,bool)),X665),s(fun(X658,fun(X659,bool)),X660),s('type.semanticPrimitives.result'(X664,X658),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X658),X661))),s('type.semanticPrimitives.result'(X663,X659),X662)))) | s(bool,'F_0') = s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X658,fun(X659,bool)),X660),s('type.semanticPrimitives.error_result'(X658),X661),s('type.semanticPrimitives.error_result'(X659),sK11(X662,X659,X663)))))))) | s('type.semanticPrimitives.result'(X663,X659),X662) = s('type.semanticPrimitives.result'(X663,X659),'const.semanticPrimitives.Rval_1'(s(X663,sK10(X662,X659,X663))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17461,f5315])).
fof(f23873,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl55)),
  inference(global_subsumption,[],[f23516,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23516,plain,(
  ( ! [X656,X652,X654,X650,X657,X653,X655,X651] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X656,fun(X655,bool)),X657),s(fun(X650,fun(X651,bool)),X652),s('type.semanticPrimitives.result'(X656,X650),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X650),X653))),s('type.semanticPrimitives.result'(X655,X651),X654)))) | s(bool,'T_0') != s(bool,f(s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X650,fun(X651,bool)),X652),s('type.semanticPrimitives.error_result'(X650),X653),s('type.semanticPrimitives.error_result'(X651),sK11(X654,X651,X655)))))))) | s('type.semanticPrimitives.result'(X655,X651),X654) = s('type.semanticPrimitives.result'(X655,X651),'const.semanticPrimitives.Rval_1'(s(X655,sK10(X654,X651,X655))))) ) | ($spl5 | $spl47 | $spl55)),
  inference(superposition,[],[f17460,f5315])).
fof(f23872,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23515,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23515,plain,(
  ( ! [X648,X644,X646,X642,X649,X645,X647,X641,X643] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X647,fun(X646,bool)),X648),s(fun(X641,fun(X642,bool)),X643),s('type.semanticPrimitives.result'(X647,X641),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X641),X644))),s('type.semanticPrimitives.result'(X646,X642),X645)))) | p(s(bool,X649)) | s(bool,g(s(bool,X649))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X641,fun(X642,bool)),X643),s('type.semanticPrimitives.error_result'(X641),X644),s('type.semanticPrimitives.error_result'(X642),sK11(X645,X642,X646)))) | s('type.semanticPrimitives.result'(X646,X642),X645) = s('type.semanticPrimitives.result'(X646,X642),'const.semanticPrimitives.Rval_1'(s(X646,sK10(X645,X642,X646))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17451,f5315])).
fof(f23871,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23514,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23514,plain,(
  ( ! [X639,X633,X635,X640,X636,X638,X632,X634,X637] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X638,fun(X637,bool)),X639),s(fun(X632,fun(X633,bool)),X634),s('type.semanticPrimitives.result'(X638,X632),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X632),X635))),s('type.semanticPrimitives.result'(X637,X633),X636)))) | p(s(bool,X640)) | s(bool,X640) = s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X632,fun(X633,bool)),X634),s('type.semanticPrimitives.error_result'(X632),X635),s('type.semanticPrimitives.error_result'(X633),sK11(X636,X633,X637)))))) | s('type.semanticPrimitives.result'(X637,X633),X636) = s('type.semanticPrimitives.result'(X637,X633),'const.semanticPrimitives.Rval_1'(s(X637,sK10(X636,X633,X637))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17451,f5315])).
fof(f23870,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23513,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23513,plain,(
  ( ! [X629,X631,X625,X627,X628,X630,X624,X626] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X630,fun(X629,bool)),X631),s(fun(X624,fun(X625,bool)),X626),s('type.semanticPrimitives.result'(X630,X624),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X624),X627))),s('type.semanticPrimitives.result'(X629,X625),X628)))) | s(bool,'F_0') = s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X624,fun(X625,bool)),X626),s('type.semanticPrimitives.error_result'(X624),X627),s('type.semanticPrimitives.error_result'(X625),sK11(X628,X625,X629)))))) | s('type.semanticPrimitives.result'(X629,X625),X628) = s('type.semanticPrimitives.result'(X629,X625),'const.semanticPrimitives.Rval_1'(s(X629,sK10(X628,X625,X629))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17450,f5315])).
fof(f23869,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23512,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23512,plain,(
  ( ! [X621,X623,X617,X619,X620,X622,X616,X618] : (~p(s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X622,fun(X621,bool)),X623),s(fun(X616,fun(X617,bool)),X618),s('type.semanticPrimitives.result'(X622,X616),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X616),X619))),s('type.semanticPrimitives.result'(X621,X617),X620)))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X616,fun(X617,bool)),X618),s('type.semanticPrimitives.error_result'(X616),X619),s('type.semanticPrimitives.error_result'(X617),sK11(X620,X617,X621)))) | s('type.semanticPrimitives.result'(X621,X617),X620) = s('type.semanticPrimitives.result'(X621,X617),'const.semanticPrimitives.Rval_1'(s(X621,sK10(X620,X617,X621))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17449,f5315])).
fof(f23868,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23511,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23511,plain,(
  ( ! [X613,X615,X609,X611,X612,X614,X608,X610] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X614,fun(X613,bool)),X615),s(fun(X608,fun(X609,bool)),X610),s('type.semanticPrimitives.result'(X614,X608),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X608),X611))),s('type.semanticPrimitives.result'(X613,X609),X612)))) | s(bool,'T_0') != s(bool,g(s(bool,'const.evalProps.exc_rel_3'(s(fun(X608,fun(X609,bool)),X610),s('type.semanticPrimitives.error_result'(X608),X611),s('type.semanticPrimitives.error_result'(X609),sK11(X612,X609,X613)))))) | s('type.semanticPrimitives.result'(X613,X609),X612) = s('type.semanticPrimitives.result'(X613,X609),'const.semanticPrimitives.Rval_1'(s(X613,sK10(X612,X609,X613))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17448,f5315])).
fof(f23867,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47 | $spl63)),
  inference(global_subsumption,[],[f23510,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23510,plain,(
  ( ! [X606,X600,X602,X605,X607,X601,X603,X604] : (s(bool,'F_0') = s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X606,fun(X605,bool)),X607),s(fun(X600,fun(X601,bool)),X602),s('type.semanticPrimitives.result'(X606,X600),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X600),X603))),s('type.semanticPrimitives.result'(X605,X601),X604))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X600,fun(X601,bool)),X602),s('type.semanticPrimitives.error_result'(X600),X603),s('type.semanticPrimitives.error_result'(X601),sK11(X604,X601,X605)))) | s('type.semanticPrimitives.result'(X605,X601),X604) = s('type.semanticPrimitives.result'(X605,X601),'const.semanticPrimitives.Rval_1'(s(X605,sK10(X604,X601,X605))))) ) | ($spl5 | $spl47 | $spl63)),
  inference(superposition,[],[f17447,f5315])).
fof(f23866,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23865,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23865,plain,(
  ( ! [X596,X598,X592,X594,X597,X599,X593,X595] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X598,fun(X597,bool)),X599),s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.result'(X598,X592),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X592),X595))),s('type.semanticPrimitives.result'(X597,X593),X596))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.error_result'(X592),X595),s('type.semanticPrimitives.error_result'(X593),sK11(X596,X593,X597)))) | s('type.semanticPrimitives.result'(X597,X593),X596) = s('type.semanticPrimitives.result'(X597,X593),'const.semanticPrimitives.Rval_1'(s(X597,sK10(X596,X593,X597))))) ) | ($spl5 | $spl47)),
  inference(forward_demodulation,[],[f23509,f17048])).
fof(f23509,plain,(
  ( ! [X596,X598,X592,X594,X597,X599,X593,X595] : (s(bool,g(s(bool,'F_0'))) != s(bool,'const.evalProps.result_rel_4'(s(fun(X598,fun(X597,bool)),X599),s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.result'(X598,X592),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X592),X595))),s('type.semanticPrimitives.result'(X597,X593),X596))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X592,fun(X593,bool)),X594),s('type.semanticPrimitives.error_result'(X592),X595),s('type.semanticPrimitives.error_result'(X593),sK11(X596,X593,X597)))) | s('type.semanticPrimitives.result'(X597,X593),X596) = s('type.semanticPrimitives.result'(X597,X593),'const.semanticPrimitives.Rval_1'(s(X597,sK10(X596,X593,X597))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17250,f5315])).
fof(f23864,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl47)),
  inference(global_subsumption,[],[f23508,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23508,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X590,fun(X589,bool)),X591),s(fun(X584,fun(X585,bool)),X586),s('type.semanticPrimitives.result'(X590,X584),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X584),X587))),s('type.semanticPrimitives.result'(X589,X585),X588))) = s(bool,g(s(bool,'const.evalProps.result_rel_4'(s(fun(X590,fun(X589,bool)),X591),s(fun(X584,fun(X585,bool)),X586),s('type.semanticPrimitives.result'(X590,X584),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X584),X587))),s('type.semanticPrimitives.result'(X589,X585),X588))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X584,fun(X585,bool)),X586),s('type.semanticPrimitives.error_result'(X584),X587),s('type.semanticPrimitives.error_result'(X585),sK11(X588,X585,X589)))) | s('type.semanticPrimitives.result'(X589,X585),X588) = s('type.semanticPrimitives.result'(X589,X585),'const.semanticPrimitives.Rval_1'(s(X589,sK10(X588,X585,X589))))) ) | ($spl5 | $spl47)),
  inference(superposition,[],[f17141,f5315])).
fof(f23863,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55 | $spl63)),
  inference(global_subsumption,[],[f23507,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23507,plain,(
  ( ! [X580,X582,X576,X578,X581,X583,X577,X579] : (s(bool,'F_0') = s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X582,fun(X581,bool)),X583),s(fun(X576,fun(X577,bool)),X578),s('type.semanticPrimitives.result'(X582,X576),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X576),X579))),s('type.semanticPrimitives.result'(X581,X577),X580))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X576,fun(X577,bool)),X578),s('type.semanticPrimitives.error_result'(X576),X579),s('type.semanticPrimitives.error_result'(X577),sK11(X580,X577,X581)))) | s('type.semanticPrimitives.result'(X581,X577),X580) = s('type.semanticPrimitives.result'(X581,X577),'const.semanticPrimitives.Rval_1'(s(X581,sK10(X580,X577,X581))))) ) | ($spl5 | $spl55 | $spl63)),
  inference(superposition,[],[f16637,f5315])).
fof(f23861,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23505,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23505,plain,(
  ( ! [X565,X567,X561,X563,X564,X566,X560,X562] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X566,fun(X565,bool)),X567),s(fun(X560,fun(X561,bool)),X562),s('type.semanticPrimitives.result'(X566,X560),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X560),X563))),s('type.semanticPrimitives.result'(X565,X561),X564)))) | s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X560,fun(X561,bool)),X562),s('type.semanticPrimitives.error_result'(X560),X563),s('type.semanticPrimitives.error_result'(X561),sK11(X564,X561,X565)))))) = s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X560,fun(X561,bool)),X562),s('type.semanticPrimitives.error_result'(X560),X563),s('type.semanticPrimitives.error_result'(X561),sK11(X564,X561,X565)))))))) | s('type.semanticPrimitives.result'(X565,X561),X564) = s('type.semanticPrimitives.result'(X565,X561),'const.semanticPrimitives.Rval_1'(s(X565,sK10(X564,X561,X565))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12264,f5315])).
fof(f23860,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23504,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23504,plain,(
  ( ! [X557,X559,X553,X555,X556,X558,X552,X554] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X558,fun(X557,bool)),X559),s(fun(X552,fun(X553,bool)),X554),s('type.semanticPrimitives.result'(X558,X552),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X552),X555))),s('type.semanticPrimitives.result'(X557,X553),X556)))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X552,fun(X553,bool)),X554),s('type.semanticPrimitives.error_result'(X552),X555),s('type.semanticPrimitives.error_result'(X553),sK11(X556,X553,X557)))) = s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X552,fun(X553,bool)),X554),s('type.semanticPrimitives.error_result'(X552),X555),s('type.semanticPrimitives.error_result'(X553),sK11(X556,X553,X557)))))) | s('type.semanticPrimitives.result'(X557,X553),X556) = s('type.semanticPrimitives.result'(X557,X553),'const.semanticPrimitives.Rval_1'(s(X557,sK10(X556,X553,X557))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12081,f5315])).
fof(f23859,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23503,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23503,plain,(
  ( ! [X546,X549,X551,X545,X547,X548,X550,X544] : (s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X550,fun(X549,bool)),X551),s(fun(X544,fun(X545,bool)),X546),s('type.semanticPrimitives.result'(X550,X544),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X544),X547))),s('type.semanticPrimitives.result'(X549,X545),X548))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X544,fun(X545,bool)),X546),s('type.semanticPrimitives.error_result'(X544),X547),s('type.semanticPrimitives.error_result'(X545),sK11(X548,X545,X549)))) | s('type.semanticPrimitives.result'(X549,X545),X548) = s('type.semanticPrimitives.result'(X549,X545),'const.semanticPrimitives.Rval_1'(s(X549,sK10(X548,X545,X549))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12040,f5315])).
fof(f23858,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23502,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23502,plain,(
  ( ! [X540,X542,X536,X538,X541,X543,X537,X539] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X542,fun(X541,bool)),X543),s(fun(X536,fun(X537,bool)),X538),s('type.semanticPrimitives.result'(X542,X536),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X536),X539))),s('type.semanticPrimitives.result'(X541,X537),X540)))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X536,fun(X537,bool)),X538),s('type.semanticPrimitives.error_result'(X536),X539),s('type.semanticPrimitives.error_result'(X537),sK11(X540,X537,X541)))))))))) | s('type.semanticPrimitives.result'(X541,X537),X540) = s('type.semanticPrimitives.result'(X541,X537),'const.semanticPrimitives.Rval_1'(s(X541,sK10(X540,X537,X541))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f12022,f5315])).
fof(f23857,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23501,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23501,plain,(
  ( ! [X532,X534,X528,X530,X533,X535,X529,X531] : (s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X534,fun(X533,bool)),X535),s(fun(X528,fun(X529,bool)),X530),s('type.semanticPrimitives.result'(X534,X528),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X528),X531))),s('type.semanticPrimitives.result'(X533,X529),X532))))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X528,fun(X529,bool)),X530),s('type.semanticPrimitives.error_result'(X528),X531),s('type.semanticPrimitives.error_result'(X529),sK11(X532,X529,X533)))) | s('type.semanticPrimitives.result'(X533,X529),X532) = s('type.semanticPrimitives.result'(X533,X529),'const.semanticPrimitives.Rval_1'(s(X533,sK10(X532,X529,X533))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11971,f5315])).
fof(f23856,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23500,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23500,plain,(
  ( ! [X524,X526,X520,X522,X525,X527,X521,X523] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X526,fun(X525,bool)),X527),s(fun(X520,fun(X521,bool)),X522),s('type.semanticPrimitives.result'(X526,X520),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X520),X523))),s('type.semanticPrimitives.result'(X525,X521),X524)))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X520,fun(X521,bool)),X522),s('type.semanticPrimitives.error_result'(X520),X523),s('type.semanticPrimitives.error_result'(X521),sK11(X524,X521,X525)))))))))) | s('type.semanticPrimitives.result'(X525,X521),X524) = s('type.semanticPrimitives.result'(X525,X521),'const.semanticPrimitives.Rval_1'(s(X525,sK10(X524,X521,X525))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11953,f5315])).
fof(f23855,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23499,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23499,plain,(
  ( ! [X511,X516,X518,X512,X514,X517,X519,X513,X515] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X517,fun(X516,bool)),X518),s(fun(X511,fun(X512,bool)),X513),s('type.semanticPrimitives.result'(X517,X511),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X511),X514))),s('type.semanticPrimitives.result'(X516,X512),X515))) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X511,fun(X512,bool)),X513),s('type.semanticPrimitives.error_result'(X511),X514),s('type.semanticPrimitives.error_result'(X512),sK11(X515,X512,X516))))),X519,bool)) | s('type.semanticPrimitives.result'(X516,X512),X515) = s('type.semanticPrimitives.result'(X516,X512),'const.semanticPrimitives.Rval_1'(s(X516,sK10(X515,X512,X516))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11727,f5315])).
fof(f23854,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23498,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23498,plain,(
  ( ! [X509,X505,X507,X508,X510,X504,X506,X503] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X509,fun(X508,bool)),X510),s(fun(X503,fun(X504,bool)),X505),s('type.semanticPrimitives.result'(X509,X503),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X503),X506))),s('type.semanticPrimitives.result'(X508,X504),X507)))) | s(bool,'F_0') = s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X503,fun(X504,bool)),X505),s('type.semanticPrimitives.error_result'(X503),X506),s('type.semanticPrimitives.error_result'(X504),sK11(X507,X504,X508)))))))) | s('type.semanticPrimitives.result'(X508,X504),X507) = s('type.semanticPrimitives.result'(X508,X504),'const.semanticPrimitives.Rval_1'(s(X508,sK10(X507,X504,X508))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11513,f5315])).
fof(f23853,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23497,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23497,plain,(
  ( ! [X499,X500,X502,X496,X498,X495,X501,X497] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X501,fun(X500,bool)),X502),s(fun(X495,fun(X496,bool)),X497),s('type.semanticPrimitives.result'(X501,X495),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X495),X498))),s('type.semanticPrimitives.result'(X500,X496),X499)))) | s(bool,'T_0') != s(bool,f(s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X495,fun(X496,bool)),X497),s('type.semanticPrimitives.error_result'(X495),X498),s('type.semanticPrimitives.error_result'(X496),sK11(X499,X496,X500)))))))) | s('type.semanticPrimitives.result'(X500,X496),X499) = s('type.semanticPrimitives.result'(X500,X496),'const.semanticPrimitives.Rval_1'(s(X500,sK10(X499,X496,X500))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11228,f5315])).
fof(f23852,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23496,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23496,plain,(
  ( ! [X486,X492,X494,X488,X490,X487,X493,X489,X491] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X492,fun(X491,bool)),X493),s(fun(X486,fun(X487,bool)),X488),s('type.semanticPrimitives.result'(X492,X486),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X486),X489))),s('type.semanticPrimitives.result'(X491,X487),X490)))) | p(s(bool,X494)) | s(bool,f(s(bool,X494))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X486,fun(X487,bool)),X488),s('type.semanticPrimitives.error_result'(X486),X489),s('type.semanticPrimitives.error_result'(X487),sK11(X490,X487,X491)))) | s('type.semanticPrimitives.result'(X491,X487),X490) = s('type.semanticPrimitives.result'(X491,X487),'const.semanticPrimitives.Rval_1'(s(X491,sK10(X490,X487,X491))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11181,f5315])).
fof(f23851,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23495,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23495,plain,(
  ( ! [X478,X484,X480,X482,X477,X479,X485,X481,X483] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X483,fun(X482,bool)),X484),s(fun(X477,fun(X478,bool)),X479),s('type.semanticPrimitives.result'(X483,X477),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X477),X480))),s('type.semanticPrimitives.result'(X482,X478),X481)))) | p(s(bool,X485)) | s(bool,X485) = s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X477,fun(X478,bool)),X479),s('type.semanticPrimitives.error_result'(X477),X480),s('type.semanticPrimitives.error_result'(X478),sK11(X481,X478,X482)))))) | s('type.semanticPrimitives.result'(X482,X478),X481) = s('type.semanticPrimitives.result'(X482,X478),'const.semanticPrimitives.Rval_1'(s(X482,sK10(X481,X478,X482))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11181,f5315])).
fof(f23850,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23494,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23494,plain,(
  ( ! [X476,X472,X474,X469,X471,X475,X473,X470] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X475,fun(X474,bool)),X476),s(fun(X469,fun(X470,bool)),X471),s('type.semanticPrimitives.result'(X475,X469),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X469),X472))),s('type.semanticPrimitives.result'(X474,X470),X473)))) | s(bool,'F_0') = s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X469,fun(X470,bool)),X471),s('type.semanticPrimitives.error_result'(X469),X472),s('type.semanticPrimitives.error_result'(X470),sK11(X473,X470,X474)))))) | s('type.semanticPrimitives.result'(X474,X470),X473) = s('type.semanticPrimitives.result'(X474,X470),'const.semanticPrimitives.Rval_1'(s(X474,sK10(X473,X470,X474))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11180,f5315])).
fof(f23849,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23493,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23493,plain,(
  ( ! [X466,X461,X463,X465,X467,X462,X468,X464] : (~p(s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X467,fun(X466,bool)),X468),s(fun(X461,fun(X462,bool)),X463),s('type.semanticPrimitives.result'(X467,X461),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X461),X464))),s('type.semanticPrimitives.result'(X466,X462),X465)))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X461,fun(X462,bool)),X463),s('type.semanticPrimitives.error_result'(X461),X464),s('type.semanticPrimitives.error_result'(X462),sK11(X465,X462,X466)))) | s('type.semanticPrimitives.result'(X466,X462),X465) = s('type.semanticPrimitives.result'(X466,X462),'const.semanticPrimitives.Rval_1'(s(X466,sK10(X465,X462,X466))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11179,f5315])).
fof(f23848,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23492,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23492,plain,(
  ( ! [X453,X455,X457,X459,X454,X460,X456,X458] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X459,fun(X458,bool)),X460),s(fun(X453,fun(X454,bool)),X455),s('type.semanticPrimitives.result'(X459,X453),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X453),X456))),s('type.semanticPrimitives.result'(X458,X454),X457)))) | s(bool,'T_0') != s(bool,f(s(bool,'const.evalProps.exc_rel_3'(s(fun(X453,fun(X454,bool)),X455),s('type.semanticPrimitives.error_result'(X453),X456),s('type.semanticPrimitives.error_result'(X454),sK11(X457,X454,X458)))))) | s('type.semanticPrimitives.result'(X458,X454),X457) = s('type.semanticPrimitives.result'(X458,X454),'const.semanticPrimitives.Rval_1'(s(X458,sK10(X457,X454,X458))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f11178,f5315])).
fof(f23847,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23846,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23846,plain,(
  ( ! [X445,X447,X449,X451,X446,X452,X448,X450] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X451,fun(X450,bool)),X452),s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.result'(X451,X445),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X445),X448))),s('type.semanticPrimitives.result'(X450,X446),X449))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.error_result'(X445),X448),s('type.semanticPrimitives.error_result'(X446),sK11(X449,X446,X450)))) | s('type.semanticPrimitives.result'(X450,X446),X449) = s('type.semanticPrimitives.result'(X450,X446),'const.semanticPrimitives.Rval_1'(s(X450,sK10(X449,X446,X450))))) ) | ($spl5 | $spl55)),
  inference(forward_demodulation,[],[f23491,f10856])).
fof(f23491,plain,(
  ( ! [X445,X447,X449,X451,X446,X452,X448,X450] : (s(bool,f(s(bool,'F_0'))) != s(bool,'const.evalProps.result_rel_4'(s(fun(X451,fun(X450,bool)),X452),s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.result'(X451,X445),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X445),X448))),s('type.semanticPrimitives.result'(X450,X446),X449))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X445,fun(X446,bool)),X447),s('type.semanticPrimitives.error_result'(X445),X448),s('type.semanticPrimitives.error_result'(X446),sK11(X449,X446,X450)))) | s('type.semanticPrimitives.result'(X450,X446),X449) = s('type.semanticPrimitives.result'(X450,X446),'const.semanticPrimitives.Rval_1'(s(X450,sK10(X449,X446,X450))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10987,f5315])).
fof(f23845,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl55)),
  inference(global_subsumption,[],[f23490,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23490,plain,(
  ( ! [X441,X443,X438,X444,X440,X442,X437,X439] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X443,fun(X442,bool)),X444),s(fun(X437,fun(X438,bool)),X439),s('type.semanticPrimitives.result'(X443,X437),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X437),X440))),s('type.semanticPrimitives.result'(X442,X438),X441))) = s(bool,f(s(bool,'const.evalProps.result_rel_4'(s(fun(X443,fun(X442,bool)),X444),s(fun(X437,fun(X438,bool)),X439),s('type.semanticPrimitives.result'(X443,X437),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X437),X440))),s('type.semanticPrimitives.result'(X442,X438),X441))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X437,fun(X438,bool)),X439),s('type.semanticPrimitives.error_result'(X437),X440),s('type.semanticPrimitives.error_result'(X438),sK11(X441,X438,X442)))) | s('type.semanticPrimitives.result'(X442,X438),X441) = s('type.semanticPrimitives.result'(X442,X438),'const.semanticPrimitives.Rval_1'(s(X442,sK10(X441,X438,X442))))) ) | ($spl5 | $spl55)),
  inference(superposition,[],[f10909,f5315])).
fof(f23844,plain,(
  $false | ($spl0 | $spl29 | $spl44)),
  inference(global_subsumption,[],[f23843,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23843,plain,(
  ( ! [X428,X430,X432,X434,X429,X431,X433,X435] : (s(bool,'F_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X434,fun(X433,bool)),X435),s(fun(X428,fun(X429,bool)),X430),s('type.semanticPrimitives.result'(X434,X428),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X428),X431))),s('type.semanticPrimitives.result'(X433,X429),X432))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X428,fun(X429,bool)),X430),s('type.semanticPrimitives.error_result'(X428),X431),s('type.semanticPrimitives.error_result'(X429),sK11(X432,X429,X433)))) | s('type.semanticPrimitives.result'(X433,X429),X432) = s('type.semanticPrimitives.result'(X433,X429),'const.semanticPrimitives.Rval_1'(s(X433,sK10(X432,X429,X433))))) ) | $spl44),
  inference(forward_demodulation,[],[f23489,f7120])).
fof(f23489,plain,(
  ( ! [X428,X430,X436,X432,X434,X429,X431,X433,X435] : (s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X436,bool)) != s(bool,'const.evalProps.result_rel_4'(s(fun(X434,fun(X433,bool)),X435),s(fun(X428,fun(X429,bool)),X430),s('type.semanticPrimitives.result'(X434,X428),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X428),X431))),s('type.semanticPrimitives.result'(X433,X429),X432))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X428,fun(X429,bool)),X430),s('type.semanticPrimitives.error_result'(X428),X431),s('type.semanticPrimitives.error_result'(X429),sK11(X432,X429,X433)))) | s('type.semanticPrimitives.result'(X433,X429),X432) = s('type.semanticPrimitives.result'(X433,X429),'const.semanticPrimitives.Rval_1'(s(X433,sK10(X432,X429,X433))))) ) | $spl44),
  inference(superposition,[],[f9873,f5315])).
fof(f23841,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23487,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23487,plain,(
  ( ! [X412,X414,X410,X416,X418,X413,X415,X411,X417] : (s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X418),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X416,fun(X415,bool)),X417),s(fun(X410,fun(X411,bool)),X412),s('type.semanticPrimitives.result'(X416,X410),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X410),X413))),s('type.semanticPrimitives.result'(X415,X411),X414))))) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X410,fun(X411,bool)),X412),s('type.semanticPrimitives.error_result'(X410),X413),s('type.semanticPrimitives.error_result'(X411),sK11(X414,X411,X415)))) | s('type.semanticPrimitives.result'(X415,X411),X414) = s('type.semanticPrimitives.result'(X415,X411),'const.semanticPrimitives.Rval_1'(s(X415,sK10(X414,X411,X415))))) ) | $spl5),
  inference(superposition,[],[f9110,f5315])).
fof(f23840,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23486,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23486,plain,(
  ( ! [X408,X405,X407,X401,X403,X409,X404,X406,X402] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X407,fun(X406,bool)),X408),s(fun(X401,fun(X402,bool)),X403),s('type.semanticPrimitives.result'(X407,X401),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X401),X404))),s('type.semanticPrimitives.result'(X406,X402),X405)))),X409,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X401,fun(X402,bool)),X403),s('type.semanticPrimitives.error_result'(X401),X404),s('type.semanticPrimitives.error_result'(X402),sK11(X405,X402,X406)))) | s('type.semanticPrimitives.result'(X406,X402),X405) = s('type.semanticPrimitives.result'(X406,X402),'const.semanticPrimitives.Rval_1'(s(X406,sK10(X405,X402,X406))))) ) | $spl5),
  inference(superposition,[],[f9099,f5315])).
fof(f23839,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23485,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23485,plain,(
  ( ! [X391,X397,X399,X393,X395,X396,X398,X392,X394,X400] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X397,fun(X396,bool)),X398),s(fun(X391,fun(X392,bool)),X393),s('type.semanticPrimitives.result'(X397,X391),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X391),X394))),s('type.semanticPrimitives.result'(X396,X392),X395)))),X399,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X391,fun(X392,bool)),X393),s('type.semanticPrimitives.error_result'(X391),X394),s('type.semanticPrimitives.error_result'(X392),sK11(X395,X392,X396))))),X400,bool)) | s('type.semanticPrimitives.result'(X396,X392),X395) = s('type.semanticPrimitives.result'(X396,X392),'const.semanticPrimitives.Rval_1'(s(X396,sK10(X395,X392,X396))))) ) | $spl5),
  inference(superposition,[],[f8956,f5315])).
fof(f23838,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23484,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23484,plain,(
  ( ! [X383,X389,X385,X387,X382,X388,X390,X384,X386] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X388,fun(X387,bool)),X389),s(fun(X382,fun(X383,bool)),X384),s('type.semanticPrimitives.result'(X388,X382),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X382),X385))),s('type.semanticPrimitives.result'(X387,X383),X386)))),X390,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X382,fun(X383,bool)),X384),s('type.semanticPrimitives.error_result'(X382),X385),s('type.semanticPrimitives.error_result'(X383),sK11(X386,X383,X387)))) | s('type.semanticPrimitives.result'(X387,X383),X386) = s('type.semanticPrimitives.result'(X387,X383),'const.semanticPrimitives.Rval_1'(s(X387,sK10(X386,X383,X387))))) ) | $spl5),
  inference(superposition,[],[f8791,f5315])).
fof(f23837,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23483,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23483,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X373,X375,X381] : (s(bool,X381) != s(bool,'const.evalProps.result_rel_4'(s(fun(X379,fun(X378,bool)),X380),s(fun(X373,fun(X374,bool)),X375),s('type.semanticPrimitives.result'(X379,X373),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X373),X376))),s('type.semanticPrimitives.result'(X378,X374),X377))) | s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X373,fun(X374,bool)),X375),s('type.semanticPrimitives.error_result'(X373),X376),s('type.semanticPrimitives.error_result'(X374),sK11(X377,X374,X378)))) | s(bool,'T_0') = s(bool,X381) | s('type.semanticPrimitives.result'(X378,X374),X377) = s('type.semanticPrimitives.result'(X378,X374),'const.semanticPrimitives.Rval_1'(s(X378,sK10(X377,X374,X378))))) ) | $spl5),
  inference(superposition,[],[f8464,f5315])).
fof(f23836,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23482,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23482,plain,(
  ( ! [X364,X366,X372,X368,X370,X365,X367,X369,X371] : (s(bool,X372) != s(bool,'const.evalProps.result_rel_4'(s(fun(X370,fun(X369,bool)),X371),s(fun(X364,fun(X365,bool)),X366),s('type.semanticPrimitives.result'(X370,X364),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X364),X367))),s('type.semanticPrimitives.result'(X369,X365),X368))) | s(bool,'F_0') = s(bool,X372) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X364,fun(X365,bool)),X366),s('type.semanticPrimitives.error_result'(X364),X367),s('type.semanticPrimitives.error_result'(X365),sK11(X368,X365,X369)))) | s('type.semanticPrimitives.result'(X369,X365),X368) = s('type.semanticPrimitives.result'(X369,X365),'const.semanticPrimitives.Rval_1'(s(X369,sK10(X368,X365,X369))))) ) | $spl5),
  inference(superposition,[],[f8464,f5315])).
fof(f23835,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23481,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23481,plain,(
  ( ! [X356,X358,X360,X362,X357,X359,X355,X361,X363] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X361,fun(X360,bool)),X362),s(fun(X355,fun(X356,bool)),X357),s('type.semanticPrimitives.result'(X361,X355),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X355),X358))),s('type.semanticPrimitives.result'(X360,X356),X359)))) | s(bool,X363) != s(bool,'const.evalProps.exc_rel_3'(s(fun(X355,fun(X356,bool)),X357),s('type.semanticPrimitives.error_result'(X355),X358),s('type.semanticPrimitives.error_result'(X356),sK11(X359,X356,X360)))) | s(bool,'F_0') = s(bool,X363) | s('type.semanticPrimitives.result'(X360,X356),X359) = s('type.semanticPrimitives.result'(X360,X356),'const.semanticPrimitives.Rval_1'(s(X360,sK10(X359,X356,X360))))) ) | $spl5),
  inference(superposition,[],[f8327,f5315])).
fof(f23834,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23480,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23480,plain,(
  ( ! [X350,X346,X352,X354,X349,X351,X347,X353,X348] : (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X352,fun(X351,bool)),X353),s(fun(X346,fun(X347,bool)),X348),s('type.semanticPrimitives.result'(X352,X346),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X346),X349))),s('type.semanticPrimitives.result'(X351,X347),X350)))) | s(bool,X354) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X346,fun(X347,bool)),X348),s('type.semanticPrimitives.error_result'(X346),X349),s('type.semanticPrimitives.error_result'(X347),sK11(X350,X347,X351)))) | s(bool,'F_0') = s(bool,X354) | s('type.semanticPrimitives.result'(X351,X347),X350) = s('type.semanticPrimitives.result'(X351,X347),'const.semanticPrimitives.Rval_1'(s(X351,sK10(X350,X347,X351))))) ) | $spl5),
  inference(superposition,[],[f8324,f5315])).
fof(f23833,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23479,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23479,plain,(
  ( ! [X344,X341,X343,X337,X339,X345,X340,X342,X338] : (s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(X343,fun(X342,bool)),X344),s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.result'(X343,X337),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X337),X340))),s('type.semanticPrimitives.result'(X342,X338),X341))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X337,fun(X338,bool)),X339),s('type.semanticPrimitives.error_result'(X337),X340),s('type.semanticPrimitives.error_result'(X338),sK11(X341,X338,X342))))),X345,bool)) | s('type.semanticPrimitives.result'(X342,X338),X341) = s('type.semanticPrimitives.result'(X342,X338),'const.semanticPrimitives.Rval_1'(s(X342,sK10(X341,X338,X342))))) ) | $spl5),
  inference(superposition,[],[f8252,f5315])).
fof(f23832,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23478,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23478,plain,(
  ( ! [X327,X333,X335,X329,X331,X332,X334,X328,X330,X336] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X333,fun(X332,bool)),X334),s(fun(X327,fun(X328,bool)),X329),s('type.semanticPrimitives.result'(X333,X327),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X327),X330))),s('type.semanticPrimitives.result'(X332,X328),X331)))),X335,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X327,fun(X328,bool)),X329),s('type.semanticPrimitives.error_result'(X327),X330),s('type.semanticPrimitives.error_result'(X328),sK11(X331,X328,X332))))),X336,bool)) | s('type.semanticPrimitives.result'(X332,X328),X331) = s('type.semanticPrimitives.result'(X332,X328),'const.semanticPrimitives.Rval_1'(s(X332,sK10(X331,X328,X332))))) ) | $spl5),
  inference(superposition,[],[f8248,f5315])).
fof(f23831,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23477,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23477,plain,(
  ( ! [X325,X321,X323,X318,X324,X326,X320,X322,X317,X319] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X323,fun(X322,bool)),X324),s(fun(X317,fun(X318,bool)),X319),s('type.semanticPrimitives.result'(X323,X317),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X317),X320))),s('type.semanticPrimitives.result'(X322,X318),X321)))),X325,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(X317,fun(X318,bool)),X319),s('type.semanticPrimitives.error_result'(X317),X320),s('type.semanticPrimitives.error_result'(X318),sK11(X321,X318,X322))))),X326,bool)) | s('type.semanticPrimitives.result'(X322,X318),X321) = s('type.semanticPrimitives.result'(X322,X318),'const.semanticPrimitives.Rval_1'(s(X322,sK10(X321,X318,X322))))) ) | $spl5),
  inference(superposition,[],[f8248,f5315])).
fof(f23830,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23829,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23829,plain,(
  ( ! [X313,X315,X308,X310,X316,X312,X314,X309,X311] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X308,fun(X309,bool)),X310),s('type.semanticPrimitives.error_result'(X308),X311),s('type.semanticPrimitives.error_result'(X309),sK11(X312,X309,X313)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X314,fun(X313,bool)),X315),s(fun(X308,fun(X309,bool)),X310),s('type.semanticPrimitives.result'(X314,X308),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X308),X311))),s('type.semanticPrimitives.result'(X313,X309),X312)))),X316,bool)) | s('type.semanticPrimitives.result'(X313,X309),X312) = s('type.semanticPrimitives.result'(X313,X309),'const.semanticPrimitives.Rval_1'(s(X313,sK10(X312,X309,X313))))) ) | $spl5),
  inference(forward_demodulation,[],[f23476,f7269])).
fof(f23476,plain,(
  ( ! [X313,X315,X308,X310,X316,X312,X314,X309,X311] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X314,fun(X313,bool)),X315),s(fun(X308,fun(X309,bool)),X310),s('type.semanticPrimitives.result'(X314,X308),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X308),X311))),s('type.semanticPrimitives.result'(X313,X309),X312)))),X316,bool)) | s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X308,fun(X309,bool)),X310),s('type.semanticPrimitives.error_result'(X308),X311),s('type.semanticPrimitives.error_result'(X309),sK11(X312,X309,X313)))) | s('type.semanticPrimitives.result'(X313,X309),X312) = s('type.semanticPrimitives.result'(X313,X309),'const.semanticPrimitives.Rval_1'(s(X313,sK10(X312,X309,X313))))) ) | $spl5),
  inference(superposition,[],[f7650,f5315])).
fof(f23826,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822,f23825])).
fof(f23823,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469,f23822])).
fof(f23820,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468,f23469])).
fof(f23819,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467,f23468])).
fof(f23818,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466,f23467])).
fof(f23817,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465,f23466])).
fof(f23816,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464,f23465])).
fof(f23815,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463,f23464])).
fof(f23814,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462,f23463])).
fof(f23813,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461,f23462])).
fof(f23812,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460,f23461])).
fof(f23811,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459,f23460])).
fof(f23810,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454,f23459])).
fof(f23809,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453,f23454])).
fof(f23808,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452,f23453])).
fof(f23807,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451,f23452])).
fof(f23806,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450,f23451])).
fof(f23805,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449,f23450])).
fof(f23804,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448,f23449])).
fof(f23803,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447,f23448])).
fof(f23802,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439,f23447])).
fof(f23801,plain,(
  $false | ($spl0 | $spl5 | $spl29 | $spl63)),
  inference(global_subsumption,[],[f23800,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439])).
fof(f23800,plain,(
  ( ! [X103,X107,X105,X102,X108,X106,X104] : (s('type.semanticPrimitives.result'(bool,X103),X102) = s('type.semanticPrimitives.result'(bool,X103),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X104,fun(X103,bool)),X105),s('type.semanticPrimitives.error_result'(X104),X106),s('type.semanticPrimitives.error_result'(X103),sK11(X102,X103,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X107,fun(bool,bool)),X108),s(fun(X104,fun(X103,bool)),X105),s('type.semanticPrimitives.result'(X107,X104),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X104),X106))),s('type.semanticPrimitives.result'(bool,X103),X102))) | s(bool,'F_0') = s(bool,sK10(X102,X103,bool))) ) | ($spl5 | $spl63)),
  inference(forward_demodulation,[],[f23443,f12379])).
fof(f23443,plain,(
  ( ! [X103,X107,X105,X102,X108,X106,X104] : (s('type.semanticPrimitives.result'(bool,X103),X102) = s('type.semanticPrimitives.result'(bool,X103),'const.semanticPrimitives.Rval_1'(s(bool,f(s(bool,'T_0'))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X104,fun(X103,bool)),X105),s('type.semanticPrimitives.error_result'(X104),X106),s('type.semanticPrimitives.error_result'(X103),sK11(X102,X103,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X107,fun(bool,bool)),X108),s(fun(X104,fun(X103,bool)),X105),s('type.semanticPrimitives.result'(X107,X104),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X104),X106))),s('type.semanticPrimitives.result'(bool,X103),X102))) | s(bool,'F_0') = s(bool,sK10(X102,X103,bool))) ) | ($spl5 | $spl63)),
  inference(superposition,[],[f5315,f12555])).
fof(f23798,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23797,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439])).
fof(f23797,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s('type.semanticPrimitives.result'(bool,X87),X86) = s('type.semanticPrimitives.result'(bool,X87),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X88,fun(X87,bool)),X89),s('type.semanticPrimitives.error_result'(X88),X90),s('type.semanticPrimitives.error_result'(X87),sK11(X86,X87,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(bool,bool)),X92),s(fun(X88,fun(X87,bool)),X89),s('type.semanticPrimitives.result'(X91,X88),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X88),X90))),s('type.semanticPrimitives.result'(bool,X87),X86))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,sK10(X86,X87,bool))),X93,bool))) ) | $spl5),
  inference(forward_demodulation,[],[f23441,f7269])).
fof(f23441,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s('type.semanticPrimitives.result'(bool,X87),X86) = s('type.semanticPrimitives.result'(bool,X87),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))))) | s(bool,'const.evalProps.exc_rel_3'(s(fun(X88,fun(X87,bool)),X89),s('type.semanticPrimitives.error_result'(X88),X90),s('type.semanticPrimitives.error_result'(X87),sK11(X86,X87,bool)))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X91,fun(bool,bool)),X92),s(fun(X88,fun(X87,bool)),X89),s('type.semanticPrimitives.result'(X91,X88),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X88),X90))),s('type.semanticPrimitives.result'(bool,X87),X86))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,sK10(X86,X87,bool))),X93,bool))) ) | $spl5),
  inference(superposition,[],[f5315,f7650])).
fof(f23795,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438,f23439])).
fof(f23794,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437,f23438])).
fof(f23793,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436,f23437])).
fof(f23792,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784,f23436])).
fof(f23788,plain,(
  $false | ($spl0 | $spl5 | $spl29)),
  inference(global_subsumption,[],[f23787,f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784])).
fof(f23787,plain,(
  ( ! [X127,X125,X123,X130,X128,X126,X124,X131,X129] : (s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(X126,fun(X127,bool)),X128),s('type.semanticPrimitives.error_result'(X126),X129),s('type.semanticPrimitives.error_result'(X127),sK11(X130,X127,X124)))) | s('type.semanticPrimitives.result'(X124,X127),X130) = s('type.semanticPrimitives.result'(X124,X127),'const.semanticPrimitives.Rval_1'(s(X124,sK10(X130,X127,X124)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X123,fun(X124,bool)),X125),s(fun(X126,fun(X127,bool)),X128),s('type.semanticPrimitives.result'(X123,X126),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X126),X129))),s('type.semanticPrimitives.result'(X124,X127),X130)))),X131,bool))) ) | $spl5),
  inference(forward_demodulation,[],[f23427,f7269])).
fof(f23427,plain,(
  ( ! [X127,X125,X123,X130,X128,X126,X124,X131,X129] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(X126,fun(X127,bool)),X128),s('type.semanticPrimitives.error_result'(X126),X129),s('type.semanticPrimitives.error_result'(X127),sK11(X130,X127,X124)))) | s('type.semanticPrimitives.result'(X124,X127),X130) = s('type.semanticPrimitives.result'(X124,X127),'const.semanticPrimitives.Rval_1'(s(X124,sK10(X130,X127,X124)))) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X123,fun(X124,bool)),X125),s(fun(X126,fun(X127,bool)),X128),s('type.semanticPrimitives.result'(X123,X126),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X126),X129))),s('type.semanticPrimitives.result'(X124,X127),X130)))),X131,bool))) ) | $spl5),
  inference(superposition,[],[f5315,f7650])).
fof(f23785,plain,(
  $false | ($spl0 | $spl29)),
  inference(global_subsumption,[],[f146,f145,f144,f147,f150,f153,f152,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f256,f273,f276,f306,f394,f533,f587,f589,f648,f917,f918,f919,f921,f684,f686,f688,f935,f932,f930,f690,f652,f593,f591,f948,f195,f194,f196,f471,f230,f231,f937,f934,f469,f429,f428,f398,f397,f369,f368,f229,f228,f157,f156,f149,f2913,f2914,f2915,f2927,f2928,f2929,f3057,f3056,f3058,f3059,f3060,f3073,f3075,f3076,f3077,f3078,f3080,f3085,f3087,f3092,f3093,f3094,f3096,f3205,f3212,f3215,f3296,f3299,f3313,f3261,f4953,f4984,f4992,f5097,f5104,f5120,f5050,f5312,f5315,f5316,f5317,f5318,f5419,f5382,f5556,f5597,f5598,f5599,f5600,f5735,f5665,f388,f249,f6334,f6331,f6557,f6560,f6534,f7120,f7146,f7147,f7148,f7156,f7389,f7390,f7391,f7455,f7396,f7469,f7430,f7432,f7489,f7505,f7548,f7552,f7790,f7803,f7812,f7837,f7823,f7855,f7896,f7929,f8002,f8042,f8048,f8371,f8337,f8338,f8339,f8340,f8346,f8348,f8349,f8350,f8351,f8352,f8353,f8357,f8360,f8361,f8362,f8378,f8502,f8504,f8512,f8513,f8673,f8675,f8684,f8697,f8699,f8707,f8708,f9170,f9424,f9382,f9384,f9624,f9625,f9617,f9921,f9948,f9952,f10063,f10064,f10205,f10173,f10174,f10182,f10184,f10186,f10196,f10212,f7482,f10392,f10393,f10394,f10395,f10396,f10811,f11051,f11307,f11332,f11337,f11587,f11598,f11623,f11874,f11877,f11893,f12049,f12051,f12052,f12053,f12054,f12055,f12056,f12057,f12058,f12059,f12062,f12063,f12064,f12066,f12074,f12331,f12332,f12290,f12292,f12293,f12300,f12309,f12311,f12321,f12322,f12323,f12326,f12327,f12576,f12577,f12578,f12571,f12572,f12573,f12574,f13063,f13068,f13069,f13105,f13226,f13139,f13149,f13574,f13575,f13613,f13651,f13775,f13688,f13698,f14072,f14073,f14243,f14244,f14100,f14101,f14234,f14252,f14232,f14254,f14171,f14172,f14173,f14175,f14183,f14185,f14189,f14191,f14192,f14193,f14194,f14195,f14196,f14197,f14198,f14199,f14200,f14201,f14202,f14204,f14205,f14206,f14278,f14212,f14213,f14214,f14216,f14224,f14226,f14682,f14509,f14510,f14511,f14683,f14531,f14532,f14672,f14691,f14670,f14693,f14604,f14605,f14606,f14608,f14616,f14618,f14623,f14625,f14626,f14627,f14628,f14629,f14630,f14631,f14632,f14633,f14634,f14635,f14636,f14637,f14639,f14640,f14641,f14719,f14648,f14649,f14650,f14652,f14660,f14662,f16798,f16660,f16662,f16799,f16796,f16802,f16794,f16804,f16731,f16732,f16733,f16735,f16743,f16745,f16751,f16753,f16756,f16757,f16758,f16759,f16760,f16761,f16762,f16763,f16764,f16825,f16773,f16774,f16775,f16777,f16785,f16787,f17100,f17101,f17116,f17478,f17479,f17481,f17633,f17634,f17635,f17631,f17638,f17629,f17640,f17564,f17565,f17566,f17568,f17576,f17578,f17584,f17586,f17589,f17590,f17591,f17592,f17593,f17594,f17595,f17596,f17597,f17598,f17661,f17608,f17609,f17610,f17612,f17620,f17622,f17857,f17858,f17873,f18021,f18409,f18731,f18706,f18707,f18708,f18709,f18710,f18711,f18712,f18732,f18733,f18734,f18718,f18719,f18720,f18949,f18928,f18929,f18930,f18931,f18938,f19048,f19050,f19051,f19052,f19053,f19054,f19055,f19056,f19057,f19058,f19059,f19060,f19061,f19062,f19063,f19103,f19113,f19089,f19159,f19131,f19132,f19133,f19160,f19161,f19162,f19163,f19139,f19140,f19141,f19144,f19145,f19146,f19177,f19178,f19410,f19391,f19392,f19393,f19397,f19626,f19627,f19628,f19629,f19630,f19633,f19634,f19635,f19636,f19637,f19769,f19671,f19784,f19727,f19737,f19739,f20236,f20267,f20268,f20699,f20700,f20701,f20708,f20710,f20725,f20729,f20730,f20731,f20956,f20742,f20743,f20744,f20745,f20747,f20748,f20749,f20753,f20754,f20755,f20759,f20760,f20761,f20768,f20770,f20785,f20789,f20790,f20791,f20985,f20802,f20803,f20804,f20805,f20807,f20808,f20809,f20813,f20814,f20815,f21007,f20851,f21022,f20911,f20921,f20923,f21353,f21385,f21386,f21889,f21890,f21891,f21892,f21905,f22381,f22382,f22383,f22392,f22393,f22394,f22405,f23087,f23089,f22726,f22727,f23107,f22750,f22751,f22752,f22753,f22754,f22777,f22778,f22787,f22788,f22789,f22790,f22791,f22793,f22794,f22799,f22800,f22801,f22802,f22803,f22804,f22805,f22806,f22807,f22808,f22809,f23124,f22874,f22875,f22876,f22878,f22886,f22888,f22893,f22894,f22905,f22906,f22907,f23141,f22909,f22911,f22912,f22917,f22918,f22919,f22920,f22921,f23142,f22923,f22924,f22925,f22926,f22927,f23145,f22992,f22993,f22994,f22996,f23004,f23006,f23011,f23012,f23015,f23017,f23020,f23021,f23022,f23023,f23024,f23025,f23026,f23027,f23028,f23029,f23030,f23031,f23032,f23033,f23034,f23036,f23039,f23040,f23041,f23042,f23043,f23164,f23165,f23055,f23167,f23169,f23058,f23171,f23060,f23065,f23077,f23079,f23084,f23085,f23754,f23380,f23756,f23382,f23383,f23394,f23395,f23397,f23398,f23774,f23784])).
fof(f17641,plain,(
  ( ! [X243,X241,X239,X237,X242,X240,X238,X236,X245] : (s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X237,bool)),X238),s(fun(X239,fun(X240,bool)),X241),s('type.semanticPrimitives.result'(X236,X239),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X239),X242))),s('type.semanticPrimitives.result'(X237,X240),X243))))) | s('type.semanticPrimitives.result'(X237,X240),X243) = s('type.semanticPrimitives.result'(X237,X240),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X240),sK11(X243,X240,X237))))) ) | $spl76),
  inference(cnf_transformation,[],[f17641_D])).
fof(f17641_D,plain,(
  ( ! [X243,X241,X239,X237,X242,X240,X238,X236,X245] : (s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X237,bool)),X238),s(fun(X239,fun(X240,bool)),X241),s('type.semanticPrimitives.result'(X236,X239),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X239),X242))),s('type.semanticPrimitives.result'(X237,X240),X243))))) | s('type.semanticPrimitives.result'(X237,X240),X243) = s('type.semanticPrimitives.result'(X237,X240),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X240),sK11(X243,X240,X237))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f17640,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236,X245] : (s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X237,bool)),X238),s(fun(X239,fun(X240,bool)),X241),s('type.semanticPrimitives.result'(X236,X239),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X239),X242))),s('type.semanticPrimitives.result'(X237,X240),X243))))) | s(bool,'T_0') = s(bool,X244) | s('type.semanticPrimitives.result'(X237,X240),X243) = s('type.semanticPrimitives.result'(X237,X240),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X240),sK11(X243,X240,X237))))) )),
  inference(subsumption_resolution,[],[f17527,f150])).
fof(f17527,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236,X245] : (s(bool,'F_0') != s(bool,X244) | s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X245),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X236,fun(X237,bool)),X238),s(fun(X239,fun(X240,bool)),X241),s('type.semanticPrimitives.result'(X236,X239),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X239),X242))),s('type.semanticPrimitives.result'(X237,X240),X243))))) | s(bool,'T_0') = s(bool,X244) | s('type.semanticPrimitives.result'(X237,X240),X243) = s('type.semanticPrimitives.result'(X237,X240),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X240),sK11(X243,X240,X237))))) )),
  inference(superposition,[],[f429,f4992])).
fof(f16805,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X232),X235))))))) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X231),sK11(X234,X231,X228))))) ) | $spl74),
  inference(cnf_transformation,[],[f16805_D])).
fof(f16805_D,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X232),X235))))))) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X231),sK11(X234,X231,X228))))) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f16804,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X236,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X232),X235))))))) | s(bool,'T_0') = s(bool,X236) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X231),sK11(X234,X231,X228))))) )),
  inference(subsumption_resolution,[],[f16696,f150])).
fof(f16696,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X236,X234,X232] : (s(bool,'F_0') != s(bool,X236) | s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X232),X235))))))) | s(bool,'T_0') = s(bool,X236) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X231),sK11(X234,X231,X228))))) )),
  inference(superposition,[],[f429,f3212])).
fof(f6063,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl18),
  inference(cnf_transformation,[],[f6063_D])).
fof(f6063_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f16578,plain,(
  ( ! [X94,X96] : (s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl16 | $spl46)),
  inference(subsumption_resolution,[],[f16577,f9465])).
fof(f9465,plain,(
  ( ! [X69] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X69,bool))) ) | $spl5),
  inference(subsumption_resolution,[],[f9219,f7267])).
fof(f7267,plain,(
  s(bool,'T_0') != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | $spl5),
  inference(unit_resulting_resolution,[],[f147,f252,f202])).
fof(f9219,plain,(
  ( ! [X69] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X69,bool)) | s(bool,'T_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl5),
  inference(superposition,[],[f9099,f7269])).
fof(f16577,plain,(
  ( ! [X94,X95,X96] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X95,bool)) | s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl16 | $spl46)),
  inference(subsumption_resolution,[],[f15856,f2642])).
fof(f15856,plain,(
  ( ! [X94,X95,X96] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X95,bool)) | s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X94) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f7650,f10536])).
fof(f10536,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f10496,f10496])).
fof(f10496,plain,(
  ( ! [X28] : (s(bool,X28) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X28)) ) | ($spl5 | $spl46)),
  inference(subsumption_resolution,[],[f10449,f147])).
fof(f10449,plain,(
  ( ! [X28] : (~p(s(bool,'T_0')) | s(bool,X28) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X28)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f8324,f10398])).
fof(f16493,plain,(
  ( ! [X64,X62,X65] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'F_0') = s(bool,X65) | s(bool,X62) = s(bool,X65)) ) | $spl72),
  inference(cnf_transformation,[],[f16493_D])).
fof(f16493_D,plain,(
  ( ! [X64,X62,X65] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'F_0') = s(bool,X65) | s(bool,X62) = s(bool,X65)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f16576,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | ($spl5 | $spl46)),
  inference(subsumption_resolution,[],[f15849,f150])).
fof(f15849,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'F_0') != s(bool,X63) | s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f429,f10536])).
fof(f16495,plain,(
  ( ! [X94,X96] : (s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl16 | $spl46)),
  inference(subsumption_resolution,[],[f16494,f9465])).
fof(f16494,plain,(
  ( ! [X94,X95,X96] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X95,bool)) | s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl16 | $spl46)),
  inference(subsumption_resolution,[],[f15608,f2642])).
fof(f15608,plain,(
  ( ! [X94,X95,X96] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X95,bool)) | s(bool,X94) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X94) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f7650,f10536])).
fof(f16492,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | ($spl5 | $spl46)),
  inference(subsumption_resolution,[],[f15601,f150])).
fof(f15601,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'F_0') != s(bool,X63) | s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X64),'const.semanticPrimitives.Rval_1'(s(bool,X62))) | s(bool,'T_0') = s(bool,X63) | s(bool,X62) = s(bool,X65) | s(bool,'F_0') = s(bool,X65)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f429,f10536])).
fof(f11901,plain,(
  ( ! [X23,X22] : (s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'F_0') = s(bool,sK12(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X22,X23,bool,bool))))) ) | $spl64),
  inference(cnf_transformation,[],[f11901_D])).
fof(f11901_D,plain,(
  ( ! [X23,X22] : (s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'F_0') = s(bool,sK12(X22,X23,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X22,X23,bool,bool))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f16411,plain,(
  ( ! [X631] : (s(bool,'F_0') != s(bool,f(s(bool,X631))) | s(bool,'F_0') = s(bool,X631)) ) | $spl70),
  inference(cnf_transformation,[],[f16411_D])).
fof(f16411_D,plain,(
  ( ! [X631] : (s(bool,'F_0') != s(bool,f(s(bool,X631))) | s(bool,'F_0') = s(bool,X631)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f15484,plain,(
  ( ! [X629,X631,X630] : (s(bool,'F_0') != s(bool,f(s(bool,X631))) | s(fun(bool,bool),X629) = s(fun(bool,bool),X630) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X629,X630,bool,bool)))) | s(bool,'F_0') = s(bool,sK12(X629,X630,bool,bool)) | s(bool,'F_0') = s(bool,X631)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f2927,f10536])).
fof(f15314,plain,(
  ( ! [X629,X631,X630] : (s(bool,'F_0') != s(bool,f(s(bool,X631))) | s(fun(bool,bool),X629) = s(fun(bool,bool),X630) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X629,X630,bool,bool)))) | s(bool,'F_0') = s(bool,X631) | s(bool,'F_0') = s(bool,sK12(X629,X630,bool,bool))) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f2927,f10536])).
fof(f14694,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rval_1'(s(X229,X235))))))) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rval_1'(s(X228,sK10(X234,X231,X228))))) ) | $spl68),
  inference(cnf_transformation,[],[f14694_D])).
fof(f14694_D,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rval_1'(s(X229,X235))))))) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rval_1'(s(X228,sK10(X234,X231,X228))))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f14693,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X236,X234,X232] : (s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rval_1'(s(X229,X235))))))) | s(bool,'T_0') = s(bool,X236) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rval_1'(s(X228,sK10(X234,X231,X228))))) )),
  inference(subsumption_resolution,[],[f14564,f150])).
fof(f14564,plain,(
  ( ! [X231,X229,X237,X235,X233,X230,X228,X236,X234,X232] : (s(bool,'F_0') != s(bool,X236) | s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X237),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X228,fun(X229,bool)),X230),s(fun(X231,fun(X232,bool)),X233),s('type.semanticPrimitives.result'(X228,X231),X234),s('type.semanticPrimitives.result'(X229,X232),'const.semanticPrimitives.Rval_1'(s(X229,X235))))))) | s(bool,'T_0') = s(bool,X236) | s('type.semanticPrimitives.result'(X228,X231),X234) = s('type.semanticPrimitives.result'(X228,X231),'const.semanticPrimitives.Rval_1'(s(X228,sK10(X234,X231,X228))))) )),
  inference(superposition,[],[f429,f4953])).
fof(f14255,plain,(
  ( ! [X222,X220,X229,X227,X225,X223,X221,X226,X224] : (s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X220,fun(X221,bool)),X222),s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.result'(X220,X223),'const.semanticPrimitives.Rval_1'(s(X220,X226))),s('type.semanticPrimitives.result'(X221,X224),X227))))) | s('type.semanticPrimitives.result'(X221,X224),X227) = s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,sK10(X227,X224,X221))))) ) | $spl66),
  inference(cnf_transformation,[],[f14255_D])).
fof(f14255_D,plain,(
  ( ! [X222,X220,X229,X227,X225,X223,X221,X226,X224] : (s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X220,fun(X221,bool)),X222),s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.result'(X220,X223),'const.semanticPrimitives.Rval_1'(s(X220,X226))),s('type.semanticPrimitives.result'(X221,X224),X227))))) | s('type.semanticPrimitives.result'(X221,X224),X227) = s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,sK10(X227,X224,X221))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f14254,plain,(
  ( ! [X222,X220,X229,X227,X225,X223,X221,X228,X226,X224] : (s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X220,fun(X221,bool)),X222),s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.result'(X220,X223),'const.semanticPrimitives.Rval_1'(s(X220,X226))),s('type.semanticPrimitives.result'(X221,X224),X227))))) | s(bool,'T_0') = s(bool,X228) | s('type.semanticPrimitives.result'(X221,X224),X227) = s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,sK10(X227,X224,X221))))) )),
  inference(subsumption_resolution,[],[f14133,f150])).
fof(f14133,plain,(
  ( ! [X222,X220,X229,X227,X225,X223,X221,X228,X226,X224] : (s(bool,'F_0') != s(bool,X228) | s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X229),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(X220,fun(X221,bool)),X222),s(fun(X223,fun(X224,bool)),X225),s('type.semanticPrimitives.result'(X220,X223),'const.semanticPrimitives.Rval_1'(s(X220,X226))),s('type.semanticPrimitives.result'(X221,X224),X227))))) | s(bool,'T_0') = s(bool,X228) | s('type.semanticPrimitives.result'(X221,X224),X227) = s('type.semanticPrimitives.result'(X221,X224),'const.semanticPrimitives.Rval_1'(s(X221,sK10(X227,X224,X221))))) )),
  inference(superposition,[],[f429,f3215])).
fof(f11897,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(cnf_transformation,[],[f11897_D])).
fof(f11897_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f11900,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X22,X23,bool,bool)))) | s(bool,'F_0') = s(bool,sK12(X22,X23,bool,bool))) ) | ($spl5 | $spl46)),
  inference(forward_demodulation,[],[f11881,f10398])).
fof(f11881,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') != s(bool,f(s(bool,g(s(bool,'F_0'))))) | s(fun(bool,bool),X22) = s(fun(bool,bool),X23) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X22,X23,bool,bool)))) | s(bool,'F_0') = s(bool,sK12(X22,X23,bool,bool))) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f2927,f10496])).
fof(f11895,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK12(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X2,X3,bool,bool))))) ) | $spl60),
  inference(cnf_transformation,[],[f11895_D])).
fof(f11895_D,plain,(
  ( ! [X4,X2,X3] : (s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,X4) | s(bool,X4) = s(bool,sK12(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X2,X3,bool,bool))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f11877,plain,(
  ( ! [X12,X13,X11] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X11,X12,bool,bool)))) | s(bool,X13) = s(bool,sK12(X11,X12,bool,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f2927,f273])).
fof(f11874,plain,(
  ( ! [X4,X2,X3] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,g(s(bool,sK12(X2,X3,bool,bool)))) | s(bool,X4) = s(bool,sK12(X2,X3,bool,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2927,f273])).
fof(f10399,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,bool,bool))) ) | $spl48),
  inference(cnf_transformation,[],[f10399_D])).
fof(f10399_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,bool,bool))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f10786,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X81)) ) | $spl58),
  inference(cnf_transformation,[],[f10786_D])).
fof(f10786_D,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X81)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f10666,plain,(
  ( ! [X83,X81,X82] : (s(bool,X81) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X82) = s(fun(bool,bool),X83) | s(bool,'T_0') = s(bool,sK12(X82,X83,bool,bool)) | s(bool,'F_0') = s(bool,X81)) ) | ($spl5 | $spl46)),
  inference(superposition,[],[f2913,f10496])).
fof(f10402,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl52),
  inference(cnf_transformation,[],[f10402_D])).
fof(f10402_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f10404,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl55),
  inference(cnf_transformation,[],[f10404_D])).
fof(f10404_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f10396,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK12(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f2913,f273])).
fof(f10398,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl46),
  inference(cnf_transformation,[],[f10398_D])).
fof(f10398_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f10405,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl56),
  inference(cnf_transformation,[],[f10405_D])).
fof(f10405_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f10395,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK12(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f2913,f273])).
fof(f10394,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK12(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f2913,f273])).
fof(f10393,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK12(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2913,f273])).
fof(f10401,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl51),
  inference(cnf_transformation,[],[f10401_D])).
fof(f10401_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl51),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl51])])).
fof(f10392,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK12(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f2913,f150])).
fof(f10377,plain,(
  $false | ($spl0 | $spl5 | $spl26)),
  inference(subsumption_resolution,[],[f10376,f9465])).
fof(f10376,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X82,bool))) ) | ($spl0 | $spl5 | $spl26)),
  inference(forward_demodulation,[],[f10375,f9559])).
fof(f9559,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X8,fun(sK1,bool)),X9),s(fun(X10,fun(sK3,bool)),X11),s('type.semanticPrimitives.result'(X8,X10),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X10),X12))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl26),
  inference(superposition,[],[f229,f7480])).
fof(f10375,plain,(
  ( ! [X82] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))),X82,bool))) ) | ($spl0 | $spl5)),
  inference(subsumption_resolution,[],[f10332,f7120])).
fof(f10332,plain,(
  ( ! [X81,X82] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'T_0')),X81,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))),X82,bool))) ) | ($spl0 | $spl5)),
  inference(superposition,[],[f8956,f6331])).
fof(f9873,plain,(
  ( ! [X94,X93] : (s(bool,X94) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X93,bool)) | s(bool,'F_0') = s(bool,X94)) ) | $spl44),
  inference(cnf_transformation,[],[f9873_D])).
fof(f9873_D,plain,(
  ( ! [X94,X93] : (s(bool,X94) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X93,bool)) | s(bool,'F_0') = s(bool,X94)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f9820,plain,(
  ( ! [X94,X92,X93] : (s(bool,X94) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X93,bool)) | s(bool,'F_0') = s(bool,X94) | s(bool,'T_0') = s(bool,X92)) ) | $spl5),
  inference(duplicate_literal_removal,[],[f9709])).
fof(f9709,plain,(
  ( ! [X94,X92,X93] : (s(bool,X94) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X93,bool)) | s(bool,'F_0') = s(bool,X94) | s(bool,'T_0') = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) ) | $spl5),
  inference(superposition,[],[f8464,f9528])).
fof(f9528,plain,(
  ( ! [X8,X7] : (s(bool,X8) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X7,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl5),
  inference(trivial_inequality_removal,[],[f9520])).
fof(f9520,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X8) = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X7,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl5),
  inference(superposition,[],[f9465,f273])).
fof(f9865,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X60,bool)) | s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,X61)))) ) | $spl42),
  inference(cnf_transformation,[],[f9865_D])).
fof(f9865_D,plain,(
  ( ! [X61,X62,X60] : (s(bool,X61) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X60,bool)) | s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,X61)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f9822,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,X61) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X60,bool)) | s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,X61))) | s(bool,'T_0') = s(bool,X59)) ) | $spl5),
  inference(duplicate_literal_removal,[],[f9699])).
fof(f9699,plain,(
  ( ! [X61,X59,X62,X60] : (s(bool,X61) != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X60,bool)) | s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X62),'const.semanticPrimitives.Rval_1'(s(bool,X61))) | s(bool,'T_0') = s(bool,X59) | s(bool,'T_0') = s(bool,X59)) ) | $spl5),
  inference(superposition,[],[f429,f9528])).
fof(f9464,plain,(
  ( ! [X75,X73] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X75,bool)) | s(bool,'T_0') = s(bool,X73)) ) | $spl5),
  inference(subsumption_resolution,[],[f9222,f9099])).
fof(f9222,plain,(
  ( ! [X74,X75,X73] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X75,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X73)),X74,bool)) | s(bool,'T_0') = s(bool,X73)) ) | $spl5),
  inference(superposition,[],[f9099,f8791])).
fof(f8904,plain,(
  ( ! [X10,X7] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool))) ) | $spl30),
  inference(cnf_transformation,[],[f8904_D])).
fof(f8904_D,plain,(
  ( ! [X10,X7] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f9245,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X0)),X1,bool)) | s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X2,bool))) ) | $spl5),
  inference(condensation,[],[f9224])).
fof(f9224,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,'T_0') != s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X82,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X80)),X81,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X80)),X83,bool))) ) | $spl5),
  inference(superposition,[],[f9099,f8248])).
fof(f9438,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,X20)))) ) | $spl36),
  inference(cnf_transformation,[],[f9438_D])).
fof(f9438_D,plain,(
  ( ! [X21,X20] : (s(bool,X20) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,X20)))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f9440,plain,(
  ( ! [X26,X27,X25] : (s(bool,X26) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X25)) ) | $spl5),
  inference(subsumption_resolution,[],[f9377,f9099])).
fof(f9377,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X27),'const.semanticPrimitives.Rval_1'(s(bool,X26))) | s(bool,'T_0') = s(bool,X25) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X25)),X28,bool))) ) | $spl5),
  inference(superposition,[],[f429,f7650])).
fof(f9439,plain,(
  ( ! [X24,X23] : (s(bool,X23) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X23)))) ) | $spl38),
  inference(cnf_transformation,[],[f9439_D])).
fof(f9439_D,plain,(
  ( ! [X24,X23] : (s(bool,X23) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X23)))) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f9424,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,X22)) ) | $spl29),
  inference(duplicate_literal_removal,[],[f9376])).
fof(f9376,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X24),'const.semanticPrimitives.Rval_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,X22)) ) | $spl29),
  inference(superposition,[],[f429,f7505])).
fof(f9425,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,X20))) | s(bool,'T_0') = s(bool,X19)) ) | $spl5),
  inference(duplicate_literal_removal,[],[f9375])).
fof(f9375,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) = s('type.semanticPrimitives.result'(bool,X21),'const.semanticPrimitives.Rval_1'(s(bool,X20))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl5),
  inference(superposition,[],[f429,f7278])).
fof(f8905,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl32),
  inference(cnf_transformation,[],[f8905_D])).
fof(f8905_D,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'T_0') = s(bool,X8)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f8922,plain,(
  ( ! [X88] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X88,bool))) ) | $spl34),
  inference(cnf_transformation,[],[f8922_D])).
fof(f8922_D,plain,(
  ( ! [X88] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X88,bool))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f8939,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X23,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X22)),X24,bool)) | s(bool,'T_0') = s(bool,X22)) ) | ($spl5 | $spl29)),
  inference(forward_demodulation,[],[f8765,f7499])).
fof(f7499,plain,(
  s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | ($spl5 | $spl29)),
  inference(forward_demodulation,[],[f7493,f7269])).
fof(f7493,plain,(
  s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | ($spl5 | $spl29)),
  inference(unit_resulting_resolution,[],[f7267,f7482,f306])).
fof(f8765,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))),X23,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X22)),X24,bool)) | s(bool,'T_0') = s(bool,X22)) ) | ($spl5 | $spl29)),
  inference(superposition,[],[f8248,f7505])).
fof(f8938,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X20,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X19)),X21,bool)) | s(bool,'T_0') = s(bool,X19)) ) | $spl5),
  inference(forward_demodulation,[],[f8764,f7269])).
fof(f8764,plain,(
  ( ! [X21,X19,X20] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))),X20,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X19)),X21,bool)) | s(bool,'T_0') = s(bool,X19)) ) | $spl5),
  inference(superposition,[],[f8248,f7278])).
fof(f8935,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X11)),X14,bool)) | s(bool,'T_0') = s(bool,X11)) ) | $spl5),
  inference(subsumption_resolution,[],[f8762,f8252])).
fof(f8762,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X11)),X14,bool)) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl5),
  inference(superposition,[],[f8248,f273])).
fof(f8934,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool)) | s(bool,'T_0') = s(bool,X7)) ) | $spl5),
  inference(subsumption_resolution,[],[f8761,f8252])).
fof(f8761,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl5),
  inference(superposition,[],[f8248,f273])).
fof(f8759,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X1,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X0)),X2,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl5),
  inference(superposition,[],[f8248,f150])).
fof(f8923,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X93,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X91)),X92,bool)) | s(bool,'T_0') = s(bool,X91)) ) | ($spl5 | $spl29)),
  inference(forward_demodulation,[],[f8743,f7499])).
fof(f8743,plain,(
  ( ! [X92,X93,X91] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X91)),X92,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))),X93,bool)) | s(bool,'T_0') = s(bool,X91)) ) | ($spl5 | $spl29)),
  inference(superposition,[],[f8248,f7505])).
fof(f8921,plain,(
  ( ! [X88,X87,X86] : (s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'F_0')),X88,bool)) | s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X86)),X87,bool)) | s(bool,'T_0') = s(bool,X86)) ) | $spl5),
  inference(forward_demodulation,[],[f8741,f7269])).
fof(f8741,plain,(
  ( ! [X88,X87,X86] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X86)),X87,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))),X88,bool)) | s(bool,'T_0') = s(bool,X86)) ) | $spl5),
  inference(superposition,[],[f8248,f7278])).
fof(f8906,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X11)),X14,bool)) | s(bool,'T_0') = s(bool,X12)) ) | $spl5),
  inference(subsumption_resolution,[],[f8727,f8252])).
fof(f8727,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X12)),X13,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X11)),X14,bool)) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X12)) ) | $spl5),
  inference(superposition,[],[f8248,f273])).
fof(f8903,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl5),
  inference(subsumption_resolution,[],[f8726,f8252])).
fof(f8726,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'F_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X8)),X9,bool)) | s(bool,'T_0') = s(bool,sK10('const.semanticPrimitives.Rval_1'(s(bool,X7)),X10,bool)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) ) | $spl5),
  inference(superposition,[],[f8248,f273])).
fof(f7480,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(sK4,sK3,sK1)))) | $spl26),
  inference(cnf_transformation,[],[f7480_D])).
fof(f7480_D,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(sK4,sK3,sK1)))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f7482,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | $spl29),
  inference(cnf_transformation,[],[f7482_D])).
fof(f7482_D,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) <=> ~$spl29),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl29])])).
fof(f7476,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,sK10(sK4,sK3,sK1)))) | $spl2),
  inference(equality_resolution,[],[f6310])).
fof(f7255,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X15)) ) | $spl24),
  inference(cnf_transformation,[],[f7255_D])).
fof(f7255_D,plain,(
  ( ! [X15] : (s(bool,X15) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X15)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f7247,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,X14)) ) | $spl12),
  inference(duplicate_literal_removal,[],[f7200])).
fof(f7200,plain,(
  ( ! [X14,X15] : (s(bool,X15) != s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X15) | s(bool,'F_0') = s(bool,X14) | s(bool,'F_0') = s(bool,X14)) ) | $spl12),
  inference(superposition,[],[f6448,f1387])).
fof(f6320,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f6065,f6311])).
fof(f6311,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ($spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f6309])).
fof(f6309,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),sK4) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ($spl2 | $spl6)),
  inference(superposition,[],[f251,f255])).
fof(f6065,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f249,f5314])).
fof(f5314,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(X0,fun(sK3,bool)),X1),s('type.semanticPrimitives.error_result'(X0),X2),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X3,fun(sK1,bool)),X4),s(fun(X0,fun(sK3,bool)),X1),s('type.semanticPrimitives.result'(X3,X0),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X0),X2))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl6),
  inference(superposition,[],[f230,f255])).
fof(f6319,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6318,f147])).
fof(f6318,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f6311,f258])).
fof(f6317,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6316,f147])).
fof(f6316,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f6315,f258])).
fof(f6315,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f6314,f3105])).
fof(f3105,plain,(
  s('type.semanticPrimitives.error_result'(sK3),sK8) = s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)) | $spl6),
  inference(unit_resulting_resolution,[],[f3055,f484])).
fof(f484,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X0))) | s('type.semanticPrimitives.error_result'(sK3),sK8) = s('type.semanticPrimitives.error_result'(sK3),X0)) ) | $spl6),
  inference(superposition,[],[f211,f255])).
fof(f3055,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1)))) | $spl6),
  inference(unit_resulting_resolution,[],[f357,f207])).
fof(f357,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rval_1'(s(sK1,X0)))) ) | $spl6),
  inference(superposition,[],[f213,f255])).
fof(f6314,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f6308,f255])).
fof(f6308,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK11(sK4,sK3,sK1))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f251,f3105])).
fof(f6313,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6312,f147])).
fof(f6312,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f6307,f258])).
fof(f6307,plain,(
  ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f255,f251])).
fof(f6064,plain,(
  ( ! [X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) | $spl20),
  inference(cnf_transformation,[],[f6064_D])).
fof(f6064_D,plain,(
  ( ! [X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f6062,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(subsumption_resolution,[],[f500,f1467])).
fof(f500,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) | s(bool,X0) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f400,f150])).
fof(f6026,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f6025,f256])).
fof(f6025,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f6024,f258])).
fof(f6024,plain,(
  s(bool,'F_0') = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f6023,f3214])).
fof(f3214,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(sK1,bool)),X1),s(fun(X2,fun(sK3,bool)),X3),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl6),
  inference(superposition,[],[f228,f255])).
fof(f6023,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) = s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(sK1,bool)),X1),s(fun(X2,fun(sK3,bool)),X3),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f5861,f5314])).
fof(f5861,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(sK1,bool)),X1),s(fun(X2,fun(sK3,bool)),X3),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rval_1'(s(X0,X4))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | ($spl1 | $spl4 | $spl6)),
  inference(unit_resulting_resolution,[],[f332,f3214,f1416])).
fof(f332,plain,(
  s(bool,'T_0') != s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | $spl1),
  inference(unit_resulting_resolution,[],[f250,f152])).
fof(f2642,plain,(
  ( ! [X24,X25] : (s(bool,X24) != s(bool,X25) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X25)) ) | $spl16),
  inference(cnf_transformation,[],[f2642_D])).
fof(f2642_D,plain,(
  ( ! [X24,X25] : (s(bool,X24) != s(bool,X25) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X25)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2619,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,X25) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | ($spl1 | $spl4)),
  inference(duplicate_literal_removal,[],[f2603])).
fof(f2603,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) != s(bool,X25) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,X25) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X23)) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f1847,f817])).
fof(f1847,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f1846,f147])).
fof(f1846,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | ($spl1 | $spl4)),
  inference(forward_demodulation,[],[f1754,f258])).
fof(f1754,plain,(
  ( ! [X21,X22] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X22) | s(bool,'F_0') = s(bool,X21)) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f276,f1388])).
fof(f1388,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl1 | $spl4)),
  inference(subsumption_resolution,[],[f1000,f332])).
fof(f1000,plain,(
  ( ! [X34] : (s(bool,'F_0') = s(bool,X34) | s(bool,X34) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f817,f331])).
fof(f331,plain,(
  s(bool,'F_0') = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))) | $spl1),
  inference(unit_resulting_resolution,[],[f250,f157])).
fof(f1575,plain,(
  $false | ($spl6 | $spl10)),
  inference(global_subsumption,[],[f1574,f146,f145,f144,f147,f149,f150,f153,f152,f157,f156,f196,f195,f194,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f228,f229,f230,f231,f256,f273,f276,f306,f368,f369,f394,f397,f398,f428,f429,f469,f471,f533,f587,f589,f591,f593,f648,f652,f917,f918,f919,f921,f684,f686,f688,f690,f930,f932,f934,f935,f937,f948,f1386,f1569,f1572])).
fof(f1572,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK9(X2,X1,X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f1541,f147])).
fof(f1541,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK9(X2,X1,X0))) ) | $spl10),
  inference(backward_demodulation,[],[f1386,f195])).
fof(f1569,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl10),
  inference(subsumption_resolution,[],[f1517,f1386])).
fof(f1517,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl10),
  inference(backward_demodulation,[],[f1386,f156])).
fof(f1574,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8)),X0,'type.semanticPrimitives.result'(sK1,sK3)))) ) | ($spl6 | $spl10)),
  inference(subsumption_resolution,[],[f1543,f147])).
fof(f1543,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8)),X0,'type.semanticPrimitives.result'(sK1,sK3)))) ) | ($spl6 | $spl10)),
  inference(backward_demodulation,[],[f1386,f373])).
fof(f373,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X0),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8)),X0,'type.semanticPrimitives.result'(sK1,sK3)))) ) | $spl6),
  inference(forward_demodulation,[],[f367,f255])).
fof(f367,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.semanticPrimitives.result'(sK1,sK3),bool),X0),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) = s('type.semanticPrimitives.result'(sK1,sK3),sK9('const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8)),X0,'type.semanticPrimitives.result'(sK1,sK3)))) ) | $spl6),
  inference(superposition,[],[f195,f255])).
fof(f1573,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f146,f145,f144,f147,f149,f150,f153,f152,f157,f156,f196,f195,f194,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f228,f229,f230,f231,f256,f273,f276,f306,f368,f369,f394,f397,f398,f428,f429,f469,f471,f533,f587,f589,f591,f593,f648,f652,f917,f918,f919,f921,f684,f686,f688,f690,f930,f932,f934,f935,f937,f948,f1386,f1569,f1572])).
fof(f1571,plain,(
  $false | ($spl1 | $spl10)),
  inference(global_subsumption,[],[f1527,f146,f145,f144,f147,f149,f150,f153,f152,f157,f156,f196,f195,f194,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f228,f229,f230,f231,f256,f273,f276,f306,f368,f369,f394,f397,f398,f428,f429,f469,f471,f533,f587,f589,f591,f593,f648,f652,f917,f918,f919,f921,f684,f686,f688,f690,f930,f932,f934,f935,f937,f948,f1386,f1569])).
fof(f1527,plain,(
  ( ! [X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f1386,f399])).
fof(f399,plain,(
  ( ! [X8,X9] : (s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,'F_0'))) != s('type.semanticPrimitives.result'(bool,X8),'const.semanticPrimitives.Rval_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) ) | $spl1),
  inference(superposition,[],[f209,f331])).
fof(f1570,plain,(
  $false | $spl10),
  inference(global_subsumption,[],[f146,f145,f144,f147,f149,f150,f153,f152,f157,f156,f196,f195,f194,f200,f197,f202,f207,f208,f210,f209,f212,f211,f213,f228,f229,f230,f231,f256,f273,f276,f306,f368,f369,f394,f397,f398,f428,f429,f469,f471,f533,f587,f589,f591,f593,f648,f652,f917,f918,f919,f921,f684,f686,f688,f690,f930,f932,f934,f935,f937,f948,f1386,f1569])).
fof(f1568,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f1516,f147])).
fof(f1516,plain,(
  ~p(s(bool,'T_0')) | $spl10),
  inference(backward_demodulation,[],[f1386,f149])).
fof(f1567,plain,(
  $false | ($spl1 | $spl10)),
  inference(trivial_inequality_removal,[],[f1528])).
fof(f1528,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))) ) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f1386,f407])).
fof(f407,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))) ) | $spl1),
  inference(forward_demodulation,[],[f393,f331])).
fof(f393,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))) != s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f332,f209])).
fof(f1566,plain,(
  $false | ($spl1 | $spl10)),
  inference(trivial_inequality_removal,[],[f1529])).
fof(f1529,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))) ) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f1386,f412])).
fof(f412,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f407,f209])).
fof(f1565,plain,(
  $false | ($spl1 | $spl10)),
  inference(trivial_inequality_removal,[],[f1532])).
fof(f1532,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0')))))))) ) | ($spl1 | $spl10)),
  inference(backward_demodulation,[],[f1386,f466])).
fof(f466,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X0),X1),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X0),'const.semanticPrimitives.Rval_1'(s(bool,'F_0')))))))) ) | $spl1),
  inference(unit_resulting_resolution,[],[f412,f209])).
fof(f1463,plain,(
  ( ! [X47,X48,X46] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X46))))) | s(bool,X46) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl14),
  inference(cnf_transformation,[],[f1463_D])).
fof(f1463_D,plain,(
  ( ! [X47,X48,X46] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X46))))) | s(bool,X46) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1297,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X46))))) | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | ($spl1 | $spl4)),
  inference(duplicate_literal_removal,[],[f1148])).
fof(f1148,plain,(
  ( ! [X47,X45,X48,X46] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X47),X48),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X47),'const.semanticPrimitives.Rval_1'(s(bool,X46))))) | s(bool,'T_0') = s(bool,X45) | s(bool,X46) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X45)) ) | ($spl1 | $spl4)),
  inference(superposition,[],[f467,f817])).
fof(f467,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,'T_0'))))) != s('type.semanticPrimitives.result'('type.semanticPrimitives.result'(bool,X1),X2),'const.semanticPrimitives.Rval_1'(s('type.semanticPrimitives.result'(bool,X1),'const.semanticPrimitives.Rval_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f412,f150])).
fof(f1385,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X17) = s(bool,X19) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl8),
  inference(cnf_transformation,[],[f1385_D])).
fof(f1385_D,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X17) = s(bool,X19) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1341,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X14) = s(bool,X16) | s(bool,X14) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f1017])).
fof(f1017,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X14) = s(bool,X16) | s(bool,X14) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X15)) ) | $spl4),
  inference(superposition,[],[f817,f817])).
fof(f1350,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X25) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) ) | $spl4),
  inference(duplicate_literal_removal,[],[f995])).
fof(f995,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X25) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X23)) ) | $spl4),
  inference(superposition,[],[f817,f817])).
fof(f1387,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X1)) ) | $spl12),
  inference(cnf_transformation,[],[f1387_D])).
fof(f1387_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1356,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f987])).
fof(f987,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl4),
  inference(superposition,[],[f817,f150])).
fof(f1364,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X17) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X17) = s(bool,X19)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f977])).
fof(f977,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X17) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8))) | s(bool,X17) = s(bool,X19)) ) | $spl4),
  inference(superposition,[],[f817,f817])).
fof(f249,plain,(
  p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | $spl0),
  inference(cnf_transformation,[],[f249_D])).
fof(f249_D,plain,(
  p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f255,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) | $spl6),
  inference(cnf_transformation,[],[f255_D])).
fof(f255_D,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f144,plain,(
  s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) | p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))))),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  (p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | (s('type.semanticPrimitives.result'(sK1,sK3),sK4) = s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),sK8))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))))) & (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | ! [X8] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),X8))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f102])).
fof(f102,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) | ? [X9] : (s('type.semanticPrimitives.result'(X1,X3),X4) = s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X9))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X9)))))) & (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) | ! [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) != s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8)))))))),
  inference(rectify,[],[f101])).
fof(f101,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) | ? [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) = s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8)))))) & (~p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) | ! [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) != s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8)))))))),
  inference(nnf_transformation,[],[f86])).
fof(f86,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) <~> ? [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) = s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) <=> ? [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) = s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8))))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X0,fun(X1,bool)),X7),s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.result'(X0,X2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X2),X5))),s('type.semanticPrimitives.result'(X1,X3),X4)))) <=> ? [X8] : (s('type.semanticPrimitives.result'(X1,X3),X4) = s('type.semanticPrimitives.result'(X1,X3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X3),X8))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X2,fun(X3,bool)),X6),s('type.semanticPrimitives.error_result'(X2),X5),s('type.semanticPrimitives.error_result'(X3),X8))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ! [X10,X11,X12,X13] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X13),s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X11))),s('type.semanticPrimitives.result'(X7,X9),X10)))) <=> ? [X14] : (s('type.semanticPrimitives.result'(X7,X9),X10) = s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X14))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.error_result'(X8),X11),s('type.semanticPrimitives.error_result'(X9),X14))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ! [X10,X11,X12,X13] : (p(s(bool,'const.evalProps.result_rel_4'(s(fun(X6,fun(X7,bool)),X13),s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.result'(X6,X8),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X8),X11))),s('type.semanticPrimitives.result'(X7,X9),X10)))) <=> ? [X14] : (s('type.semanticPrimitives.result'(X7,X9),X10) = s('type.semanticPrimitives.result'(X7,X9),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(X9),X14))) & p(s(bool,'const.evalProps.exc_rel_3'(s(fun(X8,fun(X9,bool)),X12),s('type.semanticPrimitives.error_result'(X8),X11),s('type.semanticPrimitives.error_result'(X9),X14))))))),
  file('thm.evalProps.result_rel_Rerr|49|','thm.evalProps.result_rel_Rerr|49|')).
fof(f253,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | $spl4),
  inference(cnf_transformation,[],[f253_D])).
fof(f253_D,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f145,plain,(
  p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),sK8)))) | p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))))),
  inference(cnf_transformation,[],[f103])).
fof(f250,plain,(
  ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) | $spl1),
  inference(cnf_transformation,[],[f250_D])).
fof(f250_D,plain,(
  ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f251,plain,(
  ( ! [X8] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),X8))))) ) | $spl2),
  inference(cnf_transformation,[],[f251_D])).
fof(f251_D,plain,(
  ( ! [X8] : (s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X8))) | ~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),X8))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f146,plain,(
  ( ! [X8] : (~p(s(bool,'const.evalProps.exc_rel_3'(s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.error_result'(sK2),sK5),s('type.semanticPrimitives.error_result'(sK3),X8)))) | s('type.semanticPrimitives.result'(sK1,sK3),sK4) != s('type.semanticPrimitives.result'(sK1,sK3),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK3),X8))) | ~p(s(bool,'const.evalProps.result_rel_4'(s(fun(sK0,fun(sK1,bool)),sK7),s(fun(sK2,fun(sK3,bool)),sK6),s('type.semanticPrimitives.result'(sK0,sK2),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'(sK2),sK5))),s('type.semanticPrimitives.result'(sK1,sK3),sK4))))) )),
  inference(cnf_transformation,[],[f103])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 221
% Passive clauses: 2617
% Generated clauses: 25256
% Final active clauses: 57
% Final passive clauses: 281
% Input formulas: 36
% Initial clauses: 88
% 
% Duplicate literals: 1129
% Trivial inequalities: 349
% Fw subsumption resolutions: 2346
% Fw demodulations: 3496
% Bw demodulations: 715
% Condensations: 1581
% Global subsumptions: 252
% 
% Simple tautologies: 377
% Equational tautologies: 216
% Forward subsumptions: 12281
% Fw demodulations to eq. taut.: 322
% Bw demodulations to eq. taut.: 115
% 
% Unit resulting resolution: 1107
% Factoring: 3
% Forward superposition: 6345
% Backward superposition: 6609
% Self superposition: 234
% Equality factoring: 179
% Equality resolution: 40
% 
% Split clauses: 58
% Split components: 123
% SAT solver clauses: 3244
% SAT solver unit clauses: 29
% SAT solver binary clauses: 397
% 
% Sat splits: 58
% Sat splitting refutations: 257
% 
% Memory used [KB]: 19829
% Time elapsed: 1.432 s
% ------------------------------
% ------------------------------
% Success in time 2.78 s
