Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exhProps
% (88307)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1064
% Passive clauses: 12515
% Generated clauses: 42628
% Final active clauses: 919
% Final passive clauses: 10561
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 523
% Trivial inequalities: 177
% Fw subsumption resolutions: 4014
% Fw demodulations: 5453
% Bw demodulations: 141
% 
% Simple tautologies: 328
% Equational tautologies: 77
% Forward subsumptions: 19307
% Fw demodulations to eq. taut.: 5
% 
% Binary resolution: 12978
% Factoring: 1451
% Forward superposition: 10713
% Backward superposition: 6672
% Self superposition: 56
% Equality factoring: 30
% Equality resolution: 32
% 
% Split clauses: 407
% Split components: 815
% SAT solver clauses: 865
% SAT solver unit clauses: 15
% SAT solver binary clauses: 126
% 
% Sat splits: 407
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 865
% TWLsolver calls for satisfiability: 548
% 
% Memory used [KB]: 18038
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exhProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exhProps
% SZS output start Proof for thm.exhProps
fof(f38481,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f38468,f298,f506,f669,f673,f303,f516,f374,f560,f36957,f36962,f11961,f11962,f310,f525,f6621,f11951,f297,f508,f377,f562,f378,f563])).
fof(f563,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3)))) ) | $spl84),
  inference(cnf_transformation,[],[f563_D])).
fof(f563_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f378,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3))) | s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3)))) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) != s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3))))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3))))),
  inference(flattening,[],[f142])).
fof(f142,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X5))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1),s('type.exhSem.state'(X0),X2),s('type.list.list'('type.exhLang.exp'),X3))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X5))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X3))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X17] : ! [X10,X9,X18,X8,X7] : (s('type.pair.prod'('type.exhSem.state'(X17),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X17),X8),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X17),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10),s('type.exhSem.state'(X17),X9),s('type.list.list'('type.exhLang.exp'),X18))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X7))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),X18))))),
  file('thm.exhProps.evaluate_sing|split|0','thm.exhProps.evaluate_length|split|0')).
fof(f562,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) ) | $spl82),
  inference(cnf_transformation,[],[f562_D])).
fof(f562_D,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f377,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))) )),
  inference(cnf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(flattening,[],[f140])).
fof(f140,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X2))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X21,X15] : s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X15))))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X21),s('type.list.list'(X6),X15)))))),
  file('thm.exhProps.evaluate_sing|split|0','thm.list.LENGTH|split|1')).
fof(f508,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK16),s('type.exhSem.state'(sK12),sK15),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',sK17),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) | $spl2),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK16),s('type.exhSem.state'(sK12),sK15),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',sK17),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f297,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK16),s('type.exhSem.state'(sK12),sK15),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',sK17),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0')))))),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) = s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK16),s('type.exhSem.state'(sK12),sK15),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',sK17),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) & ! [X6] : s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f179])).
fof(f179,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X2),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.exhSem.state'(X0),X3),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',X5),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) & ! [X6] : s('type.list.list'('type.exhSem.v'),X1) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f81])).
fof(f81,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X2),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.exhSem.state'(X0),X3),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',X5),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) => ? [X6] : s('type.list.list'('type.exhSem.v'),X1) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X0),X2),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) = s('type.pair.prod'('type.exhSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.exhSem.state'(X0),X3),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',X5),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) => ? [X6] : s('type.list.list'('type.exhSem.v'),X1) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X6),X8),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10),s('type.exhSem.state'(X6),X9),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',X11),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) => ? [X12] : s('type.list.list'('type.exhSem.v'),X7) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X12),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : (s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(X6),X8),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X7))))) = s('type.pair.prod'('type.exhSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.exhSem.evaluate_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X10),s('type.exhSem.state'(X6),X9),s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',X11),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) => ? [X12] : s('type.list.list'('type.exhSem.v'),X7) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X12),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))))),
  file('thm.exhProps.evaluate_sing|split|0','thm.exhProps.evaluate_sing|split|0')).
fof(f11951,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1)))))) ) | $spl3154),
  inference(cnf_transformation,[],[f11951_D])).
fof(f11951_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1)))))) ) <=> ~$spl3154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3154])])).
fof(f6621,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1))) = s('type.num.num','const.num.SUC_1'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1)))))) ) | ($spl2 | $spl82 | $spl84)),
  inference(forward_demodulation,[],[f6618,f562])).
fof(f6618,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhLang.exp'),'const.list.CONS_2'(s('type.exhLang.exp',sK17),s('type.list.list'('type.exhLang.exp'),'const.list.NIL_0')))))) ) | ($spl2 | $spl84)),
  inference(superposition,[],[f563,f508])).
fof(f525,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f525_D])).
fof(f525_D,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f310,plain,(
  ( ! [X0] : (s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),'const.list.NIL_0')))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : s('type.num.num','const.num.|48|_0') = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),'const.list.NIL_0')))),
  file('thm.exhProps.evaluate_sing|split|0','thm.list.LENGTH|split|0')).
fof(f11962,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1)))) ) | $spl3158),
  inference(cnf_transformation,[],[f11962_D])).
fof(f11962_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1)))) ) <=> ~$spl3158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3158])])).
fof(f11961,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),X1))) | s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),sK14),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),sK13))))) != s('type.pair.prod'('type.exhSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v')),'const.pair.,_2'(s('type.exhSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.exhSem.v'),'type.exhSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.exhSem.v'),X1)))))) ) | ($spl16 | $spl3154)),
  inference(forward_demodulation,[],[f11951,f525])).
fof(f36962,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) | $spl5478),
  inference(cnf_transformation,[],[f36962_D])).
fof(f36962_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) <=> ~$spl5478),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5478])])).
fof(f36957,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.exhSem.v'),sK13))) | $spl3158),
  inference(equality_resolution,[],[f11962])).
fof(f560,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl78),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f374,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X22] : (s('type.list.list'(X6),X22) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.HD_1'(s('type.list.list'(X6),X22))),s('type.list.list'(X6),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X22))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  file('thm.exhProps.evaluate_sing|split|0','thm.misc.SING_HD|split|0')).
fof(f516,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl10),
  inference(cnf_transformation,[],[f516_D])).
fof(f516_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f303,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.exhProps.evaluate_sing|split|0','thm.numeral.numeral_distrib|split|13')).
fof(f673,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl272),
  inference(cnf_transformation,[],[f673_D])).
fof(f673_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f669,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl10 | $spl78)),
  inference(backward_demodulation,[],[f516,f560])).
fof(f506,plain,(
  ( ! [X6] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  ( ! [X6] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f298,plain,(
  ( ! [X6] : (s('type.list.list'('type.exhSem.v'),sK13) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f226])).
fof(f38468,plain,(
  $false | ($spl0 | $spl272 | $spl5478)),
  inference(subsumption_resolution,[],[f38467,f506])).
fof(f38467,plain,(
  s('type.list.list'('type.exhSem.v'),sK13) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK13))),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl5478)),
  inference(trivial_inequality_removal,[],[f38291])).
fof(f38291,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'('type.exhSem.v'),sK13) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v','const.list.HD_1'(s('type.list.list'('type.exhSem.v'),sK13))),s('type.list.list'('type.exhSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl5478)),
  inference(superposition,[],[f673,f36962])).
% SZS output end Proof for thm.exhProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1146
% Passive clauses: 3835
% Generated clauses: 40244
% Final active clauses: 756
% Final passive clauses: 1770
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 239
% Trivial inequalities: 209
% Fw subsumption resolutions: 2231
% Fw demodulations: 3974
% Bw demodulations: 1139
% Condensations: 233
% Global subsumptions: 13
% 
% Simple tautologies: 258
% Equational tautologies: 20
% Forward subsumptions: 25051
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 15
% 
% Binary resolution: 3127
% Factoring: 306
% Forward superposition: 6388
% Backward superposition: 16901
% Self superposition: 74
% Equality factoring: 26
% Equality resolution: 17
% 
% Split clauses: 69
% Split components: 138
% SAT solver clauses: 3720
% SAT solver unit clauses: 257
% SAT solver binary clauses: 91
% SAT solver learnt clauses: 36
% SAT solver learnt literals: 24
% 
% Sat splits: 69
% Sat splitting refutations: 109
% 
% TWLsolver clauses: 3658
% TWLsolver calls for satisfiability: 1889
% 
% Memory used [KB]: 22771
% Time elapsed: 0.592 s
% ------------------------------
% ------------------------------
% Success in time 1.21 s
