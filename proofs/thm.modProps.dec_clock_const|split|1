Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f2745,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f2744])).
fof(f2744,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1)))),
  inference(superposition,[],[f155,f2159])).
fof(f2159,plain,(
  ( ! [X2,X3] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X2),X3))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X2),'const.modSem.dec_clock_1'(s('type.modSem.state'(X2),X3)))))) )),
  inference(superposition,[],[f188,f175])).
fof(f175,plain,(
  ( ! [X0,X1] : (s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.modSem.state'(X0),X1)))) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1] : s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.modSem.state'(X0),X1)))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1] : s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1))) = s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X0),X1))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.modSem.state'(X0),X1)))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6] : ! [X7] : s('type.modSem.state'(X6),'const.modSem.dec_clock_1'(s('type.modSem.state'(X6),X7))) = s('type.modSem.state'(X6),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.modSem.state_clock_1'(s('type.modSem.state'(X6),X7))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.modSem.state'(X6),X7)))),
  file('thm.modProps.dec_clock_const|split|1','thm.modSem.dec_clock_def')).
fof(f188,plain,(
  ( ! [X2,X0,X1] : (s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0,X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f84])).
fof(f84,plain,(
  ! [X0] : ! [X1,X2] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f35])).
fof(f35,axiom,(
  ! [X11] : ! [X7,X12] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X11),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X11),'const.modSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.modSem.state'(X11),X7)))))),
  file('thm.modProps.dec_clock_const|split|1','thm.modSem.modSem_83_prove_ltb')).
fof(f155,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.dec_clock_1'(s('type.modSem.state'(sK0),sK1)))))),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),sK1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(sK0),'const.modSem.dec_clock_1'(s('type.modSem.state'(sK0),sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f140])).
fof(f140,plain,(
  ? [X0,X1] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) != s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f53])).
fof(f53,plain,(
  ~! [X0,X1] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1)))))),
  inference(flattening,[],[f52])).
fof(f52,plain,(
  ~! [X0] : ! [X1] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),X1))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X0),'const.modSem.dec_clock_1'(s('type.modSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.dec_clock_1'(s('type.modSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),X7))) = s(fun('type.list.list'('type.string.char'),bool),'const.modSem.state_defined_mods_1'(s('type.modSem.state'(X6),'const.modSem.dec_clock_1'(s('type.modSem.state'(X6),X7)))))),
  file('thm.modProps.dec_clock_const|split|1','thm.modProps.dec_clock_const|split|1')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 59
% Passive clauses: 521
% Generated clauses: 2485
% Final active clauses: 57
% Final passive clauses: 450
% Input formulas: 50
% Initial clauses: 61
% 
% Duplicate literals: 292
% Trivial inequalities: 32
% Fw subsumption resolutions: 100
% 
% Simple tautologies: 102
% Equational tautologies: 81
% Forward subsumptions: 989
% 
% Binary resolution: 12
% Forward superposition: 718
% Backward superposition: 826
% Self superposition: 225
% Equality factoring: 202
% Equality resolution: 1
% 
% Split clauses: 118
% Split components: 236
% SAT solver clauses: 376
% SAT solver unit clauses: 210
% SAT solver binary clauses: 74
% 
% Sat splits: 118
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 376
% TWLsolver calls for satisfiability: 16
% 
% Memory used [KB]: 1791
% Time elapsed: 0.160 s
% ------------------------------
% ------------------------------
% Success in time 0.17 s
