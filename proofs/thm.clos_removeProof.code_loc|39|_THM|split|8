Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_removeProof
% (44176)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 102
% Passive clauses: 1515
% Generated clauses: 11933
% Final active clauses: 97
% Final passive clauses: 1254
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 676
% Trivial inequalities: 158
% Fw subsumption resolutions: 1158
% Fw demodulations: 1824
% Bw demodulations: 3
% 
% Simple tautologies: 222
% Equational tautologies: 23
% Forward subsumptions: 5720
% 
% Binary resolution: 6
% Forward superposition: 4539
% Backward superposition: 3186
% Self superposition: 164
% Equality factoring: 66
% Equality resolution: 21
% 
% Split clauses: 233
% Split components: 480
% SAT solver clauses: 566
% SAT solver unit clauses: 31
% SAT solver binary clauses: 126
% 
% Sat splits: 233
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 563
% TWLsolver calls for satisfiability: 85
% 
% Memory used [KB]: 10618
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_removeProof
% SZS output start Proof for thm.clos_removeProof
fof(f15719,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f15711,f215,f217,f92,f130,f211,f214,f96,f137,f110,f149,f10793,f10805,f10265,f10358,f225,f226,f182,f196,f114,f153,f118,f157,f10768,f10769,f109,f148,f227,f228,f181,f195,f119,f158,f2175,f2176])).
fof(f2176,plain,(
  ( ! [X10,X11,X9] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X10))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | $spl374),
  inference(cnf_transformation,[],[f2176_D])).
fof(f2176_D,plain,(
  ( ! [X10,X11,X9] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X10))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl374),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl374])])).
fof(f2175,plain,(
  ( ! [X10,X11,X9] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X10))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | ($spl30 | $spl112)),
  inference(forward_demodulation,[],[f2157,f214])).
fof(f2157,plain,(
  ( ! [X10,X11,X9] : (s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X11))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X10))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.closLang.exp'),X10))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | ($spl30 | $spl112)),
  inference(superposition,[],[f214,f148])).
fof(f158,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | $spl50),
  inference(cnf_transformation,[],[f158_D])).
fof(f158_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f119,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X13,X6,X12] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X13),s('type.list.list'('type.closLang.exp'),X6))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X13),s('type.list.list'('type.closLang.exp'),X6))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.closProps.code_locs_def|split|1')).
fof(f195,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | $spl92),
  inference(cnf_transformation,[],[f195_D])).
fof(f195_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f181,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | ($spl40 | $spl50)),
  inference(backward_demodulation,[],[f153,f158])).
fof(f228,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2)))))) ) | $spl122),
  inference(cnf_transformation,[],[f228_D])).
fof(f228_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2)))))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f227,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2)))))) ) | ($spl8 | $spl92)),
  inference(forward_demodulation,[],[f195,f137])).
fof(f148,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) ) | $spl30),
  inference(cnf_transformation,[],[f148_D])).
fof(f148_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f109,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X17] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X17),s('type.list.list'('type.closLang.exp'),X6))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.closProps.code_locs_def|split|7')).
fof(f10769,plain,(
  ( ! [X14,X13] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X14),s('type.list.list'('type.closLang.exp'),X13))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X13))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X14)))))) ) | $spl1508),
  inference(cnf_transformation,[],[f10769_D])).
fof(f10769_D,plain,(
  ( ! [X14,X13] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X14),s('type.list.list'('type.closLang.exp'),X13))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X13))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X14)))))) ) <=> ~$spl1508),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1508])])).
fof(f10768,plain,(
  ( ! [X14,X13] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X14),s('type.list.list'('type.closLang.exp'),X13))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X13))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X14)))))) ) | ($spl30 | $spl122 | $spl374)),
  inference(forward_demodulation,[],[f10708,f2176])).
fof(f10708,plain,(
  ( ! [X14,X12,X13] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X14),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X12),s('type.list.list'('type.closLang.exp'),X13))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X13))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X14)))))) ) | ($spl30 | $spl122)),
  inference(superposition,[],[f228,f148])).
fof(f157,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | $spl48),
  inference(cnf_transformation,[],[f157_D])).
fof(f157_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f118,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X6,X7,X8] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X8),s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.closProps.code_locs_def|split|8')).
fof(f153,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))) ) | $spl40),
  inference(cnf_transformation,[],[f153_D])).
fof(f153_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f114,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X9,X10] : ! [X11,X12] : s(X9,'const.bool.LET_2'(s(fun(X10,X9),X11),s(X10,X12))) = s(X9,happ(s(fun(X10,X9),X11),s(X10,X12)))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.bool.LET_THM')).
fof(f196,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | $spl94),
  inference(cnf_transformation,[],[f196_D])).
fof(f196_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f182,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) ) | ($spl40 | $spl48)),
  inference(backward_demodulation,[],[f153,f157])).
fof(f226,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) ) | $spl120),
  inference(cnf_transformation,[],[f226_D])).
fof(f226_D,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f225,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) ) | ($spl8 | $spl94)),
  inference(forward_demodulation,[],[f196,f137])).
fof(f10358,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X5))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X4)))))) ) | $spl1434),
  inference(cnf_transformation,[],[f10358_D])).
fof(f10358_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X5))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X4)))))) ) <=> ~$spl1434),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1434])])).
fof(f10265,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X5))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X4)))))) ) | ($spl8 | $spl120)),
  inference(superposition,[],[f226,f137])).
fof(f10805,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5)))))) ) | $spl1528),
  inference(cnf_transformation,[],[f10805_D])).
fof(f10805_D,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5)))))) ) <=> ~$spl1528),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1528])])).
fof(f10793,plain,(
  ( ! [X4,X5,X3] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5))))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X3),s('type.closLang.exp',X4),s('type.list.list'('type.closLang.exp'),X5)))))) ) | ($spl1434 | $spl1508)),
  inference(backward_demodulation,[],[f10769,f10358])).
fof(f149,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) ) | $spl32),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f110,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X12,X6] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X6))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.closProps.code_locs_cons')).
fof(f137,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) ) | $spl8),
  inference(cnf_transformation,[],[f137_D])).
fof(f137_D,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f96,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X12] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X12))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.clos_removeProof.code_loc|39|_def')).
fof(f214,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) ) | $spl112),
  inference(cnf_transformation,[],[f214_D])).
fof(f214_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f211,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) ) | ($spl8 | $spl32)),
  inference(backward_demodulation,[],[f137,f149])).
fof(f130,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0))))) | $spl1),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f92,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0)))))),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f87])).
fof(f87,plain,(
  ? [X0,X1,X2] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X2),s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X8),s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X7))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),X8),s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X7))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|8','thm.clos_removeProof.code_loc|39|_THM|split|8')).
fof(f217,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) | $spl115),
  inference(cnf_transformation,[],[f217_D])).
fof(f217_D,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) <=> ~$spl115),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl115])])).
fof(f215,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.App_3'(s('type.option.option'('type.num.num'),sK2),s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) | ($spl1 | $spl112)),
  inference(backward_demodulation,[],[f214,f130])).
fof(f15711,plain,(
  $false | ($spl115 | $spl1528)),
  inference(trivial_inequality_removal,[],[f15677])).
fof(f15677,plain,(
  s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) | ($spl115 | $spl1528)),
  inference(superposition,[],[f217,f10805])).
% SZS output end Proof for thm.clos_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 110
% Passive clauses: 945
% Generated clauses: 15420
% Final active clauses: 105
% Final passive clauses: 771
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 713
% Trivial inequalities: 175
% Fw subsumption resolutions: 684
% Fw demodulations: 2425
% Bw demodulations: 65
% Condensations: 1246
% 
% Simple tautologies: 200
% Equational tautologies: 24
% Forward subsumptions: 7585
% 
% Binary resolution: 6
% Forward superposition: 5182
% Backward superposition: 3640
% Self superposition: 200
% Equality factoring: 78
% Equality resolution: 18
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 1460
% SAT solver unit clauses: 68
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 1
% 
% Sat splits: 6
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1459
% TWLsolver calls for satisfiability: 143
% 
% Memory used [KB]: 26353
% Time elapsed: 0.627 s
% ------------------------------
% ------------------------------
% Success in time 1.25 s
