Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordSem
% (63907)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 168
% Passive clauses: 2576
% Generated clauses: 18915
% Final active clauses: 165
% Final passive clauses: 2253
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 542
% Trivial inequalities: 745
% Fw subsumption resolutions: 1427
% Fw demodulations: 4382
% Bw demodulations: 3
% 
% Simple tautologies: 253
% Equational tautologies: 21
% Forward subsumptions: 8891
% 
% Binary resolution: 165
% Forward superposition: 5972
% Backward superposition: 5462
% Self superposition: 102
% Equality factoring: 39
% Equality resolution: 18
% 
% Split clauses: 78
% Split components: 161
% SAT solver clauses: 233
% SAT solver unit clauses: 10
% SAT solver binary clauses: 85
% 
% Sat splits: 78
% 
% TWLsolver clauses: 233
% TWLsolver calls for satisfiability: 66
% 
% Memory used [KB]: 15735
% Time elapsed: 0.607 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordSem
% SZS output start Proof for thm.wordSem
fof(f939,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f938,f596,f599,f71,f98,f93,f115])).
fof(f115,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) ) | $spl30),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f93,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3))))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),sK9(X3,X2,X1,X0)),s(fun('type.num.num',fun('type.num.num','type.num.num')),sK10(X3,X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10])],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6,X7] : ! [X8,X9] : ? [X20,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),X20),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X8),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X7,X6),X9)))))),
  file('thm.wordSem.wordSem_48|48|_prove_ltb','thm.wordSem.wordSem_47|48|_prove_ltb')).
fof(f98,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) ) | $spl0),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f71,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),X4),s(fun('type.num.num',fun('type.num.num','type.num.num')),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X1)),X2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X1,X0),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),X10),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X8),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X7,X6),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),X10),s(fun('type.num.num',fun('type.num.num','type.num.num')),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(X7))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(X7)),X8),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(X7,X6),X9)))))),
  file('thm.wordSem.wordSem_48|48|_prove_ltb','thm.wordSem.wordSem_48|48|_prove_ltb')).
fof(f599,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X0)))))) ) | $spl202),
  inference(cnf_transformation,[],[f599_D])).
fof(f599_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X0)))))) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f596,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),sK2),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,sK0),sK3))))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.num.num','type.wordSem.word_loc'(sK1))),fun('type.num.num',fun('type.num.num','type.num.num'))),'const.wordSem.env_to_list_2'(s('type.sptree.spt'('type.wordSem.word_loc'(sK1)),X1),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.wordSem.state_permute_1'(s('type.wordSem.state'(sK1,X2),X0)))))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f98,f115])).
fof(f938,plain,(
  $false | $spl202),
  inference(equality_resolution,[],[f599])).
% SZS output end Proof for thm.wordSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 44
% Passive clauses: 114
% Generated clauses: 852
% Final active clauses: 43
% Final passive clauses: 70
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 4
% Trivial inequalities: 66
% Fw subsumption resolutions: 33
% Fw demodulations: 128
% Bw demodulations: 1
% 
% Simple tautologies: 17
% Equational tautologies: 3
% Forward subsumptions: 348
% 
% Binary resolution: 13
% Forward superposition: 201
% Backward superposition: 240
% Self superposition: 17
% Equality factoring: 2
% Equality resolution: 6
% 
% SAT solver clauses: 165
% SAT solver unit clauses: 39
% SAT solver binary clauses: 20
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 164
% TWLsolver calls for satisfiability: 104
% 
% Memory used [KB]: 3454
% Time elapsed: 0.063 s
% ------------------------------
% ------------------------------
% Success in time 0.683 s
