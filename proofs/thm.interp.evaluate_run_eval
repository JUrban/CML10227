Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.interp
% (52990)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 676
% Passive clauses: 10195
% Generated clauses: 18952
% Final active clauses: 608
% Final passive clauses: 8959
% Input formulas: 46
% Initial clauses: 160
% 
% Duplicate literals: 340
% Trivial inequalities: 82
% Fw subsumption resolutions: 1571
% Fw demodulations: 106
% Bw demodulations: 67
% 
% Simple tautologies: 182
% Equational tautologies: 64
% Forward subsumptions: 6113
% 
% Binary resolution: 11872
% Factoring: 1163
% Forward superposition: 2169
% Backward superposition: 1129
% Self superposition: 24
% Equality factoring: 26
% Equality resolution: 36
% 
% Split clauses: 349
% Split components: 704
% SAT solver clauses: 728
% SAT solver unit clauses: 18
% SAT solver binary clauses: 206
% 
% Sat splits: 349
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 726
% TWLsolver calls for satisfiability: 441
% 
% Memory used [KB]: 9594
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.interp
% (53016)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 464
% Passive clauses: 2042
% Generated clauses: 14121
% Final active clauses: 363
% Final passive clauses: 1177
% Input formulas: 46
% Initial clauses: 160
% 
% Duplicate literals: 464
% Trivial inequalities: 58
% Fw subsumption resolutions: 1260
% Fw demodulations: 503
% Bw demodulations: 445
% Condensations: 453
% Global subsumptions: 13
% 
% Simple tautologies: 259
% Equational tautologies: 32
% Forward subsumptions: 6409
% Bw demodulations to eq. taut.: 8
% 
% Binary resolution: 3062
% Factoring: 101
% Forward superposition: 2382
% Backward superposition: 2934
% Self superposition: 75
% Equality factoring: 34
% Equality resolution: 11
% 
% Split clauses: 125
% Split components: 251
% SAT solver clauses: 2650
% SAT solver unit clauses: 169
% SAT solver binary clauses: 70
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 11
% 
% Sat splits: 125
% Sat splitting refutations: 18
% 
% TWLsolver clauses: 2597
% TWLsolver calls for satisfiability: 1639
% 
% Memory used [KB]: 12281
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.interp
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.interp
% SZS output start Proof for thm.interp
fof(f31094,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f245,f414,f412,f244,f413,f411,f1902,f1906,f1909,f1912,f1915,f1916,f1918,f1919,f1921,f1924,f1927,f1930,f1931,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1982,f1903,f1984,f1907,f1986,f1910,f1988,f1913,f1991,f1994,f1996,f1922,f1998,f1925,f2000,f1928,f2003,f2005,f1934,f2007,f1937,f2009,f1940,f2011,f1943,f2013,f1946,f2015,f1949,f2017,f1952,f2053,f2054,f2058,f2062,f2066,f2419,f2422,f2420,f2446,f2449,f2447,f2602,f2603,f2610,f2607,f2604,f2605,f2613,f2606,f2615,f2608,f2612,f2782,f2824,f2859,f2870,f2871,f2879,f2872,f2873,f2882,f2874,f2884,f3062,f3063,f3064,f3065,f3066,f3067,f2883,f3072,f3111,f3073,f3114,f3077,f3118,f3078,f3119,f3079,f3120,f3080,f3121,f3081,f3122,f3082,f3123,f3083,f3124,f3084,f3125,f3085,f3126,f3086,f3127,f3087,f3128,f3089,f3129,f3090,f3130,f3091,f3131,f3092,f3132,f3093,f3133,f3094,f3134,f3095,f3135,f3096,f3113,f3136,f3097,f3098,f3099,f3106,f2881,f3100,f2878,f2877,f3102,f3139,f3103,f3112,f3141,f7617,f7601,f7589,f7632,f7631,f7583,f7574,f7625,f7685,f7687,f7744,f7856,f7857,f7858,f7862,f7864,f7868,f7872,f7873,f10194,f10195,f10208,f13122,f11761,f13131,f13110,f13100,f13099,f13132,f13094,f13093,f13084,f13130,f13082,f13138,f13165,f13166,f13063,f13137,f13167,f13168,f13042,f13195,f13353,f13354,f13362,f13367,f13370,f13373,f13378,f13379,f13383,f13384,f2857,f13388,f13677,f13679,f13683,f13685,f13689,f13691,f13693,f13695,f13705,f13707,f13717,f13719,f13730,f13741,f13747,f13753,f13763,f13765,f13802,f13804,f13807,f13809,f13812,f13814,f13817,f13819,f13825,f13827,f13835,f13837,f13844,f13846,f13875,f13880,f13883,f13885,f13898,f13900,f13904,f13908,f13910,f13912,f13920,f13925,f13928,f13930,f13939,f13944,f13947,f13949,f14034,f14042,f14051,f14059,f14061,f14070,f14078,f14087,f14095,f14097,f14099,f14101,f14103,f14636,f14637,f14121,f14123,f14130,f14137,f14170,f14172,f14174,f14211,f14213,f14215,f14217,f14227,f14229,f14231,f14243,f14245,f14257,f14259,f14271,f14273,f14285,f14287,f14295,f14303,f14322,f14324,f14326,f14328,f14340,f14342,f14344,f14346,f14348,f14378,f14380,f14382,f14384,f14386,f14407,f14409,f14430,f14432,f14445,f14447,f14460,f14462,f14464,f14477,f14489,f14501,f14503,f14515,f14517,f14525,f14533,f14542,f14550,f14562,f14564,f14566,f14568,f14570,f14582,f14584,f14586,f14588,f14590,f14592,f14594,f14601,f14608,f14610,f14612,f14618,f14620,f14638,f14639,f14640,f14641,f14642,f14643,f14644,f14645,f14646,f14647,f14648,f14649,f14650,f14651,f14652,f14653,f14654,f14655,f14656,f14657,f14658,f14659,f14660,f14661,f14662,f14663,f14664,f14665,f14666,f14667,f14668,f14669,f14670,f14671,f14672,f14673,f14674,f14675,f14676,f14677,f14678,f14679,f14680,f14681,f14682,f14683,f14684,f14685,f14686,f14687,f14688,f14689,f14690,f14691,f14692,f14693,f14694,f14695,f14696,f14697,f14698,f14699,f14700,f14701,f14702,f14703,f14704,f14705,f14706,f14707,f14708,f14709,f14710,f14711,f14712,f14713,f14714,f14715,f14716,f14717,f14718,f14719,f14724,f14725,f14726,f14727,f14728,f14729,f14730,f14731,f14732,f14733,f14734,f14735,f14736,f14737,f14738,f14739,f14740,f14741,f14742,f14743,f14744,f14745,f14746,f14747,f14748,f14749,f14750,f14751,f14752,f14753,f14754,f14755,f14756,f14757,f14758,f14759,f14760,f14761,f14762,f14763,f14764,f14765,f14766,f14767,f14768,f14769,f14770,f14771,f14772,f14773,f14774,f14775,f14776,f14777,f14778,f14779,f14780,f14781,f14782,f14783,f14784,f14785,f14786,f14787,f14788,f14789,f14790,f14791,f14792,f14793,f14794,f14795,f14796,f14797,f14798,f14799,f14800,f14801,f14802,f14803,f14804,f14805,f14806,f14807,f14808,f14809,f14810,f14811,f14812,f14813,f14814,f14815,f14816,f14817,f20642,f20645,f20643,f20658,f20659,f20660,f20661,f20662,f20663,f20664,f20665,f20666,f20667,f20668,f20669,f20670,f20671,f20672,f20673,f20674,f20675,f20676,f20677,f20678,f20679,f20680,f20681,f20682,f20683,f20684,f20685,f20686,f20687,f20688,f20689,f20690,f20691,f20692,f20693,f20694,f20695,f20696,f20697,f20698,f20699,f20700,f20701,f20703,f20704,f20706,f20707,f20708,f20710,f20711,f20712,f20713,f20714,f20715,f20716,f20717,f20718,f20719,f20720,f20721,f20722,f20723,f20724,f20725,f20726,f20727,f20728,f20729,f20730,f20731,f20732,f20733,f20735,f20758,f20770,f21511,f21545,f21581,f21583,f21616,f21618,f21651,f21653,f21654,f21655,f21656,f21657,f21658,f21659,f21660,f21661,f21662,f21663,f21664,f21665,f21666,f21667,f21668,f21669,f21670,f21671,f21672,f21673,f21674,f21675,f21676,f21677,f21678,f21679,f21680,f21681,f21682,f21684,f21685,f21828,f21829,f21831,f21835,f21839,f21841,f21843,f21847,f21849,f21853,f21857,f21859,f21863,f21867,f21869,f21871,f21873,f21875,f21877,f21884,f21887,f21889,f21891,f21893,f21895,f22727,f22728,f22729,f22731,f22732,f22737,f22738,f22743,f22744,f22745,f22746,f22747,f22748,f22752,f22753,f22754,f22755,f22756,f22757,f22758,f22759,f22760,f22761,f22762,f22763,f22768,f22769,f22770,f22771,f22776,f22777,f22778,f22779,f22780,f22793,f22794,f22803,f22804,f22809,f22810,f22811,f22812,f22813,f22814,f22815,f22816,f22817,f22818,f22819,f22820,f22821,f22822,f22837,f22838,f22839,f22840,f22855,f22856,f22857,f22858,f22873,f22874,f22875,f22876,f22877,f22878,f22879,f22880,f22881,f22882,f22883,f22884,f22885,f22886,f22887,f22888,f22889,f22890,f22891,f22892,f22893,f22894,f22895,f22896,f22897,f22898,f22899,f22900,f22901,f22902,f22903,f22904,f22905,f22906,f22907,f22908,f22909,f22910,f22911,f22914,f22917,f23675,f23695,f10209,f23719,f23754,f23756,f23807,f23808,f23817,f23816,f25440,f25442,f25485,f25487,f25593,f25605,f25606,f25611,f25641,f25653,f25654,f25659,f25727,f25783,f25835,f26492,f26495,f26497,f26496,f28743,f28744,f28823,f28824,f30820,f30804,f30789,f30841,f30784,f30775,f30828,f30886,f30887,f30888,f30889,f30907,f30908,f7686,f30740,f30977,f1904,f31088,f31091])).
fof(f31091,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f31090,f414])).
fof(f31090,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | $spl0),
  inference(subsumption_resolution,[],[f31075,f246])).
fof(f246,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.interp.evaluate_run_eval','thm.bool.TRUTH')).
fof(f31075,plain,(
  ~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | $spl0),
  inference(superposition,[],[f5467,f2620])).
fof(f2620,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f305,f316])).
fof(f316,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X11,X12] : ((p(s(bool,X11)) => p(s(bool,X12))) => ((p(s(bool,X12)) => p(s(bool,X11))) => s(bool,X11) = s(bool,X12)))),
  file('thm.interp.evaluate_run_eval','thm.bool.IMP_ANTISYM_AX')).
fof(f305,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f86])).
fof(f86,plain,(
  ! [X0,X1,X2,X3] : p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))))))),
  inference(flattening,[],[f85])).
fof(f85,plain,(
  ! [X0] : ! [X1,X2,X3] : p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X18] : ! [X7,X8,X10] : p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X10),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X18),X10))))))),
  file('thm.interp.evaluate_run_eval','thm.interp.run_eval|split|0')).
fof(f5467,plain,(
  ( ! [X0] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)))) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | $spl0),
  inference(subsumption_resolution,[],[f5401,f246])).
fof(f5401,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)))) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | $spl0),
  inference(superposition,[],[f310,f2889])).
fof(f2889,plain,(
  s(bool,'T_0') = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl0),
  inference(unit_resulting_resolution,[],[f246,f411,f316])).
fof(f310,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5)))) | ! [X6] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))),
  inference(ennf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5)))) => ! [X6] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5)))) => ! [X6] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X18] : ! [X19,X7,X20,X8,X21] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X21)))) => ! [X22] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X21) = s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22)))),
  file('thm.interp.evaluate_run_eval','thm.determ.big_exp_determ|split|0')).
fof(f31088,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f31087,f246])).
fof(f31087,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f31062,f2620])).
fof(f31062,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14)))))) | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f414,f5467])).
fof(f1904,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f1904_D])).
fof(f1904_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f30977,plain,(
  ( ! [X1540,X1542] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s(bool,X1540) = s(bool,X1542) | s(bool,X1542) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1542),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl176),
  inference(cnf_transformation,[],[f30977_D])).
fof(f30977_D,plain,(
  ( ! [X1540,X1542] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s(bool,X1540) = s(bool,X1542) | s(bool,X1542) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1542),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f30740,plain,(
  ( ! [X1540,X1542,X1541] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s(bool,'T_0') = s(bool,X1541) | s(bool,X1542) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1542),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X1540) = s(bool,X1542)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f30218])).
fof(f30218,plain,(
  ( ! [X1540,X1542,X1541] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s(bool,'T_0') = s(bool,X1541) | s(bool,'T_0') = s(bool,X1541) | s(bool,X1542) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1542),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X1540) = s(bool,X1542)) ) | $spl0),
  inference(superposition,[],[f2997,f5391])).
fof(f5391,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f2889,f540])).
fof(f540,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f253,f253])).
fof(f253,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.interp.evaluate_run_eval',aHL_BOOL_CASES)).
fof(f2997,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f411,f540])).
fof(f7686,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) | $spl124),
  inference(cnf_transformation,[],[f7686_D])).
fof(f7686_D,plain,(
  ( ! [X2] : (p(s(bool,X2))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f30908,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,X3) = s(bool,'const.bigStep.evaluate_5'(s(bool,X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl174),
  inference(cnf_transformation,[],[f30908_D])).
fof(f30908_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,X3) = s(bool,'const.bigStep.evaluate_5'(s(bool,X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f30907,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,X3) = s(bool,'const.bigStep.evaluate_5'(s(bool,X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29462,f260])).
fof(f260,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f172])).
fof(f172,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.interp.evaluate_run_eval','thm.bool.EQ_CLAUSES|split|1')).
fof(f29462,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,X3) = s(bool,'const.bigStep.evaluate_5'(s(bool,X3),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f260,f5391])).
fof(f30889,plain,(
  ( ! [X159,X157,X160] : (sP1(X157,X159) | s(bool,X157) = s(bool,'const.bigStep.evaluate_5'(s(bool,X157),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X160) | s(bool,X159) = s(bool,X160)) ) | $spl172),
  inference(cnf_transformation,[],[f30889_D])).
fof(f30889_D,plain,(
  ( ! [X159,X157,X160] : (sP1(X157,X159) | s(bool,X157) = s(bool,'const.bigStep.evaluate_5'(s(bool,X157),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X160) | s(bool,X159) = s(bool,X160)) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f30888,plain,(
  ( ! [X158,X159,X157,X160] : (p(s(bool,X158)) | sP1(X157,X159) | s(bool,X159) = s(bool,X160) | s(bool,'T_0') = s(bool,X160) | s(bool,X157) = s(bool,'const.bigStep.evaluate_5'(s(bool,X157),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29057,f260])).
fof(f29057,plain,(
  ( ! [X158,X159,X157,X160] : (p(s(bool,X158)) | sP1(X157,X159) | s(bool,X159) = s(bool,X160) | s(bool,'T_0') = s(bool,X160) | s(bool,X157) = s(bool,'const.bigStep.evaluate_5'(s(bool,X157),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X158)) ) | $spl0),
  inference(superposition,[],[f1958,f5391])).
fof(f1958,plain,(
  ( ! [X30,X28,X29] : (p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f1473,f246])).
fof(f1473,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | p(s(bool,X29)) | sP1(X29,X28) | s(bool,X28) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f341,f540])).
fof(f341,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f212])).
fof(f212,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f211])).
fof(f211,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f155])).
fof(f155,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f30887,plain,(
  ( ! [X156,X155,X153] : (sP1(X155,X153) | s(bool,X153) = s(bool,'const.bigStep.evaluate_5'(s(bool,X153),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,X156)) ) | $spl170),
  inference(cnf_transformation,[],[f30887_D])).
fof(f30887_D,plain,(
  ( ! [X156,X155,X153] : (sP1(X155,X153) | s(bool,X153) = s(bool,'const.bigStep.evaluate_5'(s(bool,X153),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X156) | s(bool,X155) = s(bool,X156)) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f30886,plain,(
  ( ! [X156,X154,X155,X153] : (p(s(bool,X154)) | sP1(X155,X153) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s(bool,X153) = s(bool,'const.bigStep.evaluate_5'(s(bool,X153),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(subsumption_resolution,[],[f29056,f260])).
fof(f29056,plain,(
  ( ! [X156,X154,X155,X153] : (p(s(bool,X154)) | sP1(X155,X153) | s(bool,X155) = s(bool,X156) | s(bool,'T_0') = s(bool,X156) | s(bool,X153) = s(bool,'const.bigStep.evaluate_5'(s(bool,X153),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X154)) ) | $spl0),
  inference(superposition,[],[f1957,f5391])).
fof(f1957,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f1472,f246])).
fof(f1472,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,X26)) | sP1(X25,X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f338,f540])).
fof(f338,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f213])).
fof(f30828,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,'const.bigStep.evaluate_5'(s(bool,X23),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,'const.bigStep.evaluate_5'(s(bool,X25),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl166),
  inference(cnf_transformation,[],[f30828_D])).
fof(f30828_D,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,'const.bigStep.evaluate_5'(s(bool,X23),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,'const.bigStep.evaluate_5'(s(bool,X25),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f30775,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,'const.bigStep.evaluate_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,'const.bigStep.evaluate_5'(s(bool,X10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28937])).
fof(f28937,plain,(
  ( ! [X12,X10,X11] : (s(bool,'T_0') = s(bool,X11) | s(bool,X12) = s(bool,'const.bigStep.evaluate_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X10) = s(bool,X12) | s(bool,X10) = s(bool,'const.bigStep.evaluate_5'(s(bool,X10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f5391,f5391])).
fof(f30784,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,'const.bigStep.evaluate_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bigStep.evaluate_5'(s(bool,X18),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28910])).
fof(f28910,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) = s(bool,X19) | s(bool,X19) = s(bool,'const.bigStep.evaluate_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X17) | s(bool,X18) = s(bool,'const.bigStep.evaluate_5'(s(bool,X18),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f5391,f5391])).
fof(f30841,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl168),
  inference(cnf_transformation,[],[f30841_D])).
fof(f30841_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f30789,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28904])).
fof(f28904,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f5391,f253])).
fof(f30804,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X22) = s(bool,'const.bigStep.evaluate_5'(s(bool,X22),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X20) = s(bool,X22)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28891])).
fof(f28891,plain,(
  ( ! [X21,X22,X20] : (s(bool,'T_0') = s(bool,X21) | s(bool,X20) = s(bool,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X21) | s(bool,X22) = s(bool,'const.bigStep.evaluate_5'(s(bool,X22),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X20) = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f5391,f5391])).
fof(f30820,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,'const.bigStep.evaluate_5'(s(bool,X23),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.bigStep.evaluate_5'(s(bool,X25),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X23) = s(bool,X25)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f28864])).
fof(f28864,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,'const.bigStep.evaluate_5'(s(bool,X23),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.bigStep.evaluate_5'(s(bool,X25),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,X23) = s(bool,X25)) ) | $spl0),
  inference(superposition,[],[f5391,f5391])).
fof(f28824,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl164),
  inference(cnf_transformation,[],[f28824_D])).
fof(f28824_D,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f28823,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f28801,f260])).
fof(f28801,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f1958,f253])).
fof(f28744,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl162),
  inference(cnf_transformation,[],[f28744_D])).
fof(f28744_D,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f28743,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f28721,f260])).
fof(f28721,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f1957,f253])).
fof(f26496,plain,(
  ( ! [X4,X2] : (s(bool,X4) = s(bool,sK15(X2,'T_0',bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl158),
  inference(cnf_transformation,[],[f26496_D])).
fof(f26496_D,plain,(
  ( ! [X4,X2] : (s(bool,X4) = s(bool,sK15(X2,'T_0',bool)) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f26497,plain,(
  ( ! [X3] : (sP1('T_0',happ(s(fun(bool,bool),X3),s(bool,'T_0')))) ) | $spl160),
  inference(cnf_transformation,[],[f26497_D])).
fof(f26497_D,plain,(
  ( ! [X3] : (sP1('T_0',happ(s(fun(bool,bool),X3),s(bool,'T_0')))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f26495,plain,(
  ( ! [X12,X13,X11] : (sP1('T_0',happ(s(fun(bool,bool),X12),s(bool,'T_0'))) | s(bool,X13) = s(bool,sK15(X11,'T_0',bool)) | s(bool,'T_0') = s(bool,X13)) ) | ($spl4 | $spl56 | $spl130)),
  inference(superposition,[],[f26446,f540])).
fof(f26446,plain,(
  ( ! [X0,X1] : (sP1('T_0',happ(s(fun(bool,bool),X1),s(bool,sK15(X0,'T_0',bool))))) ) | ($spl4 | $spl56 | $spl130)),
  inference(superposition,[],[f26228,f2857])).
fof(f26228,plain,(
  ( ! [X0] : (sP1('T_0',happ(s(fun(bool,bool),X0),s(bool,sK15(X0,'T_0',bool))))) ) | ($spl4 | $spl130)),
  inference(unit_resulting_resolution,[],[f23909,f1903])).
fof(f23909,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,sK15(X0,'T_0',bool)))))) ) | $spl130),
  inference(unit_resulting_resolution,[],[f246,f10209,f290])).
fof(f290,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK15(X2,X1,X0))))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16(X2,X1,X0)))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK15,sK16])],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f190])).
fof(f190,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f189])).
fof(f189,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X16,X17] : ((p(s(bool,X16)) & ! [X14] : p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X14))))) <=> ! [X14] : (p(s(bool,X16)) & p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X14))))))),
  file('thm.interp.evaluate_run_eval','thm.bool.RIGHT_AND_FORALL_THM')).
fof(f26492,plain,(
  ( ! [X4,X2,X3] : (sP1('T_0',happ(s(fun(bool,bool),X3),s(bool,'T_0'))) | s(bool,X4) = s(bool,sK15(X2,'T_0',bool)) | s(bool,'T_0') = s(bool,X4)) ) | ($spl4 | $spl56 | $spl130)),
  inference(superposition,[],[f26446,f540])).
fof(f25835,plain,(
  $false | ($spl65 | $spl106)),
  inference(subsumption_resolution,[],[f25834,f21896])).
fof(f21896,plain,(
  ~p(s(bool,'F_0')) | $spl65),
  inference(backward_demodulation,[],[f21045,f21206])).
fof(f21206,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f415,f21129,f358])).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP3(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f223])).
fof(f223,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(flattening,[],[f222])).
fof(f222,plain,(
  ! [X1,X0,X2] : ((~sP3(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP3(X1,X0,X2)))),
  inference(nnf_transformation,[],[f158])).
fof(f158,plain,(
  ! [X1,X0,X2] : (sP3(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f21129,plain,(
  sP3('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f21068,f348])).
fof(f348,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP3(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (sP2(X2,X1,X0) & sP3(X1,X2,X0) & sP4(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP2(X2,X1,X0) | ~sP3(X1,X2,X0) | ~sP4(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f217])).
fof(f217,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP5(X2,X1,X0)))),
  inference(flattening,[],[f216])).
fof(f216,plain,(
  ! [X2,X1,X0] : ((~sP5(X2,X1,X0) | (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP2(X0,X1,X2) | ~sP3(X1,X0,X2) | ~sP4(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP5(X2,X1,X0)))),
  inference(nnf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X2,X1,X0] : (sP5(X2,X1,X0) <=> (sP2(X0,X1,X2) & sP3(X1,X0,X2) & sP4(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f21068,plain,(
  sP5('F_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f415,f2880,f366])).
fof(f366,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f227])).
fof(f227,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP5(X2,X1,X0)) & (~sP5(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP5(X2,X1,X0))),
  inference(definition_folding,[],[f118,f160,f159,f158,f157])).
fof(f157,plain,(
  ! [X0,X1,X2] : (sP2(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f159,plain,(
  ! [X2,X0,X1] : (sP4(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f118,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X9,X28,X29] : ((p(s(bool,X29)) <=> s(bool,X9) = s(bool,X28)) <=> ((p(s(bool,X29)) | p(s(bool,X28)) | p(s(bool,X9))) & (p(s(bool,X29)) | ~p(s(bool,X9)) | ~p(s(bool,X28))) & (p(s(bool,X28)) | ~p(s(bool,X9)) | ~p(s(bool,X29))) & (p(s(bool,X9)) | ~p(s(bool,X28)) | ~p(s(bool,X29)))))),
  file('thm.interp.evaluate_run_eval','thm.sat.sat_2|49|_prove_ltb')).
fof(f2880,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(cnf_transformation,[],[f2880_D])).
fof(f2880_D,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f415,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f249,f246])).
fof(f249,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f170])).
fof(f170,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f16])).
fof(f16,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.interp.evaluate_run_eval','thm.bool.NOT_CLAUSES|split|2')).
fof(f21045,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f2880,f253])).
fof(f25834,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl106)),
  inference(forward_demodulation,[],[f25824,f21045])).
fof(f25824,plain,(
  p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl106)),
  inference(unit_resulting_resolution,[],[f21896,f25784,f387])).
fof(f387,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP8(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f237])).
fof(f237,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1) | sP9(X2,X0,X1)))),
  inference(flattening,[],[f236])).
fof(f236,plain,(
  ! [X2,X0,X1] : ((~sP9(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP8(X2,X0,X1)) | sP9(X2,X0,X1)))),
  inference(nnf_transformation,[],[f166])).
fof(f166,plain,(
  ! [X2,X0,X1] : (sP9(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP8(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f25784,plain,(
  sP9('F_0','F_0',g(s(bool,'T_0'))) | ($spl65 | $spl106)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3132])).
fof(f25783,plain,(
  $false | ($spl65 | $spl104)),
  inference(subsumption_resolution,[],[f25782,f21896])).
fof(f25782,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl104)),
  inference(forward_demodulation,[],[f25772,f21045])).
fof(f25772,plain,(
  p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl104)),
  inference(unit_resulting_resolution,[],[f25728,f395])).
fof(f395,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f240])).
fof(f240,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(flattening,[],[f239])).
fof(f239,plain,(
  ! [X2,X0,X1] : ((~sP8(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP8(X2,X0,X1)))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X2,X0,X1] : (sP8(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f25728,plain,(
  ~sP8('T_0','F_0',g(s(bool,'T_0'))) | ($spl65 | $spl104)),
  inference(unit_resulting_resolution,[],[f21896,f246,f3131])).
fof(f25727,plain,(
  $false | ($spl65 | $spl94)),
  inference(subsumption_resolution,[],[f25726,f21896])).
fof(f25726,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl94)),
  inference(forward_demodulation,[],[f25714,f21045])).
fof(f25714,plain,(
  p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl94)),
  inference(unit_resulting_resolution,[],[f25660,f380])).
fof(f380,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f233])).
fof(f233,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP6(X0,X1,X2)))),
  inference(rectify,[],[f232])).
fof(f232,plain,(
  ! [X2,X0,X1] : ((~sP6(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP6(X2,X0,X1)))),
  inference(flattening,[],[f231])).
fof(f231,plain,(
  ! [X2,X0,X1] : ((~sP6(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP6(X2,X0,X1)))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X2,X0,X1] : (sP6(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f25660,plain,(
  ~sP6(g(s(bool,'T_0')),'F_0','F_0') | ($spl65 | $spl94)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3126])).
fof(f25659,plain,(
  $false | ($spl65 | $spl88)),
  inference(subsumption_resolution,[],[f25633,f21129])).
fof(f25633,plain,(
  ~sP3('T_0',g(s(bool,'T_0')),'F_0') | ($spl65 | $spl88)),
  inference(unit_resulting_resolution,[],[f21896,f246,f3123])).
fof(f25654,plain,(
  $false | ($spl65 | $spl88)),
  inference(subsumption_resolution,[],[f25639,f246])).
fof(f25639,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl88)),
  inference(unit_resulting_resolution,[],[f21896,f21129,f3123])).
fof(f25653,plain,(
  $false | ($spl65 | $spl88)),
  inference(subsumption_resolution,[],[f25640,f21896])).
fof(f25640,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl88)),
  inference(unit_resulting_resolution,[],[f246,f21129,f3123])).
fof(f25641,plain,(
  $false | ($spl65 | $spl88)),
  inference(unit_resulting_resolution,[],[f21896,f246,f21129,f3123])).
fof(f25611,plain,(
  $false | ($spl65 | $spl86)),
  inference(subsumption_resolution,[],[f25585,f23226])).
fof(f23226,plain,(
  sP4('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f23143,f349])).
fof(f349,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP4(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f218])).
fof(f23143,plain,(
  sP5('T_0','F_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f21045,f367])).
fof(f367,plain,(
  ( ! [X2,X0,X1] : (sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f227])).
fof(f25585,plain,(
  ~sP4('T_0',g(s(bool,'T_0')),'F_0') | ($spl65 | $spl86)),
  inference(unit_resulting_resolution,[],[f21896,f246,f3122])).
fof(f25606,plain,(
  $false | ($spl65 | $spl86)),
  inference(subsumption_resolution,[],[f25591,f246])).
fof(f25591,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl86)),
  inference(unit_resulting_resolution,[],[f21896,f23226,f3122])).
fof(f25605,plain,(
  $false | ($spl65 | $spl86)),
  inference(subsumption_resolution,[],[f25592,f21896])).
fof(f25592,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl86)),
  inference(unit_resulting_resolution,[],[f246,f23226,f3122])).
fof(f25593,plain,(
  $false | ($spl65 | $spl86)),
  inference(unit_resulting_resolution,[],[f21896,f246,f23226,f3122])).
fof(f25487,plain,(
  $false | ($spl65 | $spl114)),
  inference(subsumption_resolution,[],[f25486,f21896])).
fof(f25486,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl114)),
  inference(forward_demodulation,[],[f25473,f21045])).
fof(f25473,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl114),
  inference(unit_resulting_resolution,[],[f246,f25443,f371])).
fof(f371,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP6(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP6(X0,X1,X2) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f229])).
fof(f229,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP6(X2,X0,X1) | sP7(X2,X0,X1)))),
  inference(flattening,[],[f228])).
fof(f228,plain,(
  ! [X2,X0,X1] : ((~sP7(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP6(X2,X0,X1)) | sP7(X2,X0,X1)))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X2,X0,X1] : (sP7(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP6(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f25443,plain,(
  ( ! [X0] : (sP7(g(s(bool,'T_0')),X0,'T_0')) ) | $spl114),
  inference(unit_resulting_resolution,[],[f428,f3136])).
fof(f428,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f378])).
fof(f378,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f233])).
fof(f25485,plain,(
  $false | ($spl65 | $spl114)),
  inference(subsumption_resolution,[],[f25484,f21896])).
fof(f25484,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl114)),
  inference(forward_demodulation,[],[f25474,f21045])).
fof(f25474,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl114),
  inference(unit_resulting_resolution,[],[f246,f25443,f370])).
fof(f370,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f230])).
fof(f25442,plain,(
  $false | ($spl65 | $spl112)),
  inference(subsumption_resolution,[],[f25441,f21896])).
fof(f25441,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl112)),
  inference(forward_demodulation,[],[f25428,f21045])).
fof(f25428,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl112),
  inference(unit_resulting_resolution,[],[f246,f25403,f388])).
fof(f388,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f238])).
fof(f25403,plain,(
  ( ! [X0] : (sP9(g(s(bool,'T_0')),X0,'F_0')) ) | $spl112),
  inference(unit_resulting_resolution,[],[f431,f3135])).
fof(f431,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f395])).
fof(f25440,plain,(
  $false | ($spl65 | $spl112)),
  inference(subsumption_resolution,[],[f25439,f21896])).
fof(f25439,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl112)),
  inference(forward_demodulation,[],[f25429,f21045])).
fof(f25429,plain,(
  p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl112)),
  inference(unit_resulting_resolution,[],[f21896,f25403,f387])).
fof(f23816,plain,(
  ( ! [X17,X16] : (s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK24(X16,X17,bool,fun(bool,bool)))))) ) | $spl154),
  inference(cnf_transformation,[],[f23816_D])).
fof(f23816_D,plain,(
  ( ! [X17,X16] : (s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK24(X16,X17,bool,fun(bool,bool)))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f23817,plain,(
  ( ! [X18] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X18)))) ) | $spl156),
  inference(cnf_transformation,[],[f23817_D])).
fof(f23817_D,plain,(
  ( ! [X18] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X18)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f23808,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X21))) | s(fun(fun(bool,bool),bool),X19) = s(fun(fun(bool,bool),bool),X20) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK24(X19,X20,bool,fun(bool,bool)))))) ) | $spl56),
  inference(superposition,[],[f2583,f2857])).
fof(f2583,plain,(
  ( ! [X21,X19,X20] : (s(bool,'F_0') != s(bool,f(s(X19,sK24(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,'T_0') = s(bool,g(s(X19,sK24(X20,X21,bool,X19))))) )),
  inference(superposition,[],[f346,f253])).
fof(f346,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK24(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK24(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK24(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK24(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24])],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f116])).
fof(f116,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f115])).
fof(f115,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.interp.evaluate_run_eval',aHL_EXT)).
fof(f23807,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,f(s(fun(bool,bool),X18))) | s(fun(fun(bool,bool),bool),X16) = s(fun(fun(bool,bool),bool),X17) | s(bool,'T_0') = s(bool,g(s(fun(bool,bool),sK24(X16,X17,bool,fun(bool,bool)))))) ) | $spl56),
  inference(superposition,[],[f2583,f2857])).
fof(f23756,plain,(
  $false | ($spl65 | $spl110)),
  inference(subsumption_resolution,[],[f23755,f21896])).
fof(f23755,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl110)),
  inference(forward_demodulation,[],[f23742,f21045])).
fof(f23742,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl110),
  inference(unit_resulting_resolution,[],[f246,f23720,f388])).
fof(f23720,plain,(
  ( ! [X0] : (sP9(g(s(bool,'T_0')),'T_0',X0)) ) | $spl110),
  inference(unit_resulting_resolution,[],[f246,f3134])).
fof(f23754,plain,(
  $false | ($spl65 | $spl110)),
  inference(subsumption_resolution,[],[f23753,f21896])).
fof(f23753,plain,(
  p(s(bool,'F_0')) | ($spl65 | $spl110)),
  inference(forward_demodulation,[],[f23743,f21045])).
fof(f23743,plain,(
  p(s(bool,g(s(bool,'T_0')))) | ($spl65 | $spl110)),
  inference(unit_resulting_resolution,[],[f21896,f23720,f387])).
fof(f23719,plain,(
  ( ! [X35,X34,X32] : (p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X34)))) | s(bool,'T_0') = s(bool,sK16(X32,X35,bool)) | ~p(s(bool,X35))) ) | $spl152),
  inference(cnf_transformation,[],[f23719_D])).
fof(f23719_D,plain,(
  ( ! [X35,X34,X32] : (p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X34)))) | s(bool,'T_0') = s(bool,sK16(X32,X35,bool)) | ~p(s(bool,X35))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f10209,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0'))))) ) | $spl130),
  inference(cnf_transformation,[],[f10209_D])).
fof(f10209_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0'))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f23695,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X34)))) | ~p(s(bool,X35)) | s(bool,'T_0') = s(bool,sK16(X32,X35,bool))) ) | $spl56),
  inference(superposition,[],[f2391,f2857])).
fof(f2391,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X21)))) | ~p(s(bool,X20)) | s(bool,'T_0') = s(bool,sK16(X19,X20,bool))) )),
  inference(superposition,[],[f292,f253])).
fof(f292,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK16(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f192])).
fof(f23675,plain,(
  ( ! [X35,X33,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X34)))) | ~p(s(bool,X35)) | s(bool,'T_0') = s(bool,sK16(X32,X35,bool))) ) | $spl56),
  inference(superposition,[],[f2391,f2857])).
fof(f22917,plain,(
  $false | ($spl66 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22916,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430,f22424,f22706,f22707])).
fof(f22707,plain,(
  ( ! [X2,X3] : (~p(s(bool,f(s(bool,X2)))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl75),
  inference(superposition,[],[f3113,f540])).
fof(f22706,plain,(
  ( ! [X0,X1] : (~p(s(bool,f(s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl75),
  inference(superposition,[],[f3113,f540])).
fof(f22424,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f260])).
fof(f22430,plain,(
  ~sP1(f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f336])).
fof(f22432,plain,(
  ~sP1(f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f336])).
fof(f22433,plain,(
  sP1('T_0',f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f3113,f338])).
fof(f22434,plain,(
  sP1(f(s(bool,'T_0')),'T_0') | $spl75),
  inference(unit_resulting_resolution,[],[f246,f3113,f341])).
fof(f22435,plain,(
  ~sP5('T_0','T_0',f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f246,f3113,f350])).
fof(f22436,plain,(
  sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f425,f3113,f352])).
fof(f22438,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f2658,f3113,f352])).
fof(f22439,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f2657,f420,f2658,f3113,f352])).
fof(f22440,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f3235,f3113,f352])).
fof(f22441,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3234,f420,f3235,f3113,f352])).
fof(f22442,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f3678,f3113,f352])).
fof(f22443,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3677,f420,f3678,f3113,f352])).
fof(f22444,plain,(
  sP5(f(s(bool,'T_0')),'T_0','F_0') | $spl75),
  inference(unit_resulting_resolution,[],[f423,f419,f426,f3113,f353])).
fof(f22445,plain,(
  sP5(f(s(bool,'T_0')),'T_0','F_0') | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f426,f3113,f353])).
fof(f22448,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f2646,f2659,f3113,f353])).
fof(f22449,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f2659,f3113,f353])).
fof(f22450,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f3225,f3236,f3113,f353])).
fof(f22451,plain,(
  ( ! [X2,X0,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f3236,f3113,f353])).
fof(f22452,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f3668,f3679,f3113,f353])).
fof(f22453,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f423,f420,f3679,f3113,f353])).
fof(f22454,plain,(
  ~sP4('T_0','T_0',f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f246,f3113,f354])).
fof(f22457,plain,(
  ( ! [X0,X1] : (sP4(X0,f(s(bool,'T_0')),X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f356])).
fof(f22458,plain,(
  ( ! [X0,X1] : (sP4(f(s(bool,'T_0')),X0,X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f357])).
fof(f22462,plain,(
  ( ! [X0,X1] : (sP3(X0,f(s(bool,'T_0')),X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f360])).
fof(f22463,plain,(
  ( ! [X0,X1] : (sP3(f(s(bool,'T_0')),X0,X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f361])).
fof(f22467,plain,(
  ~sP2(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f362])).
fof(f22487,plain,(
  ~sP2(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f362])).
fof(f22507,plain,(
  ~sP2(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f362])).
fof(f22524,plain,(
  sP5(f(s(bool,'T_0')),'F_0','T_0') | $spl75),
  inference(unit_resulting_resolution,[],[f434,f3113,f366])).
fof(f22526,plain,(
  sP5(f(s(bool,'T_0')),'T_0','F_0') | $spl75),
  inference(unit_resulting_resolution,[],[f434,f3113,f366])).
fof(f22529,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f2620,f3113,f369])).
fof(f22530,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3201,f3113,f369])).
fof(f22531,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3644,f3113,f369])).
fof(f22533,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(f(s(bool,'T_0')),'T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f2620,f3113,f369])).
fof(f22534,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5(f(s(bool,'T_0')),'T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3201,f3113,f369])).
fof(f22535,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5(f(s(bool,'T_0')),'T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3644,f3113,f369])).
fof(f22536,plain,(
  ( ! [X0] : (~sP7(f(s(bool,'T_0')),X0,'T_0')) ) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f3113,f370])).
fof(f22537,plain,(
  ( ! [X0] : (~sP7(f(s(bool,'T_0')),'T_0',X0)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f3113,f371])).
fof(f22566,plain,(
  sP7('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f430,f3113,f376])).
fof(f22578,plain,(
  sP7('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f430,f3113,f376])).
fof(f22600,plain,(
  ( ! [X0,X1] : (sP6(f(s(bool,'T_0')),X0,X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f380])).
fof(f22604,plain,(
  sP7(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f381])).
fof(f22613,plain,(
  sP7(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f381])).
fof(f22622,plain,(
  sP7(f(s(bool,'T_0')),f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f3113,f381])).
fof(f22624,plain,(
  ~sP7('T_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f246,f3113,f384])).
fof(f22627,plain,(
  ~sP7('T_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f246,f3113,f384])).
fof(f22630,plain,(
  ( ! [X0] : (~sP9(f(s(bool,'T_0')),X0,f(s(bool,'T_0')))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f387])).
fof(f22632,plain,(
  ( ! [X0] : (~sP9(f(s(bool,'T_0')),X0,f(s(bool,'T_0')))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f387])).
fof(f22637,plain,(
  ( ! [X0] : (~sP9(f(s(bool,'T_0')),'T_0',X0)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f246,f3113,f388])).
fof(f22647,plain,(
  ( ! [X0,X1] : (sP8(X0,X1,f(s(bool,'T_0')))) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f395])).
fof(f22648,plain,(
  ( ! [X0,X1] : (sP8(f(s(bool,'T_0')),X0,X1)) ) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f397])).
fof(f22660,plain,(
  ~sP9('T_0',f(s(bool,'T_0')),'T_0') | $spl75),
  inference(unit_resulting_resolution,[],[f246,f246,f3113,f401])).
fof(f22663,plain,(
  ~sP0(f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f416])).
fof(f22670,plain,(
  ~sP0(f(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f3113,f3113,f416])).
fof(f264,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f174])).
fof(f174,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f62])).
fof(f62,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f61])).
fof(f61,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X13] : (s(bool,'F_0') = s(bool,X13) <=> ~p(s(bool,X13)))),
  file('thm.interp.evaluate_run_eval','thm.bool.EQ_CLAUSES|split|3')).
fof(f265,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f174])).
fof(f2463,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X21)))) | p(s(bool,X20)) | s(bool,'T_0') = s(bool,sK22(X19,X20,bool))) )),
  inference(superposition,[],[f301,f253])).
fof(f2486,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X21)))) | p(s(bool,X20)) | s(bool,'T_0') = s(bool,sK23(X19,X20,bool))) )),
  inference(superposition,[],[f303,f253])).
fof(f2577,plain,(
  ( ! [X21,X19,X20] : (s(X21,f(s(bool,'F_0'))) != s(X21,g(s(bool,'F_0'))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,'T_0') = s(bool,sK24(X19,X20,X21,bool))) )),
  inference(superposition,[],[f346,f253])).
fof(f3361,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,sK19(X16,X17,bool))))) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X18)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X16,X17,bool))) )),
  inference(superposition,[],[f297,f253])).
fof(f3402,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,sK19(X16,X17,bool))))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X18)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X16,X17,bool))) )),
  inference(superposition,[],[f298,f253])).
fof(f3447,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,sK20(X16,X17,bool))))) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X18)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X16,X17,bool))) )),
  inference(superposition,[],[f299,f253])).
fof(f3486,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,sK20(X16,X17,bool))))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X18)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X16,X17,bool))) )),
  inference(superposition,[],[f300,f253])).
fof(f3809,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.state'(X34),X35),s('type.ast.exp',X36),s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X37)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X32),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.state'(X34),X35),s('type.ast.exp',X36),s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X38)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X37) = s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X38) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f310,f253])).
fof(f3854,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.state'(X34),X35),s('type.list.list'('type.ast.exp'),X36),s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X37)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X32),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X33),s('type.semanticPrimitives.state'(X34),X35),s('type.list.list'('type.ast.exp'),X36),s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X38)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X37) = s('type.pair.prod'('type.semanticPrimitives.state'(X34),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X38) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f311,f253])).
fof(f3947,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42,X40] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.semanticPrimitives.state'(X42),X43),s('type.semanticPrimitives.v',X44),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X45),s('type.semanticPrimitives.v',X46),s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X47)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X40),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.semanticPrimitives.state'(X42),X43),s('type.semanticPrimitives.v',X44),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X45),s('type.semanticPrimitives.v',X46),s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X48)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X47) = s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X48) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f312,f253])).
fof(f10269,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK16(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f10264,f246])).
fof(f10264,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK16(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2391,f540])).
fof(f10335,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK22(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f10330,f246])).
fof(f10330,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK22(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2463,f540])).
fof(f10401,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK23(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f10396,f246])).
fof(f10396,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK23(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2486,f540])).
fof(f16921,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9)) )),
  inference(duplicate_literal_removal,[],[f16909])).
fof(f16909,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool))) )),
  inference(superposition,[],[f3361,f540])).
fof(f16922,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool))) )),
  inference(duplicate_literal_removal,[],[f16907])).
fof(f16907,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool)) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool))) )),
  inference(superposition,[],[f3361,f253])).
fof(f16924,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK19(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f16914,f246])).
fof(f16914,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK19(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3361,f540])).
fof(f17119,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9)) )),
  inference(duplicate_literal_removal,[],[f17107])).
fof(f17107,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK19(X7,X8,bool))) )),
  inference(superposition,[],[f3402,f540])).
fof(f17120,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool))) )),
  inference(duplicate_literal_removal,[],[f17105])).
fof(f17105,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool)) | s(bool,'T_0') = s(bool,sK19(X0,X1,bool))) )),
  inference(superposition,[],[f3402,f253])).
fof(f17122,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK19(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f17112,f246])).
fof(f17112,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK19(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK19(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3402,f540])).
fof(f17162,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X0,X1,bool)) | s(bool,'T_0') = s(bool,sK20(X0,X1,bool))) )),
  inference(superposition,[],[f3447,f253])).
fof(f17163,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X3,X4,bool)) | s(bool,X6) = s(bool,sK20(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3447,f540])).
fof(f17164,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK20(X7,X8,bool))) )),
  inference(superposition,[],[f3447,f540])).
fof(f17175,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK20(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f17169,f246])).
fof(f17169,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK20(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3447,f540])).
fof(f17272,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X0,X1,bool)) | s(bool,'T_0') = s(bool,sK20(X0,X1,bool))) )),
  inference(superposition,[],[f3486,f253])).
fof(f17273,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X3,X4,bool)) | s(bool,X6) = s(bool,sK20(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3486,f540])).
fof(f17274,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | ~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X7,X8,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK20(X7,X8,bool))) )),
  inference(superposition,[],[f3486,f540])).
fof(f17285,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK20(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f17279,f246])).
fof(f17279,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | ~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK21(X4,X3,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,sK20(X4,X3,bool)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3486,f540])).
fof(f21313,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.ast.exp',X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X11) = s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X13) | s(bool,'T_0') = s(bool,X12) | s(bool,X14) = s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.ast.exp',X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X11))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f21308,f246])).
fof(f21308,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.ast.exp',X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X11) = s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X13) | s(bool,'T_0') = s(bool,X12) | s(bool,X14) = s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.ast.exp',X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X11))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f3809,f540])).
fof(f21348,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.list.list'('type.ast.exp'),X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X11) = s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X13) | s(bool,'T_0') = s(bool,X12) | s(bool,X14) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.list.list'('type.ast.exp'),X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X11))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f21343,f246])).
fof(f21343,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X12),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.list.list'('type.ast.exp'),X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X11) = s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X13) | s(bool,'T_0') = s(bool,X12) | s(bool,X14) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.list.list'('type.ast.exp'),X10),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X11))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f3854,f540])).
fof(f21389,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X16),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X10),X11),s('type.semanticPrimitives.v',X12),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X13),s('type.semanticPrimitives.v',X14),s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X17)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X15) = s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X17) | s(bool,'T_0') = s(bool,X16) | s(bool,X18) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X10),X11),s('type.semanticPrimitives.v',X12),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X13),s('type.semanticPrimitives.v',X14),s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X15))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f21384,f246])).
fof(f21384,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X16),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X10),X11),s('type.semanticPrimitives.v',X12),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X13),s('type.semanticPrimitives.v',X14),s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X17)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X15) = s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X17) | s(bool,'T_0') = s(bool,X16) | s(bool,X18) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.semanticPrimitives.state'(X10),X11),s('type.semanticPrimitives.v',X12),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X13),s('type.semanticPrimitives.v',X14),s('type.pair.prod'('type.semanticPrimitives.state'(X10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X15))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f3947,f540])).
fof(f10468,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK24(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK24(X1,X2,bool,X0))))) )),
  inference(trivial_inequality_removal,[],[f10462])).
fof(f10462,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK24(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,f(s(X0,sK24(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f2583,f253])).
fof(f2580,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X11) != s(bool,f(s(X8,sK24(X9,X10,bool,X8)))) | s(fun(X8,bool),X9) = s(fun(X8,bool),X10) | s(bool,'T_0') = s(bool,g(s(X8,sK24(X9,X10,bool,X8)))) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f346,f540])).
fof(f2578,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') != s(bool,f(s(X0,sK24(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,X3) = s(bool,g(s(X0,sK24(X1,X2,bool,X0)))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f346,f540])).
fof(f2749,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f305,f540])).
fof(f3805,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f310,f540])).
fof(f3807,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X17),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.state'(X19),X20),s('type.ast.exp',X21),s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X16),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.state'(X19),X20),s('type.ast.exp',X21),s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X23)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22) = s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X23) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f310,f540])).
fof(f3823,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) | s(bool,X7) = s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3816,f246])).
fof(f3816,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) | s(bool,X7) = s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f310,f540])).
fof(f11004,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(subsumption_resolution,[],[f10922,f246])).
fof(f10922,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(superposition,[],[f310,f2620])).
fof(f1540,plain,(
  ( ! [X189,X187,X188,X186] : (~p(s(bool,happ(s(fun(bool,bool),X186),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X186),s(bool,X188)))) | ~p(s(bool,X187)) | s(bool,X189) = s(bool,sK15(X186,X187,bool)) | s(bool,'T_0') = s(bool,X189)) )),
  inference(superposition,[],[f290,f540])).
fof(f1541,plain,(
  ( ! [X191,X192,X190,X193] : (~p(s(bool,happ(s(fun(bool,bool),X190),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X190),s(bool,X192)))) | ~p(s(bool,X191)) | s(bool,X193) = s(bool,sK16(X190,X191,bool)) | s(bool,'T_0') = s(bool,X193)) )),
  inference(superposition,[],[f292,f540])).
fof(f2389,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X14)))) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X15)))) | ~p(s(bool,X13)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,sK16(X12,X13,bool))) )),
  inference(superposition,[],[f292,f540])).
fof(f2458,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | p(s(bool,X1)) | s(bool,X3) = s(bool,sK22(X0,X1,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f301,f540])).
fof(f2460,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X11)))) | p(s(bool,X9)) | s(bool,'T_0') = s(bool,sK22(X8,X9,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f301,f540])).
fof(f2481,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | p(s(bool,X1)) | s(bool,X3) = s(bool,sK23(X0,X1,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f303,f540])).
fof(f2483,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X11)))) | p(s(bool,X9)) | s(bool,'T_0') = s(bool,sK23(X8,X9,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f303,f540])).
fof(f3443,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK20(X0,X1,bool))))) | s(bool,X3) = s(bool,sK21(X0,X1,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f299,f540])).
fof(f3445,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X9),s(bool,X11)))) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,sK20(X8,X9,bool))))) | s(bool,'T_0') = s(bool,sK21(X8,X9,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f299,f540])).
fof(f3482,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK20(X0,X1,bool))))) | s(bool,X3) = s(bool,sK21(X0,X1,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f300,f540])).
fof(f3484,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X11)))) | ~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,sK20(X8,X9,bool))))) | s(bool,'T_0') = s(bool,sK21(X8,X9,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f300,f540])).
fof(f8567,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,X14)))) | ~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,sK19(X11,X12,bool))))) | s(bool,'T_0') = s(bool,sK19(X11,X12,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f297,f540])).
fof(f8568,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,sK19(X15,X16,bool))))) | s(bool,X18) = s(bool,sK19(X15,X16,bool)) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f297,f540])).
fof(f8621,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X14)))) | ~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,sK19(X11,X12,bool))))) | s(bool,'T_0') = s(bool,sK19(X11,X12,bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f298,f540])).
fof(f8622,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X17)))) | ~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,sK19(X15,X16,bool))))) | s(bool,X18) = s(bool,sK19(X15,X16,bool)) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f298,f540])).
fof(f293,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(X2,X1,X0))))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0))))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK17,sK18])],[f195])).
fof(f195,plain,(
  ! [X0,X1,X2] : ((? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2] : (((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f79])).
fof(f79,plain,(
  ! [X0] : ! [X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X6] : ! [X16,X17] : ((! [X14] : p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))) <=> ! [X14] : (p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,X17))))),
  file('thm.interp.evaluate_run_eval','thm.bool.LEFT_AND_FORALL_THM')).
fof(f295,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK18(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f196])).
fof(f297,plain,(
  ( ! [X2,X0,X7,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X2,X1,X0)))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK20(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21])],[f199])).
fof(f199,plain,(
  ! [X0,X1,X2] : ((? [X8] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X8)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X8))))) | (! [X7] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X7)))) & ! [X6] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f197])).
fof(f197,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((? [X5] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f81])).
fof(f81,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (! [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X16,X17] : (! [X14] : (p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X14))))) <=> (! [X14] : p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) & ! [X14] : p(s(bool,happ(s(fun(X6,bool),X17),s(X6,X14))))))),
  file('thm.interp.evaluate_run_eval','thm.bool.FORALL_AND_THM')).
fof(f298,plain,(
  ( ! [X6,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f299,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK20(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f300,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK21(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK20(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f200])).
fof(f301,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK22(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK22(X2,X1,X0))))) & ~p(s(bool,X1))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | p(s(bool,X1))) & ((~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK23(X2,X1,X0))))) & ~p(s(bool,X1))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23])],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2] : ((? [X6] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) & ~p(s(bool,X1))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | p(s(bool,X1))) & ((? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) & ~p(s(bool,X1))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1)))))),
  inference(rectify,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,X1))) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,X1))) & ((? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) & ~p(s(bool,X1))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1)))))),
  inference(flattening,[],[f201])).
fof(f201,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,X1))) | (! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,X1)))) & ((? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) & ~p(s(bool,X1))) | ! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1)))))),
  inference(nnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1))) <=> (! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,X1))))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1))) <=> (! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,X1))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X17,X16] : (! [X14] : (p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) | p(s(bool,X17))) <=> (! [X14] : p(s(bool,happ(s(fun(X6,bool),X16),s(X6,X14)))) | p(s(bool,X17))))),
  file('thm.interp.evaluate_run_eval','thm.bool.LEFT_FORALL_OR_THM')).
fof(f303,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK23(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f204])).
fof(f1974,plain,(
  ( ! [X175,X173,X176,X174,X172] : (p(s(bool,happ(s(fun(X172,bool),X173),s(X172,X175)))) | ~p(s(bool,X174)) | s(bool,X176) = s(bool,happ(s(fun(X172,bool),X173),s(X172,sK15(X173,X174,X172)))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(subsumption_resolution,[],[f1537,f246])).
fof(f1537,plain,(
  ( ! [X175,X173,X176,X174,X172] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X172,bool),X173),s(X172,X175)))) | ~p(s(bool,X174)) | s(bool,X176) = s(bool,happ(s(fun(X172,bool),X173),s(X172,sK15(X173,X174,X172)))) | s(bool,'T_0') = s(bool,X176)) )),
  inference(superposition,[],[f290,f540])).
fof(f1975,plain,(
  ( ! [X177,X180,X178,X181,X179] : (p(s(bool,happ(s(fun(X177,bool),X178),s(X177,X180)))) | ~p(s(bool,X179)) | s(bool,X181) = s(bool,happ(s(fun(X177,bool),X178),s(X177,sK16(X178,X179,X177)))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(subsumption_resolution,[],[f1538,f246])).
fof(f1538,plain,(
  ( ! [X177,X180,X178,X181,X179] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X177,bool),X178),s(X177,X180)))) | ~p(s(bool,X179)) | s(bool,X181) = s(bool,happ(s(fun(X177,bool),X178),s(X177,sK16(X178,X179,X177)))) | s(bool,'T_0') = s(bool,X181)) )),
  inference(superposition,[],[f292,f540])).
fof(f2416,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17(X0,X2,X1))))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2406,f246])).
fof(f2406,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17(X0,X2,X1))))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f293,f540])).
fof(f2443,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18(X0,X2,X1))))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2433,f246])).
fof(f2433,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18(X0,X2,X1))))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f295,f540])).
fof(f2471,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK22(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2464,f246])).
fof(f2464,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK22(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f301,f540])).
fof(f2494,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK23(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2487,f246])).
fof(f2487,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK23(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f303,f540])).
fof(f3371,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3364,f246])).
fof(f3364,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f297,f540])).
fof(f3412,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3405,f246])).
fof(f3405,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK19(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK19(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f298,f540])).
fof(f3455,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3450,f246])).
fof(f3450,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f299,f540])).
fof(f3494,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3489,f246])).
fof(f3489,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK20(X1,X2,X0))))) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK21(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f300,f540])).
fof(f11008,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.semanticPrimitives.state'(X26),X27),s('type.ast.exp',X28),s('type.pair.prod'('type.semanticPrimitives.state'(X26),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.ast.exp',X28),s('type.semanticPrimitives.state'(X26),X27)))),X30,X29)))))) )),
  inference(subsumption_resolution,[],[f10928,f246])).
fof(f10928,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.semanticPrimitives.state'(X26),X27),s('type.ast.exp',X28),s('type.pair.prod'('type.semanticPrimitives.state'(X26),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.ast.exp',X28),s('type.semanticPrimitives.state'(X26),X27)))),X30,X29)))))) )),
  inference(superposition,[],[f293,f2620])).
fof(f11009,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38)))) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK18('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.semanticPrimitives.state'(X33),X34),s('type.ast.exp',X35),s('type.pair.prod'('type.semanticPrimitives.state'(X33),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.ast.exp',X35),s('type.semanticPrimitives.state'(X33),X34)))),X37,X36)))))) )),
  inference(subsumption_resolution,[],[f10929,f246])).
fof(f10929,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38)))) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK18('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.semanticPrimitives.state'(X33),X34),s('type.ast.exp',X35),s('type.pair.prod'('type.semanticPrimitives.state'(X33),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.ast.exp',X35),s('type.semanticPrimitives.state'(X33),X34)))),X37,X36)))))) )),
  inference(superposition,[],[f295,f2620])).
fof(f16837,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.semanticPrimitives.state'(X26),X27),s('type.list.list'('type.ast.exp'),X28),s('type.pair.prod'('type.semanticPrimitives.state'(X26),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.list.list'('type.ast.exp'),X28),s('type.semanticPrimitives.state'(X26),X27)))),X30,X29)))))) )),
  inference(subsumption_resolution,[],[f16775,f246])).
fof(f16775,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.semanticPrimitives.state'(X26),X27),s('type.list.list'('type.ast.exp'),X28),s('type.pair.prod'('type.semanticPrimitives.state'(X26),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X25),s('type.list.list'('type.ast.exp'),X28),s('type.semanticPrimitives.state'(X26),X27)))),X30,X29)))))) )),
  inference(superposition,[],[f293,f3201])).
fof(f16838,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38)))) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK18('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.semanticPrimitives.state'(X33),X34),s('type.list.list'('type.ast.exp'),X35),s('type.pair.prod'('type.semanticPrimitives.state'(X33),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.list.list'('type.ast.exp'),X35),s('type.semanticPrimitives.state'(X33),X34)))),X37,X36)))))) )),
  inference(subsumption_resolution,[],[f16776,f246])).
fof(f16776,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X36,bool),X37),s(X36,X38)))) | ~p(s(bool,happ(s(fun(X36,bool),X37),s(X36,sK18('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.semanticPrimitives.state'(X33),X34),s('type.list.list'('type.ast.exp'),X35),s('type.pair.prod'('type.semanticPrimitives.state'(X33),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X32),s('type.list.list'('type.ast.exp'),X35),s('type.semanticPrimitives.state'(X33),X34)))),X37,X36)))))) )),
  inference(superposition,[],[f295,f3201])).
fof(f19892,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X44,X42,X40] : (p(s(bool,happ(s(fun(X43,bool),X44),s(X43,X45)))) | ~p(s(bool,happ(s(fun(X43,bool),X44),s(X43,sK17('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.state'(X38),X39),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.semanticPrimitives.state'(X38),X39)))),X44,X43)))))) )),
  inference(subsumption_resolution,[],[f19768,f246])).
fof(f19768,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X44,X42,X40] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X43,bool),X44),s(X43,X45)))) | ~p(s(bool,happ(s(fun(X43,bool),X44),s(X43,sK17('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.state'(X38),X39),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.semanticPrimitives.state'(X38),X39)))),X44,X43)))))) )),
  inference(superposition,[],[f293,f3644])).
fof(f19893,plain,(
  ( ! [X47,X54,X52,X50,X48,X46,X53,X51,X49] : (p(s(bool,happ(s(fun(X52,bool),X53),s(X52,X54)))) | ~p(s(bool,happ(s(fun(X52,bool),X53),s(X52,sK18('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X46),s('type.semanticPrimitives.state'(X47),X48),s('type.semanticPrimitives.v',X49),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X50),s('type.semanticPrimitives.v',X51),s('type.pair.prod'('type.semanticPrimitives.state'(X47),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X46),s('type.semanticPrimitives.v',X49),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X50),s('type.semanticPrimitives.v',X51),s('type.semanticPrimitives.state'(X47),X48)))),X53,X52)))))) )),
  inference(subsumption_resolution,[],[f19769,f246])).
fof(f19769,plain,(
  ( ! [X47,X54,X52,X50,X48,X46,X53,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X52,bool),X53),s(X52,X54)))) | ~p(s(bool,happ(s(fun(X52,bool),X53),s(X52,sK18('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X46),s('type.semanticPrimitives.state'(X47),X48),s('type.semanticPrimitives.v',X49),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X50),s('type.semanticPrimitives.v',X51),s('type.pair.prod'('type.semanticPrimitives.state'(X47),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X46),s('type.semanticPrimitives.v',X49),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X50),s('type.semanticPrimitives.v',X51),s('type.semanticPrimitives.state'(X47),X48)))),X53,X52)))))) )),
  inference(superposition,[],[f295,f3644])).
fof(f311,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) )),
  inference(cnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5)))) | ! [X6] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))),
  inference(ennf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5)))) => ! [X6] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5)))) => ! [X6] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X18] : ! [X19,X7,X20,X23,X21] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.list.list'('type.ast.exp'),X23),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X21)))) => ! [X22] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.list.list'('type.ast.exp'),X23),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X22)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X21) = s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X22)))),
  file('thm.interp.evaluate_run_eval','thm.determ.big_exp_determ|split|1')).
fof(f3850,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f311,f540])).
fof(f3852,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X17),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.state'(X19),X20),s('type.list.list'('type.ast.exp'),X21),s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X22)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X16),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X18),s('type.semanticPrimitives.state'(X19),X20),s('type.list.list'('type.ast.exp'),X21),s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X23)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X22) = s('type.pair.prod'('type.semanticPrimitives.state'(X19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X23) | s(bool,'T_0') = s(bool,X16) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f311,f540])).
fof(f3868,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6) | s(bool,X7) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3861,f246])).
fof(f3861,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6) | s(bool,X7) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f311,f540])).
fof(f3311,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f306,f540])).
fof(f16833,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(subsumption_resolution,[],[f16769,f246])).
fof(f16769,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(superposition,[],[f311,f3201])).
fof(f312,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7)))) | ! [X8] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))),
  inference(ennf_transformation,[],[f100])).
fof(f100,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7)))) => ! [X8] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))),
  inference(flattening,[],[f99])).
fof(f99,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7)))) => ! [X8] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X18] : ! [X19,X7,X20,X24,X25,X26,X21] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.semanticPrimitives.v',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25),s('type.semanticPrimitives.v',X26),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X21)))) => ! [X22] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X19),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X20),s('type.semanticPrimitives.v',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25),s('type.semanticPrimitives.v',X26),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22)))) => s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X21) = s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X22)))),
  file('thm.interp.evaluate_run_eval','thm.determ.big_exp_determ|split|2')).
fof(f3943,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f312,f540])).
fof(f3945,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22,X20] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X21),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.semanticPrimitives.v',X25),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X26),s('type.semanticPrimitives.v',X27),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X28)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.semanticPrimitives.v',X25),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X26),s('type.semanticPrimitives.v',X27),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X29)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X28) = s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X29) | s(bool,'T_0') = s(bool,X20) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f312,f540])).
fof(f3963,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8) | s(bool,X9) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f3955,f246])).
fof(f3955,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8) | s(bool,X9) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f312,f540])).
fof(f3756,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f309,f540])).
fof(f19888,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(subsumption_resolution,[],[f19762,f246])).
fof(f19762,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))) )),
  inference(superposition,[],[f312,f3644])).
fof(f15797,plain,(
  ( ! [X14,X15,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X13,X14,bool,bool)))) | s(bool,X15) = s(bool,sK24(X13,X14,bool,bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2583,f540])).
fof(f15794,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X4,X5,bool,bool)))) | s(bool,X6) = s(bool,sK24(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2583,f540])).
fof(f10460,plain,(
  ( ! [X14,X15,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X13,X14,bool,bool)))) | s(bool,X15) = s(bool,sK24(X13,X14,bool,bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f2583,f540])).
fof(f10457,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X4) = s(fun(bool,bool),X5) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X4,X5,bool,bool)))) | s(bool,X6) = s(bool,sK24(X4,X5,bool,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2583,f540])).
fof(f21621,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (sP7('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9)))),X13) | s(bool,X0) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f3707,f540])).
fof(f21586,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (sP7('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.state'(X9),X10),s('type.semanticPrimitives.v',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12),s('type.semanticPrimitives.v',X13),s('type.pair.prod'('type.semanticPrimitives.state'(X9),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.semanticPrimitives.v',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12),s('type.semanticPrimitives.v',X13),s('type.semanticPrimitives.state'(X9),X10))))) | s(bool,X0) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f3702,f540])).
fof(f21550,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~sP3('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9)))),'F_0') | s(bool,X0) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3674,f540])).
fof(f21549,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP5('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f3674,f348])).
fof(f21516,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~sP4('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9)))),'F_0') | s(bool,X0) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3665,f540])).
fof(f21515,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f3665,f349])).
fof(f21468,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9)))),'F_0') | s(bool,X0) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3657,f540])).
fof(f21416,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (~sP1('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9))))) | s(bool,X0) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f3651,f540])).
fof(f21216,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP9('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3297,f540])).
fof(f21183,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP9('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))),X9) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f3292,f540])).
fof(f21143,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP8('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3281,f540])).
fof(f21106,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP7('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))),X9) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f3262,f540])).
fof(f21036,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP7('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.list.list'('type.ast.exp'),X9),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.list.list'('type.ast.exp'),X9),s('type.semanticPrimitives.state'(X7),X8))))) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f3257,f540])).
fof(f21000,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3231,f540])).
fof(f20999,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f3231,f348])).
fof(f20960,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP4('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3222,f540])).
fof(f20959,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f3222,f349])).
fof(f20905,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3214,f540])).
fof(f20799,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP1('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3208,f540])).
fof(f20771,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP9('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2734,f540])).
fof(f20739,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP9('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))),X9) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2729,f540])).
fof(f20558,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP8('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2715,f540])).
fof(f20478,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP7('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))),X9) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2689,f540])).
fof(f20369,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP7('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.ast.exp',X9),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.ast.exp',X9),s('type.semanticPrimitives.state'(X7),X8))))) | s(bool,X0) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f2683,f540])).
fof(f20291,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP3('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2653,f540])).
fof(f20290,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f2653,f348])).
fof(f20211,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP4('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2642,f540])).
fof(f20210,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f2642,f349])).
fof(f20117,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP5('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))),'F_0') | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2633,f540])).
fof(f20023,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~sP1('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f2627,f540])).
fof(f19915,plain,(
  ( ! [X263,X269,X265,X267,X262,X268,X264,X266] : (~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.state'(X263),X264),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.pair.prod'('type.semanticPrimitives.state'(X263),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.semanticPrimitives.state'(X263),X264)))),X268,X269) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.state'(X263),X264),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.pair.prod'('type.semanticPrimitives.state'(X263),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.semanticPrimitives.state'(X263),X264)))),X268,X269)) )),
  inference(subsumption_resolution,[],[f19795,f246])).
fof(f19795,plain,(
  ( ! [X263,X269,X265,X267,X262,X268,X264,X266] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.state'(X263),X264),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.pair.prod'('type.semanticPrimitives.state'(X263),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.semanticPrimitives.state'(X263),X264)))),X268,X269) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.state'(X263),X264),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.pair.prod'('type.semanticPrimitives.state'(X263),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X262),s('type.semanticPrimitives.v',X265),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X266),s('type.semanticPrimitives.v',X267),s('type.semanticPrimitives.state'(X263),X264)))),X268,X269)) )),
  inference(superposition,[],[f405,f3644])).
fof(f19914,plain,(
  ( ! [X255,X261,X257,X259,X260,X254,X256,X258] : (~sP8('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.state'(X255),X256),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.pair.prod'('type.semanticPrimitives.state'(X255),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.semanticPrimitives.state'(X255),X256)))),X260,X261) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.state'(X255),X256),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.pair.prod'('type.semanticPrimitives.state'(X255),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.semanticPrimitives.state'(X255),X256)))),X260,X261)) )),
  inference(subsumption_resolution,[],[f19794,f246])).
fof(f19794,plain,(
  ( ! [X255,X261,X257,X259,X260,X254,X256,X258] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.state'(X255),X256),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.pair.prod'('type.semanticPrimitives.state'(X255),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.semanticPrimitives.state'(X255),X256)))),X260,X261) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.state'(X255),X256),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.pair.prod'('type.semanticPrimitives.state'(X255),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X254),s('type.semanticPrimitives.v',X257),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X258),s('type.semanticPrimitives.v',X259),s('type.semanticPrimitives.state'(X255),X256)))),X260,X261)) )),
  inference(superposition,[],[f404,f3644])).
fof(f19913,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247] : (~p(s(bool,X252)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X246),s('type.semanticPrimitives.state'(X247),X248),s('type.semanticPrimitives.v',X249),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X250),s('type.semanticPrimitives.v',X251),s('type.pair.prod'('type.semanticPrimitives.state'(X247),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X246),s('type.semanticPrimitives.v',X249),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X250),s('type.semanticPrimitives.v',X251),s('type.semanticPrimitives.state'(X247),X248)))),X252,X253)) )),
  inference(subsumption_resolution,[],[f19793,f246])).
fof(f19793,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247] : (~p(s(bool,'T_0')) | ~p(s(bool,X252)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X246),s('type.semanticPrimitives.state'(X247),X248),s('type.semanticPrimitives.v',X249),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X250),s('type.semanticPrimitives.v',X251),s('type.pair.prod'('type.semanticPrimitives.state'(X247),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X246),s('type.semanticPrimitives.v',X249),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X250),s('type.semanticPrimitives.v',X251),s('type.semanticPrimitives.state'(X247),X248)))),X252,X253)) )),
  inference(superposition,[],[f400,f3644])).
fof(f19912,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (p(s(bool,X244)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X238),s('type.semanticPrimitives.state'(X239),X240),s('type.semanticPrimitives.v',X241),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X242),s('type.semanticPrimitives.v',X243),s('type.pair.prod'('type.semanticPrimitives.state'(X239),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X238),s('type.semanticPrimitives.v',X241),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X242),s('type.semanticPrimitives.v',X243),s('type.semanticPrimitives.state'(X239),X240)))),X245,X244)) )),
  inference(subsumption_resolution,[],[f19792,f246])).
fof(f19792,plain,(
  ( ! [X243,X241,X239,X244,X242,X240,X238,X245] : (~p(s(bool,'T_0')) | p(s(bool,X244)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X238),s('type.semanticPrimitives.state'(X239),X240),s('type.semanticPrimitives.v',X241),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X242),s('type.semanticPrimitives.v',X243),s('type.pair.prod'('type.semanticPrimitives.state'(X239),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X238),s('type.semanticPrimitives.v',X241),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X242),s('type.semanticPrimitives.v',X243),s('type.semanticPrimitives.state'(X239),X240)))),X245,X244)) )),
  inference(superposition,[],[f399,f3644])).
fof(f19911,plain,(
  ( ! [X231,X237,X235,X233,X230,X236,X234,X232] : (p(s(bool,X236)) | sP9(X237,X236,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X230),s('type.semanticPrimitives.state'(X231),X232),s('type.semanticPrimitives.v',X233),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X234),s('type.semanticPrimitives.v',X235),s('type.pair.prod'('type.semanticPrimitives.state'(X231),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X230),s('type.semanticPrimitives.v',X233),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X234),s('type.semanticPrimitives.v',X235),s('type.semanticPrimitives.state'(X231),X232))))) | p(s(bool,X237))) )),
  inference(subsumption_resolution,[],[f19791,f246])).
fof(f19791,plain,(
  ( ! [X231,X237,X235,X233,X230,X236,X234,X232] : (~p(s(bool,'T_0')) | p(s(bool,X236)) | sP9(X237,X236,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X230),s('type.semanticPrimitives.state'(X231),X232),s('type.semanticPrimitives.v',X233),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X234),s('type.semanticPrimitives.v',X235),s('type.pair.prod'('type.semanticPrimitives.state'(X231),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X230),s('type.semanticPrimitives.v',X233),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X234),s('type.semanticPrimitives.v',X235),s('type.semanticPrimitives.state'(X231),X232))))) | p(s(bool,X237))) )),
  inference(superposition,[],[f398,f3644])).
fof(f19910,plain,(
  ( ! [X222,X229,X227,X225,X223,X228,X226,X224] : (p(s(bool,X228)) | ~p(s(bool,X229)) | ~sP8(X229,X228,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X222),s('type.semanticPrimitives.state'(X223),X224),s('type.semanticPrimitives.v',X225),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X226),s('type.semanticPrimitives.v',X227),s('type.pair.prod'('type.semanticPrimitives.state'(X223),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X222),s('type.semanticPrimitives.v',X225),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X226),s('type.semanticPrimitives.v',X227),s('type.semanticPrimitives.state'(X223),X224)))))) )),
  inference(subsumption_resolution,[],[f19790,f246])).
fof(f19790,plain,(
  ( ! [X222,X229,X227,X225,X223,X228,X226,X224] : (~p(s(bool,'T_0')) | p(s(bool,X228)) | ~p(s(bool,X229)) | ~sP8(X229,X228,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X222),s('type.semanticPrimitives.state'(X223),X224),s('type.semanticPrimitives.v',X225),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X226),s('type.semanticPrimitives.v',X227),s('type.pair.prod'('type.semanticPrimitives.state'(X223),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X222),s('type.semanticPrimitives.v',X225),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X226),s('type.semanticPrimitives.v',X227),s('type.semanticPrimitives.state'(X223),X224)))))) )),
  inference(superposition,[],[f394,f3644])).
fof(f19909,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221,X214] : (~sP8(X220,X221,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.state'(X215),X216),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.pair.prod'('type.semanticPrimitives.state'(X215),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.semanticPrimitives.state'(X215),X216))))) | p(s(bool,X221)) | sP9(X220,X221,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.state'(X215),X216),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.pair.prod'('type.semanticPrimitives.state'(X215),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.semanticPrimitives.state'(X215),X216)))))) )),
  inference(subsumption_resolution,[],[f19789,f246])).
fof(f19789,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221,X214] : (~p(s(bool,'T_0')) | ~sP8(X220,X221,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.state'(X215),X216),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.pair.prod'('type.semanticPrimitives.state'(X215),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.semanticPrimitives.state'(X215),X216))))) | p(s(bool,X221)) | sP9(X220,X221,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.state'(X215),X216),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.pair.prod'('type.semanticPrimitives.state'(X215),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X214),s('type.semanticPrimitives.v',X217),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X218),s('type.semanticPrimitives.v',X219),s('type.semanticPrimitives.state'(X215),X216)))))) )),
  inference(superposition,[],[f393,f3644])).
fof(f19908,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207] : (~sP8('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.state'(X207),X208),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.pair.prod'('type.semanticPrimitives.state'(X207),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.semanticPrimitives.state'(X207),X208)))),X212,X213) | p(s(bool,X212)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.state'(X207),X208),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.pair.prod'('type.semanticPrimitives.state'(X207),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.semanticPrimitives.state'(X207),X208)))),X212,X213)) )),
  inference(subsumption_resolution,[],[f19788,f246])).
fof(f19788,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.state'(X207),X208),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.pair.prod'('type.semanticPrimitives.state'(X207),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.semanticPrimitives.state'(X207),X208)))),X212,X213) | p(s(bool,X212)) | sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.state'(X207),X208),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.pair.prod'('type.semanticPrimitives.state'(X207),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X206),s('type.semanticPrimitives.v',X209),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X210),s('type.semanticPrimitives.v',X211),s('type.semanticPrimitives.state'(X207),X208)))),X212,X213)) )),
  inference(superposition,[],[f392,f3644])).
fof(f19907,plain,(
  ( ! [X191,X196,X194,X192,X190,X197,X195,X193] : (~p(s(bool,X196)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.semanticPrimitives.v',X193),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X194),s('type.semanticPrimitives.v',X195),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.v',X193),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X194),s('type.semanticPrimitives.v',X195),s('type.semanticPrimitives.state'(X191),X192)))),X196,X197)) )),
  inference(subsumption_resolution,[],[f19786,f246])).
fof(f19786,plain,(
  ( ! [X191,X196,X194,X192,X190,X197,X195,X193] : (~p(s(bool,'T_0')) | ~p(s(bool,X196)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.semanticPrimitives.v',X193),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X194),s('type.semanticPrimitives.v',X195),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.v',X193),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X194),s('type.semanticPrimitives.v',X195),s('type.semanticPrimitives.state'(X191),X192)))),X196,X197)) )),
  inference(superposition,[],[f383,f3644])).
fof(f19906,plain,(
  ( ! [X189,X187,X185,X182,X188,X186,X184,X183] : (~p(s(bool,X188)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X182),s('type.semanticPrimitives.state'(X183),X184),s('type.semanticPrimitives.v',X185),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X186),s('type.semanticPrimitives.v',X187),s('type.pair.prod'('type.semanticPrimitives.state'(X183),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X182),s('type.semanticPrimitives.v',X185),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X186),s('type.semanticPrimitives.v',X187),s('type.semanticPrimitives.state'(X183),X184)))),X189,X188)) )),
  inference(subsumption_resolution,[],[f19785,f246])).
fof(f19785,plain,(
  ( ! [X189,X187,X185,X182,X188,X186,X184,X183] : (~p(s(bool,'T_0')) | ~p(s(bool,X188)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X182),s('type.semanticPrimitives.state'(X183),X184),s('type.semanticPrimitives.v',X185),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X186),s('type.semanticPrimitives.v',X187),s('type.pair.prod'('type.semanticPrimitives.state'(X183),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X182),s('type.semanticPrimitives.v',X185),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X186),s('type.semanticPrimitives.v',X187),s('type.semanticPrimitives.state'(X183),X184)))),X189,X188)) )),
  inference(superposition,[],[f382,f3644])).
fof(f19905,plain,(
  ( ! [X177,X175,X180,X178,X176,X174,X181,X179] : (p(s(bool,X180)) | p(s(bool,X181)) | ~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X174),s('type.semanticPrimitives.state'(X175),X176),s('type.semanticPrimitives.v',X177),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X178),s('type.semanticPrimitives.v',X179),s('type.pair.prod'('type.semanticPrimitives.state'(X175),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X174),s('type.semanticPrimitives.v',X177),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X178),s('type.semanticPrimitives.v',X179),s('type.semanticPrimitives.state'(X175),X176)))),X180,X181)) )),
  inference(subsumption_resolution,[],[f19784,f246])).
fof(f19784,plain,(
  ( ! [X177,X175,X180,X178,X176,X174,X181,X179] : (~p(s(bool,'T_0')) | p(s(bool,X180)) | p(s(bool,X181)) | ~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X174),s('type.semanticPrimitives.state'(X175),X176),s('type.semanticPrimitives.v',X177),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X178),s('type.semanticPrimitives.v',X179),s('type.pair.prod'('type.semanticPrimitives.state'(X175),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X174),s('type.semanticPrimitives.v',X177),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X178),s('type.semanticPrimitives.v',X179),s('type.semanticPrimitives.state'(X175),X176)))),X180,X181)) )),
  inference(superposition,[],[f377,f3644])).
fof(f19904,plain,(
  ( ! [X167,X173,X171,X169,X166,X172,X170,X168] : (~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.semanticPrimitives.state'(X167),X168)))),X172,X173) | p(s(bool,X172)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.semanticPrimitives.state'(X167),X168)))),X172,X173)) )),
  inference(subsumption_resolution,[],[f19783,f246])).
fof(f19783,plain,(
  ( ! [X167,X173,X171,X169,X166,X172,X170,X168] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.semanticPrimitives.state'(X167),X168)))),X172,X173) | p(s(bool,X172)) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.v',X169),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X170),s('type.semanticPrimitives.v',X171),s('type.semanticPrimitives.state'(X167),X168)))),X172,X173)) )),
  inference(superposition,[],[f375,f3644])).
fof(f19903,plain,(
  ( ! [X158,X165,X163,X161,X159,X164,X162,X160] : (~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.state'(X159),X160),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X159),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.semanticPrimitives.state'(X159),X160)))),X164,X165) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.state'(X159),X160),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X159),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.semanticPrimitives.state'(X159),X160)))),X164,X165) | p(s(bool,X165))) )),
  inference(subsumption_resolution,[],[f19782,f246])).
fof(f19782,plain,(
  ( ! [X158,X165,X163,X161,X159,X164,X162,X160] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.state'(X159),X160),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X159),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.semanticPrimitives.state'(X159),X160)))),X164,X165) | sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.state'(X159),X160),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X159),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X158),s('type.semanticPrimitives.v',X161),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X162),s('type.semanticPrimitives.v',X163),s('type.semanticPrimitives.state'(X159),X160)))),X164,X165) | p(s(bool,X165))) )),
  inference(superposition,[],[f374,f3644])).
fof(f19902,plain,(
  ( ! [X156,X154,X152,X151,X157,X155,X153,X150] : (~p(s(bool,X156)) | p(s(bool,X157)) | ~sP3(X156,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X150),s('type.semanticPrimitives.state'(X151),X152),s('type.semanticPrimitives.v',X153),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X154),s('type.semanticPrimitives.v',X155),s('type.pair.prod'('type.semanticPrimitives.state'(X151),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X150),s('type.semanticPrimitives.v',X153),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X154),s('type.semanticPrimitives.v',X155),s('type.semanticPrimitives.state'(X151),X152)))),X157)) )),
  inference(subsumption_resolution,[],[f19781,f246])).
fof(f19781,plain,(
  ( ! [X156,X154,X152,X151,X157,X155,X153,X150] : (~p(s(bool,'T_0')) | ~p(s(bool,X156)) | p(s(bool,X157)) | ~sP3(X156,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X150),s('type.semanticPrimitives.state'(X151),X152),s('type.semanticPrimitives.v',X153),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X154),s('type.semanticPrimitives.v',X155),s('type.pair.prod'('type.semanticPrimitives.state'(X151),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X150),s('type.semanticPrimitives.v',X153),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X154),s('type.semanticPrimitives.v',X155),s('type.semanticPrimitives.state'(X151),X152)))),X157)) )),
  inference(superposition,[],[f358,f3644])).
fof(f19901,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X148] : (~p(s(bool,X148)) | p(s(bool,X149)) | ~sP4(X148,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.semanticPrimitives.v',X145),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X146),s('type.semanticPrimitives.v',X147),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.v',X145),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X146),s('type.semanticPrimitives.v',X147),s('type.semanticPrimitives.state'(X143),X144)))),X149)) )),
  inference(subsumption_resolution,[],[f19780,f246])).
fof(f19780,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X148] : (~p(s(bool,'T_0')) | ~p(s(bool,X148)) | p(s(bool,X149)) | ~sP4(X148,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.semanticPrimitives.v',X145),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X146),s('type.semanticPrimitives.v',X147),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.v',X145),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X146),s('type.semanticPrimitives.v',X147),s('type.semanticPrimitives.state'(X143),X144)))),X149)) )),
  inference(superposition,[],[f354,f3644])).
fof(f19900,plain,(
  ( ! [X140,X138,X136,X135,X141,X139,X137] : (p(s(bool,X141)) | sP1(X141,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X135),s('type.semanticPrimitives.state'(X136),X137),s('type.semanticPrimitives.v',X138),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X139),s('type.semanticPrimitives.v',X140),s('type.pair.prod'('type.semanticPrimitives.state'(X136),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X135),s('type.semanticPrimitives.v',X138),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X139),s('type.semanticPrimitives.v',X140),s('type.semanticPrimitives.state'(X136),X137)))))) )),
  inference(subsumption_resolution,[],[f19779,f246])).
fof(f19779,plain,(
  ( ! [X140,X138,X136,X135,X141,X139,X137] : (~p(s(bool,'T_0')) | p(s(bool,X141)) | sP1(X141,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X135),s('type.semanticPrimitives.state'(X136),X137),s('type.semanticPrimitives.v',X138),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X139),s('type.semanticPrimitives.v',X140),s('type.pair.prod'('type.semanticPrimitives.state'(X136),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X135),s('type.semanticPrimitives.v',X138),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X139),s('type.semanticPrimitives.v',X140),s('type.semanticPrimitives.state'(X136),X137)))))) )),
  inference(superposition,[],[f341,f3644])).
fof(f19899,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (p(s(bool,X134)) | sP1('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X128),s('type.semanticPrimitives.state'(X129),X130),s('type.semanticPrimitives.v',X131),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X132),s('type.semanticPrimitives.v',X133),s('type.pair.prod'('type.semanticPrimitives.state'(X129),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X128),s('type.semanticPrimitives.v',X131),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X132),s('type.semanticPrimitives.v',X133),s('type.semanticPrimitives.state'(X129),X130)))),X134)) )),
  inference(subsumption_resolution,[],[f19778,f246])).
fof(f19778,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (~p(s(bool,'T_0')) | p(s(bool,X134)) | sP1('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X128),s('type.semanticPrimitives.state'(X129),X130),s('type.semanticPrimitives.v',X131),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X132),s('type.semanticPrimitives.v',X133),s('type.pair.prod'('type.semanticPrimitives.state'(X129),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X128),s('type.semanticPrimitives.v',X131),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X132),s('type.semanticPrimitives.v',X133),s('type.semanticPrimitives.state'(X129),X130)))),X134)) )),
  inference(superposition,[],[f338,f3644])).
fof(f19752,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,X0) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3644,f540])).
fof(f19748,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f3644,f369])).
fof(f19672,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP9('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','T_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3741,f540])).
fof(f19594,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3738,f540])).
fof(f19514,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3730,f540])).
fof(f19432,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP8(X1,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))),X8) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3729,f540])).
fof(f19344,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3725,f540])).
fof(f19261,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7) | s(bool,X0) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3709,f540])).
fof(f19178,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP7('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3708,f540])).
fof(f19099,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP6(X1,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))),X8) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3697,f540])).
fof(f19005,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP6(X1,X2,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3696,f540])).
fof(f18915,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP6('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3693,f540])).
fof(f18837,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7) | s(bool,X0) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3689,f540])).
fof(f18724,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~sP7('F_0',X1,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3687,f540])).
fof(f18599,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP2('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7,X8) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3680,f540])).
fof(f18597,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('F_0','F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f424,f421,f3680,f352])).
fof(f18435,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP2(X1,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))),X8) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3679,f540])).
fof(f18420,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f423,f421,f3679,f353])).
fof(f18307,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP2(X1,X2,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3678,f540])).
fof(f18300,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f424,f420,f3678,f352])).
fof(f18078,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP3(X1,X2,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3677,f540])).
fof(f18066,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f419,f3677,f351])).
fof(f18070,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.ast.exp',X9),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.ast.exp',X9),s('type.semanticPrimitives.state'(X7),X8)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f2646,f3677,f351])).
fof(f18072,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.list.list'('type.ast.exp'),X9),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.list.list'('type.ast.exp'),X9),s('type.semanticPrimitives.state'(X7),X8)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f3225,f3677,f351])).
fof(f18073,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f3668,f3677,f351])).
fof(f17996,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3673,f540])).
fof(f17995,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('F_0','T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f3673,f348])).
fof(f17918,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP4(X1,X2,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.v',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7),s('type.semanticPrimitives.v',X8),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f3668,f540])).
fof(f17910,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f422,f427,f3668,f351])).
fof(f17912,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.semanticPrimitives.v',X7),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X8),s('type.semanticPrimitives.v',X9),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.v',X7),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X8),s('type.semanticPrimitives.v',X9),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f2657,f427,f3668,f351])).
fof(f17913,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.semanticPrimitives.v',X7),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X8),s('type.semanticPrimitives.v',X9),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.v',X7),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X8),s('type.semanticPrimitives.v',X9),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f3234,f427,f3668,f351])).
fof(f17822,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3664,f540])).
fof(f17821,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('T_0','F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f3664,f349])).
fof(f17733,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3656,f540])).
fof(f17659,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP1('F_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3653,f540])).
fof(f17620,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP1('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3652,f540])).
fof(f17570,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3650,f540])).
fof(f17497,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP1('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),'T_0') | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3648,f540])).
fof(f17409,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP0('const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7) | s(bool,X0) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3647,f540])).
fof(f17356,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP0(X1,'const.bigStep.evaluate_match_7'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f3646,f540])).
fof(f16860,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.list.list'('type.ast.exp'),X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.list.list'('type.ast.exp'),X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.list.list'('type.ast.exp'),X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.list.list'('type.ast.exp'),X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201)) )),
  inference(subsumption_resolution,[],[f16802,f246])).
fof(f16802,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.list.list'('type.ast.exp'),X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.list.list'('type.ast.exp'),X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.list.list'('type.ast.exp'),X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.list.list'('type.ast.exp'),X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201)) )),
  inference(superposition,[],[f405,f3201])).
fof(f16859,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (~sP8('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.list.list'('type.ast.exp'),X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.list.list'('type.ast.exp'),X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.list.list'('type.ast.exp'),X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.list.list'('type.ast.exp'),X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195)) )),
  inference(subsumption_resolution,[],[f16801,f246])).
fof(f16801,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.list.list'('type.ast.exp'),X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.list.list'('type.ast.exp'),X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.list.list'('type.ast.exp'),X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.list.list'('type.ast.exp'),X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195)) )),
  inference(superposition,[],[f404,f3201])).
fof(f16858,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (~p(s(bool,X188)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.state'(X185),X186),s('type.list.list'('type.ast.exp'),X187),s('type.pair.prod'('type.semanticPrimitives.state'(X185),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.list.list'('type.ast.exp'),X187),s('type.semanticPrimitives.state'(X185),X186)))),X188,X189)) )),
  inference(subsumption_resolution,[],[f16800,f246])).
fof(f16800,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (~p(s(bool,'T_0')) | ~p(s(bool,X188)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.state'(X185),X186),s('type.list.list'('type.ast.exp'),X187),s('type.pair.prod'('type.semanticPrimitives.state'(X185),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.list.list'('type.ast.exp'),X187),s('type.semanticPrimitives.state'(X185),X186)))),X188,X189)) )),
  inference(superposition,[],[f400,f3201])).
fof(f16857,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (p(s(bool,X182)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.semanticPrimitives.state'(X179),X180),s('type.list.list'('type.ast.exp'),X181),s('type.pair.prod'('type.semanticPrimitives.state'(X179),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.list.list'('type.ast.exp'),X181),s('type.semanticPrimitives.state'(X179),X180)))),X183,X182)) )),
  inference(subsumption_resolution,[],[f16799,f246])).
fof(f16799,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (~p(s(bool,'T_0')) | p(s(bool,X182)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.semanticPrimitives.state'(X179),X180),s('type.list.list'('type.ast.exp'),X181),s('type.pair.prod'('type.semanticPrimitives.state'(X179),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.list.list'('type.ast.exp'),X181),s('type.semanticPrimitives.state'(X179),X180)))),X183,X182)) )),
  inference(superposition,[],[f399,f3201])).
fof(f16856,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (p(s(bool,X176)) | sP9(X177,X176,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.state'(X173),X174),s('type.list.list'('type.ast.exp'),X175),s('type.pair.prod'('type.semanticPrimitives.state'(X173),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.list.list'('type.ast.exp'),X175),s('type.semanticPrimitives.state'(X173),X174))))) | p(s(bool,X177))) )),
  inference(subsumption_resolution,[],[f16798,f246])).
fof(f16798,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (~p(s(bool,'T_0')) | p(s(bool,X176)) | sP9(X177,X176,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.state'(X173),X174),s('type.list.list'('type.ast.exp'),X175),s('type.pair.prod'('type.semanticPrimitives.state'(X173),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.list.list'('type.ast.exp'),X175),s('type.semanticPrimitives.state'(X173),X174))))) | p(s(bool,X177))) )),
  inference(superposition,[],[f398,f3201])).
fof(f16855,plain,(
  ( ! [X167,X171,X169,X166,X170,X168] : (p(s(bool,X170)) | ~p(s(bool,X171)) | ~sP8(X171,X170,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.list.list'('type.ast.exp'),X169),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.list.list'('type.ast.exp'),X169),s('type.semanticPrimitives.state'(X167),X168)))))) )),
  inference(subsumption_resolution,[],[f16797,f246])).
fof(f16797,plain,(
  ( ! [X167,X171,X169,X166,X170,X168] : (~p(s(bool,'T_0')) | p(s(bool,X170)) | ~p(s(bool,X171)) | ~sP8(X171,X170,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.list.list'('type.ast.exp'),X169),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.list.list'('type.ast.exp'),X169),s('type.semanticPrimitives.state'(X167),X168)))))) )),
  inference(superposition,[],[f394,f3201])).
fof(f16854,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~sP8(X164,X165,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.list.list'('type.ast.exp'),X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.list.list'('type.ast.exp'),X163),s('type.semanticPrimitives.state'(X161),X162))))) | p(s(bool,X165)) | sP9(X164,X165,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.list.list'('type.ast.exp'),X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.list.list'('type.ast.exp'),X163),s('type.semanticPrimitives.state'(X161),X162)))))) )),
  inference(subsumption_resolution,[],[f16796,f246])).
fof(f16796,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~p(s(bool,'T_0')) | ~sP8(X164,X165,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.list.list'('type.ast.exp'),X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.list.list'('type.ast.exp'),X163),s('type.semanticPrimitives.state'(X161),X162))))) | p(s(bool,X165)) | sP9(X164,X165,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.list.list'('type.ast.exp'),X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.list.list'('type.ast.exp'),X163),s('type.semanticPrimitives.state'(X161),X162)))))) )),
  inference(superposition,[],[f393,f3201])).
fof(f16853,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~sP8('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.list.list'('type.ast.exp'),X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.list.list'('type.ast.exp'),X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159) | p(s(bool,X158)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.list.list'('type.ast.exp'),X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.list.list'('type.ast.exp'),X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159)) )),
  inference(subsumption_resolution,[],[f16795,f246])).
fof(f16795,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.list.list'('type.ast.exp'),X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.list.list'('type.ast.exp'),X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159) | p(s(bool,X158)) | sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.list.list'('type.ast.exp'),X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.list.list'('type.ast.exp'),X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159)) )),
  inference(superposition,[],[f392,f3201])).
fof(f16852,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (~p(s(bool,X146)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.list.list'('type.ast.exp'),X145),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.list.list'('type.ast.exp'),X145),s('type.semanticPrimitives.state'(X143),X144)))),X146,X147)) )),
  inference(subsumption_resolution,[],[f16793,f246])).
fof(f16793,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (~p(s(bool,'T_0')) | ~p(s(bool,X146)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.list.list'('type.ast.exp'),X145),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.list.list'('type.ast.exp'),X145),s('type.semanticPrimitives.state'(X143),X144)))),X146,X147)) )),
  inference(superposition,[],[f383,f3201])).
fof(f16851,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (~p(s(bool,X140)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.semanticPrimitives.state'(X137),X138),s('type.list.list'('type.ast.exp'),X139),s('type.pair.prod'('type.semanticPrimitives.state'(X137),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.list.list'('type.ast.exp'),X139),s('type.semanticPrimitives.state'(X137),X138)))),X141,X140)) )),
  inference(subsumption_resolution,[],[f16792,f246])).
fof(f16792,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,X140)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.semanticPrimitives.state'(X137),X138),s('type.list.list'('type.ast.exp'),X139),s('type.pair.prod'('type.semanticPrimitives.state'(X137),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.list.list'('type.ast.exp'),X139),s('type.semanticPrimitives.state'(X137),X138)))),X141,X140)) )),
  inference(superposition,[],[f382,f3201])).
fof(f16850,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (p(s(bool,X134)) | p(s(bool,X135)) | ~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.state'(X131),X132),s('type.list.list'('type.ast.exp'),X133),s('type.pair.prod'('type.semanticPrimitives.state'(X131),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.list.list'('type.ast.exp'),X133),s('type.semanticPrimitives.state'(X131),X132)))),X134,X135)) )),
  inference(subsumption_resolution,[],[f16791,f246])).
fof(f16791,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (~p(s(bool,'T_0')) | p(s(bool,X134)) | p(s(bool,X135)) | ~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.state'(X131),X132),s('type.list.list'('type.ast.exp'),X133),s('type.pair.prod'('type.semanticPrimitives.state'(X131),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.list.list'('type.ast.exp'),X133),s('type.semanticPrimitives.state'(X131),X132)))),X134,X135)) )),
  inference(superposition,[],[f377,f3201])).
fof(f16849,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.list.list'('type.ast.exp'),X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.list.list'('type.ast.exp'),X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129) | p(s(bool,X128)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.list.list'('type.ast.exp'),X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.list.list'('type.ast.exp'),X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129)) )),
  inference(subsumption_resolution,[],[f16790,f246])).
fof(f16790,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.list.list'('type.ast.exp'),X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.list.list'('type.ast.exp'),X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129) | p(s(bool,X128)) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.list.list'('type.ast.exp'),X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.list.list'('type.ast.exp'),X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129)) )),
  inference(superposition,[],[f375,f3201])).
fof(f16848,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.list.list'('type.ast.exp'),X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.list.list'('type.ast.exp'),X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.list.list'('type.ast.exp'),X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.list.list'('type.ast.exp'),X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | p(s(bool,X123))) )),
  inference(subsumption_resolution,[],[f16789,f246])).
fof(f16789,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.list.list'('type.ast.exp'),X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.list.list'('type.ast.exp'),X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.list.list'('type.ast.exp'),X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.list.list'('type.ast.exp'),X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | p(s(bool,X123))) )),
  inference(superposition,[],[f374,f3201])).
fof(f16847,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,X116)) | p(s(bool,X117)) | ~sP3(X116,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.semanticPrimitives.state'(X113),X114),s('type.list.list'('type.ast.exp'),X115),s('type.pair.prod'('type.semanticPrimitives.state'(X113),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.list.list'('type.ast.exp'),X115),s('type.semanticPrimitives.state'(X113),X114)))),X117)) )),
  inference(subsumption_resolution,[],[f16788,f246])).
fof(f16788,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X116)) | p(s(bool,X117)) | ~sP3(X116,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.semanticPrimitives.state'(X113),X114),s('type.list.list'('type.ast.exp'),X115),s('type.pair.prod'('type.semanticPrimitives.state'(X113),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.list.list'('type.ast.exp'),X115),s('type.semanticPrimitives.state'(X113),X114)))),X117)) )),
  inference(superposition,[],[f358,f3201])).
fof(f16846,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,X110)) | p(s(bool,X111)) | ~sP4(X110,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.semanticPrimitives.state'(X107),X108),s('type.list.list'('type.ast.exp'),X109),s('type.pair.prod'('type.semanticPrimitives.state'(X107),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.list.list'('type.ast.exp'),X109),s('type.semanticPrimitives.state'(X107),X108)))),X111)) )),
  inference(subsumption_resolution,[],[f16787,f246])).
fof(f16787,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,'T_0')) | ~p(s(bool,X110)) | p(s(bool,X111)) | ~sP4(X110,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.semanticPrimitives.state'(X107),X108),s('type.list.list'('type.ast.exp'),X109),s('type.pair.prod'('type.semanticPrimitives.state'(X107),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.list.list'('type.ast.exp'),X109),s('type.semanticPrimitives.state'(X107),X108)))),X111)) )),
  inference(superposition,[],[f354,f3201])).
fof(f16845,plain,(
  ( ! [X103,X101,X105,X102,X104] : (p(s(bool,X105)) | sP1(X105,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.semanticPrimitives.state'(X102),X103),s('type.list.list'('type.ast.exp'),X104),s('type.pair.prod'('type.semanticPrimitives.state'(X102),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.list.list'('type.ast.exp'),X104),s('type.semanticPrimitives.state'(X102),X103)))))) )),
  inference(subsumption_resolution,[],[f16786,f246])).
fof(f16786,plain,(
  ( ! [X103,X101,X105,X102,X104] : (~p(s(bool,'T_0')) | p(s(bool,X105)) | sP1(X105,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.semanticPrimitives.state'(X102),X103),s('type.list.list'('type.ast.exp'),X104),s('type.pair.prod'('type.semanticPrimitives.state'(X102),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.list.list'('type.ast.exp'),X104),s('type.semanticPrimitives.state'(X102),X103)))))) )),
  inference(superposition,[],[f341,f3201])).
fof(f16844,plain,(
  ( ! [X99,X97,X100,X98,X96] : (p(s(bool,X100)) | sP1('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.state'(X97),X98),s('type.list.list'('type.ast.exp'),X99),s('type.pair.prod'('type.semanticPrimitives.state'(X97),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.list.list'('type.ast.exp'),X99),s('type.semanticPrimitives.state'(X97),X98)))),X100)) )),
  inference(subsumption_resolution,[],[f16785,f246])).
fof(f16785,plain,(
  ( ! [X99,X97,X100,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X100)) | sP1('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.state'(X97),X98),s('type.list.list'('type.ast.exp'),X99),s('type.pair.prod'('type.semanticPrimitives.state'(X97),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.list.list'('type.ast.exp'),X99),s('type.semanticPrimitives.state'(X97),X98)))),X100)) )),
  inference(superposition,[],[f338,f3201])).
fof(f16759,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3201,f540])).
fof(f16755,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f3201,f369])).
fof(f16704,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','T_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3296,f540])).
fof(f16652,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3293,f540])).
fof(f16568,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3285,f540])).
fof(f16493,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP8(X1,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3284,f540])).
fof(f16347,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3280,f540])).
fof(f16084,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3264,f540])).
fof(f16035,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3263,f540])).
fof(f15993,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X1,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3252,f540])).
fof(f15940,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X1,X2,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.list.list'('type.ast.exp'),X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3251,f540])).
fof(f15881,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3248,f540])).
fof(f15843,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3244,f540])).
fof(f1313,plain,(
  ( ! [X189,X187,X190,X188] : (~p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X189)))) | p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X190)))) | ~p(s(bool,X188)) | s(bool,'T_0') = s(bool,X189) | s(bool,'T_0') = s(bool,sK15(X187,X188,bool))) )),
  inference(superposition,[],[f290,f540])).
fof(f10210,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK15(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f10203,f246])).
fof(f10203,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | ~p(s(bool,X5)) | s(bool,'T_0') = s(bool,sK15(X3,X5,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1045,f540])).
fof(f1045,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,X1)) | s(bool,'T_0') = s(bool,sK15(X0,X1,bool))) )),
  inference(superposition,[],[f290,f253])).
fof(f11711,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | $spl69),
  inference(trivial_inequality_removal,[],[f11705])).
fof(f11705,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,f(s(bool,X1)))) ) | $spl69),
  inference(superposition,[],[f8389,f253])).
fof(f11677,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0',X1,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3242,f540])).
fof(f11610,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5,X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3237,f540])).
fof(f11608,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('F_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f424,f421,f3237,f352])).
fof(f11540,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X1,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3236,f540])).
fof(f11526,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f423,f421,f3236,f353])).
fof(f11457,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X1,X2,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.list.list'('type.ast.exp'),X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3235,f540])).
fof(f11451,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f424,f420,f3235,f352])).
fof(f11384,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP3(X1,X2,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.list.list'('type.ast.exp'),X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3234,f540])).
fof(f11375,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f419,f3234,f351])).
fof(f11379,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f2646,f3234,f351])).
fof(f11380,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f3225,f3234,f351])).
fof(f11311,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3230,f540])).
fof(f11310,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f3230,f348])).
fof(f11240,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP4(X1,X2,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.list.list'('type.ast.exp'),X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3225,f540])).
fof(f11234,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f422,f427,f3225,f351])).
fof(f11236,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f2657,f427,f3225,f351])).
fof(f11162,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3221,f540])).
fof(f11161,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f3221,f349])).
fof(f11093,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3213,f540])).
fof(f11031,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.ast.exp',X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.ast.exp',X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.ast.exp',X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.ast.exp',X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201)) )),
  inference(subsumption_resolution,[],[f10955,f246])).
fof(f10955,plain,(
  ( ! [X198,X196,X200,X199,X197,X201] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.ast.exp',X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.ast.exp',X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.semanticPrimitives.state'(X197),X198),s('type.ast.exp',X199),s('type.pair.prod'('type.semanticPrimitives.state'(X197),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X196),s('type.ast.exp',X199),s('type.semanticPrimitives.state'(X197),X198)))),X200,X201)) )),
  inference(superposition,[],[f405,f2620])).
fof(f11030,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (~sP8('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.ast.exp',X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.ast.exp',X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.ast.exp',X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.ast.exp',X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195)) )),
  inference(subsumption_resolution,[],[f10954,f246])).
fof(f10954,plain,(
  ( ! [X191,X194,X192,X190,X195,X193] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.ast.exp',X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.ast.exp',X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.semanticPrimitives.state'(X191),X192),s('type.ast.exp',X193),s('type.pair.prod'('type.semanticPrimitives.state'(X191),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X190),s('type.ast.exp',X193),s('type.semanticPrimitives.state'(X191),X192)))),X194,X195)) )),
  inference(superposition,[],[f404,f2620])).
fof(f11029,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (~p(s(bool,X188)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.state'(X185),X186),s('type.ast.exp',X187),s('type.pair.prod'('type.semanticPrimitives.state'(X185),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.ast.exp',X187),s('type.semanticPrimitives.state'(X185),X186)))),X188,X189)) )),
  inference(subsumption_resolution,[],[f10953,f246])).
fof(f10953,plain,(
  ( ! [X189,X187,X185,X188,X186,X184] : (~p(s(bool,'T_0')) | ~p(s(bool,X188)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.semanticPrimitives.state'(X185),X186),s('type.ast.exp',X187),s('type.pair.prod'('type.semanticPrimitives.state'(X185),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X184),s('type.ast.exp',X187),s('type.semanticPrimitives.state'(X185),X186)))),X188,X189)) )),
  inference(superposition,[],[f400,f2620])).
fof(f11028,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (p(s(bool,X182)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.semanticPrimitives.state'(X179),X180),s('type.ast.exp',X181),s('type.pair.prod'('type.semanticPrimitives.state'(X179),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.ast.exp',X181),s('type.semanticPrimitives.state'(X179),X180)))),X183,X182)) )),
  inference(subsumption_resolution,[],[f10952,f246])).
fof(f10952,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (~p(s(bool,'T_0')) | p(s(bool,X182)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.semanticPrimitives.state'(X179),X180),s('type.ast.exp',X181),s('type.pair.prod'('type.semanticPrimitives.state'(X179),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X178),s('type.ast.exp',X181),s('type.semanticPrimitives.state'(X179),X180)))),X183,X182)) )),
  inference(superposition,[],[f399,f2620])).
fof(f11027,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (p(s(bool,X176)) | sP9(X177,X176,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.state'(X173),X174),s('type.ast.exp',X175),s('type.pair.prod'('type.semanticPrimitives.state'(X173),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.ast.exp',X175),s('type.semanticPrimitives.state'(X173),X174))))) | p(s(bool,X177))) )),
  inference(subsumption_resolution,[],[f10951,f246])).
fof(f10951,plain,(
  ( ! [X177,X175,X173,X176,X174,X172] : (~p(s(bool,'T_0')) | p(s(bool,X176)) | sP9(X177,X176,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.semanticPrimitives.state'(X173),X174),s('type.ast.exp',X175),s('type.pair.prod'('type.semanticPrimitives.state'(X173),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X172),s('type.ast.exp',X175),s('type.semanticPrimitives.state'(X173),X174))))) | p(s(bool,X177))) )),
  inference(superposition,[],[f398,f2620])).
fof(f11026,plain,(
  ( ! [X167,X171,X169,X166,X170,X168] : (p(s(bool,X170)) | ~p(s(bool,X171)) | ~sP8(X171,X170,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.ast.exp',X169),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.ast.exp',X169),s('type.semanticPrimitives.state'(X167),X168)))))) )),
  inference(subsumption_resolution,[],[f10950,f246])).
fof(f10950,plain,(
  ( ! [X167,X171,X169,X166,X170,X168] : (~p(s(bool,'T_0')) | p(s(bool,X170)) | ~p(s(bool,X171)) | ~sP8(X171,X170,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.ast.exp',X169),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.ast.exp',X169),s('type.semanticPrimitives.state'(X167),X168)))))) )),
  inference(superposition,[],[f394,f2620])).
fof(f11025,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~sP8(X164,X165,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.ast.exp',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.ast.exp',X163),s('type.semanticPrimitives.state'(X161),X162))))) | p(s(bool,X165)) | sP9(X164,X165,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.ast.exp',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.ast.exp',X163),s('type.semanticPrimitives.state'(X161),X162)))))) )),
  inference(subsumption_resolution,[],[f10949,f246])).
fof(f10949,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~p(s(bool,'T_0')) | ~sP8(X164,X165,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.ast.exp',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.ast.exp',X163),s('type.semanticPrimitives.state'(X161),X162))))) | p(s(bool,X165)) | sP9(X164,X165,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.semanticPrimitives.state'(X161),X162),s('type.ast.exp',X163),s('type.pair.prod'('type.semanticPrimitives.state'(X161),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X160),s('type.ast.exp',X163),s('type.semanticPrimitives.state'(X161),X162)))))) )),
  inference(superposition,[],[f393,f2620])).
fof(f11024,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~sP8('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.ast.exp',X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.ast.exp',X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159) | p(s(bool,X158)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.ast.exp',X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.ast.exp',X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159)) )),
  inference(subsumption_resolution,[],[f10948,f246])).
fof(f10948,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~p(s(bool,'T_0')) | ~sP8('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.ast.exp',X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.ast.exp',X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159) | p(s(bool,X158)) | sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.semanticPrimitives.state'(X155),X156),s('type.ast.exp',X157),s('type.pair.prod'('type.semanticPrimitives.state'(X155),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X154),s('type.ast.exp',X157),s('type.semanticPrimitives.state'(X155),X156)))),X158,X159)) )),
  inference(superposition,[],[f392,f2620])).
fof(f11023,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (~p(s(bool,X146)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.ast.exp',X145),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.ast.exp',X145),s('type.semanticPrimitives.state'(X143),X144)))),X146,X147)) )),
  inference(subsumption_resolution,[],[f10946,f246])).
fof(f10946,plain,(
  ( ! [X146,X144,X142,X147,X145,X143] : (~p(s(bool,'T_0')) | ~p(s(bool,X146)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.semanticPrimitives.state'(X143),X144),s('type.ast.exp',X145),s('type.pair.prod'('type.semanticPrimitives.state'(X143),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X142),s('type.ast.exp',X145),s('type.semanticPrimitives.state'(X143),X144)))),X146,X147)) )),
  inference(superposition,[],[f383,f2620])).
fof(f11022,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (~p(s(bool,X140)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.semanticPrimitives.state'(X137),X138),s('type.ast.exp',X139),s('type.pair.prod'('type.semanticPrimitives.state'(X137),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.ast.exp',X139),s('type.semanticPrimitives.state'(X137),X138)))),X141,X140)) )),
  inference(subsumption_resolution,[],[f10945,f246])).
fof(f10945,plain,(
  ( ! [X140,X138,X136,X141,X139,X137] : (~p(s(bool,'T_0')) | ~p(s(bool,X140)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.semanticPrimitives.state'(X137),X138),s('type.ast.exp',X139),s('type.pair.prod'('type.semanticPrimitives.state'(X137),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X136),s('type.ast.exp',X139),s('type.semanticPrimitives.state'(X137),X138)))),X141,X140)) )),
  inference(superposition,[],[f382,f2620])).
fof(f11021,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (p(s(bool,X134)) | p(s(bool,X135)) | ~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.state'(X131),X132),s('type.ast.exp',X133),s('type.pair.prod'('type.semanticPrimitives.state'(X131),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.ast.exp',X133),s('type.semanticPrimitives.state'(X131),X132)))),X134,X135)) )),
  inference(subsumption_resolution,[],[f10944,f246])).
fof(f10944,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (~p(s(bool,'T_0')) | p(s(bool,X134)) | p(s(bool,X135)) | ~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.semanticPrimitives.state'(X131),X132),s('type.ast.exp',X133),s('type.pair.prod'('type.semanticPrimitives.state'(X131),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X130),s('type.ast.exp',X133),s('type.semanticPrimitives.state'(X131),X132)))),X134,X135)) )),
  inference(superposition,[],[f377,f2620])).
fof(f11020,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.ast.exp',X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.ast.exp',X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129) | p(s(bool,X128)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.ast.exp',X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.ast.exp',X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129)) )),
  inference(subsumption_resolution,[],[f10943,f246])).
fof(f10943,plain,(
  ( ! [X127,X125,X128,X126,X124,X129] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.ast.exp',X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.ast.exp',X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129) | p(s(bool,X128)) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.ast.exp',X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.ast.exp',X127),s('type.semanticPrimitives.state'(X125),X126)))),X128,X129)) )),
  inference(superposition,[],[f375,f2620])).
fof(f11019,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.ast.exp',X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.ast.exp',X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.ast.exp',X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.ast.exp',X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | p(s(bool,X123))) )),
  inference(subsumption_resolution,[],[f10942,f246])).
fof(f10942,plain,(
  ( ! [X123,X121,X118,X122,X120,X119] : (~p(s(bool,'T_0')) | ~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.ast.exp',X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.ast.exp',X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.ast.exp',X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.ast.exp',X121),s('type.semanticPrimitives.state'(X119),X120)))),X122,X123) | p(s(bool,X123))) )),
  inference(superposition,[],[f374,f2620])).
fof(f11018,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,X116)) | p(s(bool,X117)) | ~sP3(X116,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.semanticPrimitives.state'(X113),X114),s('type.ast.exp',X115),s('type.pair.prod'('type.semanticPrimitives.state'(X113),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.ast.exp',X115),s('type.semanticPrimitives.state'(X113),X114)))),X117)) )),
  inference(subsumption_resolution,[],[f10941,f246])).
fof(f10941,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | ~p(s(bool,X116)) | p(s(bool,X117)) | ~sP3(X116,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.semanticPrimitives.state'(X113),X114),s('type.ast.exp',X115),s('type.pair.prod'('type.semanticPrimitives.state'(X113),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X112),s('type.ast.exp',X115),s('type.semanticPrimitives.state'(X113),X114)))),X117)) )),
  inference(superposition,[],[f358,f2620])).
fof(f11017,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,X110)) | p(s(bool,X111)) | ~sP4(X110,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.semanticPrimitives.state'(X107),X108),s('type.ast.exp',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X107),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.ast.exp',X109),s('type.semanticPrimitives.state'(X107),X108)))),X111)) )),
  inference(subsumption_resolution,[],[f10940,f246])).
fof(f10940,plain,(
  ( ! [X111,X109,X107,X110,X108,X106] : (~p(s(bool,'T_0')) | ~p(s(bool,X110)) | p(s(bool,X111)) | ~sP4(X110,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.semanticPrimitives.state'(X107),X108),s('type.ast.exp',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X107),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X106),s('type.ast.exp',X109),s('type.semanticPrimitives.state'(X107),X108)))),X111)) )),
  inference(superposition,[],[f354,f2620])).
fof(f11016,plain,(
  ( ! [X103,X101,X105,X102,X104] : (p(s(bool,X105)) | sP1(X105,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.semanticPrimitives.state'(X102),X103),s('type.ast.exp',X104),s('type.pair.prod'('type.semanticPrimitives.state'(X102),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.ast.exp',X104),s('type.semanticPrimitives.state'(X102),X103)))))) )),
  inference(subsumption_resolution,[],[f10939,f246])).
fof(f10939,plain,(
  ( ! [X103,X101,X105,X102,X104] : (~p(s(bool,'T_0')) | p(s(bool,X105)) | sP1(X105,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.semanticPrimitives.state'(X102),X103),s('type.ast.exp',X104),s('type.pair.prod'('type.semanticPrimitives.state'(X102),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X101),s('type.ast.exp',X104),s('type.semanticPrimitives.state'(X102),X103)))))) )),
  inference(superposition,[],[f341,f2620])).
fof(f11015,plain,(
  ( ! [X99,X97,X100,X98,X96] : (p(s(bool,X100)) | sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.state'(X97),X98),s('type.ast.exp',X99),s('type.pair.prod'('type.semanticPrimitives.state'(X97),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.ast.exp',X99),s('type.semanticPrimitives.state'(X97),X98)))),X100)) )),
  inference(subsumption_resolution,[],[f10938,f246])).
fof(f10938,plain,(
  ( ! [X99,X97,X100,X98,X96] : (~p(s(bool,'T_0')) | p(s(bool,X100)) | sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.semanticPrimitives.state'(X97),X98),s('type.ast.exp',X99),s('type.pair.prod'('type.semanticPrimitives.state'(X97),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X96),s('type.ast.exp',X99),s('type.semanticPrimitives.state'(X97),X98)))),X100)) )),
  inference(superposition,[],[f338,f2620])).
fof(f10912,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,X0) = s(bool,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2620,f540])).
fof(f10908,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f2620,f369])).
fof(f10846,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('F_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3210,f540])).
fof(f10784,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3209,f540])).
fof(f10721,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3207,f540])).
fof(f10656,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),'T_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f3205,f540])).
fof(f10592,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0('const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3204,f540])).
fof(f10530,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0(X1,'const.bigStep.evaluate_list_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f3203,f540])).
fof(f10132,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','T_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2733,f540])).
fof(f10066,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2730,f540])).
fof(f9998,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2720,f540])).
fof(f9983,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8(X1,X2,f(s(bool,X0))) | p(s(bool,X2)) | sP9(X1,X2,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8950,f540])).
fof(f9953,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP8(X1,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2719,f540])).
fof(f9952,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl69),
  inference(unit_resulting_resolution,[],[f2719,f8955])).
fof(f9908,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2714,f540])).
fof(f9616,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2691,f540])).
fof(f9599,plain,(
  ( ! [X0,X1] : (sP9('F_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9583,f540])).
fof(f9587,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(X1,X2,f(s(bool,X0))) | p(s(bool,X2)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8952,f540])).
fof(f9583,plain,(
  sP9('F_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f415,f8952])).
fof(f9574,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2690,f540])).
fof(f9562,plain,(
  ( ! [X0,X1] : (~sP9('T_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9545,f540])).
fof(f9546,plain,(
  ( ! [X0,X1] : (~sP8('T_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9504,f540])).
fof(f9545,plain,(
  ~sP9('T_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f9504,f389])).
fof(f9530,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X1,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2677,f540])).
fof(f9529,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl69),
  inference(unit_resulting_resolution,[],[f2677,f8956])).
fof(f9508,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8(X1,X2,f(s(bool,X0))) | ~p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8951,f540])).
fof(f9504,plain,(
  ~sP8('T_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f246,f8951])).
fof(f9495,plain,(
  ( ! [X0,X1] : (~sP7(f(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9455,f540])).
fof(f9478,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X1,X2,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.ast.exp',X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2676,f540])).
fof(f9477,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7(f(s(bool,'T_0')),X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))))) ) | $spl69),
  inference(unit_resulting_resolution,[],[f2676,f8956])).
fof(f9456,plain,(
  ( ! [X0,X1] : (~sP6(f(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9437,f540])).
fof(f9455,plain,(
  ~sP7(f(s(bool,'T_0')),'F_0','F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f9437,f372])).
fof(f9442,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(f(s(bool,X0)),X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8946,f540])).
fof(f9437,plain,(
  ~sP6(f(s(bool,'T_0')),'F_0','F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f415,f8946])).
fof(f9428,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0','F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2673,f540])).
fof(f9414,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3(X1,f(s(bool,X0)),X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8943,f540])).
fof(f9399,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4(X1,f(s(bool,X0)),X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8942,f540])).
fof(f9384,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2669,f540])).
fof(f9371,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(f(s(bool,X0)),X1,X2) | ~sP6(f(s(bool,'T_0')),X1,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8956,f540])).
fof(f9359,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(f(s(bool,X0)),X1,X2) | ~sP8(f(s(bool,'T_0')),X1,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8955,f540])).
fof(f9346,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0',X1,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2667,f540])).
fof(f9331,plain,(
  ( ! [X2,X0,X1] : (sP9(f(s(bool,X0)),'T_0',X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f9319,f540])).
fof(f9320,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(f(s(bool,X0)),X1,X2) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8954,f540])).
fof(f9319,plain,(
  ( ! [X0] : (sP9(f(s(bool,'T_0')),'T_0',X0)) ) | $spl69),
  inference(unit_resulting_resolution,[],[f246,f8954])).
fof(f9310,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5,X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2660,f540])).
fof(f9308,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('F_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f424,f421,f2660,f352])).
fof(f9297,plain,(
  ( ! [X2,X0,X1] : (sP9(f(s(bool,X0)),X1,'F_0') | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f9285,f540])).
fof(f9286,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(f(s(bool,X0)),X1,X2) | p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8953,f540])).
fof(f9285,plain,(
  ( ! [X0] : (sP9(f(s(bool,'T_0')),X0,'F_0')) ) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f8953])).
fof(f9272,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X1,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))),X6) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2659,f540])).
fof(f9259,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f423,f421,f2659,f353])).
fof(f9243,plain,(
  ( ! [X2,X0,X1] : (sP7(f(s(bool,X0)),'T_0',X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f9231,f540])).
fof(f9232,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(f(s(bool,X0)),X1,X2) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8948,f540])).
fof(f9231,plain,(
  ( ! [X0] : (sP7(f(s(bool,'T_0')),'T_0',X0)) ) | $spl69),
  inference(unit_resulting_resolution,[],[f246,f8948])).
fof(f9222,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X1,X2,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.ast.exp',X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2658,f540])).
fof(f9217,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f424,f420,f2658,f352])).
fof(f9205,plain,(
  ( ! [X2,X0,X1] : (sP7(f(s(bool,X0)),X1,'T_0') | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f9193,f540])).
fof(f9194,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(f(s(bool,X0)),X1,X2) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl69),
  inference(superposition,[],[f8947,f540])).
fof(f9193,plain,(
  ( ! [X0] : (sP7(f(s(bool,'T_0')),X0,'T_0')) ) | $spl69),
  inference(unit_resulting_resolution,[],[f246,f8947])).
fof(f9183,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP3(X1,X2,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.ast.exp',X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2657,f540])).
fof(f9177,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f419,f2657,f351])).
fof(f9180,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f427,f2646,f2657,f351])).
fof(f9167,plain,(
  ( ! [X0,X1] : (sP1('F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9157,f540])).
fof(f9158,plain,(
  ( ! [X2,X0,X1] : (sP1(X1,f(s(bool,X0))) | p(s(bool,X1)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f8941,f540])).
fof(f9157,plain,(
  sP1('F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f8941])).
fof(f9148,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2652,f540])).
fof(f9147,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('F_0','T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f2652,f348])).
fof(f9135,plain,(
  ( ! [X0,X1] : (sP1(f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9125,f540])).
fof(f9126,plain,(
  ( ! [X2,X0,X1] : (sP1(f(s(bool,X0)),X1) | p(s(bool,X1)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f8940,f540])).
fof(f9125,plain,(
  sP1(f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f8940])).
fof(f9113,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP4(X1,X2,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.semanticPrimitives.state'(X4),X5),s('type.ast.exp',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X4),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.ast.exp',X6),s('type.semanticPrimitives.state'(X4),X5))))) | s(bool,X0) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f2646,f540])).
fof(f9109,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f422,f427,f2646,f351])).
fof(f9092,plain,(
  ( ! [X0,X1] : (~sP3('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f9004,f540])).
fof(f9078,plain,(
  ( ! [X0,X1] : (sP4('T_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8993,f540])).
fof(f9066,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2641,f540])).
fof(f9065,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f2641,f349])).
fof(f9053,plain,(
  ( ! [X0,X1] : (~sP3(f(s(bool,X0)),'T_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8958,f540])).
fof(f9040,plain,(
  ( ! [X0,X1] : (sP5('T_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8870,f540])).
fof(f9007,plain,(
  ( ! [X0,X1] : (~sP5('F_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8869,f540])).
fof(f9004,plain,(
  ~sP3('T_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f426,f421,f8869,f353])).
fof(f8996,plain,(
  ( ! [X0,X1] : (sP5('T_0',f(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8868,f540])).
fof(f8993,plain,(
  sP4('T_0','T_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f8868,f349])).
fof(f8961,plain,(
  ( ! [X0,X1] : (~sP5('F_0',f(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8867,f540])).
fof(f8958,plain,(
  ~sP3(f(s(bool,'T_0')),'T_0','F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f246,f427,f421,f8867,f351])).
fof(f8956,plain,(
  ( ! [X56,X55] : (sP7(f(s(bool,'T_0')),X55,X56) | ~sP6(f(s(bool,'T_0')),X55,X56)) ) | $spl69),
  inference(subsumption_resolution,[],[f8911,f246])).
fof(f8911,plain,(
  ( ! [X56,X55] : (~p(s(bool,'T_0')) | ~sP6(f(s(bool,'T_0')),X55,X56) | sP7(f(s(bool,'T_0')),X55,X56)) ) | $spl69),
  inference(superposition,[],[f405,f8386])).
fof(f8955,plain,(
  ( ! [X54,X53] : (sP9(f(s(bool,'T_0')),X53,X54) | ~sP8(f(s(bool,'T_0')),X53,X54)) ) | $spl69),
  inference(subsumption_resolution,[],[f8910,f246])).
fof(f8910,plain,(
  ( ! [X54,X53] : (~p(s(bool,'T_0')) | ~sP8(f(s(bool,'T_0')),X53,X54) | sP9(f(s(bool,'T_0')),X53,X54)) ) | $spl69),
  inference(superposition,[],[f404,f8386])).
fof(f8954,plain,(
  ( ! [X52,X51] : (sP9(f(s(bool,'T_0')),X51,X52) | ~p(s(bool,X51))) ) | $spl69),
  inference(subsumption_resolution,[],[f8909,f246])).
fof(f8909,plain,(
  ( ! [X52,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,X51)) | sP9(f(s(bool,'T_0')),X51,X52)) ) | $spl69),
  inference(superposition,[],[f400,f8386])).
fof(f8953,plain,(
  ( ! [X50,X49] : (sP9(f(s(bool,'T_0')),X50,X49) | p(s(bool,X49))) ) | $spl69),
  inference(subsumption_resolution,[],[f8908,f246])).
fof(f8908,plain,(
  ( ! [X50,X49] : (~p(s(bool,'T_0')) | p(s(bool,X49)) | sP9(f(s(bool,'T_0')),X50,X49)) ) | $spl69),
  inference(superposition,[],[f399,f8386])).
fof(f8952,plain,(
  ( ! [X47,X48] : (sP9(X48,X47,f(s(bool,'T_0'))) | p(s(bool,X47)) | p(s(bool,X48))) ) | $spl69),
  inference(subsumption_resolution,[],[f8907,f246])).
fof(f8907,plain,(
  ( ! [X47,X48] : (~p(s(bool,'T_0')) | p(s(bool,X47)) | sP9(X48,X47,f(s(bool,'T_0'))) | p(s(bool,X48))) ) | $spl69),
  inference(superposition,[],[f398,f8386])).
fof(f8951,plain,(
  ( ! [X45,X46] : (~sP8(X46,X45,f(s(bool,'T_0'))) | ~p(s(bool,X46)) | p(s(bool,X45))) ) | $spl69),
  inference(subsumption_resolution,[],[f8906,f246])).
fof(f8906,plain,(
  ( ! [X45,X46] : (~p(s(bool,'T_0')) | p(s(bool,X45)) | ~p(s(bool,X46)) | ~sP8(X46,X45,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f394,f8386])).
fof(f8950,plain,(
  ( ! [X43,X44] : (~sP8(X43,X44,f(s(bool,'T_0'))) | p(s(bool,X44)) | sP9(X43,X44,f(s(bool,'T_0')))) ) | $spl69),
  inference(subsumption_resolution,[],[f8905,f246])).
fof(f8905,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | ~sP8(X43,X44,f(s(bool,'T_0'))) | p(s(bool,X44)) | sP9(X43,X44,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f393,f8386])).
fof(f8949,plain,(
  ( ! [X41,X42] : (sP9(f(s(bool,'T_0')),X41,X42) | p(s(bool,X41)) | ~sP8(f(s(bool,'T_0')),X41,X42)) ) | $spl69),
  inference(subsumption_resolution,[],[f8904,f246])).
fof(f8904,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | ~sP8(f(s(bool,'T_0')),X41,X42) | p(s(bool,X41)) | sP9(f(s(bool,'T_0')),X41,X42)) ) | $spl69),
  inference(superposition,[],[f392,f8386])).
fof(f8948,plain,(
  ( ! [X37,X38] : (sP7(f(s(bool,'T_0')),X37,X38) | ~p(s(bool,X37))) ) | $spl69),
  inference(subsumption_resolution,[],[f8902,f246])).
fof(f8902,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | sP7(f(s(bool,'T_0')),X37,X38)) ) | $spl69),
  inference(superposition,[],[f383,f8386])).
fof(f8947,plain,(
  ( ! [X35,X36] : (sP7(f(s(bool,'T_0')),X36,X35) | ~p(s(bool,X35))) ) | $spl69),
  inference(subsumption_resolution,[],[f8901,f246])).
fof(f8901,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X35)) | sP7(f(s(bool,'T_0')),X36,X35)) ) | $spl69),
  inference(superposition,[],[f382,f8386])).
fof(f8946,plain,(
  ( ! [X33,X34] : (~sP6(f(s(bool,'T_0')),X33,X34) | p(s(bool,X34)) | p(s(bool,X33))) ) | $spl69),
  inference(subsumption_resolution,[],[f8900,f246])).
fof(f8900,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | p(s(bool,X33)) | p(s(bool,X34)) | ~sP6(f(s(bool,'T_0')),X33,X34)) ) | $spl69),
  inference(superposition,[],[f377,f8386])).
fof(f8945,plain,(
  ( ! [X31,X32] : (sP7(f(s(bool,'T_0')),X31,X32) | p(s(bool,X31)) | ~sP6(f(s(bool,'T_0')),X31,X32)) ) | $spl69),
  inference(subsumption_resolution,[],[f8899,f246])).
fof(f8899,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | ~sP6(f(s(bool,'T_0')),X31,X32) | p(s(bool,X31)) | sP7(f(s(bool,'T_0')),X31,X32)) ) | $spl69),
  inference(superposition,[],[f375,f8386])).
fof(f8944,plain,(
  ( ! [X30,X29] : (sP7(f(s(bool,'T_0')),X29,X30) | ~sP6(f(s(bool,'T_0')),X29,X30) | p(s(bool,X30))) ) | $spl69),
  inference(subsumption_resolution,[],[f8898,f246])).
fof(f8898,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~sP6(f(s(bool,'T_0')),X29,X30) | sP7(f(s(bool,'T_0')),X29,X30) | p(s(bool,X30))) ) | $spl69),
  inference(superposition,[],[f374,f8386])).
fof(f8943,plain,(
  ( ! [X28,X27] : (~sP3(X27,f(s(bool,'T_0')),X28) | p(s(bool,X28)) | ~p(s(bool,X27))) ) | $spl69),
  inference(subsumption_resolution,[],[f8897,f246])).
fof(f8897,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | ~p(s(bool,X27)) | p(s(bool,X28)) | ~sP3(X27,f(s(bool,'T_0')),X28)) ) | $spl69),
  inference(superposition,[],[f358,f8386])).
fof(f8942,plain,(
  ( ! [X26,X25] : (~sP4(X25,f(s(bool,'T_0')),X26) | p(s(bool,X26)) | ~p(s(bool,X25))) ) | $spl69),
  inference(subsumption_resolution,[],[f8896,f246])).
fof(f8896,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | p(s(bool,X26)) | ~sP4(X25,f(s(bool,'T_0')),X26)) ) | $spl69),
  inference(superposition,[],[f354,f8386])).
fof(f8941,plain,(
  ( ! [X24] : (sP1(X24,f(s(bool,'T_0'))) | p(s(bool,X24))) ) | $spl69),
  inference(subsumption_resolution,[],[f8895,f246])).
fof(f8895,plain,(
  ( ! [X24] : (~p(s(bool,'T_0')) | p(s(bool,X24)) | sP1(X24,f(s(bool,'T_0')))) ) | $spl69),
  inference(superposition,[],[f341,f8386])).
fof(f8940,plain,(
  ( ! [X23] : (sP1(f(s(bool,'T_0')),X23) | p(s(bool,X23))) ) | $spl69),
  inference(subsumption_resolution,[],[f8894,f246])).
fof(f8894,plain,(
  ( ! [X23] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | sP1(f(s(bool,'T_0')),X23)) ) | $spl69),
  inference(superposition,[],[f338,f8386])).
fof(f8935,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(f(s(bool,'T_0')),X4,X3)))))) ) | $spl69),
  inference(subsumption_resolution,[],[f8886,f246])).
fof(f8886,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(f(s(bool,'T_0')),X4,X3)))))) ) | $spl69),
  inference(superposition,[],[f295,f8386])).
fof(f8934,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(f(s(bool,'T_0')),X1,X0)))))) ) | $spl69),
  inference(subsumption_resolution,[],[f8885,f246])).
fof(f8885,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(f(s(bool,'T_0')),X1,X0)))))) ) | $spl69),
  inference(superposition,[],[f293,f8386])).
fof(f8871,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8386,f540])).
fof(f8867,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),'T_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f8386,f369])).
fof(f8868,plain,(
  sP5('T_0',f(s(bool,'T_0')),'T_0') | $spl69),
  inference(unit_resulting_resolution,[],[f246,f8386,f367])).
fof(f8869,plain,(
  ~sP5('F_0','T_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f8386,f369])).
fof(f8870,plain,(
  sP5('T_0','T_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f246,f8386,f367])).
fof(f8607,plain,(
  ( ! [X0,X1] : (~sP4('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8540,f540])).
fof(f8594,plain,(
  ( ! [X0,X1] : (sP2(f(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8502,f540])).
fof(f8553,plain,(
  ( ! [X0,X1] : (sP2('F_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8447,f540])).
fof(f8542,plain,(
  ( ! [X0,X1] : (~sP5('T_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8384,f540])).
fof(f8540,plain,(
  ~sP4('T_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f425,f424,f8384,f352])).
fof(f8503,plain,(
  ( ! [X0,X1] : (sP5('F_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8383,f540])).
fof(f8502,plain,(
  sP2(f(s(bool,'T_0')),'F_0','F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f8383,f347])).
fof(f8489,plain,(
  ( ! [X0,X1] : (~sP5('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8377,f540])).
fof(f8448,plain,(
  ( ! [X0,X1] : (sP5('F_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f8376,f540])).
fof(f8447,plain,(
  sP2('F_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f8376,f347])).
fof(f8435,plain,(
  ( ! [X2,X0,X1] : (sP0(f(s(bool,X0)),X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f8388,f540])).
fof(f8415,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,f(s(bool,X0))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl69),
  inference(superposition,[],[f8387,f540])).
fof(f8389,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl69),
  inference(superposition,[],[f2884,f540])).
fof(f8376,plain,(
  sP5('F_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f415,f2884,f366])).
fof(f8377,plain,(
  ~sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl69),
  inference(unit_resulting_resolution,[],[f246,f2884,f368])).
fof(f8383,plain,(
  sP5('F_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f2884,f366])).
fof(f8384,plain,(
  ~sP5('T_0','F_0',f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f246,f2884,f368])).
fof(f8386,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl69),
  inference(unit_resulting_resolution,[],[f415,f2884,f591])).
fof(f8387,plain,(
  ( ! [X0] : (sP0(X0,f(s(bool,'T_0')))) ) | $spl69),
  inference(unit_resulting_resolution,[],[f434,f2884,f1955])).
fof(f8388,plain,(
  ( ! [X0] : (sP0(f(s(bool,'T_0')),X0)) ) | $spl69),
  inference(unit_resulting_resolution,[],[f434,f2884,f1956])).
fof(f6411,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2632,f540])).
fof(f6359,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('F_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2629,f540])).
fof(f6349,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'F_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2628,f540])).
fof(f6338,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3))))) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2626,f540])).
fof(f6316,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),'T_0') | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f2624,f540])).
fof(f6252,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0('const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2623,f540])).
fof(f6190,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0(X1,'const.bigStep.evaluate_5'(s(bool,X0),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4))))) | s(bool,X0) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f2622,f540])).
fof(f3644,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'T_0') = s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f309,f316])).
fof(f3645,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f309,f309,f316])).
fof(f3646,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0(X0,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f309,f322])).
fof(f3647,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP0('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6)) )),
  inference(unit_resulting_resolution,[],[f309,f323])).
fof(f3648,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f309,f337])).
fof(f3650,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f309,f337])).
fof(f3651,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP1('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f309,f309,f337])).
fof(f3652,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f309,f338])).
fof(f3653,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP1('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f309,f341])).
fof(f3656,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f309,f350])).
fof(f3657,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f309,f415,f309,f350])).
fof(f3659,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('T_0','T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f422,f419,f426,f309,f351])).
fof(f3664,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f309,f354])).
fof(f3665,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP4('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f309,f415,f309,f354])).
fof(f3668,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP4(X0,X1,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f309,f355])).
fof(f3673,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f309,f358])).
fof(f3674,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP3('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f309,f415,f309,f358])).
fof(f3677,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP3(X0,X1,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f309,f359])).
fof(f3678,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X0,X1,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f309,f363])).
fof(f3679,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2(X0,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7)) )),
  inference(unit_resulting_resolution,[],[f309,f364])).
fof(f3680,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP2('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6,X7)) )),
  inference(unit_resulting_resolution,[],[f309,f365])).
fof(f3683,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f434,f309,f368])).
fof(f3685,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f309,f368])).
fof(f3687,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0',X0,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f415,f309,f370])).
fof(f3689,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6)) )),
  inference(unit_resulting_resolution,[],[f415,f309,f371])).
fof(f3693,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP6('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f309,f377])).
fof(f3696,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X0,X1,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.v',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6),s('type.semanticPrimitives.v',X7),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f309,f378])).
fof(f3697,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP6(X0,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7)) )),
  inference(unit_resulting_resolution,[],[f309,f379])).
fof(f3702,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X8),X9),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.pair.prod'('type.semanticPrimitives.state'(X8),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X10),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X11),s('type.semanticPrimitives.v',X12),s('type.semanticPrimitives.state'(X8),X9)))))) )),
  inference(unit_resulting_resolution,[],[f309,f309,f382])).
fof(f3707,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),X12)) )),
  inference(unit_resulting_resolution,[],[f309,f309,f383])).
fof(f3708,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f309,f384])).
fof(f3709,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6)) )),
  inference(unit_resulting_resolution,[],[f415,f309,f388])).
fof(f3725,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f309,f394])).
fof(f3726,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP8('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f415,f309,f309,f394])).
fof(f3729,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP8(X0,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.semanticPrimitives.state'(X2),X3)))),X7)) )),
  inference(unit_resulting_resolution,[],[f309,f396])).
fof(f3730,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f415,f309,f398])).
fof(f3737,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))),X12)) )),
  inference(unit_resulting_resolution,[],[f309,f309,f400])).
fof(f3738,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f309,f401])).
fof(f3741,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f246,f309,f401])).
fof(f3742,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (~sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.state'(X7),X8),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.pair.prod'('type.semanticPrimitives.state'(X7),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X6),s('type.semanticPrimitives.v',X9),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X10),s('type.semanticPrimitives.v',X11),s('type.semanticPrimitives.state'(X7),X8)))))) )),
  inference(unit_resulting_resolution,[],[f415,f309,f309,f401])).
fof(f3743,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6,'F_0')) )),
  inference(unit_resulting_resolution,[],[f431,f309,f404])).
fof(f3744,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP9('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X6)) )),
  inference(unit_resulting_resolution,[],[f432,f309,f404])).
fof(f3745,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),X6,'T_0')) )),
  inference(unit_resulting_resolution,[],[f428,f309,f405])).
fof(f3746,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X6)) )),
  inference(unit_resulting_resolution,[],[f429,f309,f405])).
fof(f3201,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f306,f316])).
fof(f3202,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f306,f306,f316])).
fof(f3203,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f306,f322])).
fof(f3204,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f306,f323])).
fof(f3205,plain,(
  ( ! [X2,X0,X3,X1] : (~sP1('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f306,f337])).
fof(f3207,plain,(
  ( ! [X2,X0,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f306,f337])).
fof(f3208,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP1('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f306,f306,f337])).
fof(f3209,plain,(
  ( ! [X2,X0,X3,X1] : (sP1('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f306,f338])).
fof(f3210,plain,(
  ( ! [X2,X0,X3,X1] : (sP1('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f306,f341])).
fof(f3213,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f306,f350])).
fof(f3214,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f306,f415,f306,f350])).
fof(f3216,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f422,f419,f426,f306,f351])).
fof(f3221,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f306,f354])).
fof(f3222,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP4('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f306,f415,f306,f354])).
fof(f3225,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP4(X0,X1,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f306,f355])).
fof(f3230,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f306,f358])).
fof(f3231,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f306,f415,f306,f358])).
fof(f3234,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP3(X0,X1,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f306,f359])).
fof(f3235,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2(X0,X1,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f306,f363])).
fof(f3236,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2(X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f306,f364])).
fof(f3237,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f306,f365])).
fof(f3238,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f434,f306,f368])).
fof(f3240,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f306,f368])).
fof(f3242,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7('F_0',X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f415,f306,f370])).
fof(f3244,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f415,f306,f371])).
fof(f3248,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f306,f377])).
fof(f3251,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP6(X0,X1,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.list.list'('type.ast.exp'),X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.ast.exp'),X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f306,f378])).
fof(f3252,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP6(X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f306,f379])).
fof(f3257,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.list.list'('type.ast.exp'),X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.ast.exp'),X8),s('type.semanticPrimitives.state'(X6),X7)))))) )),
  inference(unit_resulting_resolution,[],[f306,f306,f382])).
fof(f3262,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),X8)) )),
  inference(unit_resulting_resolution,[],[f306,f306,f383])).
fof(f3263,plain,(
  ( ! [X2,X0,X3,X1] : (~sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f306,f384])).
fof(f3264,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f415,f306,f388])).
fof(f3280,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f306,f394])).
fof(f3281,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP8('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f415,f306,f306,f394])).
fof(f3284,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP8(X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f306,f396])).
fof(f3285,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f415,f306,f398])).
fof(f3292,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),X8)) )),
  inference(unit_resulting_resolution,[],[f306,f306,f400])).
fof(f3293,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f306,f401])).
fof(f3296,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f246,f306,f401])).
fof(f3297,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f415,f306,f306,f401])).
fof(f3298,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'F_0')) )),
  inference(unit_resulting_resolution,[],[f431,f306,f404])).
fof(f3299,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X4)) )),
  inference(unit_resulting_resolution,[],[f432,f306,f404])).
fof(f3300,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'T_0')) )),
  inference(unit_resulting_resolution,[],[f428,f306,f405])).
fof(f3301,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X4)) )),
  inference(unit_resulting_resolution,[],[f429,f306,f405])).
fof(f2621,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f305,f305,f316])).
fof(f2622,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f305,f322])).
fof(f2623,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f305,f323])).
fof(f2624,plain,(
  ( ! [X2,X0,X3,X1] : (~sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f305,f337])).
fof(f2626,plain,(
  ( ! [X2,X0,X3,X1] : (~sP1('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f246,f305,f337])).
fof(f2627,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f305,f305,f337])).
fof(f2628,plain,(
  ( ! [X2,X0,X3,X1] : (sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f305,f338])).
fof(f2629,plain,(
  ( ! [X2,X0,X3,X1] : (sP1('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f305,f341])).
fof(f2632,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f305,f350])).
fof(f2633,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f305,f415,f305,f350])).
fof(f2635,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f422,f419,f426,f305,f351])).
fof(f2641,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f305,f354])).
fof(f2642,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f305,f415,f305,f354])).
fof(f2646,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP4(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f305,f355])).
fof(f2652,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f305,f358])).
fof(f2653,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) )),
  inference(unit_resulting_resolution,[],[f305,f415,f305,f358])).
fof(f2657,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP3(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f305,f359])).
fof(f2658,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f305,f363])).
fof(f2659,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f305,f364])).
fof(f2660,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP2('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,X5)) )),
  inference(unit_resulting_resolution,[],[f305,f365])).
fof(f2663,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f434,f305,f368])).
fof(f2665,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f434,f305,f368])).
fof(f2667,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7('F_0',X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))))) )),
  inference(unit_resulting_resolution,[],[f415,f305,f370])).
fof(f2669,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP7('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f415,f305,f371])).
fof(f2673,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f305,f377])).
fof(f2676,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP6(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X3),X4),s('type.ast.exp',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X3),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X5),s('type.semanticPrimitives.state'(X3),X4)))))) )),
  inference(unit_resulting_resolution,[],[f305,f378])).
fof(f2677,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP6(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f305,f379])).
fof(f2683,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.semanticPrimitives.state'(X6),X7),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X7)))))) )),
  inference(unit_resulting_resolution,[],[f305,f305,f382])).
fof(f2689,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),X8)) )),
  inference(unit_resulting_resolution,[],[f305,f305,f383])).
fof(f2690,plain,(
  ( ! [X2,X0,X3,X1] : (~sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f305,f384])).
fof(f2691,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP9('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) )),
  inference(unit_resulting_resolution,[],[f415,f305,f388])).
fof(f2714,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f305,f394])).
fof(f2715,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP8('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f415,f305,f305,f394])).
fof(f2719,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP8(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))),X5)) )),
  inference(unit_resulting_resolution,[],[f305,f396])).
fof(f2720,plain,(
  ( ! [X2,X0,X3,X1] : (sP9('F_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f415,f305,f398])).
fof(f2729,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),X8)) )),
  inference(unit_resulting_resolution,[],[f305,f305,f400])).
fof(f2730,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) )),
  inference(unit_resulting_resolution,[],[f415,f246,f305,f401])).
fof(f2733,plain,(
  ( ! [X2,X0,X3,X1] : (~sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f415,f246,f305,f401])).
fof(f2734,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))))) )),
  inference(unit_resulting_resolution,[],[f415,f305,f305,f401])).
fof(f2735,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'F_0')) )),
  inference(unit_resulting_resolution,[],[f431,f305,f404])).
fof(f2737,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X4)) )),
  inference(unit_resulting_resolution,[],[f432,f305,f404])).
fof(f2738,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4,'T_0')) )),
  inference(unit_resulting_resolution,[],[f428,f305,f405])).
fof(f2739,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',X4)) )),
  inference(unit_resulting_resolution,[],[f429,f305,f405])).
fof(f2574,plain,(
  ( ! [X10,X8,X11,X9] : (s(X10,f(s(bool,X11))) != s(X10,g(s(bool,X11))) | s(fun(bool,X10),X8) = s(fun(bool,X10),X9) | s(bool,'T_0') = s(bool,sK24(X8,X9,X10,bool)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f346,f540])).
fof(f2572,plain,(
  ( ! [X2,X0,X3,X1] : (s(X2,f(s(bool,'T_0'))) != s(X2,g(s(bool,'T_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,X3) = s(bool,sK24(X0,X1,X2,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f346,f540])).
fof(f306,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))))))) )),
  inference(cnf_transformation,[],[f88])).
fof(f88,plain,(
  ! [X0,X1,X2,X3] : p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))))))),
  inference(flattening,[],[f87])).
fof(f87,plain,(
  ! [X0] : ! [X1,X2,X3] : p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X18] : ! [X7,X23,X10] : p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X10),s('type.list.list'('type.ast.exp'),X23),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.ast.exp'),X23),s('type.semanticPrimitives.state'(X18),X10))))))),
  file('thm.interp.evaluate_run_eval','thm.interp.run_eval|split|1')).
fof(f309,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X5),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.semanticPrimitives.state'(X0),X5))))))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2,X3,X4,X5] : p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X5),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.semanticPrimitives.state'(X0),X5))))))),
  inference(flattening,[],[f93])).
fof(f93,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X5),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X3),s('type.semanticPrimitives.v',X4),s('type.semanticPrimitives.state'(X0),X5))))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X18] : ! [X7,X24,X25,X26,X10] : p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X18),X10),s('type.semanticPrimitives.v',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25),s('type.semanticPrimitives.v',X26),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.v',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25),s('type.semanticPrimitives.v',X26),s('type.semanticPrimitives.state'(X18),X10))))))),
  file('thm.interp.evaluate_run_eval','thm.interp.run_eval|split|2')).
fof(f2002,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2001])).
fof(f2001,plain,(
  ( ! [X163,X161,X162,X160] : (~sP8('T_0',X161,X162) | p(s(bool,X161)) | sP9('T_0',X161,X162) | s(bool,X160) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) )),
  inference(subsumption_resolution,[],[f1599,f591])).
fof(f1599,plain,(
  ( ! [X163,X161,X162,X160] : (~p(s(bool,X160)) | ~sP8('T_0',X161,X162) | p(s(bool,X161)) | sP9('T_0',X161,X162) | s(bool,X160) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f392,f540])).
fof(f1993,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f1992])).
fof(f1992,plain,(
  ( ! [X142,X140,X143,X141] : (~sP6('T_0',X141,X142) | p(s(bool,X141)) | sP7('T_0',X141,X142) | s(bool,X140) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(subsumption_resolution,[],[f1594,f591])).
fof(f1594,plain,(
  ( ! [X142,X140,X143,X141] : (~p(s(bool,X140)) | ~sP6('T_0',X141,X142) | p(s(bool,X141)) | sP7('T_0',X141,X142) | s(bool,X140) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(superposition,[],[f375,f540])).
fof(f1990,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2) | p(s(bool,X2))) )),
  inference(condensation,[],[f1989])).
fof(f1989,plain,(
  ( ! [X138,X136,X139,X137] : (~sP6('T_0',X137,X138) | sP7('T_0',X137,X138) | p(s(bool,X138)) | s(bool,X136) = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) )),
  inference(subsumption_resolution,[],[f1593,f591])).
fof(f1593,plain,(
  ( ! [X138,X136,X139,X137] : (~p(s(bool,X136)) | ~sP6('T_0',X137,X138) | sP7('T_0',X137,X138) | p(s(bool,X138)) | s(bool,X136) = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f374,f540])).
fof(f1973,plain,(
  ( ! [X94,X92,X93,X91] : (~sP6(X91,X92,X93) | sP7(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(subsumption_resolution,[],[f1489,f246])).
fof(f1489,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | ~sP6(X91,X92,X93) | sP7(X91,X92,X93) | s(bool,X91) = s(bool,X94) | s(bool,'T_0') = s(bool,X94)) )),
  inference(superposition,[],[f405,f540])).
fof(f1972,plain,(
  ( ! [X90,X88,X87,X89] : (~sP8(X87,X88,X89) | sP9(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(subsumption_resolution,[],[f1488,f246])).
fof(f1488,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~sP8(X87,X88,X89) | sP9(X87,X88,X89) | s(bool,X87) = s(bool,X90) | s(bool,'T_0') = s(bool,X90)) )),
  inference(superposition,[],[f404,f540])).
fof(f1971,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,X84)) | sP9(X83,X84,X85) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(subsumption_resolution,[],[f1487,f246])).
fof(f1487,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | ~p(s(bool,X84)) | sP9(X83,X84,X85) | s(bool,X83) = s(bool,X86) | s(bool,'T_0') = s(bool,X86)) )),
  inference(superposition,[],[f400,f540])).
fof(f1970,plain,(
  ( ! [X80,X81,X79,X82] : (p(s(bool,X80)) | sP9(X79,X81,X80) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(subsumption_resolution,[],[f1486,f246])).
fof(f1486,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | p(s(bool,X80)) | sP9(X79,X81,X80) | s(bool,X79) = s(bool,X82) | s(bool,'T_0') = s(bool,X82)) )),
  inference(superposition,[],[f399,f540])).
fof(f1969,plain,(
  ( ! [X78,X76,X77,X75] : (p(s(bool,X76)) | sP9(X77,X76,X75) | p(s(bool,X77)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(subsumption_resolution,[],[f1485,f246])).
fof(f1485,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | p(s(bool,X76)) | sP9(X77,X76,X75) | p(s(bool,X77)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) )),
  inference(superposition,[],[f398,f540])).
fof(f1968,plain,(
  ( ! [X74,X72,X71,X73] : (p(s(bool,X72)) | ~p(s(bool,X73)) | ~sP8(X73,X72,X71) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(subsumption_resolution,[],[f1484,f246])).
fof(f1484,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X72)) | ~p(s(bool,X73)) | ~sP8(X73,X72,X71) | s(bool,X71) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f394,f540])).
fof(f1967,plain,(
  ( ! [X70,X68,X69,X67] : (~sP8(X68,X69,X67) | p(s(bool,X69)) | sP9(X68,X69,X67) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(subsumption_resolution,[],[f1483,f246])).
fof(f1483,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~sP8(X68,X69,X67) | p(s(bool,X69)) | sP9(X68,X69,X67) | s(bool,X67) = s(bool,X70) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f393,f540])).
fof(f1966,plain,(
  ( ! [X66,X64,X65,X63] : (~sP8(X63,X64,X65) | p(s(bool,X64)) | sP9(X63,X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(subsumption_resolution,[],[f1482,f246])).
fof(f1482,plain,(
  ( ! [X66,X64,X65,X63] : (~p(s(bool,'T_0')) | ~sP8(X63,X64,X65) | p(s(bool,X64)) | sP9(X63,X64,X65) | s(bool,X63) = s(bool,X66) | s(bool,'T_0') = s(bool,X66)) )),
  inference(superposition,[],[f392,f540])).
fof(f1965,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,X56)) | sP7(X55,X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(subsumption_resolution,[],[f1480,f246])).
fof(f1480,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | ~p(s(bool,X56)) | sP7(X55,X56,X57) | s(bool,X55) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f383,f540])).
fof(f1964,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X52)) | sP7(X51,X53,X52) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f1479,f246])).
fof(f1479,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'T_0')) | ~p(s(bool,X52)) | sP7(X51,X53,X52) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f382,f540])).
fof(f1963,plain,(
  ( ! [X47,X50,X48,X49] : (p(s(bool,X48)) | p(s(bool,X49)) | ~sP6(X47,X48,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(subsumption_resolution,[],[f1478,f246])).
fof(f1478,plain,(
  ( ! [X47,X50,X48,X49] : (~p(s(bool,'T_0')) | p(s(bool,X48)) | p(s(bool,X49)) | ~sP6(X47,X48,X49) | s(bool,X47) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) )),
  inference(superposition,[],[f377,f540])).
fof(f1962,plain,(
  ( ! [X45,X43,X46,X44] : (~sP6(X43,X44,X45) | p(s(bool,X44)) | sP7(X43,X44,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f1477,f246])).
fof(f1477,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | ~sP6(X43,X44,X45) | p(s(bool,X44)) | sP7(X43,X44,X45) | s(bool,X43) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f375,f540])).
fof(f1961,plain,(
  ( ! [X39,X41,X42,X40] : (~sP6(X39,X40,X41) | sP7(X39,X40,X41) | p(s(bool,X41)) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(subsumption_resolution,[],[f1476,f246])).
fof(f1476,plain,(
  ( ! [X39,X41,X42,X40] : (~p(s(bool,'T_0')) | ~sP6(X39,X40,X41) | sP7(X39,X40,X41) | p(s(bool,X41)) | s(bool,X39) = s(bool,X42) | s(bool,'T_0') = s(bool,X42)) )),
  inference(superposition,[],[f374,f540])).
fof(f1960,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X36)) | p(s(bool,X37)) | ~sP3(X36,X35,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f1475,f246])).
fof(f1475,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X36)) | p(s(bool,X37)) | ~sP3(X36,X35,X37) | s(bool,X35) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f358,f540])).
fof(f1959,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,X32)) | p(s(bool,X33)) | ~sP4(X32,X31,X33) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(subsumption_resolution,[],[f1474,f246])).
fof(f1474,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X32)) | p(s(bool,X33)) | ~sP4(X32,X31,X33) | s(bool,X31) = s(bool,X34) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f354,f540])).
fof(f1956,plain,(
  ( ! [X24,X23,X22] : (sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1471,f246])).
fof(f1471,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | sP0(X22,X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f323,f540])).
fof(f1955,plain,(
  ( ! [X21,X19,X20] : (sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f1470,f246])).
fof(f1470,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | sP0(X20,X19) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f322,f540])).
fof(f1954,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1469,f246])).
fof(f1469,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f316,f540])).
fof(f1953,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1465,f246])).
fof(f1465,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f264,f540])).
fof(f1396,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f260,f540])).
fof(f1209,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f540,f540])).
fof(f981,plain,(
  sP5('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f424,f420,f425,f415,f352])).
fof(f937,plain,(
  sP5('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f422,f419,f426,f246,f351])).
fof(f879,plain,(
  ~sP9('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f870,f389])).
fof(f870,plain,(
  ~sP8('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f246,f415,f246,f394])).
fof(f850,plain,(
  sP9('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f433,f415,f246,f393])).
fof(f746,plain,(
  ~sP7('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f739,f372])).
fof(f739,plain,(
  ~sP6('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f415,f246,f377])).
fof(f728,plain,(
  sP7('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f430,f415,f415,f376])).
fof(f686,plain,(
  ~sP5('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f681,f347])).
fof(f681,plain,(
  ~sP2('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f415,f415,f362])).
fof(f677,plain,(
  ~sP5('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f669,f348])).
fof(f669,plain,(
  ~sP3('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f246,f246,f358])).
fof(f649,plain,(
  ~sP4('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f246,f246,f354])).
fof(f617,plain,(
  ~sP5('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f246,f434,f368])).
fof(f619,plain,(
  ~sP5('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f246,f434,f368])).
fof(f602,plain,(
  sP5('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f415,f434,f366])).
fof(f603,plain,(
  sP5('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f434,f366])).
fof(f591,plain,(
  ( ! [X2,X3] : (p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f588,f415])).
fof(f588,plain,(
  ( ! [X2,X3] : (p(s(bool,'F_0')) | p(s(bool,X3)) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f313,f253])).
fof(f482,plain,(
  ( ! [X0] : (sP9('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f246,f246,f400])).
fof(f475,plain,(
  ( ! [X0] : (sP9('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f246,f399])).
fof(f473,plain,(
  ( ! [X0] : (~sP9('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f246,f415,f388])).
fof(f472,plain,(
  ( ! [X0] : (~sP9('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f415,f415,f387])).
fof(f465,plain,(
  ( ! [X0] : (sP7('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f246,f246,f383])).
fof(f462,plain,(
  ( ! [X0] : (sP7('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f246,f382])).
fof(f459,plain,(
  ( ! [X0] : (~sP7('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f246,f415,f371])).
fof(f456,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f415,f370])).
fof(f455,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f415,f416])).
fof(f450,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f415,f246,f341])).
fof(f444,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f246,f338])).
fof(f442,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f246,f246,f337])).
fof(f441,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f415,f415,f336])).
fof(f434,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f415,f260])).
fof(f433,plain,(
  ( ! [X0,X1] : (sP8('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f415,f397])).
fof(f432,plain,(
  ( ! [X0,X1] : (sP8(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f246,f396])).
fof(f430,plain,(
  ( ! [X0,X1] : (sP6('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f415,f380])).
fof(f429,plain,(
  ( ! [X0,X1] : (sP6(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f246,f379])).
fof(f427,plain,(
  ( ! [X0,X1] : (sP2('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f246,f365])).
fof(f426,plain,(
  ( ! [X0,X1] : (sP2(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f246,f364])).
fof(f425,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f363])).
fof(f424,plain,(
  ( ! [X0,X1] : (sP3('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f415,f361])).
fof(f423,plain,(
  ( ! [X0,X1] : (sP3(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f415,f360])).
fof(f422,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f359])).
fof(f421,plain,(
  ( ! [X0,X1] : (sP4('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f415,f357])).
fof(f420,plain,(
  ( ! [X0,X1] : (sP4(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f415,f356])).
fof(f419,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f355])).
fof(f418,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f246,f323])).
fof(f417,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f246,f322])).
fof(f398,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP9(X2,X0,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP9(X2,X0,X1)) & (~sP9(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP9(X2,X0,X1))),
  inference(definition_folding,[],[f152,f166,f165])).
fof(f152,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X9,X28,X29] : ((p(s(bool,X29)) <=> (p(s(bool,X28)) => p(s(bool,X9)))) <=> ((p(s(bool,X29)) | p(s(bool,X28))) & (p(s(bool,X29)) | ~p(s(bool,X9))) & (~p(s(bool,X28)) | p(s(bool,X9)) | ~p(s(bool,X29)))))),
  file('thm.interp.evaluate_run_eval','thm.sat.sat_27_prove_ltb')).
fof(f399,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f243])).
fof(f400,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP9(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f243])).
fof(f401,plain,(
  ( ! [X2,X0,X1] : (~sP9(X2,X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f243])).
fof(f394,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f241])).
fof(f396,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f241])).
fof(f397,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f241])).
fof(f389,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | sP8(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f238])).
fof(f404,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | sP9(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f390])).
fof(f390,plain,(
  ( ! [X2,X0,X1] : (sP9(X0,X1,X2) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f238])).
fof(f391,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~sP8(X0,X1,X2) | ~p(s(bool,X0)) | sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f238])).
fof(f392,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f238])).
fof(f393,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~sP8(X0,X1,X2) | p(s(bool,X1)) | sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f238])).
fof(f381,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP7(X2,X0,X1)) & (~sP7(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP7(X2,X0,X1))),
  inference(definition_folding,[],[f120,f163,f162])).
fof(f120,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f38])).
fof(f38,axiom,(
  ! [X9,X28,X29] : ((p(s(bool,X29)) <=> (p(s(bool,X28)) | p(s(bool,X9)))) <=> ((p(s(bool,X29)) | ~p(s(bool,X28))) & (p(s(bool,X29)) | ~p(s(bool,X9))) & (p(s(bool,X28)) | p(s(bool,X9)) | ~p(s(bool,X29)))))),
  file('thm.interp.evaluate_run_eval','thm.sat.sat_25_prove_ltb')).
fof(f382,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f235])).
fof(f383,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP7(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f235])).
fof(f384,plain,(
  ( ! [X2,X0,X1] : (~sP7(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f235])).
fof(f377,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f233])).
fof(f379,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f233])).
fof(f372,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | sP6(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f230])).
fof(f405,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP6(X0,X1,X2) | sP7(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f373])).
fof(f373,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f230])).
fof(f374,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP6(X0,X1,X2) | sP7(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f230])).
fof(f375,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP6(X0,X1,X2) | p(s(bool,X1)) | sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f230])).
fof(f376,plain,(
  ( ! [X2,X0,X1] : (sP7(X0,X1,X2) | ~sP6(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f230])).
fof(f368,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f227])).
fof(f369,plain,(
  ( ! [X2,X0,X1] : (~sP5(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f227])).
fof(f362,plain,(
  ( ! [X2,X0,X1] : (~sP2(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(flattening,[],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2] : ((~sP2(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP2(X0,X1,X2)))),
  inference(nnf_transformation,[],[f157])).
fof(f363,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f226])).
fof(f364,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f226])).
fof(f365,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f226])).
fof(f359,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f224])).
fof(f360,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f224])).
fof(f361,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f224])).
fof(f354,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP4(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0,X1,X2] : ((~sP4(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP4(X0,X1,X2)))),
  inference(rectify,[],[f220])).
fof(f220,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(flattening,[],[f219])).
fof(f219,plain,(
  ! [X2,X0,X1] : ((~sP4(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP4(X2,X0,X1)))),
  inference(nnf_transformation,[],[f159])).
fof(f355,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f221])).
fof(f356,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f221])).
fof(f357,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f221])).
fof(f347,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | sP2(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f218])).
fof(f350,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f218])).
fof(f351,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | ~p(s(bool,X2)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f218])).
fof(f352,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X1)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f218])).
fof(f353,plain,(
  ( ! [X2,X0,X1] : (~sP2(X2,X1,X0) | p(s(bool,X0)) | ~sP4(X0,X2,X1) | ~sP3(X1,X2,X0) | sP5(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f218])).
fof(f336,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f213])).
fof(f337,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f213])).
fof(f416,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f321,f415])).
fof(f321,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f206])).
fof(f206,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f205])).
fof(f205,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f322,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f206])).
fof(f323,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f206])).
fof(f313,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f138])).
fof(f308,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'))),'const.interp.run_eval_list_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2))),s('type.semanticPrimitives.state'(X0),X3)))) )),
  inference(cnf_transformation,[],[f92])).
fof(f92,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'))),'const.interp.run_eval_list_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2))),s('type.semanticPrimitives.state'(X0),X3)))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'))),'const.interp.run_eval_list_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X2))),s('type.semanticPrimitives.state'(X0),X3)))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X18] : ! [X30,X31,X32] : s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.list.list'('type.ast.exp'),X31),s('type.semanticPrimitives.state'(X18),X32))) = s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X18),'type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'))),'const.interp.run_eval_list_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.list.list'('type.ast.exp'),X31))),s('type.semanticPrimitives.state'(X18),X32)))),
  file('thm.interp.evaluate_run_eval','ARITY_2_3_const.interp.run_eval_list')).
fof(f307,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'))),'const.interp.run_eval_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2))),s('type.semanticPrimitives.state'(X0),X3)))) )),
  inference(cnf_transformation,[],[f90])).
fof(f90,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'))),'const.interp.run_eval_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2))),s('type.semanticPrimitives.state'(X0),X3)))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X3))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'))),'const.interp.run_eval_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2))),s('type.semanticPrimitives.state'(X0),X3)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X18] : ! [X30,X31,X32] : s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.ast.exp',X31),s('type.semanticPrimitives.state'(X18),X32))) = s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),happ(s(fun('type.semanticPrimitives.state'(X18),'type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v'))),'const.interp.run_eval_2'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.ast.exp',X31))),s('type.semanticPrimitives.state'(X18),X32)))),
  file('thm.interp.evaluate_run_eval','ARITY_2_3_const.interp.run_eval')).
fof(f261,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f172])).
fof(f22916,plain,(
  ( ! [X3] : (s(bool,'T_0') = s(bool,X3)) ) | ($spl66 | $spl75)),
  inference(subsumption_resolution,[],[f22915,f246])).
fof(f22915,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X3)) ) | ($spl66 | $spl75)),
  inference(subsumption_resolution,[],[f22716,f2882])).
fof(f22716,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s(bool,X3) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3)) ) | $spl75),
  inference(superposition,[],[f3113,f540])).
fof(f22914,plain,(
  $false | ($spl66 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22913,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430,f22424,f22706,f22707])).
fof(f22913,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl66 | $spl75)),
  inference(subsumption_resolution,[],[f22912,f246])).
fof(f22912,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl66 | $spl75)),
  inference(subsumption_resolution,[],[f22713,f2882])).
fof(f22713,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl75),
  inference(superposition,[],[f3113,f540])).
fof(f22911,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430,f22424,f22706,f22707])).
fof(f22910,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430,f22424,f22706])).
fof(f22909,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430,f22424])).
fof(f22908,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(subsumption_resolution,[],[f22425,f2884])).
fof(f22425,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f313])).
fof(f22907,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(subsumption_resolution,[],[f22427,f2884])).
fof(f22427,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f313])).
fof(f22906,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22429,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430])).
fof(f22429,plain,(
  ~sP1(f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f336])).
fof(f22905,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432,f22430])).
fof(f22904,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22431,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432])).
fof(f22431,plain,(
  ~sP1('F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f336])).
fof(f22903,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433,f22432])).
fof(f22902,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434,f22433])).
fof(f22901,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435,f22434])).
fof(f22900,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436,f22435])).
fof(f22899,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438,f22436])).
fof(f22898,plain,(
  $false | ($spl0 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22437,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438])).
fof(f22437,plain,(
  sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),f(s(bool,'T_0')),'F_0') | ($spl0 | $spl75)),
  inference(unit_resulting_resolution,[],[f423,f420,f2923,f3113,f352])).
fof(f2923,plain,(
  ( ! [X0,X1] : (sP2(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f363])).
fof(f22897,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439,f22438])).
fof(f22896,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440,f22439])).
fof(f22895,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441,f22440])).
fof(f22894,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442,f22441])).
fof(f22893,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443,f22442])).
fof(f22892,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444,f22443])).
fof(f22891,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445,f22444])).
fof(f22890,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448,f22445])).
fof(f22889,plain,(
  $false | ($spl0 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22446,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448])).
fof(f22446,plain,(
  sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | ($spl0 | $spl75)),
  inference(unit_resulting_resolution,[],[f423,f2913,f2924,f3113,f353])).
fof(f2924,plain,(
  ( ! [X0,X1] : (sP2(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f364])).
fof(f2913,plain,(
  ( ! [X0,X1] : (sP4(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f355])).
fof(f22888,plain,(
  $false | ($spl0 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22447,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448])).
fof(f22447,plain,(
  sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | ($spl0 | $spl75)),
  inference(unit_resulting_resolution,[],[f423,f420,f2924,f3113,f353])).
fof(f22887,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449,f22448])).
fof(f22886,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450,f22449])).
fof(f22885,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451,f22450])).
fof(f22884,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452,f22451])).
fof(f22883,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453,f22452])).
fof(f22882,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454,f22453])).
fof(f22881,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457,f22454])).
fof(f22880,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458,f22457])).
fof(f22879,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462,f22458])).
fof(f22878,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463,f22462])).
fof(f22877,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467,f22463])).
fof(f22876,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22464,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467])).
fof(f22464,plain,(
  ~sP2(f(s(bool,'T_0')),'F_0','F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f362])).
fof(f22875,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22465,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467])).
fof(f22465,plain,(
  ~sP2(f(s(bool,'T_0')),f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f362])).
fof(f22874,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22466,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467])).
fof(f22466,plain,(
  ~sP2(f(s(bool,'T_0')),'F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f362])).
fof(f22873,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487,f22467])).
fof(f22858,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22484,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487])).
fof(f22484,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f362])).
fof(f22857,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22485,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487])).
fof(f22485,plain,(
  ~sP2(f(s(bool,'T_0')),f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f362])).
fof(f22856,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22486,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487])).
fof(f22486,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f362])).
fof(f22855,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507,f22487])).
fof(f22840,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22504,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507])).
fof(f22504,plain,(
  ~sP2('F_0','F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f362])).
fof(f22839,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22505,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507])).
fof(f22505,plain,(
  ~sP2(f(s(bool,'T_0')),'F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f362])).
fof(f22838,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22506,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507])).
fof(f22506,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f362])).
fof(f22837,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524,f22507])).
fof(f22822,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526,f22524])).
fof(f22821,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22525,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526])).
fof(f22525,plain,(
  sP5(f(s(bool,'T_0')),g(s(bool,'T_0')),'T_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f2880,f3113,f366])).
fof(f22820,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529,f22526])).
fof(f22819,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22527,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529])).
fof(f22527,plain,(
  sP5(f(s(bool,'T_0')),'T_0',g(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f2880,f3113,f366])).
fof(f22818,plain,(
  $false | ($spl0 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22528,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529])).
fof(f22528,plain,(
  ~sP5(f(s(bool,'T_0')),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl75)),
  inference(unit_resulting_resolution,[],[f2889,f3113,f369])).
fof(f22817,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530,f22529])).
fof(f22816,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531,f22530])).
fof(f22815,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533,f22531])).
fof(f22814,plain,(
  $false | ($spl0 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22532,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533])).
fof(f22532,plain,(
  ~sP5(f(s(bool,'T_0')),'T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl75)),
  inference(unit_resulting_resolution,[],[f2889,f3113,f369])).
fof(f22813,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534,f22533])).
fof(f22812,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535,f22534])).
fof(f22811,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536,f22535])).
fof(f22810,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537,f22536])).
fof(f22809,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566,f22537])).
fof(f22804,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22565,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566])).
fof(f22565,plain,(
  sP7('F_0',f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f430,f3113,f376])).
fof(f22803,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578,f22566])).
fof(f22794,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22577,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578])).
fof(f22577,plain,(
  sP7('F_0','F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f430,f3113,f376])).
fof(f22793,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600,f22578])).
fof(f22780,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604,f22600])).
fof(f22779,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22601,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604])).
fof(f22601,plain,(
  sP7('F_0',f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f381])).
fof(f22778,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22602,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604])).
fof(f22602,plain,(
  sP7(f(s(bool,'T_0')),f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f381])).
fof(f22777,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22603,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604])).
fof(f22603,plain,(
  sP7('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f381])).
fof(f22776,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613,f22604])).
fof(f22771,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22610,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613])).
fof(f22610,plain,(
  sP7('F_0','F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f381])).
fof(f22770,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22611,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613])).
fof(f22611,plain,(
  sP7(f(s(bool,'T_0')),'F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f381])).
fof(f22769,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22612,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613])).
fof(f22612,plain,(
  sP7('F_0',f(s(bool,'T_0')),f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f381])).
fof(f22768,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622,f22613])).
fof(f22763,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22619,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622])).
fof(f22619,plain,(
  sP7(f(s(bool,'T_0')),'F_0','F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f21896,f3113,f381])).
fof(f22762,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22620,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622])).
fof(f22620,plain,(
  sP7(f(s(bool,'T_0')),f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f21896,f3113,f381])).
fof(f22761,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22621,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622])).
fof(f22621,plain,(
  sP7(f(s(bool,'T_0')),'F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f3113,f381])).
fof(f22760,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624,f22622])).
fof(f22759,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22623,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624])).
fof(f22623,plain,(
  ~sP7('T_0',f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f246,f3113,f384])).
fof(f22758,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627,f22624])).
fof(f22757,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22626,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627])).
fof(f22626,plain,(
  ~sP7('T_0','F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f246,f3113,f384])).
fof(f22756,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630,f22627])).
fof(f22755,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22629,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630])).
fof(f22629,plain,(
  ( ! [X0] : (~sP9(f(s(bool,'T_0')),X0,'F_0')) ) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f387])).
fof(f22754,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632,f22630])).
fof(f22753,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22631,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632])).
fof(f22631,plain,(
  ( ! [X0] : (~sP9('F_0',X0,f(s(bool,'T_0')))) ) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f387])).
fof(f22752,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637,f22632])).
fof(f22748,plain,(
  $false | ($spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22670,f22663,f22660,f22648,f22647,f22637])).
fof(f22747,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670,f22663,f22660,f22648,f22647])).
fof(f22680,plain,(
  ~sP4('T_0','T_0',f(s(bool,'T_0'))) | ($spl10 | $spl75)),
  inference(unit_resulting_resolution,[],[f246,f3113,f1910])).
fof(f3747,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP4('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) ) | $spl10),
  inference(unit_resulting_resolution,[],[f415,f309,f1910])).
fof(f3302,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) ) | $spl10),
  inference(unit_resulting_resolution,[],[f415,f306,f1910])).
fof(f2740,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) ) | $spl10),
  inference(unit_resulting_resolution,[],[f415,f305,f1910])).
fof(f22746,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670,f22663,f22660,f22648])).
fof(f22745,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670,f22663,f22660])).
fof(f22744,plain,(
  $false | ($spl10 | $spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22662,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670,f22663])).
fof(f22662,plain,(
  ~sP0(f(s(bool,'T_0')),'F_0') | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f416])).
fof(f22743,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670,f22663])).
fof(f22738,plain,(
  $false | ($spl10 | $spl65 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22669,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670])).
fof(f22669,plain,(
  ~sP0('F_0',f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f21896,f3113,f416])).
fof(f22737,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680,f22670])).
fof(f22732,plain,(
  $false | ($spl69 | $spl75)),
  inference(subsumption_resolution,[],[f22676,f2884])).
fof(f22676,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl75),
  inference(unit_resulting_resolution,[],[f434,f3113,f591])).
fof(f22731,plain,(
  $false | ($spl65 | $spl69 | $spl75)),
  inference(subsumption_resolution,[],[f22730,f2884])).
fof(f22730,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(forward_demodulation,[],[f22677,f21045])).
fof(f22677,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | ($spl65 | $spl75)),
  inference(unit_resulting_resolution,[],[f2880,f3113,f591])).
fof(f22729,plain,(
  $false | ($spl4 | $spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22678,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680])).
fof(f22678,plain,(
  sP1('T_0',f(s(bool,'T_0'))) | ($spl4 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f1903])).
fof(f22728,plain,(
  $false | ($spl8 | $spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f22679,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680])).
fof(f22679,plain,(
  sP1(f(s(bool,'T_0')),'T_0') | ($spl8 | $spl75)),
  inference(unit_resulting_resolution,[],[f3113,f1907])).
fof(f22727,plain,(
  $false | ($spl10 | $spl69 | $spl75)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f1910,f2419,f2422,f2446,f2449,f2572,f2574,f2740,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3302,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3747,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8388,f8387,f8386,f8384,f8383,f8377,f8376,f8389,f8415,f8435,f8447,f8448,f8489,f8502,f8503,f8540,f8542,f8553,f8594,f8607,f8870,f8869,f8868,f8867,f8871,f8934,f8935,f8940,f8941,f8942,f8943,f8944,f8945,f8946,f8947,f8948,f8949,f8950,f8951,f8952,f8953,f8954,f8955,f8956,f8958,f8961,f8993,f8996,f9004,f9007,f9040,f9053,f9065,f9066,f9078,f9092,f9109,f9113,f9125,f9126,f9135,f9147,f9148,f9157,f9158,f9167,f9180,f9177,f9183,f9193,f9194,f9205,f9217,f9222,f9231,f9232,f9243,f9259,f9272,f9285,f9286,f9297,f9308,f9310,f9319,f9320,f9331,f9346,f9359,f9371,f9384,f9399,f9414,f9428,f9437,f9442,f9455,f9456,f9477,f9478,f9495,f9504,f9508,f9529,f9530,f9545,f9546,f9562,f9574,f9583,f9587,f9599,f9616,f9908,f9952,f9953,f9983,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f11711,f415,f1045,f10210,f1313,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f3113,f2884,f19888,f3756,f3963,f3945,f3943,f312,f16833,f3311,f3868,f3852,f3850,f311,f19893,f19892,f16838,f16837,f11009,f11008,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f8622,f8621,f8568,f8567,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f11004,f3823,f3807,f3805,f310,f2749,f2578,f2580,f10468,f21389,f21348,f21313,f17285,f17274,f17273,f17272,f17175,f17164,f17163,f17162,f17122,f17120,f17119,f16924,f16922,f16921,f10401,f10335,f10269,f3947,f3854,f3809,f3486,f3447,f3402,f3361,f2583,f2577,f2486,f2463,f2391,f265,f264,f22680])).
fof(f21895,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21894,f246])).
fof(f21894,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21206,f21683])).
fof(f21683,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f2882,f3106])).
fof(f21893,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21892,f246])).
fof(f21892,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21194,f21683])).
fof(f21194,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f21115,f355])).
fof(f21115,plain,(
  ~sP4('T_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f427,f422,f21063,f351])).
fof(f21063,plain,(
  ~sP5('T_0',g(s(bool,'T_0')),'T_0') | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f368])).
fof(f21891,plain,(
  $false | ($spl12 | $spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21890,f246])).
fof(f21890,plain,(
  ~p(s(bool,'T_0')) | ($spl12 | $spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21167,f21683])).
fof(f21167,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | ($spl12 | $spl65)),
  inference(unit_resulting_resolution,[],[f415,f21094,f1913])).
fof(f21094,plain,(
  sP3(g(s(bool,'T_0')),'T_0','F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f21062,f348])).
fof(f21062,plain,(
  sP5('F_0',g(s(bool,'T_0')),'T_0') | $spl65),
  inference(unit_resulting_resolution,[],[f415,f2880,f366])).
fof(f21889,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21888,f246])).
fof(f21888,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21170,f21683])).
fof(f21170,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f415,f21094,f358])).
fof(f21887,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21886,f246])).
fof(f21886,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21155,f21683])).
fof(f21155,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f426,f422,f419,f21069,f351])).
fof(f21069,plain,(
  ~sP5('T_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f368])).
fof(f21884,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21883,f246])).
fof(f21883,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21046,f21683])).
fof(f21046,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f2880,f261])).
fof(f21877,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21876,f246])).
fof(f21876,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21061,f21683])).
fof(f21061,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f316])).
fof(f21875,plain,(
  $false | ($spl65 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21874,f246])).
fof(f21874,plain,(
  ~p(s(bool,'T_0')) | ($spl65 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21067,f21683])).
fof(f21067,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f316])).
fof(f21873,plain,(
  $false | ($spl66 | $spl70 | $spl118)),
  inference(subsumption_resolution,[],[f21872,f246])).
fof(f21872,plain,(
  ~p(s(bool,'T_0')) | ($spl66 | $spl70 | $spl118)),
  inference(forward_demodulation,[],[f20789,f21683])).
fof(f20789,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl118),
  inference(unit_resulting_resolution,[],[f246,f3141,f337])).
fof(f21871,plain,(
  $false | ($spl66 | $spl70 | $spl116)),
  inference(subsumption_resolution,[],[f21870,f246])).
fof(f21870,plain,(
  ~p(s(bool,'T_0')) | ($spl66 | $spl70 | $spl116)),
  inference(forward_demodulation,[],[f20779,f21683])).
fof(f20779,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl116),
  inference(unit_resulting_resolution,[],[f246,f3139,f337])).
fof(f21869,plain,(
  $false | ($spl56 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f2857,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848,f21856,f21858])).
fof(f21858,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21803,f246])).
fof(f21803,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f19888])).
fof(f21856,plain,(
  ( ! [X0,X8,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21855,f246])).
fof(f21855,plain,(
  ( ! [X0,X8,X7] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f21854,f21683])).
fof(f21854,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21798,f246])).
fof(f21798,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f312])).
fof(f21848,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21796,f246])).
fof(f21796,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f16833])).
fof(f21846,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21845,f246])).
fof(f21845,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f21844,f21683])).
fof(f21844,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21791,f246])).
fof(f21791,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f311])).
fof(f21840,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21738,f246])).
fof(f21738,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X4) = s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f11004])).
fof(f21834,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21833,f246])).
fof(f21833,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(forward_demodulation,[],[f21832,f21683])).
fof(f21832,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21733,f246])).
fof(f21733,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f310])).
fof(f21827,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21686,f21683])).
fof(f21686,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f264])).
fof(f9864,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl66),
  inference(superposition,[],[f2882,f540])).
fof(f21867,plain,(
  $false | ($spl66 | $spl70 | $spl75)),
  inference(subsumption_resolution,[],[f21866,f246])).
fof(f21866,plain,(
  ~p(s(bool,'T_0')) | ($spl66 | $spl70 | $spl75)),
  inference(forward_demodulation,[],[f3113,f21683])).
fof(f21863,plain,(
  $false | ($spl46 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21862,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848,f21856,f21858])).
fof(f21862,plain,(
  ( ! [X103,X111,X105,X102,X110] : (s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21861,f246])).
fof(f21861,plain,(
  ( ! [X103,X111,X105,X102,X110] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21860,f21683])).
fof(f21860,plain,(
  ( ! [X103,X111,X109,X107,X105,X102,X110,X108,X106,X104] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,sK24(X102,X103,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X104),s('type.semanticPrimitives.state'(X105),X106),s('type.semanticPrimitives.v',X107),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X108),s('type.semanticPrimitives.v',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21804,f246])).
fof(f21804,plain,(
  ( ! [X103,X111,X109,X107,X105,X102,X110,X108,X106,X104] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,sK24(X102,X103,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X104),s('type.semanticPrimitives.state'(X105),X106),s('type.semanticPrimitives.v',X107),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X108),s('type.semanticPrimitives.v',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f8980])).
fof(f8980,plain,(
  ( ! [X103,X111,X109,X107,X105,X102,X110,X108,X106,X104] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X104),s('type.semanticPrimitives.state'(X105),X106),s('type.semanticPrimitives.v',X107),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X108),s('type.semanticPrimitives.v',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,sK24(X102,X103,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X104),s('type.semanticPrimitives.state'(X105),X106),s('type.semanticPrimitives.v',X107),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X108),s('type.semanticPrimitives.v',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | $spl46),
  inference(superposition,[],[f312,f2608])).
fof(f21859,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848,f21856,f21858])).
fof(f21857,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848,f21856])).
fof(f21853,plain,(
  $false | ($spl46 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21852,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848])).
fof(f21852,plain,(
  ( ! [X80,X74,X81,X77,X75] : (s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21851,f246])).
fof(f21851,plain,(
  ( ! [X80,X74,X81,X77,X75] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21850,f21683])).
fof(f21850,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.list.list'('type.ast.exp'),X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21797,f246])).
fof(f21797,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.list.list'('type.ast.exp'),X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f8856])).
fof(f8856,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.list.list'('type.ast.exp'),X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.list.list'('type.ast.exp'),X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | $spl46),
  inference(superposition,[],[f311,f2608])).
fof(f21849,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846,f21848])).
fof(f21847,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840,f21846])).
fof(f21843,plain,(
  $false | ($spl0 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21842,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840])).
fof(f21842,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | ($spl0 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21739,f246])).
fof(f21739,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | ($spl0 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f5467])).
fof(f21841,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834,f21840])).
fof(f21839,plain,(
  $false | ($spl46 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21838,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834])).
fof(f21838,plain,(
  ( ! [X80,X74,X81,X77,X75] : (s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21837,f246])).
fof(f21837,plain,(
  ( ! [X80,X74,X81,X77,X75] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(forward_demodulation,[],[f21836,f21683])).
fof(f21836,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.ast.exp',X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21737,f246])).
fof(f21737,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.ast.exp',X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f8811])).
fof(f8811,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.ast.exp',X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,sK24(X74,X75,bool,bool)),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.ast.exp',X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | $spl46),
  inference(superposition,[],[f310,f2608])).
fof(f21835,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827,f21834])).
fof(f21831,plain,(
  $false | ($spl46 | $spl66 | $spl70)),
  inference(global_subsumption,[],[f21830,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827])).
fof(f21830,plain,(
  ( ! [X14,X15] : (s(fun(bool,bool),X14) = s(fun(bool,bool),X15)) ) | ($spl46 | $spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21703,f21683])).
fof(f21703,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') != s(bool,sK24(X14,X15,bool,bool)) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15)) ) | ($spl46 | $spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f10216])).
fof(f10216,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') != s(bool,sK24(X14,X15,bool,bool)) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15)) ) | $spl46),
  inference(subsumption_resolution,[],[f8190,f246])).
fof(f8190,plain,(
  ( ! [X14,X15] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,sK24(X14,X15,bool,bool)) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15)) ) | $spl46),
  inference(superposition,[],[f264,f2608])).
fof(f21829,plain,(
  $false | ($spl66 | $spl70)),
  inference(subsumption_resolution,[],[f21688,f246])).
fof(f21688,plain,(
  ~p(s(bool,'T_0')) | ($spl66 | $spl70)),
  inference(backward_demodulation,[],[f21683,f415])).
fof(f21828,plain,(
  $false | ($spl66 | $spl70)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2882,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9864,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3106,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f10457,f10460,f15794,f15797,f21683,f21827])).
fof(f21685,plain,(
  $false | ($spl59 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f2859,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21640,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl108),
  inference(unit_resulting_resolution,[],[f415,f21630,f387])).
fof(f21639,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl108),
  inference(unit_resulting_resolution,[],[f246,f21630,f388])).
fof(f21642,plain,(
  ( ! [X2,X0,X1] : (sP9(g(s(bool,X0)),X1,'F_0') | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl108),
  inference(superposition,[],[f21630,f540])).
fof(f21631,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(g(s(bool,X0)),X1,X2) | p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl108),
  inference(superposition,[],[f3133,f540])).
fof(f21630,plain,(
  ( ! [X0] : (sP9(g(s(bool,'T_0')),X0,'F_0')) ) | $spl108),
  inference(unit_resulting_resolution,[],[f415,f3133])).
fof(f20790,plain,(
  ( ! [X0,X1] : (sP1(g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl118),
  inference(superposition,[],[f3141,f540])).
fof(f21684,plain,(
  $false | ($spl66 | $spl70 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f21683,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21682,plain,(
  $false | ($spl69 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f2884,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21681,plain,(
  $false | ($spl108 | $spl118 | $spl144)),
  inference(global_subsumption,[],[f13195,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21680,plain,(
  $false | ($spl75 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f3113,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21679,plain,(
  $false | ($spl108 | $spl118)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794,f15797])).
fof(f21678,plain,(
  $false | ($spl108 | $spl118)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460,f15794])).
fof(f21677,plain,(
  $false | ($spl46 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f15804,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460])).
fof(f15804,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X0,X1,bool,bool))))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f15792])).
fof(f15792,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl46),
  inference(superposition,[],[f2583,f2608])).
fof(f21676,plain,(
  $false | ($spl108 | $spl118)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457,f10460])).
fof(f21675,plain,(
  $false | ($spl108 | $spl118)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789,f10457])).
fof(f21674,plain,(
  $false | ($spl46 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f10469,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789])).
fof(f10469,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X0,X1,bool,bool))))) ) | $spl46),
  inference(duplicate_literal_removal,[],[f10455])).
fof(f10455,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X0,X1,bool,bool)))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl46),
  inference(superposition,[],[f2583,f2608])).
fof(f21673,plain,(
  $false | ($spl108 | $spl118 | $spl138)),
  inference(global_subsumption,[],[f13137,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789])).
fof(f21672,plain,(
  $false | ($spl56 | $spl108 | $spl118)),
  inference(global_subsumption,[],[f2857,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789])).
fof(f21671,plain,(
  $false | ($spl108 | $spl116 | $spl118)),
  inference(global_subsumption,[],[f20779,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789])).
fof(f21670,plain,(
  $false | ($spl108 | $spl118)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f3141,f20739,f20771,f20790,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21106,f21143,f21183,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f20789])).
fof(f21669,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050,f21053,f21055,f21057,f21061,f21067])).
fof(f21057,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f455,f2880,f1956])).
fof(f21055,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f455,f2880,f1955])).
fof(f21053,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f415,f2880,f591])).
fof(f21050,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f434,f2880,f540])).
fof(f21047,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f434,f2880,f540])).
fof(f21207,plain,(
  ( ! [X0,X1] : (sP3('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21129,f540])).
fof(f21196,plain,(
  ( ! [X0,X1] : (~sP4('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21115,f540])).
fof(f21171,plain,(
  ( ! [X0,X1] : (sP3(g(s(bool,X0)),'T_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21094,f540])).
fof(f21158,plain,(
  ( ! [X0,X1] : (~sP5('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21069,f540])).
fof(f21131,plain,(
  ( ! [X0,X1] : (sP5('F_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21068,f540])).
fof(f21118,plain,(
  ( ! [X0,X1] : (~sP5('T_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21063,f540])).
fof(f21096,plain,(
  ( ! [X0,X1] : (sP5('F_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f21062,f540])).
fof(f21072,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f2880,f540])).
fof(f12983,plain,(
  ( ! [X893,X894,X892,X891] : (s(X893,f(s(bool,'T_0'))) != s(X893,g(s(bool,'T_0'))) | s(fun(bool,X893),X891) = s(fun(bool,X893),X892) | s(bool,'F_0') = s(bool,g(s(bool,X894))) | s(bool,X894) = s(bool,sK24(X891,X892,X893,bool))) ) | $spl65),
  inference(superposition,[],[f346,f8643])).
fof(f12982,plain,(
  ( ! [X887,X890,X888,X889] : (~p(s(bool,happ(s(fun(bool,bool),X887),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X887),s(bool,X889)))) | p(s(bool,X888)) | s(bool,'F_0') = s(bool,g(s(bool,X890))) | s(bool,X890) = s(bool,sK23(X887,X888,bool))) ) | $spl65),
  inference(superposition,[],[f303,f8643])).
fof(f12981,plain,(
  ( ! [X883,X885,X886,X884] : (~p(s(bool,happ(s(fun(bool,bool),X883),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X883),s(bool,X885)))) | p(s(bool,X884)) | s(bool,'F_0') = s(bool,g(s(bool,X886))) | s(bool,X886) = s(bool,sK22(X883,X884,bool))) ) | $spl65),
  inference(superposition,[],[f301,f8643])).
fof(f12980,plain,(
  ( ! [X881,X882,X880,X879] : (~p(s(bool,happ(s(fun(bool,bool),X879),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X880),s(bool,X881)))) | ~p(s(bool,happ(s(fun(bool,bool),X880),s(bool,sK20(X879,X880,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X882))) | s(bool,X882) = s(bool,sK21(X879,X880,bool))) ) | $spl65),
  inference(superposition,[],[f299,f8643])).
fof(f12979,plain,(
  ( ! [X878,X876,X875,X877] : (~p(s(bool,happ(s(fun(bool,bool),X875),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X875),s(bool,X877)))) | ~p(s(bool,happ(s(fun(bool,bool),X876),s(bool,sK20(X875,X876,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X878))) | s(bool,X878) = s(bool,sK21(X875,X876,bool))) ) | $spl65),
  inference(superposition,[],[f300,f8643])).
fof(f12978,plain,(
  ( ! [X874,X872,X873,X871] : (~p(s(bool,happ(s(fun(bool,bool),X871),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X872),s(bool,X873)))) | ~p(s(bool,happ(s(fun(bool,bool),X872),s(bool,sK19(X871,X872,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X874))) | s(bool,X874) = s(bool,sK19(X871,X872,bool))) ) | $spl65),
  inference(superposition,[],[f297,f8643])).
fof(f12977,plain,(
  ( ! [X870,X868,X867,X869] : (~p(s(bool,happ(s(fun(bool,bool),X867),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X867),s(bool,X869)))) | ~p(s(bool,happ(s(fun(bool,bool),X868),s(bool,sK19(X867,X868,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X870))) | s(bool,X870) = s(bool,sK19(X867,X868,bool))) ) | $spl65),
  inference(superposition,[],[f298,f8643])).
fof(f12976,plain,(
  ( ! [X866,X864,X863,X865] : (~p(s(bool,happ(s(fun(bool,bool),X863),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X863),s(bool,X865)))) | ~p(s(bool,X864)) | s(bool,'F_0') = s(bool,g(s(bool,X866))) | s(bool,X866) = s(bool,sK16(X863,X864,bool))) ) | $spl65),
  inference(superposition,[],[f292,f8643])).
fof(f12975,plain,(
  ( ! [X860,X859,X861,X862] : (~p(s(bool,happ(s(fun(bool,bool),X859),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X859),s(bool,X861)))) | ~p(s(bool,X860)) | s(bool,'F_0') = s(bool,g(s(bool,X862))) | s(bool,X862) = s(bool,sK15(X859,X860,bool))) ) | $spl65),
  inference(superposition,[],[f290,f8643])).
fof(f12973,plain,(
  ( ! [X854,X852,X855,X853] : (s(bool,'T_0') != s(bool,f(s(X852,sK24(X853,X854,bool,X852)))) | s(fun(X852,bool),X853) = s(fun(X852,bool),X854) | s(bool,'F_0') = s(bool,g(s(bool,X855))) | s(bool,X855) = s(bool,g(s(X852,sK24(X853,X854,bool,X852))))) ) | $spl65),
  inference(superposition,[],[f346,f8643])).
fof(f13235,plain,(
  ( ! [X831,X835,X833,X839,X837,X840,X834,X832,X838,X836] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X831),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X832),s('type.semanticPrimitives.state'(X833),X834),s('type.semanticPrimitives.v',X835),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X836),s('type.semanticPrimitives.v',X837),s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X839)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X838) = s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X839) | s(bool,'F_0') = s(bool,g(s(bool,X840))) | s(bool,X840) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X831),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X832),s('type.semanticPrimitives.state'(X833),X834),s('type.semanticPrimitives.v',X835),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X836),s('type.semanticPrimitives.v',X837),s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X838)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12970,f246])).
fof(f12970,plain,(
  ( ! [X831,X835,X833,X839,X837,X840,X834,X832,X838,X836] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X831),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X832),s('type.semanticPrimitives.state'(X833),X834),s('type.semanticPrimitives.v',X835),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X836),s('type.semanticPrimitives.v',X837),s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X839)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X838) = s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X839) | s(bool,'F_0') = s(bool,g(s(bool,X840))) | s(bool,X840) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X831),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X832),s('type.semanticPrimitives.state'(X833),X834),s('type.semanticPrimitives.v',X835),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X836),s('type.semanticPrimitives.v',X837),s('type.pair.prod'('type.semanticPrimitives.state'(X833),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X838)))) ) | $spl65),
  inference(superposition,[],[f312,f8643])).
fof(f13234,plain,(
  ( ! [X825,X829,X823,X826,X824,X830,X828,X827] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X823),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X824),s('type.semanticPrimitives.state'(X825),X826),s('type.list.list'('type.ast.exp'),X827),s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X829)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X828) = s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X829) | s(bool,'F_0') = s(bool,g(s(bool,X830))) | s(bool,X830) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X823),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X824),s('type.semanticPrimitives.state'(X825),X826),s('type.list.list'('type.ast.exp'),X827),s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X828)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12969,f246])).
fof(f12969,plain,(
  ( ! [X825,X829,X823,X826,X824,X830,X828,X827] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X823),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X824),s('type.semanticPrimitives.state'(X825),X826),s('type.list.list'('type.ast.exp'),X827),s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X829)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X828) = s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X829) | s(bool,'F_0') = s(bool,g(s(bool,X830))) | s(bool,X830) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X823),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X824),s('type.semanticPrimitives.state'(X825),X826),s('type.list.list'('type.ast.exp'),X827),s('type.pair.prod'('type.semanticPrimitives.state'(X825),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X828)))) ) | $spl65),
  inference(superposition,[],[f311,f8643])).
fof(f13233,plain,(
  ( ! [X819,X821,X822,X820] : (p(s(bool,happ(s(fun(bool,bool),X819),s(bool,X820)))) | ~p(s(bool,X821)) | s(bool,'T_0') = s(bool,sK15(X819,X821,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X822))) | s(bool,X822) = s(bool,happ(s(fun(bool,bool),X819),s(bool,'F_0')))) ) | $spl65),
  inference(subsumption_resolution,[],[f12968,f246])).
fof(f12968,plain,(
  ( ! [X819,X821,X822,X820] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X819),s(bool,X820)))) | ~p(s(bool,X821)) | s(bool,'T_0') = s(bool,sK15(X819,X821,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X822))) | s(bool,X822) = s(bool,happ(s(fun(bool,bool),X819),s(bool,'F_0')))) ) | $spl65),
  inference(superposition,[],[f1045,f8643])).
fof(f13232,plain,(
  ( ! [X817,X818,X816,X815] : (p(s(bool,happ(s(fun(bool,bool),X815),s(bool,X816)))) | ~p(s(bool,X817)) | s(bool,'T_0') = s(bool,sK16(X815,X817,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X818))) | s(bool,X818) = s(bool,happ(s(fun(bool,bool),X815),s(bool,'F_0')))) ) | $spl65),
  inference(subsumption_resolution,[],[f12967,f246])).
fof(f12967,plain,(
  ( ! [X817,X818,X816,X815] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X815),s(bool,X816)))) | ~p(s(bool,X817)) | s(bool,'T_0') = s(bool,sK16(X815,X817,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X818))) | s(bool,X818) = s(bool,happ(s(fun(bool,bool),X815),s(bool,'F_0')))) ) | $spl65),
  inference(superposition,[],[f2391,f8643])).
fof(f13231,plain,(
  ( ! [X814,X812,X811,X813] : (p(s(bool,happ(s(fun(bool,bool),X811),s(bool,X812)))) | p(s(bool,X813)) | s(bool,'T_0') = s(bool,sK22(X811,X813,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X814))) | s(bool,X814) = s(bool,happ(s(fun(bool,bool),X811),s(bool,'F_0')))) ) | $spl65),
  inference(subsumption_resolution,[],[f12966,f246])).
fof(f12966,plain,(
  ( ! [X814,X812,X811,X813] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X811),s(bool,X812)))) | p(s(bool,X813)) | s(bool,'T_0') = s(bool,sK22(X811,X813,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X814))) | s(bool,X814) = s(bool,happ(s(fun(bool,bool),X811),s(bool,'F_0')))) ) | $spl65),
  inference(superposition,[],[f2463,f8643])).
fof(f13230,plain,(
  ( ! [X810,X808,X809,X807] : (p(s(bool,happ(s(fun(bool,bool),X807),s(bool,X808)))) | p(s(bool,X809)) | s(bool,'T_0') = s(bool,sK23(X807,X809,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X810))) | s(bool,X810) = s(bool,happ(s(fun(bool,bool),X807),s(bool,'F_0')))) ) | $spl65),
  inference(subsumption_resolution,[],[f12965,f246])).
fof(f12965,plain,(
  ( ! [X810,X808,X809,X807] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X807),s(bool,X808)))) | p(s(bool,X809)) | s(bool,'T_0') = s(bool,sK23(X807,X809,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X810))) | s(bool,X810) = s(bool,happ(s(fun(bool,bool),X807),s(bool,'F_0')))) ) | $spl65),
  inference(superposition,[],[f2486,f8643])).
fof(f13229,plain,(
  ( ! [X802,X806,X804,X803,X805] : (p(s(bool,happ(s(fun(X802,bool),X803),s(X802,X805)))) | p(s(bool,X804)) | s(bool,'F_0') = s(bool,g(s(bool,X806))) | s(bool,X806) = s(bool,happ(s(fun(X802,bool),X803),s(X802,sK23(X803,X804,X802))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12964,f246])).
fof(f12964,plain,(
  ( ! [X802,X806,X804,X803,X805] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X802,bool),X803),s(X802,X805)))) | p(s(bool,X804)) | s(bool,'F_0') = s(bool,g(s(bool,X806))) | s(bool,X806) = s(bool,happ(s(fun(X802,bool),X803),s(X802,sK23(X803,X804,X802))))) ) | $spl65),
  inference(superposition,[],[f303,f8643])).
fof(f13228,plain,(
  ( ! [X798,X800,X799,X797,X801] : (p(s(bool,happ(s(fun(X797,bool),X798),s(X797,X800)))) | p(s(bool,X799)) | s(bool,'F_0') = s(bool,g(s(bool,X801))) | s(bool,X801) = s(bool,happ(s(fun(X797,bool),X798),s(X797,sK22(X798,X799,X797))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12963,f246])).
fof(f12963,plain,(
  ( ! [X798,X800,X799,X797,X801] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X797,bool),X798),s(X797,X800)))) | p(s(bool,X799)) | s(bool,'F_0') = s(bool,g(s(bool,X801))) | s(bool,X801) = s(bool,happ(s(fun(X797,bool),X798),s(X797,sK22(X798,X799,X797))))) ) | $spl65),
  inference(superposition,[],[f301,f8643])).
fof(f13227,plain,(
  ( ! [X796,X795,X793,X794,X792] : (p(s(bool,happ(s(fun(X792,bool),X794),s(X792,X795)))) | ~p(s(bool,happ(s(fun(X792,bool),X794),s(X792,sK20(X793,X794,X792))))) | s(bool,'F_0') = s(bool,g(s(bool,X796))) | s(bool,X796) = s(bool,happ(s(fun(X792,bool),X793),s(X792,sK21(X793,X794,X792))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12962,f246])).
fof(f12962,plain,(
  ( ! [X796,X795,X793,X794,X792] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X792,bool),X794),s(X792,X795)))) | ~p(s(bool,happ(s(fun(X792,bool),X794),s(X792,sK20(X793,X794,X792))))) | s(bool,'F_0') = s(bool,g(s(bool,X796))) | s(bool,X796) = s(bool,happ(s(fun(X792,bool),X793),s(X792,sK21(X793,X794,X792))))) ) | $spl65),
  inference(superposition,[],[f299,f8643])).
fof(f13226,plain,(
  ( ! [X790,X788,X787,X791,X789] : (p(s(bool,happ(s(fun(X787,bool),X788),s(X787,X790)))) | ~p(s(bool,happ(s(fun(X787,bool),X789),s(X787,sK20(X788,X789,X787))))) | s(bool,'F_0') = s(bool,g(s(bool,X791))) | s(bool,X791) = s(bool,happ(s(fun(X787,bool),X788),s(X787,sK21(X788,X789,X787))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12961,f246])).
fof(f12961,plain,(
  ( ! [X790,X788,X787,X791,X789] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X787,bool),X788),s(X787,X790)))) | ~p(s(bool,happ(s(fun(X787,bool),X789),s(X787,sK20(X788,X789,X787))))) | s(bool,'F_0') = s(bool,g(s(bool,X791))) | s(bool,X791) = s(bool,happ(s(fun(X787,bool),X788),s(X787,sK21(X788,X789,X787))))) ) | $spl65),
  inference(superposition,[],[f300,f8643])).
fof(f13225,plain,(
  ( ! [X786,X784,X783,X785,X782] : (p(s(bool,happ(s(fun(X782,bool),X784),s(X782,X785)))) | ~p(s(bool,happ(s(fun(X782,bool),X784),s(X782,sK19(X783,X784,X782))))) | s(bool,'F_0') = s(bool,g(s(bool,X786))) | s(bool,X786) = s(bool,happ(s(fun(X782,bool),X783),s(X782,sK19(X783,X784,X782))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12960,f246])).
fof(f12960,plain,(
  ( ! [X786,X784,X783,X785,X782] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X782,bool),X784),s(X782,X785)))) | ~p(s(bool,happ(s(fun(X782,bool),X784),s(X782,sK19(X783,X784,X782))))) | s(bool,'F_0') = s(bool,g(s(bool,X786))) | s(bool,X786) = s(bool,happ(s(fun(X782,bool),X783),s(X782,sK19(X783,X784,X782))))) ) | $spl65),
  inference(superposition,[],[f297,f8643])).
fof(f13224,plain,(
  ( ! [X779,X777,X781,X778,X780] : (p(s(bool,happ(s(fun(X777,bool),X778),s(X777,X780)))) | ~p(s(bool,happ(s(fun(X777,bool),X779),s(X777,sK19(X778,X779,X777))))) | s(bool,'F_0') = s(bool,g(s(bool,X781))) | s(bool,X781) = s(bool,happ(s(fun(X777,bool),X778),s(X777,sK19(X778,X779,X777))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12959,f246])).
fof(f12959,plain,(
  ( ! [X779,X777,X781,X778,X780] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X777,bool),X778),s(X777,X780)))) | ~p(s(bool,happ(s(fun(X777,bool),X779),s(X777,sK19(X778,X779,X777))))) | s(bool,'F_0') = s(bool,g(s(bool,X781))) | s(bool,X781) = s(bool,happ(s(fun(X777,bool),X778),s(X777,sK19(X778,X779,X777))))) ) | $spl65),
  inference(superposition,[],[f298,f8643])).
fof(f13223,plain,(
  ( ! [X775,X773,X776,X774,X772] : (p(s(bool,happ(s(fun(X772,bool),X773),s(X772,X775)))) | ~p(s(bool,X774)) | s(bool,'F_0') = s(bool,g(s(bool,X776))) | s(bool,X776) = s(bool,happ(s(fun(X772,bool),X773),s(X772,sK16(X773,X774,X772))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12958,f246])).
fof(f12958,plain,(
  ( ! [X775,X773,X776,X774,X772] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X772,bool),X773),s(X772,X775)))) | ~p(s(bool,X774)) | s(bool,'F_0') = s(bool,g(s(bool,X776))) | s(bool,X776) = s(bool,happ(s(fun(X772,bool),X773),s(X772,sK16(X773,X774,X772))))) ) | $spl65),
  inference(superposition,[],[f292,f8643])).
fof(f13222,plain,(
  ( ! [X767,X771,X769,X770,X768] : (p(s(bool,happ(s(fun(X767,bool),X768),s(X767,X770)))) | ~p(s(bool,X769)) | s(bool,'F_0') = s(bool,g(s(bool,X771))) | s(bool,X771) = s(bool,happ(s(fun(X767,bool),X768),s(X767,sK15(X768,X769,X767))))) ) | $spl65),
  inference(subsumption_resolution,[],[f12957,f246])).
fof(f12957,plain,(
  ( ! [X767,X771,X769,X770,X768] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X767,bool),X768),s(X767,X770)))) | ~p(s(bool,X769)) | s(bool,'F_0') = s(bool,g(s(bool,X771))) | s(bool,X771) = s(bool,happ(s(fun(X767,bool),X768),s(X767,sK15(X768,X769,X767))))) ) | $spl65),
  inference(superposition,[],[f290,f8643])).
fof(f13221,plain,(
  ( ! [X765,X761,X763,X759,X764,X766,X760,X762] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X759),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X760),s('type.semanticPrimitives.state'(X761),X762),s('type.ast.exp',X763),s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X765)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X764) = s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X765) | s(bool,'F_0') = s(bool,g(s(bool,X766))) | s(bool,X766) = s(bool,'const.bigStep.evaluate_5'(s(bool,X759),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X760),s('type.semanticPrimitives.state'(X761),X762),s('type.ast.exp',X763),s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X764)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12956,f246])).
fof(f12956,plain,(
  ( ! [X765,X761,X763,X759,X764,X766,X760,X762] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X759),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X760),s('type.semanticPrimitives.state'(X761),X762),s('type.ast.exp',X763),s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X765)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X764) = s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X765) | s(bool,'F_0') = s(bool,g(s(bool,X766))) | s(bool,X766) = s(bool,'const.bigStep.evaluate_5'(s(bool,X759),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X760),s('type.semanticPrimitives.state'(X761),X762),s('type.ast.exp',X763),s('type.pair.prod'('type.semanticPrimitives.state'(X761),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X764)))) ) | $spl65),
  inference(superposition,[],[f310,f8643])).
fof(f13218,plain,(
  ( ! [X127,X130,X128,X129] : (~sP6(X127,X128,X129) | sP7(X127,X128,X129) | s(bool,'F_0') = s(bool,g(s(bool,X130))) | s(bool,X127) = s(bool,X130)) ) | $spl65),
  inference(subsumption_resolution,[],[f12741,f246])).
fof(f12741,plain,(
  ( ! [X127,X130,X128,X129] : (~p(s(bool,'T_0')) | ~sP6(X127,X128,X129) | sP7(X127,X128,X129) | s(bool,'F_0') = s(bool,g(s(bool,X130))) | s(bool,X127) = s(bool,X130)) ) | $spl65),
  inference(superposition,[],[f405,f8643])).
fof(f13217,plain,(
  ( ! [X125,X123,X126,X124] : (~sP8(X123,X124,X125) | sP9(X123,X124,X125) | s(bool,'F_0') = s(bool,g(s(bool,X126))) | s(bool,X123) = s(bool,X126)) ) | $spl65),
  inference(subsumption_resolution,[],[f12740,f246])).
fof(f12740,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,'T_0')) | ~sP8(X123,X124,X125) | sP9(X123,X124,X125) | s(bool,'F_0') = s(bool,g(s(bool,X126))) | s(bool,X123) = s(bool,X126)) ) | $spl65),
  inference(superposition,[],[f404,f8643])).
fof(f13216,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,X120)) | sP9(X119,X120,X121) | s(bool,'F_0') = s(bool,g(s(bool,X122))) | s(bool,X119) = s(bool,X122)) ) | $spl65),
  inference(subsumption_resolution,[],[f12739,f246])).
fof(f12739,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,'T_0')) | ~p(s(bool,X120)) | sP9(X119,X120,X121) | s(bool,'F_0') = s(bool,g(s(bool,X122))) | s(bool,X119) = s(bool,X122)) ) | $spl65),
  inference(superposition,[],[f400,f8643])).
fof(f13215,plain,(
  ( ! [X118,X116,X117,X115] : (p(s(bool,X116)) | sP9(X115,X117,X116) | s(bool,'F_0') = s(bool,g(s(bool,X118))) | s(bool,X115) = s(bool,X118)) ) | $spl65),
  inference(subsumption_resolution,[],[f12738,f246])).
fof(f12738,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X116)) | sP9(X115,X117,X116) | s(bool,'F_0') = s(bool,g(s(bool,X118))) | s(bool,X115) = s(bool,X118)) ) | $spl65),
  inference(superposition,[],[f399,f8643])).
fof(f13214,plain,(
  ( ! [X111,X114,X112,X113] : (p(s(bool,X112)) | sP9(X113,X112,X111) | p(s(bool,X113)) | s(bool,'F_0') = s(bool,g(s(bool,X114))) | s(bool,X111) = s(bool,X114)) ) | $spl65),
  inference(subsumption_resolution,[],[f12737,f246])).
fof(f12737,plain,(
  ( ! [X111,X114,X112,X113] : (~p(s(bool,'T_0')) | p(s(bool,X112)) | sP9(X113,X112,X111) | p(s(bool,X113)) | s(bool,'F_0') = s(bool,g(s(bool,X114))) | s(bool,X111) = s(bool,X114)) ) | $spl65),
  inference(superposition,[],[f398,f8643])).
fof(f13213,plain,(
  ( ! [X109,X107,X110,X108] : (p(s(bool,X108)) | ~p(s(bool,X109)) | ~sP8(X109,X108,X107) | s(bool,'F_0') = s(bool,g(s(bool,X110))) | s(bool,X107) = s(bool,X110)) ) | $spl65),
  inference(subsumption_resolution,[],[f12736,f246])).
fof(f12736,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,X108)) | ~p(s(bool,X109)) | ~sP8(X109,X108,X107) | s(bool,'F_0') = s(bool,g(s(bool,X110))) | s(bool,X107) = s(bool,X110)) ) | $spl65),
  inference(superposition,[],[f394,f8643])).
fof(f13212,plain,(
  ( ! [X103,X105,X106,X104] : (~sP8(X104,X105,X103) | p(s(bool,X105)) | sP9(X104,X105,X103) | s(bool,'F_0') = s(bool,g(s(bool,X106))) | s(bool,X103) = s(bool,X106)) ) | $spl65),
  inference(subsumption_resolution,[],[f12735,f246])).
fof(f12735,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | ~sP8(X104,X105,X103) | p(s(bool,X105)) | sP9(X104,X105,X103) | s(bool,'F_0') = s(bool,g(s(bool,X106))) | s(bool,X103) = s(bool,X106)) ) | $spl65),
  inference(superposition,[],[f393,f8643])).
fof(f13211,plain,(
  ( ! [X101,X99,X102,X100] : (~sP8(X99,X100,X101) | p(s(bool,X100)) | sP9(X99,X100,X101) | s(bool,'F_0') = s(bool,g(s(bool,X102))) | s(bool,X99) = s(bool,X102)) ) | $spl65),
  inference(subsumption_resolution,[],[f12734,f246])).
fof(f12734,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | ~sP8(X99,X100,X101) | p(s(bool,X100)) | sP9(X99,X100,X101) | s(bool,'F_0') = s(bool,g(s(bool,X102))) | s(bool,X99) = s(bool,X102)) ) | $spl65),
  inference(superposition,[],[f392,f8643])).
fof(f13210,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X92)) | sP7(X91,X92,X93) | s(bool,'F_0') = s(bool,g(s(bool,X94))) | s(bool,X91) = s(bool,X94)) ) | $spl65),
  inference(subsumption_resolution,[],[f12732,f246])).
fof(f12732,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | sP7(X91,X92,X93) | s(bool,'F_0') = s(bool,g(s(bool,X94))) | s(bool,X91) = s(bool,X94)) ) | $spl65),
  inference(superposition,[],[f383,f8643])).
fof(f13209,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X88)) | sP7(X87,X89,X88) | s(bool,'F_0') = s(bool,g(s(bool,X90))) | s(bool,X87) = s(bool,X90)) ) | $spl65),
  inference(subsumption_resolution,[],[f12731,f246])).
fof(f12731,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X88)) | sP7(X87,X89,X88) | s(bool,'F_0') = s(bool,g(s(bool,X90))) | s(bool,X87) = s(bool,X90)) ) | $spl65),
  inference(superposition,[],[f382,f8643])).
fof(f13208,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,X84)) | p(s(bool,X85)) | ~sP6(X83,X84,X85) | s(bool,'F_0') = s(bool,g(s(bool,X86))) | s(bool,X83) = s(bool,X86)) ) | $spl65),
  inference(subsumption_resolution,[],[f12730,f246])).
fof(f12730,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,X84)) | p(s(bool,X85)) | ~sP6(X83,X84,X85) | s(bool,'F_0') = s(bool,g(s(bool,X86))) | s(bool,X83) = s(bool,X86)) ) | $spl65),
  inference(superposition,[],[f377,f8643])).
fof(f13207,plain,(
  ( ! [X80,X81,X79,X82] : (~sP6(X79,X80,X81) | p(s(bool,X80)) | sP7(X79,X80,X81) | s(bool,'F_0') = s(bool,g(s(bool,X82))) | s(bool,X79) = s(bool,X82)) ) | $spl65),
  inference(subsumption_resolution,[],[f12729,f246])).
fof(f12729,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | ~sP6(X79,X80,X81) | p(s(bool,X80)) | sP7(X79,X80,X81) | s(bool,'F_0') = s(bool,g(s(bool,X82))) | s(bool,X79) = s(bool,X82)) ) | $spl65),
  inference(superposition,[],[f375,f8643])).
fof(f13206,plain,(
  ( ! [X78,X76,X77,X75] : (~sP6(X75,X76,X77) | sP7(X75,X76,X77) | p(s(bool,X77)) | s(bool,'F_0') = s(bool,g(s(bool,X78))) | s(bool,X75) = s(bool,X78)) ) | $spl65),
  inference(subsumption_resolution,[],[f12728,f246])).
fof(f12728,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | ~sP6(X75,X76,X77) | sP7(X75,X76,X77) | p(s(bool,X77)) | s(bool,'F_0') = s(bool,g(s(bool,X78))) | s(bool,X75) = s(bool,X78)) ) | $spl65),
  inference(superposition,[],[f374,f8643])).
fof(f13205,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X72)) | p(s(bool,X73)) | ~sP3(X72,X71,X73) | s(bool,'F_0') = s(bool,g(s(bool,X74))) | s(bool,X71) = s(bool,X74)) ) | $spl65),
  inference(subsumption_resolution,[],[f12727,f246])).
fof(f12727,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X72)) | p(s(bool,X73)) | ~sP3(X72,X71,X73) | s(bool,'F_0') = s(bool,g(s(bool,X74))) | s(bool,X71) = s(bool,X74)) ) | $spl65),
  inference(superposition,[],[f358,f8643])).
fof(f13204,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,X67) = s(bool,X70)) ) | $spl65),
  inference(subsumption_resolution,[],[f12726,f246])).
fof(f12726,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,'F_0') = s(bool,g(s(bool,X70))) | s(bool,X67) = s(bool,X70)) ) | $spl65),
  inference(superposition,[],[f354,f8643])).
fof(f13203,plain,(
  ( ! [X66,X64,X65] : (p(s(bool,X65)) | sP1(X65,X64) | s(bool,'F_0') = s(bool,g(s(bool,X66))) | s(bool,X64) = s(bool,X66)) ) | $spl65),
  inference(subsumption_resolution,[],[f12725,f246])).
fof(f12725,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | p(s(bool,X65)) | sP1(X65,X64) | s(bool,'F_0') = s(bool,g(s(bool,X66))) | s(bool,X64) = s(bool,X66)) ) | $spl65),
  inference(superposition,[],[f341,f8643])).
fof(f13202,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,X62)) | sP1(X61,X62) | s(bool,'F_0') = s(bool,g(s(bool,X63))) | s(bool,X61) = s(bool,X63)) ) | $spl65),
  inference(subsumption_resolution,[],[f12724,f246])).
fof(f12724,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | sP1(X61,X62) | s(bool,'F_0') = s(bool,g(s(bool,X63))) | s(bool,X61) = s(bool,X63)) ) | $spl65),
  inference(superposition,[],[f338,f8643])).
fof(f13201,plain,(
  ( ! [X59,X60,X58] : (sP0(X58,X59) | s(bool,'F_0') = s(bool,g(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl65),
  inference(subsumption_resolution,[],[f12723,f246])).
fof(f12723,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | sP0(X58,X59) | s(bool,'F_0') = s(bool,g(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl65),
  inference(superposition,[],[f323,f8643])).
fof(f13200,plain,(
  ( ! [X57,X56,X55] : (sP0(X56,X55) | s(bool,'F_0') = s(bool,g(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl65),
  inference(subsumption_resolution,[],[f12722,f246])).
fof(f12722,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | sP0(X56,X55) | s(bool,'F_0') = s(bool,g(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl65),
  inference(superposition,[],[f322,f8643])).
fof(f13199,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X53)) | s(bool,X52) = s(bool,X53) | s(bool,'F_0') = s(bool,g(s(bool,X54))) | s(bool,X52) = s(bool,X54)) ) | $spl65),
  inference(subsumption_resolution,[],[f12721,f246])).
fof(f12721,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X53)) | s(bool,X52) = s(bool,X53) | s(bool,'F_0') = s(bool,g(s(bool,X54))) | s(bool,X52) = s(bool,X54)) ) | $spl65),
  inference(superposition,[],[f316,f8643])).
fof(f13198,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(X15,X17,X16))))) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,X15) = s(bool,X19)) ) | $spl65),
  inference(subsumption_resolution,[],[f12715,f246])).
fof(f12715,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(X15,X17,X16))))) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,X15) = s(bool,X19)) ) | $spl65),
  inference(superposition,[],[f295,f8643])).
fof(f13197,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(X10,X12,X11))))) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X10) = s(bool,X14)) ) | $spl65),
  inference(subsumption_resolution,[],[f12714,f246])).
fof(f12714,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(X10,X12,X11))))) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X10) = s(bool,X14)) ) | $spl65),
  inference(superposition,[],[f293,f8643])).
fof(f13196,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,'F_0') = s(bool,g(s(bool,X7))) | s(bool,X6) = s(bool,X7)) ) | $spl65),
  inference(subsumption_resolution,[],[f12712,f246])).
fof(f12712,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,'F_0') = s(bool,g(s(bool,X7))) | s(bool,X6) = s(bool,X7)) ) | $spl65),
  inference(superposition,[],[f264,f8643])).
fof(f12633,plain,(
  ( ! [X606,X600,X602,X609,X605,X607,X601,X603,X608,X604] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X600),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X601),s('type.semanticPrimitives.state'(X602),X603),s('type.semanticPrimitives.v',X604),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X605),s('type.semanticPrimitives.v',X606),s('type.pair.prod'('type.semanticPrimitives.state'(X602),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X607)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X601),s('type.semanticPrimitives.state'(X602),X603),s('type.semanticPrimitives.v',X604),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X605),s('type.semanticPrimitives.v',X606),s('type.pair.prod'('type.semanticPrimitives.state'(X602),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X608)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X602),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X607) = s('type.pair.prod'('type.semanticPrimitives.state'(X602),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X608) | s(bool,'F_0') = s(bool,g(s(bool,X609))) | s(bool,X600) = s(bool,X609)) ) | $spl65),
  inference(superposition,[],[f312,f8643])).
fof(f12632,plain,(
  ( ! [X596,X598,X592,X594,X597,X599,X593,X595] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X592),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X593),s('type.semanticPrimitives.state'(X594),X595),s('type.list.list'('type.ast.exp'),X596),s('type.pair.prod'('type.semanticPrimitives.state'(X594),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X597)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X593),s('type.semanticPrimitives.state'(X594),X595),s('type.list.list'('type.ast.exp'),X596),s('type.pair.prod'('type.semanticPrimitives.state'(X594),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X598)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X594),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X597) = s('type.pair.prod'('type.semanticPrimitives.state'(X594),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X598) | s(bool,'F_0') = s(bool,g(s(bool,X599))) | s(bool,X592) = s(bool,X599)) ) | $spl65),
  inference(superposition,[],[f311,f8643])).
fof(f12631,plain,(
  ( ! [X588,X590,X584,X586,X589,X591,X585,X587] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X584),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X585),s('type.semanticPrimitives.state'(X586),X587),s('type.ast.exp',X588),s('type.pair.prod'('type.semanticPrimitives.state'(X586),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X589)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X585),s('type.semanticPrimitives.state'(X586),X587),s('type.ast.exp',X588),s('type.pair.prod'('type.semanticPrimitives.state'(X586),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X590)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X586),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X589) = s('type.pair.prod'('type.semanticPrimitives.state'(X586),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X590) | s(bool,'F_0') = s(bool,g(s(bool,X591))) | s(bool,X584) = s(bool,X591)) ) | $spl65),
  inference(superposition,[],[f310,f8643])).
fof(f12589,plain,(
  ( ! [X459,X458] : (sP4('T_0',g(s(bool,X458)),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X459))) | s(bool,X458) = s(bool,X459)) ) | $spl65),
  inference(superposition,[],[f8777,f8643])).
fof(f12588,plain,(
  ( ! [X457,X456] : (~sP2(g(s(bool,X456)),'F_0','F_0') | s(bool,'F_0') = s(bool,g(s(bool,X457))) | s(bool,X456) = s(bool,X457)) ) | $spl65),
  inference(superposition,[],[f8744,f8643])).
fof(f12587,plain,(
  ( ! [X455,X454] : (~sP2('F_0',g(s(bool,X454)),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X455))) | s(bool,X454) = s(bool,X455)) ) | $spl65),
  inference(superposition,[],[f8697,f8643])).
fof(f12586,plain,(
  ( ! [X453,X452] : (sP5('T_0','F_0',g(s(bool,X452))) | s(bool,'F_0') = s(bool,g(s(bool,X453))) | s(bool,X452) = s(bool,X453)) ) | $spl65),
  inference(superposition,[],[f8642,f8643])).
fof(f12585,plain,(
  ( ! [X451,X450] : (~sP5('F_0','F_0',g(s(bool,X450))) | s(bool,'F_0') = s(bool,g(s(bool,X451))) | s(bool,X450) = s(bool,X451)) ) | $spl65),
  inference(superposition,[],[f8641,f8643])).
fof(f12584,plain,(
  ( ! [X449,X448] : (sP5('T_0',g(s(bool,X448)),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X449))) | s(bool,X448) = s(bool,X449)) ) | $spl65),
  inference(superposition,[],[f8640,f8643])).
fof(f12583,plain,(
  ( ! [X447,X446] : (~sP5('F_0',g(s(bool,X446)),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X447))) | s(bool,X446) = s(bool,X447)) ) | $spl65),
  inference(superposition,[],[f8639,f8643])).
fof(f12572,plain,(
  ( ! [X422,X423] : (sP3('T_0',g(s(bool,X422)),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X423))) | s(bool,X422) = s(bool,X423)) ) | $spl65),
  inference(superposition,[],[f8245,f8643])).
fof(f12571,plain,(
  ( ! [X420,X421] : (~sP4('T_0','T_0',g(s(bool,X420))) | s(bool,'F_0') = s(bool,g(s(bool,X421))) | s(bool,X420) = s(bool,X421)) ) | $spl65),
  inference(superposition,[],[f8231,f8643])).
fof(f12570,plain,(
  ( ! [X418,X419] : (sP3(g(s(bool,X418)),'T_0','F_0') | s(bool,'F_0') = s(bool,g(s(bool,X419))) | s(bool,X418) = s(bool,X419)) ) | $spl65),
  inference(superposition,[],[f8207,f8643])).
fof(f12569,plain,(
  ( ! [X416,X417] : (~sP5('T_0','T_0',g(s(bool,X416))) | s(bool,'F_0') = s(bool,g(s(bool,X417))) | s(bool,X416) = s(bool,X417)) ) | $spl65),
  inference(superposition,[],[f8149,f8643])).
fof(f12568,plain,(
  ( ! [X414,X415] : (sP5('F_0','T_0',g(s(bool,X414))) | s(bool,'F_0') = s(bool,g(s(bool,X415))) | s(bool,X414) = s(bool,X415)) ) | $spl65),
  inference(superposition,[],[f8148,f8643])).
fof(f12567,plain,(
  ( ! [X412,X413] : (~sP5('T_0',g(s(bool,X412)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X413))) | s(bool,X412) = s(bool,X413)) ) | $spl65),
  inference(superposition,[],[f8143,f8643])).
fof(f12566,plain,(
  ( ! [X410,X411] : (sP5('F_0',g(s(bool,X410)),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X411))) | s(bool,X410) = s(bool,X411)) ) | $spl65),
  inference(superposition,[],[f8142,f8643])).
fof(f12563,plain,(
  ( ! [X405,X404] : (s(bool,'F_0') = s(bool,g(s(bool,X404))) | s(bool,'F_0') = s(bool,g(s(bool,X405))) | s(bool,X404) = s(bool,X405)) ) | $spl65),
  inference(superposition,[],[f8137,f8643])).
fof(f12562,plain,(
  ( ! [X397,X399,X401,X403,X398,X400,X402] : (~sP7('F_0',X398,'const.bigStep.evaluate_list_5'(s(bool,X397),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X399),s('type.semanticPrimitives.state'(X400),X401),s('type.list.list'('type.ast.exp'),X402),s('type.pair.prod'('type.semanticPrimitives.state'(X400),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X399),s('type.list.list'('type.ast.exp'),X402),s('type.semanticPrimitives.state'(X400),X401))))) | s(bool,'F_0') = s(bool,g(s(bool,X403))) | s(bool,X397) = s(bool,X403)) ) | $spl65),
  inference(superposition,[],[f3242,f8643])).
fof(f12561,plain,(
  ( ! [X389,X391,X393,X395,X390,X396,X392,X394] : (sP2('const.bigStep.evaluate_list_5'(s(bool,X389),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X390),s('type.semanticPrimitives.state'(X391),X392),s('type.list.list'('type.ast.exp'),X393),s('type.pair.prod'('type.semanticPrimitives.state'(X391),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X390),s('type.list.list'('type.ast.exp'),X393),s('type.semanticPrimitives.state'(X391),X392)))),X394,X395) | s(bool,'F_0') = s(bool,g(s(bool,X396))) | s(bool,X389) = s(bool,X396)) ) | $spl65),
  inference(superposition,[],[f3237,f8643])).
fof(f12560,plain,(
  ( ! [X383,X385,X387,X382,X388,X384,X386,X381] : (sP2(X382,'const.bigStep.evaluate_list_5'(s(bool,X381),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X383),s('type.semanticPrimitives.state'(X384),X385),s('type.list.list'('type.ast.exp'),X386),s('type.pair.prod'('type.semanticPrimitives.state'(X384),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X383),s('type.list.list'('type.ast.exp'),X386),s('type.semanticPrimitives.state'(X384),X385)))),X387) | s(bool,'F_0') = s(bool,g(s(bool,X388))) | s(bool,X381) = s(bool,X388)) ) | $spl65),
  inference(superposition,[],[f3236,f8643])).
fof(f12559,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X373,X375] : (sP2(X374,X375,'const.bigStep.evaluate_list_5'(s(bool,X373),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X376),s('type.semanticPrimitives.state'(X377),X378),s('type.list.list'('type.ast.exp'),X379),s('type.pair.prod'('type.semanticPrimitives.state'(X377),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X376),s('type.list.list'('type.ast.exp'),X379),s('type.semanticPrimitives.state'(X377),X378))))) | s(bool,'F_0') = s(bool,g(s(bool,X380))) | s(bool,X373) = s(bool,X380)) ) | $spl65),
  inference(superposition,[],[f3235,f8643])).
fof(f12558,plain,(
  ( ! [X366,X372,X368,X370,X365,X367,X369,X371] : (sP3(X366,X367,'const.bigStep.evaluate_list_5'(s(bool,X365),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X368),s('type.semanticPrimitives.state'(X369),X370),s('type.list.list'('type.ast.exp'),X371),s('type.pair.prod'('type.semanticPrimitives.state'(X369),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X368),s('type.list.list'('type.ast.exp'),X371),s('type.semanticPrimitives.state'(X369),X370))))) | s(bool,'F_0') = s(bool,g(s(bool,X372))) | s(bool,X365) = s(bool,X372)) ) | $spl65),
  inference(superposition,[],[f3234,f8643])).
fof(f12557,plain,(
  ( ! [X364,X360,X362,X359,X361,X363] : (~sP3('T_0','const.bigStep.evaluate_list_5'(s(bool,X359),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X360),s('type.semanticPrimitives.state'(X361),X362),s('type.list.list'('type.ast.exp'),X363),s('type.pair.prod'('type.semanticPrimitives.state'(X361),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X360),s('type.list.list'('type.ast.exp'),X363),s('type.semanticPrimitives.state'(X361),X362)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X364))) | s(bool,X359) = s(bool,X364)) ) | $spl65),
  inference(superposition,[],[f3230,f8643])).
fof(f12556,plain,(
  ( ! [X356,X358,X352,X354,X351,X357,X353,X355] : (sP4(X352,X353,'const.bigStep.evaluate_list_5'(s(bool,X351),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X354),s('type.semanticPrimitives.state'(X355),X356),s('type.list.list'('type.ast.exp'),X357),s('type.pair.prod'('type.semanticPrimitives.state'(X355),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X354),s('type.list.list'('type.ast.exp'),X357),s('type.semanticPrimitives.state'(X355),X356))))) | s(bool,'F_0') = s(bool,g(s(bool,X358))) | s(bool,X351) = s(bool,X358)) ) | $spl65),
  inference(superposition,[],[f3225,f8643])).
fof(f12555,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (~sP4('T_0','const.bigStep.evaluate_list_5'(s(bool,X345),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X346),s('type.semanticPrimitives.state'(X347),X348),s('type.list.list'('type.ast.exp'),X349),s('type.pair.prod'('type.semanticPrimitives.state'(X347),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X346),s('type.list.list'('type.ast.exp'),X349),s('type.semanticPrimitives.state'(X347),X348)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X350))) | s(bool,X345) = s(bool,X350)) ) | $spl65),
  inference(superposition,[],[f3221,f8643])).
fof(f12554,plain,(
  ( ! [X344,X341,X343,X339,X340,X342] : (~sP5('T_0','const.bigStep.evaluate_list_5'(s(bool,X339),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X340),s('type.semanticPrimitives.state'(X341),X342),s('type.list.list'('type.ast.exp'),X343),s('type.pair.prod'('type.semanticPrimitives.state'(X341),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X340),s('type.list.list'('type.ast.exp'),X343),s('type.semanticPrimitives.state'(X341),X342)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X344))) | s(bool,X339) = s(bool,X344)) ) | $spl65),
  inference(superposition,[],[f3213,f8643])).
fof(f12553,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (sP1('F_0','const.bigStep.evaluate_list_5'(s(bool,X333),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X334),s('type.semanticPrimitives.state'(X335),X336),s('type.list.list'('type.ast.exp'),X337),s('type.pair.prod'('type.semanticPrimitives.state'(X335),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X334),s('type.list.list'('type.ast.exp'),X337),s('type.semanticPrimitives.state'(X335),X336))))) | s(bool,'F_0') = s(bool,g(s(bool,X338))) | s(bool,X333) = s(bool,X338)) ) | $spl65),
  inference(superposition,[],[f3210,f8643])).
fof(f12552,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (sP1('const.bigStep.evaluate_list_5'(s(bool,X327),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X328),s('type.semanticPrimitives.state'(X329),X330),s('type.list.list'('type.ast.exp'),X331),s('type.pair.prod'('type.semanticPrimitives.state'(X329),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X328),s('type.list.list'('type.ast.exp'),X331),s('type.semanticPrimitives.state'(X329),X330)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X332))) | s(bool,X327) = s(bool,X332)) ) | $spl65),
  inference(superposition,[],[f3209,f8643])).
fof(f12551,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (~sP1('T_0','const.bigStep.evaluate_list_5'(s(bool,X321),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X322),s('type.semanticPrimitives.state'(X323),X324),s('type.list.list'('type.ast.exp'),X325),s('type.pair.prod'('type.semanticPrimitives.state'(X323),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X322),s('type.list.list'('type.ast.exp'),X325),s('type.semanticPrimitives.state'(X323),X324))))) | s(bool,'F_0') = s(bool,g(s(bool,X326))) | s(bool,X321) = s(bool,X326)) ) | $spl65),
  inference(superposition,[],[f3207,f8643])).
fof(f12550,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (~sP1('const.bigStep.evaluate_list_5'(s(bool,X315),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X316),s('type.semanticPrimitives.state'(X317),X318),s('type.list.list'('type.ast.exp'),X319),s('type.pair.prod'('type.semanticPrimitives.state'(X317),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X316),s('type.list.list'('type.ast.exp'),X319),s('type.semanticPrimitives.state'(X317),X318)))),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X320))) | s(bool,X315) = s(bool,X320)) ) | $spl65),
  inference(superposition,[],[f3205,f8643])).
fof(f12549,plain,(
  ( ! [X313,X308,X310,X312,X314,X309,X311] : (sP0('const.bigStep.evaluate_list_5'(s(bool,X308),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X309),s('type.semanticPrimitives.state'(X310),X311),s('type.list.list'('type.ast.exp'),X312),s('type.pair.prod'('type.semanticPrimitives.state'(X310),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X309),s('type.list.list'('type.ast.exp'),X312),s('type.semanticPrimitives.state'(X310),X311)))),X313) | s(bool,'F_0') = s(bool,g(s(bool,X314))) | s(bool,X308) = s(bool,X314)) ) | $spl65),
  inference(superposition,[],[f3204,f8643])).
fof(f12548,plain,(
  ( ! [X302,X304,X306,X301,X303,X305,X307] : (sP0(X302,'const.bigStep.evaluate_list_5'(s(bool,X301),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X303),s('type.semanticPrimitives.state'(X304),X305),s('type.list.list'('type.ast.exp'),X306),s('type.pair.prod'('type.semanticPrimitives.state'(X304),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X303),s('type.list.list'('type.ast.exp'),X306),s('type.semanticPrimitives.state'(X304),X305))))) | s(bool,'F_0') = s(bool,g(s(bool,X307))) | s(bool,X301) = s(bool,X307)) ) | $spl65),
  inference(superposition,[],[f3203,f8643])).
fof(f12510,plain,(
  ( ! [X200,X201] : (s(bool,X200) != s(bool,g(s(bool,X200))) | s(bool,'F_0') = s(bool,g(s(bool,X201))) | s(bool,X200) = s(bool,X201)) ) | $spl65),
  inference(superposition,[],[f2880,f8643])).
fof(f12508,plain,(
  ( ! [X191,X196,X194,X192,X195,X193] : (~sP9('const.bigStep.evaluate_5'(s(bool,X191),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X192),s('type.semanticPrimitives.state'(X193),X194),s('type.ast.exp',X195),s('type.pair.prod'('type.semanticPrimitives.state'(X193),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X192),s('type.ast.exp',X195),s('type.semanticPrimitives.state'(X193),X194)))),'F_0','T_0') | s(bool,'F_0') = s(bool,g(s(bool,X196))) | s(bool,X191) = s(bool,X196)) ) | $spl65),
  inference(superposition,[],[f2733,f8643])).
fof(f12507,plain,(
  ( ! [X189,X187,X185,X190,X188,X186] : (~sP9('T_0','F_0','const.bigStep.evaluate_5'(s(bool,X185),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X186),s('type.semanticPrimitives.state'(X187),X188),s('type.ast.exp',X189),s('type.pair.prod'('type.semanticPrimitives.state'(X187),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X186),s('type.ast.exp',X189),s('type.semanticPrimitives.state'(X187),X188))))) | s(bool,'F_0') = s(bool,g(s(bool,X190))) | s(bool,X185) = s(bool,X190)) ) | $spl65),
  inference(superposition,[],[f2730,f8643])).
fof(f12506,plain,(
  ( ! [X182,X180,X184,X183,X181,X179] : (sP9('F_0','F_0','const.bigStep.evaluate_5'(s(bool,X179),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X180),s('type.semanticPrimitives.state'(X181),X182),s('type.ast.exp',X183),s('type.pair.prod'('type.semanticPrimitives.state'(X181),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X180),s('type.ast.exp',X183),s('type.semanticPrimitives.state'(X181),X182))))) | s(bool,'F_0') = s(bool,g(s(bool,X184))) | s(bool,X179) = s(bool,X184)) ) | $spl65),
  inference(superposition,[],[f2720,f8643])).
fof(f12505,plain,(
  ( ! [X177,X175,X173,X171,X178,X176,X174,X172] : (sP8(X172,'const.bigStep.evaluate_5'(s(bool,X171),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X173),s('type.semanticPrimitives.state'(X174),X175),s('type.ast.exp',X176),s('type.pair.prod'('type.semanticPrimitives.state'(X174),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X173),s('type.ast.exp',X176),s('type.semanticPrimitives.state'(X174),X175)))),X177) | s(bool,'F_0') = s(bool,g(s(bool,X178))) | s(bool,X171) = s(bool,X178)) ) | $spl65),
  inference(superposition,[],[f2719,f8643])).
fof(f12504,plain,(
  ( ! [X167,X165,X169,X166,X170,X168] : (~sP8('T_0','F_0','const.bigStep.evaluate_5'(s(bool,X165),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.semanticPrimitives.state'(X167),X168),s('type.ast.exp',X169),s('type.pair.prod'('type.semanticPrimitives.state'(X167),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X166),s('type.ast.exp',X169),s('type.semanticPrimitives.state'(X167),X168))))) | s(bool,'F_0') = s(bool,g(s(bool,X170))) | s(bool,X165) = s(bool,X170)) ) | $spl65),
  inference(superposition,[],[f2714,f8643])).
fof(f12503,plain,(
  ( ! [X158,X163,X161,X159,X164,X162,X160] : (~sP9('F_0','const.bigStep.evaluate_5'(s(bool,X158),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X159),s('type.semanticPrimitives.state'(X160),X161),s('type.ast.exp',X162),s('type.pair.prod'('type.semanticPrimitives.state'(X160),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X159),s('type.ast.exp',X162),s('type.semanticPrimitives.state'(X160),X161)))),X163) | s(bool,'F_0') = s(bool,g(s(bool,X164))) | s(bool,X158) = s(bool,X164)) ) | $spl65),
  inference(superposition,[],[f2691,f8643])).
fof(f12502,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (~sP7('const.bigStep.evaluate_5'(s(bool,X152),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X153),s('type.semanticPrimitives.state'(X154),X155),s('type.ast.exp',X156),s('type.pair.prod'('type.semanticPrimitives.state'(X154),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X153),s('type.ast.exp',X156),s('type.semanticPrimitives.state'(X154),X155)))),'F_0','F_0') | s(bool,'F_0') = s(bool,g(s(bool,X157))) | s(bool,X152) = s(bool,X157)) ) | $spl65),
  inference(superposition,[],[f2690,f8643])).
fof(f12501,plain,(
  ( ! [X146,X144,X151,X149,X147,X145,X150,X148] : (sP6(X145,'const.bigStep.evaluate_5'(s(bool,X144),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X146),s('type.semanticPrimitives.state'(X147),X148),s('type.ast.exp',X149),s('type.pair.prod'('type.semanticPrimitives.state'(X147),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X146),s('type.ast.exp',X149),s('type.semanticPrimitives.state'(X147),X148)))),X150) | s(bool,'F_0') = s(bool,g(s(bool,X151))) | s(bool,X144) = s(bool,X151)) ) | $spl65),
  inference(superposition,[],[f2677,f8643])).
fof(f12500,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (sP6(X137,X138,'const.bigStep.evaluate_5'(s(bool,X136),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X139),s('type.semanticPrimitives.state'(X140),X141),s('type.ast.exp',X142),s('type.pair.prod'('type.semanticPrimitives.state'(X140),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X139),s('type.ast.exp',X142),s('type.semanticPrimitives.state'(X140),X141))))) | s(bool,'F_0') = s(bool,g(s(bool,X143))) | s(bool,X136) = s(bool,X143)) ) | $spl65),
  inference(superposition,[],[f2676,f8643])).
fof(f12499,plain,(
  ( ! [X134,X132,X130,X135,X133,X131] : (~sP6('const.bigStep.evaluate_5'(s(bool,X130),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X131),s('type.semanticPrimitives.state'(X132),X133),s('type.ast.exp',X134),s('type.pair.prod'('type.semanticPrimitives.state'(X132),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X131),s('type.ast.exp',X134),s('type.semanticPrimitives.state'(X132),X133)))),'F_0','F_0') | s(bool,'F_0') = s(bool,g(s(bool,X135))) | s(bool,X130) = s(bool,X135)) ) | $spl65),
  inference(superposition,[],[f2673,f8643])).
fof(f12498,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X129] : (~sP7('F_0','const.bigStep.evaluate_5'(s(bool,X123),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.semanticPrimitives.state'(X125),X126),s('type.ast.exp',X127),s('type.pair.prod'('type.semanticPrimitives.state'(X125),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X124),s('type.ast.exp',X127),s('type.semanticPrimitives.state'(X125),X126)))),X128) | s(bool,'F_0') = s(bool,g(s(bool,X129))) | s(bool,X123) = s(bool,X129)) ) | $spl65),
  inference(superposition,[],[f2669,f8643])).
fof(f12497,plain,(
  ( ! [X121,X118,X116,X122,X120,X119,X117] : (~sP7('F_0',X117,'const.bigStep.evaluate_5'(s(bool,X116),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.semanticPrimitives.state'(X119),X120),s('type.ast.exp',X121),s('type.pair.prod'('type.semanticPrimitives.state'(X119),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X118),s('type.ast.exp',X121),s('type.semanticPrimitives.state'(X119),X120))))) | s(bool,'F_0') = s(bool,g(s(bool,X122))) | s(bool,X116) = s(bool,X122)) ) | $spl65),
  inference(superposition,[],[f2667,f8643])).
fof(f12496,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X115,X113] : (sP2('const.bigStep.evaluate_5'(s(bool,X108),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X109),s('type.semanticPrimitives.state'(X110),X111),s('type.ast.exp',X112),s('type.pair.prod'('type.semanticPrimitives.state'(X110),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X109),s('type.ast.exp',X112),s('type.semanticPrimitives.state'(X110),X111)))),X113,X114) | s(bool,'F_0') = s(bool,g(s(bool,X115))) | s(bool,X108) = s(bool,X115)) ) | $spl65),
  inference(superposition,[],[f2660,f8643])).
fof(f12495,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106,X104] : (sP2(X101,'const.bigStep.evaluate_5'(s(bool,X100),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X102),s('type.semanticPrimitives.state'(X103),X104),s('type.ast.exp',X105),s('type.pair.prod'('type.semanticPrimitives.state'(X103),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X102),s('type.ast.exp',X105),s('type.semanticPrimitives.state'(X103),X104)))),X106) | s(bool,'F_0') = s(bool,g(s(bool,X107))) | s(bool,X100) = s(bool,X107)) ) | $spl65),
  inference(superposition,[],[f2659,f8643])).
fof(f12494,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X98,X96] : (sP2(X93,X94,'const.bigStep.evaluate_5'(s(bool,X92),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X95),s('type.semanticPrimitives.state'(X96),X97),s('type.ast.exp',X98),s('type.pair.prod'('type.semanticPrimitives.state'(X96),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X95),s('type.ast.exp',X98),s('type.semanticPrimitives.state'(X96),X97))))) | s(bool,'F_0') = s(bool,g(s(bool,X99))) | s(bool,X92) = s(bool,X99)) ) | $spl65),
  inference(superposition,[],[f2658,f8643])).
fof(f12493,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86,X84] : (sP3(X85,X86,'const.bigStep.evaluate_5'(s(bool,X84),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X87),s('type.semanticPrimitives.state'(X88),X89),s('type.ast.exp',X90),s('type.pair.prod'('type.semanticPrimitives.state'(X88),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X87),s('type.ast.exp',X90),s('type.semanticPrimitives.state'(X88),X89))))) | s(bool,'F_0') = s(bool,g(s(bool,X91))) | s(bool,X84) = s(bool,X91)) ) | $spl65),
  inference(superposition,[],[f2657,f8643])).
fof(f12492,plain,(
  ( ! [X80,X78,X83,X81,X79,X82] : (~sP3('T_0','const.bigStep.evaluate_5'(s(bool,X78),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X79),s('type.semanticPrimitives.state'(X80),X81),s('type.ast.exp',X82),s('type.pair.prod'('type.semanticPrimitives.state'(X80),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X79),s('type.ast.exp',X82),s('type.semanticPrimitives.state'(X80),X81)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X83))) | s(bool,X78) = s(bool,X83)) ) | $spl65),
  inference(superposition,[],[f2652,f8643])).
fof(f12491,plain,(
  ( ! [X70,X76,X74,X72,X71,X77,X75,X73] : (sP4(X71,X72,'const.bigStep.evaluate_5'(s(bool,X70),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X73),s('type.semanticPrimitives.state'(X74),X75),s('type.ast.exp',X76),s('type.pair.prod'('type.semanticPrimitives.state'(X74),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X73),s('type.ast.exp',X76),s('type.semanticPrimitives.state'(X74),X75))))) | s(bool,'F_0') = s(bool,g(s(bool,X77))) | s(bool,X70) = s(bool,X77)) ) | $spl65),
  inference(superposition,[],[f2646,f8643])).
fof(f12490,plain,(
  ( ! [X68,X66,X64,X69,X67,X65] : (~sP4('T_0','const.bigStep.evaluate_5'(s(bool,X64),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X65),s('type.semanticPrimitives.state'(X66),X67),s('type.ast.exp',X68),s('type.pair.prod'('type.semanticPrimitives.state'(X66),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X65),s('type.ast.exp',X68),s('type.semanticPrimitives.state'(X66),X67)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X69))) | s(bool,X64) = s(bool,X69)) ) | $spl65),
  inference(superposition,[],[f2641,f8643])).
fof(f12489,plain,(
  ( ! [X61,X59,X62,X60,X58,X63] : (~sP5('T_0','const.bigStep.evaluate_5'(s(bool,X58),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X59),s('type.semanticPrimitives.state'(X60),X61),s('type.ast.exp',X62),s('type.pair.prod'('type.semanticPrimitives.state'(X60),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X59),s('type.ast.exp',X62),s('type.semanticPrimitives.state'(X60),X61)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X63))) | s(bool,X58) = s(bool,X63)) ) | $spl65),
  inference(superposition,[],[f2632,f8643])).
fof(f12488,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (sP1('F_0','const.bigStep.evaluate_5'(s(bool,X52),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.semanticPrimitives.state'(X54),X55),s('type.ast.exp',X56),s('type.pair.prod'('type.semanticPrimitives.state'(X54),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.ast.exp',X56),s('type.semanticPrimitives.state'(X54),X55))))) | s(bool,'F_0') = s(bool,g(s(bool,X57))) | s(bool,X52) = s(bool,X57)) ) | $spl65),
  inference(superposition,[],[f2629,f8643])).
fof(f12487,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (sP1('const.bigStep.evaluate_5'(s(bool,X46),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X47),s('type.semanticPrimitives.state'(X48),X49),s('type.ast.exp',X50),s('type.pair.prod'('type.semanticPrimitives.state'(X48),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X47),s('type.ast.exp',X50),s('type.semanticPrimitives.state'(X48),X49)))),'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X51))) | s(bool,X46) = s(bool,X51)) ) | $spl65),
  inference(superposition,[],[f2628,f8643])).
fof(f12486,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (~sP1('T_0','const.bigStep.evaluate_5'(s(bool,X40),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.semanticPrimitives.state'(X42),X43),s('type.ast.exp',X44),s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.ast.exp',X44),s('type.semanticPrimitives.state'(X42),X43))))) | s(bool,'F_0') = s(bool,g(s(bool,X45))) | s(bool,X40) = s(bool,X45)) ) | $spl65),
  inference(superposition,[],[f2626,f8643])).
fof(f12485,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (~sP1('const.bigStep.evaluate_5'(s(bool,X34),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X35),s('type.semanticPrimitives.state'(X36),X37),s('type.ast.exp',X38),s('type.pair.prod'('type.semanticPrimitives.state'(X36),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X35),s('type.ast.exp',X38),s('type.semanticPrimitives.state'(X36),X37)))),'T_0') | s(bool,'F_0') = s(bool,g(s(bool,X39))) | s(bool,X34) = s(bool,X39)) ) | $spl65),
  inference(superposition,[],[f2624,f8643])).
fof(f12484,plain,(
  ( ! [X30,X28,X33,X31,X29,X27,X32] : (sP0('const.bigStep.evaluate_5'(s(bool,X27),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X28),s('type.semanticPrimitives.state'(X29),X30),s('type.ast.exp',X31),s('type.pair.prod'('type.semanticPrimitives.state'(X29),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X28),s('type.ast.exp',X31),s('type.semanticPrimitives.state'(X29),X30)))),X32) | s(bool,'F_0') = s(bool,g(s(bool,X33))) | s(bool,X27) = s(bool,X33)) ) | $spl65),
  inference(superposition,[],[f2623,f8643])).
fof(f12483,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (sP0(X21,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.ast.exp',X25),s('type.semanticPrimitives.state'(X23),X24))))) | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,X20) = s(bool,X26)) ) | $spl65),
  inference(superposition,[],[f2622,f8643])).
fof(f12482,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s(bool,X14) = s(bool,'const.bigStep.evaluate_5'(s(bool,X14),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X15),s('type.semanticPrimitives.state'(X16),X17),s('type.ast.exp',X18),s('type.pair.prod'('type.semanticPrimitives.state'(X16),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X15),s('type.ast.exp',X18),s('type.semanticPrimitives.state'(X16),X17))))) | s(bool,'F_0') = s(bool,g(s(bool,X19))) | s(bool,X14) = s(bool,X19)) ) | $spl65),
  inference(superposition,[],[f2620,f8643])).
fof(f12479,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,'F_0') = s(bool,g(s(bool,X4))) | s(bool,X2) = s(bool,X4)) ) | $spl65),
  inference(superposition,[],[f260,f8643])).
fof(f12473,plain,(
  ( ! [X895,X893,X894,X896] : (~p(s(bool,happ(s(fun(bool,bool),X893),s(bool,X895)))) | p(s(bool,happ(s(fun(bool,bool),X894),s(bool,X896)))) | ~p(s(bool,happ(s(fun(bool,bool),X894),s(bool,sK20(X893,X894,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X895))) | s(bool,'T_0') = s(bool,sK21(X893,X894,bool))) ) | $spl65),
  inference(superposition,[],[f299,f8643])).
fof(f12472,plain,(
  ( ! [X890,X892,X891,X889] : (~p(s(bool,happ(s(fun(bool,bool),X889),s(bool,X891)))) | p(s(bool,happ(s(fun(bool,bool),X889),s(bool,X892)))) | ~p(s(bool,happ(s(fun(bool,bool),X890),s(bool,sK20(X889,X890,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X891))) | s(bool,'T_0') = s(bool,sK21(X889,X890,bool))) ) | $spl65),
  inference(superposition,[],[f300,f8643])).
fof(f12471,plain,(
  ( ! [X887,X885,X888,X886] : (~p(s(bool,happ(s(fun(bool,bool),X885),s(bool,X887)))) | p(s(bool,happ(s(fun(bool,bool),X886),s(bool,X888)))) | ~p(s(bool,happ(s(fun(bool,bool),X886),s(bool,sK19(X885,X886,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X887))) | s(bool,'T_0') = s(bool,sK19(X885,X886,bool))) ) | $spl65),
  inference(superposition,[],[f297,f8643])).
fof(f12470,plain,(
  ( ! [X883,X881,X882,X884] : (~p(s(bool,happ(s(fun(bool,bool),X881),s(bool,X883)))) | p(s(bool,happ(s(fun(bool,bool),X881),s(bool,X884)))) | ~p(s(bool,happ(s(fun(bool,bool),X882),s(bool,sK19(X881,X882,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,X883))) | s(bool,'T_0') = s(bool,sK19(X881,X882,bool))) ) | $spl65),
  inference(superposition,[],[f298,f8643])).
fof(f12466,plain,(
  ( ! [X866,X868,X867,X869] : (s(bool,X869) != s(bool,f(s(X866,sK24(X867,X868,bool,X866)))) | s(fun(X866,bool),X867) = s(fun(X866,bool),X868) | s(bool,'F_0') = s(bool,g(s(bool,X869))) | s(bool,'T_0') = s(bool,g(s(X866,sK24(X867,X868,bool,X866))))) ) | $spl65),
  inference(superposition,[],[f346,f8643])).
fof(f12445,plain,(
  ( ! [X761,X763,X762] : (s(bool,X761) != s(bool,X762) | s(bool,X761) = s(bool,X763) | s(bool,'T_0') = s(bool,X763) | s(bool,'F_0') = s(bool,g(s(bool,X762))) | s(bool,'T_0') = s(bool,g(s(bool,X761)))) ) | $spl65),
  inference(superposition,[],[f8152,f8643])).
fof(f13181,plain,(
  ( ! [X736,X734,X737,X735] : (s(X735,f(s(bool,X734))) != s(X735,g(s(bool,X734))) | s(fun(bool,X735),X736) = s(fun(bool,X735),X737) | s(bool,'T_0') = s(bool,sK24(X736,X737,X735,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X734)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12437,f434])).
fof(f12437,plain,(
  ( ! [X736,X734,X737,X735] : (s(X735,f(s(bool,X734))) != s(X735,g(s(bool,X734))) | s(fun(bool,X735),X736) = s(fun(bool,X735),X737) | s(bool,'T_0') = s(bool,sK24(X736,X737,X735,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X734))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl65),
  inference(superposition,[],[f2577,f8643])).
fof(f13180,plain,(
  ( ! [X732,X730,X733,X731] : (~p(s(bool,happ(s(fun(bool,bool),X731),s(bool,X730)))) | p(s(bool,happ(s(fun(bool,bool),X731),s(bool,X732)))) | p(s(bool,X733)) | s(bool,'T_0') = s(bool,sK23(X731,X733,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X730)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12436,f434])).
fof(f12436,plain,(
  ( ! [X732,X730,X733,X731] : (~p(s(bool,happ(s(fun(bool,bool),X731),s(bool,X730)))) | p(s(bool,happ(s(fun(bool,bool),X731),s(bool,X732)))) | p(s(bool,X733)) | s(bool,'T_0') = s(bool,sK23(X731,X733,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X730))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl65),
  inference(superposition,[],[f2486,f8643])).
fof(f13179,plain,(
  ( ! [X728,X726,X729,X727] : (~p(s(bool,happ(s(fun(bool,bool),X727),s(bool,X726)))) | p(s(bool,happ(s(fun(bool,bool),X727),s(bool,X728)))) | p(s(bool,X729)) | s(bool,'T_0') = s(bool,sK22(X727,X729,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X726)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12435,f434])).
fof(f12435,plain,(
  ( ! [X728,X726,X729,X727] : (~p(s(bool,happ(s(fun(bool,bool),X727),s(bool,X726)))) | p(s(bool,happ(s(fun(bool,bool),X727),s(bool,X728)))) | p(s(bool,X729)) | s(bool,'T_0') = s(bool,sK22(X727,X729,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X726))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl65),
  inference(superposition,[],[f2463,f8643])).
fof(f13178,plain,(
  ( ! [X724,X722,X725,X723] : (~p(s(bool,happ(s(fun(bool,bool),X723),s(bool,X722)))) | p(s(bool,happ(s(fun(bool,bool),X723),s(bool,X724)))) | ~p(s(bool,X725)) | s(bool,'T_0') = s(bool,sK16(X723,X725,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X722)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12434,f434])).
fof(f12434,plain,(
  ( ! [X724,X722,X725,X723] : (~p(s(bool,happ(s(fun(bool,bool),X723),s(bool,X722)))) | p(s(bool,happ(s(fun(bool,bool),X723),s(bool,X724)))) | ~p(s(bool,X725)) | s(bool,'T_0') = s(bool,sK16(X723,X725,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X722))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl65),
  inference(superposition,[],[f2391,f8643])).
fof(f13177,plain,(
  ( ! [X720,X718,X721,X719] : (~p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X718)))) | p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X720)))) | ~p(s(bool,X721)) | s(bool,'T_0') = s(bool,sK15(X719,X721,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X718)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12433,f434])).
fof(f12433,plain,(
  ( ! [X720,X718,X721,X719] : (~p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X718)))) | p(s(bool,happ(s(fun(bool,bool),X719),s(bool,X720)))) | ~p(s(bool,X721)) | s(bool,'T_0') = s(bool,sK15(X719,X721,bool)) | s(bool,'F_0') = s(bool,g(s(bool,X718))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl65),
  inference(superposition,[],[f1045,f8643])).
fof(f13169,plain,(
  ( ! [X5] : (~p(s(bool,X5)) | s(bool,'F_0') = s(bool,g(s(bool,X5)))) ) | $spl65),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f3756,f3963,f3945,f3943,f312,f3311,f3868,f3852,f3850,f311,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f1313,f2749,f3823,f3807,f3805,f310,f2578,f2580,f3947,f3854,f3809,f3486,f3447,f2583,f2577,f2486,f2463,f2391,f1045,f415,f265,f264,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10210,f8622,f8621,f8568,f8567,f10269,f10335,f10401,f10468,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11004,f11008,f11009,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061])).
fof(f13061,plain,(
  ( ! [X4,X5] : (~p(s(bool,X5)) | s(bool,'T_0') = s(bool,X4) | s(bool,'F_0') = s(bool,g(s(bool,X5)))) ) | $spl65),
  inference(duplicate_literal_removal,[],[f12198])).
fof(f12198,plain,(
  ( ! [X4,X5] : (~p(s(bool,X5)) | s(bool,'T_0') = s(bool,X4) | s(bool,'F_0') = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X4)) ) | $spl65),
  inference(superposition,[],[f261,f8643])).
fof(f12194,plain,(
  ( ! [X907,X905,X906,X908] : (s(X907,f(s(bool,X908))) != s(X907,g(s(bool,X908))) | s(fun(bool,X907),X905) = s(fun(bool,X907),X906) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X905,X906,X907,bool)))) | s(bool,'T_0') = s(bool,X908)) ) | $spl65),
  inference(superposition,[],[f346,f8643])).
fof(f12193,plain,(
  ( ! [X903,X901,X904,X902] : (~p(s(bool,happ(s(fun(bool,bool),X901),s(bool,X903)))) | p(s(bool,happ(s(fun(bool,bool),X901),s(bool,X904)))) | p(s(bool,X902)) | s(bool,'F_0') = s(bool,g(s(bool,sK23(X901,X902,bool)))) | s(bool,'T_0') = s(bool,X903)) ) | $spl65),
  inference(superposition,[],[f303,f8643])).
fof(f12192,plain,(
  ( ! [X899,X897,X898,X900] : (~p(s(bool,happ(s(fun(bool,bool),X897),s(bool,X899)))) | p(s(bool,happ(s(fun(bool,bool),X897),s(bool,X900)))) | p(s(bool,X898)) | s(bool,'F_0') = s(bool,g(s(bool,sK22(X897,X898,bool)))) | s(bool,'T_0') = s(bool,X899)) ) | $spl65),
  inference(superposition,[],[f301,f8643])).
fof(f12191,plain,(
  ( ! [X895,X893,X894,X896] : (~p(s(bool,happ(s(fun(bool,bool),X893),s(bool,X895)))) | p(s(bool,happ(s(fun(bool,bool),X894),s(bool,X896)))) | ~p(s(bool,happ(s(fun(bool,bool),X894),s(bool,sK20(X893,X894,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,sK21(X893,X894,bool)))) | s(bool,'T_0') = s(bool,X895)) ) | $spl65),
  inference(superposition,[],[f299,f8643])).
fof(f12190,plain,(
  ( ! [X890,X892,X891,X889] : (~p(s(bool,happ(s(fun(bool,bool),X889),s(bool,X891)))) | p(s(bool,happ(s(fun(bool,bool),X889),s(bool,X892)))) | ~p(s(bool,happ(s(fun(bool,bool),X890),s(bool,sK20(X889,X890,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,sK21(X889,X890,bool)))) | s(bool,'T_0') = s(bool,X891)) ) | $spl65),
  inference(superposition,[],[f300,f8643])).
fof(f12189,plain,(
  ( ! [X887,X885,X888,X886] : (~p(s(bool,happ(s(fun(bool,bool),X885),s(bool,X887)))) | p(s(bool,happ(s(fun(bool,bool),X886),s(bool,X888)))) | ~p(s(bool,happ(s(fun(bool,bool),X886),s(bool,sK19(X885,X886,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,sK19(X885,X886,bool)))) | s(bool,'T_0') = s(bool,X887)) ) | $spl65),
  inference(superposition,[],[f297,f8643])).
fof(f12188,plain,(
  ( ! [X883,X881,X882,X884] : (~p(s(bool,happ(s(fun(bool,bool),X881),s(bool,X883)))) | p(s(bool,happ(s(fun(bool,bool),X881),s(bool,X884)))) | ~p(s(bool,happ(s(fun(bool,bool),X882),s(bool,sK19(X881,X882,bool))))) | s(bool,'F_0') = s(bool,g(s(bool,sK19(X881,X882,bool)))) | s(bool,'T_0') = s(bool,X883)) ) | $spl65),
  inference(superposition,[],[f298,f8643])).
fof(f12187,plain,(
  ( ! [X878,X880,X879,X877] : (~p(s(bool,happ(s(fun(bool,bool),X877),s(bool,X879)))) | p(s(bool,happ(s(fun(bool,bool),X877),s(bool,X880)))) | ~p(s(bool,X878)) | s(bool,'F_0') = s(bool,g(s(bool,sK16(X877,X878,bool)))) | s(bool,'T_0') = s(bool,X879)) ) | $spl65),
  inference(superposition,[],[f292,f8643])).
fof(f12186,plain,(
  ( ! [X874,X876,X875,X873] : (~p(s(bool,happ(s(fun(bool,bool),X873),s(bool,X875)))) | p(s(bool,happ(s(fun(bool,bool),X873),s(bool,X876)))) | ~p(s(bool,X874)) | s(bool,'F_0') = s(bool,g(s(bool,sK15(X873,X874,bool)))) | s(bool,'T_0') = s(bool,X875)) ) | $spl65),
  inference(superposition,[],[f290,f8643])).
fof(f12184,plain,(
  ( ! [X866,X868,X867,X869] : (s(bool,X869) != s(bool,f(s(X866,sK24(X867,X868,bool,X866)))) | s(fun(X866,bool),X867) = s(fun(X866,bool),X868) | s(bool,'F_0') = s(bool,g(s(bool,g(s(X866,sK24(X867,X868,bool,X866)))))) | s(bool,'T_0') = s(bool,X869)) ) | $spl65),
  inference(superposition,[],[f346,f8643])).
fof(f13162,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK24(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'F_0') = s(bool,g(s(bool,f(s(X0,sK24(X1,X2,bool,X0))))))) ) | $spl65),
  inference(condensation,[],[f13161])).
fof(f13161,plain,(
  ( ! [X753,X755,X756,X754] : (s(fun(X753,bool),X754) = s(fun(X753,bool),X755) | s(bool,'T_0') = s(bool,g(s(X753,sK24(X754,X755,bool,X753)))) | s(bool,'F_0') = s(bool,g(s(bool,f(s(X753,sK24(X754,X755,bool,X753)))))) | s(bool,'T_0') = s(bool,X756)) ) | $spl65),
  inference(subsumption_resolution,[],[f12159,f253])).
fof(f12159,plain,(
  ( ! [X753,X755,X756,X754] : (s(bool,'F_0') != s(bool,X756) | s(fun(X753,bool),X754) = s(fun(X753,bool),X755) | s(bool,'T_0') = s(bool,g(s(X753,sK24(X754,X755,bool,X753)))) | s(bool,'F_0') = s(bool,g(s(bool,f(s(X753,sK24(X754,X755,bool,X753)))))) | s(bool,'T_0') = s(bool,X756)) ) | $spl65),
  inference(superposition,[],[f2583,f8643])).
fof(f13146,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1)))) ) | $spl65),
  inference(condensation,[],[f13145])).
fof(f13145,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | p(s(bool,X48)) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,g(s(bool,X46)))) ) | $spl65),
  inference(subsumption_resolution,[],[f11924,f260])).
fof(f11924,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | p(s(bool,X48)) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,X47)) ) | $spl65),
  inference(superposition,[],[f313,f8643])).
fof(f11923,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X36,X44,X42,X40] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X37),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X38),s('type.semanticPrimitives.state'(X39),X40),s('type.semanticPrimitives.v',X41),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X42),s('type.semanticPrimitives.v',X43),s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X36),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X38),s('type.semanticPrimitives.state'(X39),X40),s('type.semanticPrimitives.v',X41),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X42),s('type.semanticPrimitives.v',X43),s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X45)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44) = s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X45) | s(bool,'F_0') = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,X37)) ) | $spl65),
  inference(superposition,[],[f312,f8643])).
fof(f11922,plain,(
  ( ! [X30,X28,X35,X33,X31,X29,X34,X32] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X29),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.state'(X31),X32),s('type.list.list'('type.ast.exp'),X33),s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X28),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.state'(X31),X32),s('type.list.list'('type.ast.exp'),X33),s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X35)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34) = s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X35) | s(bool,'F_0') = s(bool,g(s(bool,X28))) | s(bool,'T_0') = s(bool,X29)) ) | $spl65),
  inference(superposition,[],[f311,f8643])).
fof(f11921,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X21),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X27)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26) = s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X27) | s(bool,'F_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X21)) ) | $spl65),
  inference(superposition,[],[f310,f8643])).
fof(f13141,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,X52)) | s(bool,X52) = s(bool,g(s(bool,X51))) | s(bool,X51) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl65),
  inference(subsumption_resolution,[],[f11835,f415])).
fof(f11835,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,'F_0')) | p(s(bool,X52)) | s(bool,X52) = s(bool,g(s(bool,X51))) | s(bool,X51) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl65),
  inference(superposition,[],[f313,f8643])).
fof(f11834,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X42),s('type.semanticPrimitives.state'(X43),X44),s('type.semanticPrimitives.v',X45),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X46),s('type.semanticPrimitives.v',X47),s('type.pair.prod'('type.semanticPrimitives.state'(X43),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X48)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,g(s(bool,X41))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X42),s('type.semanticPrimitives.state'(X43),X44),s('type.semanticPrimitives.v',X45),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X46),s('type.semanticPrimitives.v',X47),s('type.pair.prod'('type.semanticPrimitives.state'(X43),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X49)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X43),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X48) = s('type.pair.prod'('type.semanticPrimitives.state'(X43),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X49) | s(bool,X41) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | $spl65),
  inference(superposition,[],[f312,f8643])).
fof(f11833,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X34),s('type.semanticPrimitives.state'(X35),X36),s('type.list.list'('type.ast.exp'),X37),s('type.pair.prod'('type.semanticPrimitives.state'(X35),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X38)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,g(s(bool,X33))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X34),s('type.semanticPrimitives.state'(X35),X36),s('type.list.list'('type.ast.exp'),X37),s('type.pair.prod'('type.semanticPrimitives.state'(X35),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X39)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X35),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X38) = s('type.pair.prod'('type.semanticPrimitives.state'(X35),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X39) | s(bool,X33) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl65),
  inference(superposition,[],[f311,f8643])).
fof(f11832,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'F_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.state'(X27),X28),s('type.ast.exp',X29),s('type.pair.prod'('type.semanticPrimitives.state'(X27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X30)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,g(s(bool,X25))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X26),s('type.semanticPrimitives.state'(X27),X28),s('type.ast.exp',X29),s('type.pair.prod'('type.semanticPrimitives.state'(X27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X31)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X30) = s('type.pair.prod'('type.semanticPrimitives.state'(X27),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X31) | s(bool,X25) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl65),
  inference(superposition,[],[f310,f8643])).
fof(f13140,plain,(
  ( ! [X26] : (s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,X26) = s(bool,g(s(bool,'T_0')))) ) | $spl65),
  inference(subsumption_resolution,[],[f11821,f434])).
fof(f11821,plain,(
  ( ! [X26] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,X26) = s(bool,g(s(bool,'T_0')))) ) | $spl65),
  inference(superposition,[],[f8643,f8137])).
fof(f11804,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,'F_0') = s(bool,g(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl65),
  inference(superposition,[],[f8643,f540])).
fof(f11803,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,g(s(bool,X3))) | s(bool,X0) = s(bool,X3)) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f13139,plain,(
  ( ! [X36] : (s(bool,'F_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X36)))) ) | $spl65),
  inference(subsumption_resolution,[],[f11798,f2880])).
fof(f11798,plain,(
  ( ! [X36] : (s(bool,'F_0') = s(bool,X36) | s(bool,'F_0') = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl65),
  inference(superposition,[],[f8643,f8137])).
fof(f13133,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,X26) = s(bool,g(s(bool,X24)))) ) | $spl65),
  inference(subsumption_resolution,[],[f11762,f434])).
fof(f11762,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,'F_0') = s(bool,g(s(bool,X26))) | s(bool,X26) = s(bool,g(s(bool,X24)))) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f11670,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,X10) | s(bool,X8) != s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl65),
  inference(global_subsumption,[],[f11653,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f3756,f3963,f3945,f3943,f312,f3311,f3868,f3852,f3850,f311,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f1313,f2749,f3823,f3807,f3805,f310,f2578,f2580,f3947,f3854,f3809,f3486,f3447,f2583,f2577,f2486,f2463,f2391,f1045,f415,f265,f264,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10210,f8622,f8621,f8568,f8567,f10269,f10335,f10401,f10468,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11004,f11008,f11009,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610])).
fof(f11653,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,X9) | s(bool,X8) = s(bool,X10) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,X8)))) ) | $spl65),
  inference(superposition,[],[f8152,f540])).
fof(f8837,plain,(
  ( ! [X0,X1] : (sP4('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8777,f540])).
fof(f8826,plain,(
  ( ! [X0,X1] : (~sP2(g(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8744,f540])).
fof(f8792,plain,(
  ( ! [X0,X1] : (~sP2('F_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8697,f540])).
fof(f8780,plain,(
  ( ! [X0,X1] : (sP5('T_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8642,f540])).
fof(f8777,plain,(
  sP4('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f8642,f349])).
fof(f8747,plain,(
  ( ! [X0,X1] : (~sP5('F_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8641,f540])).
fof(f8744,plain,(
  ~sP2(g(s(bool,'T_0')),'F_0','F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f415,f424,f421,f8641,f352])).
fof(f8734,plain,(
  ( ! [X0,X1] : (sP5('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8640,f540])).
fof(f8700,plain,(
  ( ! [X0,X1] : (~sP5('F_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8639,f540])).
fof(f8697,plain,(
  ~sP2('F_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f415,f423,f421,f8639,f353])).
fof(f8643,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8137,f540])).
fof(f8639,plain,(
  ~sP5('F_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f415,f8137,f369])).
fof(f8640,plain,(
  sP5('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f246,f8137,f367])).
fof(f8641,plain,(
  ~sP5('F_0','F_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f415,f8137,f369])).
fof(f8642,plain,(
  sP5('T_0','F_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f8137,f367])).
fof(f8354,plain,(
  ( ! [X0,X1] : (sP3('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8245,f540])).
fof(f8343,plain,(
  ( ! [X0,X1] : (~sP4('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8231,f540])).
fof(f8301,plain,(
  ( ! [X0,X1] : (sP3(g(s(bool,X0)),'T_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8207,f540])).
fof(f8288,plain,(
  ( ! [X0,X1] : (~sP5('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8149,f540])).
fof(f8247,plain,(
  ( ! [X0,X1] : (sP5('F_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8148,f540])).
fof(f8245,plain,(
  sP3('T_0',g(s(bool,'T_0')),'F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f8148,f348])).
fof(f8234,plain,(
  ( ! [X0,X1] : (~sP5('T_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8143,f540])).
fof(f8231,plain,(
  ~sP4('T_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f427,f422,f8143,f351])).
fof(f8209,plain,(
  ( ! [X0,X1] : (sP5('F_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f8142,f540])).
fof(f8207,plain,(
  sP3(g(s(bool,'T_0')),'T_0','F_0') | $spl65),
  inference(unit_resulting_resolution,[],[f8142,f348])).
fof(f8152,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl65),
  inference(superposition,[],[f2880,f540])).
fof(f8137,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f455,f2880,f1956])).
fof(f8142,plain,(
  sP5('F_0',g(s(bool,'T_0')),'T_0') | $spl65),
  inference(unit_resulting_resolution,[],[f415,f2880,f366])).
fof(f8143,plain,(
  ~sP5('T_0',g(s(bool,'T_0')),'T_0') | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f368])).
fof(f8147,plain,(
  ~p(s(bool,g(s(bool,'T_0')))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f316])).
fof(f8148,plain,(
  sP5('F_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f415,f2880,f366])).
fof(f8149,plain,(
  ~sP5('T_0','T_0',g(s(bool,'T_0'))) | $spl65),
  inference(unit_resulting_resolution,[],[f246,f2880,f368])).
fof(f21668,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050,f21053,f21055,f21057,f21061])).
fof(f21667,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050,f21053,f21055,f21057])).
fof(f21666,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050,f21053,f21055])).
fof(f21665,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050,f21053])).
fof(f21664,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047,f21050])).
fof(f21663,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046,f21047])).
fof(f21662,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045,f21046])).
fof(f21661,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155,f21045])).
fof(f21660,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170,f21155])).
fof(f21659,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194,f21170])).
fof(f21658,plain,(
  $false | ($spl12 | $spl65 | $spl108)),
  inference(global_subsumption,[],[f21167,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194])).
fof(f21657,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206,f21194])).
fof(f21656,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640,f21206])).
fof(f21655,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639,f21640])).
fof(f21654,plain,(
  $false | ($spl65 | $spl108)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f3133,f2880,f20739,f20771,f20799,f20905,f20959,f20960,f20999,f21000,f21036,f21069,f21068,f21063,f21062,f21072,f21094,f21096,f21106,f21115,f21118,f21129,f21131,f21143,f21158,f21171,f21183,f21196,f21207,f21216,f21313,f21348,f21389,f21416,f21468,f21515,f21516,f21549,f21550,f21586,f21621,f21630,f21631,f21642,f21639])).
fof(f21653,plain,(
  $false | ($spl58 | $spl68 | $spl108)),
  inference(subsumption_resolution,[],[f21652,f415])).
fof(f21652,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl108)),
  inference(forward_demodulation,[],[f21639,f20736])).
fof(f20736,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | ($spl58 | $spl68)),
  inference(forward_demodulation,[],[f2858,f2883])).
fof(f2858,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) | $spl58),
  inference(cnf_transformation,[],[f2858_D])).
fof(f2858_D,plain,(
  s(bool,f(s(bool,'T_0'))) = s(bool,g(s(bool,'T_0'))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f21651,plain,(
  $false | ($spl58 | $spl68 | $spl108)),
  inference(subsumption_resolution,[],[f21650,f415])).
fof(f21650,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl108)),
  inference(forward_demodulation,[],[f21640,f20736])).
fof(f21618,plain,(
  $false | ($spl58 | $spl68 | $spl98)),
  inference(subsumption_resolution,[],[f21617,f415])).
fof(f21617,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl98)),
  inference(forward_demodulation,[],[f21604,f20736])).
fof(f21604,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl98),
  inference(unit_resulting_resolution,[],[f246,f21595,f371])).
fof(f21595,plain,(
  ( ! [X0] : (sP7(g(s(bool,'T_0')),'T_0',X0)) ) | $spl98),
  inference(unit_resulting_resolution,[],[f246,f3128])).
fof(f21616,plain,(
  $false | ($spl58 | $spl68 | $spl98)),
  inference(subsumption_resolution,[],[f21615,f415])).
fof(f21615,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl98)),
  inference(forward_demodulation,[],[f21605,f20736])).
fof(f21605,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl98),
  inference(unit_resulting_resolution,[],[f246,f21595,f370])).
fof(f21583,plain,(
  $false | ($spl58 | $spl68 | $spl96)),
  inference(subsumption_resolution,[],[f21582,f415])).
fof(f21582,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl96)),
  inference(forward_demodulation,[],[f21569,f20736])).
fof(f21569,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl96),
  inference(unit_resulting_resolution,[],[f246,f21560,f371])).
fof(f21560,plain,(
  ( ! [X0] : (sP7(g(s(bool,'T_0')),X0,'T_0')) ) | $spl96),
  inference(unit_resulting_resolution,[],[f246,f3127])).
fof(f21581,plain,(
  $false | ($spl58 | $spl68 | $spl96)),
  inference(subsumption_resolution,[],[f21580,f415])).
fof(f21580,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl96)),
  inference(forward_demodulation,[],[f21570,f20736])).
fof(f21570,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl96),
  inference(unit_resulting_resolution,[],[f246,f21560,f370])).
fof(f21545,plain,(
  $false | ($spl58 | $spl68 | $spl84)),
  inference(subsumption_resolution,[],[f21544,f415])).
fof(f21544,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl84)),
  inference(forward_demodulation,[],[f21535,f20736])).
fof(f21535,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl84),
  inference(unit_resulting_resolution,[],[f415,f21526,f336])).
fof(f21526,plain,(
  sP1('F_0',g(s(bool,'T_0'))) | $spl84),
  inference(unit_resulting_resolution,[],[f415,f3121])).
fof(f21511,plain,(
  $false | ($spl58 | $spl68 | $spl82)),
  inference(subsumption_resolution,[],[f21510,f415])).
fof(f21510,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl82)),
  inference(forward_demodulation,[],[f21501,f20736])).
fof(f21501,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl82),
  inference(unit_resulting_resolution,[],[f415,f21492,f336])).
fof(f21492,plain,(
  sP1(g(s(bool,'T_0')),'F_0') | $spl82),
  inference(unit_resulting_resolution,[],[f415,f3120])).
fof(f20770,plain,(
  $false | ($spl58 | $spl68 | $spl80)),
  inference(subsumption_resolution,[],[f20769,f415])).
fof(f20769,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl80)),
  inference(forward_demodulation,[],[f20760,f20736])).
fof(f20760,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl80),
  inference(unit_resulting_resolution,[],[f415,f3119,f416])).
fof(f20758,plain,(
  $false | ($spl58 | $spl68 | $spl78)),
  inference(subsumption_resolution,[],[f20757,f415])).
fof(f20757,plain,(
  p(s(bool,'F_0')) | ($spl58 | $spl68 | $spl78)),
  inference(forward_demodulation,[],[f20748,f20736])).
fof(f20748,plain,(
  p(s(bool,g(s(bool,'T_0')))) | $spl78),
  inference(unit_resulting_resolution,[],[f415,f3118,f416])).
fof(f20735,plain,(
  $false | ($spl68 | $spl74)),
  inference(subsumption_resolution,[],[f20734,f415])).
fof(f20734,plain,(
  p(s(bool,'F_0')) | ($spl68 | $spl74)),
  inference(backward_demodulation,[],[f2883,f3112])).
fof(f20733,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl142)),
  inference(global_subsumption,[],[f13168,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20702,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl58 | $spl62)),
  inference(backward_demodulation,[],[f2878,f2858])).
fof(f20655,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,X15) | s(fun(bool,bool),X13) = s(fun(bool,bool),X14) | s(bool,'T_0') = s(bool,g(s(bool,sK24(X13,X14,bool,bool)))) | s(bool,X15) = s(bool,sK24(X13,X14,bool,bool))) ) | ($spl58 | $spl65)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2858,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797])).
fof(f3056,plain,(
  ( ! [X0,X1] : (s(bool,f(s(bool,X0))) = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl58),
  inference(superposition,[],[f2858,f540])).
fof(f3052,plain,(
  ~sP5('F_0',g(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl58),
  inference(unit_resulting_resolution,[],[f415,f2858,f369])).
fof(f3053,plain,(
  sP5('T_0',g(s(bool,'T_0')),f(s(bool,'T_0'))) | $spl58),
  inference(unit_resulting_resolution,[],[f246,f2858,f367])).
fof(f3054,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),g(s(bool,'T_0'))) | $spl58),
  inference(unit_resulting_resolution,[],[f415,f2858,f369])).
fof(f3055,plain,(
  sP5('T_0',f(s(bool,'T_0')),g(s(bool,'T_0'))) | $spl58),
  inference(unit_resulting_resolution,[],[f246,f2858,f367])).
fof(f20732,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl136)),
  inference(global_subsumption,[],[f13132,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20731,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl132)),
  inference(global_subsumption,[],[f13130,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20730,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl128)),
  inference(global_subsumption,[],[f10208,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20729,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl114)),
  inference(global_subsumption,[],[f3136,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20728,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl112)),
  inference(global_subsumption,[],[f3135,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20727,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl110)),
  inference(global_subsumption,[],[f3134,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20726,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl108)),
  inference(global_subsumption,[],[f3133,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20725,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl106)),
  inference(global_subsumption,[],[f3132,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20724,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl104)),
  inference(global_subsumption,[],[f3131,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20723,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl102)),
  inference(global_subsumption,[],[f3130,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20722,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl100)),
  inference(global_subsumption,[],[f3129,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20721,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl98)),
  inference(global_subsumption,[],[f3128,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20720,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl96)),
  inference(global_subsumption,[],[f3127,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20719,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl94)),
  inference(global_subsumption,[],[f3126,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20718,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl92)),
  inference(global_subsumption,[],[f3125,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20717,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl90)),
  inference(global_subsumption,[],[f3124,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20716,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl88)),
  inference(global_subsumption,[],[f3123,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20715,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl86)),
  inference(global_subsumption,[],[f3122,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20714,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl84)),
  inference(global_subsumption,[],[f3121,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20713,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl82)),
  inference(global_subsumption,[],[f3120,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20712,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl80)),
  inference(global_subsumption,[],[f3119,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20711,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl78)),
  inference(global_subsumption,[],[f3118,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20710,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl76)),
  inference(global_subsumption,[],[f3114,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20708,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl72)),
  inference(global_subsumption,[],[f3111,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20707,plain,(
  $false | ($spl58 | $spl62 | $spl65 | $spl70)),
  inference(global_subsumption,[],[f3106,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20706,plain,(
  $false | ($spl62 | $spl68)),
  inference(subsumption_resolution,[],[f20705,f434])).
fof(f20705,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl62 | $spl68)),
  inference(forward_demodulation,[],[f2883,f2878])).
fof(f20704,plain,(
  $false | ($spl58 | $spl62 | $spl65)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2858,f2878,f20702,f2880])).
fof(f20703,plain,(
  $false | ($spl58 | $spl62 | $spl65)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3055,f3054,f3053,f3052,f3056,f3062,f3063,f3064,f3065,f3066,f3067,f3072,f3073,f3077,f3078,f3079,f3080,f3081,f3082,f3083,f3084,f3085,f3086,f3087,f3089,f3090,f3091,f3092,f3093,f3094,f3095,f3096,f3097,f3098,f3099,f3100,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f20655,f2880,f2858,f2878,f20702])).
fof(f20701,plain,(
  $false | ($spl58 | $spl65 | $spl126)),
  inference(global_subsumption,[],[f2858,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969,f2880])).
fof(f16969,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f16929,f3201])).
fof(f16929,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,g(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))))) ) | $spl126),
  inference(unit_resulting_resolution,[],[f3201,f7687])).
fof(f16971,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f16927,f2620])).
fof(f16927,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))))) ) | $spl126),
  inference(unit_resulting_resolution,[],[f2620,f7687])).
fof(f16966,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16937])).
fof(f16937,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl126),
  inference(superposition,[],[f7687,f540])).
fof(f16965,plain,(
  ( ! [X8,X7] : (s(bool,X7) = s(bool,g(s(bool,X7))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16940])).
fof(f16940,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X7) = s(bool,g(s(bool,X7))) | s(bool,X7) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl126),
  inference(superposition,[],[f7687,f540])).
fof(f16964,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(duplicate_literal_removal,[],[f16963])).
fof(f16963,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(condensation,[],[f16962])).
fof(f16962,plain,(
  ( ! [X10,X11] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16942])).
fof(f16942,plain,(
  ( ! [X10,X11] : (s(bool,X10) != s(bool,X10) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl126),
  inference(superposition,[],[f7687,f540])).
fof(f16961,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(duplicate_literal_removal,[],[f16960])).
fof(f16960,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(condensation,[],[f16959])).
fof(f16959,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16943])).
fof(f16943,plain,(
  ( ! [X12,X13] : (s(bool,X12) != s(bool,X12) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,X12) = s(bool,X13) | s(bool,'T_0') = s(bool,X13)) ) | $spl126),
  inference(superposition,[],[f7687,f540])).
fof(f16976,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f16956,f2620])).
fof(f16956,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.semanticPrimitives.state'(X18),X19),s('type.ast.exp',X20),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.ast.exp',X20),s('type.semanticPrimitives.state'(X18),X19))))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.semanticPrimitives.state'(X18),X19),s('type.ast.exp',X20),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.ast.exp',X20),s('type.semanticPrimitives.state'(X18),X19)))))))) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16950])).
fof(f16950,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.semanticPrimitives.state'(X18),X19),s('type.ast.exp',X20),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.ast.exp',X20),s('type.semanticPrimitives.state'(X18),X19))))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.semanticPrimitives.state'(X18),X19),s('type.ast.exp',X20),s('type.pair.prod'('type.semanticPrimitives.state'(X18),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.ast.exp',X20),s('type.semanticPrimitives.state'(X18),X19)))))))) ) | $spl126),
  inference(superposition,[],[f7687,f2620])).
fof(f16977,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f16955,f3201])).
fof(f16955,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.list.list'('type.ast.exp'),X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.list.list'('type.ast.exp'),X24),s('type.semanticPrimitives.state'(X22),X23))))) = s(bool,g(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.list.list'('type.ast.exp'),X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.list.list'('type.ast.exp'),X24),s('type.semanticPrimitives.state'(X22),X23)))))))) ) | $spl126),
  inference(trivial_inequality_removal,[],[f16951])).
fof(f16951,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.list.list'('type.ast.exp'),X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.list.list'('type.ast.exp'),X24),s('type.semanticPrimitives.state'(X22),X23))))) = s(bool,g(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.list.list'('type.ast.exp'),X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.list.list'('type.ast.exp'),X24),s('type.semanticPrimitives.state'(X22),X23)))))))) ) | $spl126),
  inference(superposition,[],[f7687,f3201])).
fof(f16953,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(equality_resolution,[],[f7687])).
fof(f19887,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f19746,f3644])).
fof(f19746,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2))))) = s(bool,g(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))))))) ) | $spl126),
  inference(unit_resulting_resolution,[],[f3644,f7687])).
fof(f19916,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl126),
  inference(forward_demodulation,[],[f19872,f3644])).
fof(f19872,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.state'(X322),X323),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.pair.prod'('type.semanticPrimitives.state'(X322),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.semanticPrimitives.state'(X322),X323))))) = s(bool,g(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.state'(X322),X323),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.pair.prod'('type.semanticPrimitives.state'(X322),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.semanticPrimitives.state'(X322),X323)))))))) ) | $spl126),
  inference(trivial_inequality_removal,[],[f19802])).
fof(f19802,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.state'(X322),X323),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.pair.prod'('type.semanticPrimitives.state'(X322),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.semanticPrimitives.state'(X322),X323))))) = s(bool,g(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.state'(X322),X323),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.pair.prod'('type.semanticPrimitives.state'(X322),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X321),s('type.semanticPrimitives.v',X324),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X325),s('type.semanticPrimitives.v',X326),s('type.semanticPrimitives.state'(X322),X323)))))))) ) | $spl126),
  inference(superposition,[],[f7687,f3644])).
fof(f16930,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl126),
  inference(superposition,[],[f7687,f540])).
fof(f20700,plain,(
  $false | ($spl62 | $spl65 | $spl126)),
  inference(global_subsumption,[],[f2878,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969,f2880])).
fof(f20699,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969,f2880])).
fof(f20698,plain,(
  $false | ($spl65 | $spl68 | $spl126)),
  inference(global_subsumption,[],[f2883,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20697,plain,(
  $false | ($spl65 | $spl70 | $spl126)),
  inference(global_subsumption,[],[f3106,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20696,plain,(
  $false | ($spl65 | $spl72 | $spl126)),
  inference(global_subsumption,[],[f3111,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20695,plain,(
  $false | ($spl65 | $spl74 | $spl126)),
  inference(global_subsumption,[],[f3112,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20694,plain,(
  $false | ($spl65 | $spl76 | $spl126)),
  inference(global_subsumption,[],[f3114,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20693,plain,(
  $false | ($spl65 | $spl78 | $spl126)),
  inference(global_subsumption,[],[f3118,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20692,plain,(
  $false | ($spl65 | $spl80 | $spl126)),
  inference(global_subsumption,[],[f3119,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20691,plain,(
  $false | ($spl65 | $spl82 | $spl126)),
  inference(global_subsumption,[],[f3120,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20690,plain,(
  $false | ($spl65 | $spl84 | $spl126)),
  inference(global_subsumption,[],[f3121,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20689,plain,(
  $false | ($spl65 | $spl86 | $spl126)),
  inference(global_subsumption,[],[f3122,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20688,plain,(
  $false | ($spl65 | $spl88 | $spl126)),
  inference(global_subsumption,[],[f3123,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20687,plain,(
  $false | ($spl65 | $spl90 | $spl126)),
  inference(global_subsumption,[],[f3124,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20686,plain,(
  $false | ($spl65 | $spl92 | $spl126)),
  inference(global_subsumption,[],[f3125,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20685,plain,(
  $false | ($spl65 | $spl94 | $spl126)),
  inference(global_subsumption,[],[f3126,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20684,plain,(
  $false | ($spl65 | $spl96 | $spl126)),
  inference(global_subsumption,[],[f3127,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20683,plain,(
  $false | ($spl65 | $spl98 | $spl126)),
  inference(global_subsumption,[],[f3128,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20682,plain,(
  $false | ($spl65 | $spl100 | $spl126)),
  inference(global_subsumption,[],[f3129,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20681,plain,(
  $false | ($spl65 | $spl102 | $spl126)),
  inference(global_subsumption,[],[f3130,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20680,plain,(
  $false | ($spl65 | $spl104 | $spl126)),
  inference(global_subsumption,[],[f3131,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20679,plain,(
  $false | ($spl65 | $spl106 | $spl126)),
  inference(global_subsumption,[],[f3132,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20678,plain,(
  $false | ($spl65 | $spl108 | $spl126)),
  inference(global_subsumption,[],[f3133,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20677,plain,(
  $false | ($spl65 | $spl110 | $spl126)),
  inference(global_subsumption,[],[f3134,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20676,plain,(
  $false | ($spl65 | $spl112 | $spl126)),
  inference(global_subsumption,[],[f3135,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20675,plain,(
  $false | ($spl65 | $spl114 | $spl126)),
  inference(global_subsumption,[],[f3136,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20674,plain,(
  $false | ($spl65 | $spl126 | $spl128)),
  inference(global_subsumption,[],[f10208,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20673,plain,(
  $false | ($spl65 | $spl126 | $spl132)),
  inference(global_subsumption,[],[f13130,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20672,plain,(
  $false | ($spl65 | $spl126 | $spl136)),
  inference(global_subsumption,[],[f13132,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20671,plain,(
  $false | ($spl65 | $spl126 | $spl142)),
  inference(global_subsumption,[],[f13168,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20670,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971,f16969])).
fof(f20669,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966,f16971])).
fof(f20668,plain,(
  $false | ($spl0 | $spl65 | $spl126)),
  inference(global_subsumption,[],[f16972,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966])).
fof(f16972,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl0 | $spl126)),
  inference(forward_demodulation,[],[f16926,f2889])).
fof(f16926,plain,(
  s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))) | ($spl0 | $spl126)),
  inference(unit_resulting_resolution,[],[f2889,f7687])).
fof(f20667,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965,f16966])).
fof(f20666,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964,f16965])).
fof(f20665,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961,f16964])).
fof(f20664,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976,f16961])).
fof(f20663,plain,(
  $false | ($spl0 | $spl65 | $spl126)),
  inference(global_subsumption,[],[f16975,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976])).
fof(f16975,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | ($spl0 | $spl126)),
  inference(forward_demodulation,[],[f16957,f2889])).
fof(f16957,plain,(
  s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))) | ($spl0 | $spl126)),
  inference(trivial_inequality_removal,[],[f16949])).
fof(f16949,plain,(
  s(bool,'T_0') != s(bool,'T_0') | s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) = s(bool,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))) | ($spl0 | $spl126)),
  inference(superposition,[],[f7687,f2889])).
fof(f20662,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977,f16976])).
fof(f20661,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953,f16977])).
fof(f20660,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887,f16953])).
fof(f20659,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916,f19887])).
fof(f20658,plain,(
  $false | ($spl65 | $spl126)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f2880,f8149,f8148,f8147,f8143,f8142,f8137,f8152,f8207,f8209,f8231,f8234,f8245,f8247,f8288,f8301,f8343,f8354,f8642,f8641,f8640,f8639,f8643,f8697,f8700,f8734,f8744,f8747,f8777,f8780,f8792,f8826,f8837,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9908,f9953,f9998,f10066,f10132,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11653,f11670,f11677,f13122,f11761,f13133,f13110,f13099,f13093,f13139,f11803,f11804,f13084,f13140,f11832,f11833,f11834,f13141,f11921,f11922,f11923,f13146,f13162,f12184,f12186,f12187,f12188,f12189,f12190,f12191,f12192,f12193,f12194,f13167,f13061,f13169,f13177,f13178,f13179,f13180,f13181,f12445,f12466,f12470,f12471,f12472,f12473,f12479,f12482,f12483,f12484,f12485,f12486,f12487,f12488,f12489,f12490,f12491,f12492,f12493,f12494,f12495,f12496,f12497,f12498,f12499,f12500,f12501,f12502,f12503,f12504,f12505,f12506,f12507,f12508,f12510,f12548,f12549,f12550,f12551,f12552,f12553,f12554,f12555,f12556,f12557,f12558,f12559,f12560,f12561,f12562,f12563,f12566,f12567,f12568,f12569,f12570,f12571,f12572,f12583,f12584,f12585,f12586,f12587,f12588,f12589,f12631,f12632,f12633,f13196,f13197,f13198,f13199,f13200,f13201,f13202,f13203,f13204,f13205,f13206,f13207,f13208,f13209,f13210,f13211,f13212,f13213,f13214,f13215,f13216,f13217,f13218,f13221,f13222,f13223,f13224,f13225,f13226,f13227,f13228,f13229,f13230,f13231,f13232,f13233,f13234,f13235,f12973,f12975,f12976,f12977,f12978,f12979,f12980,f12981,f12982,f12983,f264,f265,f415,f1045,f2391,f2463,f2486,f2577,f2583,f3447,f3486,f3809,f3854,f3947,f10210,f10269,f10335,f10401,f2578,f2580,f10468,f2749,f310,f3805,f3807,f3823,f11004,f1313,f1540,f1541,f2389,f2458,f2460,f2481,f2483,f3443,f3445,f3482,f3484,f8567,f8568,f8621,f8622,f290,f292,f293,f295,f297,f298,f299,f300,f301,f303,f1974,f1975,f2416,f2443,f2471,f2494,f3371,f3412,f3455,f3494,f11008,f11009,f3311,f311,f3850,f3852,f3868,f3756,f312,f3943,f3945,f3963,f3361,f3402,f7687,f15843,f15881,f15940,f15993,f16035,f16084,f16347,f16493,f16568,f16652,f16704,f16755,f16759,f16833,f16837,f16838,f16844,f16845,f16846,f16847,f16848,f16849,f16850,f16851,f16852,f16853,f16854,f16855,f16856,f16857,f16858,f16859,f16860,f16922,f16921,f16924,f16930,f17120,f17119,f17122,f17162,f17163,f17164,f17175,f17272,f17273,f17274,f17285,f17356,f17409,f17497,f17570,f17620,f17659,f17733,f17821,f17822,f17913,f17912,f17910,f17918,f17995,f17996,f18073,f18072,f18070,f18066,f18078,f18300,f18307,f18420,f18435,f18597,f18599,f18724,f18837,f18915,f19005,f19099,f19178,f19261,f19344,f19432,f19514,f19594,f19672,f19748,f19752,f19888,f19892,f19893,f19899,f19900,f19901,f19902,f19903,f19904,f19905,f19906,f19907,f19908,f19909,f19910,f19911,f19912,f19913,f19914,f19915,f20023,f20117,f20210,f20211,f20290,f20291,f20369,f20478,f20558,f15797,f19916])).
fof(f20643,plain,(
  ( ! [X2,X1] : (sP7(g(s(bool,g(s(bool,X1)))),X2,'T_0') | s(bool,'F_0') = s(bool,X1)) ) | $spl150),
  inference(cnf_transformation,[],[f20643_D])).
fof(f20643_D,plain,(
  ( ! [X2,X1] : (sP7(g(s(bool,g(s(bool,X1)))),X2,'T_0') | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f20645,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP7(g(s(bool,g(s(bool,X1)))),X2,'T_0') | s(bool,'F_0') = s(bool,X1)) ) | $spl122),
  inference(condensation,[],[f20644])).
fof(f20644,plain,(
  ( ! [X28,X26,X29,X27] : (sP7(g(s(bool,g(s(bool,X27)))),X28,'T_0') | s(bool,'F_0') = s(bool,X27) | s(bool,X26) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl122),
  inference(subsumption_resolution,[],[f20625,f591])).
fof(f20625,plain,(
  ( ! [X28,X26,X29,X27] : (~p(s(bool,X26)) | sP7(g(s(bool,g(s(bool,X27)))),X28,'T_0') | s(bool,'F_0') = s(bool,X27) | s(bool,X26) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) ) | $spl122),
  inference(superposition,[],[f18278,f540])).
fof(f18278,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,X70)) | sP7(g(s(bool,g(s(bool,X69)))),X71,X70) | s(bool,'F_0') = s(bool,X69)) ) | $spl122),
  inference(subsumption_resolution,[],[f18180,f246])).
fof(f18180,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,'T_0')) | ~p(s(bool,X70)) | sP7(g(s(bool,g(s(bool,X69)))),X71,X70) | s(bool,'F_0') = s(bool,X69)) ) | $spl122),
  inference(superposition,[],[f382,f17102])).
fof(f17102,plain,(
  ( ! [X114] : (s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X114))))) | s(bool,'F_0') = s(bool,X114)) ) | $spl122),
  inference(subsumption_resolution,[],[f17046,f246])).
fof(f17046,plain,(
  ( ! [X114] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,g(s(bool,g(s(bool,X114))))) | s(bool,'F_0') = s(bool,X114)) ) | $spl122),
  inference(superposition,[],[f16435,f16423])).
fof(f16423,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,g(s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) | $spl122),
  inference(duplicate_literal_removal,[],[f16373])).
fof(f16373,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,g(s(bool,X1)))) ) | $spl122),
  inference(superposition,[],[f7631,f253])).
fof(f16435,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | s(bool,'T_0') = s(bool,g(s(bool,X2)))) ) | $spl122),
  inference(subsumption_resolution,[],[f16381,f264])).
fof(f16381,plain,(
  ( ! [X2] : (~p(s(bool,X2)) | s(bool,'T_0') = s(bool,g(s(bool,X2))) | s(bool,'F_0') = s(bool,X2)) ) | $spl122),
  inference(superposition,[],[f261,f7631])).
fof(f20642,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | sP7(g(s(bool,g(s(bool,X1)))),X2,'T_0') | s(bool,'F_0') = s(bool,X1)) ) | $spl122),
  inference(condensation,[],[f20641])).
fof(f20641,plain,(
  ( ! [X24,X23,X25,X22] : (sP7(g(s(bool,g(s(bool,X23)))),X24,'T_0') | s(bool,'F_0') = s(bool,X23) | s(bool,X22) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl122),
  inference(subsumption_resolution,[],[f20624,f591])).
fof(f20624,plain,(
  ( ! [X24,X23,X25,X22] : (~p(s(bool,X22)) | sP7(g(s(bool,g(s(bool,X23)))),X24,'T_0') | s(bool,'F_0') = s(bool,X23) | s(bool,X22) = s(bool,X25) | s(bool,'T_0') = s(bool,X25)) ) | $spl122),
  inference(superposition,[],[f18278,f540])).
fof(f14817,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13682,f246])).
fof(f13682,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f434,f7686,f316])).
fof(f14816,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13688,f246])).
fof(f13688,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f434,f7686,f316])).
fof(f14815,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13697,f246])).
fof(f13697,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f450,f7686,f337])).
fof(f14814,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13698,f7686])).
fof(f13698,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2898,f7686,f337])).
fof(f2898,plain,(
  sP1('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f341])).
fof(f14813,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13699,f7686])).
fof(f13699,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2629,f7686,f337])).
fof(f14812,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13700,f7686])).
fof(f13700,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3210,f7686,f337])).
fof(f14811,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13708,f246])).
fof(f13708,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f444,f7686,f337])).
fof(f14810,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13713,f7686])).
fof(f13713,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2897,f7686,f337])).
fof(f2897,plain,(
  sP1('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f338])).
fof(f14809,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13714,f7686])).
fof(f13714,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2628,f7686,f337])).
fof(f14808,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13715,f7686])).
fof(f13715,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3209,f7686,f337])).
fof(f14807,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13742,f246])).
fof(f13742,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f603,f415,f7686,f350])).
fof(f14806,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13761,f246])).
fof(f13761,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f981,f415,f7686,f350])).
fof(f14805,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13766,f14102])).
fof(f14102,plain,(
  ( ! [X2,X0,X1] : (sP2(X0,X1,X2)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f365])).
fof(f13766,plain,(
  ~sP2('F_0','T_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f419,f7686,f351])).
fof(f14804,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13767,f14102])).
fof(f13767,plain,(
  ~sP2('F_0','T_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f419,f7686,f351])).
fof(f14803,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13768,f14102])).
fof(f13768,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f2913,f7686,f351])).
fof(f2901,plain,(
  ~sP5('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f246,f415,f411,f350])).
fof(f14802,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13769,f14102])).
fof(f13769,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f2913,f7686,f351])).
fof(f2922,plain,(
  ( ! [X0,X1] : (sP3(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f359])).
fof(f2902,plain,(
  ~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f411,f415,f411,f350])).
fof(f14801,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13770,f14102])).
fof(f13770,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f2913,f7686,f351])).
fof(f14800,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13771,f14102])).
fof(f13771,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f2913,f7686,f351])).
fof(f14799,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13772,f14102])).
fof(f13772,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f2646,f7686,f351])).
fof(f14798,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13773,f14102])).
fof(f13773,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f2646,f7686,f351])).
fof(f14797,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13774,f14102])).
fof(f13774,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f3225,f7686,f351])).
fof(f14796,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13775,f14102])).
fof(f13775,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f3225,f7686,f351])).
fof(f14795,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13776,f14102])).
fof(f13776,plain,(
  ~sP2('F_0','T_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f420,f7686,f351])).
fof(f14794,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13777,f14102])).
fof(f13777,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f420,f7686,f351])).
fof(f14793,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13778,f14102])).
fof(f13778,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f420,f7686,f351])).
fof(f14792,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13779,f14102])).
fof(f13779,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f420,f7686,f351])).
fof(f14791,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13781,f14102])).
fof(f13781,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f420,f7686,f351])).
fof(f14790,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13782,f14102])).
fof(f13782,plain,(
  ~sP2('F_0','T_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f420,f7686,f351])).
fof(f14789,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13783,f14102])).
fof(f13783,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f420,f7686,f351])).
fof(f14788,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13784,f14102])).
fof(f13784,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f420,f7686,f351])).
fof(f14787,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13785,f14102])).
fof(f13785,plain,(
  ( ! [X2,X0,X3,X1] : (~sP2('F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f420,f7686,f351])).
fof(f14786,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13786,f14102])).
fof(f13786,plain,(
  ~sP2('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f420,f7686,f351])).
fof(f14785,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13790,f14060])).
fof(f14060,plain,(
  ( ! [X2,X0,X1] : (sP4(X0,X1,X2)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f355])).
fof(f13790,plain,(
  ~sP4('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f425,f7686,f351])).
fof(f14784,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13792,f14060])).
fof(f13792,plain,(
  ~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f425,f7686,f351])).
fof(f14783,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13793,f14060])).
fof(f13793,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f425,f7686,f351])).
fof(f14782,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13794,f14060])).
fof(f13794,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f425,f7686,f351])).
fof(f14781,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13795,f14060])).
fof(f13795,plain,(
  ~sP4('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f425,f7686,f351])).
fof(f14780,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13796,f14060])).
fof(f13796,plain,(
  ~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f425,f7686,f351])).
fof(f14779,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13797,f14060])).
fof(f13797,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f425,f7686,f351])).
fof(f14778,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13798,f14060])).
fof(f13798,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f425,f7686,f351])).
fof(f14777,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13800,f14096])).
fof(f14096,plain,(
  ( ! [X2,X0,X1] : (sP3(X0,X1,X2)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f359])).
fof(f13800,plain,(
  ~sP3('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f419,f425,f7686,f351])).
fof(f14776,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13805,f14096])).
fof(f13805,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f2913,f425,f7686,f351])).
fof(f14775,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13810,f14096])).
fof(f13810,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f2646,f425,f7686,f351])).
fof(f14774,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13815,f14096])).
fof(f13815,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f3225,f425,f7686,f351])).
fof(f14773,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13820,f14096])).
fof(f13820,plain,(
  ~sP3('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f420,f425,f7686,f351])).
fof(f14772,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13821,f14096])).
fof(f13821,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f420,f425,f7686,f351])).
fof(f14771,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13822,f14096])).
fof(f13822,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f420,f425,f7686,f351])).
fof(f14770,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13823,f14096])).
fof(f13823,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f420,f425,f7686,f351])).
fof(f14769,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13829,f14060])).
fof(f13829,plain,(
  ~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f2923,f7686,f351])).
fof(f14768,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13830,f14060])).
fof(f13830,plain,(
  ~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f2923,f7686,f351])).
fof(f14767,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13833,f14096])).
fof(f13833,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2913,f2923,f7686,f351])).
fof(f14766,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13842,f14096])).
fof(f13842,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f420,f2923,f7686,f351])).
fof(f14765,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13870,f14060])).
fof(f13870,plain,(
  ~sP4('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f426,f7686,f351])).
fof(f14764,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13871,f14060])).
fof(f13871,plain,(
  ~sP4('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f426,f7686,f351])).
fof(f14763,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13872,f14096])).
fof(f13872,plain,(
  ~sP3('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f419,f426,f7686,f351])).
fof(f14762,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13879,f14120])).
fof(f14120,plain,(
  ( ! [X0] : (~sP5(X0,'T_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f434,f7686,f368])).
fof(f13879,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f423,f419,f426,f7686,f351])).
fof(f14761,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13881,f14096])).
fof(f13881,plain,(
  ~sP3('T_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f619,f420,f426,f7686,f351])).
fof(f14760,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13882,f14120])).
fof(f13882,plain,(
  ( ! [X0] : (sP5(X0,'T_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f423,f420,f426,f7686,f351])).
fof(f14759,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13884,f619])).
fof(f13884,plain,(
  sP5('T_0','T_0','F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f422,f420,f426,f7686,f351])).
fof(f14758,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13886,f2926])).
fof(f2926,plain,(
  ~sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f434,f411,f368])).
fof(f13886,plain,(
  sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0','F_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2922,f420,f426,f7686,f351])).
fof(f14757,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13887,f2663])).
fof(f13887,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2657,f420,f426,f7686,f351])).
fof(f14756,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13888,f3238])).
fof(f13888,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3234,f420,f426,f7686,f351])).
fof(f14755,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13891,f14060])).
fof(f13891,plain,(
  ~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f2924,f7686,f351])).
fof(f14754,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13892,f14060])).
fof(f13892,plain,(
  ~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f2924,f7686,f351])).
fof(f14753,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13893,f14060])).
fof(f13893,plain,(
  ~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f2924,f7686,f351])).
fof(f14752,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13894,f14060])).
fof(f13894,plain,(
  ~sP4('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f2924,f7686,f351])).
fof(f14751,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13895,f14096])).
fof(f13895,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f2913,f2924,f7686,f351])).
fof(f14750,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13896,f14096])).
fof(f13896,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2913,f2924,f7686,f351])).
fof(f14749,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13905,f14096])).
fof(f13905,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f420,f2924,f7686,f351])).
fof(f14748,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13906,f14096])).
fof(f13906,plain,(
  ~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f420,f2924,f7686,f351])).
fof(f14747,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13909,f2901])).
fof(f13909,plain,(
  sP5('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f422,f420,f2924,f7686,f351])).
fof(f14746,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f13911,f2902])).
fof(f13911,plain,(
  sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2922,f420,f2924,f7686,f351])).
fof(f14745,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13916,f14060])).
fof(f13916,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f2659,f7686,f351])).
fof(f14744,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13917,f14060])).
fof(f13917,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f2659,f7686,f351])).
fof(f14743,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13918,f14096])).
fof(f13918,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f2646,f2659,f7686,f351])).
fof(f14742,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13926,f14096])).
fof(f13926,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f420,f2659,f7686,f351])).
fof(f14741,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13929,f2632])).
fof(f13929,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f422,f420,f2659,f7686,f351])).
fof(f14740,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13932,f2633])).
fof(f13932,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.ast.exp',X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2657,f420,f2659,f7686,f351])).
fof(f14739,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13935,f14060])).
fof(f13935,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f3236,f7686,f351])).
fof(f14738,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13936,f14060])).
fof(f13936,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4('T_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f3236,f7686,f351])).
fof(f14737,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13937,f14096])).
fof(f13937,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f3225,f3236,f7686,f351])).
fof(f14736,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13945,f14096])).
fof(f13945,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0','T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f420,f3236,f7686,f351])).
fof(f14735,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13948,f3213])).
fof(f13948,plain,(
  ( ! [X2,X0,X3,X1] : (sP5('T_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f422,f420,f3236,f7686,f351])).
fof(f14734,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f13952,f3214])).
fof(f13952,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.semanticPrimitives.state'(X5),X6),s('type.list.list'('type.ast.exp'),X7),s('type.pair.prod'('type.semanticPrimitives.state'(X5),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.ast.exp'),X7),s('type.semanticPrimitives.state'(X5),X6)))),'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3234,f420,f3236,f7686,f351])).
fof(f14733,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14027,f7686])).
fof(f14027,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f421,f415,f7686,f354])).
fof(f14732,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14041,f14060])).
fof(f14041,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f7686,f354])).
fof(f14731,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14043,f7686])).
fof(f14043,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f420,f415,f7686,f354])).
fof(f14730,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14050,f14060])).
fof(f14050,plain,(
  ( ! [X0] : (~sP4('T_0',X0,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f246,f7686,f354])).
fof(f14729,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14058,f14060])).
fof(f14058,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f7686,f354])).
fof(f14728,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14063,f7686])).
fof(f14063,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f424,f415,f7686,f358])).
fof(f14727,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14077,f14096])).
fof(f14077,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f7686,f358])).
fof(f14726,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14079,f7686])).
fof(f14079,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f423,f415,f7686,f358])).
fof(f14725,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14086,f14096])).
fof(f14086,plain,(
  ( ! [X0] : (~sP3('T_0',X0,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f246,f7686,f358])).
fof(f14724,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14094,f14096])).
fof(f14094,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f7686,f358])).
fof(f14719,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14116,f434])).
fof(f14116,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f603,f7686,f368])).
fof(f14718,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14117,f434])).
fof(f14117,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f602,f7686,f368])).
fof(f14717,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14129,f14593])).
fof(f14593,plain,(
  ( ! [X0,X1] : (sP7('F_0',X0,X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f430,f7686,f405])).
fof(f14129,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f370])).
fof(f14716,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14136,f14593])).
fof(f14136,plain,(
  ( ! [X0,X1] : (~sP7('F_0',X0,X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f371])).
fof(f14715,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14169,f14230])).
fof(f14230,plain,(
  ( ! [X2,X0,X1] : (sP6(X0,X1,X2)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f379])).
fof(f14169,plain,(
  ~sP6('F_0','T_0','F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f459,f415,f7686,f374])).
fof(f14714,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14171,f14230])).
fof(f14171,plain,(
  ~sP6('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2930,f415,f7686,f374])).
fof(f2930,plain,(
  ( ! [X0] : (~sP7('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f371])).
fof(f14713,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14173,f14230])).
fof(f14173,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2669,f415,f7686,f374])).
fof(f14712,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14204,f14230])).
fof(f14204,plain,(
  ~sP6('F_0','F_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f456,f415,f7686,f375])).
fof(f14711,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14205,f14230])).
fof(f14205,plain,(
  ~sP6('F_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f415,f7686,f375])).
fof(f2928,plain,(
  ( ! [X0] : (~sP7('F_0',X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f370])).
fof(f14710,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14206,f14230])).
fof(f14206,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6('F_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f415,f7686,f375])).
fof(f14709,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14207,f14230])).
fof(f14207,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6('F_0','F_0','const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3242,f415,f7686,f375])).
fof(f14708,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14226,f14230])).
fof(f14226,plain,(
  ( ! [X0] : (~sP6(X0,'F_0','F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f415,f7686,f377])).
fof(f14707,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14232,f246])).
fof(f14232,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f382])).
fof(f14706,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14240,f7686])).
fof(f14240,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2949,f7686,f382])).
fof(f2949,plain,(
  ~sP7('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f415,f415,f411,f384])).
fof(f14705,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14241,f7686])).
fof(f14241,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2690,f7686,f382])).
fof(f14704,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14247,f246])).
fof(f14247,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f456,f7686,f382])).
fof(f14703,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14248,f7686])).
fof(f14248,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f7686,f382])).
fof(f14702,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14249,f7686])).
fof(f14249,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f7686,f382])).
fof(f14701,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14250,f7686])).
fof(f14250,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3242,f7686,f382])).
fof(f14700,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14251,f7686])).
fof(f14251,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f459,f7686,f382])).
fof(f14699,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14252,f7686])).
fof(f14252,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2930,f7686,f382])).
fof(f14698,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14253,f7686])).
fof(f14253,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2669,f7686,f382])).
fof(f14697,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14260,f246])).
fof(f14260,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f383])).
fof(f14696,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14268,f7686])).
fof(f14268,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2949,f7686,f383])).
fof(f14695,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14269,f7686])).
fof(f14269,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2690,f7686,f383])).
fof(f14694,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14275,f7686])).
fof(f14275,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f456,f7686,f383])).
fof(f14693,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14276,f7686])).
fof(f14276,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f7686,f383])).
fof(f14692,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14277,f7686])).
fof(f14277,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f7686,f383])).
fof(f14691,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14278,f7686])).
fof(f14278,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3242,f7686,f383])).
fof(f14690,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14279,f246])).
fof(f14279,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f459,f7686,f383])).
fof(f14689,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14280,f7686])).
fof(f14280,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2930,f7686,f383])).
fof(f14688,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14281,f7686])).
fof(f14281,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2669,f7686,f383])).
fof(f14687,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14302,f14569])).
fof(f14569,plain,(
  ( ! [X0,X1] : (sP9('F_0',X0,X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f433,f7686,f404])).
fof(f14302,plain,(
  ( ! [X0,X1] : (~sP9('F_0',X0,X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686,f388])).
fof(f14686,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14305,f7686])).
fof(f14305,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f432,f7686,f391])).
fof(f14685,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14307,f7686])).
fof(f14307,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f2970,f7686,f391])).
fof(f2970,plain,(
  ( ! [X0,X1] : (sP8(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f396])).
fof(f2950,plain,(
  ( ! [X0] : (~sP9('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f388])).
fof(f14684,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14309,f7686])).
fof(f14309,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f2719,f7686,f391])).
fof(f14683,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14312,f7686])).
fof(f14312,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f433,f7686,f391])).
fof(f14682,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14313,f7686])).
fof(f14313,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f433,f7686,f391])).
fof(f14681,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14314,f7686])).
fof(f14314,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f433,f7686,f391])).
fof(f14680,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14315,f14463])).
fof(f14463,plain,(
  ( ! [X2,X0,X1] : (sP8(X0,X1,X2)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f396])).
fof(f14315,plain,(
  ~sP8('F_0','T_0','T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f473,f246,f7686,f391])).
fof(f14679,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14316,f14463])).
fof(f14316,plain,(
  ~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'T_0') | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f246,f7686,f391])).
fof(f14678,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14317,f14463])).
fof(f14317,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f246,f7686,f391])).
fof(f14677,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14329,f14463])).
fof(f14329,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f7686,f391])).
fof(f14676,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14330,f14463])).
fof(f14330,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',X0)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f7686,f7686,f391])).
fof(f14675,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14331,f14463])).
fof(f14331,plain,(
  ( ! [X0] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f7686,f7686,f391])).
fof(f14674,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14332,f14463])).
fof(f14332,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f7686,f7686,f391])).
fof(f14673,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14367,f14463])).
fof(f14367,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f7686,f391])).
fof(f14672,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14368,f14463])).
fof(f14368,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',X0)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f7686,f7686,f391])).
fof(f14671,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14369,f14463])).
fof(f14369,plain,(
  ( ! [X0] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f7686,f7686,f391])).
fof(f14670,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14370,f14463])).
fof(f14370,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f7686,f7686,f391])).
fof(f14669,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14399,f14463])).
fof(f14399,plain,(
  ~sP8('F_0','F_0','F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f472,f415,f7686,f392])).
fof(f14668,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14422,f14463])).
fof(f14422,plain,(
  ~sP8('F_0','F_0','F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f472,f415,f7686,f393])).
fof(f14667,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14443,f7686])).
fof(f14443,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f433,f415,f7686,f394])).
fof(f14666,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14446,f14463])).
fof(f14446,plain,(
  ( ! [X0,X1] : (~sP8(X0,'F_0',X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f415,f7686,f394])).
fof(f14665,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14457,f7686])).
fof(f14457,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f431,f415,f7686,f394])).
fof(f14664,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14459,f14463])).
fof(f14459,plain,(
  ( ! [X0] : (~sP8('T_0','F_0',X0)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f246,f415,f7686,f394])).
fof(f14663,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14461,f14463])).
fof(f14461,plain,(
  ( ! [X0,X1] : (~sP8(X0,'F_0',X1)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f415,f7686,f394])).
fof(f14662,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14494,f246])).
fof(f14494,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f879,f7686,f400])).
fof(f14661,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14495,f246])).
fof(f14495,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2979,f7686,f400])).
fof(f2979,plain,(
  ~sP9('T_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f246,f411,f401])).
fof(f14660,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14496,f246])).
fof(f14496,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f2730,f7686,f400])).
fof(f14659,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14497,f7686])).
fof(f14497,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2982,f7686,f400])).
fof(f2982,plain,(
  ~sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f415,f246,f411,f401])).
fof(f14658,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14498,f7686])).
fof(f14498,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2983,f7686,f400])).
fof(f2983,plain,(
  ~sP9('const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),'F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f411,f411,f401])).
fof(f14657,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14499,f7686])).
fof(f14499,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2733,f7686,f400])).
fof(f14656,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14504,f7686])).
fof(f14504,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f400])).
fof(f14655,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14505,f246])).
fof(f14505,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f7686,f400])).
fof(f14654,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14506,f7686])).
fof(f14506,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f7686,f400])).
fof(f14653,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14507,f7686])).
fof(f14507,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f7686,f400])).
fof(f14652,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14518,f246])).
fof(f14518,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f475,f415,f7686,f401])).
fof(f14651,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14535,f246])).
fof(f14535,plain,(
  ~p(s(bool,'T_0')) | $spl124),
  inference(unit_resulting_resolution,[],[f850,f415,f7686,f401])).
fof(f14650,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14536,f7686])).
fof(f14536,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2971,f415,f7686,f401])).
fof(f2971,plain,(
  sP9('F_0','F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl0),
  inference(unit_resulting_resolution,[],[f415,f415,f411,f398])).
fof(f14649,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14537,f7686])).
fof(f14537,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2))))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2720,f415,f7686,f401])).
fof(f14648,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14551,f431])).
fof(f14551,plain,(
  ( ! [X0] : (~sP8('F_0',X0,'F_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f404])).
fof(f14647,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14552,f432])).
fof(f14552,plain,(
  ( ! [X0] : (~sP8('F_0','T_0',X0)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f473,f7686,f404])).
fof(f14646,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14553,f2970])).
fof(f14553,plain,(
  ( ! [X0] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f7686,f404])).
fof(f14645,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14554,f2719])).
fof(f14554,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP8('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f7686,f404])).
fof(f14644,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14572,f428])).
fof(f14572,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'T_0')) ) | $spl124),
  inference(unit_resulting_resolution,[],[f456,f7686,f405])).
fof(f14643,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14573,f2937])).
fof(f2937,plain,(
  ( ! [X0,X1] : (sP6(X0,X1,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f378])).
fof(f14573,plain,(
  ( ! [X0] : (~sP6('F_0',X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f7686,f405])).
fof(f14642,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14574,f2676])).
fof(f14574,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6('F_0',X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X4),s('type.semanticPrimitives.state'(X2),X3)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f7686,f405])).
fof(f14641,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14575,f3251])).
fof(f14575,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6('F_0',X0,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X2),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X2),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.ast.exp'),X4),s('type.semanticPrimitives.state'(X2),X3)))))) ) | $spl124),
  inference(unit_resulting_resolution,[],[f3242,f7686,f405])).
fof(f14640,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14576,f429])).
fof(f14576,plain,(
  ( ! [X0] : (~sP6('F_0','T_0',X0)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f459,f7686,f405])).
fof(f14639,plain,(
  $false | ($spl0 | $spl124)),
  inference(subsumption_resolution,[],[f14577,f2938])).
fof(f2938,plain,(
  ( ! [X0,X1] : (sP6(X0,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f411,f379])).
fof(f14577,plain,(
  ( ! [X0] : (~sP6('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)),X0)) ) | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2930,f7686,f405])).
fof(f14638,plain,(
  $false | $spl124),
  inference(subsumption_resolution,[],[f14578,f2677])).
fof(f14578,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP6('F_0','const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.ast.exp',X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.ast.exp',X3),s('type.semanticPrimitives.state'(X1),X2)))),X4)) ) | $spl124),
  inference(unit_resulting_resolution,[],[f2669,f7686,f405])).
fof(f14620,plain,(
  $false | ($spl34 | $spl124)),
  inference(unit_resulting_resolution,[],[f879,f7686,f1946])).
fof(f14618,plain,(
  $false | ($spl28 | $spl124)),
  inference(unit_resulting_resolution,[],[f433,f415,f7686,f1937])).
fof(f14612,plain,(
  $false | ($spl22 | $spl124)),
  inference(unit_resulting_resolution,[],[f746,f7686,f1928])).
fof(f14610,plain,(
  $false | ($spl20 | $spl124)),
  inference(unit_resulting_resolution,[],[f746,f7686,f1925])).
fof(f14608,plain,(
  $false | ($spl12 | $spl124)),
  inference(unit_resulting_resolution,[],[f424,f415,f7686,f1913])).
fof(f14601,plain,(
  $false | ($spl10 | $spl124)),
  inference(unit_resulting_resolution,[],[f421,f415,f7686,f1910])).
fof(f14594,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f456,f430,f7686,f405])).
fof(f14592,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2669,f2677,f7686,f405])).
fof(f14590,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2930,f2938,f7686,f405])).
fof(f14588,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f459,f429,f7686,f405])).
fof(f14586,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f2676,f7686,f405])).
fof(f14584,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f2937,f7686,f405])).
fof(f14582,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f456,f428,f7686,f405])).
fof(f14570,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f433,f7686,f404])).
fof(f14568,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f2719,f7686,f404])).
fof(f14566,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f2970,f7686,f404])).
fof(f14564,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f432,f7686,f404])).
fof(f14562,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f431,f7686,f404])).
fof(f14550,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f475,f415,f7686,f7686,f401])).
fof(f14542,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f850,f415,f246,f7686,f401])).
fof(f14533,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f475,f415,f7686,f7686,f401])).
fof(f14525,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f475,f415,f246,f7686,f401])).
fof(f14517,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f7686,f400])).
fof(f14515,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f246,f7686,f400])).
fof(f14503,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f7686,f7686,f400])).
fof(f14501,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f879,f246,f7686,f400])).
fof(f14489,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f415,f7686,f399])).
fof(f14477,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f415,f415,f7686,f398])).
fof(f14464,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f870,f7686,f396])).
fof(f14462,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f431,f7686,f415,f7686,f394])).
fof(f14460,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f431,f246,f415,f7686,f394])).
fof(f14447,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f431,f7686,f415,f7686,f394])).
fof(f14445,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f433,f246,f415,f7686,f394])).
fof(f14432,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f433,f415,f7686,f393])).
fof(f14430,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f431,f415,f7686,f393])).
fof(f14409,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f433,f415,f7686,f392])).
fof(f14407,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f431,f415,f7686,f392])).
fof(f14386,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f433,f7686,f7686,f391])).
fof(f14384,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f2719,f7686,f7686,f391])).
fof(f14382,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f2970,f7686,f7686,f391])).
fof(f14380,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f432,f7686,f7686,f391])).
fof(f14378,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f431,f7686,f7686,f391])).
fof(f14348,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f433,f7686,f7686,f391])).
fof(f14346,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f2719,f7686,f7686,f391])).
fof(f14344,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f2970,f7686,f7686,f391])).
fof(f14342,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f432,f7686,f7686,f391])).
fof(f14340,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f472,f431,f7686,f7686,f391])).
fof(f14328,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f433,f246,f7686,f391])).
fof(f14326,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2691,f2719,f246,f7686,f391])).
fof(f14324,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2950,f2970,f246,f7686,f391])).
fof(f14322,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f473,f432,f246,f7686,f391])).
fof(f14303,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f850,f415,f7686,f388])).
fof(f14295,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f728,f415,f415,f7686,f384])).
fof(f14287,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f7686,f383])).
fof(f14285,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f459,f246,f7686,f383])).
fof(f14273,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f7686,f383])).
fof(f14271,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f246,f7686,f383])).
fof(f14259,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f7686,f382])).
fof(f14257,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f456,f246,f7686,f382])).
fof(f14245,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f7686,f7686,f382])).
fof(f14243,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f746,f246,f7686,f382])).
fof(f14231,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f739,f7686,f379])).
fof(f14229,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f739,f7686,f378])).
fof(f14227,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f430,f415,f415,f7686,f377])).
fof(f14217,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f456,f430,f415,f7686,f375])).
fof(f14215,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2667,f2676,f415,f7686,f375])).
fof(f14213,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2928,f2937,f415,f7686,f375])).
fof(f14211,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f456,f428,f415,f7686,f375])).
fof(f14174,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f430,f2669,f415,f7686,f374])).
fof(f14172,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f430,f2930,f415,f7686,f374])).
fof(f14170,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f430,f459,f415,f7686,f374])).
fof(f14137,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f728,f415,f7686,f371])).
fof(f14130,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f728,f415,f7686,f370])).
fof(f14123,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f602,f434,f7686,f368])).
fof(f14121,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f603,f434,f7686,f368])).
fof(f14637,plain,(
  $false | $spl124),
  inference(trivial_inequality_removal,[],[f14110])).
fof(f14110,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl124),
  inference(unit_resulting_resolution,[],[f686,f7686,f367])).
fof(f14636,plain,(
  $false | $spl124),
  inference(trivial_inequality_removal,[],[f14109])).
fof(f14109,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl124),
  inference(unit_resulting_resolution,[],[f677,f7686,f367])).
fof(f14103,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f681,f7686,f365])).
fof(f14101,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f681,f7686,f364])).
fof(f14099,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f681,f7686,f363])).
fof(f14097,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f669,f7686,f359])).
fof(f14095,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f423,f415,f7686,f7686,f358])).
fof(f14087,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f423,f415,f246,f7686,f358])).
fof(f14078,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f423,f415,f7686,f7686,f358])).
fof(f14070,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f424,f415,f246,f7686,f358])).
fof(f14061,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f649,f7686,f355])).
fof(f14059,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f420,f415,f7686,f7686,f354])).
fof(f14051,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f420,f415,f246,f7686,f354])).
fof(f14042,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f420,f415,f7686,f7686,f354])).
fof(f14034,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f421,f415,f246,f7686,f354])).
fof(f13949,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f420,f3236,f7686,f351])).
fof(f13947,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f420,f3236,f7686,f351])).
fof(f13944,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f3225,f3236,f7686,f351])).
fof(f13939,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f3225,f3236,f7686,f351])).
fof(f13930,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f420,f2659,f7686,f351])).
fof(f13928,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f420,f2659,f7686,f351])).
fof(f13925,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f2646,f2659,f7686,f351])).
fof(f13920,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f2646,f2659,f7686,f351])).
fof(f13912,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f420,f2924,f7686,f351])).
fof(f13910,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f420,f2924,f7686,f351])).
fof(f13908,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f420,f2924,f7686,f351])).
fof(f13904,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f2913,f2924,f7686,f351])).
fof(f13900,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f2913,f2924,f7686,f351])).
fof(f13898,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f2913,f2924,f7686,f351])).
fof(f13885,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f420,f426,f7686,f351])).
fof(f13883,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f420,f426,f7686,f351])).
fof(f13880,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f419,f426,f7686,f351])).
fof(f13875,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f419,f426,f7686,f351])).
fof(f13846,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f420,f2923,f7686,f351])).
fof(f13844,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f420,f2923,f7686,f351])).
fof(f13837,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f423,f2913,f2923,f7686,f351])).
fof(f13835,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2902,f2922,f2913,f2923,f7686,f351])).
fof(f13827,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f420,f425,f7686,f351])).
fof(f13825,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f420,f425,f7686,f351])).
fof(f13819,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f423,f3225,f425,f7686,f351])).
fof(f13817,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f3213,f422,f3225,f425,f7686,f351])).
fof(f13814,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f423,f2646,f425,f7686,f351])).
fof(f13812,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f2632,f422,f2646,f425,f7686,f351])).
fof(f13809,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f423,f2913,f425,f7686,f351])).
fof(f13807,plain,(
  $false | ($spl0 | $spl124)),
  inference(unit_resulting_resolution,[],[f2901,f422,f2913,f425,f7686,f351])).
fof(f13804,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f423,f419,f425,f7686,f351])).
fof(f13802,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f619,f422,f419,f425,f7686,f351])).
fof(f13765,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f603,f7686,f415,f7686,f350])).
fof(f13763,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f981,f246,f415,f7686,f350])).
fof(f13753,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f603,f415,f7686,f7686,f350])).
fof(f13747,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f603,f415,f246,f7686,f350])).
fof(f13741,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f441,f415,f7686,f341])).
fof(f13730,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f441,f415,f7686,f338])).
fof(f13719,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f444,f7686,f7686,f337])).
fof(f13717,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f444,f246,f7686,f337])).
fof(f13707,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f444,f7686,f7686,f337])).
fof(f13705,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f450,f246,f7686,f337])).
fof(f13695,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f455,f7686,f323])).
fof(f13693,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f455,f7686,f322])).
fof(f13691,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f434,f7686,f316])).
fof(f13689,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f246,f434,f7686,f316])).
fof(f13685,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f7686,f434,f7686,f316])).
fof(f13683,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f246,f434,f7686,f316])).
fof(f13679,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f434,f7686,f261])).
fof(f13677,plain,(
  $false | $spl124),
  inference(unit_resulting_resolution,[],[f415,f7686])).
fof(f13388,plain,(
  $false | ($spl60 | $spl64)),
  inference(subsumption_resolution,[],[f415,f13238])).
fof(f13238,plain,(
  ( ! [X21] : (p(s(bool,X21))) ) | ($spl60 | $spl64)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2881,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3499,f3498,f3497,f3496,f3500,f3561,f3562,f3565,f3566,f3567,f3568,f3569,f3570,f3571,f3572,f3573,f3574,f3575,f3576,f3577,f3578,f3579,f3580,f3581,f3582,f3583,f3585,f3595,f3605,f3608,f3618,f3621,f3629,f3632,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3682,f3681,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3783,f3796,f3827,f3841,f4074,f4075,f4084,f4106,f4107,f4116,f4135,f4136,f4147,f4167,f4168,f4179,f4203,f4204,f4215,f4238,f4239,f4250,f4284,f4294,f4349,f4353,f4380,f4381,f4392,f4420,f4429,f4432,f4474,f4475,f4489,f4510,f4513,f4524,f4525,f4556,f4566,f4569,f4595,f4917,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f7617,f7626,f7608,f7601,f7589,f7583,f6529,f6530,f7574,f7637,f7639,f7640,f7641,f6556,f6557,f6558,f7642,f7650,f7656,f7657,f6638,f6639,f6640,f7666,f6841,f6843,f6844,f6847,f6848,f6849,f6850,f6851,f7685,f7551,f7695,f7696,f7062,f7064,f7065,f7068,f7069,f7070,f7071,f7074,f7077,f7078,f7079,f7080,f7081,f7082,f7083,f7085,f7133,f7134,f7135,f7136,f7137,f7138,f7139,f7140,f7141,f7142,f7143,f7144,f7145,f7146,f7147,f7148,f7149,f7150,f7151,f7152,f7153,f7154,f7155,f7156,f7157,f7158,f7166,f7167,f7168,f7169,f7170,f7171,f7172,f7173,f7174,f7175,f7176,f7177,f7178,f7185,f7186,f7187,f7704,f7705,f7706,f7707,f7708,f7709,f7710,f7711,f7712,f7713,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7461,f7463,f7464,f7467,f7468,f7469,f7470,f7471,f7494,f7474,f7488,f3756,f3963,f3945,f3943,f312,f3311,f3868,f3852,f3850,f311,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f1313,f2749,f3823,f3807,f3805,f310,f2578,f2580,f3947,f3854,f3809,f3486,f3447,f2583,f2577,f2486,f2463,f2391,f1045,f415,f265,f264,f2877,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9641,f9908,f9953,f9998,f10066,f10132,f10210,f8622,f8621,f8568,f8567,f10269,f10335,f10401,f10468,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11004,f11008,f11009,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f10400])).
fof(f10400,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,g(s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X19),s(bool,X20)))) | p(s(bool,X21)) | s(bool,'T_0') = s(bool,sK23(X19,X21,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X19),s(bool,'F_0')))) ) | $spl60),
  inference(superposition,[],[f2486,f2877])).
fof(f9641,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl60),
  inference(superposition,[],[f2877,f540])).
fof(f7488,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl64),
  inference(duplicate_literal_removal,[],[f7480])).
fof(f7480,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl64),
  inference(equality_factoring,[],[f3500])).
fof(f7474,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(equality_factoring,[],[f3500])).
fof(f7494,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl64),
  inference(trivial_inequality_removal,[],[f7472])).
fof(f7472,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,X0) | s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,'T_0') = s(bool,g(s(bool,X0)))) ) | $spl64),
  inference(equality_factoring,[],[f3500])).
fof(f7471,plain,(
  ( ! [X609,X611,X608,X610] : (s(X610,f(s(bool,'T_0'))) != s(X610,g(s(bool,'T_0'))) | s(fun(bool,X610),X608) = s(fun(bool,X610),X609) | s(bool,X611) = s(bool,g(s(bool,X611))) | s(bool,X611) = s(bool,sK24(X608,X609,X610,bool))) ) | $spl64),
  inference(superposition,[],[f346,f3500])).
fof(f7470,plain,(
  ( ! [X606,X605,X607,X604] : (~p(s(bool,happ(s(fun(bool,bool),X604),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X604),s(bool,X606)))) | p(s(bool,X605)) | s(bool,X607) = s(bool,g(s(bool,X607))) | s(bool,X607) = s(bool,sK23(X604,X605,bool))) ) | $spl64),
  inference(superposition,[],[f303,f3500])).
fof(f7469,plain,(
  ( ! [X600,X602,X601,X603] : (~p(s(bool,happ(s(fun(bool,bool),X600),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X600),s(bool,X602)))) | p(s(bool,X601)) | s(bool,X603) = s(bool,g(s(bool,X603))) | s(bool,X603) = s(bool,sK22(X600,X601,bool))) ) | $spl64),
  inference(superposition,[],[f301,f3500])).
fof(f7468,plain,(
  ( ! [X596,X598,X597,X599] : (~p(s(bool,happ(s(fun(bool,bool),X596),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X597),s(bool,X598)))) | ~p(s(bool,happ(s(fun(bool,bool),X597),s(bool,sK20(X596,X597,bool))))) | s(bool,X599) = s(bool,g(s(bool,X599))) | s(bool,X599) = s(bool,sK21(X596,X597,bool))) ) | $spl64),
  inference(superposition,[],[f299,f3500])).
fof(f7467,plain,(
  ( ! [X592,X594,X593,X595] : (~p(s(bool,happ(s(fun(bool,bool),X592),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X592),s(bool,X594)))) | ~p(s(bool,happ(s(fun(bool,bool),X593),s(bool,sK20(X592,X593,bool))))) | s(bool,X595) = s(bool,g(s(bool,X595))) | s(bool,X595) = s(bool,sK21(X592,X593,bool))) ) | $spl64),
  inference(superposition,[],[f300,f3500])).
fof(f7464,plain,(
  ( ! [X580,X582,X581,X583] : (~p(s(bool,happ(s(fun(bool,bool),X580),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X580),s(bool,X582)))) | ~p(s(bool,X581)) | s(bool,X583) = s(bool,g(s(bool,X583))) | s(bool,X583) = s(bool,sK16(X580,X581,bool))) ) | $spl64),
  inference(superposition,[],[f292,f3500])).
fof(f7463,plain,(
  ( ! [X576,X578,X577,X579] : (~p(s(bool,happ(s(fun(bool,bool),X576),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X576),s(bool,X578)))) | ~p(s(bool,X577)) | s(bool,X579) = s(bool,g(s(bool,X579))) | s(bool,X579) = s(bool,sK15(X576,X577,bool))) ) | $spl64),
  inference(superposition,[],[f290,f3500])).
fof(f7461,plain,(
  ( ! [X569,X571,X572,X570] : (s(bool,'T_0') != s(bool,f(s(X569,sK24(X570,X571,bool,X569)))) | s(fun(X569,bool),X570) = s(fun(X569,bool),X571) | s(bool,X572) = s(bool,g(s(bool,X572))) | s(bool,X572) = s(bool,g(s(X569,sK24(X570,X571,bool,X569))))) ) | $spl64),
  inference(superposition,[],[f346,f3500])).
fof(f7742,plain,(
  ( ! [X557,X553,X555,X549,X551,X556,X552,X554,X548,X550] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X548),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X549),s('type.semanticPrimitives.state'(X550),X551),s('type.semanticPrimitives.v',X552),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X553),s('type.semanticPrimitives.v',X554),s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X556)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X555) = s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X556) | s(bool,X557) = s(bool,g(s(bool,X557))) | s(bool,X557) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X548),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X549),s('type.semanticPrimitives.state'(X550),X551),s('type.semanticPrimitives.v',X552),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X553),s('type.semanticPrimitives.v',X554),s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X555)))) ) | $spl64),
  inference(subsumption_resolution,[],[f7458,f246])).
fof(f7458,plain,(
  ( ! [X557,X553,X555,X549,X551,X556,X552,X554,X548,X550] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X548),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X549),s('type.semanticPrimitives.state'(X550),X551),s('type.semanticPrimitives.v',X552),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X553),s('type.semanticPrimitives.v',X554),s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X556)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X555) = s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X556) | s(bool,X557) = s(bool,g(s(bool,X557))) | s(bool,X557) = s(bool,'const.bigStep.evaluate_match_7'(s(bool,X548),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X549),s('type.semanticPrimitives.state'(X550),X551),s('type.semanticPrimitives.v',X552),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X553),s('type.semanticPrimitives.v',X554),s('type.pair.prod'('type.semanticPrimitives.state'(X550),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X555)))) ) | $spl64),
  inference(superposition,[],[f312,f3500])).
fof(f7741,plain,(
  ( ! [X540,X542,X546,X545,X541,X543,X547,X544] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X541),s('type.semanticPrimitives.state'(X542),X543),s('type.list.list'('type.ast.exp'),X544),s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X546)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X545) = s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X546) | s(bool,X547) = s(bool,g(s(bool,X547))) | s(bool,X547) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X541),s('type.semanticPrimitives.state'(X542),X543),s('type.list.list'('type.ast.exp'),X544),s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X545)))) ) | $spl64),
  inference(subsumption_resolution,[],[f7457,f246])).
fof(f7457,plain,(
  ( ! [X540,X542,X546,X545,X541,X543,X547,X544] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X541),s('type.semanticPrimitives.state'(X542),X543),s('type.list.list'('type.ast.exp'),X544),s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X546)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X545) = s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X546) | s(bool,X547) = s(bool,g(s(bool,X547))) | s(bool,X547) = s(bool,'const.bigStep.evaluate_list_5'(s(bool,X540),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X541),s('type.semanticPrimitives.state'(X542),X543),s('type.list.list'('type.ast.exp'),X544),s('type.pair.prod'('type.semanticPrimitives.state'(X542),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X545)))) ) | $spl64),
  inference(superposition,[],[f311,f3500])).
fof(f7740,plain,(
  ( ! [X536,X538,X537,X539,X535] : (p(s(bool,happ(s(fun(X535,bool),X536),s(X535,X538)))) | p(s(bool,X537)) | s(bool,X539) = s(bool,g(s(bool,X539))) | s(bool,X539) = s(bool,happ(s(fun(X535,bool),X536),s(X535,sK23(X536,X537,X535))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7456,f246])).
fof(f7456,plain,(
  ( ! [X536,X538,X537,X539,X535] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X535,bool),X536),s(X535,X538)))) | p(s(bool,X537)) | s(bool,X539) = s(bool,g(s(bool,X539))) | s(bool,X539) = s(bool,happ(s(fun(X535,bool),X536),s(X535,sK23(X536,X537,X535))))) ) | $spl64),
  inference(superposition,[],[f303,f3500])).
fof(f7739,plain,(
  ( ! [X532,X534,X530,X533,X531] : (p(s(bool,happ(s(fun(X530,bool),X531),s(X530,X533)))) | p(s(bool,X532)) | s(bool,X534) = s(bool,g(s(bool,X534))) | s(bool,X534) = s(bool,happ(s(fun(X530,bool),X531),s(X530,sK22(X531,X532,X530))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7455,f246])).
fof(f7455,plain,(
  ( ! [X532,X534,X530,X533,X531] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X530,bool),X531),s(X530,X533)))) | p(s(bool,X532)) | s(bool,X534) = s(bool,g(s(bool,X534))) | s(bool,X534) = s(bool,happ(s(fun(X530,bool),X531),s(X530,sK22(X531,X532,X530))))) ) | $spl64),
  inference(superposition,[],[f301,f3500])).
fof(f7738,plain,(
  ( ! [X528,X526,X529,X525,X527] : (p(s(bool,happ(s(fun(X525,bool),X527),s(X525,X528)))) | ~p(s(bool,happ(s(fun(X525,bool),X527),s(X525,sK20(X526,X527,X525))))) | s(bool,X529) = s(bool,g(s(bool,X529))) | s(bool,X529) = s(bool,happ(s(fun(X525,bool),X526),s(X525,sK21(X526,X527,X525))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7454,f246])).
fof(f7454,plain,(
  ( ! [X528,X526,X529,X525,X527] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X525,bool),X527),s(X525,X528)))) | ~p(s(bool,happ(s(fun(X525,bool),X527),s(X525,sK20(X526,X527,X525))))) | s(bool,X529) = s(bool,g(s(bool,X529))) | s(bool,X529) = s(bool,happ(s(fun(X525,bool),X526),s(X525,sK21(X526,X527,X525))))) ) | $spl64),
  inference(superposition,[],[f299,f3500])).
fof(f7737,plain,(
  ( ! [X524,X520,X522,X521,X523] : (p(s(bool,happ(s(fun(X520,bool),X521),s(X520,X523)))) | ~p(s(bool,happ(s(fun(X520,bool),X522),s(X520,sK20(X521,X522,X520))))) | s(bool,X524) = s(bool,g(s(bool,X524))) | s(bool,X524) = s(bool,happ(s(fun(X520,bool),X521),s(X520,sK21(X521,X522,X520))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7453,f246])).
fof(f7453,plain,(
  ( ! [X524,X520,X522,X521,X523] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X520,bool),X521),s(X520,X523)))) | ~p(s(bool,happ(s(fun(X520,bool),X522),s(X520,sK20(X521,X522,X520))))) | s(bool,X524) = s(bool,g(s(bool,X524))) | s(bool,X524) = s(bool,happ(s(fun(X520,bool),X521),s(X520,sK21(X521,X522,X520))))) ) | $spl64),
  inference(superposition,[],[f300,f3500])).
fof(f7736,plain,(
  ( ! [X516,X518,X517,X519,X515] : (p(s(bool,happ(s(fun(X515,bool),X517),s(X515,X518)))) | ~p(s(bool,happ(s(fun(X515,bool),X517),s(X515,sK19(X516,X517,X515))))) | s(bool,X519) = s(bool,g(s(bool,X519))) | s(bool,X519) = s(bool,happ(s(fun(X515,bool),X516),s(X515,sK19(X516,X517,X515))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7452,f246])).
fof(f7452,plain,(
  ( ! [X516,X518,X517,X519,X515] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X515,bool),X517),s(X515,X518)))) | ~p(s(bool,happ(s(fun(X515,bool),X517),s(X515,sK19(X516,X517,X515))))) | s(bool,X519) = s(bool,g(s(bool,X519))) | s(bool,X519) = s(bool,happ(s(fun(X515,bool),X516),s(X515,sK19(X516,X517,X515))))) ) | $spl64),
  inference(superposition,[],[f297,f3500])).
fof(f7735,plain,(
  ( ! [X511,X512,X514,X510,X513] : (p(s(bool,happ(s(fun(X510,bool),X511),s(X510,X513)))) | ~p(s(bool,happ(s(fun(X510,bool),X512),s(X510,sK19(X511,X512,X510))))) | s(bool,X514) = s(bool,g(s(bool,X514))) | s(bool,X514) = s(bool,happ(s(fun(X510,bool),X511),s(X510,sK19(X511,X512,X510))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7451,f246])).
fof(f7451,plain,(
  ( ! [X511,X512,X514,X510,X513] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X510,bool),X511),s(X510,X513)))) | ~p(s(bool,happ(s(fun(X510,bool),X512),s(X510,sK19(X511,X512,X510))))) | s(bool,X514) = s(bool,g(s(bool,X514))) | s(bool,X514) = s(bool,happ(s(fun(X510,bool),X511),s(X510,sK19(X511,X512,X510))))) ) | $spl64),
  inference(superposition,[],[f298,f3500])).
fof(f7734,plain,(
  ( ! [X509,X505,X507,X508,X506] : (p(s(bool,happ(s(fun(X505,bool),X506),s(X505,X508)))) | ~p(s(bool,X507)) | s(bool,X509) = s(bool,g(s(bool,X509))) | s(bool,X509) = s(bool,happ(s(fun(X505,bool),X506),s(X505,sK16(X506,X507,X505))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7450,f246])).
fof(f7450,plain,(
  ( ! [X509,X505,X507,X508,X506] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X505,bool),X506),s(X505,X508)))) | ~p(s(bool,X507)) | s(bool,X509) = s(bool,g(s(bool,X509))) | s(bool,X509) = s(bool,happ(s(fun(X505,bool),X506),s(X505,sK16(X506,X507,X505))))) ) | $spl64),
  inference(superposition,[],[f292,f3500])).
fof(f7733,plain,(
  ( ! [X500,X502,X504,X501,X503] : (p(s(bool,happ(s(fun(X500,bool),X501),s(X500,X503)))) | ~p(s(bool,X502)) | s(bool,X504) = s(bool,g(s(bool,X504))) | s(bool,X504) = s(bool,happ(s(fun(X500,bool),X501),s(X500,sK15(X501,X502,X500))))) ) | $spl64),
  inference(subsumption_resolution,[],[f7449,f246])).
fof(f7449,plain,(
  ( ! [X500,X502,X504,X501,X503] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X500,bool),X501),s(X500,X503)))) | ~p(s(bool,X502)) | s(bool,X504) = s(bool,g(s(bool,X504))) | s(bool,X504) = s(bool,happ(s(fun(X500,bool),X501),s(X500,sK15(X501,X502,X500))))) ) | $spl64),
  inference(superposition,[],[f290,f3500])).
fof(f7732,plain,(
  ( ! [X499,X492,X494,X496,X498,X493,X495,X497] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X492),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X493),s('type.semanticPrimitives.state'(X494),X495),s('type.ast.exp',X496),s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X498)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X497) = s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X498) | s(bool,X499) = s(bool,g(s(bool,X499))) | s(bool,X499) = s(bool,'const.bigStep.evaluate_5'(s(bool,X492),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X493),s('type.semanticPrimitives.state'(X494),X495),s('type.ast.exp',X496),s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X497)))) ) | $spl64),
  inference(subsumption_resolution,[],[f7448,f246])).
fof(f7448,plain,(
  ( ! [X499,X492,X494,X496,X498,X493,X495,X497] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X492),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X493),s('type.semanticPrimitives.state'(X494),X495),s('type.ast.exp',X496),s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X498)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X497) = s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X498) | s(bool,X499) = s(bool,g(s(bool,X499))) | s(bool,X499) = s(bool,'const.bigStep.evaluate_5'(s(bool,X492),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X493),s('type.semanticPrimitives.state'(X494),X495),s('type.ast.exp',X496),s('type.pair.prod'('type.semanticPrimitives.state'(X494),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X497)))) ) | $spl64),
  inference(superposition,[],[f310,f3500])).
fof(f7726,plain,(
  ( ! [X127,X130,X128,X129] : (~sP6(X127,X128,X129) | sP7(X127,X128,X129) | s(bool,X130) = s(bool,g(s(bool,X130))) | s(bool,X127) = s(bool,X130)) ) | $spl64),
  inference(subsumption_resolution,[],[f7288,f246])).
fof(f7288,plain,(
  ( ! [X127,X130,X128,X129] : (~p(s(bool,'T_0')) | ~sP6(X127,X128,X129) | sP7(X127,X128,X129) | s(bool,X130) = s(bool,g(s(bool,X130))) | s(bool,X127) = s(bool,X130)) ) | $spl64),
  inference(superposition,[],[f405,f3500])).
fof(f7725,plain,(
  ( ! [X125,X123,X126,X124] : (~sP8(X123,X124,X125) | sP9(X123,X124,X125) | s(bool,X126) = s(bool,g(s(bool,X126))) | s(bool,X123) = s(bool,X126)) ) | $spl64),
  inference(subsumption_resolution,[],[f7287,f246])).
fof(f7287,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,'T_0')) | ~sP8(X123,X124,X125) | sP9(X123,X124,X125) | s(bool,X126) = s(bool,g(s(bool,X126))) | s(bool,X123) = s(bool,X126)) ) | $spl64),
  inference(superposition,[],[f404,f3500])).
fof(f7724,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,X120)) | sP9(X119,X120,X121) | s(bool,X122) = s(bool,g(s(bool,X122))) | s(bool,X119) = s(bool,X122)) ) | $spl64),
  inference(subsumption_resolution,[],[f7286,f246])).
fof(f7286,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,'T_0')) | ~p(s(bool,X120)) | sP9(X119,X120,X121) | s(bool,X122) = s(bool,g(s(bool,X122))) | s(bool,X119) = s(bool,X122)) ) | $spl64),
  inference(superposition,[],[f400,f3500])).
fof(f7723,plain,(
  ( ! [X118,X116,X117,X115] : (p(s(bool,X116)) | sP9(X115,X117,X116) | s(bool,X118) = s(bool,g(s(bool,X118))) | s(bool,X115) = s(bool,X118)) ) | $spl64),
  inference(subsumption_resolution,[],[f7285,f246])).
fof(f7285,plain,(
  ( ! [X118,X116,X117,X115] : (~p(s(bool,'T_0')) | p(s(bool,X116)) | sP9(X115,X117,X116) | s(bool,X118) = s(bool,g(s(bool,X118))) | s(bool,X115) = s(bool,X118)) ) | $spl64),
  inference(superposition,[],[f399,f3500])).
fof(f7722,plain,(
  ( ! [X111,X114,X112,X113] : (p(s(bool,X112)) | sP9(X113,X112,X111) | p(s(bool,X113)) | s(bool,X114) = s(bool,g(s(bool,X114))) | s(bool,X111) = s(bool,X114)) ) | $spl64),
  inference(subsumption_resolution,[],[f7284,f246])).
fof(f7284,plain,(
  ( ! [X111,X114,X112,X113] : (~p(s(bool,'T_0')) | p(s(bool,X112)) | sP9(X113,X112,X111) | p(s(bool,X113)) | s(bool,X114) = s(bool,g(s(bool,X114))) | s(bool,X111) = s(bool,X114)) ) | $spl64),
  inference(superposition,[],[f398,f3500])).
fof(f7721,plain,(
  ( ! [X109,X107,X110,X108] : (p(s(bool,X108)) | ~p(s(bool,X109)) | ~sP8(X109,X108,X107) | s(bool,X110) = s(bool,g(s(bool,X110))) | s(bool,X107) = s(bool,X110)) ) | $spl64),
  inference(subsumption_resolution,[],[f7283,f246])).
fof(f7283,plain,(
  ( ! [X109,X107,X110,X108] : (~p(s(bool,'T_0')) | p(s(bool,X108)) | ~p(s(bool,X109)) | ~sP8(X109,X108,X107) | s(bool,X110) = s(bool,g(s(bool,X110))) | s(bool,X107) = s(bool,X110)) ) | $spl64),
  inference(superposition,[],[f394,f3500])).
fof(f7720,plain,(
  ( ! [X103,X105,X106,X104] : (~sP8(X104,X105,X103) | p(s(bool,X105)) | sP9(X104,X105,X103) | s(bool,X106) = s(bool,g(s(bool,X106))) | s(bool,X103) = s(bool,X106)) ) | $spl64),
  inference(subsumption_resolution,[],[f7282,f246])).
fof(f7282,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | ~sP8(X104,X105,X103) | p(s(bool,X105)) | sP9(X104,X105,X103) | s(bool,X106) = s(bool,g(s(bool,X106))) | s(bool,X103) = s(bool,X106)) ) | $spl64),
  inference(superposition,[],[f393,f3500])).
fof(f7719,plain,(
  ( ! [X101,X99,X102,X100] : (~sP8(X99,X100,X101) | p(s(bool,X100)) | sP9(X99,X100,X101) | s(bool,X102) = s(bool,g(s(bool,X102))) | s(bool,X99) = s(bool,X102)) ) | $spl64),
  inference(subsumption_resolution,[],[f7281,f246])).
fof(f7281,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'T_0')) | ~sP8(X99,X100,X101) | p(s(bool,X100)) | sP9(X99,X100,X101) | s(bool,X102) = s(bool,g(s(bool,X102))) | s(bool,X99) = s(bool,X102)) ) | $spl64),
  inference(superposition,[],[f392,f3500])).
fof(f7718,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,X92)) | sP7(X91,X92,X93) | s(bool,X94) = s(bool,g(s(bool,X94))) | s(bool,X91) = s(bool,X94)) ) | $spl64),
  inference(subsumption_resolution,[],[f7279,f246])).
fof(f7279,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,'T_0')) | ~p(s(bool,X92)) | sP7(X91,X92,X93) | s(bool,X94) = s(bool,g(s(bool,X94))) | s(bool,X91) = s(bool,X94)) ) | $spl64),
  inference(superposition,[],[f383,f3500])).
fof(f7717,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,X88)) | sP7(X87,X89,X88) | s(bool,X90) = s(bool,g(s(bool,X90))) | s(bool,X87) = s(bool,X90)) ) | $spl64),
  inference(subsumption_resolution,[],[f7278,f246])).
fof(f7278,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,'T_0')) | ~p(s(bool,X88)) | sP7(X87,X89,X88) | s(bool,X90) = s(bool,g(s(bool,X90))) | s(bool,X87) = s(bool,X90)) ) | $spl64),
  inference(superposition,[],[f382,f3500])).
fof(f7716,plain,(
  ( ! [X85,X83,X86,X84] : (p(s(bool,X84)) | p(s(bool,X85)) | ~sP6(X83,X84,X85) | s(bool,X86) = s(bool,g(s(bool,X86))) | s(bool,X83) = s(bool,X86)) ) | $spl64),
  inference(subsumption_resolution,[],[f7277,f246])).
fof(f7277,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | p(s(bool,X84)) | p(s(bool,X85)) | ~sP6(X83,X84,X85) | s(bool,X86) = s(bool,g(s(bool,X86))) | s(bool,X83) = s(bool,X86)) ) | $spl64),
  inference(superposition,[],[f377,f3500])).
fof(f7715,plain,(
  ( ! [X80,X81,X79,X82] : (~sP6(X79,X80,X81) | p(s(bool,X80)) | sP7(X79,X80,X81) | s(bool,X82) = s(bool,g(s(bool,X82))) | s(bool,X79) = s(bool,X82)) ) | $spl64),
  inference(subsumption_resolution,[],[f7276,f246])).
fof(f7276,plain,(
  ( ! [X80,X81,X79,X82] : (~p(s(bool,'T_0')) | ~sP6(X79,X80,X81) | p(s(bool,X80)) | sP7(X79,X80,X81) | s(bool,X82) = s(bool,g(s(bool,X82))) | s(bool,X79) = s(bool,X82)) ) | $spl64),
  inference(superposition,[],[f375,f3500])).
fof(f7714,plain,(
  ( ! [X78,X76,X77,X75] : (~sP6(X75,X76,X77) | sP7(X75,X76,X77) | p(s(bool,X77)) | s(bool,X78) = s(bool,g(s(bool,X78))) | s(bool,X75) = s(bool,X78)) ) | $spl64),
  inference(subsumption_resolution,[],[f7275,f246])).
fof(f7275,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,'T_0')) | ~sP6(X75,X76,X77) | sP7(X75,X76,X77) | p(s(bool,X77)) | s(bool,X78) = s(bool,g(s(bool,X78))) | s(bool,X75) = s(bool,X78)) ) | $spl64),
  inference(superposition,[],[f374,f3500])).
fof(f7713,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,X72)) | p(s(bool,X73)) | ~sP3(X72,X71,X73) | s(bool,X74) = s(bool,g(s(bool,X74))) | s(bool,X71) = s(bool,X74)) ) | $spl64),
  inference(subsumption_resolution,[],[f7274,f246])).
fof(f7274,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | ~p(s(bool,X72)) | p(s(bool,X73)) | ~sP3(X72,X71,X73) | s(bool,X74) = s(bool,g(s(bool,X74))) | s(bool,X71) = s(bool,X74)) ) | $spl64),
  inference(superposition,[],[f358,f3500])).
fof(f7712,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,X70) = s(bool,g(s(bool,X70))) | s(bool,X67) = s(bool,X70)) ) | $spl64),
  inference(subsumption_resolution,[],[f7273,f246])).
fof(f7273,plain,(
  ( ! [X70,X68,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,X68)) | p(s(bool,X69)) | ~sP4(X68,X67,X69) | s(bool,X70) = s(bool,g(s(bool,X70))) | s(bool,X67) = s(bool,X70)) ) | $spl64),
  inference(superposition,[],[f354,f3500])).
fof(f7711,plain,(
  ( ! [X66,X64,X65] : (p(s(bool,X65)) | sP1(X65,X64) | s(bool,X66) = s(bool,g(s(bool,X66))) | s(bool,X64) = s(bool,X66)) ) | $spl64),
  inference(subsumption_resolution,[],[f7272,f246])).
fof(f7272,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | p(s(bool,X65)) | sP1(X65,X64) | s(bool,X66) = s(bool,g(s(bool,X66))) | s(bool,X64) = s(bool,X66)) ) | $spl64),
  inference(superposition,[],[f341,f3500])).
fof(f7710,plain,(
  ( ! [X61,X62,X63] : (p(s(bool,X62)) | sP1(X61,X62) | s(bool,X63) = s(bool,g(s(bool,X63))) | s(bool,X61) = s(bool,X63)) ) | $spl64),
  inference(subsumption_resolution,[],[f7271,f246])).
fof(f7271,plain,(
  ( ! [X61,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | sP1(X61,X62) | s(bool,X63) = s(bool,g(s(bool,X63))) | s(bool,X61) = s(bool,X63)) ) | $spl64),
  inference(superposition,[],[f338,f3500])).
fof(f7709,plain,(
  ( ! [X59,X60,X58] : (sP0(X58,X59) | s(bool,X60) = s(bool,g(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl64),
  inference(subsumption_resolution,[],[f7270,f246])).
fof(f7270,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | sP0(X58,X59) | s(bool,X60) = s(bool,g(s(bool,X60))) | s(bool,X58) = s(bool,X60)) ) | $spl64),
  inference(superposition,[],[f323,f3500])).
fof(f7708,plain,(
  ( ! [X57,X56,X55] : (sP0(X56,X55) | s(bool,X57) = s(bool,g(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl64),
  inference(subsumption_resolution,[],[f7269,f246])).
fof(f7269,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | sP0(X56,X55) | s(bool,X57) = s(bool,g(s(bool,X57))) | s(bool,X55) = s(bool,X57)) ) | $spl64),
  inference(superposition,[],[f322,f3500])).
fof(f7707,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X53)) | s(bool,X52) = s(bool,X53) | s(bool,X54) = s(bool,g(s(bool,X54))) | s(bool,X52) = s(bool,X54)) ) | $spl64),
  inference(subsumption_resolution,[],[f7268,f246])).
fof(f7268,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X53)) | s(bool,X52) = s(bool,X53) | s(bool,X54) = s(bool,g(s(bool,X54))) | s(bool,X52) = s(bool,X54)) ) | $spl64),
  inference(superposition,[],[f316,f3500])).
fof(f7706,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(X15,X17,X16))))) | s(bool,X19) = s(bool,g(s(bool,X19))) | s(bool,X15) = s(bool,X19)) ) | $spl64),
  inference(subsumption_resolution,[],[f7262,f246])).
fof(f7262,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(X15,X17,X16))))) | s(bool,X19) = s(bool,g(s(bool,X19))) | s(bool,X15) = s(bool,X19)) ) | $spl64),
  inference(superposition,[],[f295,f3500])).
fof(f7705,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(X10,X12,X11))))) | s(bool,X14) = s(bool,g(s(bool,X14))) | s(bool,X10) = s(bool,X14)) ) | $spl64),
  inference(subsumption_resolution,[],[f7261,f246])).
fof(f7261,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(X10,X12,X11))))) | s(bool,X14) = s(bool,g(s(bool,X14))) | s(bool,X10) = s(bool,X14)) ) | $spl64),
  inference(superposition,[],[f293,f3500])).
fof(f7704,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,g(s(bool,X7))) | s(bool,X6) = s(bool,X7)) ) | $spl64),
  inference(subsumption_resolution,[],[f7259,f246])).
fof(f7259,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,g(s(bool,X7))) | s(bool,X6) = s(bool,X7)) ) | $spl64),
  inference(superposition,[],[f264,f3500])).
fof(f7187,plain,(
  ( ! [X350,X346,X352,X354,X349,X351,X345,X347,X353,X348] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X345),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X346),s('type.semanticPrimitives.state'(X347),X348),s('type.semanticPrimitives.v',X349),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X350),s('type.semanticPrimitives.v',X351),s('type.pair.prod'('type.semanticPrimitives.state'(X347),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X352)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X346),s('type.semanticPrimitives.state'(X347),X348),s('type.semanticPrimitives.v',X349),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X350),s('type.semanticPrimitives.v',X351),s('type.pair.prod'('type.semanticPrimitives.state'(X347),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X353)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X347),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X352) = s('type.pair.prod'('type.semanticPrimitives.state'(X347),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X353) | s(bool,X354) = s(bool,g(s(bool,X354))) | s(bool,X345) = s(bool,X354)) ) | $spl64),
  inference(superposition,[],[f312,f3500])).
fof(f7186,plain,(
  ( ! [X344,X341,X343,X337,X339,X340,X342,X338] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X337),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X338),s('type.semanticPrimitives.state'(X339),X340),s('type.list.list'('type.ast.exp'),X341),s('type.pair.prod'('type.semanticPrimitives.state'(X339),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X342)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X338),s('type.semanticPrimitives.state'(X339),X340),s('type.list.list'('type.ast.exp'),X341),s('type.pair.prod'('type.semanticPrimitives.state'(X339),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X343)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X339),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X342) = s('type.pair.prod'('type.semanticPrimitives.state'(X339),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X343) | s(bool,X344) = s(bool,g(s(bool,X344))) | s(bool,X337) = s(bool,X344)) ) | $spl64),
  inference(superposition,[],[f311,f3500])).
fof(f7185,plain,(
  ( ! [X333,X335,X329,X331,X332,X334,X330,X336] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X329),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X330),s('type.semanticPrimitives.state'(X331),X332),s('type.ast.exp',X333),s('type.pair.prod'('type.semanticPrimitives.state'(X331),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X334)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X330),s('type.semanticPrimitives.state'(X331),X332),s('type.ast.exp',X333),s('type.pair.prod'('type.semanticPrimitives.state'(X331),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X335)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X331),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X334) = s('type.pair.prod'('type.semanticPrimitives.state'(X331),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X335) | s(bool,X336) = s(bool,g(s(bool,X336))) | s(bool,X329) = s(bool,X336)) ) | $spl64),
  inference(superposition,[],[f310,f3500])).
fof(f7178,plain,(
  ( ! [X310,X309] : (sP9('F_0','F_0',g(s(bool,X309))) | s(bool,X310) = s(bool,g(s(bool,X310))) | s(bool,X309) = s(bool,X310)) ) | $spl64),
  inference(superposition,[],[f4566,f3500])).
fof(f7177,plain,(
  ( ! [X308,X307] : (~sP9('T_0','F_0',g(s(bool,X307))) | s(bool,X308) = s(bool,g(s(bool,X308))) | s(bool,X307) = s(bool,X308)) ) | $spl64),
  inference(superposition,[],[f4524,f3500])).
fof(f7176,plain,(
  ( ! [X306,X305] : (~sP8('T_0','F_0',g(s(bool,X305))) | s(bool,X306) = s(bool,g(s(bool,X306))) | s(bool,X305) = s(bool,X306)) ) | $spl64),
  inference(superposition,[],[f4510,f3500])).
fof(f7175,plain,(
  ( ! [X304,X303] : (~sP7(g(s(bool,X303)),'F_0','F_0') | s(bool,X304) = s(bool,g(s(bool,X304))) | s(bool,X303) = s(bool,X304)) ) | $spl64),
  inference(superposition,[],[f4474,f3500])).
fof(f7174,plain,(
  ( ! [X302,X301] : (~sP6(g(s(bool,X301)),'F_0','F_0') | s(bool,X302) = s(bool,g(s(bool,X302))) | s(bool,X301) = s(bool,X302)) ) | $spl64),
  inference(superposition,[],[f4429,f3500])).
fof(f7173,plain,(
  ( ! [X300,X299] : (~sP5('T_0','F_0',g(s(bool,X299))) | s(bool,X300) = s(bool,g(s(bool,X300))) | s(bool,X299) = s(bool,X300)) ) | $spl64),
  inference(superposition,[],[f4380,f3500])).
fof(f7172,plain,(
  ( ! [X298,X297] : (~sP4('T_0',g(s(bool,X297)),'F_0') | s(bool,X298) = s(bool,g(s(bool,X298))) | s(bool,X297) = s(bool,X298)) ) | $spl64),
  inference(superposition,[],[f4349,f3500])).
fof(f7171,plain,(
  ( ! [X294,X296,X295] : (sP9(g(s(bool,X294)),'T_0',X295) | s(bool,X296) = s(bool,g(s(bool,X296))) | s(bool,X294) = s(bool,X296)) ) | $spl64),
  inference(superposition,[],[f4238,f3500])).
fof(f7170,plain,(
  ( ! [X292,X293,X291] : (sP9(g(s(bool,X291)),X292,'F_0') | s(bool,X293) = s(bool,g(s(bool,X293))) | s(bool,X291) = s(bool,X293)) ) | $spl64),
  inference(superposition,[],[f4203,f3500])).
fof(f7169,plain,(
  ( ! [X288,X290,X289] : (sP7(g(s(bool,X288)),'T_0',X289) | s(bool,X290) = s(bool,g(s(bool,X290))) | s(bool,X288) = s(bool,X290)) ) | $spl64),
  inference(superposition,[],[f4167,f3500])).
fof(f7168,plain,(
  ( ! [X285,X287,X286] : (sP7(g(s(bool,X285)),X286,'T_0') | s(bool,X287) = s(bool,g(s(bool,X287))) | s(bool,X285) = s(bool,X287)) ) | $spl64),
  inference(superposition,[],[f4135,f3500])).
fof(f7167,plain,(
  ( ! [X283,X284] : (sP1('F_0',g(s(bool,X283))) | s(bool,X284) = s(bool,g(s(bool,X284))) | s(bool,X283) = s(bool,X284)) ) | $spl64),
  inference(superposition,[],[f4106,f3500])).
fof(f7166,plain,(
  ( ! [X282,X281] : (sP1(g(s(bool,X281)),'F_0') | s(bool,X282) = s(bool,g(s(bool,X282))) | s(bool,X281) = s(bool,X282)) ) | $spl64),
  inference(superposition,[],[f4074,f3500])).
fof(f7158,plain,(
  ( ! [X265,X266] : (~sP3('T_0',g(s(bool,X265)),'F_0') | s(bool,X266) = s(bool,g(s(bool,X266))) | s(bool,X265) = s(bool,X266)) ) | $spl64),
  inference(superposition,[],[f3629,f3500])).
fof(f7157,plain,(
  ( ! [X263,X264] : (sP4('T_0','T_0',g(s(bool,X263))) | s(bool,X264) = s(bool,g(s(bool,X264))) | s(bool,X263) = s(bool,X264)) ) | $spl64),
  inference(superposition,[],[f3618,f3500])).
fof(f7156,plain,(
  ( ! [X261,X262] : (~sP3(g(s(bool,X261)),'T_0','F_0') | s(bool,X262) = s(bool,g(s(bool,X262))) | s(bool,X261) = s(bool,X262)) ) | $spl64),
  inference(superposition,[],[f3605,f3500])).
fof(f7155,plain,(
  ( ! [X257,X259,X260,X258] : (sP7(g(s(bool,X257)),X258,X259) | ~sP6(g(s(bool,'T_0')),X258,X259) | s(bool,X260) = s(bool,g(s(bool,X260))) | s(bool,X257) = s(bool,X260)) ) | $spl64),
  inference(superposition,[],[f3583,f3500])).
fof(f7154,plain,(
  ( ! [X255,X253,X254,X256] : (sP9(g(s(bool,X253)),X254,X255) | ~sP8(g(s(bool,'T_0')),X254,X255) | s(bool,X256) = s(bool,g(s(bool,X256))) | s(bool,X253) = s(bool,X256)) ) | $spl64),
  inference(superposition,[],[f3582,f3500])).
fof(f7153,plain,(
  ( ! [X251,X249,X252,X250] : (sP9(g(s(bool,X249)),X250,X251) | ~p(s(bool,X250)) | s(bool,X252) = s(bool,g(s(bool,X252))) | s(bool,X249) = s(bool,X252)) ) | $spl64),
  inference(superposition,[],[f3581,f3500])).
fof(f7152,plain,(
  ( ! [X246,X248,X247,X245] : (sP9(g(s(bool,X245)),X246,X247) | p(s(bool,X247)) | s(bool,X248) = s(bool,g(s(bool,X248))) | s(bool,X245) = s(bool,X248)) ) | $spl64),
  inference(superposition,[],[f3580,f3500])).
fof(f7151,plain,(
  ( ! [X243,X241,X244,X242] : (sP9(X242,X243,g(s(bool,X241))) | p(s(bool,X243)) | p(s(bool,X242)) | s(bool,X244) = s(bool,g(s(bool,X244))) | s(bool,X241) = s(bool,X244)) ) | $spl64),
  inference(superposition,[],[f3579,f3500])).
fof(f7150,plain,(
  ( ! [X239,X237,X240,X238] : (~sP8(X238,X239,g(s(bool,X237))) | ~p(s(bool,X238)) | p(s(bool,X239)) | s(bool,X240) = s(bool,g(s(bool,X240))) | s(bool,X237) = s(bool,X240)) ) | $spl64),
  inference(superposition,[],[f3578,f3500])).
fof(f7149,plain,(
  ( ! [X235,X233,X236,X234] : (~sP8(X234,X235,g(s(bool,X233))) | p(s(bool,X235)) | sP9(X234,X235,g(s(bool,'T_0'))) | s(bool,X236) = s(bool,g(s(bool,X236))) | s(bool,X233) = s(bool,X236)) ) | $spl64),
  inference(superposition,[],[f3577,f3500])).
fof(f7148,plain,(
  ( ! [X231,X229,X230,X232] : (sP9(g(s(bool,X229)),X230,X231) | p(s(bool,X230)) | ~sP8(g(s(bool,'T_0')),X230,X231) | s(bool,X232) = s(bool,g(s(bool,X232))) | s(bool,X229) = s(bool,X232)) ) | $spl64),
  inference(superposition,[],[f3576,f3500])).
fof(f7147,plain,(
  ( ! [X227,X225,X228,X226] : (sP7(g(s(bool,X225)),X226,X227) | ~p(s(bool,X226)) | s(bool,X228) = s(bool,g(s(bool,X228))) | s(bool,X225) = s(bool,X228)) ) | $spl64),
  inference(superposition,[],[f3575,f3500])).
fof(f7146,plain,(
  ( ! [X222,X223,X221,X224] : (sP7(g(s(bool,X221)),X222,X223) | ~p(s(bool,X223)) | s(bool,X224) = s(bool,g(s(bool,X224))) | s(bool,X221) = s(bool,X224)) ) | $spl64),
  inference(superposition,[],[f3574,f3500])).
fof(f7145,plain,(
  ( ! [X218,X220,X219,X217] : (~sP6(g(s(bool,X217)),X218,X219) | p(s(bool,X219)) | p(s(bool,X218)) | s(bool,X220) = s(bool,g(s(bool,X220))) | s(bool,X217) = s(bool,X220)) ) | $spl64),
  inference(superposition,[],[f3573,f3500])).
fof(f7144,plain,(
  ( ! [X216,X215,X213,X214] : (sP7(g(s(bool,X213)),X214,X215) | p(s(bool,X214)) | ~sP6(g(s(bool,'T_0')),X214,X215) | s(bool,X216) = s(bool,g(s(bool,X216))) | s(bool,X213) = s(bool,X216)) ) | $spl64),
  inference(superposition,[],[f3572,f3500])).
fof(f7143,plain,(
  ( ! [X212,X210,X211,X209] : (sP7(g(s(bool,X209)),X210,X211) | ~sP6(g(s(bool,'T_0')),X210,X211) | p(s(bool,X211)) | s(bool,X212) = s(bool,g(s(bool,X212))) | s(bool,X209) = s(bool,X212)) ) | $spl64),
  inference(superposition,[],[f3571,f3500])).
fof(f7142,plain,(
  ( ! [X208,X206,X207,X205] : (~sP3(X206,g(s(bool,X205)),X207) | p(s(bool,X207)) | ~p(s(bool,X206)) | s(bool,X208) = s(bool,g(s(bool,X208))) | s(bool,X205) = s(bool,X208)) ) | $spl64),
  inference(superposition,[],[f3570,f3500])).
fof(f7141,plain,(
  ( ! [X204,X202,X203,X201] : (~sP4(X202,g(s(bool,X201)),X203) | p(s(bool,X203)) | ~p(s(bool,X202)) | s(bool,X204) = s(bool,g(s(bool,X204))) | s(bool,X201) = s(bool,X204)) ) | $spl64),
  inference(superposition,[],[f3569,f3500])).
fof(f7140,plain,(
  ( ! [X198,X200,X199] : (sP1(X199,g(s(bool,X198))) | p(s(bool,X199)) | s(bool,X200) = s(bool,g(s(bool,X200))) | s(bool,X198) = s(bool,X200)) ) | $spl64),
  inference(superposition,[],[f3568,f3500])).
fof(f7139,plain,(
  ( ! [X196,X197,X195] : (sP1(g(s(bool,X195)),X196) | p(s(bool,X196)) | s(bool,X197) = s(bool,g(s(bool,X197))) | s(bool,X195) = s(bool,X197)) ) | $spl64),
  inference(superposition,[],[f3567,f3500])).
fof(f7138,plain,(
  ( ! [X194,X192,X193] : (sP0(g(s(bool,X192)),X193) | s(bool,X194) = s(bool,g(s(bool,X194))) | s(bool,X192) = s(bool,X194)) ) | $spl64),
  inference(superposition,[],[f3566,f3500])).
fof(f7137,plain,(
  ( ! [X191,X189,X190] : (sP0(X190,g(s(bool,X189))) | s(bool,X191) = s(bool,g(s(bool,X191))) | s(bool,X189) = s(bool,X191)) ) | $spl64),
  inference(superposition,[],[f3565,f3500])).
fof(f7136,plain,(
  ( ! [X187,X188] : (sP5('T_0','T_0',g(s(bool,X187))) | s(bool,X188) = s(bool,g(s(bool,X188))) | s(bool,X187) = s(bool,X188)) ) | $spl64),
  inference(superposition,[],[f3499,f3500])).
fof(f7135,plain,(
  ( ! [X185,X186] : (~sP5('F_0','T_0',g(s(bool,X185))) | s(bool,X186) = s(bool,g(s(bool,X186))) | s(bool,X185) = s(bool,X186)) ) | $spl64),
  inference(superposition,[],[f3498,f3500])).
fof(f7134,plain,(
  ( ! [X184,X183] : (sP5('T_0',g(s(bool,X183)),'T_0') | s(bool,X184) = s(bool,g(s(bool,X184))) | s(bool,X183) = s(bool,X184)) ) | $spl64),
  inference(superposition,[],[f3497,f3500])).
fof(f7133,plain,(
  ( ! [X182,X181] : (~sP5('F_0',g(s(bool,X181)),'T_0') | s(bool,X182) = s(bool,g(s(bool,X182))) | s(bool,X181) = s(bool,X182)) ) | $spl64),
  inference(superposition,[],[f3496,f3500])).
fof(f7085,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,g(s(bool,X60))) | s(bool,X61) = s(bool,g(s(bool,X61))) | s(bool,X60) = s(bool,X61)) ) | $spl64),
  inference(superposition,[],[f2881,f3500])).
fof(f7083,plain,(
  ( ! [X57,X54,X52,X56,X55,X53] : (~sP5('T_0','const.bigStep.evaluate_5'(s(bool,X52),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.semanticPrimitives.state'(X54),X55),s('type.ast.exp',X56),s('type.pair.prod'('type.semanticPrimitives.state'(X54),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X53),s('type.ast.exp',X56),s('type.semanticPrimitives.state'(X54),X55)))),'F_0') | s(bool,X57) = s(bool,g(s(bool,X57))) | s(bool,X52) = s(bool,X57)) ) | $spl64),
  inference(superposition,[],[f2632,f3500])).
fof(f7082,plain,(
  ( ! [X47,X50,X48,X46,X51,X49] : (sP1('F_0','const.bigStep.evaluate_5'(s(bool,X46),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X47),s('type.semanticPrimitives.state'(X48),X49),s('type.ast.exp',X50),s('type.pair.prod'('type.semanticPrimitives.state'(X48),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X47),s('type.ast.exp',X50),s('type.semanticPrimitives.state'(X48),X49))))) | s(bool,X51) = s(bool,g(s(bool,X51))) | s(bool,X46) = s(bool,X51)) ) | $spl64),
  inference(superposition,[],[f2629,f3500])).
fof(f7081,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (sP1('const.bigStep.evaluate_5'(s(bool,X40),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.semanticPrimitives.state'(X42),X43),s('type.ast.exp',X44),s('type.pair.prod'('type.semanticPrimitives.state'(X42),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X41),s('type.ast.exp',X44),s('type.semanticPrimitives.state'(X42),X43)))),'F_0') | s(bool,X45) = s(bool,g(s(bool,X45))) | s(bool,X40) = s(bool,X45)) ) | $spl64),
  inference(superposition,[],[f2628,f3500])).
fof(f7080,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (~sP1('T_0','const.bigStep.evaluate_5'(s(bool,X34),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X35),s('type.semanticPrimitives.state'(X36),X37),s('type.ast.exp',X38),s('type.pair.prod'('type.semanticPrimitives.state'(X36),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X35),s('type.ast.exp',X38),s('type.semanticPrimitives.state'(X36),X37))))) | s(bool,X39) = s(bool,g(s(bool,X39))) | s(bool,X34) = s(bool,X39)) ) | $spl64),
  inference(superposition,[],[f2626,f3500])).
fof(f7079,plain,(
  ( ! [X30,X28,X33,X31,X29,X32] : (~sP1('const.bigStep.evaluate_5'(s(bool,X28),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X29),s('type.semanticPrimitives.state'(X30),X31),s('type.ast.exp',X32),s('type.pair.prod'('type.semanticPrimitives.state'(X30),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X29),s('type.ast.exp',X32),s('type.semanticPrimitives.state'(X30),X31)))),'T_0') | s(bool,X33) = s(bool,g(s(bool,X33))) | s(bool,X28) = s(bool,X33)) ) | $spl64),
  inference(superposition,[],[f2624,f3500])).
fof(f7078,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22] : (sP0('const.bigStep.evaluate_5'(s(bool,X21),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.ast.exp',X25),s('type.semanticPrimitives.state'(X23),X24)))),X26) | s(bool,X27) = s(bool,g(s(bool,X27))) | s(bool,X21) = s(bool,X27)) ) | $spl64),
  inference(superposition,[],[f2623,f3500])).
fof(f7077,plain,(
  ( ! [X14,X19,X17,X15,X20,X18,X16] : (sP0(X15,'const.bigStep.evaluate_5'(s(bool,X14),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X16),s('type.semanticPrimitives.state'(X17),X18),s('type.ast.exp',X19),s('type.pair.prod'('type.semanticPrimitives.state'(X17),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X16),s('type.ast.exp',X19),s('type.semanticPrimitives.state'(X17),X18))))) | s(bool,X20) = s(bool,g(s(bool,X20))) | s(bool,X14) = s(bool,X20)) ) | $spl64),
  inference(superposition,[],[f2622,f3500])).
fof(f7074,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X4) = s(bool,g(s(bool,X4))) | s(bool,X2) = s(bool,X4)) ) | $spl64),
  inference(superposition,[],[f260,f3500])).
fof(f7071,plain,(
  ( ! [X617,X615,X616,X618] : (~p(s(bool,happ(s(fun(bool,bool),X615),s(bool,X617)))) | p(s(bool,happ(s(fun(bool,bool),X615),s(bool,X618)))) | p(s(bool,X616)) | s(bool,X617) = s(bool,g(s(bool,X617))) | s(bool,'T_0') = s(bool,sK23(X615,X616,bool))) ) | $spl64),
  inference(superposition,[],[f303,f3500])).
fof(f7070,plain,(
  ( ! [X613,X611,X612,X614] : (~p(s(bool,happ(s(fun(bool,bool),X611),s(bool,X613)))) | p(s(bool,happ(s(fun(bool,bool),X611),s(bool,X614)))) | p(s(bool,X612)) | s(bool,X613) = s(bool,g(s(bool,X613))) | s(bool,'T_0') = s(bool,sK22(X611,X612,bool))) ) | $spl64),
  inference(superposition,[],[f301,f3500])).
fof(f7069,plain,(
  ( ! [X609,X607,X608,X610] : (~p(s(bool,happ(s(fun(bool,bool),X607),s(bool,X609)))) | p(s(bool,happ(s(fun(bool,bool),X608),s(bool,X610)))) | ~p(s(bool,happ(s(fun(bool,bool),X608),s(bool,sK20(X607,X608,bool))))) | s(bool,X609) = s(bool,g(s(bool,X609))) | s(bool,'T_0') = s(bool,sK21(X607,X608,bool))) ) | $spl64),
  inference(superposition,[],[f299,f3500])).
fof(f7068,plain,(
  ( ! [X606,X605,X603,X604] : (~p(s(bool,happ(s(fun(bool,bool),X603),s(bool,X605)))) | p(s(bool,happ(s(fun(bool,bool),X603),s(bool,X606)))) | ~p(s(bool,happ(s(fun(bool,bool),X604),s(bool,sK20(X603,X604,bool))))) | s(bool,X605) = s(bool,g(s(bool,X605))) | s(bool,'T_0') = s(bool,sK21(X603,X604,bool))) ) | $spl64),
  inference(superposition,[],[f300,f3500])).
fof(f7065,plain,(
  ( ! [X592,X594,X593,X591] : (~p(s(bool,happ(s(fun(bool,bool),X591),s(bool,X593)))) | p(s(bool,happ(s(fun(bool,bool),X591),s(bool,X594)))) | ~p(s(bool,X592)) | s(bool,X593) = s(bool,g(s(bool,X593))) | s(bool,'T_0') = s(bool,sK16(X591,X592,bool))) ) | $spl64),
  inference(superposition,[],[f292,f3500])).
fof(f7064,plain,(
  ( ! [X588,X590,X589,X587] : (~p(s(bool,happ(s(fun(bool,bool),X587),s(bool,X589)))) | p(s(bool,happ(s(fun(bool,bool),X587),s(bool,X590)))) | ~p(s(bool,X588)) | s(bool,X589) = s(bool,g(s(bool,X589))) | s(bool,'T_0') = s(bool,sK15(X587,X588,bool))) ) | $spl64),
  inference(superposition,[],[f290,f3500])).
fof(f7062,plain,(
  ( ! [X580,X582,X581,X583] : (s(bool,X583) != s(bool,f(s(X580,sK24(X581,X582,bool,X580)))) | s(fun(X580,bool),X581) = s(fun(X580,bool),X582) | s(bool,X583) = s(bool,g(s(bool,X583))) | s(bool,'T_0') = s(bool,g(s(X580,sK24(X581,X582,bool,X580))))) ) | $spl64),
  inference(superposition,[],[f346,f3500])).
fof(f7696,plain,(
  ( ! [X490] : (s(bool,'T_0') != s(bool,X490) | s(bool,X490) = s(bool,g(s(bool,X490)))) ) | $spl64),
  inference(subsumption_resolution,[],[f7041,f434])).
fof(f7041,plain,(
  ( ! [X490] : (s(bool,'T_0') != s(bool,X490) | s(bool,X490) = s(bool,g(s(bool,X490))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl64),
  inference(superposition,[],[f434,f3500])).
fof(f7695,plain,(
  ( ! [X484,X486,X485,X483] : (s(X484,f(s(bool,X483))) != s(X484,g(s(bool,X483))) | s(fun(bool,X484),X485) = s(fun(bool,X484),X486) | s(bool,'T_0') = s(bool,sK24(X485,X486,X484,bool)) | s(bool,X483) = s(bool,g(s(bool,X483)))) ) | $spl64),
  inference(subsumption_resolution,[],[f7038,f434])).
fof(f7038,plain,(
  ( ! [X484,X486,X485,X483] : (s(X484,f(s(bool,X483))) != s(X484,g(s(bool,X483))) | s(fun(bool,X484),X485) = s(fun(bool,X484),X486) | s(bool,'T_0') = s(bool,sK24(X485,X486,X484,bool)) | s(bool,X483) = s(bool,g(s(bool,X483))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl64),
  inference(superposition,[],[f2577,f3500])).
fof(f7551,plain,(
  ( ! [X4,X5] : (~p(s(bool,X5)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,g(s(bool,X5)))) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6854])).
fof(f6854,plain,(
  ( ! [X4,X5] : (~p(s(bool,X5)) | s(bool,'T_0') = s(bool,X4) | s(bool,X5) = s(bool,g(s(bool,X5))) | s(bool,'T_0') = s(bool,X4)) ) | $spl64),
  inference(superposition,[],[f261,f3500])).
fof(f6851,plain,(
  ( ! [X621,X619,X620,X622] : (s(X621,f(s(bool,X622))) != s(X621,g(s(bool,X622))) | s(fun(bool,X621),X619) = s(fun(bool,X621),X620) | s(bool,sK24(X619,X620,X621,bool)) = s(bool,g(s(bool,sK24(X619,X620,X621,bool)))) | s(bool,'T_0') = s(bool,X622)) ) | $spl64),
  inference(superposition,[],[f346,f3500])).
fof(f6850,plain,(
  ( ! [X617,X615,X616,X618] : (~p(s(bool,happ(s(fun(bool,bool),X615),s(bool,X617)))) | p(s(bool,happ(s(fun(bool,bool),X615),s(bool,X618)))) | p(s(bool,X616)) | s(bool,sK23(X615,X616,bool)) = s(bool,g(s(bool,sK23(X615,X616,bool)))) | s(bool,'T_0') = s(bool,X617)) ) | $spl64),
  inference(superposition,[],[f303,f3500])).
fof(f6849,plain,(
  ( ! [X613,X611,X612,X614] : (~p(s(bool,happ(s(fun(bool,bool),X611),s(bool,X613)))) | p(s(bool,happ(s(fun(bool,bool),X611),s(bool,X614)))) | p(s(bool,X612)) | s(bool,sK22(X611,X612,bool)) = s(bool,g(s(bool,sK22(X611,X612,bool)))) | s(bool,'T_0') = s(bool,X613)) ) | $spl64),
  inference(superposition,[],[f301,f3500])).
fof(f6848,plain,(
  ( ! [X609,X607,X608,X610] : (~p(s(bool,happ(s(fun(bool,bool),X607),s(bool,X609)))) | p(s(bool,happ(s(fun(bool,bool),X608),s(bool,X610)))) | ~p(s(bool,happ(s(fun(bool,bool),X608),s(bool,sK20(X607,X608,bool))))) | s(bool,sK21(X607,X608,bool)) = s(bool,g(s(bool,sK21(X607,X608,bool)))) | s(bool,'T_0') = s(bool,X609)) ) | $spl64),
  inference(superposition,[],[f299,f3500])).
fof(f6847,plain,(
  ( ! [X606,X605,X603,X604] : (~p(s(bool,happ(s(fun(bool,bool),X603),s(bool,X605)))) | p(s(bool,happ(s(fun(bool,bool),X603),s(bool,X606)))) | ~p(s(bool,happ(s(fun(bool,bool),X604),s(bool,sK20(X603,X604,bool))))) | s(bool,sK21(X603,X604,bool)) = s(bool,g(s(bool,sK21(X603,X604,bool)))) | s(bool,'T_0') = s(bool,X605)) ) | $spl64),
  inference(superposition,[],[f300,f3500])).
fof(f6844,plain,(
  ( ! [X592,X594,X593,X591] : (~p(s(bool,happ(s(fun(bool,bool),X591),s(bool,X593)))) | p(s(bool,happ(s(fun(bool,bool),X591),s(bool,X594)))) | ~p(s(bool,X592)) | s(bool,sK16(X591,X592,bool)) = s(bool,g(s(bool,sK16(X591,X592,bool)))) | s(bool,'T_0') = s(bool,X593)) ) | $spl64),
  inference(superposition,[],[f292,f3500])).
fof(f6843,plain,(
  ( ! [X588,X590,X589,X587] : (~p(s(bool,happ(s(fun(bool,bool),X587),s(bool,X589)))) | p(s(bool,happ(s(fun(bool,bool),X587),s(bool,X590)))) | ~p(s(bool,X588)) | s(bool,sK15(X587,X588,bool)) = s(bool,g(s(bool,sK15(X587,X588,bool)))) | s(bool,'T_0') = s(bool,X589)) ) | $spl64),
  inference(superposition,[],[f290,f3500])).
fof(f6841,plain,(
  ( ! [X580,X582,X581,X583] : (s(bool,X583) != s(bool,f(s(X580,sK24(X581,X582,bool,X580)))) | s(fun(X580,bool),X581) = s(fun(X580,bool),X582) | s(bool,g(s(X580,sK24(X581,X582,bool,X580)))) = s(bool,g(s(bool,g(s(X580,sK24(X581,X582,bool,X580)))))) | s(bool,'T_0') = s(bool,X583)) ) | $spl64),
  inference(superposition,[],[f346,f3500])).
fof(f7666,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,X1)))) ) | $spl64),
  inference(condensation,[],[f7665])).
fof(f7665,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | p(s(bool,X48)) | s(bool,X46) = s(bool,X48) | s(bool,X46) = s(bool,g(s(bool,X46)))) ) | $spl64),
  inference(subsumption_resolution,[],[f6641,f260])).
fof(f6641,plain,(
  ( ! [X47,X48,X46] : (p(s(bool,X47)) | p(s(bool,X48)) | s(bool,X46) = s(bool,X48) | s(bool,X46) = s(bool,g(s(bool,X46))) | s(bool,'T_0') = s(bool,X47)) ) | $spl64),
  inference(superposition,[],[f313,f3500])).
fof(f6640,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X36,X44,X42,X40] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X37),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X38),s('type.semanticPrimitives.state'(X39),X40),s('type.semanticPrimitives.v',X41),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X42),s('type.semanticPrimitives.v',X43),s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X36),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X38),s('type.semanticPrimitives.state'(X39),X40),s('type.semanticPrimitives.v',X41),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X42),s('type.semanticPrimitives.v',X43),s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X45)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44) = s('type.pair.prod'('type.semanticPrimitives.state'(X39),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X45) | s(bool,X36) = s(bool,g(s(bool,X36))) | s(bool,'T_0') = s(bool,X37)) ) | $spl64),
  inference(superposition,[],[f312,f3500])).
fof(f6639,plain,(
  ( ! [X30,X28,X35,X33,X31,X29,X34,X32] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X29),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.state'(X31),X32),s('type.list.list'('type.ast.exp'),X33),s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X28),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X30),s('type.semanticPrimitives.state'(X31),X32),s('type.list.list'('type.ast.exp'),X33),s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X35)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34) = s('type.pair.prod'('type.semanticPrimitives.state'(X31),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X35) | s(bool,X28) = s(bool,g(s(bool,X28))) | s(bool,'T_0') = s(bool,X29)) ) | $spl64),
  inference(superposition,[],[f311,f3500])).
fof(f6638,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X21),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X22),s('type.semanticPrimitives.state'(X23),X24),s('type.ast.exp',X25),s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X27)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26) = s('type.pair.prod'('type.semanticPrimitives.state'(X23),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X27) | s(bool,X20) = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X21)) ) | $spl64),
  inference(superposition,[],[f310,f3500])).
fof(f7657,plain,(
  ( ! [X103,X105,X106,X104] : (~sP8(X104,X105,g(s(bool,X103))) | p(s(bool,X105)) | sP9(X104,X105,g(s(bool,X103))) | s(bool,X103) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) ) | $spl64),
  inference(subsumption_resolution,[],[f6575,f591])).
fof(f6575,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,X103)) | ~sP8(X104,X105,g(s(bool,X103))) | p(s(bool,X105)) | sP9(X104,X105,g(s(bool,X103))) | s(bool,X103) = s(bool,X106) | s(bool,'T_0') = s(bool,X106)) ) | $spl64),
  inference(superposition,[],[f393,f3500])).
fof(f7656,plain,(
  ( ! [X101,X99,X102,X100] : (~sP8(g(s(bool,X99)),X100,X101) | sP9(g(s(bool,X99)),X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl64),
  inference(subsumption_resolution,[],[f7655,f4239])).
fof(f7655,plain,(
  ( ! [X101,X99,X102,X100] : (~sP8(g(s(bool,X99)),X100,X101) | p(s(bool,X100)) | sP9(g(s(bool,X99)),X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl64),
  inference(subsumption_resolution,[],[f6574,f591])).
fof(f6574,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,X99)) | ~sP8(g(s(bool,X99)),X100,X101) | p(s(bool,X100)) | sP9(g(s(bool,X99)),X100,X101) | s(bool,X99) = s(bool,X102) | s(bool,'T_0') = s(bool,X102)) ) | $spl64),
  inference(superposition,[],[f392,f3500])).
fof(f7650,plain,(
  ( ! [X78,X76,X77,X75] : (~sP6(g(s(bool,X75)),X76,X77) | sP7(g(s(bool,X75)),X76,X77) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) ) | $spl64),
  inference(subsumption_resolution,[],[f7649,f4136])).
fof(f7649,plain,(
  ( ! [X78,X76,X77,X75] : (~sP6(g(s(bool,X75)),X76,X77) | sP7(g(s(bool,X75)),X76,X77) | p(s(bool,X77)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) ) | $spl64),
  inference(subsumption_resolution,[],[f6568,f591])).
fof(f6568,plain,(
  ( ! [X78,X76,X77,X75] : (~p(s(bool,X75)) | ~sP6(g(s(bool,X75)),X76,X77) | sP7(g(s(bool,X75)),X76,X77) | p(s(bool,X77)) | s(bool,X75) = s(bool,X78) | s(bool,'T_0') = s(bool,X78)) ) | $spl64),
  inference(superposition,[],[f374,f3500])).
fof(f7642,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X53)) | s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl64),
  inference(subsumption_resolution,[],[f6561,f591])).
fof(f6561,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,X52)) | ~p(s(bool,X53)) | s(bool,X53) = s(bool,g(s(bool,X52))) | s(bool,X52) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) ) | $spl64),
  inference(superposition,[],[f316,f3500])).
fof(f6558,plain,(
  ( ! [X39,X37,X45,X43,X41,X38,X36,X44,X42,X40] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X36),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.state'(X38),X39),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X43)))) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,g(s(bool,X36))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X37),s('type.semanticPrimitives.state'(X38),X39),s('type.semanticPrimitives.v',X40),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X41),s('type.semanticPrimitives.v',X42),s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X43) = s('type.pair.prod'('type.semanticPrimitives.state'(X38),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X44) | s(bool,X36) = s(bool,X45) | s(bool,'T_0') = s(bool,X45)) ) | $spl64),
  inference(superposition,[],[f312,f3500])).
fof(f6557,plain,(
  ( ! [X30,X28,X35,X33,X31,X29,X34,X32] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X28),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X29),s('type.semanticPrimitives.state'(X30),X31),s('type.list.list'('type.ast.exp'),X32),s('type.pair.prod'('type.semanticPrimitives.state'(X30),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X33)))) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,g(s(bool,X28))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X29),s('type.semanticPrimitives.state'(X30),X31),s('type.list.list'('type.ast.exp'),X32),s('type.pair.prod'('type.semanticPrimitives.state'(X30),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X30),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X33) = s('type.pair.prod'('type.semanticPrimitives.state'(X30),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X34) | s(bool,X28) = s(bool,X35) | s(bool,'T_0') = s(bool,X35)) ) | $spl64),
  inference(superposition,[],[f311,f3500])).
fof(f6556,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.ast.exp',X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X25)))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,g(s(bool,X20))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X21),s('type.semanticPrimitives.state'(X22),X23),s('type.ast.exp',X24),s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X25) = s('type.pair.prod'('type.semanticPrimitives.state'(X22),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X26) | s(bool,X20) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl64),
  inference(superposition,[],[f310,f3500])).
fof(f7641,plain,(
  ( ! [X19,X17,X15,X18,X16] : (p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(g(s(bool,X15)),X17,X16))))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl64),
  inference(subsumption_resolution,[],[f6555,f591])).
fof(f6555,plain,(
  ( ! [X19,X17,X15,X18,X16] : (~p(s(bool,X15)) | p(s(bool,happ(s(fun(X16,bool),X17),s(X16,X18)))) | ~p(s(bool,happ(s(fun(X16,bool),X17),s(X16,sK18(g(s(bool,X15)),X17,X16))))) | s(bool,X15) = s(bool,X19) | s(bool,'T_0') = s(bool,X19)) ) | $spl64),
  inference(superposition,[],[f295,f3500])).
fof(f7640,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(g(s(bool,X10)),X12,X11))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | $spl64),
  inference(subsumption_resolution,[],[f6554,f591])).
fof(f6554,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,X10)) | p(s(bool,happ(s(fun(X11,bool),X12),s(X11,X13)))) | ~p(s(bool,happ(s(fun(X11,bool),X12),s(X11,sK17(g(s(bool,X10)),X12,X11))))) | s(bool,X10) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | $spl64),
  inference(superposition,[],[f293,f3500])).
fof(f7639,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,g(s(bool,X6))) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl64),
  inference(subsumption_resolution,[],[f6552,f591])).
fof(f6552,plain,(
  ( ! [X6,X7] : (~p(s(bool,X6)) | s(bool,'F_0') != s(bool,g(s(bool,X6))) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl64),
  inference(superposition,[],[f264,f3500])).
fof(f7637,plain,(
  ( ! [X2,X3] : (p(s(bool,g(s(bool,X2)))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(subsumption_resolution,[],[f6550,f540])).
fof(f6550,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X2) | p(s(bool,g(s(bool,X2)))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f260,f3500])).
fof(f6530,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,g(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl64),
  inference(superposition,[],[f3500,f540])).
fof(f6529,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,g(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,g(s(bool,X3))) | s(bool,X0) = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f7608,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,X0))) = s(bool,g(s(bool,g(s(bool,X0)))))) ) | $spl64),
  inference(duplicate_literal_removal,[],[f7607])).
fof(f7607,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,g(s(bool,X0))) = s(bool,g(s(bool,g(s(bool,X0))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(condensation,[],[f6488])).
fof(f6488,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) = s(bool,X18) | s(bool,X17) = s(bool,X19) | s(bool,'T_0') = s(bool,X19) | s(bool,g(s(bool,X17))) = s(bool,g(s(bool,g(s(bool,X17))))) | s(bool,'T_0') = s(bool,X18)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f7626,plain,(
  ( ! [X2,X1] : (s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,g(s(bool,X1)))) ) | $spl64),
  inference(subsumption_resolution,[],[f6482,f1953])).
fof(f6482,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,g(s(bool,X1)))) ) | $spl64),
  inference(superposition,[],[f3500,f253])).
fof(f4917,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8(X1,X2,g(s(bool,X0))) | p(s(bool,X2)) | sP9(X1,X2,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3577,f540])).
fof(f4595,plain,(
  ( ! [X0,X1] : (sP9('F_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4566,f540])).
fof(f4569,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(X1,X2,g(s(bool,X0))) | p(s(bool,X2)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3579,f540])).
fof(f4566,plain,(
  sP9('F_0','F_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f415,f415,f3579])).
fof(f4556,plain,(
  ( ! [X0,X1] : (~sP9('T_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4524,f540])).
fof(f4525,plain,(
  ( ! [X0,X1] : (~sP8('T_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4510,f540])).
fof(f4524,plain,(
  ~sP9('T_0','F_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f4510,f389])).
fof(f4513,plain,(
  ( ! [X2,X0,X3,X1] : (~sP8(X1,X2,g(s(bool,X0))) | ~p(s(bool,X1)) | p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3578,f540])).
fof(f4510,plain,(
  ~sP8('T_0','F_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f415,f246,f3578])).
fof(f4489,plain,(
  ( ! [X0,X1] : (~sP7(g(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4474,f540])).
fof(f4475,plain,(
  ( ! [X0,X1] : (~sP6(g(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4429,f540])).
fof(f4474,plain,(
  ~sP7(g(s(bool,'T_0')),'F_0','F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f4429,f372])).
fof(f4432,plain,(
  ( ! [X2,X0,X3,X1] : (~sP6(g(s(bool,X0)),X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3573,f540])).
fof(f4429,plain,(
  ~sP6(g(s(bool,'T_0')),'F_0','F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f415,f415,f3573])).
fof(f4420,plain,(
  ( ! [X2,X0,X3,X1] : (~sP3(X1,g(s(bool,X0)),X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3570,f540])).
fof(f4392,plain,(
  ( ! [X0,X1] : (~sP5('T_0','F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4380,f540])).
fof(f4381,plain,(
  ( ! [X0,X1] : (~sP4('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4349,f540])).
fof(f4380,plain,(
  ~sP5('T_0','F_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f4349,f349])).
fof(f4353,plain,(
  ( ! [X2,X0,X3,X1] : (~sP4(X1,g(s(bool,X0)),X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3569,f540])).
fof(f4349,plain,(
  ~sP4('T_0',g(s(bool,'T_0')),'F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f246,f415,f3569])).
fof(f4294,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(g(s(bool,X0)),X1,X2) | ~sP6(g(s(bool,'T_0')),X1,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3583,f540])).
fof(f4284,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(g(s(bool,X0)),X1,X2) | ~sP8(g(s(bool,'T_0')),X1,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3582,f540])).
fof(f4250,plain,(
  ( ! [X2,X0,X1] : (sP9(g(s(bool,X0)),'T_0',X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f4238,f540])).
fof(f4239,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(g(s(bool,X0)),X1,X2) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3581,f540])).
fof(f4238,plain,(
  ( ! [X0] : (sP9(g(s(bool,'T_0')),'T_0',X0)) ) | $spl64),
  inference(unit_resulting_resolution,[],[f246,f3581])).
fof(f4215,plain,(
  ( ! [X2,X0,X1] : (sP9(g(s(bool,X0)),X1,'F_0') | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f4203,f540])).
fof(f4204,plain,(
  ( ! [X2,X0,X3,X1] : (sP9(g(s(bool,X0)),X1,X2) | p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3580,f540])).
fof(f4203,plain,(
  ( ! [X0] : (sP9(g(s(bool,'T_0')),X0,'F_0')) ) | $spl64),
  inference(unit_resulting_resolution,[],[f415,f3580])).
fof(f4179,plain,(
  ( ! [X2,X0,X1] : (sP7(g(s(bool,X0)),'T_0',X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f4167,f540])).
fof(f4168,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(g(s(bool,X0)),X1,X2) | ~p(s(bool,X1)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3575,f540])).
fof(f4167,plain,(
  ( ! [X0] : (sP7(g(s(bool,'T_0')),'T_0',X0)) ) | $spl64),
  inference(unit_resulting_resolution,[],[f246,f3575])).
fof(f4147,plain,(
  ( ! [X2,X0,X1] : (sP7(g(s(bool,X0)),X1,'T_0') | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f4135,f540])).
fof(f4136,plain,(
  ( ! [X2,X0,X3,X1] : (sP7(g(s(bool,X0)),X1,X2) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl64),
  inference(superposition,[],[f3574,f540])).
fof(f4135,plain,(
  ( ! [X0] : (sP7(g(s(bool,'T_0')),X0,'T_0')) ) | $spl64),
  inference(unit_resulting_resolution,[],[f246,f3574])).
fof(f4116,plain,(
  ( ! [X0,X1] : (sP1('F_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4106,f540])).
fof(f4107,plain,(
  ( ! [X2,X0,X1] : (sP1(X1,g(s(bool,X0))) | p(s(bool,X1)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f3568,f540])).
fof(f4106,plain,(
  sP1('F_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f415,f3568])).
fof(f4084,plain,(
  ( ! [X0,X1] : (sP1(g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f4074,f540])).
fof(f4075,plain,(
  ( ! [X2,X0,X1] : (sP1(g(s(bool,X0)),X1) | p(s(bool,X1)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f3567,f540])).
fof(f4074,plain,(
  sP1(g(s(bool,'T_0')),'F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f415,f3567])).
fof(f3841,plain,(
  ( ! [X0,X1] : (~sP3('T_0',g(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3629,f540])).
fof(f3827,plain,(
  ( ! [X0,X1] : (sP4('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3618,f540])).
fof(f3796,plain,(
  ( ! [X0,X1] : (~sP3(g(s(bool,X0)),'T_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3605,f540])).
fof(f3783,plain,(
  ( ! [X0,X1] : (sP5('T_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3499,f540])).
fof(f3681,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),g(s(bool,'T_0')),'T_0')) ) | $spl64),
  inference(unit_resulting_resolution,[],[f2881,f309,f367])).
fof(f3682,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',g(s(bool,'T_0')))) ) | $spl64),
  inference(unit_resulting_resolution,[],[f2881,f309,f367])).
fof(f3632,plain,(
  ( ! [X0,X1] : (~sP5('F_0','T_0',g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3498,f540])).
fof(f3629,plain,(
  ~sP3('T_0',g(s(bool,'T_0')),'F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f415,f426,f421,f3498,f353])).
fof(f3621,plain,(
  ( ! [X0,X1] : (sP5('T_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3497,f540])).
fof(f3618,plain,(
  sP4('T_0','T_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f3497,f349])).
fof(f3608,plain,(
  ( ! [X0,X1] : (~sP5('F_0',g(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f3496,f540])).
fof(f3605,plain,(
  ~sP3(g(s(bool,'T_0')),'T_0','F_0') | $spl64),
  inference(unit_resulting_resolution,[],[f246,f427,f421,f3496,f351])).
fof(f3595,plain,(
  ( ! [X2,X0,X1] : (sP0(g(s(bool,X0)),X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f3566,f540])).
fof(f3585,plain,(
  ( ! [X2,X0,X1] : (sP0(X1,g(s(bool,X0))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f3565,f540])).
fof(f3583,plain,(
  ( ! [X43,X44] : (sP7(g(s(bool,'T_0')),X43,X44) | ~sP6(g(s(bool,'T_0')),X43,X44)) ) | $spl64),
  inference(subsumption_resolution,[],[f3538,f246])).
fof(f3538,plain,(
  ( ! [X43,X44] : (~p(s(bool,'T_0')) | ~sP6(g(s(bool,'T_0')),X43,X44) | sP7(g(s(bool,'T_0')),X43,X44)) ) | $spl64),
  inference(superposition,[],[f405,f2881])).
fof(f3582,plain,(
  ( ! [X41,X42] : (sP9(g(s(bool,'T_0')),X41,X42) | ~sP8(g(s(bool,'T_0')),X41,X42)) ) | $spl64),
  inference(subsumption_resolution,[],[f3537,f246])).
fof(f3537,plain,(
  ( ! [X41,X42] : (~p(s(bool,'T_0')) | ~sP8(g(s(bool,'T_0')),X41,X42) | sP9(g(s(bool,'T_0')),X41,X42)) ) | $spl64),
  inference(superposition,[],[f404,f2881])).
fof(f3581,plain,(
  ( ! [X39,X40] : (sP9(g(s(bool,'T_0')),X39,X40) | ~p(s(bool,X39))) ) | $spl64),
  inference(subsumption_resolution,[],[f3536,f246])).
fof(f3536,plain,(
  ( ! [X39,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X39)) | sP9(g(s(bool,'T_0')),X39,X40)) ) | $spl64),
  inference(superposition,[],[f400,f2881])).
fof(f3580,plain,(
  ( ! [X37,X38] : (sP9(g(s(bool,'T_0')),X38,X37) | p(s(bool,X37))) ) | $spl64),
  inference(subsumption_resolution,[],[f3535,f246])).
fof(f3535,plain,(
  ( ! [X37,X38] : (~p(s(bool,'T_0')) | p(s(bool,X37)) | sP9(g(s(bool,'T_0')),X38,X37)) ) | $spl64),
  inference(superposition,[],[f399,f2881])).
fof(f3579,plain,(
  ( ! [X35,X36] : (sP9(X36,X35,g(s(bool,'T_0'))) | p(s(bool,X35)) | p(s(bool,X36))) ) | $spl64),
  inference(subsumption_resolution,[],[f3534,f246])).
fof(f3534,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | p(s(bool,X35)) | sP9(X36,X35,g(s(bool,'T_0'))) | p(s(bool,X36))) ) | $spl64),
  inference(superposition,[],[f398,f2881])).
fof(f3578,plain,(
  ( ! [X33,X34] : (~sP8(X34,X33,g(s(bool,'T_0'))) | ~p(s(bool,X34)) | p(s(bool,X33))) ) | $spl64),
  inference(subsumption_resolution,[],[f3533,f246])).
fof(f3533,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | p(s(bool,X33)) | ~p(s(bool,X34)) | ~sP8(X34,X33,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f394,f2881])).
fof(f3577,plain,(
  ( ! [X31,X32] : (~sP8(X31,X32,g(s(bool,'T_0'))) | p(s(bool,X32)) | sP9(X31,X32,g(s(bool,'T_0')))) ) | $spl64),
  inference(subsumption_resolution,[],[f3532,f246])).
fof(f3532,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | ~sP8(X31,X32,g(s(bool,'T_0'))) | p(s(bool,X32)) | sP9(X31,X32,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f393,f2881])).
fof(f3576,plain,(
  ( ! [X30,X29] : (sP9(g(s(bool,'T_0')),X29,X30) | p(s(bool,X29)) | ~sP8(g(s(bool,'T_0')),X29,X30)) ) | $spl64),
  inference(subsumption_resolution,[],[f3531,f246])).
fof(f3531,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~sP8(g(s(bool,'T_0')),X29,X30) | p(s(bool,X29)) | sP9(g(s(bool,'T_0')),X29,X30)) ) | $spl64),
  inference(superposition,[],[f392,f2881])).
fof(f3575,plain,(
  ( ! [X26,X25] : (sP7(g(s(bool,'T_0')),X25,X26) | ~p(s(bool,X25))) ) | $spl64),
  inference(subsumption_resolution,[],[f3529,f246])).
fof(f3529,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X25)) | sP7(g(s(bool,'T_0')),X25,X26)) ) | $spl64),
  inference(superposition,[],[f383,f2881])).
fof(f3574,plain,(
  ( ! [X24,X23] : (sP7(g(s(bool,'T_0')),X24,X23) | ~p(s(bool,X23))) ) | $spl64),
  inference(subsumption_resolution,[],[f3528,f246])).
fof(f3528,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | ~p(s(bool,X23)) | sP7(g(s(bool,'T_0')),X24,X23)) ) | $spl64),
  inference(superposition,[],[f382,f2881])).
fof(f3573,plain,(
  ( ! [X21,X22] : (~sP6(g(s(bool,'T_0')),X21,X22) | p(s(bool,X22)) | p(s(bool,X21))) ) | $spl64),
  inference(subsumption_resolution,[],[f3527,f246])).
fof(f3527,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP6(g(s(bool,'T_0')),X21,X22)) ) | $spl64),
  inference(superposition,[],[f377,f2881])).
fof(f3572,plain,(
  ( ! [X19,X20] : (sP7(g(s(bool,'T_0')),X19,X20) | p(s(bool,X19)) | ~sP6(g(s(bool,'T_0')),X19,X20)) ) | $spl64),
  inference(subsumption_resolution,[],[f3526,f246])).
fof(f3526,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~sP6(g(s(bool,'T_0')),X19,X20) | p(s(bool,X19)) | sP7(g(s(bool,'T_0')),X19,X20)) ) | $spl64),
  inference(superposition,[],[f375,f2881])).
fof(f3571,plain,(
  ( ! [X17,X18] : (sP7(g(s(bool,'T_0')),X17,X18) | ~sP6(g(s(bool,'T_0')),X17,X18) | p(s(bool,X18))) ) | $spl64),
  inference(subsumption_resolution,[],[f3525,f246])).
fof(f3525,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~sP6(g(s(bool,'T_0')),X17,X18) | sP7(g(s(bool,'T_0')),X17,X18) | p(s(bool,X18))) ) | $spl64),
  inference(superposition,[],[f374,f2881])).
fof(f3570,plain,(
  ( ! [X15,X16] : (~sP3(X15,g(s(bool,'T_0')),X16) | p(s(bool,X16)) | ~p(s(bool,X15))) ) | $spl64),
  inference(subsumption_resolution,[],[f3524,f246])).
fof(f3524,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP3(X15,g(s(bool,'T_0')),X16)) ) | $spl64),
  inference(superposition,[],[f358,f2881])).
fof(f3569,plain,(
  ( ! [X14,X13] : (~sP4(X13,g(s(bool,'T_0')),X14) | p(s(bool,X14)) | ~p(s(bool,X13))) ) | $spl64),
  inference(subsumption_resolution,[],[f3523,f246])).
fof(f3523,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~p(s(bool,X13)) | p(s(bool,X14)) | ~sP4(X13,g(s(bool,'T_0')),X14)) ) | $spl64),
  inference(superposition,[],[f354,f2881])).
fof(f3568,plain,(
  ( ! [X12] : (sP1(X12,g(s(bool,'T_0'))) | p(s(bool,X12))) ) | $spl64),
  inference(subsumption_resolution,[],[f3522,f246])).
fof(f3522,plain,(
  ( ! [X12] : (~p(s(bool,'T_0')) | p(s(bool,X12)) | sP1(X12,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f341,f2881])).
fof(f3567,plain,(
  ( ! [X11] : (sP1(g(s(bool,'T_0')),X11) | p(s(bool,X11))) ) | $spl64),
  inference(subsumption_resolution,[],[f3521,f246])).
fof(f3521,plain,(
  ( ! [X11] : (~p(s(bool,'T_0')) | p(s(bool,X11)) | sP1(g(s(bool,'T_0')),X11)) ) | $spl64),
  inference(superposition,[],[f338,f2881])).
fof(f3566,plain,(
  ( ! [X10] : (sP0(g(s(bool,'T_0')),X10)) ) | $spl64),
  inference(subsumption_resolution,[],[f3520,f246])).
fof(f3520,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | sP0(g(s(bool,'T_0')),X10)) ) | $spl64),
  inference(superposition,[],[f323,f2881])).
fof(f3565,plain,(
  ( ! [X9] : (sP0(X9,g(s(bool,'T_0')))) ) | $spl64),
  inference(subsumption_resolution,[],[f3519,f246])).
fof(f3519,plain,(
  ( ! [X9] : (~p(s(bool,'T_0')) | sP0(X9,g(s(bool,'T_0')))) ) | $spl64),
  inference(superposition,[],[f322,f2881])).
fof(f3562,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(g(s(bool,'T_0')),X4,X3)))))) ) | $spl64),
  inference(subsumption_resolution,[],[f3515,f246])).
fof(f3515,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(g(s(bool,'T_0')),X4,X3)))))) ) | $spl64),
  inference(superposition,[],[f295,f2881])).
fof(f3561,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(g(s(bool,'T_0')),X1,X0)))))) ) | $spl64),
  inference(subsumption_resolution,[],[f3514,f246])).
fof(f3514,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(g(s(bool,'T_0')),X1,X0)))))) ) | $spl64),
  inference(superposition,[],[f293,f2881])).
fof(f3500,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,g(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl64),
  inference(superposition,[],[f2881,f540])).
fof(f3496,plain,(
  ~sP5('F_0',g(s(bool,'T_0')),'T_0') | $spl64),
  inference(unit_resulting_resolution,[],[f415,f2881,f369])).
fof(f3497,plain,(
  sP5('T_0',g(s(bool,'T_0')),'T_0') | $spl64),
  inference(unit_resulting_resolution,[],[f246,f2881,f367])).
fof(f3498,plain,(
  ~sP5('F_0','T_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f415,f2881,f369])).
fof(f3499,plain,(
  sP5('T_0','T_0',g(s(bool,'T_0'))) | $spl64),
  inference(unit_resulting_resolution,[],[f246,f2881,f367])).
fof(f2857,plain,(
  ( ! [X123,X122] : (s(fun(bool,bool),X122) = s(fun(bool,bool),X123)) ) | $spl56),
  inference(cnf_transformation,[],[f2857_D])).
fof(f2857_D,plain,(
  ( ! [X123,X122] : (s(fun(bool,bool),X122) = s(fun(bool,bool),X123)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f13384,plain,(
  ( ! [X80,X81,X77] : (s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81)) ) | $spl148),
  inference(cnf_transformation,[],[f13384_D])).
fof(f13384_D,plain,(
  ( ! [X80,X81,X77] : (s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81)) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f13383,plain,(
  ( ! [X80,X74,X81,X77,X75] : (s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl60 | $spl64)),
  inference(subsumption_resolution,[],[f13382,f13238])).
fof(f13382,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X76),s('type.semanticPrimitives.state'(X77),X78),s('type.list.list'('type.ast.exp'),X79),s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X80) = s('type.pair.prod'('type.semanticPrimitives.state'(X77),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X81) | s(fun(bool,bool),X74) = s(fun(bool,bool),X75)) ) | ($spl46 | $spl60 | $spl64)),
  inference(subsumption_resolution,[],[f8856,f13238])).
fof(f13379,plain,(
  ( ! [X111,X105,X110] : (s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111)) ) | $spl146),
  inference(cnf_transformation,[],[f13379_D])).
fof(f13379_D,plain,(
  ( ! [X111,X105,X110] : (s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111)) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f13378,plain,(
  ( ! [X103,X111,X105,X102,X110] : (s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl60 | $spl64)),
  inference(subsumption_resolution,[],[f13377,f13238])).
fof(f13377,plain,(
  ( ! [X103,X111,X109,X107,X105,X102,X110,X108,X106,X104] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X104),s('type.semanticPrimitives.state'(X105),X106),s('type.semanticPrimitives.v',X107),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X108),s('type.semanticPrimitives.v',X109),s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X110) = s('type.pair.prod'('type.semanticPrimitives.state'(X105),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X111) | s(fun(bool,bool),X102) = s(fun(bool,bool),X103)) ) | ($spl46 | $spl60 | $spl64)),
  inference(subsumption_resolution,[],[f8980,f13238])).
fof(f13373,plain,(
  $false | ($spl60 | $spl64 | $spl120)),
  inference(subsumption_resolution,[],[f13372,f434])).
fof(f13372,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl60 | $spl64 | $spl120)),
  inference(condensation,[],[f13371])).
fof(f13371,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl60 | $spl64 | $spl120)),
  inference(forward_demodulation,[],[f9774,f13364])).
fof(f13364,plain,(
  ( ! [X25] : (s(bool,X25) = s(bool,g(s(bool,X25)))) ) | ($spl60 | $spl64 | $spl120)),
  inference(global_subsumption,[],[f7625,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2881,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3499,f3498,f3497,f3496,f3500,f3561,f3562,f3565,f3566,f3567,f3568,f3569,f3570,f3571,f3572,f3573,f3574,f3575,f3576,f3577,f3578,f3579,f3580,f3581,f3582,f3583,f3585,f3595,f3605,f3608,f3618,f3621,f3629,f3632,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3682,f3681,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3783,f3796,f3827,f3841,f4074,f4075,f4084,f4106,f4107,f4116,f4135,f4136,f4147,f4167,f4168,f4179,f4203,f4204,f4215,f4238,f4239,f4250,f4284,f4294,f4349,f4353,f4380,f4381,f4392,f4420,f4429,f4432,f4474,f4475,f4489,f4510,f4513,f4524,f4525,f4556,f4566,f4569,f4595,f4917,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f7617,f7626,f7608,f7601,f7589,f7583,f6529,f6530,f7574,f7637,f7639,f7640,f7641,f6556,f6557,f6558,f7642,f7650,f7656,f7657,f6638,f6639,f6640,f7666,f6841,f6843,f6844,f6847,f6848,f6849,f6850,f6851,f7685,f7551,f7695,f7696,f7062,f7064,f7065,f7068,f7069,f7070,f7071,f7074,f7077,f7078,f7079,f7080,f7081,f7082,f7083,f7085,f7133,f7134,f7135,f7136,f7137,f7138,f7139,f7140,f7141,f7142,f7143,f7144,f7145,f7146,f7147,f7148,f7149,f7150,f7151,f7152,f7153,f7154,f7155,f7156,f7157,f7158,f7166,f7167,f7168,f7169,f7170,f7171,f7172,f7173,f7174,f7175,f7176,f7177,f7178,f7185,f7186,f7187,f7704,f7705,f7706,f7707,f7708,f7709,f7710,f7711,f7712,f7713,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7461,f7463,f7464,f7467,f7468,f7469,f7470,f7471,f7494,f7474,f7488,f3756,f3963,f3945,f3943,f312,f3311,f3868,f3852,f3850,f311,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f1313,f2749,f3823,f3807,f3805,f310,f2578,f2580,f3947,f3854,f3809,f3486,f3447,f2583,f2577,f2486,f2463,f2391,f1045,f415,f265,f264,f2877,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9641,f9908,f9953,f9998,f10066,f10132,f10210,f8622,f8621,f8568,f8567,f10269,f10335,f10401,f10468,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11004,f11008,f11009,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f10400,f13238])).
fof(f9774,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(duplicate_literal_removal,[],[f9655])).
fof(f9655,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(superposition,[],[f253,f2877])).
fof(f13370,plain,(
  $false | ($spl60 | $spl64 | $spl120)),
  inference(subsumption_resolution,[],[f13369,f434])).
fof(f13369,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl60 | $spl64 | $spl120)),
  inference(condensation,[],[f13368])).
fof(f13368,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X0)) ) | ($spl60 | $spl64 | $spl120)),
  inference(forward_demodulation,[],[f9787,f13364])).
fof(f9787,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(duplicate_literal_removal,[],[f9632])).
fof(f9632,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(superposition,[],[f2877,f253])).
fof(f13367,plain,(
  $false | ($spl60 | $spl64 | $spl120)),
  inference(subsumption_resolution,[],[f13366,f434])).
fof(f13366,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl60 | $spl64 | $spl120)),
  inference(forward_demodulation,[],[f9629,f13364])).
fof(f9629,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'T_0'))) | $spl60),
  inference(unit_resulting_resolution,[],[f434,f2877])).
fof(f13362,plain,(
  $false | ($spl59 | $spl60 | $spl64 | $spl66 | $spl69)),
  inference(subsumption_resolution,[],[f2859,f13360])).
fof(f13360,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(subsumption_resolution,[],[f9763,f13240])).
fof(f13240,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(global_subsumption,[],[f13239,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f309,f306,f305,f2419,f2422,f2446,f2449,f2572,f2574,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2881,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3499,f3498,f3497,f3496,f3500,f3561,f3562,f3565,f3566,f3567,f3568,f3569,f3570,f3571,f3572,f3573,f3574,f3575,f3576,f3577,f3578,f3579,f3580,f3581,f3582,f3583,f3585,f3595,f3605,f3608,f3618,f3621,f3629,f3632,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3682,f3681,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3783,f3796,f3827,f3841,f4074,f4075,f4084,f4106,f4107,f4116,f4135,f4136,f4147,f4167,f4168,f4179,f4203,f4204,f4215,f4238,f4239,f4250,f4284,f4294,f4349,f4353,f4380,f4381,f4392,f4420,f4429,f4432,f4474,f4475,f4489,f4510,f4513,f4524,f4525,f4556,f4566,f4569,f4595,f4917,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f7617,f7626,f7608,f7601,f7589,f7583,f6529,f6530,f7574,f7637,f7639,f7640,f7641,f6556,f6557,f6558,f7642,f7650,f7656,f7657,f6638,f6639,f6640,f7666,f6841,f6843,f6844,f6847,f6848,f6849,f6850,f6851,f7685,f7551,f7695,f7696,f7062,f7064,f7065,f7068,f7069,f7070,f7071,f7074,f7077,f7078,f7079,f7080,f7081,f7082,f7083,f7085,f7133,f7134,f7135,f7136,f7137,f7138,f7139,f7140,f7141,f7142,f7143,f7144,f7145,f7146,f7147,f7148,f7149,f7150,f7151,f7152,f7153,f7154,f7155,f7156,f7157,f7158,f7166,f7167,f7168,f7169,f7170,f7171,f7172,f7173,f7174,f7175,f7176,f7177,f7178,f7185,f7186,f7187,f7704,f7705,f7706,f7707,f7708,f7709,f7710,f7711,f7712,f7713,f7714,f7715,f7716,f7717,f7718,f7719,f7720,f7721,f7722,f7723,f7724,f7725,f7726,f7732,f7733,f7734,f7735,f7736,f7737,f7738,f7739,f7740,f7741,f7742,f7461,f7463,f7464,f7467,f7468,f7469,f7470,f7471,f7494,f7474,f7488,f3756,f3963,f3945,f3943,f312,f3311,f3868,f3852,f3850,f311,f3494,f3455,f3412,f3371,f2494,f2471,f2443,f2416,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f3484,f3482,f3445,f3443,f2483,f2481,f2460,f2458,f2389,f1541,f1540,f1313,f2749,f3823,f3807,f3805,f310,f2578,f2580,f3947,f3854,f3809,f3486,f3447,f2583,f2577,f2486,f2463,f2391,f1045,f415,f265,f264,f2877,f9065,f9066,f9109,f9113,f9147,f9148,f9180,f9177,f9183,f9217,f9222,f9259,f9272,f9308,f9310,f9346,f9384,f9428,f9478,f9530,f9574,f9616,f9641,f9908,f9953,f9998,f10066,f10132,f10210,f8622,f8621,f8568,f8567,f10269,f10335,f10401,f10468,f10530,f10592,f10656,f10721,f10784,f10846,f10908,f10912,f11004,f11008,f11009,f11015,f11016,f11017,f11018,f11019,f11020,f11021,f11022,f11023,f11024,f11025,f11026,f11027,f11028,f11029,f11030,f11031,f11093,f11161,f11162,f11236,f11234,f11240,f11310,f11311,f11380,f11379,f11375,f11384,f11451,f11457,f11526,f11540,f11608,f11610,f11677,f10400,f13238])).
fof(f13239,plain,(
  ( ! [X9] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl60 | $spl66 | $spl69)),
  inference(forward_demodulation,[],[f9882,f8386])).
fof(f9882,plain,(
  ( ! [X9] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9)) ) | ($spl60 | $spl66)),
  inference(duplicate_literal_removal,[],[f9856])).
fof(f9856,plain,(
  ( ! [X9] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | ($spl60 | $spl66)),
  inference(superposition,[],[f2882,f2877])).
fof(f9763,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0')))) ) | $spl60),
  inference(equality_factoring,[],[f2877])).
fof(f13354,plain,(
  $false | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(subsumption_resolution,[],[f13243,f246])).
fof(f13243,plain,(
  ~p(s(bool,'T_0')) | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(backward_demodulation,[],[f13240,f415])).
fof(f13353,plain,(
  $false | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(subsumption_resolution,[],[f13352,f13238])).
fof(f13352,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(subsumption_resolution,[],[f13241,f13240])).
fof(f13241,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl60 | $spl64 | $spl66 | $spl69)),
  inference(backward_demodulation,[],[f13240,f264])).
fof(f13195,plain,(
  ( ! [X740,X742] : (s(bool,'F_0') != s(bool,f(s(bool,X740))) | s(bool,X740) = s(bool,X742) | s(bool,'F_0') = s(bool,g(s(bool,X742)))) ) | $spl144),
  inference(cnf_transformation,[],[f13195_D])).
fof(f13195_D,plain,(
  ( ! [X740,X742] : (s(bool,'F_0') != s(bool,f(s(bool,X740))) | s(bool,X740) = s(bool,X742) | s(bool,'F_0') = s(bool,g(s(bool,X742)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f13042,plain,(
  ( ! [X741,X740,X742] : (s(bool,'F_0') != s(bool,f(s(bool,X740))) | s(bool,'T_0') = s(bool,X741) | s(bool,'F_0') = s(bool,g(s(bool,X742))) | s(bool,X740) = s(bool,X742)) ) | ($spl65 | $spl69)),
  inference(duplicate_literal_removal,[],[f12674])).
fof(f12674,plain,(
  ( ! [X741,X740,X742] : (s(bool,'F_0') != s(bool,f(s(bool,X740))) | s(bool,'T_0') = s(bool,X741) | s(bool,'T_0') = s(bool,X741) | s(bool,'F_0') = s(bool,g(s(bool,X742))) | s(bool,X740) = s(bool,X742)) ) | ($spl65 | $spl69)),
  inference(superposition,[],[f8389,f8643])).
fof(f13168,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | $spl142),
  inference(cnf_transformation,[],[f13168_D])).
fof(f13168_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f13167,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3)))) ) | $spl65),
  inference(subsumption_resolution,[],[f12197,f260])).
fof(f12197,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,'F_0') = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) ) | $spl65),
  inference(superposition,[],[f260,f8643])).
fof(f13137,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,g(s(bool,sK24(X49,X50,bool,bool)))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50)) ) | $spl138),
  inference(cnf_transformation,[],[f13137_D])).
fof(f13137_D,plain,(
  ( ! [X50,X49] : (s(bool,'F_0') = s(bool,g(s(bool,sK24(X49,X50,bool,bool)))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f13063,plain,(
  ( ! [X860,X859,X858] : (s(bool,'T_0') = s(bool,X860) | s(fun(bool,bool),X858) = s(fun(bool,bool),X859) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X858,X859,bool,bool))))) ) | ($spl46 | $spl65)),
  inference(duplicate_literal_removal,[],[f12183])).
fof(f12183,plain,(
  ( ! [X860,X859,X858] : (s(bool,'T_0') = s(bool,X860) | s(fun(bool,bool),X858) = s(fun(bool,bool),X859) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X858,X859,bool,bool)))) | s(bool,'T_0') = s(bool,X860)) ) | ($spl46 | $spl65)),
  inference(superposition,[],[f2608,f8643])).
fof(f13166,plain,(
  ( ! [X857,X855,X856] : (p(s(bool,X857)) | s(fun(bool,bool),X855) = s(fun(bool,bool),X856) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X855,X856,bool,bool))))) ) | ($spl46 | $spl65)),
  inference(subsumption_resolution,[],[f12182,f260])).
fof(f12182,plain,(
  ( ! [X857,X855,X856] : (p(s(bool,X857)) | s(fun(bool,bool),X855) = s(fun(bool,bool),X856) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X855,X856,bool,bool)))) | s(bool,'T_0') = s(bool,X857)) ) | ($spl46 | $spl65)),
  inference(superposition,[],[f2829,f8643])).
fof(f2829,plain,(
  ( ! [X2,X3] : (p(s(bool,sK24(X2,X3,bool,bool))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | $spl46),
  inference(trivial_inequality_removal,[],[f2789])).
fof(f2789,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,sK24(X2,X3,bool,bool))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3)) ) | $spl46),
  inference(superposition,[],[f260,f2608])).
fof(f13165,plain,(
  ( ! [X854,X852,X853] : (s(fun(bool,bool),X852) = s(fun(bool,bool),X853) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X852,X853,bool,bool)))) | s(bool,'T_0') = s(bool,X854)) ) | ($spl46 | $spl65)),
  inference(subsumption_resolution,[],[f12181,f253])).
fof(f12181,plain,(
  ( ! [X854,X852,X853] : (s(bool,'F_0') != s(bool,X854) | s(fun(bool,bool),X852) = s(fun(bool,bool),X853) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X852,X853,bool,bool)))) | s(bool,'T_0') = s(bool,X854)) ) | ($spl46 | $spl65)),
  inference(superposition,[],[f10216,f8643])).
fof(f13138,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) | $spl140),
  inference(cnf_transformation,[],[f13138_D])).
fof(f13138_D,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X15)))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f13082,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,g(s(bool,'T_0')))) ) | ($spl60 | $spl65)),
  inference(duplicate_literal_removal,[],[f11820])).
fof(f11820,plain,(
  ( ! [X24,X25] : (s(bool,'T_0') = s(bool,X24) | s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X24)) ) | ($spl60 | $spl65)),
  inference(superposition,[],[f8643,f2877])).
fof(f13130,plain,(
  ( ! [X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X27)))) ) | $spl132),
  inference(cnf_transformation,[],[f13130_D])).
fof(f13130_D,plain,(
  ( ! [X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,'F_0') = s(bool,g(s(bool,X27)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f13084,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,'F_0') = s(bool,g(s(bool,X12)))) ) | $spl65),
  inference(duplicate_literal_removal,[],[f11817])).
fof(f11817,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,'F_0') = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,'F_0') = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,X13)) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f13093,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X20)))) ) | $spl65),
  inference(duplicate_literal_removal,[],[f11790])).
fof(f11790,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,'F_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X19)) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f13094,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl60 | $spl65)),
  inference(duplicate_literal_removal,[],[f11788])).
fof(f11788,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,g(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl60 | $spl65)),
  inference(superposition,[],[f8643,f2877])).
fof(f13132,plain,(
  ( ! [X22] : (s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,g(s(bool,X22)))) ) | $spl136),
  inference(cnf_transformation,[],[f13132_D])).
fof(f13132_D,plain,(
  ( ! [X22] : (s(bool,'F_0') = s(bool,X22) | s(bool,'F_0') = s(bool,g(s(bool,X22)))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f13099,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl65),
  inference(duplicate_literal_removal,[],[f11783])).
fof(f11783,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl65),
  inference(superposition,[],[f8643,f253])).
fof(f13100,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X51) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X49,X50,bool,bool)))) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50)) ) | ($spl46 | $spl65)),
  inference(duplicate_literal_removal,[],[f11782])).
fof(f11782,plain,(
  ( ! [X50,X51,X49] : (s(bool,'T_0') = s(bool,X51) | s(bool,'F_0') = s(bool,g(s(bool,sK24(X49,X50,bool,bool)))) | s(bool,'T_0') = s(bool,X51) | s(fun(bool,bool),X49) = s(fun(bool,bool),X50)) ) | ($spl46 | $spl65)),
  inference(superposition,[],[f8643,f2608])).
fof(f13110,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl65),
  inference(duplicate_literal_removal,[],[f11771])).
fof(f11771,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f13131,plain,(
  ( ! [X23,X21] : (s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X23)) ) | $spl134),
  inference(cnf_transformation,[],[f13131_D])).
fof(f13131_D,plain,(
  ( ! [X23,X21] : (s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X23)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f11761,plain,(
  ( ! [X23,X21,X22] : (s(bool,'F_0') = s(bool,X22) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23) | s(bool,'F_0') = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,g(s(bool,X21)))) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f13122,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | $spl65),
  inference(duplicate_literal_removal,[],[f11743])).
fof(f11743,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,'F_0') = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | $spl65),
  inference(superposition,[],[f8643,f8643])).
fof(f10208,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK15(X0,X3,bool)) | ~p(s(bool,X3))) ) | $spl128),
  inference(cnf_transformation,[],[f10208_D])).
fof(f10208_D,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK15(X0,X3,bool)) | ~p(s(bool,X3))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f10195,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X6)))) | ~p(s(bool,X7)) | s(bool,'T_0') = s(bool,sK15(X4,X7,bool))) ) | $spl56),
  inference(superposition,[],[f1045,f2857])).
fof(f10194,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,X3)) | s(bool,'T_0') = s(bool,sK15(X0,X3,bool))) ) | $spl56),
  inference(superposition,[],[f1045,f2857])).
fof(f7873,plain,(
  $false | ($spl63 | $spl65 | $spl66)),
  inference(subsumption_resolution,[],[f2880,f7745])).
fof(f7745,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,X2)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f2882,f3182])).
fof(f3182,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl63),
  inference(trivial_inequality_removal,[],[f3176])).
fof(f3176,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl63),
  inference(superposition,[],[f2879,f540])).
fof(f7872,plain,(
  $false | ($spl63 | $spl66)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f2879,f3167,f3166,f3165,f3161,f3160,f3155,f3170,f3182,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3241,f3240,f3239,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3345,f3347,f3371,f3372,f3375,f3386,f3388,f3412,f3418,f3431,f3443,f3445,f3447,f3455,f3460,f3471,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3686,f3685,f3684,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3873,f3872,f3871,f3870,f3874,f3932,f3935,f3943,f3945,f3947,f3963,f3970,f3980,f3983,f4003,f4006,f4018,f4041,f4052,f4616,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f6440,f6443,f6460,f7745,f7855,f7861,f7867,f7871])).
fof(f7871,plain,(
  ( ! [X0,X8,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7870,f246])).
fof(f7870,plain,(
  ( ! [X0,X8,X7] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl63 | $spl66)),
  inference(forward_demodulation,[],[f7869,f7745])).
fof(f7869,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7828,f246])).
fof(f7828,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | ($spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f312])).
fof(f7867,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7866,f246])).
fof(f7866,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(forward_demodulation,[],[f7865,f7745])).
fof(f7865,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7823,f246])).
fof(f7823,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f311])).
fof(f7861,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7860,f246])).
fof(f7860,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(forward_demodulation,[],[f7859,f7745])).
fof(f7859,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7766,f246])).
fof(f7766,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | ($spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f310])).
fof(f7855,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7746,f7745])).
fof(f7746,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f264])).
fof(f6460,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) = s(bool,X13) | s(bool,X11) != s(bool,X12) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) ) | $spl63),
  inference(global_subsumption,[],[f6443,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3240,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3371,f3412,f3443,f3445,f3447,f3455,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3685,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3943,f3945,f3947,f3963,f6190,f6252,f6316,f6338,f6349,f6359,f6411])).
fof(f6443,plain,(
  ( ! [X12,X13,X11] : (s(bool,X11) != s(bool,X12) | s(bool,X11) = s(bool,X13) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,f(s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) ) | $spl63),
  inference(superposition,[],[f3170,f540])).
fof(f6440,plain,(
  ( ! [X4,X3] : (s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(bool,X3) = s(bool,X4) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,f(s(bool,X3)))) ) | $spl63),
  inference(superposition,[],[f3170,f3182])).
fof(f4616,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,f(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl63),
  inference(superposition,[],[f3182,f540])).
fof(f4052,plain,(
  ( ! [X0,X1] : (sP4('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f4003,f540])).
fof(f4041,plain,(
  ( ! [X0,X1] : (~sP2(f(s(bool,X0)),'F_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3980,f540])).
fof(f4018,plain,(
  ( ! [X0,X1] : (~sP2('F_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3932,f540])).
fof(f4006,plain,(
  ( ! [X0,X1] : (sP5('T_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3873,f540])).
fof(f4003,plain,(
  sP4('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f3873,f349])).
fof(f3983,plain,(
  ( ! [X0,X1] : (~sP5('F_0','F_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3872,f540])).
fof(f3980,plain,(
  ~sP2(f(s(bool,'T_0')),'F_0','F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f415,f424,f421,f3872,f352])).
fof(f3970,plain,(
  ( ! [X0,X1] : (sP5('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3871,f540])).
fof(f3935,plain,(
  ( ! [X0,X1] : (~sP5('F_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3870,f540])).
fof(f3932,plain,(
  ~sP2('F_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f415,f423,f421,f3870,f353])).
fof(f3874,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3155,f540])).
fof(f3870,plain,(
  ~sP5('F_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f415,f3155,f369])).
fof(f3871,plain,(
  sP5('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f246,f3155,f367])).
fof(f3872,plain,(
  ~sP5('F_0','F_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f415,f3155,f369])).
fof(f3873,plain,(
  sP5('T_0','F_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f246,f3155,f367])).
fof(f3684,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',f(s(bool,'T_0')))) ) | $spl63),
  inference(unit_resulting_resolution,[],[f2879,f309,f368])).
fof(f3686,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP5('const.bigStep.evaluate_match_7'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_match_5'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X4),s('type.semanticPrimitives.v',X5),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'T_0')) ) | $spl63),
  inference(unit_resulting_resolution,[],[f2879,f309,f368])).
fof(f3471,plain,(
  ( ! [X0,X1] : (sP3('T_0',f(s(bool,X0)),'F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3386,f540])).
fof(f3460,plain,(
  ( ! [X0,X1] : (~sP4('T_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3372,f540])).
fof(f3431,plain,(
  ( ! [X0,X1] : (sP3(f(s(bool,X0)),'T_0','F_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3345,f540])).
fof(f3418,plain,(
  ( ! [X0,X1] : (~sP5('T_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3167,f540])).
fof(f3388,plain,(
  ( ! [X0,X1] : (sP5('F_0','T_0',f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3166,f540])).
fof(f3386,plain,(
  sP3('T_0',f(s(bool,'T_0')),'F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f3166,f348])).
fof(f3375,plain,(
  ( ! [X0,X1] : (~sP5('T_0',f(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3161,f540])).
fof(f3372,plain,(
  ~sP4('T_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f246,f427,f422,f3161,f351])).
fof(f3347,plain,(
  ( ! [X0,X1] : (sP5('F_0',f(s(bool,X0)),'T_0') | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f3160,f540])).
fof(f3345,plain,(
  sP3(f(s(bool,'T_0')),'T_0','F_0') | $spl63),
  inference(unit_resulting_resolution,[],[f3160,f348])).
fof(f3239,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),'T_0',f(s(bool,'T_0')))) ) | $spl63),
  inference(unit_resulting_resolution,[],[f2879,f306,f368])).
fof(f3241,plain,(
  ( ! [X2,X0,X3,X1] : (~sP5('const.bigStep.evaluate_list_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.semanticPrimitives.state'(X1),X2),s('type.list.list'('type.ast.exp'),X3),s('type.pair.prod'('type.semanticPrimitives.state'(X1),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.interp.run_eval_list_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X0),s('type.list.list'('type.ast.exp'),X3),s('type.semanticPrimitives.state'(X1),X2)))),f(s(bool,'T_0')),'T_0')) ) | $spl63),
  inference(unit_resulting_resolution,[],[f2879,f306,f368])).
fof(f3170,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,f(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl63),
  inference(superposition,[],[f2879,f540])).
fof(f3155,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f455,f2879,f1956])).
fof(f3160,plain,(
  sP5('F_0',f(s(bool,'T_0')),'T_0') | $spl63),
  inference(unit_resulting_resolution,[],[f415,f2879,f366])).
fof(f3161,plain,(
  ~sP5('T_0',f(s(bool,'T_0')),'T_0') | $spl63),
  inference(unit_resulting_resolution,[],[f246,f2879,f368])).
fof(f3165,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | $spl63),
  inference(unit_resulting_resolution,[],[f246,f2879,f316])).
fof(f3166,plain,(
  sP5('F_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f415,f2879,f366])).
fof(f3167,plain,(
  ~sP5('T_0','T_0',f(s(bool,'T_0'))) | $spl63),
  inference(unit_resulting_resolution,[],[f246,f2879,f368])).
fof(f7868,plain,(
  $false | ($spl63 | $spl66)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f2879,f3167,f3166,f3165,f3161,f3160,f3155,f3170,f3182,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3241,f3240,f3239,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3345,f3347,f3371,f3372,f3375,f3386,f3388,f3412,f3418,f3431,f3443,f3445,f3447,f3455,f3460,f3471,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3686,f3685,f3684,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3873,f3872,f3871,f3870,f3874,f3932,f3935,f3943,f3945,f3947,f3963,f3970,f3980,f3983,f4003,f4006,f4018,f4041,f4052,f4616,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f6440,f6443,f6460,f7745,f7855,f7861,f7867])).
fof(f7864,plain,(
  $false | ($spl0 | $spl63 | $spl66)),
  inference(global_subsumption,[],[f7863,f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f2879,f3167,f3166,f3165,f3161,f3160,f3155,f3170,f3182,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3241,f3240,f3239,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3345,f3347,f3371,f3372,f3375,f3386,f3388,f3412,f3418,f3431,f3443,f3445,f3447,f3455,f3460,f3471,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3686,f3685,f3684,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3873,f3872,f3871,f3870,f3874,f3932,f3935,f3943,f3945,f3947,f3963,f3970,f3980,f3983,f4003,f4006,f4018,f4041,f4052,f4616,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f6440,f6443,f6460,f7745,f7855,f7861])).
fof(f7863,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | ($spl0 | $spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7772,f246])).
fof(f7772,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X0)) ) | ($spl0 | $spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f5467])).
fof(f7862,plain,(
  $false | ($spl63 | $spl66)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f2879,f3167,f3166,f3165,f3161,f3160,f3155,f3170,f3182,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3241,f3240,f3239,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3345,f3347,f3371,f3372,f3375,f3386,f3388,f3412,f3418,f3431,f3443,f3445,f3447,f3455,f3460,f3471,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3686,f3685,f3684,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3873,f3872,f3871,f3870,f3874,f3932,f3935,f3943,f3945,f3947,f3963,f3970,f3980,f3983,f4003,f4006,f4018,f4041,f4052,f4616,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f6440,f6443,f6460,f7745,f7855,f7861])).
fof(f7858,plain,(
  $false | ($spl59 | $spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7763,f7745])).
fof(f7763,plain,(
  s(bool,'T_0') != s(bool,g(s(bool,'T_0'))) | ($spl59 | $spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f7743])).
fof(f7743,plain,(
  s(bool,'F_0') != s(bool,g(s(bool,'T_0'))) | ($spl59 | $spl63)),
  inference(forward_demodulation,[],[f2859,f3155])).
fof(f7857,plain,(
  $false | ($spl63 | $spl66)),
  inference(subsumption_resolution,[],[f7748,f246])).
fof(f7748,plain,(
  ~p(s(bool,'T_0')) | ($spl63 | $spl66)),
  inference(backward_demodulation,[],[f7745,f415])).
fof(f7856,plain,(
  $false | ($spl63 | $spl66)),
  inference(global_subsumption,[],[f245,f244,f246,f253,f261,f260,f307,f308,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1209,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f312,f309,f311,f306,f1541,f1540,f1313,f1975,f1974,f303,f301,f300,f299,f298,f297,f295,f293,f292,f290,f310,f305,f1045,f415,f265,f264,f2416,f2419,f2422,f2443,f2446,f2449,f2458,f2460,f2471,f2481,f2483,f2494,f2572,f2574,f2578,f2580,f2739,f2738,f2737,f2735,f2734,f2733,f2730,f2729,f2720,f2719,f2715,f2714,f2691,f2690,f2689,f2683,f2677,f2676,f2673,f2669,f2667,f2665,f2663,f2660,f2659,f2658,f2657,f2653,f2652,f2646,f2642,f2641,f2635,f2633,f2632,f2629,f2628,f2627,f2626,f2624,f2623,f2622,f2621,f2620,f2749,f2583,f2577,f2486,f2463,f2391,f2389,f2879,f3167,f3166,f3165,f3161,f3160,f3155,f3170,f3182,f3301,f3300,f3299,f3298,f3297,f3296,f3293,f3292,f3285,f3284,f3281,f3280,f3264,f3263,f3262,f3257,f3252,f3251,f3248,f3244,f3242,f3241,f3240,f3239,f3238,f3237,f3236,f3235,f3234,f3231,f3230,f3225,f3222,f3221,f3216,f3214,f3213,f3210,f3209,f3208,f3207,f3205,f3204,f3203,f3202,f3201,f3311,f3345,f3347,f3371,f3372,f3375,f3386,f3388,f3412,f3418,f3431,f3443,f3445,f3447,f3455,f3460,f3471,f3482,f3484,f3486,f3494,f3746,f3745,f3744,f3743,f3742,f3741,f3738,f3737,f3730,f3729,f3726,f3725,f3709,f3708,f3707,f3702,f3697,f3696,f3693,f3689,f3687,f3686,f3685,f3684,f3683,f3680,f3679,f3678,f3677,f3674,f3673,f3668,f3665,f3664,f3659,f3657,f3656,f3653,f3652,f3651,f3650,f3648,f3647,f3646,f3645,f3644,f3756,f3805,f3807,f3809,f3823,f3850,f3852,f3854,f3868,f3873,f3872,f3871,f3870,f3874,f3932,f3935,f3943,f3945,f3947,f3963,f3970,f3980,f3983,f4003,f4006,f4018,f4041,f4052,f4616,f6190,f6252,f6316,f6338,f6349,f6359,f6411,f6440,f6443,f6460,f7745,f7855])).
fof(f7744,plain,(
  $false | ($spl63 | $spl69)),
  inference(subsumption_resolution,[],[f2884,f3155])).
fof(f7687,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,X3) = s(bool,g(s(bool,X3)))) ) | $spl126),
  inference(cnf_transformation,[],[f7687_D])).
fof(f7687_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,X3) = s(bool,g(s(bool,X3)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f7685,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,X3) = s(bool,g(s(bool,X3)))) ) | $spl64),
  inference(subsumption_resolution,[],[f6853,f260])).
fof(f6853,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,X3) | p(s(bool,X2)) | s(bool,X3) = s(bool,g(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) ) | $spl64),
  inference(superposition,[],[f260,f3500])).
fof(f7625,plain,(
  ( ! [X27,X25] : (s(bool,X25) = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,X27) = s(bool,g(s(bool,X27)))) ) | $spl120),
  inference(cnf_transformation,[],[f7625_D])).
fof(f7625_D,plain,(
  ( ! [X27,X25] : (s(bool,X25) = s(bool,g(s(bool,X25))) | s(bool,X25) = s(bool,X27) | s(bool,X27) = s(bool,g(s(bool,X27)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f7574,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,X12) = s(bool,g(s(bool,X12)))) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6543])).
fof(f6543,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,g(s(bool,X14))) | s(bool,X12) = s(bool,X14) | s(bool,X12) = s(bool,g(s(bool,X12))) | s(bool,'T_0') = s(bool,X13)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f7583,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,g(s(bool,X20)))) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6517])).
fof(f6517,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,X21) | s(bool,X21) = s(bool,g(s(bool,X21))) | s(bool,'T_0') = s(bool,X19) | s(bool,X20) = s(bool,g(s(bool,X20))) | s(bool,'T_0') = s(bool,X19)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f7631,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) | $spl122),
  inference(cnf_transformation,[],[f7631_D])).
fof(f7631_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f7632,plain,(
  ( ! [X14,X15] : (s(bool,'F_0') = s(bool,X15) | s(bool,X15) = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl63 | $spl64)),
  inference(forward_demodulation,[],[f7584,f3155])).
fof(f7584,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,f(s(bool,'T_0'))) | s(bool,X15) = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl63 | $spl64)),
  inference(duplicate_literal_removal,[],[f6515])).
fof(f6515,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,f(s(bool,'T_0'))) | s(bool,X15) = s(bool,g(s(bool,X15))) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | ($spl63 | $spl64)),
  inference(superposition,[],[f3500,f3182])).
fof(f7589,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6510])).
fof(f6510,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,g(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl64),
  inference(superposition,[],[f3500,f253])).
fof(f7601,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,g(s(bool,X22))) | s(bool,X24) = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6499])).
fof(f6499,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,g(s(bool,X22))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,g(s(bool,X24))) | s(bool,X22) = s(bool,X24)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f7617,plain,(
  ( ! [X26,X27,X25] : (s(bool,X25) = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | $spl64),
  inference(duplicate_literal_removal,[],[f6472])).
fof(f6472,plain,(
  ( ! [X26,X27,X25] : (s(bool,X25) = s(bool,g(s(bool,X25))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X26) | s(bool,X27) = s(bool,g(s(bool,X27))) | s(bool,X25) = s(bool,X27)) ) | $spl64),
  inference(superposition,[],[f3500,f3500])).
fof(f3141,plain,(
  sP1(g(s(bool,'T_0')),'T_0') | $spl118),
  inference(cnf_transformation,[],[f3141_D])).
fof(f3141_D,plain,(
  sP1(g(s(bool,'T_0')),'T_0') <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f3112,plain,(
  p(s(bool,f(s(bool,'T_0')))) | $spl74),
  inference(cnf_transformation,[],[f3112_D])).
fof(f3112_D,plain,(
  p(s(bool,f(s(bool,'T_0')))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f3103,plain,(
  p(s(bool,f(s(bool,'T_0')))) | sP1(g(s(bool,'T_0')),'T_0') | ($spl8 | $spl58)),
  inference(superposition,[],[f1907,f2858])).
fof(f3139,plain,(
  sP1('T_0',g(s(bool,'T_0'))) | $spl116),
  inference(cnf_transformation,[],[f3139_D])).
fof(f3139_D,plain,(
  sP1('T_0',g(s(bool,'T_0'))) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f3102,plain,(
  p(s(bool,f(s(bool,'T_0')))) | sP1('T_0',g(s(bool,'T_0'))) | ($spl4 | $spl58)),
  inference(superposition,[],[f1903,f2858])).
fof(f2877,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl60),
  inference(cnf_transformation,[],[f2877_D])).
fof(f2877_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f2878,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | $spl62),
  inference(cnf_transformation,[],[f2878_D])).
fof(f2878_D,plain,(
  s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f3100,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X48) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X48)) ) | $spl58),
  inference(superposition,[],[f540,f2858])).
fof(f2881,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl64),
  inference(cnf_transformation,[],[f2881_D])).
fof(f2881_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f3106,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl70),
  inference(cnf_transformation,[],[f3106_D])).
fof(f3106_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f3099,plain,(
  ( ! [X47] : (s(bool,X47) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X47)) ) | $spl58),
  inference(superposition,[],[f540,f2858])).
fof(f3098,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f540,f2858])).
fof(f3097,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X45) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X45)) ) | $spl58),
  inference(superposition,[],[f540,f2858])).
fof(f3136,plain,(
  ( ! [X43,X44] : (sP7(g(s(bool,'T_0')),X43,X44) | ~sP6(g(s(bool,'T_0')),X43,X44)) ) | $spl114),
  inference(cnf_transformation,[],[f3136_D])).
fof(f3136_D,plain,(
  ( ! [X43,X44] : (sP7(g(s(bool,'T_0')),X43,X44) | ~sP6(g(s(bool,'T_0')),X43,X44)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f3113,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) | $spl75),
  inference(cnf_transformation,[],[f3113_D])).
fof(f3113_D,plain,(
  ~p(s(bool,f(s(bool,'T_0')))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f3096,plain,(
  ( ! [X43,X44] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP6(g(s(bool,'T_0')),X43,X44) | sP7(g(s(bool,'T_0')),X43,X44)) ) | $spl58),
  inference(superposition,[],[f405,f2858])).
fof(f3135,plain,(
  ( ! [X41,X42] : (sP9(g(s(bool,'T_0')),X41,X42) | ~sP8(g(s(bool,'T_0')),X41,X42)) ) | $spl112),
  inference(cnf_transformation,[],[f3135_D])).
fof(f3135_D,plain,(
  ( ! [X41,X42] : (sP9(g(s(bool,'T_0')),X41,X42) | ~sP8(g(s(bool,'T_0')),X41,X42)) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f3095,plain,(
  ( ! [X41,X42] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP8(g(s(bool,'T_0')),X41,X42) | sP9(g(s(bool,'T_0')),X41,X42)) ) | $spl58),
  inference(superposition,[],[f404,f2858])).
fof(f3134,plain,(
  ( ! [X39,X40] : (sP9(g(s(bool,'T_0')),X39,X40) | ~p(s(bool,X39))) ) | $spl110),
  inference(cnf_transformation,[],[f3134_D])).
fof(f3134_D,plain,(
  ( ! [X39,X40] : (sP9(g(s(bool,'T_0')),X39,X40) | ~p(s(bool,X39))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f3094,plain,(
  ( ! [X39,X40] : (~p(s(bool,f(s(bool,'T_0')))) | ~p(s(bool,X39)) | sP9(g(s(bool,'T_0')),X39,X40)) ) | $spl58),
  inference(superposition,[],[f400,f2858])).
fof(f3133,plain,(
  ( ! [X37,X38] : (sP9(g(s(bool,'T_0')),X38,X37) | p(s(bool,X37))) ) | $spl108),
  inference(cnf_transformation,[],[f3133_D])).
fof(f3133_D,plain,(
  ( ! [X37,X38] : (sP9(g(s(bool,'T_0')),X38,X37) | p(s(bool,X37))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f3093,plain,(
  ( ! [X37,X38] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X37)) | sP9(g(s(bool,'T_0')),X38,X37)) ) | $spl58),
  inference(superposition,[],[f399,f2858])).
fof(f3132,plain,(
  ( ! [X35,X36] : (sP9(X36,X35,g(s(bool,'T_0'))) | p(s(bool,X36)) | p(s(bool,X35))) ) | $spl106),
  inference(cnf_transformation,[],[f3132_D])).
fof(f3132_D,plain,(
  ( ! [X35,X36] : (sP9(X36,X35,g(s(bool,'T_0'))) | p(s(bool,X36)) | p(s(bool,X35))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f3092,plain,(
  ( ! [X35,X36] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X35)) | sP9(X36,X35,g(s(bool,'T_0'))) | p(s(bool,X36))) ) | $spl58),
  inference(superposition,[],[f398,f2858])).
fof(f3131,plain,(
  ( ! [X33,X34] : (~sP8(X34,X33,g(s(bool,'T_0'))) | ~p(s(bool,X34)) | p(s(bool,X33))) ) | $spl104),
  inference(cnf_transformation,[],[f3131_D])).
fof(f3131_D,plain,(
  ( ! [X33,X34] : (~sP8(X34,X33,g(s(bool,'T_0'))) | ~p(s(bool,X34)) | p(s(bool,X33))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f3091,plain,(
  ( ! [X33,X34] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X33)) | ~p(s(bool,X34)) | ~sP8(X34,X33,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f394,f2858])).
fof(f3130,plain,(
  ( ! [X31,X32] : (~sP8(X31,X32,g(s(bool,'T_0'))) | sP9(X31,X32,g(s(bool,'T_0'))) | p(s(bool,X32))) ) | $spl102),
  inference(cnf_transformation,[],[f3130_D])).
fof(f3130_D,plain,(
  ( ! [X31,X32] : (~sP8(X31,X32,g(s(bool,'T_0'))) | sP9(X31,X32,g(s(bool,'T_0'))) | p(s(bool,X32))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f3090,plain,(
  ( ! [X31,X32] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP8(X31,X32,g(s(bool,'T_0'))) | p(s(bool,X32)) | sP9(X31,X32,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f393,f2858])).
fof(f3129,plain,(
  ( ! [X30,X29] : (~sP8(g(s(bool,'T_0')),X29,X30) | sP9(g(s(bool,'T_0')),X29,X30) | p(s(bool,X29))) ) | $spl100),
  inference(cnf_transformation,[],[f3129_D])).
fof(f3129_D,plain,(
  ( ! [X30,X29] : (~sP8(g(s(bool,'T_0')),X29,X30) | sP9(g(s(bool,'T_0')),X29,X30) | p(s(bool,X29))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f3089,plain,(
  ( ! [X30,X29] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP8(g(s(bool,'T_0')),X29,X30) | p(s(bool,X29)) | sP9(g(s(bool,'T_0')),X29,X30)) ) | $spl58),
  inference(superposition,[],[f392,f2858])).
fof(f3128,plain,(
  ( ! [X26,X25] : (sP7(g(s(bool,'T_0')),X25,X26) | ~p(s(bool,X25))) ) | $spl98),
  inference(cnf_transformation,[],[f3128_D])).
fof(f3128_D,plain,(
  ( ! [X26,X25] : (sP7(g(s(bool,'T_0')),X25,X26) | ~p(s(bool,X25))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f3087,plain,(
  ( ! [X26,X25] : (~p(s(bool,f(s(bool,'T_0')))) | ~p(s(bool,X25)) | sP7(g(s(bool,'T_0')),X25,X26)) ) | $spl58),
  inference(superposition,[],[f383,f2858])).
fof(f3127,plain,(
  ( ! [X24,X23] : (sP7(g(s(bool,'T_0')),X24,X23) | ~p(s(bool,X23))) ) | $spl96),
  inference(cnf_transformation,[],[f3127_D])).
fof(f3127_D,plain,(
  ( ! [X24,X23] : (sP7(g(s(bool,'T_0')),X24,X23) | ~p(s(bool,X23))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f3086,plain,(
  ( ! [X24,X23] : (~p(s(bool,f(s(bool,'T_0')))) | ~p(s(bool,X23)) | sP7(g(s(bool,'T_0')),X24,X23)) ) | $spl58),
  inference(superposition,[],[f382,f2858])).
fof(f3126,plain,(
  ( ! [X21,X22] : (~sP6(g(s(bool,'T_0')),X21,X22) | p(s(bool,X21)) | p(s(bool,X22))) ) | $spl94),
  inference(cnf_transformation,[],[f3126_D])).
fof(f3126_D,plain,(
  ( ! [X21,X22] : (~sP6(g(s(bool,'T_0')),X21,X22) | p(s(bool,X21)) | p(s(bool,X22))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f3085,plain,(
  ( ! [X21,X22] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP6(g(s(bool,'T_0')),X21,X22)) ) | $spl58),
  inference(superposition,[],[f377,f2858])).
fof(f3125,plain,(
  ( ! [X19,X20] : (~sP6(g(s(bool,'T_0')),X19,X20) | sP7(g(s(bool,'T_0')),X19,X20) | p(s(bool,X19))) ) | $spl92),
  inference(cnf_transformation,[],[f3125_D])).
fof(f3125_D,plain,(
  ( ! [X19,X20] : (~sP6(g(s(bool,'T_0')),X19,X20) | sP7(g(s(bool,'T_0')),X19,X20) | p(s(bool,X19))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f3084,plain,(
  ( ! [X19,X20] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP6(g(s(bool,'T_0')),X19,X20) | p(s(bool,X19)) | sP7(g(s(bool,'T_0')),X19,X20)) ) | $spl58),
  inference(superposition,[],[f375,f2858])).
fof(f3124,plain,(
  ( ! [X17,X18] : (~sP6(g(s(bool,'T_0')),X17,X18) | p(s(bool,X18)) | sP7(g(s(bool,'T_0')),X17,X18)) ) | $spl90),
  inference(cnf_transformation,[],[f3124_D])).
fof(f3124_D,plain,(
  ( ! [X17,X18] : (~sP6(g(s(bool,'T_0')),X17,X18) | p(s(bool,X18)) | sP7(g(s(bool,'T_0')),X17,X18)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f3083,plain,(
  ( ! [X17,X18] : (~p(s(bool,f(s(bool,'T_0')))) | ~sP6(g(s(bool,'T_0')),X17,X18) | sP7(g(s(bool,'T_0')),X17,X18) | p(s(bool,X18))) ) | $spl58),
  inference(superposition,[],[f374,f2858])).
fof(f3123,plain,(
  ( ! [X15,X16] : (~sP3(X15,g(s(bool,'T_0')),X16) | ~p(s(bool,X15)) | p(s(bool,X16))) ) | $spl88),
  inference(cnf_transformation,[],[f3123_D])).
fof(f3123_D,plain,(
  ( ! [X15,X16] : (~sP3(X15,g(s(bool,'T_0')),X16) | ~p(s(bool,X15)) | p(s(bool,X16))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f3082,plain,(
  ( ! [X15,X16] : (~p(s(bool,f(s(bool,'T_0')))) | ~p(s(bool,X15)) | p(s(bool,X16)) | ~sP3(X15,g(s(bool,'T_0')),X16)) ) | $spl58),
  inference(superposition,[],[f358,f2858])).
fof(f3122,plain,(
  ( ! [X14,X13] : (~sP4(X13,g(s(bool,'T_0')),X14) | ~p(s(bool,X13)) | p(s(bool,X14))) ) | $spl86),
  inference(cnf_transformation,[],[f3122_D])).
fof(f3122_D,plain,(
  ( ! [X14,X13] : (~sP4(X13,g(s(bool,'T_0')),X14) | ~p(s(bool,X13)) | p(s(bool,X14))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f3081,plain,(
  ( ! [X14,X13] : (~p(s(bool,f(s(bool,'T_0')))) | ~p(s(bool,X13)) | p(s(bool,X14)) | ~sP4(X13,g(s(bool,'T_0')),X14)) ) | $spl58),
  inference(superposition,[],[f354,f2858])).
fof(f3121,plain,(
  ( ! [X12] : (sP1(X12,g(s(bool,'T_0'))) | p(s(bool,X12))) ) | $spl84),
  inference(cnf_transformation,[],[f3121_D])).
fof(f3121_D,plain,(
  ( ! [X12] : (sP1(X12,g(s(bool,'T_0'))) | p(s(bool,X12))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f3080,plain,(
  ( ! [X12] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X12)) | sP1(X12,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f341,f2858])).
fof(f3120,plain,(
  ( ! [X11] : (sP1(g(s(bool,'T_0')),X11) | p(s(bool,X11))) ) | $spl82),
  inference(cnf_transformation,[],[f3120_D])).
fof(f3120_D,plain,(
  ( ! [X11] : (sP1(g(s(bool,'T_0')),X11) | p(s(bool,X11))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f3079,plain,(
  ( ! [X11] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,X11)) | sP1(g(s(bool,'T_0')),X11)) ) | $spl58),
  inference(superposition,[],[f338,f2858])).
fof(f3119,plain,(
  ( ! [X10] : (sP0(g(s(bool,'T_0')),X10)) ) | $spl80),
  inference(cnf_transformation,[],[f3119_D])).
fof(f3119_D,plain,(
  ( ! [X10] : (sP0(g(s(bool,'T_0')),X10)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f3078,plain,(
  ( ! [X10] : (~p(s(bool,f(s(bool,'T_0')))) | sP0(g(s(bool,'T_0')),X10)) ) | $spl58),
  inference(superposition,[],[f323,f2858])).
fof(f3118,plain,(
  ( ! [X9] : (sP0(X9,g(s(bool,'T_0')))) ) | $spl78),
  inference(cnf_transformation,[],[f3118_D])).
fof(f3118_D,plain,(
  ( ! [X9] : (sP0(X9,g(s(bool,'T_0')))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f3077,plain,(
  ( ! [X9] : (~p(s(bool,f(s(bool,'T_0')))) | sP0(X9,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f322,f2858])).
fof(f3114,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(g(s(bool,'T_0')),X4,X3)))))) ) | $spl76),
  inference(cnf_transformation,[],[f3114_D])).
fof(f3114_D,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(g(s(bool,'T_0')),X4,X3)))))) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f3073,plain,(
  ( ! [X4,X5,X3] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X4),s(X3,sK18(g(s(bool,'T_0')),X4,X3)))))) ) | $spl58),
  inference(superposition,[],[f295,f2858])).
fof(f3111,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(g(s(bool,'T_0')),X1,X0)))))) ) | $spl72),
  inference(cnf_transformation,[],[f3111_D])).
fof(f3111_D,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(g(s(bool,'T_0')),X1,X0)))))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f3072,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,f(s(bool,'T_0')))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK17(g(s(bool,'T_0')),X1,X0)))))) ) | $spl58),
  inference(superposition,[],[f293,f2858])).
fof(f2883,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | $spl68),
  inference(cnf_transformation,[],[f2883_D])).
fof(f2883_D,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f3067,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl58),
  inference(superposition,[],[f253,f2858])).
fof(f3066,plain,(
  s(bool,'F_0') = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl58),
  inference(superposition,[],[f2858,f253])).
fof(f3065,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl58),
  inference(superposition,[],[f2858,f540])).
fof(f3064,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl58),
  inference(superposition,[],[f2858,f540])).
fof(f3063,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl58),
  inference(superposition,[],[f2858,f540])).
fof(f3062,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl58),
  inference(superposition,[],[f2858,f540])).
fof(f2884,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | $spl69),
  inference(cnf_transformation,[],[f2884_D])).
fof(f2884_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f2874,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | $spl59),
  inference(superposition,[],[f2859,f253])).
fof(f2882,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl66),
  inference(cnf_transformation,[],[f2882_D])).
fof(f2882_D,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f2873,plain,(
  ( ! [X3] : (s(bool,X3) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X3) | s(bool,'T_0') = s(bool,g(s(bool,'T_0')))) ) | $spl59),
  inference(superposition,[],[f2859,f540])).
fof(f2872,plain,(
  ( ! [X2] : (s(bool,X2) != s(bool,f(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl59),
  inference(superposition,[],[f2859,f540])).
fof(f2879,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | $spl63),
  inference(cnf_transformation,[],[f2879_D])).
fof(f2879_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f2871,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X1) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl59),
  inference(superposition,[],[f2859,f540])).
fof(f2870,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,f(s(bool,'T_0'))) | s(bool,X0) = s(bool,g(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) ) | $spl59),
  inference(superposition,[],[f2859,f540])).
fof(f2859,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | $spl59),
  inference(cnf_transformation,[],[f2859_D])).
fof(f2859_D,plain,(
  s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) <=> ~$spl59),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl59])])).
fof(f2824,plain,(
  ( ! [X123,X122] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123)) ) | $spl46),
  inference(duplicate_literal_removal,[],[f2823])).
fof(f2823,plain,(
  ( ! [X123,X122] : (s(bool,f(s(bool,'T_0'))) != s(bool,g(s(bool,'T_0'))) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123) | s(fun(bool,bool),X122) = s(fun(bool,bool),X123)) ) | $spl46),
  inference(superposition,[],[f346,f2608])).
fof(f2782,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f2781,f415])).
fof(f2781,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f2755,f501])).
fof(f501,plain,(
  s(bool,'F_0') = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | $spl1),
  inference(unit_resulting_resolution,[],[f412,f265])).
fof(f2755,plain,(
  p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | $spl2),
  inference(superposition,[],[f305,f413])).
fof(f2612,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl50),
  inference(cnf_transformation,[],[f2612_D])).
fof(f2612_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f2608,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK24(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) | $spl46),
  inference(cnf_transformation,[],[f2608_D])).
fof(f2608_D,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK24(X0,X1,bool,bool)) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1)) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f2615,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl55),
  inference(cnf_transformation,[],[f2615_D])).
fof(f2615_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl55),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl55])])).
fof(f2606,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X12) = s(fun(bool,bool),X13) | s(bool,'T_0') = s(bool,sK24(X12,X13,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | $spl1),
  inference(superposition,[],[f2584,f253])).
fof(f2584,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'F_0'))) != s(X18,g(s(bool,'F_0'))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK24(X16,X17,X18,bool))) ) | $spl1),
  inference(forward_demodulation,[],[f2576,f501])).
fof(f2576,plain,(
  ( ! [X17,X18,X16] : (s(X18,f(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))) != s(X18,g(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))) | s(fun(bool,X18),X16) = s(fun(bool,X18),X17) | s(bool,'T_0') = s(bool,sK24(X16,X17,X18,bool))) ) | $spl1),
  inference(superposition,[],[f346,f1056])).
fof(f1056,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(subsumption_resolution,[],[f1054,f415])).
fof(f1054,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(superposition,[],[f591,f501])).
fof(f2613,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl52),
  inference(cnf_transformation,[],[f2613_D])).
fof(f2613_D,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f2605,plain,(
  ( ! [X10,X11,X9] : (s(bool,X9) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X10) = s(fun(bool,bool),X11) | s(bool,'T_0') = s(bool,sK24(X10,X11,bool,bool)) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) ) | $spl1),
  inference(superposition,[],[f2584,f540])).
fof(f2604,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X7) = s(fun(bool,bool),X8) | s(bool,'T_0') = s(bool,sK24(X7,X8,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(superposition,[],[f2584,f540])).
fof(f2607,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl44),
  inference(cnf_transformation,[],[f2607_D])).
fof(f2607_D,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f2610,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl49),
  inference(cnf_transformation,[],[f2610_D])).
fof(f2610_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl49),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl49])])).
fof(f2603,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X3) = s(fun(bool,bool),X4) | s(bool,'T_0') = s(bool,sK24(X3,X4,bool,bool)) | s(bool,X5) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(superposition,[],[f2584,f540])).
fof(f2602,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK24(X0,X1,bool,bool)) | s(bool,X2) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) ) | $spl1),
  inference(superposition,[],[f2584,f540])).
fof(f2447,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1)))))) ) | $spl42),
  inference(cnf_transformation,[],[f2447_D])).
fof(f2447_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1)))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f2449,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1)))))) )),
  inference(condensation,[],[f2448])).
fof(f2448,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK18('T_0',X35,X34))))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f2440,f591])).
fof(f2440,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK18('T_0',X35,X34))))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f295,f540])).
fof(f2446,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK18('T_0',X2,X1)))))) )),
  inference(condensation,[],[f2445])).
fof(f2445,plain,(
  ( ! [X30,X28,X31,X29,X32] : (p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK18('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f2439,f591])).
fof(f2439,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK18('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f295,f540])).
fof(f2420,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1)))))) ) | $spl40),
  inference(cnf_transformation,[],[f2420_D])).
fof(f2420_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1)))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f2422,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1)))))) )),
  inference(condensation,[],[f2421])).
fof(f2421,plain,(
  ( ! [X37,X35,X33,X36,X34] : (p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK17('T_0',X35,X34))))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(subsumption_resolution,[],[f2413,f591])).
fof(f2413,plain,(
  ( ! [X37,X35,X33,X36,X34] : (~p(s(bool,X33)) | p(s(bool,happ(s(fun(X34,bool),X35),s(X34,X36)))) | ~p(s(bool,happ(s(fun(X34,bool),X35),s(X34,sK17('T_0',X35,X34))))) | s(bool,X33) = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f293,f540])).
fof(f2419,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK17('T_0',X2,X1)))))) )),
  inference(condensation,[],[f2418])).
fof(f2418,plain,(
  ( ! [X30,X28,X31,X29,X32] : (p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f2412,f591])).
fof(f2412,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,X28)) | p(s(bool,happ(s(fun(X29,bool),X30),s(X29,X31)))) | ~p(s(bool,happ(s(fun(X29,bool),X30),s(X29,sK17('T_0',X30,X29))))) | s(bool,X28) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f293,f540])).
fof(f2066,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f1904,f2052,f2057,f2061,f2065])).
fof(f2065,plain,(
  ( ! [X0,X8,X7] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | $spl6),
  inference(subsumption_resolution,[],[f2064,f246])).
fof(f2064,plain,(
  ( ! [X0,X8,X7] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8)) ) | $spl6),
  inference(forward_demodulation,[],[f2063,f1904])).
fof(f2063,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2050,f246])).
fof(f2050,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X7) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8) | ~p(s(bool,'const.bigStep.evaluate_match_7'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.semanticPrimitives.v',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5),s('type.semanticPrimitives.v',X6),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X8))))) ) | $spl6),
  inference(backward_demodulation,[],[f1904,f312])).
fof(f2061,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | $spl6),
  inference(subsumption_resolution,[],[f2060,f246])).
fof(f2060,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6)) ) | $spl6),
  inference(forward_demodulation,[],[f2059,f1904])).
fof(f2059,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2048,f246])).
fof(f2048,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6) | ~p(s(bool,'const.bigStep.evaluate_list_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.list.list'('type.ast.exp'),X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X6))))) ) | $spl6),
  inference(backward_demodulation,[],[f1904,f311])).
fof(f2057,plain,(
  ( ! [X6,X0,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | $spl6),
  inference(subsumption_resolution,[],[f2056,f246])).
fof(f2056,plain,(
  ( ! [X6,X0,X5] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6)) ) | $spl6),
  inference(forward_demodulation,[],[f2055,f1904])).
fof(f2055,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6))))) ) | $spl6),
  inference(subsumption_resolution,[],[f2030,f246])).
fof(f2030,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X5) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.semanticPrimitives.state'(X0),X3),s('type.ast.exp',X4),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X6))))) ) | $spl6),
  inference(backward_demodulation,[],[f1904,f310])).
fof(f2052,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f2021,f1904])).
fof(f2021,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f1904,f264])).
fof(f2062,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f1904,f2052,f2057,f2061])).
fof(f2058,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f1904,f2052,f2057])).
fof(f2054,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f2023,f246])).
fof(f2023,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f1904,f415])).
fof(f2053,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002,f2003,f2005,f2007,f2009,f2011,f2013,f2015,f2017,f1904,f2052])).
fof(f1952,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~sP6('T_0',X1,X2)) ) | $spl38),
  inference(cnf_transformation,[],[f1952_D])).
fof(f1952_D,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~sP6('T_0',X1,X2)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f2017,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f2016])).
fof(f2016,plain,(
  ( ! [X191,X189,X190,X188] : (~sP6('T_0',X189,X190) | sP7('T_0',X189,X190) | s(bool,X188) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) )),
  inference(subsumption_resolution,[],[f1606,f591])).
fof(f1606,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,X188)) | ~sP6('T_0',X189,X190) | sP7('T_0',X189,X190) | s(bool,X188) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f405,f540])).
fof(f1949,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) | $spl36),
  inference(cnf_transformation,[],[f1949_D])).
fof(f1949_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~sP8('T_0',X1,X2)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f2015,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2014])).
fof(f2014,plain,(
  ( ! [X187,X185,X186,X184] : (~sP8('T_0',X185,X186) | sP9('T_0',X185,X186) | s(bool,X184) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(subsumption_resolution,[],[f1605,f591])).
fof(f1605,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,X184)) | ~sP8('T_0',X185,X186) | sP9('T_0',X185,X186) | s(bool,X184) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(superposition,[],[f404,f540])).
fof(f1946,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f1946_D])).
fof(f1946_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f2013,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f2012])).
fof(f2012,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,X181)) | sP9('T_0',X181,X182) | s(bool,X180) = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) )),
  inference(subsumption_resolution,[],[f1604,f591])).
fof(f1604,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,X180)) | ~p(s(bool,X181)) | sP9('T_0',X181,X182) | s(bool,X180) = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f400,f540])).
fof(f1943,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f1943_D])).
fof(f1943_D,plain,(
  ( ! [X2,X1] : (sP9('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f2011,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f2010])).
fof(f2010,plain,(
  ( ! [X177,X178,X176,X179] : (p(s(bool,X177)) | sP9('T_0',X178,X177) | s(bool,X176) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(subsumption_resolution,[],[f1603,f591])).
fof(f1603,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,X176)) | p(s(bool,X177)) | sP9('T_0',X178,X177) | s(bool,X176) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f399,f540])).
fof(f1940,plain,(
  ( ! [X2,X1] : (sP9(X2,X1,'T_0') | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f1940_D])).
fof(f1940_D,plain,(
  ( ! [X2,X1] : (sP9(X2,X1,'T_0') | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f2009,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9(X2,X1,'T_0') | p(s(bool,X2))) )),
  inference(condensation,[],[f2008])).
fof(f2008,plain,(
  ( ! [X175,X173,X174,X172] : (p(s(bool,X173)) | sP9(X174,X173,'T_0') | p(s(bool,X174)) | s(bool,X172) = s(bool,X175) | s(bool,'T_0') = s(bool,X175)) )),
  inference(subsumption_resolution,[],[f1602,f591])).
fof(f1602,plain,(
  ( ! [X175,X173,X174,X172] : (~p(s(bool,X172)) | p(s(bool,X173)) | sP9(X174,X173,'T_0') | p(s(bool,X174)) | s(bool,X172) = s(bool,X175) | s(bool,'T_0') = s(bool,X175)) )),
  inference(superposition,[],[f398,f540])).
fof(f1937,plain,(
  ( ! [X2,X1] : (~sP8(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f1937_D])).
fof(f1937_D,plain,(
  ( ! [X2,X1] : (~sP8(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f2007,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP8(X2,X1,'T_0')) )),
  inference(condensation,[],[f2006])).
fof(f2006,plain,(
  ( ! [X171,X169,X170,X168] : (p(s(bool,X169)) | ~p(s(bool,X170)) | ~sP8(X170,X169,'T_0') | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(subsumption_resolution,[],[f1601,f591])).
fof(f1601,plain,(
  ( ! [X171,X169,X170,X168] : (~p(s(bool,X168)) | p(s(bool,X169)) | ~p(s(bool,X170)) | ~sP8(X170,X169,'T_0') | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f394,f540])).
fof(f1934,plain,(
  ( ! [X2,X1] : (~sP8(X1,X2,'T_0') | sP9(X1,X2,'T_0') | p(s(bool,X2))) ) | $spl26),
  inference(cnf_transformation,[],[f1934_D])).
fof(f1934_D,plain,(
  ( ! [X2,X1] : (~sP8(X1,X2,'T_0') | sP9(X1,X2,'T_0') | p(s(bool,X2))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2005,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8(X1,X2,'T_0') | p(s(bool,X2)) | sP9(X1,X2,'T_0')) )),
  inference(condensation,[],[f2004])).
fof(f2004,plain,(
  ( ! [X167,X165,X166,X164] : (~sP8(X165,X166,'T_0') | p(s(bool,X166)) | sP9(X165,X166,'T_0') | s(bool,X164) = s(bool,X167) | s(bool,'T_0') = s(bool,X167)) )),
  inference(subsumption_resolution,[],[f1600,f591])).
fof(f1600,plain,(
  ( ! [X167,X165,X166,X164] : (~p(s(bool,X164)) | ~sP8(X165,X166,'T_0') | p(s(bool,X166)) | sP9(X165,X166,'T_0') | s(bool,X164) = s(bool,X167) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f393,f540])).
fof(f2003,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993,f1994,f1996,f1998,f2000,f2002])).
fof(f1928,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl22),
  inference(cnf_transformation,[],[f1928_D])).
fof(f1928_D,plain,(
  ( ! [X2,X1] : (sP7('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2000,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f1999])).
fof(f1999,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,X153)) | sP7('T_0',X153,X154) | s(bool,X152) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(subsumption_resolution,[],[f1597,f591])).
fof(f1597,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,X152)) | ~p(s(bool,X153)) | sP7('T_0',X153,X154) | s(bool,X152) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f383,f540])).
fof(f1925,plain,(
  ( ! [X2,X1] : (sP7('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl20),
  inference(cnf_transformation,[],[f1925_D])).
fof(f1925_D,plain,(
  ( ! [X2,X1] : (sP7('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f1998,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X2,X1)) )),
  inference(condensation,[],[f1997])).
fof(f1997,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,X149)) | sP7('T_0',X150,X149) | s(bool,X148) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f1596,f591])).
fof(f1596,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,X148)) | ~p(s(bool,X149)) | sP7('T_0',X150,X149) | s(bool,X148) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f382,f540])).
fof(f1922,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl18),
  inference(cnf_transformation,[],[f1922_D])).
fof(f1922_D,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f1996,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP6('T_0',X1,X2)) )),
  inference(condensation,[],[f1995])).
fof(f1995,plain,(
  ( ! [X146,X144,X147,X145] : (p(s(bool,X145)) | p(s(bool,X146)) | ~sP6('T_0',X145,X146) | s(bool,X144) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(subsumption_resolution,[],[f1595,f591])).
fof(f1595,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,X144)) | p(s(bool,X145)) | p(s(bool,X146)) | ~sP6('T_0',X145,X146) | s(bool,X144) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f377,f540])).
fof(f1994,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) )),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990,f1991,f1993])).
fof(f1991,plain,(
  ( ! [X2,X0,X1] : (~sP6('T_0',X1,X2) | sP7('T_0',X1,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(global_subsumption,[],[f245,f244,f246,f415,f253,f261,f260,f265,f264,f292,f290,f295,f293,f300,f299,f298,f297,f303,f301,f305,f306,f307,f308,f309,f310,f311,f312,f316,f313,f323,f322,f416,f341,f338,f337,f336,f346,f353,f352,f351,f350,f349,f348,f347,f357,f356,f355,f354,f361,f360,f359,f358,f365,f364,f363,f362,f369,f368,f367,f366,f376,f375,f374,f405,f372,f371,f370,f380,f379,f378,f377,f384,f383,f382,f381,f393,f392,f391,f404,f389,f388,f387,f397,f396,f395,f394,f401,f400,f399,f398,f417,f418,f419,f420,f421,f422,f423,f424,f425,f426,f427,f428,f429,f430,f431,f432,f433,f434,f441,f442,f444,f450,f455,f456,f459,f462,f465,f472,f473,f475,f482,f540,f591,f603,f602,f619,f617,f649,f669,f677,f681,f686,f728,f739,f746,f850,f870,f879,f937,f981,f1045,f1209,f1313,f1396,f1902,f1906,f1909,f1912,f1915,f1918,f1921,f1924,f1927,f1930,f1933,f1936,f1939,f1942,f1945,f1948,f1951,f1953,f1954,f1955,f1956,f1957,f1958,f1959,f1960,f1961,f1962,f1963,f1964,f1965,f1966,f1967,f1968,f1969,f1970,f1971,f1972,f1973,f1974,f1975,f1540,f1541,f1982,f1984,f1986,f1988,f1990])).
fof(f1913,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl12),
  inference(cnf_transformation,[],[f1913_D])).
fof(f1913_D,plain,(
  ( ! [X2,X1] : (~sP3(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1988,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f1987])).
fof(f1987,plain,(
  ( ! [X134,X132,X135,X133] : (~p(s(bool,X133)) | p(s(bool,X134)) | ~sP3(X133,'T_0',X134) | s(bool,X132) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(subsumption_resolution,[],[f1592,f591])).
fof(f1592,plain,(
  ( ! [X134,X132,X135,X133] : (~p(s(bool,X132)) | ~p(s(bool,X133)) | p(s(bool,X134)) | ~sP3(X133,'T_0',X134) | s(bool,X132) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f358,f540])).
fof(f1910,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl10),
  inference(cnf_transformation,[],[f1910_D])).
fof(f1910_D,plain,(
  ( ! [X2,X1] : (~sP4(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1986,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f1985])).
fof(f1985,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,X129)) | p(s(bool,X130)) | ~sP4(X129,'T_0',X130) | s(bool,X128) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(subsumption_resolution,[],[f1591,f591])).
fof(f1591,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,X128)) | ~p(s(bool,X129)) | p(s(bool,X130)) | ~sP4(X129,'T_0',X130) | s(bool,X128) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f354,f540])).
fof(f1907,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl8),
  inference(cnf_transformation,[],[f1907_D])).
fof(f1907_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1984,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f1983])).
fof(f1983,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X126)) | sP1(X126,'T_0') | s(bool,X125) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(subsumption_resolution,[],[f1590,f591])).
fof(f1590,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,X125)) | p(s(bool,X126)) | sP1(X126,'T_0') | s(bool,X125) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f341,f540])).
fof(f1903,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl4),
  inference(cnf_transformation,[],[f1903_D])).
fof(f1903_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1982,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f1981])).
fof(f1981,plain,(
  ( ! [X123,X124,X122] : (p(s(bool,X123)) | sP1('T_0',X123) | s(bool,X122) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(subsumption_resolution,[],[f1589,f591])).
fof(f1589,plain,(
  ( ! [X123,X124,X122] : (~p(s(bool,X122)) | p(s(bool,X123)) | sP1('T_0',X123) | s(bool,X122) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f338,f540])).
fof(f1951,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f1950])).
fof(f1950,plain,(
  ( ! [X191,X189,X190,X188] : (~sP6('T_0',X189,X190) | sP7('T_0',X189,X190) | s(bool,X188) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) )),
  inference(subsumption_resolution,[],[f1459,f591])).
fof(f1459,plain,(
  ( ! [X191,X189,X190,X188] : (~p(s(bool,X188)) | ~sP6('T_0',X189,X190) | sP7('T_0',X189,X190) | s(bool,X188) = s(bool,X191) | s(bool,'T_0') = s(bool,X191)) )),
  inference(superposition,[],[f405,f540])).
fof(f1948,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f1947])).
fof(f1947,plain,(
  ( ! [X187,X185,X186,X184] : (~sP8('T_0',X185,X186) | sP9('T_0',X185,X186) | s(bool,X184) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(subsumption_resolution,[],[f1458,f591])).
fof(f1458,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,X184)) | ~sP8('T_0',X185,X186) | sP9('T_0',X185,X186) | s(bool,X184) = s(bool,X187) | s(bool,'T_0') = s(bool,X187)) )),
  inference(superposition,[],[f404,f540])).
fof(f1945,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f1944])).
fof(f1944,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,X181)) | sP9('T_0',X181,X182) | s(bool,X180) = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) )),
  inference(subsumption_resolution,[],[f1457,f591])).
fof(f1457,plain,(
  ( ! [X182,X180,X183,X181] : (~p(s(bool,X180)) | ~p(s(bool,X181)) | sP9('T_0',X181,X182) | s(bool,X180) = s(bool,X183) | s(bool,'T_0') = s(bool,X183)) )),
  inference(superposition,[],[f400,f540])).
fof(f1942,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9('T_0',X2,X1)) )),
  inference(condensation,[],[f1941])).
fof(f1941,plain,(
  ( ! [X177,X178,X176,X179] : (p(s(bool,X177)) | sP9('T_0',X178,X177) | s(bool,X176) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(subsumption_resolution,[],[f1456,f591])).
fof(f1456,plain,(
  ( ! [X177,X178,X176,X179] : (~p(s(bool,X176)) | p(s(bool,X177)) | sP9('T_0',X178,X177) | s(bool,X176) = s(bool,X179) | s(bool,'T_0') = s(bool,X179)) )),
  inference(superposition,[],[f399,f540])).
fof(f1939,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP9(X2,X1,'T_0') | p(s(bool,X2))) )),
  inference(condensation,[],[f1938])).
fof(f1938,plain,(
  ( ! [X175,X173,X174,X172] : (p(s(bool,X173)) | sP9(X174,X173,'T_0') | p(s(bool,X174)) | s(bool,X172) = s(bool,X175) | s(bool,'T_0') = s(bool,X175)) )),
  inference(subsumption_resolution,[],[f1455,f591])).
fof(f1455,plain,(
  ( ! [X175,X173,X174,X172] : (~p(s(bool,X172)) | p(s(bool,X173)) | sP9(X174,X173,'T_0') | p(s(bool,X174)) | s(bool,X172) = s(bool,X175) | s(bool,'T_0') = s(bool,X175)) )),
  inference(superposition,[],[f398,f540])).
fof(f1936,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP8(X2,X1,'T_0')) )),
  inference(condensation,[],[f1935])).
fof(f1935,plain,(
  ( ! [X171,X169,X170,X168] : (p(s(bool,X169)) | ~p(s(bool,X170)) | ~sP8(X170,X169,'T_0') | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(subsumption_resolution,[],[f1454,f591])).
fof(f1454,plain,(
  ( ! [X171,X169,X170,X168] : (~p(s(bool,X168)) | p(s(bool,X169)) | ~p(s(bool,X170)) | ~sP8(X170,X169,'T_0') | s(bool,X168) = s(bool,X171) | s(bool,'T_0') = s(bool,X171)) )),
  inference(superposition,[],[f394,f540])).
fof(f1933,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8(X1,X2,'T_0') | p(s(bool,X2)) | sP9(X1,X2,'T_0')) )),
  inference(condensation,[],[f1932])).
fof(f1932,plain,(
  ( ! [X167,X165,X166,X164] : (~sP8(X165,X166,'T_0') | p(s(bool,X166)) | sP9(X165,X166,'T_0') | s(bool,X164) = s(bool,X167) | s(bool,'T_0') = s(bool,X167)) )),
  inference(subsumption_resolution,[],[f1453,f591])).
fof(f1453,plain,(
  ( ! [X167,X165,X166,X164] : (~p(s(bool,X164)) | ~sP8(X165,X166,'T_0') | p(s(bool,X166)) | sP9(X165,X166,'T_0') | s(bool,X164) = s(bool,X167) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f393,f540])).
fof(f1931,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | sP9('T_0',X1,X2) | p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f1931_D])).
fof(f1931_D,plain,(
  ( ! [X2,X1] : (~sP8('T_0',X1,X2) | sP9('T_0',X1,X2) | p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f1930,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP8('T_0',X1,X2) | p(s(bool,X1)) | sP9('T_0',X1,X2)) )),
  inference(condensation,[],[f1929])).
fof(f1929,plain,(
  ( ! [X163,X161,X162,X160] : (~sP8('T_0',X161,X162) | p(s(bool,X161)) | sP9('T_0',X161,X162) | s(bool,X160) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) )),
  inference(subsumption_resolution,[],[f1452,f591])).
fof(f1452,plain,(
  ( ! [X163,X161,X162,X160] : (~p(s(bool,X160)) | ~sP8('T_0',X161,X162) | p(s(bool,X161)) | sP9('T_0',X161,X162) | s(bool,X160) = s(bool,X163) | s(bool,'T_0') = s(bool,X163)) )),
  inference(superposition,[],[f392,f540])).
fof(f1927,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f1926])).
fof(f1926,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,X153)) | sP7('T_0',X153,X154) | s(bool,X152) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(subsumption_resolution,[],[f1450,f591])).
fof(f1450,plain,(
  ( ! [X154,X152,X155,X153] : (~p(s(bool,X152)) | ~p(s(bool,X153)) | sP7('T_0',X153,X154) | s(bool,X152) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f383,f540])).
fof(f1924,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP7('T_0',X2,X1)) )),
  inference(condensation,[],[f1923])).
fof(f1923,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,X149)) | sP7('T_0',X150,X149) | s(bool,X148) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(subsumption_resolution,[],[f1449,f591])).
fof(f1449,plain,(
  ( ! [X151,X149,X150,X148] : (~p(s(bool,X148)) | ~p(s(bool,X149)) | sP7('T_0',X150,X149) | s(bool,X148) = s(bool,X151) | s(bool,'T_0') = s(bool,X151)) )),
  inference(superposition,[],[f382,f540])).
fof(f1921,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP6('T_0',X1,X2)) )),
  inference(condensation,[],[f1920])).
fof(f1920,plain,(
  ( ! [X146,X144,X147,X145] : (p(s(bool,X145)) | p(s(bool,X146)) | ~sP6('T_0',X145,X146) | s(bool,X144) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(subsumption_resolution,[],[f1448,f591])).
fof(f1448,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,X144)) | p(s(bool,X145)) | p(s(bool,X146)) | ~sP6('T_0',X145,X146) | s(bool,X144) = s(bool,X147) | s(bool,'T_0') = s(bool,X147)) )),
  inference(superposition,[],[f377,f540])).
fof(f1919,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | sP7('T_0',X1,X2) | p(s(bool,X1))) ) | $spl16),
  inference(cnf_transformation,[],[f1919_D])).
fof(f1919_D,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | sP7('T_0',X1,X2) | p(s(bool,X1))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f1918,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | p(s(bool,X1)) | sP7('T_0',X1,X2)) )),
  inference(condensation,[],[f1917])).
fof(f1917,plain,(
  ( ! [X142,X140,X143,X141] : (~sP6('T_0',X141,X142) | p(s(bool,X141)) | sP7('T_0',X141,X142) | s(bool,X140) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(subsumption_resolution,[],[f1447,f591])).
fof(f1447,plain,(
  ( ! [X142,X140,X143,X141] : (~p(s(bool,X140)) | ~sP6('T_0',X141,X142) | p(s(bool,X141)) | sP7('T_0',X141,X142) | s(bool,X140) = s(bool,X143) | s(bool,'T_0') = s(bool,X143)) )),
  inference(superposition,[],[f375,f540])).
fof(f1916,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | p(s(bool,X2)) | sP7('T_0',X1,X2)) ) | $spl14),
  inference(cnf_transformation,[],[f1916_D])).
fof(f1916_D,plain,(
  ( ! [X2,X1] : (~sP6('T_0',X1,X2) | p(s(bool,X2)) | sP7('T_0',X1,X2)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1915,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP6('T_0',X1,X2) | sP7('T_0',X1,X2) | p(s(bool,X2))) )),
  inference(condensation,[],[f1914])).
fof(f1914,plain,(
  ( ! [X138,X136,X139,X137] : (~sP6('T_0',X137,X138) | sP7('T_0',X137,X138) | p(s(bool,X138)) | s(bool,X136) = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) )),
  inference(subsumption_resolution,[],[f1446,f591])).
fof(f1446,plain,(
  ( ! [X138,X136,X139,X137] : (~p(s(bool,X136)) | ~sP6('T_0',X137,X138) | sP7('T_0',X137,X138) | p(s(bool,X138)) | s(bool,X136) = s(bool,X139) | s(bool,'T_0') = s(bool,X139)) )),
  inference(superposition,[],[f374,f540])).
fof(f1912,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP3(X1,'T_0',X2)) )),
  inference(condensation,[],[f1911])).
fof(f1911,plain,(
  ( ! [X134,X132,X135,X133] : (~p(s(bool,X133)) | p(s(bool,X134)) | ~sP3(X133,'T_0',X134) | s(bool,X132) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(subsumption_resolution,[],[f1445,f591])).
fof(f1445,plain,(
  ( ! [X134,X132,X135,X133] : (~p(s(bool,X132)) | ~p(s(bool,X133)) | p(s(bool,X134)) | ~sP3(X133,'T_0',X134) | s(bool,X132) = s(bool,X135) | s(bool,'T_0') = s(bool,X135)) )),
  inference(superposition,[],[f358,f540])).
fof(f1909,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP4(X1,'T_0',X2)) )),
  inference(condensation,[],[f1908])).
fof(f1908,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,X129)) | p(s(bool,X130)) | ~sP4(X129,'T_0',X130) | s(bool,X128) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(subsumption_resolution,[],[f1444,f591])).
fof(f1444,plain,(
  ( ! [X130,X128,X131,X129] : (~p(s(bool,X128)) | ~p(s(bool,X129)) | p(s(bool,X130)) | ~sP4(X129,'T_0',X130) | s(bool,X128) = s(bool,X131) | s(bool,'T_0') = s(bool,X131)) )),
  inference(superposition,[],[f354,f540])).
fof(f1906,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f1905])).
fof(f1905,plain,(
  ( ! [X127,X125,X126] : (p(s(bool,X126)) | sP1(X126,'T_0') | s(bool,X125) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(subsumption_resolution,[],[f1443,f591])).
fof(f1443,plain,(
  ( ! [X127,X125,X126] : (~p(s(bool,X125)) | p(s(bool,X126)) | sP1(X126,'T_0') | s(bool,X125) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f341,f540])).
fof(f1902,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f1901])).
fof(f1901,plain,(
  ( ! [X123,X124,X122] : (p(s(bool,X123)) | sP1('T_0',X123) | s(bool,X122) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(subsumption_resolution,[],[f1442,f591])).
fof(f1442,plain,(
  ( ! [X123,X124,X122] : (~p(s(bool,X122)) | p(s(bool,X123)) | sP1('T_0',X123) | s(bool,X122) = s(bool,X124) | s(bool,'T_0') = s(bool,X124)) )),
  inference(superposition,[],[f338,f540])).
fof(f411,plain,(
  p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | $spl0),
  inference(cnf_transformation,[],[f411_D])).
fof(f411_D,plain,(
  p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f413,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | $spl2),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f244,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) = s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14)))) & (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) != s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12,sK13,sK14])],[f168])).
fof(f168,plain,(
  ? [X0,X1,X2,X3,X4] : ((p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X4)))) & (~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3)))) | s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3) != s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X4)))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3)))) <~> s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X4))))),
  inference(ennf_transformation,[],[f49])).
fof(f49,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3)))) <=> s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X4))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.semanticPrimitives.state'(X0),X4),s('type.ast.exp',X2),s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3)))) <=> s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X3) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s('type.semanticPrimitives.state'(X0),X4))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X6),X10),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X9)))) <=> s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X9) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X10))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : (p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.semanticPrimitives.state'(X6),X10),s('type.ast.exp',X8),s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X9)))) <=> s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),X9) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X7),s('type.ast.exp',X8),s('type.semanticPrimitives.state'(X6),X10))))),
  file('thm.interp.evaluate_run_eval','thm.interp.evaluate_run_eval')).
fof(f412,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) | $spl1),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f414,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) != s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | $spl3),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) != s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f245,plain,(
  s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13) != s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),'const.interp.run_eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.ast.exp',sK12),s('type.semanticPrimitives.state'(sK10),sK14))) | ~p(s(bool,'const.bigStep.evaluate_5'(s(bool,'T_0'),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK11),s('type.semanticPrimitives.state'(sK10),sK14),s('type.ast.exp',sK12),s('type.pair.prod'('type.semanticPrimitives.state'(sK10),'type.semanticPrimitives.result'('type.semanticPrimitives.v','type.semanticPrimitives.v')),sK13))))),
  inference(cnf_transformation,[],[f169])).
% SZS output end Proof for thm.interp
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1067
% Passive clauses: 3542
% Generated clauses: 30010
% Final active clauses: 530
% Final passive clauses: 1243
% Input formulas: 46
% Initial clauses: 160
% 
% Duplicate literals: 2180
% Trivial inequalities: 85
% Fw subsumption resolutions: 1329
% Fw demodulations: 2505
% Bw demodulations: 386
% Condensations: 1481
% Global subsumptions: 282
% 
% Simple tautologies: 114
% Equational tautologies: 144
% Forward subsumptions: 17630
% Bw demodulations to eq. taut.: 2
% 
% Unit resulting resolution: 7508
% Factoring: 1
% Forward superposition: 7743
% Backward superposition: 5197
% Self superposition: 127
% Equality factoring: 74
% Equality resolution: 4
% 
% Split clauses: 128
% Split components: 261
% SAT solver clauses: 4680
% SAT solver unit clauses: 477
% SAT solver binary clauses: 945
% 
% Sat splits: 128
% Sat splitting refutations: 598
% 
% Memory used [KB]: 18549
% Time elapsed: 1.661 s
% ------------------------------
% ------------------------------
% Success in time 2.99 s
