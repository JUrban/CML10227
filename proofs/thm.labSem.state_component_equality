Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.labSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.labSem
% SZS output start Proof for thm.labSem
fof(f12778,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11740,f32,f75,f36,f82,f80,f78,f76,f74,f72,f70,f68,f66,f64,f62,f60,f58,f56,f3888,f3886,f3884,f3882,f3880,f3878,f3876,f3874,f3872,f3870,f3868,f3928,f3910,f11939,f4539,f12777,f23,f57,f24,f59,f25,f61,f26,f63,f28,f67,f29,f69,f30,f71,f31,f73,f33,f77,f34,f79,f35,f81,f111,f117,f27,f65,f55,f952,f901,f911,f909,f88,f91,f100,f1267,f1307,f2908,f3920,f2813,f2830,f1428,f115,f1249,f1335,f9339,f126,f132,f130,f3574,f4488,f89,f3968,f11676,f10074,f3935])).
fof(f3935,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl186),
  inference(cnf_transformation,[],[f3935_D])).
fof(f3935_D,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f10074,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl10 | $spl34)),
  inference(backward_demodulation,[],[f117,f65])).
fof(f11676,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl38 | $spl186 | $spl216)),
  inference(subsumption_resolution,[],[f11675,f69])).
fof(f11675,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl38 | $spl186 | $spl216)),
  inference(subsumption_resolution,[],[f11674,f56])).
fof(f11674,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl38 | $spl186 | $spl216)),
  inference(subsumption_resolution,[],[f11673,f132])).
fof(f11673,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl186 | $spl216)),
  inference(subsumption_resolution,[],[f11672,f117])).
fof(f11672,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(trivial_inequality_removal,[],[f11671])).
fof(f11671,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(equality_resolution,[],[f10640])).
fof(f10640,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(forward_demodulation,[],[f10639,f57])).
fof(f10639,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(forward_demodulation,[],[f10638,f59])).
fof(f10638,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(forward_demodulation,[],[f10637,f61])).
fof(f10637,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(forward_demodulation,[],[f10636,f63])).
fof(f10636,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186 | $spl216)),
  inference(forward_demodulation,[],[f10635,f3935])).
fof(f10635,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f10634,f67])).
fof(f10634,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f10633,f73])).
fof(f10633,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f10632,f3968])).
fof(f10632,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f10631,f77])).
fof(f10631,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f10630,f79])).
fof(f10630,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl26)),
  inference(forward_demodulation,[],[f10627,f81])).
fof(f10627,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | $spl16),
  inference(superposition,[],[f54,f71])).
fof(f54,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & ((s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))) | s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3)))),
  inference(nnf_transformation,[],[f14])).
fof(f14,plain,(
  ! [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f13])).
fof(f13,plain,(
  ! [X0,X1] : ! [X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6,X7] : ! [X9,X8] : (s('type.labSem.state'(X6,X7),X8) = s('type.labSem.state'(X6,X7),X9) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X9)))))),
  file('thm.labSem.state_component_equality','thm.labSem.labSem_3|49|4_prove_ltb')).
fof(f3968,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl216),
  inference(cnf_transformation,[],[f3968_D])).
fof(f3968_D,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f89,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl28),
  inference(cnf_transformation,[],[f89_D])).
fof(f89_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f4488,plain,(
  ( ! [X30] : (s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3)))) ) | ($spl37 | $spl66)),
  inference(subsumption_resolution,[],[f4477,f39])).
fof(f39,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.labSem.state_component_equality',aHL_BOOL_CASES)).
fof(f4477,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,X30) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3)))) ) | ($spl37 | $spl66)),
  inference(superposition,[],[f129,f1357])).
fof(f1357,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl66),
  inference(superposition,[],[f1307,f1307])).
fof(f129,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl37),
  inference(cnf_transformation,[],[f129_D])).
fof(f129_D,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl37),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl37])])).
fof(f3574,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl14 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3573,f69])).
fof(f3573,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3572,f56])).
fof(f3572,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl20 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3571,f134])).
fof(f134,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl20 | $spl36)),
  inference(backward_demodulation,[],[f130,f75])).
fof(f3571,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl10 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(subsumption_resolution,[],[f3570,f119])).
fof(f119,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl10 | $spl32)),
  inference(backward_demodulation,[],[f115,f65])).
fof(f3570,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(trivial_inequality_removal,[],[f3569])).
fof(f3569,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(equality_resolution,[],[f2706])).
fof(f2706,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f2705,f57])).
fof(f2705,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f2704,f59])).
fof(f2704,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f2703,f61])).
fof(f2703,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f2702,f63])).
fof(f2702,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl36)),
  inference(forward_demodulation,[],[f2701,f115])).
fof(f2701,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl36)),
  inference(forward_demodulation,[],[f2700,f67])).
fof(f2700,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl36)),
  inference(forward_demodulation,[],[f2699,f73])).
fof(f2699,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26 | $spl36)),
  inference(forward_demodulation,[],[f2698,f130])).
fof(f2698,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f2697,f77])).
fof(f2697,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f2696,f79])).
fof(f2696,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl26)),
  inference(forward_demodulation,[],[f2693,f81])).
fof(f2693,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | $spl16),
  inference(superposition,[],[f54,f71])).
fof(f130,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl36),
  inference(cnf_transformation,[],[f130_D])).
fof(f130_D,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f132,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl38),
  inference(cnf_transformation,[],[f132_D])).
fof(f132_D,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f126,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(superposition,[],[f75,f39])).
fof(f9339,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl38 | $spl168 | $spl216)),
  inference(subsumption_resolution,[],[f9338,f69])).
fof(f9338,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl38 | $spl168 | $spl216)),
  inference(subsumption_resolution,[],[f9337,f56])).
fof(f9337,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl38 | $spl168 | $spl216)),
  inference(subsumption_resolution,[],[f9336,f132])).
fof(f9336,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl168 | $spl216)),
  inference(subsumption_resolution,[],[f9335,f3920])).
fof(f9335,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(trivial_inequality_removal,[],[f9334])).
fof(f9334,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(equality_resolution,[],[f9080])).
fof(f9080,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(forward_demodulation,[],[f9079,f57])).
fof(f9079,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(forward_demodulation,[],[f9078,f59])).
fof(f9078,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(forward_demodulation,[],[f5404,f61])).
fof(f5404,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(forward_demodulation,[],[f5403,f63])).
fof(f5403,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl32 | $spl216)),
  inference(forward_demodulation,[],[f5402,f115])).
fof(f5402,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f5401,f67])).
fof(f5401,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f5400,f73])).
fof(f5400,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26 | $spl216)),
  inference(forward_demodulation,[],[f5399,f3968])).
fof(f5399,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f5398,f77])).
fof(f5398,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f5397,f79])).
fof(f5397,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl26)),
  inference(forward_demodulation,[],[f5395,f81])).
fof(f5395,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | $spl16),
  inference(superposition,[],[f54,f71])).
fof(f1335,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X1)) ) | $spl70),
  inference(cnf_transformation,[],[f1335_D])).
fof(f1335_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f1249,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(duplicate_literal_removal,[],[f1232])).
fof(f1232,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl44),
  inference(equality_factoring,[],[f901])).
fof(f115,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl32),
  inference(cnf_transformation,[],[f115_D])).
fof(f115_D,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1428,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3)))) ) | $spl66),
  inference(duplicate_literal_removal,[],[f1406])).
fof(f1406,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X4)) ) | $spl66),
  inference(superposition,[],[f39,f1307])).
fof(f2830,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81)) ) | $spl96),
  inference(cnf_transformation,[],[f2830_D])).
fof(f2830_D,plain,(
  ( ! [X81] : (s(bool,X81) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f2813,plain,(
  ( ! [X80,X81] : (s(bool,X81) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81) | s(bool,'F_0') = s(bool,X80)) ) | ($spl10 | $spl31 | $spl32 | $spl66 | $spl70)),
  inference(duplicate_literal_removal,[],[f2740])).
fof(f2740,plain,(
  ( ! [X80,X81] : (s(bool,X81) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,X81) | s(bool,'F_0') = s(bool,X80) | s(bool,'F_0') = s(bool,X80)) ) | ($spl10 | $spl31 | $spl32 | $spl66 | $spl70)),
  inference(superposition,[],[f1510,f2102])).
fof(f2102,plain,(
  ( ! [X89] : (s(bool,X89) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X89)) ) | ($spl10 | $spl31 | $spl32 | $spl66)),
  inference(subsumption_resolution,[],[f1760,f91])).
fof(f1760,plain,(
  ( ! [X89] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X89) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') = s(bool,X89)) ) | ($spl10 | $spl32 | $spl66)),
  inference(superposition,[],[f1357,f119])).
fof(f1510,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl66 | $spl70)),
  inference(superposition,[],[f1335,f1307])).
fof(f3920,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl168),
  inference(cnf_transformation,[],[f3920_D])).
fof(f3920_D,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f2908,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl96),
  inference(equality_resolution,[],[f2830])).
fof(f1307,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) | $spl66),
  inference(cnf_transformation,[],[f1307_D])).
fof(f1307_D,plain,(
  ( ! [X58] : (s(bool,X58) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X58)) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f1267,plain,(
  ( ! [X68] : (s(bool,X68) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X68)) ) | ($spl31 | $spl44)),
  inference(trivial_inequality_removal,[],[f1159])).
fof(f1159,plain,(
  ( ! [X68] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X68) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'F_0') = s(bool,X68)) ) | ($spl31 | $spl44)),
  inference(superposition,[],[f91,f901])).
fof(f100,plain,(
  $false | $spl28),
  inference(resolution,[],[f97,f37])).
fof(f37,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.labSem.state_component_equality',aHL_TRUTH)).
fof(f97,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl28),
  inference(superposition,[],[f38,f89])).
fof(f38,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.labSem.state_component_equality',aHL_FALSITY)).
fof(f91,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl31),
  inference(cnf_transformation,[],[f91_D])).
fof(f91_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f88,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f39])).
fof(f909,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X27) | s(bool,X25) = s(bool,X26)) ) | $spl56),
  inference(cnf_transformation,[],[f909_D])).
fof(f909_D,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,X25)) | s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,X27) | s(bool,X25) = s(bool,X26)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f911,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,X51)) | s(bool,X51) = s(bool,X52) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) ) | $spl31),
  inference(subsumption_resolution,[],[f609,f91])).
fof(f609,plain,(
  ( ! [X52,X53,X51] : (~p(s(bool,X51)) | s(bool,X51) = s(bool,X52) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f38,f165])).
fof(f165,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f83,f83])).
fof(f83,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f39,f39])).
fof(f901,plain,(
  ( ! [X109,X110] : (s(bool,X109) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X110) | s(bool,X109) = s(bool,X110)) ) | $spl44),
  inference(cnf_transformation,[],[f901_D])).
fof(f901_D,plain,(
  ( ! [X109,X110] : (s(bool,X109) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'T_0') = s(bool,X110) | s(bool,X109) = s(bool,X110)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f952,plain,(
  ( ! [X90,X91] : (s(bool,'T_0') = s(bool,X90) | s(bool,X90) = s(bool,X91) | s(bool,X91) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3)))) ) | ($spl32 | $spl56)),
  inference(subsumption_resolution,[],[f943,f37])).
fof(f943,plain,(
  ( ! [X90,X91] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,X90) | s(bool,X90) = s(bool,X91) | s(bool,X91) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3)))) ) | ($spl32 | $spl56)),
  inference(superposition,[],[f909,f115])).
fof(f55,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | $spl0),
  inference(cnf_transformation,[],[f55_D])).
fof(f55_D,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f65,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl10),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f27,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  (s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | (s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))))) & (s('type.labSem.state'(sK0,sK1),sK2) != s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f18])).
fof(f18,plain,(
  ? [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f17])).
fof(f17,plain,(
  ? [X0,X1,X2,X3] : ((s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))) & (s('type.labSem.state'(X0,X1),X2) != s('type.labSem.state'(X0,X1),X3) | (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <~> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(flattening,[],[f8])).
fof(f8,plain,(
  ~! [X0,X1] : ! [X2,X3] : (s('type.labSem.state'(X0,X1),X2) = s('type.labSem.state'(X0,X1),X3) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num','type.wordSem.word_loc'(X0)),'const.labSem.state_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),'type.wordSem.word_loc'(X0)),'const.labSem.state_mem_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.fcp.cart'(bool,X0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.ffi.ffi_state'(X1),'const.labSem.state_ffi_1'(s('type.labSem.state'(X0,X1),X3))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.list.list'('type.labLang.sec'(X0)),'const.labSem.state_code_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X0,X1),X3))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X0,X1),X3))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X0,X1),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9] : (s('type.labSem.state'(X6,X7),X8) = s('type.labSem.state'(X6,X7),X9) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9] : (s('type.labSem.state'(X6,X7),X8) = s('type.labSem.state'(X6,X7),X9) <=> (s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num','type.wordSem.word_loc'(X6)),'const.labSem.state_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),'type.wordSem.word_loc'(X6)),'const.labSem.state_mem_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.fcp.cart'(bool,X6),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.ffi.ffi_state'(X7),'const.labSem.state_ffi_1'(s('type.labSem.state'(X6,X7),X9))) & s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X8))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,X6)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.list.list'('type.labLang.sec'(X6)),'const.labSem.state_code_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(X6,X7),X9))) & s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X8))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(X6,X7),X9))) & s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X8))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(X6,X7),X9)))))),
  file('thm.labSem.state_component_equality','thm.labSem.state_component_equality')).
fof(f117,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl34),
  inference(cnf_transformation,[],[f117_D])).
fof(f117_D,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f111,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') = s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl10),
  inference(superposition,[],[f65,f39])).
fof(f81,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl26),
  inference(cnf_transformation,[],[f81_D])).
fof(f81_D,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f35,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f79,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl24),
  inference(cnf_transformation,[],[f79_D])).
fof(f79_D,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f34,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f77,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl22),
  inference(cnf_transformation,[],[f77_D])).
fof(f77_D,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f33,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f73,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl18),
  inference(cnf_transformation,[],[f73_D])).
fof(f73_D,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f31,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f71,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl16),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f30,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f69,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl14),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f29,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f67,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl12),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f28,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f63,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl8),
  inference(cnf_transformation,[],[f63_D])).
fof(f63_D,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f26,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f61,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl6),
  inference(cnf_transformation,[],[f61_D])).
fof(f61_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f25,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f59,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl4),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f24,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f57,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl2),
  inference(cnf_transformation,[],[f57_D])).
fof(f57_D,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f23,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f12777,plain,(
  $false | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl14 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl36 | $spl186 | $spl256)),
  inference(subsumption_resolution,[],[f12776,f69])).
fof(f12776,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl1 | $spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl36 | $spl186 | $spl256)),
  inference(subsumption_resolution,[],[f12775,f56])).
fof(f12775,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl36 | $spl186 | $spl256)),
  inference(subsumption_resolution,[],[f12774,f4539])).
fof(f12774,plain,(
  s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl34 | $spl36 | $spl186)),
  inference(subsumption_resolution,[],[f12773,f117])).
fof(f12773,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl36 | $spl186)),
  inference(trivial_inequality_removal,[],[f12772])).
fof(f12772,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl36 | $spl186)),
  inference(equality_resolution,[],[f12770])).
fof(f12770,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'T_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl36 | $spl186)),
  inference(forward_demodulation,[],[f11689,f130])).
fof(f11689,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl2 | $spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186)),
  inference(forward_demodulation,[],[f11688,f57])).
fof(f11688,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl4 | $spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186)),
  inference(forward_demodulation,[],[f11687,f59])).
fof(f11687,plain,(
  ( ! [X0] : (s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl6 | $spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186)),
  inference(forward_demodulation,[],[f11686,f61])).
fof(f11686,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl8 | $spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186)),
  inference(forward_demodulation,[],[f11685,f63])).
fof(f11685,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26 | $spl186)),
  inference(forward_demodulation,[],[f11684,f3935])).
fof(f11684,plain,(
  ( ! [X0] : (s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl12 | $spl16 | $spl18 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f11683,f67])).
fof(f11683,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl18 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f10643,f73])).
fof(f10643,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl22 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f10642,f77])).
fof(f10642,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl24 | $spl26)),
  inference(forward_demodulation,[],[f10641,f79])).
fof(f10641,plain,(
  ( ! [X0] : (s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | ($spl16 | $spl26)),
  inference(forward_demodulation,[],[f10628,f81])).
fof(f10628,plain,(
  ( ! [X0] : (s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.labSem.state'(sK0,sK1),sK3) = s('type.labSem.state'(sK0,sK1),X0) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),X0))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),X0))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),X0)))) ) | $spl16),
  inference(superposition,[],[f54,f71])).
fof(f4539,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl256),
  inference(cnf_transformation,[],[f4539_D])).
fof(f4539_D,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) <=> ~$spl256),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl256])])).
fof(f11939,plain,(
  s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl39),
  inference(trivial_inequality_removal,[],[f11919])).
fof(f11919,plain,(
  s(bool,'F_0') != s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl39),
  inference(superposition,[],[f131,f39])).
fof(f131,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | $spl39),
  inference(cnf_transformation,[],[f131_D])).
fof(f131_D,plain,(
  s(bool,'F_0') != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f3910,plain,(
  $false | ($spl0 | $spl21)),
  inference(trivial_inequality_removal,[],[f3909])).
fof(f3909,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl21)),
  inference(forward_demodulation,[],[f76,f55])).
fof(f3928,plain,(
  $false | ($spl0 | $spl11)),
  inference(trivial_inequality_removal,[],[f3927])).
fof(f3927,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl11)),
  inference(forward_demodulation,[],[f66,f55])).
fof(f3868,plain,(
  $false | ($spl0 | $spl17)),
  inference(trivial_inequality_removal,[],[f3867])).
fof(f3867,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl17)),
  inference(forward_demodulation,[],[f72,f55])).
fof(f3870,plain,(
  $false | ($spl0 | $spl9)),
  inference(trivial_inequality_removal,[],[f3869])).
fof(f3869,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl9)),
  inference(forward_demodulation,[],[f64,f55])).
fof(f3872,plain,(
  $false | ($spl0 | $spl25)),
  inference(trivial_inequality_removal,[],[f3871])).
fof(f3871,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl25)),
  inference(forward_demodulation,[],[f80,f55])).
fof(f3874,plain,(
  $false | ($spl0 | $spl23)),
  inference(trivial_inequality_removal,[],[f3873])).
fof(f3873,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl23)),
  inference(forward_demodulation,[],[f78,f55])).
fof(f3876,plain,(
  $false | ($spl0 | $spl5)),
  inference(trivial_inequality_removal,[],[f3875])).
fof(f3875,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl5)),
  inference(forward_demodulation,[],[f60,f55])).
fof(f3878,plain,(
  $false | ($spl0 | $spl13)),
  inference(trivial_inequality_removal,[],[f3877])).
fof(f3877,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl13)),
  inference(forward_demodulation,[],[f68,f55])).
fof(f3880,plain,(
  $false | ($spl0 | $spl7)),
  inference(trivial_inequality_removal,[],[f3879])).
fof(f3879,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl7)),
  inference(forward_demodulation,[],[f62,f55])).
fof(f3882,plain,(
  $false | ($spl0 | $spl3)),
  inference(trivial_inequality_removal,[],[f3881])).
fof(f3881,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl3)),
  inference(forward_demodulation,[],[f58,f55])).
fof(f3884,plain,(
  $false | ($spl0 | $spl19)),
  inference(trivial_inequality_removal,[],[f3883])).
fof(f3883,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl19)),
  inference(forward_demodulation,[],[f74,f55])).
fof(f3886,plain,(
  $false | ($spl0 | $spl27)),
  inference(trivial_inequality_removal,[],[f3885])).
fof(f3885,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl27)),
  inference(forward_demodulation,[],[f82,f55])).
fof(f3888,plain,(
  $false | ($spl0 | $spl15)),
  inference(trivial_inequality_removal,[],[f3887])).
fof(f3887,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) | ($spl0 | $spl15)),
  inference(forward_demodulation,[],[f70,f55])).
fof(f56,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) != s('type.labSem.state'(sK0,sK1),sK3) | $spl1),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  s('type.labSem.state'(sK0,sK1),sK2) != s('type.labSem.state'(sK0,sK1),sK3) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f58,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl3),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f60,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl5),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f62,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl7),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f64,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl9),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f66,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl11),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f68,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl13),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f70,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl15),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f72,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl17),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f74,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl19),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f76,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl21),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f78,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl23),
  inference(cnf_transformation,[],[f78_D])).
fof(f78_D,plain,(
  s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f80,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl25),
  inference(cnf_transformation,[],[f80_D])).
fof(f80_D,plain,(
  s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl25),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl25])])).
fof(f82,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl27),
  inference(cnf_transformation,[],[f82_D])).
fof(f82_D,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl27),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl27])])).
fof(f36,plain,(
  s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_link_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_len_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_ptr_reg_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_clock_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.list.list'('type.labLang.sec'(sK0)),'const.labSem.state_code_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num',fun('type.num.num','type.option.option'('type.fcp.cart'(bool,sK0)))),'const.labSem.state_io_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.ffi.ffi_state'(sK1),'const.labSem.state_ffi_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(bool,'const.labSem.state_be_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s('type.num.num','const.labSem.state_pc_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),bool),'const.labSem.state_mem_domain_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.fcp.cart'(bool,sK0),'type.wordSem.word_loc'(sK0)),'const.labSem.state_mem_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK2))) != s(fun('type.num.num','type.wordSem.word_loc'(sK0)),'const.labSem.state_regs_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) != s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f75,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | $spl20),
  inference(cnf_transformation,[],[f75_D])).
fof(f75_D,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f32,plain,(
  s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK2))) = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | s('type.labSem.state'(sK0,sK1),sK2) = s('type.labSem.state'(sK0,sK1),sK3)),
  inference(cnf_transformation,[],[f19])).
fof(f11740,plain,(
  s(bool,'F_0') = s(bool,'const.labSem.state_failed_1'(s('type.labSem.state'(sK0,sK1),sK3))) | ($spl20 | $spl38)),
  inference(forward_demodulation,[],[f75,f132])).
% SZS output end Proof for thm.labSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 156
% Passive clauses: 896
% Generated clauses: 13173
% Final active clauses: 79
% Final passive clauses: 312
% Input formulas: 6
% Initial clauses: 32
% 
% Duplicate literals: 1020
% Trivial inequalities: 240
% Fw subsumption resolutions: 1681
% Fw demodulations: 1051
% Bw demodulations: 21
% 
% Simple tautologies: 277
% Equational tautologies: 86
% Forward subsumptions: 6016
% Fw demodulations to eq. taut.: 12
% Bw demodulations to eq. taut.: 11
% 
% Binary resolution: 45
% Forward superposition: 4421
% Backward superposition: 3284
% Self superposition: 225
% Equality factoring: 184
% Equality resolution: 34
% 
% Split clauses: 1431
% Split components: 3019
% SAT solver clauses: 2045
% SAT solver unit clauses: 17
% SAT solver binary clauses: 240
% SAT solver learnt clauses: 6
% SAT solver learnt literals: 8
% 
% Sat splits: 1431
% Sat splitting refutations: 34
% 
% TWLsolver clauses: 2013
% TWLsolver calls for satisfiability: 152
% 
% Memory used [KB]: 4733
% Time elapsed: 0.410 s
% ------------------------------
% ------------------------------
% Success in time 0.42 s
