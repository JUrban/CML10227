Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pat_to_closProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pat_to_closProof
% SZS output start Proof for thm.pat_to_closProof
fof(f4200,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4199,f223,f424,f422,f420,f418,f416,f414,f412,f410,f408,f406,f3969,f3968,f1268,f1267,f1266,f1265,f1264,f1263,f3970])).
fof(f3970,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f412,f225])).
fof(f225,plain,(
  ( ! [X13] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X13)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK14))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK15))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK16))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK17))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK18),s('type.list.list'('type.patSem.v'),sK19))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),sK20),s('type.patLang.exp',sK21))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.list.list'('type.patLang.exp'),sK23),s('type.num.num',sK24))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',sK25))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),sK26)))) & ! [X14] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14))))) & ! [X13] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X13))))) & ! [X12] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12))))) & ! [X11] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X11))))) & ! [X10] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) & ! [X9] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X9))) & ! [X7,X8] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X7),s('type.list.list'('type.patSem.v'),X8))) & ! [X6] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X6))) & ! [X4,X5] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X4),s('type.patLang.exp',X5))) & ! [X1,X2,X3] : s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X1),s('type.list.list'('type.patLang.exp'),X2),s('type.num.num',X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X28] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X28))))) | ? [X27] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X27))))) | ? [X26] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X26))))) | ? [X25] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X25))))) | ? [X24] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X24))))) | ? [X22,X23] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X22),s('type.list.list'('type.patSem.v'),X23))) | ? [X20,X21] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X20),s('type.patLang.exp',X21))) | ? [X17,X18,X19] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X17),s('type.list.list'('type.patLang.exp'),X18),s('type.num.num',X19))) | ? [X16] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X16))) | ? [X15] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X15)))) & ! [X14] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14))))) & ! [X13] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X13))))) & ! [X12] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12))))) & ! [X11] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X11))))) & ! [X10] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10))))) & ! [X9] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X9))) & ! [X7,X8] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X7),s('type.list.list'('type.patSem.v'),X8))) & ! [X6] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X6))) & ! [X4,X5] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X4),s('type.patLang.exp',X5))) & ! [X1,X2,X3] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X1),s('type.list.list'('type.patLang.exp'),X2),s('type.num.num',X3))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X14] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14))))) | ? [X13] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))))) | ? [X12] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X12))))) | ? [X11] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X10] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X8,X9] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X9))) | ? [X6,X7] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X6),s('type.patLang.exp',X7))) | ? [X3,X4,X5] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X3),s('type.list.list'('type.patLang.exp'),X4),s('type.num.num',X5))) | ? [X2] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X2))) | ? [X1] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X1)))) & ! [X28] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X28))))) & ! [X27] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27))))) & ! [X26] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))) & ! [X25] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X25))))) & ! [X24] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X24))))) & ! [X23] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X23))) & ! [X21,X22] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X21),s('type.list.list'('type.patSem.v'),X22))) & ! [X20] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X20))) & ! [X18,X19] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X18),s('type.patLang.exp',X19))) & ! [X15,X16,X17] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patLang.exp'),X16),s('type.num.num',X17))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X14] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14))))) | ? [X13] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))))) | ? [X12] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X12))))) | ? [X11] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X10] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X8,X9] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X9))) | ? [X6,X7] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X6),s('type.patLang.exp',X7))) | ? [X3,X4,X5] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X3),s('type.list.list'('type.patLang.exp'),X4),s('type.num.num',X5))) | ? [X2] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X2))) | ? [X1] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X1)))) & (! [X28] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X28))))) & ! [X27] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27))))) & ! [X26] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))) & ! [X25] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X25))))) & ! [X24] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X24))))) & ! [X23] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X23))) & ! [X21,X22] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X21),s('type.list.list'('type.patSem.v'),X22))) & ! [X20] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X20))) & ! [X18,X19] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X18),s('type.patLang.exp',X19))) & ! [X15,X16,X17] : s('type.patSem.v',X0) != s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patLang.exp'),X16),s('type.num.num',X17)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X14] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14))))) | ? [X13] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X13))))) | ? [X12] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X12))))) | ? [X11] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X11))))) | ? [X10] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X8,X9] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X8),s('type.list.list'('type.patSem.v'),X9))) | ? [X6,X7] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X6),s('type.patLang.exp',X7))) | ? [X3,X4,X5] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X3),s('type.list.list'('type.patLang.exp'),X4),s('type.num.num',X5))) | ? [X2] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X2))) | ? [X1] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X1)))) => (? [X28] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X28))))) | ? [X27] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X27))))) | ? [X26] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X26))))) | ? [X25] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X25))))) | ? [X24] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X24))))) | ? [X23] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X23))) | ? [X21,X22] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X21),s('type.list.list'('type.patSem.v'),X22))) | ? [X20] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X20))) | ? [X18,X19] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X18),s('type.patLang.exp',X19))) | ? [X15,X16,X17] : s('type.patSem.v',X0) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X15),s('type.list.list'('type.patLang.exp'),X16),s('type.num.num',X17)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X8] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X8))))) | ? [X9] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X11,X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X11),s('type.list.list'('type.patSem.v'),X12))) | ? [X12,X13] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X12),s('type.patLang.exp',X13))) | ? [X12,X14,X15] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X12),s('type.list.list'('type.patLang.exp'),X14),s('type.num.num',X15))) | ? [X16] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X16))) | ? [X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X12)))) => (? [X7] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X8] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X8))))) | ? [X9] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))) | ? [X16] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X16))) | ? [X11,X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X11),s('type.list.list'('type.patSem.v'),X12))) | ? [X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X12))) | ? [X12,X13] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X12),s('type.patLang.exp',X13))) | ? [X12,X14,X15] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X12),s('type.list.list'('type.patLang.exp'),X14),s('type.num.num',X15)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X8] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X8))))) | ? [X9] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X11,X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X11),s('type.list.list'('type.patSem.v'),X12))) | ? [X12,X13] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X12),s('type.patLang.exp',X13))) | ? [X12,X14,X15] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X12),s('type.list.list'('type.patLang.exp'),X14),s('type.num.num',X15))) | ? [X16] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X16))) | ? [X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X12)))) => (? [X7] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X7))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),X10))))) | ? [X10] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))))) | ? [X8] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X8))))) | ? [X9] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X9))))) | ? [X16] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X16))) | ? [X11,X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X11),s('type.list.list'('type.patSem.v'),X12))) | ? [X12] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X12))) | ? [X12,X13] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X12),s('type.patLang.exp',X13))) | ? [X12,X14,X15] : s('type.patSem.v',X6) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X12),s('type.list.list'('type.patLang.exp'),X14),s('type.num.num',X15)))))),
  file('thm.pat_to_closProof.pat_to_closProof_|49|_prove_ltb','thm.pat_to_closProof.pat_to_closProof_|49|_prove_ltb')).
fof(f1263,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f410,f228])).
fof(f228,plain,(
  ( ! [X10] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),X10)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1264,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f422,f229])).
fof(f229,plain,(
  ( ! [X9] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',X9)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1265,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f416,f230])).
fof(f230,plain,(
  ( ! [X8,X7] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',X7),s('type.list.list'('type.patSem.v'),X8)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1266,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f408,f227])).
fof(f227,plain,(
  ( ! [X11] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',X11)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1267,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f418,f232])).
fof(f232,plain,(
  ( ! [X4,X5] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),X4),s('type.patLang.exp',X5)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f1268,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f424,f231])).
fof(f231,plain,(
  ( ! [X6] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),X6)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3968,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f420,f233])).
fof(f233,plain,(
  ( ! [X2,X3,X1] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),X1),s('type.list.list'('type.patLang.exp'),X2),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3969,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f406,f224])).
fof(f224,plain,(
  ( ! [X14] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',X14)))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f406,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) | $spl0),
  inference(cnf_transformation,[],[f406_D])).
fof(f406_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f408,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK14))))) | $spl2),
  inference(cnf_transformation,[],[f408_D])).
fof(f408_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK14))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f410,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK15))))) | $spl4),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK15))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f412,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK16))))) | $spl6),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK16))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f414,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK17))))) | $spl8),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK17))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f416,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK18),s('type.list.list'('type.patSem.v'),sK19))) | $spl10),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK18),s('type.list.list'('type.patSem.v'),sK19))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f418,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),sK20),s('type.patLang.exp',sK21))) | $spl12),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),sK20),s('type.patLang.exp',sK21))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f420,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.list.list'('type.patLang.exp'),sK23),s('type.num.num',sK24))) | $spl14),
  inference(cnf_transformation,[],[f420_D])).
fof(f420_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.list.list'('type.patLang.exp'),sK23),s('type.num.num',sK24))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f422,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',sK25))) | $spl16),
  inference(cnf_transformation,[],[f422_D])).
fof(f422_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',sK25))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f424,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),sK26))) | $spl18),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),sK26))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f223,plain,(
  s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Vectorv_1'(s('type.list.list'('type.patSem.v'),sK26))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Loc_1'(s('type.num.num',sK25))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Recclosure_3'(s('type.list.list'('type.patSem.v'),sK22),s('type.list.list'('type.patLang.exp'),sK23),s('type.num.num',sK24))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Closure_2'(s('type.list.list'('type.patSem.v'),sK20),s('type.patLang.exp',sK21))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Conv_2'(s('type.num.num',sK18),s('type.list.list'('type.patSem.v'),sK19))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK17))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word8_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one')))),sK16))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.StrLit_1'(s('type.list.list'('type.string.char'),sK15))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Char_1'(s('type.string.char',sK14))))) | s('type.patSem.v',sK12) = s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.IntLit_1'(s('type.integer.int',sK13)))))),
  inference(cnf_transformation,[],[f138])).
fof(f4199,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f414,f226])).
fof(f226,plain,(
  ( ! [X12] : (s('type.patSem.v',sK12) != s('type.patSem.v','const.patSem.Litv_1'(s('type.ast.lit','const.ast.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X12)))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.pat_to_closProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 331
% Passive clauses: 1231
% Generated clauses: 3970
% Final active clauses: 331
% Final passive clauses: 757
% Input formulas: 37
% Initial clauses: 178
% 
% Duplicate literals: 151
% Trivial inequalities: 13
% Fw subsumption resolutions: 277
% 
% Simple tautologies: 145
% Equational tautologies: 25
% Forward subsumptions: 2119
% 
% Binary resolution: 2399
% Factoring: 731
% Forward superposition: 90
% Backward superposition: 75
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 165
% SAT solver clauses: 162
% SAT solver unit clauses: 16
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 161
% TWLsolver calls for satisfiability: 141
% 
% Memory used [KB]: 2046
% Time elapsed: 0.160 s
% ------------------------------
% ------------------------------
% Success in time 0.158 s
