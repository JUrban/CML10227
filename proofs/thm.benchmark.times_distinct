Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.benchmark
% (92078)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 174
% Passive clauses: 4170
% Generated clauses: 21611
% Final active clauses: 154
% Final passive clauses: 3792
% Input formulas: 69
% Initial clauses: 125
% 
% Duplicate literals: 593
% Trivial inequalities: 371
% Fw subsumption resolutions: 1906
% Fw demodulations: 3107
% Bw demodulations: 20
% 
% Simple tautologies: 272
% Equational tautologies: 44
% Forward subsumptions: 10505
% 
% Binary resolution: 733
% Factoring: 1
% Forward superposition: 7466
% Backward superposition: 7110
% Self superposition: 177
% Equality factoring: 70
% Equality resolution: 29
% 
% Split clauses: 298
% Split components: 597
% SAT solver clauses: 847
% SAT solver unit clauses: 9
% SAT solver binary clauses: 182
% 
% Sat splits: 298
% 
% TWLsolver clauses: 847
% TWLsolver calls for satisfiability: 220
% 
% Memory used [KB]: 20596
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.benchmark
% (92113)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 161
% Passive clauses: 1416
% Generated clauses: 16192
% Final active clauses: 113
% Final passive clauses: 840
% Input formulas: 69
% Initial clauses: 125
% 
% Duplicate literals: 534
% Trivial inequalities: 192
% Fw subsumption resolutions: 1231
% Fw demodulations: 1991
% Bw demodulations: 438
% Condensations: 1081
% Global subsumptions: 8
% 
% Simple tautologies: 270
% Equational tautologies: 47
% Forward subsumptions: 7370
% Bw demodulations to eq. taut.: 23
% 
% Binary resolution: 488
% Factoring: 1
% Forward superposition: 4807
% Backward superposition: 3628
% Self superposition: 129
% Equality factoring: 84
% Equality resolution: 21
% 
% Split clauses: 134
% Split components: 268
% SAT solver clauses: 2120
% SAT solver unit clauses: 152
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 16
% 
% Sat splits: 134
% Sat splitting refutations: 9
% 
% TWLsolver clauses: 2088
% TWLsolver calls for satisfiability: 456
% 
% Memory used [KB]: 13560
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.benchmark
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.benchmark
% SZS output start Proof for thm.benchmark
fof(f56523,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1173,f1168,f1289,f1292,f1291,f1301,f1313,f1317,f1319,f1323,f1325,f1327,f1329,f1332,f1410,f1411,f1412,f1414,f1417,f1419,f1420,f1421,f1422,f1423,f1424,f1985,f1987,f1986,f4030,f4017,f4033,f5315,f5317,f5306,f5326,f5319,f5712,f5716,f5714,f6056,f6057,f6058,f6060,f6069,f6071,f6072,f6074,f6076,f6078,f6080,f6082,f6087,f6092,f6099,f6127,f6129,f6131,f6133,f6135,f6137,f6139,f6563,f6596,f6674,f6675,f6676,f6677,f6681,f6684,f8869,f8871,f8873,f8877,f8879,f8883,f8885,f8916,f8920,f8925,f8927,f9283,f9284,f9285,f9287,f9292,f9293,f9294,f9295,f9296,f9297,f9298,f9299,f9303,f9307,f9309,f9311,f9313,f9315,f9316,f9317,f9318,f9319,f9320,f9321,f9322,f9323,f15660,f15663,f15661,f18813,f18821,f18814,f19307,f19308,f19316,f19318,f19321,f19323,f19324,f19325,f19328,f19330,f19331,f19333,f19336,f19338,f19340,f19342,f19343,f19344,f19345,f19346,f19348,f19349,f19350,f19351,f19352,f19353,f19354,f19356,f19358,f19359,f19360,f19361,f19362,f19363,f19364,f19365,f19367,f19368,f19369,f19370,f19371,f19372,f19374,f19376,f19378,f19380,f19383,f19385,f19387,f19389,f19391,f19393,f19395,f19397,f19399,f19401,f19402,f19403,f19405,f19409,f19411,f19413,f19415,f19417,f19419,f19421,f19422,f19425,f19426,f19430,f19432,f19434,f19436,f19438,f19440,f19441,f19442,f19444,f19446,f19448,f19449,f19455,f19457,f19459,f19460,f19463,f19464,f19465,f19466,f19467,f19468,f19469,f19470,f19476,f19478,f19480,f19481,f19482,f19483,f19484,f19485,f19486,f19488,f19490,f19494,f19496,f19499,f19500,f19501,f19502,f19504,f19506,f19508,f19510,f19513,f19515,f19517,f19520,f19522,f19524,f19526,f19528,f19530,f19532,f19534,f19538,f19540,f19542,f19543,f19545,f19547,f19549,f19551,f19553,f19575,f19577,f19579,f19581,f19582,f19583,f19587,f19591,f19593,f19595,f19606,f19629,f19641,f19645,f19647,f19649,f19651,f19656,f19657,f19661,f20361,f20363,f20352,f20365,f23775,f23776,f1290,f23735,f23795,f20108,f20129,f19876,f19886,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f4031,f3203,f1174,f1586,f1178,f1176,f25389,f26270,f25456,f28760,f20378,f4039,f36676,f36677,f36678,f36679,f36765,f36680,f36762,f36766,f36682,f36683,f36769,f36684,f36685,f36770,f36771,f36772,f36773,f36774,f36775,f36776,f36761,f36759,f36777,f36764,f36768,f36791,f38990,f41142,f39070,f48766,f48767,f48768,f48769,f48850,f48844,f48770,f48849,f48847,f48771,f48772,f48846,f48851,f48773,f48774,f48854,f48853,f48870,f49970,f50653,f50078,f5713,f53858,f53860,f53861,f53864,f53867,f53869,f53871,f53870,f53872,f53873,f53874,f53875,f53878,f53879,f53880,f53881,f53882,f53883,f53885,f53886,f53887,f53888,f53890,f53891,f53892,f53893,f53894,f53895,f53897,f53898,f53899,f53900,f53901,f53902,f53905,f53906,f53907,f53912,f53868,f53914,f53915,f53918,f53919,f53924,f53865,f53926,f53930,f53863,f53927,f53931,f53935,f53962,f53964,f53965,f53966,f53967,f53968,f53963,f53969,f53971,f53972,f53973,f53974,f53975,f53970,f53992,f53994,f53995,f53993,f53996,f53997,f53998,f53999,f54000,f54001,f54002,f53936,f54003,f54005,f54006,f53862,f54007,f54009,f54011,f54010,f54012,f54013,f54014,f54015,f54017,f54018,f54019,f54020,f54021,f54022,f54024,f54025,f54026,f54027,f54029,f54030,f54031,f54032,f54033,f54034,f54036,f54037,f54038,f54039,f54040,f53937,f54041,f54042,f54043,f54044,f54045,f54046,f54050,f54051,f54052,f53913,f54056,f53908,f54057,f54058,f54008,f54059,f54060,f54063,f53866,f54064,f54069,f53859,f54073,f54070,f54074,f53876,f54075,f54076,f53932,f54079,f53925,f54085,f54086,f54004,f54122,f54123,f54125,f54126,f54127,f54128,f54129,f54124,f54130,f54131,f54132,f54134,f54135,f54136,f54137,f54138,f54133,f54139,f54164,f54167,f54168,f54173,f54175,f54177,f54179,f54183,f55617,f55618,f55619,f55621,f55626,f55628,f55629,f55631,f55633,f55635,f55640,f55645,f55651,f55655,f55657,f55659,f55660,f55662,f55665,f55668,f55670,f55671,f55673,f55675,f55676,f55678,f55680,f55682,f55686,f55687,f55690,f55693,f55697,f55702,f55703,f55710,f55711,f55714,f55717,f55718,f55719,f55723,f55726,f55731,f55732,f55735,f55736,f55861,f55863,f55877,f55893,f55929,f55945,f55983,f55998,f56019,f56021,f56055,f56057,f56059,f56061,f56079,f56114,f56133,f56135,f56201,f56205,f56207,f56209,f56211,f56213,f56319,f56321,f56325,f56327,f56329,f56331,f56333,f56335,f56337,f56339,f56341,f56343,f56345,f56347,f56349,f56351,f56353,f56355,f56357,f56359,f56361,f56363,f56365,f56367,f56369,f56371,f56373,f56375,f56377,f56379,f56381,f56382,f56383,f56385,f56387,f56389,f56391,f56393,f56395,f56397,f56399,f56401,f56403,f56405,f56407,f56409,f56411,f56413,f56415,f56417,f56419,f56421,f56423,f56425,f56429,f56431,f56433,f56435,f56437,f56453,f56464,f56471,f56469,f56476,f56488,f56492,f56494,f56501,f56502])).
fof(f56502,plain,(
  $false | ($spl90 | $spl174)),
  inference(subsumption_resolution,[],[f53865,f56495])).
fof(f56495,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl174),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4483,f4481,f3971,f3220,f12266,f12265,f12249,f12414,f12413,f12593,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13034,f13033,f13361,f13360,f13356,f13343,f13513,f13512,f13947,f13946,f13930,f14013,f14012,f14314,f14315,f14316,f14318,f14319,f14817,f14939,f14888,f15126,f15066,f15138,f15592,f15535,f15604,f15660,f15663,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16590,f16591,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17685,f17686,f17797,f17799,f18056,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f4791,f18468,f3569,f3557,f3030,f3212,f17674,f17676,f17819,f17820,f4831,f4825,f20108,f20129,f19876,f19886,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29460,f30609,f30625,f30633,f31520,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31521,f31523,f31524,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f32166,f31859,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f32188,f32020,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32949,f32708,f32729,f32737,f33030,f33033,f32839,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33231,f33230,f33229,f33462,f33465,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33789,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33930,f33942,f33944,f33969,f33984,f33990,f33998,f34000,f34060,f34059,f34058,f34054,f34053,f34030,f34843,f34902,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35740,f35742,f35743,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36033,f36055,f36056,f36057,f36065,f36067,f36597,f36173,f36174,f36191,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36621,f36354,f36355,f36372,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36817,f36816,f36815,f36999,f37000,f36966,f37314,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37501,f37517,f37519,f37547,f37548,f37549,f37567,f37577,f37578,f37586,f37588,f37919,f37847,f37939,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38214,f38231,f38233,f38262,f38263,f38264,f38284,f38295,f38296,f38297,f38305,f38307,f39177,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39982,f39983,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40223,f40224,f40225,f40247,f40248,f40251,f40252,f40253,f40262,f40379,f40380,f40381,f40382,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41726,f41747,f41749,f41782,f41783,f41784,f41785,f41786,f41809,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f42669,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43209,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43671,f43672,f43673,f43674,f43682,f43684,f43769,f43771,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43972,f43971,f43970,f43969,f44060,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45108,f45109,f45110,f45111,f45119,f45121,f45157,f45200,f45202,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45726,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46197,f46196,f46195,f46194,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46870,f46871,f46872,f46880,f47001,f47002,f47003,f47004,f47005,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47842,f47853,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f51711,f51855,f53565,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f52977,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53901,f53903,f53905,f53907,f53170,f53171,f53912,f53174,f53914,f53918,f53241,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f54056,f54057,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54116,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54008,f53155,f53157,f53158,f53173,f17663,f17634,f17456,f17427,f17145,f17050,f29447,f46662,f30614,f30622,f3370,f3368,f3355,f3353,f3350,f3349,f14014,f41801,f37559,f38276,f3373,f1527,f1169,f32846,f32854,f33976,f54108,f47022,f47030,f4242,f4244,f53233,f35010,f35018,f38206,f40395,f40403,f36364,f43736,f43744,f41718,f33922,f37493,f32012,f17879,f36183,f31851,f16146,f16152,f17321,f17327,f18000,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f33037,f32761,f32711,f32710,f47281,f46920,f46850,f46849,f40625,f4592,f4865,f17606,f17608,f17612,f17614,f17599,f17600,f17607,f17609,f17613,f17615,f33015,f33016,f15372,f4273,f4266,f4177,f4176,f53854,f53857,f53694,f35203,f34877,f34876,f46137,f46139,f46034,f46036,f46035,f46037,f45723,f46138,f46140,f45725,f43010,f43012,f42668,f44436,f44438,f44059,f39444,f39446,f39176,f45131,f45133,f44344,f44346,f44057,f39379,f39381,f39174,f45212,f45214,f42929,f42931,f42666,f43009,f43011,f44435,f44437,f45130,f45132,f45211,f45213,f44343,f44345,f42928,f42930,f39443,f39445,f39378,f39380,f46918,f32764,f32760,f46919,f12870,f13929,f14120,f15708,f35580,f43296,f32435,f43329,f32467,f4018,f32436,f5307,f43297,f13342,f43694,f43696,f41849,f41851,f41500,f38317,f38319,f37938,f37598,f37600,f37313,f34010,f34012,f33788,f38243,f38245,f37936,f43781,f43783,f41759,f41761,f41498,f33954,f33956,f33786,f37529,f37531,f37311,f43693,f43695,f41848,f41850,f38316,f38318,f37597,f37599,f38242,f38244,f43780,f43782,f41758,f41760,f37528,f37530,f34009,f34011,f33953,f33955,f3361,f3550,f3452,f3564,f12348,f12970,f13981,f12349,f12971,f13982,f4768,f4748,f4540,f4520,f5282,f1157,f3360,f3451,f5728,f5707,f15684,f15649,f3884,f3885,f31924,f31923,f31921,f31922,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f15373,f15308,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3306,f3293,f328,f327,f326,f28787,f28710,f28709,f5283,f1159,f13948,f4736,f4716,f4508,f4488,f15400,f15736,f5498,f41724,f38212,f37499,f33075,f33928,f53959,f47324,f5515,f54114,f35240,f43818,f40704,f16219,f38282,f36189,f41807,f33982,f37565,f31857,f18004,f36370,f32018,f17883,f17413,f318,f5518,f5512,f5513,f5514,f41806,f38281,f37564,f33074,f33981,f54113,f47323,f5311,f53958,f35239,f43817,f41723,f38211,f37498,f33927,f17412,f40703,f36369,f32017,f17882,f36188,f31856,f16218,f18003,f5280,f5310,f5308,f5309,f317,f5320,f41802,f38277,f37560,f33977,f54109,f53954,f41719,f38207,f37494,f36365,f36184,f33923,f32013,f31852,f17880,f18001,f3386,f1172,f1171,f1170,f299,f1177,f36095,f36092,f36091,f36090,f40590,f35680,f36255,f36257,f31912,f31914,f31519,f17808,f17810,f36077,f36079,f31757,f31759,f31473,f30673,f17931,f17933,f17941,f17938,f18795,f17940,f17939,f30678,f30676,f30670,f45244,f43811,f41722,f41803,f41808,f41810,f38210,f38278,f38283,f38285,f37497,f37561,f37566,f37568,f38208,f38213,f38215,f38280,f40700,f36187,f36366,f36371,f36373,f43814,f41720,f41725,f41727,f41805,f37495,f37500,f37502,f37563,f36185,f36190,f36192,f36368,f36254,f36256,f36076,f36078,f40611,f40664,f40301,f40300,f40299,f40228,f40227,f43289,f43284,f36320,f36307,f36304,f36302,f36297,f36295,f36294,f36293,f36292,f36291,f36290,f36289,f36288,f36285,f36284,f36282,f36279,f36278,f36276,f36275,f36274,f36139,f36126,f36123,f36121,f36116,f36114,f36113,f36112,f36111,f36110,f36109,f36108,f36107,f36104,f36103,f36101,f36098,f36097,f33926,f33978,f33983,f33985,f47320,f31911,f31913,f17807,f17809,f31756,f31758,f17930,f17932,f33924,f33929,f33931,f33980,f31855,f32014,f32019,f32021,f17884,f17886,f18002,f18707,f31853,f31858,f31860,f32016,f17881,f18005,f18007,f18708,f40610,f35236,f40297,f40298,f36583,f36584,f31929,f31928,f31927,f33071,f43286,f43282,f32428,f32426,f18794,f17972,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17944,f17943,f17851,f17848,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17823,f17822,f17818,f17817,f43288,f43283,f32430,f32427,f31963,f31960,f31958,f31953,f31951,f31950,f31949,f31948,f31947,f31946,f31945,f31944,f31941,f31940,f31938,f31935,f31934,f31802,f31799,f31797,f31792,f31790,f31789,f31788,f31787,f31786,f31785,f31784,f31783,f31780,f31779,f31777,f31774,f31773,f31768,f31767,f31766,f18808,f18807,f3784,f36270,f36269,f31932,f17815,f17816,f31771,f18810,f28789,f16088,f33469,f31925,f31926,f53957,f54110,f54115,f54117,f53955,f53960,f53961,f54112,f53986,f53989,f53852,f53855,f4776,f4744,f4548,f4516,f338,f337,f54111,f53956,f47321,f43815,f41804,f41721,f40701,f40296,f40295,f40294,f40293,f40195,f40194,f40004,f40003,f38279,f38209,f37562,f37496,f36367,f36271,f36268,f36186,f36094,f36007,f36006,f35237,f33979,f33925,f33072,f32015,f31931,f31854,f31770,f28778,f28757,f28756,f28755,f28754,f28753,f28752,f28748,f28702,f28697,f28696,f18815,f18809,f18806,f18805,f18713,f17393,f17230,f17229,f16201,f16090,f16089,f16056,f16055,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f16605,f16606,f53414,f53411,f51341,f51198,f51190,f51189,f51188,f51101,f50995,f50954,f50953,f50952,f50951,f50950,f50949,f50948,f50947,f50946,f50945,f50944,f50943,f50942,f50941,f50940,f50939,f49475,f49369,f49236,f49235,f49234,f49233,f49232,f49231,f49230,f49229,f49228,f49227,f49226,f49225,f49224,f49223,f49222,f49221,f48859,f48304,f48155,f47979,f47977,f47969,f47963,f47812,f47238,f46963,f46962,f46960,f46959,f46857,f46855,f46848,f46272,f45713,f45351,f44783,f44048,f43937,f43336,f43299,f40626,f40613,f40598,f40595,f40344,f40343,f40341,f40340,f40235,f40233,f40226,f40202,f40200,f40193,f40189,f40011,f40009,f40002,f36889,f36782,f36567,f36520,f36319,f36318,f36317,f36316,f36315,f36306,f36303,f36281,f36280,f36138,f36137,f36136,f36135,f36134,f36125,f36122,f36100,f36099,f36014,f36012,f36005,f36003,f35750,f35748,f35741,f35166,f34969,f34968,f34966,f34965,f34953,f34884,f34882,f34875,f34484,f34359,f34196,f34194,f34189,f34185,f34130,f33779,f33306,f33198,f32998,f32807,f32806,f32804,f32803,f32718,f32716,f32709,f32466,f32438,f32143,f31975,f31974,f31973,f31972,f31971,f31962,f31959,f31937,f31936,f31814,f31813,f31812,f31811,f31810,f31801,f31798,f31776,f31775,f31531,f31529,f31522,f28780,f28777,f28767,f28717,f28715,f28708,f23905,f23903,f23899,f18267,f18266,f18265,f18264,f18263,f18262,f18261,f18260,f18223,f18222,f18221,f18220,f18212,f18210,f18134,f18133,f18132,f18131,f18130,f18129,f18128,f18127,f17987,f17984,f17983,f17982,f17971,f17968,f17946,f17945,f17866,f17863,f17862,f17861,f17850,f17847,f17825,f17824,f17694,f17692,f17684,f17309,f17305,f17304,f17238,f17236,f17228,f17069,f16982,f16614,f16612,f16604,f16599,f16597,f16589,f16135,f16133,f16132,f16118,f16064,f16062,f16054,f15787,f15780,f15770,f15734,f15726,f15709,f15667,f15446,f15441,f15398,f15382,f15381,f15314,f15306,f15251,f15243,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f14589,f14515,f14414,f14413,f14411,f14410,f14409,f14250,f14243,f14188,f14187,f14183,f14176,f14121,f14063,f13994,f13647,f13494,f13167,f13015,f12680,f12679,f12592,f12545,f12395,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4482,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f53567,f53991,f53988,f52978])).
fof(f52978,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X7)))) )),
  inference(superposition,[],[f34843,f250])).
fof(f53988,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(X123,fun(X123,bool)),'=_0'),s(X123,X126),s(fun(sK0,X123),X125))),s(sK0,sK3)))) | s(X123,X126) = s(X123,happ(s(fun('type.benchmark.times'(sK0),X123),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53987,f359])).
fof(f53987,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(X123,bool),happ(s(fun(X123,fun(X123,bool)),'=_0'),s(X123,X126))),s(X123,happ(s(fun(sK0,X123),X125),s(sK0,sK3)))))) | s(X123,X126) = s(X123,happ(s(fun('type.benchmark.times'(sK0),X123),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53335,f335])).
fof(f53335,plain,(
  ( ! [X125,X123,X126,X124] : (~p(s(bool,happ(s(fun(X123,bool),happ(s(fun(X123,fun(X123,bool)),'=_0'),s(X123,X126))),s(X123,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X123),X125),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124)))))) | s(X123,X126) = s(X123,happ(s(fun('type.benchmark.times'(sK0),X123),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f337,f34843])).
fof(f53991,plain,(
  ( ! [X134,X132,X133,X131] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(X131,fun(X131,bool)),'=_0'),s(X131,X134),s(fun(sK0,X131),X133))),s(sK0,sK3)))) | s(X131,X134) != s(X131,happ(s(fun('type.benchmark.times'(sK0),X131),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53990,f359])).
fof(f53990,plain,(
  ( ! [X134,X132,X133,X131] : (p(s(bool,happ(s(fun(X131,bool),happ(s(fun(X131,fun(X131,bool)),'=_0'),s(X131,X134))),s(X131,happ(s(fun(sK0,X131),X133),s(sK0,sK3)))))) | s(X131,X134) != s(X131,happ(s(fun('type.benchmark.times'(sK0),X131),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53337,f335])).
fof(f53337,plain,(
  ( ! [X134,X132,X133,X131] : (p(s(bool,happ(s(fun(X131,bool),happ(s(fun(X131,fun(X131,bool)),'=_0'),s(X131,X134))),s(X131,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X131),X133),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132)))))) | s(X131,X134) != s(X131,happ(s(fun('type.benchmark.times'(sK0),X131),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f338,f34843])).
fof(f53567,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun(sK0,X0),X2))),s(sK0,sK3))))) )),
  inference(forward_demodulation,[],[f53566,f359])).
fof(f53566,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X0,happ(s(fun(sK0,X0),X2),s(sK0,sK3))))))) )),
  inference(forward_demodulation,[],[f52936,f335])).
fof(f52936,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1))))))) )),
  inference(unit_resulting_resolution,[],[f34843,f338])).
fof(f248,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.benchmark.times_distinct',aHL_FALSITY)).
fof(f255,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f200])).
fof(f200,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f78])).
fof(f78,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f77])).
fof(f77,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X29] : (s(bool,'F_0') = s(bool,X29) <=> ~p(s(bool,X29)))),
  file('thm.benchmark.times_distinct','thm.bool.EQ_CLAUSES|split|2')).
fof(f256,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f200])).
fof(f429,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f290,f250])).
fof(f479,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),X1),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f295,f250])).
fof(f515,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x0_1'(s(bool,X1))),s(X0,X2))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f330,f250])).
fof(f999,plain,(
  s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f381,f302])).
fof(f1006,plain,(
  ( ! [X17,X16] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X17))) | s(bool,X16) = s(bool,X17) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f302,f250])).
fof(f1009,plain,(
  ( ! [X24,X25] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X24))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X25))) | s(bool,'F_0') = s(bool,X25) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f302,f250])).
fof(f1049,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') != s(bool,X17) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X16))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X17))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f303,f250])).
fof(f1052,plain,(
  ( ! [X24,X25] : (s(bool,X24) != s(bool,X25) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X25))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f303,f250])).
fof(f1087,plain,(
  s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f999,f302])).
fof(f1132,plain,(
  ( ! [X30,X31] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X31))) | s(bool,X31) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X30))) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f302,f429])).
fof(f1147,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,'F_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20)))) )),
  inference(forward_demodulation,[],[f1108,f290])).
fof(f1108,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X19))) | s(bool,'F_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20)))) )),
  inference(superposition,[],[f429,f330])).
fof(f1148,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,X21) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X21),s(fun('type.num.num',bool),X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f1109,f290])).
fof(f1109,plain,(
  ( ! [X21,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X21))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X21),s(fun('type.num.num',bool),X22),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f429,f295])).
fof(f1150,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) )),
  inference(forward_demodulation,[],[f1149,f290])).
fof(f1149,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f1121,f246])).
fof(f1121,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X10) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X9))) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f315,f429])).
fof(f1151,plain,(
  ( ! [X17,X18] : (s(bool,X18) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X17))) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f1124,f246])).
fof(f1124,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | s(bool,X18) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X17))) | s(bool,'T_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f399,f429])).
fof(f1152,plain,(
  ( ! [X35,X34] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X34))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X35))) | s(bool,'T_0') != s(bool,X35) | s(bool,'F_0') = s(bool,X34)) )),
  inference(forward_demodulation,[],[f1134,f290])).
fof(f1134,plain,(
  ( ! [X35,X34] : (s(bool,'T_0') != s(bool,X35) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X35))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X34))))) | s(bool,'F_0') = s(bool,X34)) )),
  inference(superposition,[],[f303,f429])).
fof(f1676,plain,(
  ( ! [X24,X23] : (s(bool,X24) = s(bool,'|dollar|exists_1'(s(fun(X23,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1664,f246])).
fof(f1664,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,'|dollar|exists_1'(s(fun(X23,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X24)) )),
  inference(superposition,[],[f1150,f1545])).
fof(f1677,plain,(
  ( ! [X26,X27,X25] : (s(bool,X27) = s(bool,'const.bool.DATATYPE_1'(s(X25,X26))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(subsumption_resolution,[],[f1665,f246])).
fof(f1665,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,'T_0')) | s(bool,X27) = s(bool,'const.bool.DATATYPE_1'(s(X25,X26))) | s(bool,'F_0') = s(bool,X27)) )),
  inference(superposition,[],[f1150,f289])).
fof(f1738,plain,(
  ( ! [X47,X48,X49] : (s(bool,X47) = s(bool,'const.bool.DATATYPE_1'(s(X48,X49))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X47)))) )),
  inference(superposition,[],[f1677,f290])).
fof(f1739,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s(bool,X51) = s(bool,'const.bool.DATATYPE_1'(s(X53,X54))) | s(bool,'F_0') = s(bool,happ(s(fun(X50,bool),'_dst_x0_1'(s(bool,X51))),s(X50,X52)))) )),
  inference(superposition,[],[f1677,f330])).
fof(f1740,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,X55) = s(bool,'const.bool.DATATYPE_1'(s(X57,X58))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X55),s(fun('type.num.num',bool),X56),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1677,f295])).
fof(f1799,plain,(
  ( ! [X146,X144,X145,X143] : (s(bool,X146) != s(bool,'const.bool.DATATYPE_1'(s(X144,X145))) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X143))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X146))) | s(bool,'F_0') = s(bool,X143)) )),
  inference(superposition,[],[f303,f1677])).
fof(f1833,plain,(
  ( ! [X94,X92,X95,X93] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X94))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X95))) | s(bool,X95) = s(bool,'const.bool.DATATYPE_1'(s(X92,X93))) | s(bool,'F_0') = s(bool,X94)) )),
  inference(superposition,[],[f302,f1677])).
fof(f1868,plain,(
  ( ! [X68,X71] : (p(s(bool,'|dollar|exists_1'(s(fun(X71,bool),'_dst_x0_1'(s(bool,X68)))))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f1867,f246])).
fof(f1867,plain,(
  ( ! [X68,X71] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X71,bool),'_dst_x0_1'(s(bool,X68)))))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(forward_demodulation,[],[f1785,f289])).
fof(f1785,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X69,X70)))) | p(s(bool,'|dollar|exists_1'(s(fun(X71,bool),'_dst_x0_1'(s(bool,X68)))))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(superposition,[],[f1169,f1677])).
fof(f1872,plain,(
  ( ! [X99,X100] : (p(s(bool,X99)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X99))),s(bool,X100)))) )),
  inference(subsumption_resolution,[],[f1871,f246])).
fof(f1871,plain,(
  ( ! [X99,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X99))),s(bool,X100)))) )),
  inference(forward_demodulation,[],[f1787,f289])).
fof(f1787,plain,(
  ( ! [X101,X99,X102,X100] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X101,X102)))) | p(s(bool,X99)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X99))),s(bool,X100)))) )),
  inference(superposition,[],[f320,f1677])).
fof(f1874,plain,(
  ( ! [X138,X135] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X138))) | s(bool,X135) = s(bool,X138) | s(bool,'F_0') = s(bool,X135)) )),
  inference(forward_demodulation,[],[f1797,f289])).
fof(f1797,plain,(
  ( ! [X138,X136,X135,X137] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X138))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'const.bool.DATATYPE_1'(s(X136,X137))))) | s(bool,X135) = s(bool,X138) | s(bool,'F_0') = s(bool,X135)) )),
  inference(superposition,[],[f302,f1677])).
fof(f1891,plain,(
  ( ! [X103,X102] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X103))) | s(bool,X102) != s(bool,X103) | s(bool,'F_0') = s(bool,X102)) )),
  inference(forward_demodulation,[],[f1835,f289])).
fof(f1835,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X102) != s(bool,X103) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X103))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'const.bool.DATATYPE_1'(s(X100,X101))))) | s(bool,'F_0') = s(bool,X102)) )),
  inference(superposition,[],[f303,f1677])).
fof(f1997,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(subsumption_resolution,[],[f1996,f246])).
fof(f1996,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(forward_demodulation,[],[f1975,f289])).
fof(f1975,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X2,X3)))) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(superposition,[],[f321,f1677])).
fof(f2216,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X2))))) | s(bool,'F_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f2192,f248])).
fof(f2192,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X2)))))) )),
  inference(superposition,[],[f1868,f250])).
fof(f2280,plain,(
  ( ! [X57,X56] : (s(bool,X56) = s(bool,X57) | s(bool,'F_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X56)))) )),
  inference(superposition,[],[f1759,f290])).
fof(f2281,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X59) = s(bool,X61) | s(bool,'F_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(X58,bool),'_dst_x0_1'(s(bool,X59))),s(X58,X60)))) )),
  inference(superposition,[],[f1759,f330])).
fof(f2282,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) = s(bool,X64) | s(bool,'F_0') = s(bool,X64) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X62),s(fun('type.num.num',bool),X63),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1759,f295])).
fof(f2332,plain,(
  ( ! [X45,X44] : (s(bool,'F_0') = s(bool,X44) | s(bool,X45) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X44))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f1759,f290])).
fof(f2333,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'F_0') = s(bool,X47) | s(bool,X49) = s(bool,happ(s(fun(X46,bool),'_dst_x0_1'(s(bool,X47))),s(X46,X48))) | s(bool,'F_0') = s(bool,X49)) )),
  inference(superposition,[],[f1759,f330])).
fof(f2334,plain,(
  ( ! [X52,X50,X51] : (s(bool,'F_0') = s(bool,X50) | s(bool,X52) = s(bool,'const.ind_type.FCONS_3'(s(bool,X50),s(fun('type.num.num',bool),X51),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X52)) )),
  inference(superposition,[],[f1759,f295])).
fof(f2414,plain,(
  ( ! [X136,X135,X137] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X136))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X137))) | s(bool,X135) = s(bool,X137) | s(bool,'F_0') = s(bool,X136) | s(bool,'F_0') = s(bool,X135)) )),
  inference(superposition,[],[f302,f1759])).
fof(f2416,plain,(
  ( ! [X142,X143,X141] : (s(bool,X142) != s(bool,X143) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X141))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X143))) | s(bool,'F_0') = s(bool,X142) | s(bool,'F_0') = s(bool,X141)) )),
  inference(superposition,[],[f303,f1759])).
fof(f2491,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,X6) | ~p(s(bool,X6)) | s(bool,X5) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f255,f1759])).
fof(f2521,plain,(
  ( ! [X94,X95,X93] : (s(bool,X93) != s(bool,X94) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X94))) | s(bool,X93) = s(bool,X95) | s(bool,'F_0') = s(bool,X95)) )),
  inference(superposition,[],[f303,f1759])).
fof(f2573,plain,(
  ( ! [X125,X123,X124] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X124))) | s(bool,X123) = s(bool,X124) | s(bool,X123) = s(bool,X125) | s(bool,'F_0') = s(bool,X125)) )),
  inference(superposition,[],[f302,f1759])).
fof(f2575,plain,(
  ( ! [X130,X131,X129] : (s(bool,'F_0') != s(bool,X130) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X129))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X130))) | s(bool,X129) = s(bool,X131) | s(bool,'F_0') = s(bool,X131)) )),
  inference(superposition,[],[f303,f1759])).
fof(f2883,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X29))),s(bool,X30)))) | s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,X31)) )),
  inference(subsumption_resolution,[],[f2501,f248])).
fof(f2501,plain,(
  ( ! [X30,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X29))),s(bool,X30)))) | p(s(bool,'F_0')) | s(bool,X29) = s(bool,X31) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f320,f1759])).
fof(f2884,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X39))),s(bool,X38)))) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f2504,f248])).
fof(f2504,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X39))),s(bool,X38)))) | p(s(bool,'F_0')) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(superposition,[],[f321,f1759])).
fof(f2885,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f2531,f248])).
fof(f2531,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) )),
  inference(superposition,[],[f312,f1759])).
fof(f2895,plain,(
  ( ! [X94,X97,X95,X96] : (s(X94,X96) = s(X94,sK4(X96,X95,X94)) | s(bool,X97) = s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(subsumption_resolution,[],[f2563,f248])).
fof(f2563,plain,(
  ( ! [X94,X97,X95,X96] : (p(s(bool,'F_0')) | s(X94,X96) = s(X94,sK4(X96,X95,X94)) | s(bool,X97) = s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(superposition,[],[f298,f1759])).
fof(f2896,plain,(
  ( ! [X101,X102,X100] : (s(bool,'F_0') = s(bool,X101) | s(bool,X102) = s(bool,'|dollar|exists_1'(s(fun(X100,bool),'_dst_x0_1'(s(bool,X101))))) | s(bool,'F_0') = s(bool,X102)) )),
  inference(subsumption_resolution,[],[f2565,f248])).
fof(f2565,plain,(
  ( ! [X101,X102,X100] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,X101) | s(bool,X102) = s(bool,'|dollar|exists_1'(s(fun(X100,bool),'_dst_x0_1'(s(bool,X101))))) | s(bool,'F_0') = s(bool,X102)) )),
  inference(superposition,[],[f1868,f1759])).
fof(f2939,plain,(
  ( ! [X57,X56] : (s(bool,X56) != s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X56)))) )),
  inference(superposition,[],[f1864,f290])).
fof(f2940,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X59) != s(bool,X61) | s(bool,'T_0') = s(bool,X61) | s(bool,'F_0') = s(bool,happ(s(fun(X58,bool),'_dst_x0_1'(s(bool,X59))),s(X58,X60)))) )),
  inference(superposition,[],[f1864,f330])).
fof(f2941,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X64) | s(bool,'T_0') = s(bool,X64) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X62),s(fun('type.num.num',bool),X63),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1864,f295])).
fof(f2963,plain,(
  ( ! [X57,X56] : (s(bool,X56) != s(bool,X57) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X56))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(superposition,[],[f1864,f290])).
fof(f2964,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X59) != s(bool,X61) | s(bool,'T_0') = s(bool,happ(s(fun(X58,bool),'_dst_x0_1'(s(bool,X59))),s(X58,X60))) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f1864,f330])).
fof(f2965,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X64) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X62),s(fun('type.num.num',bool),X63),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X64)) )),
  inference(superposition,[],[f1864,f295])).
fof(f3069,plain,(
  ( ! [X59,X58] : (s(bool,'T_0') != s(bool,X58) | s(bool,X59) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X58))) | s(bool,'F_0') = s(bool,X59)) )),
  inference(superposition,[],[f2492,f290])).
fof(f3070,plain,(
  ( ! [X61,X62,X60,X63] : (s(bool,'T_0') != s(bool,X61) | s(bool,X63) = s(bool,happ(s(fun(X60,bool),'_dst_x0_1'(s(bool,X61))),s(X60,X62))) | s(bool,'F_0') = s(bool,X63)) )),
  inference(superposition,[],[f2492,f330])).
fof(f3071,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') != s(bool,X64) | s(bool,X66) = s(bool,'const.ind_type.FCONS_3'(s(bool,X64),s(fun('type.num.num',bool),X65),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X66)) )),
  inference(superposition,[],[f2492,f295])).
fof(f3296,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X38))),s(bool,X39)))) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f3234,f248])).
fof(f3234,plain,(
  ( ! [X39,X38,X40] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X38))),s(bool,X39)))) | p(s(bool,'F_0')) | s(bool,X38) = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) )),
  inference(superposition,[],[f327,f1759])).
fof(f3309,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,X20)) | s(bool,X22) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X20))),s(bool,X21))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f3278,f248])).
fof(f3278,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | p(s(bool,X20)) | s(bool,X22) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X20))),s(bool,X21))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f327,f1759])).
fof(f3310,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X1))) | s(bool,'T_0') = s(bool,sK4(X0,X1,bool))) )),
  inference(superposition,[],[f562,f250])).
fof(f3316,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,X16) = s(bool,'const.bool.DATATYPE_1'(s(X18,X19))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X17))) | s(bool,'F_0') = s(bool,sK4(X16,X17,bool))) )),
  inference(superposition,[],[f562,f1677])).
fof(f3317,plain,(
  ( ! [X21,X22,X20] : (s(bool,'F_0') = s(bool,X20) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X21))) | s(bool,X22) = s(bool,sK4(X20,X21,bool)) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f562,f1759])).
fof(f3319,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X27))) | s(bool,'F_0') = s(bool,sK4(X26,X27,bool)) | s(bool,'F_0') = s(bool,X28)) )),
  inference(superposition,[],[f562,f1759])).
fof(f3351,plain,(
  ( ! [X57,X56] : (s(bool,'F_0') != s(bool,X56) | ~p(s(bool,sK4(X56,X57,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X57)))) )),
  inference(superposition,[],[f255,f562])).
fof(f3352,plain,(
  ( ! [X59,X58] : (p(s(bool,X58)) | s(bool,'F_0') = s(bool,sK4(X58,X59,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X59)))) )),
  inference(superposition,[],[f256,f562])).
fof(f3369,plain,(
  ( ! [X109,X108] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X108))) | s(bool,'F_0') = s(bool,sK4(X108,X109,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X109)))) )),
  inference(superposition,[],[f429,f562])).
fof(f3372,plain,(
  ( ! [X118,X119,X117] : (~p(s(bool,X117)) | s(bool,X119) = s(bool,sK4(X117,X118,bool)) | s(bool,'F_0') = s(bool,X119) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X118)))) )),
  inference(superposition,[],[f1150,f562])).
fof(f3381,plain,(
  ( ! [X144,X145,X143] : (s(bool,X143) != s(bool,X145) | s(bool,'T_0') = s(bool,X145) | s(bool,'F_0') = s(bool,sK4(X143,X144,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X144)))) )),
  inference(superposition,[],[f1864,f562])).
fof(f3382,plain,(
  ( ! [X146,X147,X148] : (s(bool,X146) != s(bool,X148) | s(bool,'T_0') = s(bool,sK4(X146,X147,bool)) | s(bool,'F_0') = s(bool,X148) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X147)))) )),
  inference(superposition,[],[f1864,f562])).
fof(f3383,plain,(
  ( ! [X151,X149,X150] : (p(s(bool,'|dollar|exists_1'(s(fun(X151,bool),'_dst_x0_1'(s(bool,X149)))))) | s(bool,'F_0') = s(bool,sK4(X149,X150,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X150)))) )),
  inference(superposition,[],[f1868,f562])).
fof(f3384,plain,(
  ( ! [X154,X152,X153] : (s(bool,'T_0') != s(bool,X152) | s(bool,X154) = s(bool,sK4(X152,X153,bool)) | s(bool,'F_0') = s(bool,X154) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X153)))) )),
  inference(superposition,[],[f2492,f562])).
fof(f3572,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f1251,f251])).
fof(f3581,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f381,f1251,f454])).
fof(f3644,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f3579,f359])).
fof(f3579,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f1251,f321])).
fof(f3672,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f3622,f246])).
fof(f3622,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1251,f396])).
fof(f3675,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'F_0')))) )),
  inference(unit_resulting_resolution,[],[f1942,f251])).
fof(f3684,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'F_0')))) )),
  inference(unit_resulting_resolution,[],[f381,f1942,f454])).
fof(f3747,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))))),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f3682,f359])).
fof(f3682,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))),s(bool,'F_0'))))))) )),
  inference(unit_resulting_resolution,[],[f1942,f321])).
fof(f3778,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f3725,f246])).
fof(f3725,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1942,f396])).
fof(f3913,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X13))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f3863,f248])).
fof(f3863,plain,(
  ( ! [X14,X13] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X13))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f2221,f1759])).
fof(f4175,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X1),s('type.num.num',X2))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),X1),s('type.num.num','const.num.SUC_1'(s('type.num.num',X2)))))) )),
  inference(superposition,[],[f304,f250])).
fof(f4182,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),X28),s('type.num.num',X29))) | s(bool,X30) = s(bool,'const.ind_type.FCONS_3'(s(bool,X27),s(fun('type.num.num',bool),X28),s('type.num.num','const.num.SUC_1'(s('type.num.num',X29))))) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f304,f1759])).
fof(f4184,plain,(
  ( ! [X37,X35,X38,X36] : (s(bool,X38) = s(bool,happ(s(fun('type.num.num',bool),X36),s('type.num.num',X37))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X35),s(fun('type.num.num',bool),X36),s('type.num.num','const.num.SUC_1'(s('type.num.num',X37))))) | s(bool,'F_0') = s(bool,X38)) )),
  inference(superposition,[],[f304,f1759])).
fof(f4222,plain,(
  ( ! [X154,X152,X153] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.num.num',bool),X153),s('type.num.num',X154))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X152),s(fun('type.num.num',bool),X153),s('type.num.num','const.num.SUC_1'(s('type.num.num',X154)))))) )),
  inference(superposition,[],[f429,f304])).
fof(f4234,plain,(
  ( ! [X202,X200,X199,X201] : (s(bool,X202) != s(bool,happ(s(fun('type.num.num',bool),X200),s('type.num.num',X201))) | s(bool,'T_0') = s(bool,X202) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X199),s(fun('type.num.num',bool),X200),s('type.num.num','const.num.SUC_1'(s('type.num.num',X201)))))) )),
  inference(superposition,[],[f1864,f304])).
fof(f4235,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,X206) != s(bool,happ(s(fun('type.num.num',bool),X204),s('type.num.num',X205))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X203),s(fun('type.num.num',bool),X204),s('type.num.num','const.num.SUC_1'(s('type.num.num',X205))))) | s(bool,'F_0') = s(bool,X206)) )),
  inference(superposition,[],[f1864,f304])).
fof(f4237,plain,(
  ( ! [X212,X213,X211,X214] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X212),s('type.num.num',X213))) | s(bool,X214) = s(bool,'const.ind_type.FCONS_3'(s(bool,X211),s(fun('type.num.num',bool),X212),s('type.num.num','const.num.SUC_1'(s('type.num.num',X213))))) | s(bool,'F_0') = s(bool,X214)) )),
  inference(superposition,[],[f2492,f304])).
fof(f4482,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f999,f337])).
fof(f4484,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f999,f337])).
fof(f4487,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X5)))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f337,f250])).
fof(f4494,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X25)))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f337,f1759])).
fof(f4496,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X31))),s(bool,X32)))) | s(bool,X30) = s(bool,X32) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f337,f1759])).
fof(f4500,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X42))),s(bool,X43)))) | s(bool,'F_0') = s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f337,f1759])).
fof(f4502,plain,(
  ( ! [X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X48))),s(bool,X49)))) | s(bool,'F_0') = s(bool,X49) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f337,f250])).
fof(f4519,plain,(
  ( ! [X4,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X5))),s(bool,'F_0')))) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f337,f250])).
fof(f4526,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,'F_0')))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f337,f1759])).
fof(f4715,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X5)))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f338,f250])).
fof(f4722,plain,(
  ( ! [X26,X24,X25] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,X25)))) | s(bool,X24) != s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4724,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X31))),s(bool,X32)))) | s(bool,X30) != s(bool,X32) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4728,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X42))),s(bool,X43)))) | s(bool,'F_0') != s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4730,plain,(
  ( ! [X48,X49] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X48))),s(bool,X49)))) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f338,f250])).
fof(f4747,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X5))),s(bool,'F_0')))) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f338,f250])).
fof(f4754,plain,(
  ( ! [X26,X24,X25] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,'F_0')))) | s(bool,X24) != s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4756,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X32))),s(bool,X31)))) | s(bool,X30) != s(bool,X32) | s(bool,'F_0') = s(bool,X30) | s(bool,'F_0') = s(bool,X31)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4760,plain,(
  ( ! [X43,X44,X42] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X43))),s(bool,X42)))) | s(bool,'F_0') != s(bool,X43) | s(bool,X42) = s(bool,X44) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f338,f1759])).
fof(f4762,plain,(
  ( ! [X48,X49] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X49))),s(bool,X48)))) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f338,f250])).
fof(f4873,plain,(
  ( ! [X30,X28,X29,X27] : (s(X27,X28) != s(X27,X29) | s(bool,X30) = s(bool,happ(s(fun(X27,bool),happ(s(fun(X27,fun(X27,bool)),'=_0'),s(X27,X28))),s(X27,X29))) | s(bool,'F_0') = s(bool,X30)) )),
  inference(subsumption_resolution,[],[f4784,f248])).
fof(f4784,plain,(
  ( ! [X30,X28,X29,X27] : (p(s(bool,'F_0')) | s(X27,X28) != s(X27,X29) | s(bool,X30) = s(bool,happ(s(fun(X27,bool),happ(s(fun(X27,fun(X27,bool)),'=_0'),s(X27,X28))),s(X27,X29))) | s(bool,'F_0') = s(bool,X30)) )),
  inference(superposition,[],[f338,f1759])).
fof(f5281,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X0)))) | s(bool,'T_0') = s(bool,sK8(X0,bool))) )),
  inference(superposition,[],[f317,f250])).
fof(f5288,plain,(
  ( ! [X14,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X13)))) | s(bool,X14) = s(bool,sK8(X13,bool)) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f317,f1759])).
fof(f5290,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X18)))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X17)))) | s(bool,'F_0') = s(bool,sK8(X17,bool)) | s(bool,'F_0') = s(bool,X18)) )),
  inference(superposition,[],[f317,f1759])).
fof(f12395,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X13))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f12322,f248])).
fof(f12322,plain,(
  ( ! [X14,X13] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X13))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f2990,f1759])).
fof(f12545,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X15))))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f12463,f248])).
fof(f12463,plain,(
  ( ! [X15,X16] : (p(s(bool,'F_0')) | s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X15))))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(superposition,[],[f12249,f1759])).
fof(f12592,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f381,f3220,f1150])).
fof(f12679,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f12585,f359])).
fof(f12585,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f3220,f328])).
fof(f12680,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f12584,f359])).
fof(f12584,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f3220,f325])).
fof(f13015,plain,(
  ( ! [X14,X13] : (s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X13))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f12944,f248])).
fof(f12944,plain,(
  ( ! [X14,X13] : (p(s(bool,'F_0')) | s(bool,X14) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X13))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f3523,f1759])).
fof(f13167,plain,(
  ( ! [X15,X16] : (s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X15))))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f13083,f248])).
fof(f13083,plain,(
  ( ! [X15,X16] : (p(s(bool,'F_0')) | s(bool,X16) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X15))))) | s(bool,'F_0') = s(bool,X16)) )),
  inference(superposition,[],[f12871,f1759])).
fof(f13494,plain,(
  ( ! [X21,X22,X20] : (s(bool,X22) = s(bool,happ(s(fun(X20,bool),happ(s(fun(X20,fun(X20,bool)),'=_0'),s(X20,X21))),s(X20,X21))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f13411,f248])).
fof(f13411,plain,(
  ( ! [X21,X22,X20] : (p(s(bool,'F_0')) | s(bool,X22) = s(bool,happ(s(fun(X20,bool),happ(s(fun(X20,fun(X20,bool)),'=_0'),s(X20,X21))),s(X20,X21))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f4794,f1759])).
fof(f13647,plain,(
  ( ! [X24,X23,X25] : (s(bool,X25) = s(bool,'|dollar|exists_1'(s(fun(X23,bool),happ(s(fun(X23,fun(X23,bool)),'=_0'),s(X23,X24))))) | s(bool,'F_0') = s(bool,X25)) )),
  inference(subsumption_resolution,[],[f13564,f248])).
fof(f13564,plain,(
  ( ! [X24,X23,X25] : (p(s(bool,'F_0')) | s(bool,X25) = s(bool,'|dollar|exists_1'(s(fun(X23,bool),happ(s(fun(X23,fun(X23,bool)),'=_0'),s(X23,X24))))) | s(bool,'F_0') = s(bool,X25)) )),
  inference(superposition,[],[f13343,f1759])).
fof(f13994,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f13963,f248])).
fof(f13963,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X6)) )),
  inference(superposition,[],[f5672,f1759])).
fof(f14063,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f14030,f248])).
fof(f14030,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f13930,f1759])).
fof(f14121,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f4481,f251])).
fof(f14176,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))))),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f14128,f359])).
fof(f14128,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))))))) )),
  inference(unit_resulting_resolution,[],[f4481,f321])).
fof(f14183,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f14154,f246])).
fof(f14154,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4481,f396])).
fof(f14187,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f4483,f316])).
fof(f14188,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0')))),
  inference(unit_resulting_resolution,[],[f4483,f251])).
fof(f14243,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f14195,f359])).
fof(f14195,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f4483,f321])).
fof(f14250,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f14221,f246])).
fof(f14221,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4483,f396])).
fof(f14409,plain,(
  ( ! [X87,X86] : (s(bool,X86) = s(bool,'|dollar|exists_1'(s(fun(X87,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X86)))) )),
  inference(superposition,[],[f1676,f290])).
fof(f14410,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,X89) = s(bool,'|dollar|exists_1'(s(fun(X91,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,happ(s(fun(X88,bool),'_dst_x0_1'(s(bool,X89))),s(X88,X90)))) )),
  inference(superposition,[],[f1676,f330])).
fof(f14411,plain,(
  ( ! [X94,X92,X93] : (s(bool,X92) = s(bool,'|dollar|exists_1'(s(fun(X94,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X92),s(fun('type.num.num',bool),X93),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1676,f295])).
fof(f14413,plain,(
  ( ! [X101,X99,X100] : (s(bool,X99) = s(bool,'|dollar|exists_1'(s(fun(X101,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,sK4(X99,X100,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X100)))) )),
  inference(superposition,[],[f1676,f562])).
fof(f14414,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) = s(bool,'|dollar|exists_1'(s(fun(X2,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1676,f396])).
fof(f14515,plain,(
  ( ! [X241,X242,X240] : (s(bool,X242) != s(bool,'|dollar|exists_1'(s(fun(X241,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X240))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X242))) | s(bool,'F_0') = s(bool,X240)) )),
  inference(superposition,[],[f303,f1676])).
fof(f14589,plain,(
  ( ! [X146,X147,X145] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X146))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X147))) | s(bool,X147) = s(bool,'|dollar|exists_1'(s(fun(X145,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X146)) )),
  inference(superposition,[],[f302,f1676])).
fof(f14688,plain,(
  ( ! [X261,X263] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X263)))) | s(bool,X261) = s(bool,X263) | s(bool,'F_0') = s(bool,X261)) )),
  inference(forward_demodulation,[],[f14521,f1545])).
fof(f14521,plain,(
  ( ! [X261,X263,X262] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'|dollar|exists_1'(s(fun(X262,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(bool,X263)))) | s(bool,X261) = s(bool,X263) | s(bool,'F_0') = s(bool,X261)) )),
  inference(superposition,[],[f337,f1676])).
fof(f14689,plain,(
  ( ! [X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X266))),s(bool,'T_0')))) | s(bool,X264) = s(bool,X266) | s(bool,'F_0') = s(bool,X264)) )),
  inference(forward_demodulation,[],[f14522,f1545])).
fof(f14522,plain,(
  ( ! [X265,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X266))),s(bool,'|dollar|exists_1'(s(fun(X265,bool),'_dst_x0_1'(s(bool,'T_0')))))))) | s(bool,X264) = s(bool,X266) | s(bool,'F_0') = s(bool,X264)) )),
  inference(superposition,[],[f337,f1676])).
fof(f14690,plain,(
  ( ! [X269,X267] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X269)))) | s(bool,X267) != s(bool,X269) | s(bool,'F_0') = s(bool,X267)) )),
  inference(forward_demodulation,[],[f14523,f1545])).
fof(f14523,plain,(
  ( ! [X269,X267,X268] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'|dollar|exists_1'(s(fun(X268,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(bool,X269)))) | s(bool,X267) != s(bool,X269) | s(bool,'F_0') = s(bool,X267)) )),
  inference(superposition,[],[f338,f1676])).
fof(f14691,plain,(
  ( ! [X270,X272] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X272))),s(bool,'T_0')))) | s(bool,X270) != s(bool,X272) | s(bool,'F_0') = s(bool,X270)) )),
  inference(forward_demodulation,[],[f14524,f1545])).
fof(f14524,plain,(
  ( ! [X271,X270,X272] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X272))),s(bool,'|dollar|exists_1'(s(fun(X271,bool),'_dst_x0_1'(s(bool,'T_0')))))))) | s(bool,X270) != s(bool,X272) | s(bool,'F_0') = s(bool,X270)) )),
  inference(superposition,[],[f338,f1676])).
fof(f14693,plain,(
  ( ! [X301] : (~p(s(bool,happ(s(fun(bool,bool),X301),s(bool,'T_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X301)))) | s(bool,'F_0') = s(bool,sK8(X301,bool))) )),
  inference(forward_demodulation,[],[f14534,f1545])).
fof(f14534,plain,(
  ( ! [X302,X301] : (~p(s(bool,happ(s(fun(bool,bool),X301),s(bool,'|dollar|exists_1'(s(fun(X302,bool),'_dst_x0_1'(s(bool,'T_0')))))))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X301)))) | s(bool,'F_0') = s(bool,sK8(X301,bool))) )),
  inference(superposition,[],[f317,f1676])).
fof(f14722,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') = s(bool,X174) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X173))),s(bool,X174)))) | s(bool,'F_0') = s(bool,X173)) )),
  inference(forward_demodulation,[],[f14597,f1545])).
fof(f14597,plain,(
  ( ! [X173,X174,X172] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X173))),s(bool,X174)))) | s(bool,X174) = s(bool,'|dollar|exists_1'(s(fun(X172,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X173)) )),
  inference(superposition,[],[f337,f1676])).
fof(f14724,plain,(
  ( ! [X180,X179] : (s(bool,'T_0') != s(bool,X180) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X179))),s(bool,X180)))) | s(bool,'F_0') = s(bool,X179)) )),
  inference(forward_demodulation,[],[f14599,f1545])).
fof(f14599,plain,(
  ( ! [X180,X178,X179] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X179))),s(bool,X180)))) | s(bool,X180) != s(bool,'|dollar|exists_1'(s(fun(X178,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X179)) )),
  inference(superposition,[],[f338,f1676])).
fof(f14725,plain,(
  ( ! [X182,X183] : (s(bool,'T_0') != s(bool,X183) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X183))),s(bool,X182)))) | s(bool,'F_0') = s(bool,X182)) )),
  inference(forward_demodulation,[],[f14600,f1545])).
fof(f14600,plain,(
  ( ! [X182,X183,X181] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X183))),s(bool,X182)))) | s(bool,X183) != s(bool,'|dollar|exists_1'(s(fun(X181,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X182)) )),
  inference(superposition,[],[f338,f1676])).
fof(f14777,plain,(
  ( ! [X57,X58] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X57))),s(bool,X58)))) | ~p(s(bool,X58)) | s(bool,'F_0') = s(bool,X57)) )),
  inference(forward_demodulation,[],[f14776,f290])).
fof(f14776,plain,(
  ( ! [X57,X58] : (~p(s(bool,X58)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X57))))),s(bool,X58)))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f14750,f246])).
fof(f14750,plain,(
  ( ! [X57,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X58)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X57))))),s(bool,X58)))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(superposition,[],[f322,f429])).
fof(f15243,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X0))))) )),
  inference(condensation,[],[f15242])).
fof(f15242,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f15139,f251])).
fof(f15139,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f323,f250])).
fof(f15251,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47))),s(bool,X48)))) | p(s(bool,X48)) | s(bool,X47) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f15156,f248])).
fof(f15156,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47))),s(bool,X48)))) | p(s(bool,'F_0')) | p(s(bool,X48)) | s(bool,X47) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) )),
  inference(superposition,[],[f323,f1759])).
fof(f15306,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'F_0'))))) )),
  inference(condensation,[],[f15305])).
fof(f15305,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f15183,f251])).
fof(f15183,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f323,f250])).
fof(f15314,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X48))),s(bool,X47)))) | p(s(bool,X48)) | s(bool,X47) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f15200,f248])).
fof(f15200,plain,(
  ( ! [X47,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X48))),s(bool,X47)))) | p(s(bool,X48)) | p(s(bool,'F_0')) | s(bool,X47) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) )),
  inference(superposition,[],[f323,f1759])).
fof(f15381,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f15138,f316])).
fof(f15382,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f15138,f251])).
fof(f15398,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f15138,f1759])).
fof(f15441,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))))),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f15389,f359])).
fof(f15389,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))))))) )),
  inference(unit_resulting_resolution,[],[f15138,f321])).
fof(f15446,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f15411,f246])).
fof(f15411,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f15138,f396])).
fof(f15667,plain,(
  ( ! [X57,X58] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X57))),s(bool,X58)))) | p(s(bool,X58)) | s(bool,'F_0') = s(bool,X57)) )),
  inference(forward_demodulation,[],[f15666,f290])).
fof(f15666,plain,(
  ( ! [X57,X58] : (p(s(bool,X58)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X57))))),s(bool,X58)))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f15627,f246])).
fof(f15627,plain,(
  ( ! [X57,X58] : (~p(s(bool,'T_0')) | p(s(bool,X58)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X57))))),s(bool,X58)))) | s(bool,'F_0') = s(bool,X57)) )),
  inference(superposition,[],[f326,f429])).
fof(f15709,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f15604,f251])).
fof(f15726,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'F_0')))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f15604,f396])).
fof(f15734,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f15604,f1759])).
fof(f15770,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'F_0'))))),
  inference(forward_demodulation,[],[f15721,f359])).
fof(f15721,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f246,f15604,f326])).
fof(f15780,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'F_0'))))) )),
  inference(forward_demodulation,[],[f15716,f359])).
fof(f15716,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))))) )),
  inference(unit_resulting_resolution,[],[f15604,f321])).
fof(f15787,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f15747,f246])).
fof(f15747,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f15604,f396])).
fof(f16054,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X1))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'_dstsel_0_x0_1'(s(X0,X1))),s(fun(X0,bool),X2)))) )),
  inference(superposition,[],[f333,f250])).
fof(f16062,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') = s(bool,happ(s(fun(X31,bool),X33),s(X31,X32))) | s(bool,X34) = s(bool,happ(s(fun(fun(X31,bool),bool),'_dstsel_0_x0_1'(s(X31,X32))),s(fun(X31,bool),X33))) | s(bool,'F_0') = s(bool,X34)) )),
  inference(superposition,[],[f333,f1759])).
fof(f16064,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X42) = s(bool,happ(s(fun(X39,bool),X41),s(X39,X40))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X39,bool),bool),'_dstsel_0_x0_1'(s(X39,X40))),s(fun(X39,bool),X41))) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f333,f1759])).
fof(f16118,plain,(
  ( ! [X206,X207,X205] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X205,bool),X207),s(X205,X206))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X205,bool),bool),'_dstsel_0_x0_1'(s(X205,X206))),s(fun(X205,bool),X207)))) )),
  inference(superposition,[],[f429,f333])).
fof(f16132,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,X263) != s(bool,happ(s(fun(X260,bool),X262),s(X260,X261))) | s(bool,'T_0') = s(bool,X263) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X260,bool),bool),'_dstsel_0_x0_1'(s(X260,X261))),s(fun(X260,bool),X262)))) )),
  inference(superposition,[],[f1864,f333])).
fof(f16133,plain,(
  ( ! [X265,X267,X264,X266] : (s(bool,X267) != s(bool,happ(s(fun(X264,bool),X266),s(X264,X265))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X264,bool),bool),'_dstsel_0_x0_1'(s(X264,X265))),s(fun(X264,bool),X266))) | s(bool,'F_0') = s(bool,X267)) )),
  inference(superposition,[],[f1864,f333])).
fof(f16135,plain,(
  ( ! [X273,X275,X272,X274] : (s(bool,'T_0') != s(bool,happ(s(fun(X272,bool),X274),s(X272,X273))) | s(bool,X275) = s(bool,happ(s(fun(fun(X272,bool),bool),'_dstsel_0_x0_1'(s(X272,X273))),s(fun(X272,bool),X274))) | s(bool,'F_0') = s(bool,X275)) )),
  inference(superposition,[],[f2492,f333])).
fof(f16589,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK11(X0,X1,X2,bool))) )),
  inference(superposition,[],[f334,f250])).
fof(f16597,plain,(
  ( ! [X33,X31,X34,X32] : (s(X33,f(s(bool,'F_0'))) != s(X33,g(s(bool,'F_0'))) | s(fun(bool,X33),X31) = s(fun(bool,X33),X32) | s(bool,X34) = s(bool,sK11(X31,X32,X33,bool)) | s(bool,'F_0') = s(bool,X34)) )),
  inference(superposition,[],[f334,f1759])).
fof(f16599,plain,(
  ( ! [X39,X41,X42,X40] : (s(X41,f(s(bool,X42))) != s(X41,g(s(bool,X42))) | s(fun(bool,X41),X39) = s(fun(bool,X41),X40) | s(bool,'F_0') = s(bool,sK11(X39,X40,X41,bool)) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f334,f1759])).
fof(f16604,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK11(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK11(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f334,f250])).
fof(f16612,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'F_0') != s(bool,f(s(X31,sK11(X32,X33,bool,X31)))) | s(fun(X31,bool),X32) = s(fun(X31,bool),X33) | s(bool,X34) = s(bool,g(s(X31,sK11(X32,X33,bool,X31)))) | s(bool,'F_0') = s(bool,X34)) )),
  inference(superposition,[],[f334,f1759])).
fof(f16614,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X42) != s(bool,f(s(X39,sK11(X40,X41,bool,X39)))) | s(fun(X39,bool),X40) = s(fun(X39,bool),X41) | s(bool,'F_0') = s(bool,g(s(X39,sK11(X40,X41,bool,X39)))) | s(bool,'F_0') = s(bool,X42)) )),
  inference(superposition,[],[f334,f1759])).
fof(f16982,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))),s('type.benchmark.times'(bool),X0))) != s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))),s('type.benchmark.times'(bool),X1)))) )),
  inference(unit_resulting_resolution,[],[f999,f308])).
fof(f17069,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),X0),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))))) != s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),X1),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f999,f309])).
fof(f17228,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X1))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))),s(fun(X0,bool),X2),s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),X3)))) )),
  inference(superposition,[],[f335,f250])).
fof(f17236,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X39,bool),X41),s(X39,X40))) | s(bool,X43) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X39),'const.benchmark.Once_1'(s(X39,X40))),s(fun(X39,bool),X41),s(fun('type.benchmark.times'(X39),fun('type.benchmark.times'(X39),bool)),X42))) | s(bool,'F_0') = s(bool,X43)) )),
  inference(superposition,[],[f335,f1759])).
fof(f17238,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X53) = s(bool,happ(s(fun(X49,bool),X51),s(X49,X50))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X49),'const.benchmark.Once_1'(s(X49,X50))),s(fun(X49,bool),X51),s(fun('type.benchmark.times'(X49),fun('type.benchmark.times'(X49),bool)),X52))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f335,f1759])).
fof(f17304,plain,(
  ( ! [X321,X323,X324,X320,X322] : (s(bool,X324) != s(bool,happ(s(fun(X320,bool),X322),s(X320,X321))) | s(bool,'T_0') = s(bool,X324) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X320),'const.benchmark.Once_1'(s(X320,X321))),s(fun(X320,bool),X322),s(fun('type.benchmark.times'(X320),fun('type.benchmark.times'(X320),bool)),X323)))) )),
  inference(superposition,[],[f1864,f335])).
fof(f17305,plain,(
  ( ! [X325,X327,X329,X326,X328] : (s(bool,X329) != s(bool,happ(s(fun(X325,bool),X327),s(X325,X326))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X325),'const.benchmark.Once_1'(s(X325,X326))),s(fun(X325,bool),X327),s(fun('type.benchmark.times'(X325),fun('type.benchmark.times'(X325),bool)),X328))) | s(bool,'F_0') = s(bool,X329)) )),
  inference(superposition,[],[f1864,f335])).
fof(f17309,plain,(
  ( ! [X344,X346,X343,X345,X347] : (s(bool,'T_0') != s(bool,happ(s(fun(X343,bool),X345),s(X343,X344))) | s(bool,X347) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X343),'const.benchmark.Once_1'(s(X343,X344))),s(fun(X343,bool),X345),s(fun('type.benchmark.times'(X343),fun('type.benchmark.times'(X343),bool)),X346))) | s(bool,'F_0') = s(bool,X347)) )),
  inference(superposition,[],[f2492,f335])).
fof(f17684,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X38,bool),'_dst_x0x1_2'(s(fun(X36,bool),X37),s(fun(X38,X36),X39))),s(X38,X40))) | s(bool,'T_0') = s(bool,happ(s(fun(X36,bool),X37),s(X36,happ(s(fun(X38,X36),X39),s(X38,X40)))))) )),
  inference(superposition,[],[f340,f250])).
fof(f17692,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (s(bool,'F_0') = s(bool,happ(s(fun(X85,bool),'_dst_x0x1_2'(s(fun(X83,bool),X84),s(fun(X85,X83),X86))),s(X85,X87))) | s(bool,X88) = s(bool,happ(s(fun(X83,bool),X84),s(X83,happ(s(fun(X85,X83),X86),s(X85,X87))))) | s(bool,'F_0') = s(bool,X88)) )),
  inference(superposition,[],[f340,f1759])).
fof(f17694,plain,(
  ( ! [X99,X97,X95,X100,X98,X96] : (s(bool,X100) = s(bool,happ(s(fun(X97,bool),'_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun(X97,X95),X98))),s(X97,X99))) | s(bool,'F_0') = s(bool,happ(s(fun(X95,bool),X96),s(X95,happ(s(fun(X97,X95),X98),s(X97,X99))))) | s(bool,'F_0') = s(bool,X100)) )),
  inference(superposition,[],[f340,f1759])).
fof(f17824,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s(bool,'F_0') != s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X245,bool),X246),s(fun(X247,X245),X248))),s(X247,X249))) | ~p(s(bool,happ(s(fun(X245,bool),X246),s(X245,happ(s(fun(X247,X245),X248),s(X247,X249))))))) )),
  inference(superposition,[],[f255,f340])).
fof(f17825,plain,(
  ( ! [X253,X251,X254,X252,X250] : (p(s(bool,happ(s(fun(X252,bool),'_dst_x0x1_2'(s(fun(X250,bool),X251),s(fun(X252,X250),X253))),s(X252,X254)))) | s(bool,'F_0') = s(bool,happ(s(fun(X250,bool),X251),s(X250,happ(s(fun(X252,X250),X253),s(X252,X254)))))) )),
  inference(superposition,[],[f256,f340])).
fof(f17847,plain,(
  ( ! [X383,X385,X382,X384,X381] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X383,bool),'_dst_x0x1_2'(s(fun(X381,bool),X382),s(fun(X383,X381),X384))),s(X383,X385))))) | s(bool,'F_0') = s(bool,happ(s(fun(X381,bool),X382),s(X381,happ(s(fun(X383,X381),X384),s(X383,X385)))))) )),
  inference(superposition,[],[f429,f340])).
fof(f17850,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (~p(s(bool,happ(s(fun(X401,bool),'_dst_x0x1_2'(s(fun(X399,bool),X400),s(fun(X401,X399),X402))),s(X401,X403)))) | s(bool,X404) = s(bool,happ(s(fun(X399,bool),X400),s(X399,happ(s(fun(X401,X399),X402),s(X401,X403))))) | s(bool,'F_0') = s(bool,X404)) )),
  inference(superposition,[],[f1150,f340])).
fof(f17861,plain,(
  ( ! [X466,X469,X465,X467,X468,X464] : (s(bool,X469) != s(bool,happ(s(fun(X466,bool),'_dst_x0x1_2'(s(fun(X464,bool),X465),s(fun(X466,X464),X467))),s(X466,X468))) | s(bool,'T_0') = s(bool,X469) | s(bool,'F_0') = s(bool,happ(s(fun(X464,bool),X465),s(X464,happ(s(fun(X466,X464),X467),s(X466,X468)))))) )),
  inference(superposition,[],[f1864,f340])).
fof(f17862,plain,(
  ( ! [X472,X474,X471,X475,X473,X470] : (s(bool,X475) != s(bool,happ(s(fun(X472,bool),'_dst_x0x1_2'(s(fun(X470,bool),X471),s(fun(X472,X470),X473))),s(X472,X474))) | s(bool,'T_0') = s(bool,happ(s(fun(X470,bool),X471),s(X470,happ(s(fun(X472,X470),X473),s(X472,X474))))) | s(bool,'F_0') = s(bool,X475)) )),
  inference(superposition,[],[f1864,f340])).
fof(f17863,plain,(
  ( ! [X476,X478,X480,X477,X479,X481] : (p(s(bool,'|dollar|exists_1'(s(fun(X481,bool),'_dst_x0_1'(s(bool,happ(s(fun(X478,bool),'_dst_x0x1_2'(s(fun(X476,bool),X477),s(fun(X478,X476),X479))),s(X478,X480)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X476,bool),X477),s(X476,happ(s(fun(X478,X476),X479),s(X478,X480)))))) )),
  inference(superposition,[],[f1868,f340])).
fof(f17866,plain,(
  ( ! [X492,X494,X496,X493,X495,X497] : (s(bool,'T_0') != s(bool,happ(s(fun(X494,bool),'_dst_x0x1_2'(s(fun(X492,bool),X493),s(fun(X494,X492),X495))),s(X494,X496))) | s(bool,X497) = s(bool,happ(s(fun(X492,bool),X493),s(X492,happ(s(fun(X494,X492),X495),s(X494,X496))))) | s(bool,'F_0') = s(bool,X497)) )),
  inference(superposition,[],[f2492,f340])).
fof(f17945,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,'F_0') != s(bool,happ(s(fun(X198,bool),X199),s(X198,happ(s(fun(X197,X198),X200),s(X197,X201))))) | ~p(s(bool,happ(s(fun(X197,bool),'_dst_x0x1_2'(s(fun(X198,bool),X199),s(fun(X197,X198),X200))),s(X197,X201))))) )),
  inference(superposition,[],[f255,f340])).
fof(f17946,plain,(
  ( ! [X206,X204,X202,X205,X203] : (p(s(bool,happ(s(fun(X203,bool),X204),s(X203,happ(s(fun(X202,X203),X205),s(X202,X206)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X202,bool),'_dst_x0x1_2'(s(fun(X203,bool),X204),s(fun(X202,X203),X205))),s(X202,X206)))) )),
  inference(superposition,[],[f256,f340])).
fof(f17968,plain,(
  ( ! [X333,X335,X337,X334,X336] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X334,bool),X335),s(X334,happ(s(fun(X333,X334),X336),s(X333,X337))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X333,bool),'_dst_x0x1_2'(s(fun(X334,bool),X335),s(fun(X333,X334),X336))),s(X333,X337)))) )),
  inference(superposition,[],[f429,f340])).
fof(f17971,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (~p(s(bool,happ(s(fun(X352,bool),X353),s(X352,happ(s(fun(X351,X352),X354),s(X351,X355)))))) | s(bool,X356) = s(bool,happ(s(fun(X351,bool),'_dst_x0x1_2'(s(fun(X352,bool),X353),s(fun(X351,X352),X354))),s(X351,X355))) | s(bool,'F_0') = s(bool,X356)) )),
  inference(superposition,[],[f1150,f340])).
fof(f17982,plain,(
  ( ! [X420,X416,X418,X421,X417,X419] : (s(bool,X421) != s(bool,happ(s(fun(X417,bool),X418),s(X417,happ(s(fun(X416,X417),X419),s(X416,X420))))) | s(bool,'T_0') = s(bool,X421) | s(bool,'F_0') = s(bool,happ(s(fun(X416,bool),'_dst_x0x1_2'(s(fun(X417,bool),X418),s(fun(X416,X417),X419))),s(X416,X420)))) )),
  inference(superposition,[],[f1864,f340])).
fof(f17983,plain,(
  ( ! [X422,X424,X426,X423,X425,X427] : (s(bool,X427) != s(bool,happ(s(fun(X423,bool),X424),s(X423,happ(s(fun(X422,X423),X425),s(X422,X426))))) | s(bool,'T_0') = s(bool,happ(s(fun(X422,bool),'_dst_x0x1_2'(s(fun(X423,bool),X424),s(fun(X422,X423),X425))),s(X422,X426))) | s(bool,'F_0') = s(bool,X427)) )),
  inference(superposition,[],[f1864,f340])).
fof(f17984,plain,(
  ( ! [X428,X430,X432,X429,X431,X433] : (p(s(bool,'|dollar|exists_1'(s(fun(X433,bool),'_dst_x0_1'(s(bool,happ(s(fun(X429,bool),X430),s(X429,happ(s(fun(X428,X429),X431),s(X428,X432)))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X428,bool),'_dst_x0x1_2'(s(fun(X429,bool),X430),s(fun(X428,X429),X431))),s(X428,X432)))) )),
  inference(superposition,[],[f1868,f340])).
fof(f17987,plain,(
  ( ! [X445,X447,X449,X444,X446,X448] : (s(bool,'T_0') != s(bool,happ(s(fun(X445,bool),X446),s(X445,happ(s(fun(X444,X445),X447),s(X444,X448))))) | s(bool,X449) = s(bool,happ(s(fun(X444,bool),'_dst_x0x1_2'(s(fun(X445,bool),X446),s(fun(X444,X445),X447))),s(X444,X448))) | s(bool,'F_0') = s(bool,X449)) )),
  inference(superposition,[],[f2492,f340])).
fof(f18127,plain,(
  ( ! [X103,X105,X106,X104] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,X104))))) | s(bool,'F_0') = s(bool,happ(s(fun(X103,bool),'_dst_x0_1'(s(bool,X104))),s(X103,X105)))) )),
  inference(superposition,[],[f2216,f330])).
fof(f18128,plain,(
  ( ! [X111,X109,X107,X112,X110,X108] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X112,bool),'_dst_x0_1'(s(bool,happ(s(fun(X109,bool),'_dst_x0x1_2'(s(fun(X107,bool),X108),s(fun(X109,X107),X110))),s(X109,X111))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X107,bool),X108),s(X107,happ(s(fun(X109,X107),X110),s(X109,X111)))))) )),
  inference(superposition,[],[f2216,f340])).
fof(f18129,plain,(
  ( ! [X118,X116,X114,X117,X115,X113] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X118,bool),'_dst_x0_1'(s(bool,happ(s(fun(X114,bool),X115),s(X114,happ(s(fun(X113,X114),X116),s(X113,X117))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X113,bool),'_dst_x0x1_2'(s(fun(X114,bool),X115),s(fun(X113,X114),X116))),s(X113,X117)))) )),
  inference(superposition,[],[f2216,f340])).
fof(f18130,plain,(
  ( ! [X121,X122,X120,X119] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X122,bool),'_dst_x0_1'(s(bool,happ(s(fun(X119,bool),X121),s(X119,X120))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X119,bool),bool),'_dstsel_0_x0_1'(s(X119,X120))),s(fun(X119,bool),X121)))) )),
  inference(superposition,[],[f2216,f333])).
fof(f18131,plain,(
  ( ! [X127,X125,X123,X126,X124] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X127,bool),'_dst_x0_1'(s(bool,happ(s(fun(X123,bool),X125),s(X123,X124))))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X123),'const.benchmark.Once_1'(s(X123,X124))),s(fun(X123,bool),X125),s(fun('type.benchmark.times'(X123),fun('type.benchmark.times'(X123),bool)),X126)))) )),
  inference(superposition,[],[f2216,f335])).
fof(f18132,plain,(
  ( ! [X130,X128,X129] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X130,bool),'_dst_x0_1'(s(bool,X128))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X128),s(fun('type.num.num',bool),X129),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f2216,f295])).
fof(f18133,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X134,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.num.num',bool),X132),s('type.num.num',X133))))))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X131),s(fun('type.num.num',bool),X132),s('type.num.num','const.num.SUC_1'(s('type.num.num',X133)))))) )),
  inference(superposition,[],[f2216,f304])).
fof(f18134,plain,(
  ( ! [X136,X135,X137] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X137,bool),'_dst_x0_1'(s(bool,X135))))) | s(bool,'F_0') = s(bool,sK4(X135,X136,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X136)))) )),
  inference(superposition,[],[f2216,f562])).
fof(f18210,plain,(
  ( ! [X169,X170,X168] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X170))) | s(bool,X170) = s(bool,'|dollar|exists_1'(s(fun(X168,bool),'_dst_x0_1'(s(bool,X169))))) | s(bool,'F_0') = s(bool,X169)) )),
  inference(superposition,[],[f302,f2216])).
fof(f18212,plain,(
  ( ! [X175,X176,X174] : (s(bool,'T_0') != s(bool,X176) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X176))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'|dollar|exists_1'(s(fun(X174,bool),'_dst_x0_1'(s(bool,X175))))))) | s(bool,'F_0') = s(bool,X175)) )),
  inference(superposition,[],[f303,f2216])).
fof(f18220,plain,(
  ( ! [X206,X204,X205] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X206)))) | s(bool,X206) = s(bool,'|dollar|exists_1'(s(fun(X204,bool),'_dst_x0_1'(s(bool,X205))))) | s(bool,'F_0') = s(bool,X205)) )),
  inference(superposition,[],[f337,f2216])).
fof(f18221,plain,(
  ( ! [X208,X209,X207] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X209))),s(bool,'T_0')))) | s(bool,X209) = s(bool,'|dollar|exists_1'(s(fun(X207,bool),'_dst_x0_1'(s(bool,X208))))) | s(bool,'F_0') = s(bool,X208)) )),
  inference(superposition,[],[f337,f2216])).
fof(f18222,plain,(
  ( ! [X212,X210,X211] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X212)))) | s(bool,X212) != s(bool,'|dollar|exists_1'(s(fun(X210,bool),'_dst_x0_1'(s(bool,X211))))) | s(bool,'F_0') = s(bool,X211)) )),
  inference(superposition,[],[f338,f2216])).
fof(f18223,plain,(
  ( ! [X215,X213,X214] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X215))),s(bool,'T_0')))) | s(bool,X215) != s(bool,'|dollar|exists_1'(s(fun(X213,bool),'_dst_x0_1'(s(bool,X214))))) | s(bool,'F_0') = s(bool,X214)) )),
  inference(superposition,[],[f338,f2216])).
fof(f18260,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,X30)) | s(bool,X30) = s(bool,'|dollar|exists_1'(s(fun(X28,bool),'_dst_x0_1'(s(bool,X29))))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f18160,f246])).
fof(f18160,plain,(
  ( ! [X30,X28,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X30)) | s(bool,X30) = s(bool,'|dollar|exists_1'(s(fun(X28,bool),'_dst_x0_1'(s(bool,X29))))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(superposition,[],[f315,f2216])).
fof(f18261,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,X45)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'|dollar|exists_1'(s(fun(X43,bool),'_dst_x0_1'(s(bool,X44))))))),s(bool,X45)))) | s(bool,'F_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f18165,f246])).
fof(f18165,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,'T_0')) | ~p(s(bool,X45)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'|dollar|exists_1'(s(fun(X43,bool),'_dst_x0_1'(s(bool,X44))))))),s(bool,X45)))) | s(bool,'F_0') = s(bool,X44)) )),
  inference(superposition,[],[f322,f2216])).
fof(f18262,plain,(
  ( ! [X54,X52,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X52,bool),'_dst_x0_1'(s(bool,X53))))))),s(bool,X54)))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f18168,f246])).
fof(f18168,plain,(
  ( ! [X54,X52,X53] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X52,bool),'_dst_x0_1'(s(bool,X53))))))),s(bool,X54)))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f324,f2216])).
fof(f18263,plain,(
  ( ! [X57,X56,X55] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X57))),s(bool,'|dollar|exists_1'(s(fun(X55,bool),'_dst_x0_1'(s(bool,X56)))))))) | s(bool,'F_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f18169,f246])).
fof(f18169,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X57))),s(bool,'|dollar|exists_1'(s(fun(X55,bool),'_dst_x0_1'(s(bool,X56)))))))) | s(bool,'F_0') = s(bool,X56)) )),
  inference(superposition,[],[f325,f2216])).
fof(f18264,plain,(
  ( ! [X59,X60,X58] : (p(s(bool,X60)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X58,bool),'_dst_x0_1'(s(bool,X59))))))),s(bool,X60)))) | s(bool,'F_0') = s(bool,X59)) )),
  inference(subsumption_resolution,[],[f18170,f246])).
fof(f18170,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,X60)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X58,bool),'_dst_x0_1'(s(bool,X59))))))),s(bool,X60)))) | s(bool,'F_0') = s(bool,X59)) )),
  inference(superposition,[],[f326,f2216])).
fof(f18265,plain,(
  ( ! [X68,X69,X67] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X69))),s(bool,'|dollar|exists_1'(s(fun(X67,bool),'_dst_x0_1'(s(bool,X68)))))))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f18173,f246])).
fof(f18173,plain,(
  ( ! [X68,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X69))),s(bool,'|dollar|exists_1'(s(fun(X67,bool),'_dst_x0_1'(s(bool,X68)))))))) | s(bool,'F_0') = s(bool,X68)) )),
  inference(superposition,[],[f328,f2216])).
fof(f18266,plain,(
  ( ! [X80,X81,X82] : (s(bool,X82) != s(bool,'|dollar|exists_1'(s(fun(X80,bool),'_dst_x0_1'(s(bool,X81))))) | s(bool,'T_0') = s(bool,X82) | s(bool,'F_0') = s(bool,X81)) )),
  inference(subsumption_resolution,[],[f18176,f246])).
fof(f18176,plain,(
  ( ! [X80,X81,X82] : (~p(s(bool,'T_0')) | s(bool,X82) != s(bool,'|dollar|exists_1'(s(fun(X80,bool),'_dst_x0_1'(s(bool,X81))))) | s(bool,'T_0') = s(bool,X82) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f399,f2216])).
fof(f18267,plain,(
  ( ! [X97,X95,X96] : (p(s(bool,'|dollar|exists_1'(s(fun(X97,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X95,bool),'_dst_x0_1'(s(bool,X96)))))))))) | s(bool,'F_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f18181,f246])).
fof(f18181,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X97,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X95,bool),'_dst_x0_1'(s(bool,X96)))))))))) | s(bool,'F_0') = s(bool,X96)) )),
  inference(superposition,[],[f1169,f2216])).
fof(f23899,plain,(
  ( ! [X171,X169,X170] : (s(X169,X170) = s(X169,X171) | s(bool,'F_0') = s(bool,happ(s(fun(X169,bool),happ(s(fun(X169,fun(X169,bool)),'=_0'),s(X169,X170))),s(X169,X171)))) )),
  inference(subsumption_resolution,[],[f23898,f246])).
fof(f23898,plain,(
  ( ! [X171,X169,X170] : (~p(s(bool,'T_0')) | s(X169,X170) = s(X169,X171) | s(bool,'F_0') = s(bool,happ(s(fun(X169,bool),happ(s(fun(X169,fun(X169,bool)),'=_0'),s(X169,X170))),s(X169,X171)))) )),
  inference(forward_demodulation,[],[f14495,f1545])).
fof(f14495,plain,(
  ( ! [X171,X169,X172,X170] : (~p(s(bool,'|dollar|exists_1'(s(fun(X172,bool),'_dst_x0_1'(s(bool,'T_0')))))) | s(X169,X170) = s(X169,X171) | s(bool,'F_0') = s(bool,happ(s(fun(X169,bool),happ(s(fun(X169,fun(X169,bool)),'=_0'),s(X169,X170))),s(X169,X171)))) )),
  inference(superposition,[],[f337,f1676])).
fof(f23903,plain,(
  ( ! [X163,X162] : (p(s(bool,happ(s(fun(fun(X162,bool),bool),'!_1'),s(fun(X162,bool),X163)))) | s(bool,'F_0') = s(bool,happ(s(fun(X162,bool),X163),s(X162,sK8(X163,X162))))) )),
  inference(subsumption_resolution,[],[f23902,f246])).
fof(f23902,plain,(
  ( ! [X163,X162] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X162,bool),bool),'!_1'),s(fun(X162,bool),X163)))) | s(bool,'F_0') = s(bool,happ(s(fun(X162,bool),X163),s(X162,sK8(X163,X162))))) )),
  inference(forward_demodulation,[],[f14493,f1545])).
fof(f14493,plain,(
  ( ! [X163,X164,X162] : (~p(s(bool,'|dollar|exists_1'(s(fun(X164,bool),'_dst_x0_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun(fun(X162,bool),bool),'!_1'),s(fun(X162,bool),X163)))) | s(bool,'F_0') = s(bool,happ(s(fun(X162,bool),X163),s(X162,sK8(X163,X162))))) )),
  inference(superposition,[],[f317,f1676])).
fof(f23905,plain,(
  ( ! [X147,X148] : (p(s(bool,happ(s(fun(X147,bool),X148),s(X147,sK9(X148,X147))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X147,bool),bool),'?_1'),s(fun(X147,bool),X148)))) )),
  inference(subsumption_resolution,[],[f23904,f246])).
fof(f23904,plain,(
  ( ! [X147,X148] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X147,bool),X148),s(X147,sK9(X148,X147))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X147,bool),bool),'?_1'),s(fun(X147,bool),X148)))) )),
  inference(forward_demodulation,[],[f14489,f1545])).
fof(f14489,plain,(
  ( ! [X149,X147,X148] : (~p(s(bool,'|dollar|exists_1'(s(fun(X149,bool),'_dst_x0_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun(X147,bool),X148),s(X147,sK9(X148,X147))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X147,bool),bool),'?_1'),s(fun(X147,bool),X148)))) )),
  inference(superposition,[],[f318,f1676])).
fof(f28708,plain,(
  ( ! [X10,X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X9),s(bool,sK6(X8,X9,bool))))) | s(bool,'T_0') = s(bool,sK5(X8,X9,bool))) )),
  inference(superposition,[],[f301,f250])).
fof(f28715,plain,(
  ( ! [X39,X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X36),s(bool,X38)))) | p(s(bool,happ(s(fun(bool,bool),X37),s(bool,sK6(X36,X37,bool))))) | s(bool,X39) = s(bool,sK5(X36,X37,bool)) | s(bool,'F_0') = s(bool,X39)) )),
  inference(superposition,[],[f301,f1759])).
fof(f28717,plain,(
  ( ! [X47,X45,X46,X44] : (~p(s(bool,happ(s(fun(bool,bool),X45),s(bool,X46)))) | ~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X47)))) | p(s(bool,happ(s(fun(bool,bool),X45),s(bool,sK6(X44,X45,bool))))) | s(bool,'F_0') = s(bool,sK5(X44,X45,bool)) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f301,f1759])).
fof(f28767,plain,(
  ( ! [X30,X28,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X30)))) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,sK6(X27,X28,bool))))) | s(bool,'F_0') = s(bool,sK5(X27,X28,bool))) )),
  inference(forward_demodulation,[],[f28713,f1545])).
fof(f28713,plain,(
  ( ! [X30,X28,X29,X27] : (~p(s(bool,happ(s(fun(bool,bool),X28),s(bool,'|dollar|exists_1'(s(fun(X29,bool),'_dst_x0_1'(s(bool,'T_0')))))))) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X30)))) | p(s(bool,happ(s(fun(bool,bool),X28),s(bool,sK6(X27,X28,bool))))) | s(bool,'F_0') = s(bool,sK5(X27,X28,bool))) )),
  inference(superposition,[],[f301,f1676])).
fof(f28777,plain,(
  ( ! [X2,X3] : (p(s(bool,sK6(X2,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK5(X2,'_i_0_0',bool))) )),
  inference(forward_demodulation,[],[f28776,f290])).
fof(f28776,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X2,'_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK5(X2,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f28727,f246])).
fof(f28727,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X2,'_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK5(X2,'_i_0_0',bool))) )),
  inference(superposition,[],[f301,f429])).
fof(f28780,plain,(
  ( ! [X30,X28,X29,X32] : (~p(s(bool,happ(s(fun(X28,bool),X30),s(X28,X32)))) | p(s(bool,happ(s(fun(X28,bool),X29),s(X28,sK6(X30,X29,X28))))) | s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),X29),s(X28,sK5(X30,X29,X28))))) )),
  inference(subsumption_resolution,[],[f28779,f246])).
fof(f28779,plain,(
  ( ! [X30,X28,X29,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X28,bool),X30),s(X28,X32)))) | p(s(bool,happ(s(fun(X28,bool),X29),s(X28,sK6(X30,X29,X28))))) | s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),X29),s(X28,sK5(X30,X29,X28))))) )),
  inference(forward_demodulation,[],[f28733,f1545])).
fof(f28733,plain,(
  ( ! [X30,X28,X31,X29,X32] : (~p(s(bool,'|dollar|exists_1'(s(fun(X31,bool),'_dst_x0_1'(s(bool,'T_0')))))) | ~p(s(bool,happ(s(fun(X28,bool),X30),s(X28,X32)))) | p(s(bool,happ(s(fun(X28,bool),X29),s(X28,sK6(X30,X29,X28))))) | s(bool,'F_0') = s(bool,happ(s(fun(X28,bool),X29),s(X28,sK5(X30,X29,X28))))) )),
  inference(superposition,[],[f301,f1676])).
fof(f31522,plain,(
  ( ! [X14,X17,X15,X18,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X15,bool),happ(s(fun(X14,fun(X15,bool)),X16),s(X14,X18))),s(X15,X17))) | s(bool,'T_0') = s(bool,happ(s(fun(X14,bool),'_dst_x1x0_2'(s(fun(X14,fun(X15,bool)),X16),s(X15,X17))),s(X14,X18)))) )),
  inference(superposition,[],[f341,f250])).
fof(f31529,plain,(
  ( ! [X61,X59,X57,X60,X58,X56] : (s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),happ(s(fun(X56,fun(X57,bool)),X58),s(X56,X60))),s(X57,X59))) | s(bool,X61) = s(bool,happ(s(fun(X56,bool),'_dst_x1x0_2'(s(fun(X56,fun(X57,bool)),X58),s(X57,X59))),s(X56,X60))) | s(bool,'F_0') = s(bool,X61)) )),
  inference(superposition,[],[f341,f1759])).
fof(f31531,plain,(
  ( ! [X70,X68,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(X69,bool),happ(s(fun(X68,fun(X69,bool)),X70),s(X68,X72))),s(X69,X71))) | s(bool,'F_0') = s(bool,happ(s(fun(X68,bool),'_dst_x1x0_2'(s(fun(X68,fun(X69,bool)),X70),s(X69,X71))),s(X68,X72))) | s(bool,'F_0') = s(bool,X73)) )),
  inference(superposition,[],[f341,f1759])).
fof(f31775,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s(bool,'F_0') != s(bool,happ(s(fun(X256,bool),happ(s(fun(X255,fun(X256,bool)),X257),s(X255,X259))),s(X256,X258))) | ~p(s(bool,happ(s(fun(X255,bool),'_dst_x1x0_2'(s(fun(X255,fun(X256,bool)),X257),s(X256,X258))),s(X255,X259))))) )),
  inference(superposition,[],[f255,f341])).
fof(f31776,plain,(
  ( ! [X261,X263,X260,X262,X264] : (p(s(bool,happ(s(fun(X261,bool),happ(s(fun(X260,fun(X261,bool)),X262),s(X260,X264))),s(X261,X263)))) | s(bool,'F_0') = s(bool,happ(s(fun(X260,bool),'_dst_x1x0_2'(s(fun(X260,fun(X261,bool)),X262),s(X261,X263))),s(X260,X264)))) )),
  inference(superposition,[],[f256,f341])).
fof(f31798,plain,(
  ( ! [X391,X393,X395,X392,X394] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X392,bool),happ(s(fun(X391,fun(X392,bool)),X393),s(X391,X395))),s(X392,X394))))) | s(bool,'F_0') = s(bool,happ(s(fun(X391,bool),'_dst_x1x0_2'(s(fun(X391,fun(X392,bool)),X393),s(X392,X394))),s(X391,X395)))) )),
  inference(superposition,[],[f429,f341])).
fof(f31801,plain,(
  ( ! [X412,X414,X410,X413,X409,X411] : (~p(s(bool,happ(s(fun(X410,bool),happ(s(fun(X409,fun(X410,bool)),X411),s(X409,X413))),s(X410,X412)))) | s(bool,X414) = s(bool,happ(s(fun(X409,bool),'_dst_x1x0_2'(s(fun(X409,fun(X410,bool)),X411),s(X410,X412))),s(X409,X413))) | s(bool,'F_0') = s(bool,X414)) )),
  inference(superposition,[],[f1150,f341])).
fof(f31810,plain,(
  ( ! [X466,X469,X465,X467,X468,X464] : (s(bool,X469) != s(bool,happ(s(fun(X465,bool),happ(s(fun(X464,fun(X465,bool)),X466),s(X464,X468))),s(X465,X467))) | s(bool,'T_0') = s(bool,X469) | s(bool,'F_0') = s(bool,happ(s(fun(X464,bool),'_dst_x1x0_2'(s(fun(X464,fun(X465,bool)),X466),s(X465,X467))),s(X464,X468)))) )),
  inference(superposition,[],[f1864,f341])).
fof(f31811,plain,(
  ( ! [X472,X474,X471,X475,X473,X470] : (s(bool,X475) != s(bool,happ(s(fun(X471,bool),happ(s(fun(X470,fun(X471,bool)),X472),s(X470,X474))),s(X471,X473))) | s(bool,'T_0') = s(bool,happ(s(fun(X470,bool),'_dst_x1x0_2'(s(fun(X470,fun(X471,bool)),X472),s(X471,X473))),s(X470,X474))) | s(bool,'F_0') = s(bool,X475)) )),
  inference(superposition,[],[f1864,f341])).
fof(f31812,plain,(
  ( ! [X476,X478,X480,X477,X479,X481] : (p(s(bool,'|dollar|exists_1'(s(fun(X481,bool),'_dst_x0_1'(s(bool,happ(s(fun(X477,bool),happ(s(fun(X476,fun(X477,bool)),X478),s(X476,X480))),s(X477,X479)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X476,bool),'_dst_x1x0_2'(s(fun(X476,fun(X477,bool)),X478),s(X477,X479))),s(X476,X480)))) )),
  inference(superposition,[],[f1868,f341])).
fof(f31813,plain,(
  ( ! [X484,X486,X482,X485,X487,X483] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X487,bool),'_dst_x0_1'(s(bool,happ(s(fun(X483,bool),happ(s(fun(X482,fun(X483,bool)),X484),s(X482,X486))),s(X483,X485))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X482,bool),'_dst_x1x0_2'(s(fun(X482,fun(X483,bool)),X484),s(X483,X485))),s(X482,X486)))) )),
  inference(superposition,[],[f2216,f341])).
fof(f31814,plain,(
  ( ! [X492,X488,X490,X493,X489,X491] : (s(bool,'T_0') != s(bool,happ(s(fun(X489,bool),happ(s(fun(X488,fun(X489,bool)),X490),s(X488,X492))),s(X489,X491))) | s(bool,X493) = s(bool,happ(s(fun(X488,bool),'_dst_x1x0_2'(s(fun(X488,fun(X489,bool)),X490),s(X489,X491))),s(X488,X492))) | s(bool,'F_0') = s(bool,X493)) )),
  inference(superposition,[],[f2492,f341])).
fof(f31936,plain,(
  ( ! [X269,X271,X273,X270,X272] : (s(bool,'F_0') != s(bool,happ(s(fun(X270,bool),'_dst_x1x0_2'(s(fun(X270,fun(X269,bool)),X271),s(X269,X273))),s(X270,X272))) | ~p(s(bool,happ(s(fun(X269,bool),happ(s(fun(X270,fun(X269,bool)),X271),s(X270,X272))),s(X269,X273))))) )),
  inference(superposition,[],[f255,f341])).
fof(f31937,plain,(
  ( ! [X277,X275,X276,X278,X274] : (p(s(bool,happ(s(fun(X275,bool),'_dst_x1x0_2'(s(fun(X275,fun(X274,bool)),X276),s(X274,X278))),s(X275,X277)))) | s(bool,'F_0') = s(bool,happ(s(fun(X274,bool),happ(s(fun(X275,fun(X274,bool)),X276),s(X275,X277))),s(X274,X278)))) )),
  inference(superposition,[],[f256,f341])).
fof(f31959,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X406,bool),'_dst_x1x0_2'(s(fun(X406,fun(X405,bool)),X407),s(X405,X409))),s(X406,X408))))) | s(bool,'F_0') = s(bool,happ(s(fun(X405,bool),happ(s(fun(X406,fun(X405,bool)),X407),s(X406,X408))),s(X405,X409)))) )),
  inference(superposition,[],[f429,f341])).
fof(f31962,plain,(
  ( ! [X428,X424,X426,X423,X425,X427] : (~p(s(bool,happ(s(fun(X424,bool),'_dst_x1x0_2'(s(fun(X424,fun(X423,bool)),X425),s(X423,X427))),s(X424,X426)))) | s(bool,X428) = s(bool,happ(s(fun(X423,bool),happ(s(fun(X424,fun(X423,bool)),X425),s(X424,X426))),s(X423,X427))) | s(bool,'F_0') = s(bool,X428)) )),
  inference(superposition,[],[f1150,f341])).
fof(f31971,plain,(
  ( ! [X478,X480,X482,X479,X481,X483] : (s(bool,X483) != s(bool,happ(s(fun(X479,bool),'_dst_x1x0_2'(s(fun(X479,fun(X478,bool)),X480),s(X478,X482))),s(X479,X481))) | s(bool,'T_0') = s(bool,X483) | s(bool,'F_0') = s(bool,happ(s(fun(X478,bool),happ(s(fun(X479,fun(X478,bool)),X480),s(X479,X481))),s(X478,X482)))) )),
  inference(superposition,[],[f1864,f341])).
fof(f31972,plain,(
  ( ! [X484,X486,X488,X485,X487,X489] : (s(bool,X489) != s(bool,happ(s(fun(X485,bool),'_dst_x1x0_2'(s(fun(X485,fun(X484,bool)),X486),s(X484,X488))),s(X485,X487))) | s(bool,'T_0') = s(bool,happ(s(fun(X484,bool),happ(s(fun(X485,fun(X484,bool)),X486),s(X485,X487))),s(X484,X488))) | s(bool,'F_0') = s(bool,X489)) )),
  inference(superposition,[],[f1864,f341])).
fof(f31973,plain,(
  ( ! [X492,X494,X490,X493,X495,X491] : (p(s(bool,'|dollar|exists_1'(s(fun(X495,bool),'_dst_x0_1'(s(bool,happ(s(fun(X491,bool),'_dst_x1x0_2'(s(fun(X491,fun(X490,bool)),X492),s(X490,X494))),s(X491,X493)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X490,bool),happ(s(fun(X491,fun(X490,bool)),X492),s(X491,X493))),s(X490,X494)))) )),
  inference(superposition,[],[f1868,f341])).
fof(f31974,plain,(
  ( ! [X499,X500,X496,X498,X501,X497] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X501,bool),'_dst_x0_1'(s(bool,happ(s(fun(X497,bool),'_dst_x1x0_2'(s(fun(X497,fun(X496,bool)),X498),s(X496,X500))),s(X497,X499))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X496,bool),happ(s(fun(X497,fun(X496,bool)),X498),s(X497,X499))),s(X496,X500)))) )),
  inference(superposition,[],[f2216,f341])).
fof(f31975,plain,(
  ( ! [X505,X507,X502,X504,X506,X503] : (s(bool,'T_0') != s(bool,happ(s(fun(X503,bool),'_dst_x1x0_2'(s(fun(X503,fun(X502,bool)),X504),s(X502,X506))),s(X503,X505))) | s(bool,X507) = s(bool,happ(s(fun(X502,bool),happ(s(fun(X503,fun(X502,bool)),X504),s(X503,X505))),s(X502,X506))) | s(bool,'F_0') = s(bool,X507)) )),
  inference(superposition,[],[f2492,f341])).
fof(f32143,plain,(
  ( ! [X47,X45,X43,X46,X44] : (s(bool,'T_0') = s(bool,happ(s(fun(X44,bool),happ(s(fun(X43,fun(X44,bool)),X45),s(X43,X47))),s(X44,X46))) | s(bool,'F_0') = s(bool,happ(s(fun(X43,bool),'_dst_x1x0_2'(s(fun(X43,fun(X44,bool)),X45),s(X44,X46))),s(X43,X47)))) )),
  inference(forward_demodulation,[],[f31527,f1545])).
fof(f31527,plain,(
  ( ! [X47,X45,X43,X48,X46,X44] : (s(bool,'|dollar|exists_1'(s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun(X44,bool),happ(s(fun(X43,fun(X44,bool)),X45),s(X43,X47))),s(X44,X46))) | s(bool,'F_0') = s(bool,happ(s(fun(X43,bool),'_dst_x1x0_2'(s(fun(X43,fun(X44,bool)),X45),s(X44,X46))),s(X43,X47)))) )),
  inference(superposition,[],[f341,f1676])).
fof(f32438,plain,(
  ( ! [X14,X16] : (p(s(bool,happ(s(fun(fun(X16,bool),bool),'?_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f32437,f246])).
fof(f32437,plain,(
  ( ! [X14,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X16,bool),bool),'?_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f32369,f1545])).
fof(f32369,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'|dollar|exists_1'(s(fun(X15,bool),'_dst_x0_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun(fun(X16,bool),bool),'?_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f4018,f1676])).
fof(f32466,plain,(
  ( ! [X92,X90,X91] : (p(s(bool,happ(s(fun(fun(X92,bool),bool),'?_1'),s(fun(X92,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X90,bool),'_dst_x0_1'(s(bool,X91)))))))))) | s(bool,'F_0') = s(bool,X91)) )),
  inference(subsumption_resolution,[],[f32404,f246])).
fof(f32404,plain,(
  ( ! [X92,X90,X91] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X92,bool),bool),'?_1'),s(fun(X92,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X90,bool),'_dst_x0_1'(s(bool,X91)))))))))) | s(bool,'F_0') = s(bool,X91)) )),
  inference(superposition,[],[f4018,f2216])).
fof(f32709,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X15),s(fun('type.num.num',bool),X14),s('type.num.num',X16))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X14))),s(bool,X15))),s('type.num.num',X16)))) )),
  inference(superposition,[],[f377,f250])).
fof(f32716,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X43),s(fun('type.num.num',bool),X42),s('type.num.num',X44))) | s(bool,X45) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X42))),s(bool,X43))),s('type.num.num',X44))) | s(bool,'F_0') = s(bool,X45)) )),
  inference(superposition,[],[f377,f1759])).
fof(f32718,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,X53) = s(bool,'const.ind_type.FCONS_3'(s(bool,X51),s(fun('type.num.num',bool),X50),s('type.num.num',X52))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X50))),s(bool,X51))),s('type.num.num',X52))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f377,f1759])).
fof(f32803,plain,(
  ( ! [X337,X339,X340,X338] : (s(bool,X340) != s(bool,'const.ind_type.FCONS_3'(s(bool,X338),s(fun('type.num.num',bool),X337),s('type.num.num',X339))) | s(bool,'T_0') = s(bool,X340) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X337))),s(bool,X338))),s('type.num.num',X339)))) )),
  inference(superposition,[],[f1864,f377])).
fof(f32804,plain,(
  ( ! [X344,X341,X343,X342] : (s(bool,X344) != s(bool,'const.ind_type.FCONS_3'(s(bool,X342),s(fun('type.num.num',bool),X341),s('type.num.num',X343))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X341))),s(bool,X342))),s('type.num.num',X343))) | s(bool,'F_0') = s(bool,X344)) )),
  inference(superposition,[],[f1864,f377])).
fof(f32806,plain,(
  ( ! [X350,X352,X349,X351] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X352,bool),'_dst_x0_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X350),s(fun('type.num.num',bool),X349),s('type.num.num',X351))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X349))),s(bool,X350))),s('type.num.num',X351)))) )),
  inference(superposition,[],[f2216,f377])).
fof(f32807,plain,(
  ( ! [X356,X354,X353,X355] : (s(bool,'T_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X354),s(fun('type.num.num',bool),X353),s('type.num.num',X355))) | s(bool,X356) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X353))),s(bool,X354))),s('type.num.num',X355))) | s(bool,'F_0') = s(bool,X356)) )),
  inference(superposition,[],[f2492,f377])).
fof(f32998,plain,(
  ( ! [X35,X33,X34] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X34),s(fun('type.num.num',bool),X33),s('type.num.num',X35))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X33))),s(bool,X34))),s('type.num.num',X35)))) )),
  inference(forward_demodulation,[],[f32714,f1545])).
fof(f32714,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'|dollar|exists_1'(s(fun(X36,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,'const.ind_type.FCONS_3'(s(bool,X34),s(fun('type.num.num',bool),X33),s('type.num.num',X35))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X33))),s(bool,X34))),s('type.num.num',X35)))) )),
  inference(superposition,[],[f377,f1676])).
fof(f33198,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f33133,f248])).
fof(f33133,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f32363,f1759])).
fof(f33306,plain,(
  ( ! [X17,X18] : (s(bool,X18) = s(bool,'|dollar|exists_1'(s(fun(fun(X17,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f33243,f248])).
fof(f33243,plain,(
  ( ! [X17,X18] : (p(s(bool,'F_0')) | s(bool,X18) = s(bool,'|dollar|exists_1'(s(fun(fun(X17,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X18)) )),
  inference(superposition,[],[f33089,f1759])).
fof(f33779,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(fun(X14,bool),bool),bool),'?_1'),s(fun(fun(X14,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f33716,f248])).
fof(f33716,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(fun(X14,bool),bool),bool),'?_1'),s(fun(fun(X14,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f33088,f1759])).
fof(f34130,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),sK9('?_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f34068,f248])).
fof(f34068,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),sK9('?_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f33678,f1759])).
fof(f34185,plain,(
  ( ! [X138,X137] : (s(bool,X137) = s(bool,'|dollar|exists_1'(s(fun(fun(X138,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X137)))) )),
  inference(superposition,[],[f33306,f290])).
fof(f34189,plain,(
  ( ! [X158,X159,X157,X160] : (s(bool,X158) = s(bool,'|dollar|exists_1'(s(fun(fun(X160,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(X157,bool),'_dst_x0_1'(s(bool,X158))),s(X157,X159)))) )),
  inference(superposition,[],[f33306,f330])).
fof(f34194,plain,(
  ( ! [X182,X180,X181] : (s(bool,X180) = s(bool,'|dollar|exists_1'(s(fun(fun(X182,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X180),s(fun('type.num.num',bool),X181),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f33306,f295])).
fof(f34196,plain,(
  ( ! [X189,X187,X188] : (s(bool,X187) = s(bool,'|dollar|exists_1'(s(fun(fun(X189,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,sK4(X187,X188,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X188)))) )),
  inference(superposition,[],[f33306,f562])).
fof(f34359,plain,(
  ( ! [X401,X403,X402] : (s(bool,X403) != s(bool,'|dollar|exists_1'(s(fun(fun(X402,bool),bool),'?_1'))) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X401))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X403))) | s(bool,'F_0') = s(bool,X401)) )),
  inference(superposition,[],[f303,f33306])).
fof(f34484,plain,(
  ( ! [X218,X216,X217] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X217))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X218))) | s(bool,X218) = s(bool,'|dollar|exists_1'(s(fun(fun(X216,bool),bool),'?_1'))) | s(bool,'F_0') = s(bool,X217)) )),
  inference(superposition,[],[f302,f33306])).
fof(f34875,plain,(
  ( ! [X6,X10,X8,X7,X9] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(X6),bool),happ(s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),bool)),X10),s('type.benchmark.times'(X6),X7))),s('type.benchmark.times'(X6),X8))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X7),s('type.benchmark.times'(X6),X8))),s(fun(X6,bool),X9),s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),bool)),X10)))) )),
  inference(superposition,[],[f336,f250])).
fof(f34882,plain,(
  ( ! [X52,X50,X48,X53,X51,X49] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(X48),bool),happ(s(fun('type.benchmark.times'(X48),fun('type.benchmark.times'(X48),bool)),X52),s('type.benchmark.times'(X48),X49))),s('type.benchmark.times'(X48),X50))) | s(bool,X53) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X48),'const.benchmark.Twice_2'(s('type.benchmark.times'(X48),X49),s('type.benchmark.times'(X48),X50))),s(fun(X48,bool),X51),s(fun('type.benchmark.times'(X48),fun('type.benchmark.times'(X48),bool)),X52))) | s(bool,'F_0') = s(bool,X53)) )),
  inference(superposition,[],[f336,f1759])).
fof(f34884,plain,(
  ( ! [X61,X64,X62,X60,X65,X63] : (s(bool,X65) = s(bool,happ(s(fun('type.benchmark.times'(X60),bool),happ(s(fun('type.benchmark.times'(X60),fun('type.benchmark.times'(X60),bool)),X64),s('type.benchmark.times'(X60),X61))),s('type.benchmark.times'(X60),X62))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X60),'const.benchmark.Twice_2'(s('type.benchmark.times'(X60),X61),s('type.benchmark.times'(X60),X62))),s(fun(X60,bool),X63),s(fun('type.benchmark.times'(X60),fun('type.benchmark.times'(X60),bool)),X64))) | s(bool,'F_0') = s(bool,X65)) )),
  inference(superposition,[],[f336,f1759])).
fof(f34953,plain,(
  ( ! [X389,X391,X388,X390,X392] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.benchmark.times'(X388),bool),happ(s(fun('type.benchmark.times'(X388),fun('type.benchmark.times'(X388),bool)),X392),s('type.benchmark.times'(X388),X389))),s('type.benchmark.times'(X388),X390))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X388),'const.benchmark.Twice_2'(s('type.benchmark.times'(X388),X389),s('type.benchmark.times'(X388),X390))),s(fun(X388,bool),X391),s(fun('type.benchmark.times'(X388),fun('type.benchmark.times'(X388),bool)),X392)))) )),
  inference(superposition,[],[f429,f336])).
fof(f34965,plain,(
  ( ! [X466,X461,X463,X465,X462,X464] : (s(bool,X466) != s(bool,happ(s(fun('type.benchmark.times'(X461),bool),happ(s(fun('type.benchmark.times'(X461),fun('type.benchmark.times'(X461),bool)),X465),s('type.benchmark.times'(X461),X462))),s('type.benchmark.times'(X461),X463))) | s(bool,'T_0') = s(bool,X466) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X461),'const.benchmark.Twice_2'(s('type.benchmark.times'(X461),X462),s('type.benchmark.times'(X461),X463))),s(fun(X461,bool),X464),s(fun('type.benchmark.times'(X461),fun('type.benchmark.times'(X461),bool)),X465)))) )),
  inference(superposition,[],[f1864,f336])).
fof(f34966,plain,(
  ( ! [X472,X469,X471,X467,X468,X470] : (s(bool,X472) != s(bool,happ(s(fun('type.benchmark.times'(X467),bool),happ(s(fun('type.benchmark.times'(X467),fun('type.benchmark.times'(X467),bool)),X471),s('type.benchmark.times'(X467),X468))),s('type.benchmark.times'(X467),X469))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X467),'const.benchmark.Twice_2'(s('type.benchmark.times'(X467),X468),s('type.benchmark.times'(X467),X469))),s(fun(X467,bool),X470),s(fun('type.benchmark.times'(X467),fun('type.benchmark.times'(X467),bool)),X471))) | s(bool,'F_0') = s(bool,X472)) )),
  inference(superposition,[],[f1864,f336])).
fof(f34968,plain,(
  ( ! [X484,X480,X482,X479,X481,X483] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X484,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(X479),bool),happ(s(fun('type.benchmark.times'(X479),fun('type.benchmark.times'(X479),bool)),X483),s('type.benchmark.times'(X479),X480))),s('type.benchmark.times'(X479),X481))))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X479),'const.benchmark.Twice_2'(s('type.benchmark.times'(X479),X480),s('type.benchmark.times'(X479),X481))),s(fun(X479,bool),X482),s(fun('type.benchmark.times'(X479),fun('type.benchmark.times'(X479),bool)),X483)))) )),
  inference(superposition,[],[f2216,f336])).
fof(f34969,plain,(
  ( ! [X486,X488,X490,X485,X487,X489] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(X485),bool),happ(s(fun('type.benchmark.times'(X485),fun('type.benchmark.times'(X485),bool)),X489),s('type.benchmark.times'(X485),X486))),s('type.benchmark.times'(X485),X487))) | s(bool,X490) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X485),'const.benchmark.Twice_2'(s('type.benchmark.times'(X485),X486),s('type.benchmark.times'(X485),X487))),s(fun(X485,bool),X488),s(fun('type.benchmark.times'(X485),fun('type.benchmark.times'(X485),bool)),X489))) | s(bool,'F_0') = s(bool,X490)) )),
  inference(superposition,[],[f2492,f336])).
fof(f35166,plain,(
  ( ! [X39,X37,X35,X38,X36] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(X35),bool),happ(s(fun('type.benchmark.times'(X35),fun('type.benchmark.times'(X35),bool)),X39),s('type.benchmark.times'(X35),X36))),s('type.benchmark.times'(X35),X37))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X35),'const.benchmark.Twice_2'(s('type.benchmark.times'(X35),X36),s('type.benchmark.times'(X35),X37))),s(fun(X35,bool),X38),s(fun('type.benchmark.times'(X35),fun('type.benchmark.times'(X35),bool)),X39)))) )),
  inference(forward_demodulation,[],[f34880,f1545])).
fof(f34880,plain,(
  ( ! [X39,X37,X35,X38,X36,X40] : (s(bool,'|dollar|exists_1'(s(fun(X40,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun('type.benchmark.times'(X35),bool),happ(s(fun('type.benchmark.times'(X35),fun('type.benchmark.times'(X35),bool)),X39),s('type.benchmark.times'(X35),X36))),s('type.benchmark.times'(X35),X37))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X35),'const.benchmark.Twice_2'(s('type.benchmark.times'(X35),X36),s('type.benchmark.times'(X35),X37))),s(fun(X35,bool),X38),s(fun('type.benchmark.times'(X35),fun('type.benchmark.times'(X35),bool)),X39)))) )),
  inference(superposition,[],[f336,f1676])).
fof(f35741,plain,(
  ( ! [X24,X23,X21,X19,X22,X20,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X20,bool),happ(s(fun(X19,fun(X20,bool)),X21),s(X19,X22))),s(X20,happ(s(fun(X18,X20),X23),s(X18,X24))))) | s(bool,'T_0') = s(bool,happ(s(fun(X18,bool),'_dst_x0x0x1_3'(s(fun(X19,fun(X20,bool)),X21),s(X19,X22),s(fun(X18,X20),X23))),s(X18,X24)))) )),
  inference(superposition,[],[f359,f250])).
fof(f35748,plain,(
  ( ! [X80,X78,X76,X74,X81,X79,X77,X75] : (s(bool,'F_0') = s(bool,happ(s(fun(X76,bool),happ(s(fun(X75,fun(X76,bool)),X77),s(X75,X78))),s(X76,happ(s(fun(X74,X76),X79),s(X74,X80))))) | s(bool,X81) = s(bool,happ(s(fun(X74,bool),'_dst_x0x0x1_3'(s(fun(X75,fun(X76,bool)),X77),s(X75,X78),s(fun(X74,X76),X79))),s(X74,X80))) | s(bool,'F_0') = s(bool,X81)) )),
  inference(superposition,[],[f359,f1759])).
fof(f35750,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(bool,X97) = s(bool,happ(s(fun(X92,bool),happ(s(fun(X91,fun(X92,bool)),X93),s(X91,X94))),s(X92,happ(s(fun(X90,X92),X95),s(X90,X96))))) | s(bool,'F_0') = s(bool,happ(s(fun(X90,bool),'_dst_x0x0x1_3'(s(fun(X91,fun(X92,bool)),X93),s(X91,X94),s(fun(X90,X92),X95))),s(X90,X96))) | s(bool,'F_0') = s(bool,X97)) )),
  inference(superposition,[],[f359,f1759])).
fof(f36003,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(X117,happ(s(fun(bool,X117),happ(s(fun(X118,fun(bool,X117)),X119),s(X118,X120))),s(bool,'T_0'))) = s(X117,happ(s(fun(bool,X117),'_dst_x0x0x1_3'(s(fun(X118,fun(bool,X117)),X119),s(X118,X120),s(fun(bool,bool),'_i_0_0'))),s(bool,X116))) | s(bool,'F_0') = s(bool,X116)) )),
  inference(superposition,[],[f359,f429])).
fof(f36005,plain,(
  ( ! [X127,X132,X130,X128,X126,X131,X129] : (s(X129,happ(s(fun(bool,X129),happ(s(fun(X130,fun(bool,X129)),X131),s(X130,X132))),s(bool,'F_0'))) = s(X129,happ(s(fun(X126,X129),'_dst_x0x0x1_3'(s(fun(X130,fun(bool,X129)),X131),s(X130,X132),s(fun(X126,bool),X127))),s(X126,X128))) | s(bool,'T_0') = s(bool,happ(s(fun(X126,bool),X127),s(X126,X128)))) )),
  inference(superposition,[],[f359,f250])).
fof(f36012,plain,(
  ( ! [X189,X187,X185,X182,X188,X186,X184,X183] : (s(X185,happ(s(fun(bool,X185),happ(s(fun(X186,fun(bool,X185)),X187),s(X186,X188))),s(bool,'F_0'))) = s(X185,happ(s(fun(X182,X185),'_dst_x0x0x1_3'(s(fun(X186,fun(bool,X185)),X187),s(X186,X188),s(fun(X182,bool),X183))),s(X182,X184))) | s(bool,X189) = s(bool,happ(s(fun(X182,bool),X183),s(X182,X184))) | s(bool,'F_0') = s(bool,X189)) )),
  inference(superposition,[],[f359,f1759])).
fof(f36014,plain,(
  ( ! [X198,X204,X202,X200,X199,X205,X203,X201] : (s(X202,happ(s(fun(bool,X202),happ(s(fun(X203,fun(bool,X202)),X204),s(X203,X205))),s(bool,X201))) = s(X202,happ(s(fun(X198,X202),'_dst_x0x0x1_3'(s(fun(X203,fun(bool,X202)),X204),s(X203,X205),s(fun(X198,bool),X199))),s(X198,X200))) | s(bool,'F_0') = s(bool,happ(s(fun(X198,bool),X199),s(X198,X200))) | s(bool,'F_0') = s(bool,X201)) )),
  inference(superposition,[],[f359,f1759])).
fof(f36099,plain,(
  ( ! [X389,X391,X393,X388,X390,X392,X394] : (s(bool,'F_0') != s(bool,happ(s(fun(X390,bool),happ(s(fun(X389,fun(X390,bool)),X391),s(X389,X392))),s(X390,happ(s(fun(X388,X390),X393),s(X388,X394))))) | ~p(s(bool,happ(s(fun(X388,bool),'_dst_x0x0x1_3'(s(fun(X389,fun(X390,bool)),X391),s(X389,X392),s(fun(X388,X390),X393))),s(X388,X394))))) )),
  inference(superposition,[],[f255,f359])).
fof(f36100,plain,(
  ( ! [X397,X399,X395,X401,X396,X398,X400] : (p(s(bool,happ(s(fun(X397,bool),happ(s(fun(X396,fun(X397,bool)),X398),s(X396,X399))),s(X397,happ(s(fun(X395,X397),X400),s(X395,X401)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X395,bool),'_dst_x0x0x1_3'(s(fun(X396,fun(X397,bool)),X398),s(X396,X399),s(fun(X395,X397),X400))),s(X395,X401)))) )),
  inference(superposition,[],[f256,f359])).
fof(f36122,plain,(
  ( ! [X573,X575,X571,X576,X572,X574,X570] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X572,bool),happ(s(fun(X571,fun(X572,bool)),X573),s(X571,X574))),s(X572,happ(s(fun(X570,X572),X575),s(X570,X576))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X570,bool),'_dst_x0x0x1_3'(s(fun(X571,fun(X572,bool)),X573),s(X571,X574),s(fun(X570,X572),X575))),s(X570,X576)))) )),
  inference(superposition,[],[f429,f359])).
fof(f36125,plain,(
  ( ! [X600,X596,X598,X594,X601,X597,X599,X595] : (~p(s(bool,happ(s(fun(X596,bool),happ(s(fun(X595,fun(X596,bool)),X597),s(X595,X598))),s(X596,happ(s(fun(X594,X596),X599),s(X594,X600)))))) | s(bool,X601) = s(bool,happ(s(fun(X594,bool),'_dst_x0x0x1_3'(s(fun(X595,fun(X596,bool)),X597),s(X595,X598),s(fun(X594,X596),X599))),s(X594,X600))) | s(bool,'F_0') = s(bool,X601)) )),
  inference(superposition,[],[f1150,f359])).
fof(f36134,plain,(
  ( ! [X668,X670,X673,X667,X669,X671,X672,X674] : (s(bool,X674) != s(bool,happ(s(fun(X669,bool),happ(s(fun(X668,fun(X669,bool)),X670),s(X668,X671))),s(X669,happ(s(fun(X667,X669),X672),s(X667,X673))))) | s(bool,'T_0') = s(bool,X674) | s(bool,'F_0') = s(bool,happ(s(fun(X667,bool),'_dst_x0x0x1_3'(s(fun(X668,fun(X669,bool)),X670),s(X668,X671),s(fun(X667,X669),X672))),s(X667,X673)))) )),
  inference(superposition,[],[f1864,f359])).
fof(f36135,plain,(
  ( ! [X681,X677,X679,X675,X680,X682,X676,X678] : (s(bool,X682) != s(bool,happ(s(fun(X677,bool),happ(s(fun(X676,fun(X677,bool)),X678),s(X676,X679))),s(X677,happ(s(fun(X675,X677),X680),s(X675,X681))))) | s(bool,'T_0') = s(bool,happ(s(fun(X675,bool),'_dst_x0x0x1_3'(s(fun(X676,fun(X677,bool)),X678),s(X676,X679),s(fun(X675,X677),X680))),s(X675,X681))) | s(bool,'F_0') = s(bool,X682)) )),
  inference(superposition,[],[f1864,f359])).
fof(f36136,plain,(
  ( ! [X689,X685,X687,X683,X688,X690,X684,X686] : (p(s(bool,'|dollar|exists_1'(s(fun(X690,bool),'_dst_x0_1'(s(bool,happ(s(fun(X685,bool),happ(s(fun(X684,fun(X685,bool)),X686),s(X684,X687))),s(X685,happ(s(fun(X683,X685),X688),s(X683,X689)))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X683,bool),'_dst_x0x0x1_3'(s(fun(X684,fun(X685,bool)),X686),s(X684,X687),s(fun(X683,X685),X688))),s(X683,X689)))) )),
  inference(superposition,[],[f1868,f359])).
fof(f36137,plain,(
  ( ! [X697,X693,X695,X691,X696,X698,X692,X694] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X698,bool),'_dst_x0_1'(s(bool,happ(s(fun(X693,bool),happ(s(fun(X692,fun(X693,bool)),X694),s(X692,X695))),s(X693,happ(s(fun(X691,X693),X696),s(X691,X697))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X691,bool),'_dst_x0x0x1_3'(s(fun(X692,fun(X693,bool)),X694),s(X692,X695),s(fun(X691,X693),X696))),s(X691,X697)))) )),
  inference(superposition,[],[f2216,f359])).
fof(f36138,plain,(
  ( ! [X705,X699,X700,X702,X704,X706,X701,X703] : (s(bool,'T_0') != s(bool,happ(s(fun(X701,bool),happ(s(fun(X700,fun(X701,bool)),X702),s(X700,X703))),s(X701,happ(s(fun(X699,X701),X704),s(X699,X705))))) | s(bool,X706) = s(bool,happ(s(fun(X699,bool),'_dst_x0x0x1_3'(s(fun(X700,fun(X701,bool)),X702),s(X700,X703),s(fun(X699,X701),X704))),s(X699,X705))) | s(bool,'F_0') = s(bool,X706)) )),
  inference(superposition,[],[f2492,f359])).
fof(f36280,plain,(
  ( ! [X405,X401,X403,X404,X406,X400,X402] : (s(bool,'F_0') != s(bool,happ(s(fun(X404,bool),'_dst_x0x0x1_3'(s(fun(X401,fun(X400,bool)),X402),s(X401,X403),s(fun(X404,X400),X405))),s(X404,X406))) | ~p(s(bool,happ(s(fun(X400,bool),happ(s(fun(X401,fun(X400,bool)),X402),s(X401,X403))),s(X400,happ(s(fun(X404,X400),X405),s(X404,X406))))))) )),
  inference(superposition,[],[f255,f359])).
fof(f36281,plain,(
  ( ! [X412,X408,X410,X407,X413,X409,X411] : (p(s(bool,happ(s(fun(X411,bool),'_dst_x0x0x1_3'(s(fun(X408,fun(X407,bool)),X409),s(X408,X410),s(fun(X411,X407),X412))),s(X411,X413)))) | s(bool,'F_0') = s(bool,happ(s(fun(X407,bool),happ(s(fun(X408,fun(X407,bool)),X409),s(X408,X410))),s(X407,happ(s(fun(X411,X407),X412),s(X411,X413)))))) )),
  inference(superposition,[],[f256,f359])).
fof(f36303,plain,(
  ( ! [X588,X584,X586,X582,X585,X587,X583] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X586,bool),'_dst_x0x0x1_3'(s(fun(X583,fun(X582,bool)),X584),s(X583,X585),s(fun(X586,X582),X587))),s(X586,X588))))) | s(bool,'F_0') = s(bool,happ(s(fun(X582,bool),happ(s(fun(X583,fun(X582,bool)),X584),s(X583,X585))),s(X582,happ(s(fun(X586,X582),X587),s(X586,X588)))))) )),
  inference(superposition,[],[f429,f359])).
fof(f36306,plain,(
  ( ! [X606,X613,X609,X611,X607,X612,X608,X610] : (~p(s(bool,happ(s(fun(X610,bool),'_dst_x0x0x1_3'(s(fun(X607,fun(X606,bool)),X608),s(X607,X609),s(fun(X610,X606),X611))),s(X610,X612)))) | s(bool,X613) = s(bool,happ(s(fun(X606,bool),happ(s(fun(X607,fun(X606,bool)),X608),s(X607,X609))),s(X606,happ(s(fun(X610,X606),X611),s(X610,X612))))) | s(bool,'F_0') = s(bool,X613)) )),
  inference(superposition,[],[f1150,f359])).
fof(f36315,plain,(
  ( ! [X685,X681,X683,X679,X684,X686,X680,X682] : (s(bool,X686) != s(bool,happ(s(fun(X683,bool),'_dst_x0x0x1_3'(s(fun(X680,fun(X679,bool)),X681),s(X680,X682),s(fun(X683,X679),X684))),s(X683,X685))) | s(bool,'T_0') = s(bool,X686) | s(bool,'F_0') = s(bool,happ(s(fun(X679,bool),happ(s(fun(X680,fun(X679,bool)),X681),s(X680,X682))),s(X679,happ(s(fun(X683,X679),X684),s(X683,X685)))))) )),
  inference(superposition,[],[f1864,f359])).
fof(f36316,plain,(
  ( ! [X693,X689,X691,X687,X692,X694,X688,X690] : (s(bool,X694) != s(bool,happ(s(fun(X691,bool),'_dst_x0x0x1_3'(s(fun(X688,fun(X687,bool)),X689),s(X688,X690),s(fun(X691,X687),X692))),s(X691,X693))) | s(bool,'T_0') = s(bool,happ(s(fun(X687,bool),happ(s(fun(X688,fun(X687,bool)),X689),s(X688,X690))),s(X687,happ(s(fun(X691,X687),X692),s(X691,X693))))) | s(bool,'F_0') = s(bool,X694)) )),
  inference(superposition,[],[f1864,f359])).
fof(f36317,plain,(
  ( ! [X697,X699,X695,X700,X702,X696,X698,X701] : (p(s(bool,'|dollar|exists_1'(s(fun(X702,bool),'_dst_x0_1'(s(bool,happ(s(fun(X699,bool),'_dst_x0x0x1_3'(s(fun(X696,fun(X695,bool)),X697),s(X696,X698),s(fun(X699,X695),X700))),s(X699,X701)))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X695,bool),happ(s(fun(X696,fun(X695,bool)),X697),s(X696,X698))),s(X695,happ(s(fun(X699,X695),X700),s(X699,X701)))))) )),
  inference(superposition,[],[f1868,f359])).
fof(f36318,plain,(
  ( ! [X707,X705,X708,X710,X704,X706,X709,X703] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X710,bool),'_dst_x0_1'(s(bool,happ(s(fun(X707,bool),'_dst_x0x0x1_3'(s(fun(X704,fun(X703,bool)),X705),s(X704,X706),s(fun(X707,X703),X708))),s(X707,X709))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X703,bool),happ(s(fun(X704,fun(X703,bool)),X705),s(X704,X706))),s(X703,happ(s(fun(X707,X703),X708),s(X707,X709)))))) )),
  inference(superposition,[],[f2216,f359])).
fof(f36319,plain,(
  ( ! [X716,X718,X712,X714,X717,X713,X715,X711] : (s(bool,'T_0') != s(bool,happ(s(fun(X715,bool),'_dst_x0x0x1_3'(s(fun(X712,fun(X711,bool)),X713),s(X712,X714),s(fun(X715,X711),X716))),s(X715,X717))) | s(bool,X718) = s(bool,happ(s(fun(X711,bool),happ(s(fun(X712,fun(X711,bool)),X713),s(X712,X714))),s(X711,happ(s(fun(X715,X711),X716),s(X715,X717))))) | s(bool,'F_0') = s(bool,X718)) )),
  inference(superposition,[],[f2492,f359])).
fof(f36520,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X63] : (s(bool,'T_0') = s(bool,happ(s(fun(X59,bool),happ(s(fun(X58,fun(X59,bool)),X60),s(X58,X61))),s(X59,happ(s(fun(X57,X59),X62),s(X57,X63))))) | s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),'_dst_x0x0x1_3'(s(fun(X58,fun(X59,bool)),X60),s(X58,X61),s(fun(X57,X59),X62))),s(X57,X63)))) )),
  inference(forward_demodulation,[],[f35746,f1545])).
fof(f35746,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X63] : (s(bool,'|dollar|exists_1'(s(fun(X64,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun(X59,bool),happ(s(fun(X58,fun(X59,bool)),X60),s(X58,X61))),s(X59,happ(s(fun(X57,X59),X62),s(X57,X63))))) | s(bool,'F_0') = s(bool,happ(s(fun(X57,bool),'_dst_x0x0x1_3'(s(fun(X58,fun(X59,bool)),X60),s(X58,X61),s(fun(X57,X59),X62))),s(X57,X63)))) )),
  inference(superposition,[],[f359,f1676])).
fof(f36567,plain,(
  ( ! [X167,X165,X171,X169,X166,X172,X170] : (s(X169,happ(s(fun(bool,X169),happ(s(fun(X170,fun(bool,X169)),X171),s(X170,X172))),s(bool,'T_0'))) = s(X169,happ(s(fun(X165,X169),'_dst_x0x0x1_3'(s(fun(X170,fun(bool,X169)),X171),s(X170,X172),s(fun(X165,bool),X166))),s(X165,X167))) | s(bool,'F_0') = s(bool,happ(s(fun(X165,bool),X166),s(X165,X167)))) )),
  inference(forward_demodulation,[],[f36010,f1545])).
fof(f36010,plain,(
  ( ! [X167,X165,X171,X169,X166,X172,X170,X168] : (s(X169,happ(s(fun(X165,X169),'_dst_x0x0x1_3'(s(fun(X170,fun(bool,X169)),X171),s(X170,X172),s(fun(X165,bool),X166))),s(X165,X167))) = s(X169,happ(s(fun(bool,X169),happ(s(fun(X170,fun(bool,X169)),X171),s(X170,X172))),s(bool,'|dollar|exists_1'(s(fun(X168,bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X165,bool),X166),s(X165,X167)))) )),
  inference(superposition,[],[f359,f1676])).
fof(f36782,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(X14,bool),sK9('?_1',fun(X14,bool))),s(X14,sK9(sK9('?_1',fun(X14,bool)),X14)))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f36700,f248])).
fof(f36700,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(X14,bool),sK9('?_1',fun(X14,bool))),s(X14,sK9(sK9('?_1',fun(X14,bool)),X14)))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f34030,f1759])).
fof(f36889,plain,(
  ( ! [X17,X16] : (s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(X16,bool),sK9('?_1',fun(X16,bool))))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f36826,f248])).
fof(f36826,plain,(
  ( ! [X17,X16] : (p(s(bool,'F_0')) | s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(X16,bool),sK9('?_1',fun(X16,bool))))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f36646,f1759])).
fof(f40002,plain,(
  ( ! [X146,X152,X151,X149,X147,X150,X148] : (s(X149,happ(s(fun(X146,X149),'_dst_x0x1x1_3'(s(fun(bool,fun(X150,X149)),X151),s(fun(X146,bool),X147),s(fun(X146,X150),X152))),s(X146,X148))) = s(X149,happ(s(fun(X150,X149),happ(s(fun(bool,fun(X150,X149)),X151),s(bool,'F_0'))),s(X150,happ(s(fun(X146,X150),X152),s(X146,X148))))) | s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),X147),s(X146,X148)))) )),
  inference(superposition,[],[f360,f250])).
fof(f40009,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (s(X205,happ(s(fun(X202,X205),'_dst_x0x1x1_3'(s(fun(bool,fun(X206,X205)),X207),s(fun(X202,bool),X203),s(fun(X202,X206),X208))),s(X202,X204))) = s(X205,happ(s(fun(X206,X205),happ(s(fun(bool,fun(X206,X205)),X207),s(bool,'F_0'))),s(X206,happ(s(fun(X202,X206),X208),s(X202,X204))))) | s(bool,X209) = s(bool,happ(s(fun(X202,bool),X203),s(X202,X204))) | s(bool,'F_0') = s(bool,X209)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40011,plain,(
  ( ! [X218,X222,X220,X225,X219,X223,X221,X224] : (s(X222,happ(s(fun(X218,X222),'_dst_x0x1x1_3'(s(fun(bool,fun(X223,X222)),X224),s(fun(X218,bool),X219),s(fun(X218,X223),X225))),s(X218,X220))) = s(X222,happ(s(fun(X223,X222),happ(s(fun(bool,fun(X223,X222)),X224),s(bool,X221))),s(X223,happ(s(fun(X218,X223),X225),s(X218,X220))))) | s(bool,'F_0') = s(bool,happ(s(fun(X218,bool),X219),s(X218,X220))) | s(bool,'F_0') = s(bool,X221)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40189,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(X129,happ(s(fun(bool,X129),'_dst_x0x1x1_3'(s(fun(X130,fun(bool,X129)),X131),s(fun(bool,X130),X132),s(fun(bool,bool),'_i_0_0'))),s(bool,X128))) = s(X129,happ(s(fun(bool,X129),happ(s(fun(X130,fun(bool,X129)),X131),s(X130,happ(s(fun(bool,X130),X132),s(bool,X128))))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(superposition,[],[f360,f429])).
fof(f40193,plain,(
  ( ! [X146,X152,X151,X149,X147,X150,X148] : (s(X149,happ(s(fun(X146,X149),'_dst_x0x1x1_3'(s(fun(X150,fun(bool,X149)),X151),s(fun(X146,X150),X152),s(fun(X146,bool),X147))),s(X146,X148))) = s(X149,happ(s(fun(bool,X149),happ(s(fun(X150,fun(bool,X149)),X151),s(X150,happ(s(fun(X146,X150),X152),s(X146,X148))))),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(X146,bool),X147),s(X146,X148)))) )),
  inference(superposition,[],[f360,f250])).
fof(f40200,plain,(
  ( ! [X208,X206,X204,X202,X209,X207,X205,X203] : (s(X205,happ(s(fun(X202,X205),'_dst_x0x1x1_3'(s(fun(X206,fun(bool,X205)),X207),s(fun(X202,X206),X208),s(fun(X202,bool),X203))),s(X202,X204))) = s(X205,happ(s(fun(bool,X205),happ(s(fun(X206,fun(bool,X205)),X207),s(X206,happ(s(fun(X202,X206),X208),s(X202,X204))))),s(bool,'F_0'))) | s(bool,X209) = s(bool,happ(s(fun(X202,bool),X203),s(X202,X204))) | s(bool,'F_0') = s(bool,X209)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40202,plain,(
  ( ! [X218,X222,X220,X225,X219,X223,X221,X224] : (s(X222,happ(s(fun(X218,X222),'_dst_x0x1x1_3'(s(fun(X223,fun(bool,X222)),X224),s(fun(X218,X223),X225),s(fun(X218,bool),X219))),s(X218,X220))) = s(X222,happ(s(fun(bool,X222),happ(s(fun(X223,fun(bool,X222)),X224),s(X223,happ(s(fun(X218,X223),X225),s(X218,X220))))),s(bool,X221))) | s(bool,'F_0') = s(bool,happ(s(fun(X218,bool),X219),s(X218,X220))) | s(bool,'F_0') = s(bool,X221)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40226,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(X41,bool),'_dst_x0x1x1_3'(s(fun(X39,fun(X38,bool)),X40),s(fun(X41,X39),X42),s(fun(X41,X38),X44))),s(X41,X43))) | s(bool,'T_0') = s(bool,happ(s(fun(X38,bool),happ(s(fun(X39,fun(X38,bool)),X40),s(X39,happ(s(fun(X41,X39),X42),s(X41,X43))))),s(X38,happ(s(fun(X41,X38),X44),s(X41,X43)))))) )),
  inference(superposition,[],[f360,f250])).
fof(f40233,plain,(
  ( ! [X94,X101,X99,X97,X95,X100,X98,X96] : (s(bool,'F_0') = s(bool,happ(s(fun(X97,bool),'_dst_x0x1x1_3'(s(fun(X95,fun(X94,bool)),X96),s(fun(X97,X95),X98),s(fun(X97,X94),X100))),s(X97,X99))) | s(bool,X101) = s(bool,happ(s(fun(X94,bool),happ(s(fun(X95,fun(X94,bool)),X96),s(X95,happ(s(fun(X97,X95),X98),s(X97,X99))))),s(X94,happ(s(fun(X97,X94),X100),s(X97,X99))))) | s(bool,'F_0') = s(bool,X101)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40235,plain,(
  ( ! [X111,X116,X114,X112,X110,X117,X115,X113] : (s(bool,X117) = s(bool,happ(s(fun(X113,bool),'_dst_x0x1x1_3'(s(fun(X111,fun(X110,bool)),X112),s(fun(X113,X111),X114),s(fun(X113,X110),X116))),s(X113,X115))) | s(bool,'F_0') = s(bool,happ(s(fun(X110,bool),happ(s(fun(X111,fun(X110,bool)),X112),s(X111,happ(s(fun(X113,X111),X114),s(X113,X115))))),s(X110,happ(s(fun(X113,X110),X116),s(X113,X115))))) | s(bool,'F_0') = s(bool,X117)) )),
  inference(superposition,[],[f360,f1759])).
fof(f40340,plain,(
  ( ! [X802,X800,X806,X804,X799,X803,X801,X805] : (s(bool,X806) != s(bool,happ(s(fun(X802,bool),'_dst_x0x1x1_3'(s(fun(X800,fun(X799,bool)),X801),s(fun(X802,X800),X803),s(fun(X802,X799),X805))),s(X802,X804))) | s(bool,'T_0') = s(bool,X806) | s(bool,'F_0') = s(bool,happ(s(fun(X799,bool),happ(s(fun(X800,fun(X799,bool)),X801),s(X800,happ(s(fun(X802,X800),X803),s(X802,X804))))),s(X799,happ(s(fun(X802,X799),X805),s(X802,X804)))))) )),
  inference(superposition,[],[f1864,f360])).
fof(f40341,plain,(
  ( ! [X810,X808,X814,X812,X811,X809,X813,X807] : (s(bool,X814) != s(bool,happ(s(fun(X810,bool),'_dst_x0x1x1_3'(s(fun(X808,fun(X807,bool)),X809),s(fun(X810,X808),X811),s(fun(X810,X807),X813))),s(X810,X812))) | s(bool,'T_0') = s(bool,happ(s(fun(X807,bool),happ(s(fun(X808,fun(X807,bool)),X809),s(X808,happ(s(fun(X810,X808),X811),s(X810,X812))))),s(X807,happ(s(fun(X810,X807),X813),s(X810,X812))))) | s(bool,'F_0') = s(bool,X814)) )),
  inference(superposition,[],[f1864,f360])).
fof(f40343,plain,(
  ( ! [X825,X829,X823,X826,X824,X830,X828,X827] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X830,bool),'_dst_x0_1'(s(bool,happ(s(fun(X826,bool),'_dst_x0x1x1_3'(s(fun(X824,fun(X823,bool)),X825),s(fun(X826,X824),X827),s(fun(X826,X823),X829))),s(X826,X828))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X823,bool),happ(s(fun(X824,fun(X823,bool)),X825),s(X824,happ(s(fun(X826,X824),X827),s(X826,X828))))),s(X823,happ(s(fun(X826,X823),X829),s(X826,X828)))))) )),
  inference(superposition,[],[f2216,f360])).
fof(f40344,plain,(
  ( ! [X831,X835,X833,X837,X834,X832,X838,X836] : (s(bool,'T_0') != s(bool,happ(s(fun(X834,bool),'_dst_x0x1x1_3'(s(fun(X832,fun(X831,bool)),X833),s(fun(X834,X832),X835),s(fun(X834,X831),X837))),s(X834,X836))) | s(bool,X838) = s(bool,happ(s(fun(X831,bool),happ(s(fun(X832,fun(X831,bool)),X833),s(X832,happ(s(fun(X834,X832),X835),s(X834,X836))))),s(X831,happ(s(fun(X834,X831),X837),s(X834,X836))))) | s(bool,'F_0') = s(bool,X838)) )),
  inference(superposition,[],[f2492,f360])).
fof(f40595,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(X129,happ(s(fun(bool,X129),'_dst_x0x0x1_3'(s(fun(bool,fun(X130,X129)),X131),s(bool,'T_0'),s(fun(bool,X130),X132))),s(bool,X128))) = s(X129,happ(s(fun(bool,X129),'_dst_x0x1x1_3'(s(fun(bool,fun(X130,X129)),X131),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X130),X132))),s(bool,X128))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(forward_demodulation,[],[f39998,f359])).
fof(f39998,plain,(
  ( ! [X132,X130,X128,X131,X129] : (s(X129,happ(s(fun(bool,X129),'_dst_x0x1x1_3'(s(fun(bool,fun(X130,X129)),X131),s(fun(bool,bool),'_i_0_0'),s(fun(bool,X130),X132))),s(bool,X128))) = s(X129,happ(s(fun(X130,X129),happ(s(fun(bool,fun(X130,X129)),X131),s(bool,'T_0'))),s(X130,happ(s(fun(bool,X130),X132),s(bool,X128))))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(superposition,[],[f360,f429])).
fof(f40598,plain,(
  ( ! [X191,X189,X187,X185,X192,X190,X186] : (s(X189,happ(s(fun(X185,X189),'_dst_x0x1x1_3'(s(fun(bool,fun(X190,X189)),X191),s(fun(X185,bool),X186),s(fun(X185,X190),X192))),s(X185,X187))) = s(X189,happ(s(fun(X190,X189),happ(s(fun(bool,fun(X190,X189)),X191),s(bool,'T_0'))),s(X190,happ(s(fun(X185,X190),X192),s(X185,X187))))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X186),s(X185,X187)))) )),
  inference(forward_demodulation,[],[f40007,f1545])).
fof(f40007,plain,(
  ( ! [X191,X189,X187,X185,X192,X190,X188,X186] : (s(X189,happ(s(fun(X185,X189),'_dst_x0x1x1_3'(s(fun(bool,fun(X190,X189)),X191),s(fun(X185,bool),X186),s(fun(X185,X190),X192))),s(X185,X187))) = s(X189,happ(s(fun(X190,X189),happ(s(fun(bool,fun(X190,X189)),X191),s(bool,'|dollar|exists_1'(s(fun(X188,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(X190,happ(s(fun(X185,X190),X192),s(X185,X187))))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X186),s(X185,X187)))) )),
  inference(superposition,[],[f360,f1676])).
fof(f40613,plain,(
  ( ! [X191,X189,X187,X185,X192,X190,X186] : (s(X189,happ(s(fun(X185,X189),'_dst_x0x1x1_3'(s(fun(X190,fun(bool,X189)),X191),s(fun(X185,X190),X192),s(fun(X185,bool),X186))),s(X185,X187))) = s(X189,happ(s(fun(bool,X189),happ(s(fun(X190,fun(bool,X189)),X191),s(X190,happ(s(fun(X185,X190),X192),s(X185,X187))))),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X186),s(X185,X187)))) )),
  inference(forward_demodulation,[],[f40198,f1545])).
fof(f40198,plain,(
  ( ! [X191,X189,X187,X185,X192,X190,X188,X186] : (s(X189,happ(s(fun(X185,X189),'_dst_x0x1x1_3'(s(fun(X190,fun(bool,X189)),X191),s(fun(X185,X190),X192),s(fun(X185,bool),X186))),s(X185,X187))) = s(X189,happ(s(fun(bool,X189),happ(s(fun(X190,fun(bool,X189)),X191),s(X190,happ(s(fun(X185,X190),X192),s(X185,X187))))),s(bool,'|dollar|exists_1'(s(fun(X188,bool),'_dst_x0_1'(s(bool,'T_0'))))))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X186),s(X185,X187)))) )),
  inference(superposition,[],[f360,f1676])).
fof(f40626,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X82] : (s(bool,'T_0') = s(bool,happ(s(fun(X80,bool),'_dst_x0x1x1_3'(s(fun(X78,fun(X77,bool)),X79),s(fun(X80,X78),X81),s(fun(X80,X77),X83))),s(X80,X82))) | s(bool,'F_0') = s(bool,happ(s(fun(X77,bool),happ(s(fun(X78,fun(X77,bool)),X79),s(X78,happ(s(fun(X80,X78),X81),s(X80,X82))))),s(X77,happ(s(fun(X80,X77),X83),s(X80,X82)))))) )),
  inference(forward_demodulation,[],[f40231,f1545])).
fof(f40231,plain,(
  ( ! [X80,X78,X83,X81,X79,X77,X84,X82] : (s(bool,'|dollar|exists_1'(s(fun(X84,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun(X80,bool),'_dst_x0x1x1_3'(s(fun(X78,fun(X77,bool)),X79),s(fun(X80,X78),X81),s(fun(X80,X77),X83))),s(X80,X82))) | s(bool,'F_0') = s(bool,happ(s(fun(X77,bool),happ(s(fun(X78,fun(X77,bool)),X79),s(X78,happ(s(fun(X80,X78),X81),s(X80,X82))))),s(X77,happ(s(fun(X80,X77),X83),s(X80,X82)))))) )),
  inference(superposition,[],[f360,f1676])).
fof(f43299,plain,(
  ( ! [X14,X16] : (p(s(bool,happ(s(fun(fun(X16,bool),bool),'!_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f43298,f246])).
fof(f43298,plain,(
  ( ! [X14,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X16,bool),bool),'!_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(forward_demodulation,[],[f43215,f1545])).
fof(f43215,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'|dollar|exists_1'(s(fun(X15,bool),'_dst_x0_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun(fun(X16,bool),bool),'!_1'),s(fun(X16,bool),'_dst_x0_1'(s(bool,X14)))))) | s(bool,'F_0') = s(bool,X14)) )),
  inference(superposition,[],[f5307,f1676])).
fof(f43336,plain,(
  ( ! [X107,X108,X106] : (p(s(bool,happ(s(fun(fun(X108,bool),bool),'!_1'),s(fun(X108,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,X107)))))))))) | s(bool,'F_0') = s(bool,X107)) )),
  inference(subsumption_resolution,[],[f43257,f246])).
fof(f43257,plain,(
  ( ! [X107,X108,X106] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X108,bool),bool),'!_1'),s(fun(X108,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X106,bool),'_dst_x0_1'(s(bool,X107)))))))))) | s(bool,'F_0') = s(bool,X107)) )),
  inference(superposition,[],[f5307,f2216])).
fof(f43937,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f43868,f248])).
fof(f43868,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f43209,f1759])).
fof(f44048,plain,(
  ( ! [X17,X16] : (s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(fun(X16,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f43981,f248])).
fof(f43981,plain,(
  ( ! [X17,X16] : (p(s(bool,'F_0')) | s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(fun(X16,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f43823,f1759])).
fof(f44783,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(fun(X14,bool),bool),bool),'?_1'),s(fun(fun(X14,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f44717,f248])).
fof(f44717,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(fun(X14,bool),bool),bool),'?_1'),s(fun(fun(X14,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f43822,f1759])).
fof(f45351,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),sK9('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f45285,f248])).
fof(f45285,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'!_1'),s(fun(X14,bool),sK9('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f44678,f1759])).
fof(f45713,plain,(
  ( ! [X23,X21,X22] : (s(bool,X23) = s(bool,happ(s(fun(X21,bool),sK9('!_1',fun(X21,bool))),s(X21,X22))) | s(bool,'F_0') = s(bool,X23)) )),
  inference(subsumption_resolution,[],[f45518,f248])).
fof(f45518,plain,(
  ( ! [X23,X21,X22] : (p(s(bool,'F_0')) | s(bool,X23) = s(bool,happ(s(fun(X21,bool),sK9('!_1',fun(X21,bool))),s(X21,X22))) | s(bool,'F_0') = s(bool,X23)) )),
  inference(superposition,[],[f45246,f1759])).
fof(f46272,plain,(
  ( ! [X17,X16] : (s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(X16,bool),sK9('!_1',fun(X16,bool))))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(subsumption_resolution,[],[f46206,f248])).
fof(f46206,plain,(
  ( ! [X17,X16] : (p(s(bool,'F_0')) | s(bool,X17) = s(bool,'|dollar|exists_1'(s(fun(X16,bool),sK9('!_1',fun(X16,bool))))) | s(bool,'F_0') = s(bool,X17)) )),
  inference(superposition,[],[f45363,f1759])).
fof(f46848,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X12),bool),sK10(X13,X12,bool)),s('type.ind_type.recspace'(X12),'const.ind_type.CONSTR_3'(s('type.num.num',X14),s(X12,X16),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X12,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',bool),bool)))),X13),s('type.num.num',X14))),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15))),s(X12,X16))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X12),bool),sK10(X13,X12,bool)),s(fun('type.num.num','type.ind_type.recspace'(X12)),X15)))))) )),
  inference(superposition,[],[f378,f250])).
fof(f46855,plain,(
  ( ! [X59,X57,X54,X58,X56,X55] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X54),bool),sK10(X55,X54,bool)),s('type.ind_type.recspace'(X54),'const.ind_type.CONSTR_3'(s('type.num.num',X56),s(X54,X58),s(fun('type.num.num','type.ind_type.recspace'(X54)),X57))))) | s(bool,X59) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X54,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X54,fun(fun('type.num.num','type.ind_type.recspace'(X54)),fun(fun('type.num.num',bool),bool)))),X55),s('type.num.num',X56))),s(fun('type.num.num','type.ind_type.recspace'(X54)),X57))),s(X54,X58))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X54),bool),sK10(X55,X54,bool)),s(fun('type.num.num','type.ind_type.recspace'(X54)),X57))))) | s(bool,'F_0') = s(bool,X59)) )),
  inference(superposition,[],[f378,f1759])).
fof(f46857,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s(bool,X71) = s(bool,happ(s(fun('type.ind_type.recspace'(X66),bool),sK10(X67,X66,bool)),s('type.ind_type.recspace'(X66),'const.ind_type.CONSTR_3'(s('type.num.num',X68),s(X66,X70),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X66,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',bool),bool)))),X67),s('type.num.num',X68))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))),s(X66,X70))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X66),bool),sK10(X67,X66,bool)),s(fun('type.num.num','type.ind_type.recspace'(X66)),X69))))) | s(bool,'F_0') = s(bool,X71)) )),
  inference(superposition,[],[f378,f1759])).
fof(f46959,plain,(
  ( ! [X716,X718,X714,X717,X719,X715] : (s(bool,X719) != s(bool,happ(s(fun('type.ind_type.recspace'(X714),bool),sK10(X715,X714,bool)),s('type.ind_type.recspace'(X714),'const.ind_type.CONSTR_3'(s('type.num.num',X716),s(X714,X718),s(fun('type.num.num','type.ind_type.recspace'(X714)),X717))))) | s(bool,'T_0') = s(bool,X719) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X714,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X714,fun(fun('type.num.num','type.ind_type.recspace'(X714)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X714,fun(fun('type.num.num','type.ind_type.recspace'(X714)),fun(fun('type.num.num',bool),bool)))),X715),s('type.num.num',X716))),s(fun('type.num.num','type.ind_type.recspace'(X714)),X717))),s(X714,X718))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X714),bool),sK10(X715,X714,bool)),s(fun('type.num.num','type.ind_type.recspace'(X714)),X717)))))) )),
  inference(superposition,[],[f1864,f378])).
fof(f46960,plain,(
  ( ! [X724,X720,X722,X725,X721,X723] : (s(bool,X725) != s(bool,happ(s(fun('type.ind_type.recspace'(X720),bool),sK10(X721,X720,bool)),s('type.ind_type.recspace'(X720),'const.ind_type.CONSTR_3'(s('type.num.num',X722),s(X720,X724),s(fun('type.num.num','type.ind_type.recspace'(X720)),X723))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X720,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X720,fun(fun('type.num.num','type.ind_type.recspace'(X720)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X720,fun(fun('type.num.num','type.ind_type.recspace'(X720)),fun(fun('type.num.num',bool),bool)))),X721),s('type.num.num',X722))),s(fun('type.num.num','type.ind_type.recspace'(X720)),X723))),s(X720,X724))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X720),bool),sK10(X721,X720,bool)),s(fun('type.num.num','type.ind_type.recspace'(X720)),X723))))) | s(bool,'F_0') = s(bool,X725)) )),
  inference(superposition,[],[f1864,f378])).
fof(f46962,plain,(
  ( ! [X736,X732,X734,X737,X733,X735] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X737,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X732),bool),sK10(X733,X732,bool)),s('type.ind_type.recspace'(X732),'const.ind_type.CONSTR_3'(s('type.num.num',X734),s(X732,X736),s(fun('type.num.num','type.ind_type.recspace'(X732)),X735))))))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X732,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X732,fun(fun('type.num.num','type.ind_type.recspace'(X732)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X732,fun(fun('type.num.num','type.ind_type.recspace'(X732)),fun(fun('type.num.num',bool),bool)))),X733),s('type.num.num',X734))),s(fun('type.num.num','type.ind_type.recspace'(X732)),X735))),s(X732,X736))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X732),bool),sK10(X733,X732,bool)),s(fun('type.num.num','type.ind_type.recspace'(X732)),X735)))))) )),
  inference(superposition,[],[f2216,f378])).
fof(f46963,plain,(
  ( ! [X738,X741,X743,X739,X740,X742] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X738),bool),sK10(X739,X738,bool)),s('type.ind_type.recspace'(X738),'const.ind_type.CONSTR_3'(s('type.num.num',X740),s(X738,X742),s(fun('type.num.num','type.ind_type.recspace'(X738)),X741))))) | s(bool,X743) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X738,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X738,fun(fun('type.num.num','type.ind_type.recspace'(X738)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X738,fun(fun('type.num.num','type.ind_type.recspace'(X738)),fun(fun('type.num.num',bool),bool)))),X739),s('type.num.num',X740))),s(fun('type.num.num','type.ind_type.recspace'(X738)),X741))),s(X738,X742))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X738),bool),sK10(X739,X738,bool)),s(fun('type.num.num','type.ind_type.recspace'(X738)),X741))))) | s(bool,'F_0') = s(bool,X743)) )),
  inference(superposition,[],[f2492,f378])).
fof(f47238,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X41),bool),sK10(X42,X41,bool)),s('type.ind_type.recspace'(X41),'const.ind_type.CONSTR_3'(s('type.num.num',X43),s(X41,X45),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X41,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',bool),bool)))),X42),s('type.num.num',X43))),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44))),s(X41,X45))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X41),bool),sK10(X42,X41,bool)),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44)))))) )),
  inference(forward_demodulation,[],[f46853,f1545])).
fof(f46853,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,'|dollar|exists_1'(s(fun(X46,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun('type.ind_type.recspace'(X41),bool),sK10(X42,X41,bool)),s('type.ind_type.recspace'(X41),'const.ind_type.CONSTR_3'(s('type.num.num',X43),s(X41,X45),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X41,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X41,fun(fun('type.num.num','type.ind_type.recspace'(X41)),fun(fun('type.num.num',bool),bool)))),X42),s('type.num.num',X43))),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44))),s(X41,X45))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X41),bool),sK10(X42,X41,bool)),s(fun('type.num.num','type.ind_type.recspace'(X41)),X44)))))) )),
  inference(superposition,[],[f378,f1676])).
fof(f47812,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),sK9('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f47745,f248])).
fof(f47745,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,happ(s(fun(fun(X14,bool),bool),'?_1'),s(fun(X14,bool),sK9('!_1',fun(X14,bool))))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f45361,f1759])).
fof(f47963,plain,(
  ( ! [X161,X162] : (s(bool,X161) = s(bool,'|dollar|exists_1'(s(fun(fun(X162,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X161)))) )),
  inference(superposition,[],[f44048,f290])).
fof(f47969,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X198) = s(bool,'|dollar|exists_1'(s(fun(fun(X200,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,happ(s(fun(X197,bool),'_dst_x0_1'(s(bool,X198))),s(X197,X199)))) )),
  inference(superposition,[],[f44048,f330])).
fof(f47977,plain,(
  ( ! [X241,X242,X240] : (s(bool,X240) = s(bool,'|dollar|exists_1'(s(fun(fun(X242,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X240),s(fun('type.num.num',bool),X241),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f44048,f295])).
fof(f47979,plain,(
  ( ! [X249,X248,X247] : (s(bool,X247) = s(bool,'|dollar|exists_1'(s(fun(fun(X249,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,sK4(X247,X248,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X248)))) )),
  inference(superposition,[],[f44048,f562])).
fof(f48155,plain,(
  ( ! [X441,X440,X439] : (s(bool,X441) != s(bool,'|dollar|exists_1'(s(fun(fun(X440,bool),bool),'!_1'))) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X439))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X441))) | s(bool,'F_0') = s(bool,X439)) )),
  inference(superposition,[],[f303,f44048])).
fof(f48304,plain,(
  ( ! [X225,X223,X224] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X224))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X225))) | s(bool,X225) = s(bool,'|dollar|exists_1'(s(fun(fun(X223,bool),bool),'!_1'))) | s(bool,'F_0') = s(bool,X224)) )),
  inference(superposition,[],[f302,f44048])).
fof(f48859,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X14),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X14),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X14),fun(fun('type.ind_type.recspace'(X14),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X14),bool),'_dst_x0x1_2'(s(fun(fun(X14,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X14),fun(X14,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)),'=_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun(X14,'type.ind_type.recspace'(X14)),'_dst_x1x0_2'(s(fun(X14,fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X14)),'_dst_x0_1'(s('type.ind_type.recspace'(X14),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)),'=_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14)),happ(s(fun(X14,fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X14,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.num.num','type.ind_type.recspace'(X14)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X14),fun(fun('type.num.num','type.ind_type.recspace'(X14)),fun('type.num.num','type.ind_type.recspace'(X14)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun('type.ind_type.recspace'(X14),fun('type.num.num','type.ind_type.recspace'(X14))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X14),fun(fun('type.num.num','type.ind_type.recspace'(X14)),fun('type.num.num','type.ind_type.recspace'(X14)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X14)),'_dst_x0_1'(s('type.ind_type.recspace'(X14),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X14),fun(fun('type.ind_type.recspace'(X14),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X14),'type.ind_type.recspace'(X14)),sK7(X14)))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f48782,f248])).
fof(f48782,plain,(
  ( ! [X14,X15] : (p(s(bool,'F_0')) | s(bool,X15) = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X14),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X14),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X14),fun(fun('type.ind_type.recspace'(X14),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X14),bool),'_dst_x0x1_2'(s(fun(fun(X14,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X14),fun(X14,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)),'=_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun(X14,'type.ind_type.recspace'(X14)),'_dst_x1x0_2'(s(fun(X14,fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X14)),'_dst_x0_1'(s('type.ind_type.recspace'(X14),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X14),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool)),'=_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14)),happ(s(fun(X14,fun(fun('type.num.num','type.ind_type.recspace'(X14)),'type.ind_type.recspace'(X14))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X14,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),fun('type.num.num','type.ind_type.recspace'(X14)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X14),fun(fun('type.num.num','type.ind_type.recspace'(X14)),fun('type.num.num','type.ind_type.recspace'(X14)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'),s(fun('type.ind_type.recspace'(X14),fun('type.num.num','type.ind_type.recspace'(X14))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X14),fun(fun('type.num.num','type.ind_type.recspace'(X14)),fun('type.num.num','type.ind_type.recspace'(X14)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X14)),'_dst_x0_1'(s('type.ind_type.recspace'(X14),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),fun('type.ind_type.recspace'(X14),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X14),bool),fun('type.ind_type.recspace'(X14),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X14),fun(fun('type.ind_type.recspace'(X14),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X14),'type.ind_type.recspace'(X14)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X14),'type.ind_type.recspace'(X14)),sK7(X14)))) | s(bool,'F_0') = s(bool,X15)) )),
  inference(superposition,[],[f311,f1759])).
fof(f49221,plain,(
  ( ! [X173,X171,X169,X174,X172,X170] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X171,bool),'_dst_x0x1_2'(s(fun(X169,bool),X170),s(fun(X171,X169),X172))),s(X171,X173))),s(fun('type.num.num',bool),X174),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X169,bool),X170),s(X169,happ(s(fun(X171,X169),X172),s(X171,X173)))))) )),
  inference(superposition,[],[f479,f340])).
fof(f49222,plain,(
  ( ! [X177,X175,X180,X178,X176,X179] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X176,bool),'_dst_x1x0_2'(s(fun(X176,fun(X175,bool)),X177),s(X175,X179))),s(X176,X178))),s(fun('type.num.num',bool),X180),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X175,bool),happ(s(fun(X176,fun(X175,bool)),X177),s(X176,X178))),s(X175,X179)))) )),
  inference(superposition,[],[f479,f341])).
fof(f49223,plain,(
  ( ! [X187,X185,X182,X188,X186,X184,X183,X181] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X185,bool),'_dst_x0x0x1_3'(s(fun(X182,fun(X181,bool)),X183),s(X182,X184),s(fun(X185,X181),X186))),s(X185,X187))),s(fun('type.num.num',bool),X188),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X181,bool),happ(s(fun(X182,fun(X181,bool)),X183),s(X182,X184))),s(X181,happ(s(fun(X185,X181),X186),s(X185,X187)))))) )),
  inference(superposition,[],[f479,f359])).
fof(f49224,plain,(
  ( ! [X191,X189,X196,X194,X192,X190,X195,X193] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X192,bool),'_dst_x0x1x1_3'(s(fun(X190,fun(X189,bool)),X191),s(fun(X192,X190),X193),s(fun(X192,X189),X195))),s(X192,X194))),s(fun('type.num.num',bool),X196),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X189,bool),happ(s(fun(X190,fun(X189,bool)),X191),s(X190,happ(s(fun(X192,X190),X193),s(X192,X194))))),s(X189,happ(s(fun(X192,X189),X195),s(X192,X194)))))) )),
  inference(superposition,[],[f479,f360])).
fof(f49225,plain,(
  ( ! [X198,X202,X200,X199,X197,X201] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X198,bool),X199),s(X198,happ(s(fun(X197,X198),X200),s(X197,X201))))),s(fun('type.num.num',bool),X202),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X197,bool),'_dst_x0x1_2'(s(fun(X198,bool),X199),s(fun(X197,X198),X200))),s(X197,X201)))) )),
  inference(superposition,[],[f479,f340])).
fof(f49226,plain,(
  ( ! [X206,X204,X205,X203] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X204),s(fun('type.num.num',bool),X206),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X203,bool),'_dst_x0_1'(s(bool,X204))),s(X203,X205)))) )),
  inference(superposition,[],[f479,f330])).
fof(f49227,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X208,bool),happ(s(fun(X207,fun(X208,bool)),X209),s(X207,X211))),s(X208,X210))),s(fun('type.num.num',bool),X212),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X207,bool),'_dst_x1x0_2'(s(fun(X207,fun(X208,bool)),X209),s(X208,X210))),s(X207,X211)))) )),
  inference(superposition,[],[f479,f341])).
fof(f49228,plain,(
  ( ! [X218,X216,X220,X215,X213,X219,X217,X214] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X215,bool),happ(s(fun(X214,fun(X215,bool)),X216),s(X214,X217))),s(X215,happ(s(fun(X213,X215),X218),s(X213,X219))))),s(fun('type.num.num',bool),X220),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X213,bool),'_dst_x0x0x1_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,X217),s(fun(X213,X215),X218))),s(X213,X219)))) )),
  inference(superposition,[],[f479,f359])).
fof(f49229,plain,(
  ( ! [X222,X223,X221,X224] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X221,bool),X223),s(X221,X222))),s(fun('type.num.num',bool),X224),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X221,bool),bool),'_dstsel_0_x0_1'(s(X221,X222))),s(fun(X221,bool),X223)))) )),
  inference(superposition,[],[f479,f333])).
fof(f49230,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.ind_type.recspace'(X225),bool),sK10(X226,X225,bool)),s('type.ind_type.recspace'(X225),'const.ind_type.CONSTR_3'(s('type.num.num',X227),s(X225,X229),s(fun('type.num.num','type.ind_type.recspace'(X225)),X228))))),s(fun('type.num.num',bool),X230),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X225,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X225,fun(fun('type.num.num','type.ind_type.recspace'(X225)),fun(fun('type.num.num',bool),bool)))),X226),s('type.num.num',X227))),s(fun('type.num.num','type.ind_type.recspace'(X225)),X228))),s(X225,X229))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X225),bool),sK10(X226,X225,bool)),s(fun('type.num.num','type.ind_type.recspace'(X225)),X228)))))) )),
  inference(superposition,[],[f479,f378])).
fof(f49231,plain,(
  ( ! [X231,X233,X234,X232] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,'const.ind_type.FCONS_3'(s(bool,X232),s(fun('type.num.num',bool),X231),s('type.num.num',X233))),s(fun('type.num.num',bool),X234),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X231))),s(bool,X232))),s('type.num.num',X233)))) )),
  inference(superposition,[],[f479,f377])).
fof(f49232,plain,(
  ( ! [X239,X237,X235,X238,X236] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(X235,bool),X237),s(X235,X236))),s(fun('type.num.num',bool),X239),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X235),'const.benchmark.Once_1'(s(X235,X236))),s(fun(X235,bool),X237),s(fun('type.benchmark.times'(X235),fun('type.benchmark.times'(X235),bool)),X238)))) )),
  inference(superposition,[],[f479,f335])).
fof(f49233,plain,(
  ( ! [X243,X241,X244,X242,X240,X245] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.benchmark.times'(X240),bool),happ(s(fun('type.benchmark.times'(X240),fun('type.benchmark.times'(X240),bool)),X244),s('type.benchmark.times'(X240),X241))),s('type.benchmark.times'(X240),X242))),s(fun('type.num.num',bool),X245),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X240),'const.benchmark.Twice_2'(s('type.benchmark.times'(X240),X241),s('type.benchmark.times'(X240),X242))),s(fun(X240,bool),X243),s(fun('type.benchmark.times'(X240),fun('type.benchmark.times'(X240),bool)),X244)))) )),
  inference(superposition,[],[f479,f336])).
fof(f49234,plain,(
  ( ! [X246,X248,X247] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X246),s(fun('type.num.num',bool),X248),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X246),s(fun('type.num.num',bool),X247),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f479,f295])).
fof(f49235,plain,(
  ( ! [X251,X249,X252,X250] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.num.num',bool),X250),s('type.num.num',X251))),s(fun('type.num.num',bool),X252),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X249),s(fun('type.num.num',bool),X250),s('type.num.num','const.num.SUC_1'(s('type.num.num',X251)))))) )),
  inference(superposition,[],[f479,f304])).
fof(f49236,plain,(
  ( ! [X255,X253,X254] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X253),s(fun('type.num.num',bool),X255),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,sK4(X253,X254,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X254)))) )),
  inference(superposition,[],[f479,f562])).
fof(f49369,plain,(
  ( ! [X222,X223,X221] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X223))) | s(bool,X223) = s(bool,'const.ind_type.FCONS_3'(s(bool,X221),s(fun('type.num.num',bool),X222),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,X221)) )),
  inference(superposition,[],[f302,f479])).
fof(f49475,plain,(
  ( ! [X70,X68,X69] : (s(bool,X70) != s(bool,'const.ind_type.FCONS_3'(s(bool,X68),s(fun('type.num.num',bool),X69),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X70) | s(bool,'F_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f49308,f246])).
fof(f49308,plain,(
  ( ! [X70,X68,X69] : (~p(s(bool,'T_0')) | s(bool,X70) != s(bool,'const.ind_type.FCONS_3'(s(bool,X68),s(fun('type.num.num',bool),X69),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X70) | s(bool,'F_0') = s(bool,X68)) )),
  inference(superposition,[],[f399,f479])).
fof(f50939,plain,(
  ( ! [X255,X253,X251,X257,X254,X256,X252] : (s(bool,'T_0') = s(bool,happ(s(fun(X256,bool),'_dst_x0_1'(s(bool,happ(s(fun(X253,bool),'_dst_x0x1_2'(s(fun(X251,bool),X252),s(fun(X253,X251),X254))),s(X253,X255))))),s(X256,X257))) | s(bool,'F_0') = s(bool,happ(s(fun(X251,bool),X252),s(X251,happ(s(fun(X253,X251),X254),s(X253,X255)))))) )),
  inference(superposition,[],[f515,f340])).
fof(f50940,plain,(
  ( ! [X261,X263,X259,X260,X262,X258,X264] : (s(bool,'T_0') = s(bool,happ(s(fun(X263,bool),'_dst_x0_1'(s(bool,happ(s(fun(X259,bool),'_dst_x1x0_2'(s(fun(X259,fun(X258,bool)),X260),s(X258,X262))),s(X259,X261))))),s(X263,X264))) | s(bool,'F_0') = s(bool,happ(s(fun(X258,bool),happ(s(fun(X259,fun(X258,bool)),X260),s(X259,X261))),s(X258,X262)))) )),
  inference(superposition,[],[f515,f341])).
fof(f50941,plain,(
  ( ! [X269,X271,X265,X267,X273,X268,X270,X266,X272] : (s(bool,'T_0') = s(bool,happ(s(fun(X272,bool),'_dst_x0_1'(s(bool,happ(s(fun(X269,bool),'_dst_x0x0x1_3'(s(fun(X266,fun(X265,bool)),X267),s(X266,X268),s(fun(X269,X265),X270))),s(X269,X271))))),s(X272,X273))) | s(bool,'F_0') = s(bool,happ(s(fun(X265,bool),happ(s(fun(X266,fun(X265,bool)),X267),s(X266,X268))),s(X265,happ(s(fun(X269,X265),X270),s(X269,X271)))))) )),
  inference(superposition,[],[f515,f359])).
fof(f50942,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X276,X278,X274] : (s(bool,'T_0') = s(bool,happ(s(fun(X281,bool),'_dst_x0_1'(s(bool,happ(s(fun(X277,bool),'_dst_x0x1x1_3'(s(fun(X275,fun(X274,bool)),X276),s(fun(X277,X275),X278),s(fun(X277,X274),X280))),s(X277,X279))))),s(X281,X282))) | s(bool,'F_0') = s(bool,happ(s(fun(X274,bool),happ(s(fun(X275,fun(X274,bool)),X276),s(X275,happ(s(fun(X277,X275),X278),s(X277,X279))))),s(X274,happ(s(fun(X277,X274),X280),s(X277,X279)))))) )),
  inference(superposition,[],[f515,f360])).
fof(f50943,plain,(
  ( ! [X288,X285,X287,X283,X289,X284,X286] : (s(bool,'T_0') = s(bool,happ(s(fun(X288,bool),'_dst_x0_1'(s(bool,happ(s(fun(X284,bool),X285),s(X284,happ(s(fun(X283,X284),X286),s(X283,X287))))))),s(X288,X289))) | s(bool,'F_0') = s(bool,happ(s(fun(X283,bool),'_dst_x0x1_2'(s(fun(X284,bool),X285),s(fun(X283,X284),X286))),s(X283,X287)))) )),
  inference(superposition,[],[f515,f340])).
fof(f50944,plain,(
  ( ! [X292,X294,X290,X293,X291] : (s(bool,'T_0') = s(bool,happ(s(fun(X293,bool),'_dst_x0_1'(s(bool,X291))),s(X293,X294))) | s(bool,'F_0') = s(bool,happ(s(fun(X290,bool),'_dst_x0_1'(s(bool,X291))),s(X290,X292)))) )),
  inference(superposition,[],[f515,f330])).
fof(f50945,plain,(
  ( ! [X300,X296,X298,X295,X301,X297,X299] : (s(bool,'T_0') = s(bool,happ(s(fun(X300,bool),'_dst_x0_1'(s(bool,happ(s(fun(X296,bool),happ(s(fun(X295,fun(X296,bool)),X297),s(X295,X299))),s(X296,X298))))),s(X300,X301))) | s(bool,'F_0') = s(bool,happ(s(fun(X295,bool),'_dst_x1x0_2'(s(fun(X295,fun(X296,bool)),X297),s(X296,X298))),s(X295,X299)))) )),
  inference(superposition,[],[f515,f341])).
fof(f50946,plain,(
  ( ! [X302,X308,X310,X304,X306,X303,X309,X305,X307] : (s(bool,'T_0') = s(bool,happ(s(fun(X309,bool),'_dst_x0_1'(s(bool,happ(s(fun(X304,bool),happ(s(fun(X303,fun(X304,bool)),X305),s(X303,X306))),s(X304,happ(s(fun(X302,X304),X307),s(X302,X308))))))),s(X309,X310))) | s(bool,'F_0') = s(bool,happ(s(fun(X302,bool),'_dst_x0x0x1_3'(s(fun(X303,fun(X304,bool)),X305),s(X303,X306),s(fun(X302,X304),X307))),s(X302,X308)))) )),
  inference(superposition,[],[f515,f359])).
fof(f50947,plain,(
  ( ! [X313,X315,X312,X314,X311] : (s(bool,'T_0') = s(bool,happ(s(fun(X314,bool),'_dst_x0_1'(s(bool,happ(s(fun(X311,bool),X313),s(X311,X312))))),s(X314,X315))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X311,bool),bool),'_dstsel_0_x0_1'(s(X311,X312))),s(fun(X311,bool),X313)))) )),
  inference(superposition,[],[f515,f333])).
fof(f50948,plain,(
  ( ! [X321,X316,X318,X320,X322,X317,X319] : (s(bool,'T_0') = s(bool,happ(s(fun(X321,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.ind_type.recspace'(X316),bool),sK10(X317,X316,bool)),s('type.ind_type.recspace'(X316),'const.ind_type.CONSTR_3'(s('type.num.num',X318),s(X316,X320),s(fun('type.num.num','type.ind_type.recspace'(X316)),X319))))))),s(X321,X322))) | s(bool,'F_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X316,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X316,fun(fun('type.num.num','type.ind_type.recspace'(X316)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X316,fun(fun('type.num.num','type.ind_type.recspace'(X316)),fun(fun('type.num.num',bool),bool)))),X317),s('type.num.num',X318))),s(fun('type.num.num','type.ind_type.recspace'(X316)),X319))),s(X316,X320))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X316),bool),sK10(X317,X316,bool)),s(fun('type.num.num','type.ind_type.recspace'(X316)),X319)))))) )),
  inference(superposition,[],[f515,f378])).
fof(f50949,plain,(
  ( ! [X325,X327,X323,X324,X326] : (s(bool,'T_0') = s(bool,happ(s(fun(X326,bool),'_dst_x0_1'(s(bool,'const.ind_type.FCONS_3'(s(bool,X324),s(fun('type.num.num',bool),X323),s('type.num.num',X325))))),s(X326,X327))) | s(bool,'F_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X323))),s(bool,X324))),s('type.num.num',X325)))) )),
  inference(superposition,[],[f515,f377])).
fof(f50950,plain,(
  ( ! [X333,X329,X331,X332,X328,X330] : (s(bool,'T_0') = s(bool,happ(s(fun(X332,bool),'_dst_x0_1'(s(bool,happ(s(fun(X328,bool),X330),s(X328,X329))))),s(X332,X333))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X328),'const.benchmark.Once_1'(s(X328,X329))),s(fun(X328,bool),X330),s(fun('type.benchmark.times'(X328),fun('type.benchmark.times'(X328),bool)),X331)))) )),
  inference(superposition,[],[f515,f335])).
fof(f50951,plain,(
  ( ! [X335,X337,X339,X334,X340,X336,X338] : (s(bool,'T_0') = s(bool,happ(s(fun(X339,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(X334),bool),happ(s(fun('type.benchmark.times'(X334),fun('type.benchmark.times'(X334),bool)),X338),s('type.benchmark.times'(X334),X335))),s('type.benchmark.times'(X334),X336))))),s(X339,X340))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X334),'const.benchmark.Twice_2'(s('type.benchmark.times'(X334),X335),s('type.benchmark.times'(X334),X336))),s(fun(X334,bool),X337),s(fun('type.benchmark.times'(X334),fun('type.benchmark.times'(X334),bool)),X338)))) )),
  inference(superposition,[],[f515,f336])).
fof(f50952,plain,(
  ( ! [X344,X341,X343,X342] : (s(bool,'T_0') = s(bool,happ(s(fun(X343,bool),'_dst_x0_1'(s(bool,X341))),s(X343,X344))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X341),s(fun('type.num.num',bool),X342),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f515,f295])).
fof(f50953,plain,(
  ( ! [X346,X349,X345,X347,X348] : (s(bool,'T_0') = s(bool,happ(s(fun(X348,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.num.num',bool),X346),s('type.num.num',X347))))),s(X348,X349))) | s(bool,'F_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X345),s(fun('type.num.num',bool),X346),s('type.num.num','const.num.SUC_1'(s('type.num.num',X347)))))) )),
  inference(superposition,[],[f515,f304])).
fof(f50954,plain,(
  ( ! [X350,X352,X351,X353] : (s(bool,'T_0') = s(bool,happ(s(fun(X352,bool),'_dst_x0_1'(s(bool,X350))),s(X352,X353))) | s(bool,'F_0') = s(bool,sK4(X350,X351,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X351)))) )),
  inference(superposition,[],[f515,f562])).
fof(f50995,plain,(
  ( ! [X167,X166,X168] : (s(bool,X166) = s(bool,happ(s(fun(bool,bool),'_dst_x0_1'(s(bool,X167))),s(bool,X166))) | s(bool,'F_0') = s(bool,X167) | s(bool,X166) = s(bool,X168) | s(bool,'T_0') = s(bool,X168)) )),
  inference(superposition,[],[f515,f396])).
fof(f51101,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,'T_0') = s(bool,happ(s(fun(X89,bool),'_dst_x0x1_2'(s(fun(X87,bool),'_dst_x0_1'(s(bool,X88))),s(fun(X89,X87),X90))),s(X89,X91))) | s(bool,'F_0') = s(bool,X88)) )),
  inference(superposition,[],[f515,f340])).
fof(f51188,plain,(
  ( ! [X321,X323,X318,X324,X320,X322,X319] : (s(X321,happ(s(fun(bool,X321),happ(s(fun(X322,fun(bool,X321)),X323),s(X322,happ(s(fun(X318,X322),X324),s(X318,X320))))),s(bool,'T_0'))) = s(X321,happ(s(fun(X318,X321),'_dst_x0x1x1_3'(s(fun(X322,fun(bool,X321)),X323),s(fun(X318,X322),X324),s(fun(X318,bool),'_dst_x0_1'(s(bool,X319))))),s(X318,X320))) | s(bool,'F_0') = s(bool,X319)) )),
  inference(superposition,[],[f360,f515])).
fof(f51189,plain,(
  ( ! [X325,X327,X329,X331,X326,X328,X330] : (s(X328,happ(s(fun(X329,X328),happ(s(fun(bool,fun(X329,X328)),X330),s(bool,'T_0'))),s(X329,happ(s(fun(X325,X329),X331),s(X325,X327))))) = s(X328,happ(s(fun(X325,X328),'_dst_x0x1x1_3'(s(fun(bool,fun(X329,X328)),X330),s(fun(X325,bool),'_dst_x0_1'(s(bool,X326))),s(fun(X325,X329),X331))),s(X325,X327))) | s(bool,'F_0') = s(bool,X326)) )),
  inference(superposition,[],[f360,f515])).
fof(f51190,plain,(
  ( ! [X344,X346,X341,X343,X345,X340,X342] : (s(X343,happ(s(fun(bool,X343),happ(s(fun(X344,fun(bool,X343)),X345),s(X344,X346))),s(bool,'T_0'))) = s(X343,happ(s(fun(X340,X343),'_dst_x0x0x1_3'(s(fun(X344,fun(bool,X343)),X345),s(X344,X346),s(fun(X340,bool),'_dst_x0_1'(s(bool,X341))))),s(X340,X342))) | s(bool,'F_0') = s(bool,X341)) )),
  inference(superposition,[],[f359,f515])).
fof(f51198,plain,(
  ( ! [X379,X380,X382,X381] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X382))) | s(bool,X382) = s(bool,happ(s(fun(X379,bool),'_dst_x0_1'(s(bool,X380))),s(X379,X381))) | s(bool,'F_0') = s(bool,X380)) )),
  inference(superposition,[],[f302,f515])).
fof(f51341,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X116) != s(bool,happ(s(fun(X113,bool),'_dst_x0_1'(s(bool,X114))),s(X113,X115))) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,X114)) )),
  inference(subsumption_resolution,[],[f51132,f246])).
fof(f51132,plain,(
  ( ! [X116,X114,X115,X113] : (~p(s(bool,'T_0')) | s(bool,X116) != s(bool,happ(s(fun(X113,bool),'_dst_x0_1'(s(bool,X114))),s(X113,X115))) | s(bool,'T_0') = s(bool,X116) | s(bool,'F_0') = s(bool,X114)) )),
  inference(superposition,[],[f399,f515])).
fof(f53411,plain,(
  ( ! [X469,X468,X470] : (s(bool,X470) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X469),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X468))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X468),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X470)) )),
  inference(superposition,[],[f1864,f34843])).
fof(f53414,plain,(
  ( ! [X478,X477,X479] : (s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X478),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X477))) | s(bool,X479) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X477),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X479)) )),
  inference(superposition,[],[f2492,f34843])).
fof(f16606,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK11(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK11(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f334,f396])).
fof(f16605,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK11(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK11(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f334,f396])).
fof(f18823,plain,(
  ( ! [X97,X95,X98,X96] : (p(s(bool,happ(s(fun(X95,bool),sK5('_dstsel_0_x0_1'(s(X95,X96)),X98,fun(X95,bool))),s(X95,X96)))) | ~p(s(bool,happ(s(fun(X95,bool),X97),s(X95,X96)))) | p(s(bool,happ(s(fun(fun(X95,bool),bool),X98),s(fun(X95,bool),sK6('_dstsel_0_x0_1'(s(X95,X96)),X98,fun(X95,bool))))))) )),
  inference(forward_demodulation,[],[f18796,f333])).
fof(f18796,plain,(
  ( ! [X97,X95,X98,X96] : (~p(s(bool,happ(s(fun(X95,bool),X97),s(X95,X96)))) | p(s(bool,happ(s(fun(fun(X95,bool),bool),X98),s(fun(X95,bool),sK6('_dstsel_0_x0_1'(s(X95,X96)),X98,fun(X95,bool)))))) | p(s(bool,happ(s(fun(fun(X95,bool),bool),'_dstsel_0_x0_1'(s(X95,X96))),s(fun(X95,bool),sK5('_dstsel_0_x0_1'(s(X95,X96)),X98,fun(X95,bool))))))) )),
  inference(superposition,[],[f300,f333])).
fof(f16091,plain,(
  ( ! [X105,X104] : (~p(s(bool,happ(s(fun(X104,bool),sK8('_dstsel_0_x0_1'(s(X104,X105)),fun(X104,bool))),s(X104,X105)))) | p(s(bool,happ(s(fun(fun(fun(X104,bool),bool),bool),'!_1'),s(fun(fun(X104,bool),bool),'_dstsel_0_x0_1'(s(X104,X105))))))) )),
  inference(superposition,[],[f317,f333])).
fof(f300,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6])],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f188])).
fof(f188,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f187])).
fof(f187,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X6] : ! [X26,X27] : (! [X28] : (p(s(bool,happ(s(fun(X6,bool),X27),s(X6,X28)))) => p(s(bool,happ(s(fun(X6,bool),X26),s(X6,X28))))) => (? [X28] : p(s(bool,happ(s(fun(X6,bool),X27),s(X6,X28)))) => ? [X28] : p(s(bool,happ(s(fun(X6,bool),X26),s(X6,X28))))))),
  file('thm.benchmark.times_distinct','thm.bool.MONO_EXISTS')).
fof(f301,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f225])).
fof(f316,plain,(
  ( ! [X0,X3,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f232])).
fof(f232,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X1,X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8])],[f231])).
fof(f231,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(rectify,[],[f230])).
fof(f230,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (? [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))))),
  inference(nnf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) <=> ! [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X46,X49] : (p(s(bool,happ(s(fun(fun(X46,bool),bool),'!_1'),s(fun(X46,bool),X49)))) <=> ! [X47] : p(s(bool,happ(s(fun(X46,bool),X49),s(X46,X47)))))),
  file('thm.benchmark.times_distinct','!_HL_QUANT')).
fof(f319,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f235])).
fof(f235,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X1,X0)))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9])],[f234])).
fof(f234,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(rectify,[],[f233])).
fof(f233,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | ? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (! [X2] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))))),
  inference(nnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) <=> ? [X2] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X46,X49] : (p(s(bool,happ(s(fun(fun(X46,bool),bool),'?_1'),s(fun(X46,bool),X49)))) <=> ? [X47] : p(s(bool,happ(s(fun(X46,bool),X49),s(X46,X47)))))),
  file('thm.benchmark.times_distinct','?_HL_QUANT')).
fof(f3449,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2))))) )),
  inference(subsumption_resolution,[],[f3335,f251])).
fof(f3335,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X2)))) )),
  inference(superposition,[],[f299,f562])).
fof(f3460,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X15)))) | p(s(bool,'|dollar|exists_1'(s(fun(X12,bool),sK4(X13,X14,fun(X12,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f3449,f562])).
fof(f3517,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3492,f246])).
fof(f3492,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3449,f396])).
fof(f3799,plain,(
  ( ! [X6,X4,X5,X3] : (p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3786,f246])).
fof(f3786,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X3,bool),X4),s(X3,X5)))) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f316,f396])).
fof(f3975,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(X12,bool),X13),s(X12,X15)))) | p(s(bool,happ(s(fun(fun(X12,bool),bool),'?_1'),s(fun(X12,bool),sK4(X13,X14,fun(X12,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f319,f562])).
fof(f4034,plain,(
  ( ! [X6,X4,X7,X5] : (p(s(bool,happ(s(fun(fun(X4,bool),bool),'?_1'),s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f4007,f246])).
fof(f4007,plain,(
  ( ! [X6,X4,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X4,bool),bool),'?_1'),s(fun(X4,bool),X5)))) | s(bool,X7) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f319,f396])).
fof(f16055,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun(X3,bool),X5),s(X3,X4))) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'_dstsel_0_x0_1'(s(X3,X4))),s(fun(X3,bool),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f333,f396])).
fof(f16056,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) = s(bool,happ(s(fun(X7,bool),X9),s(X7,X8))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X7,bool),bool),'_dstsel_0_x0_1'(s(X7,X8))),s(fun(X7,bool),X9)))) )),
  inference(superposition,[],[f333,f396])).
fof(f16089,plain,(
  ( ! [X99,X100,X98] : (~p(s(bool,happ(s(fun(X98,bool),X100),s(X98,X99)))) | p(s(bool,happ(s(fun(fun(fun(X98,bool),bool),bool),'?_1'),s(fun(fun(X98,bool),bool),'_dstsel_0_x0_1'(s(X98,X99))))))) )),
  inference(superposition,[],[f319,f333])).
fof(f16090,plain,(
  ( ! [X103,X101,X102] : (~p(s(bool,happ(s(fun(X101,bool),X103),s(X101,X102)))) | p(s(bool,'|dollar|exists_1'(s(fun(fun(X101,bool),bool),'_dstsel_0_x0_1'(s(X101,X102))))))) )),
  inference(superposition,[],[f3449,f333])).
fof(f16201,plain,(
  ( ! [X212,X213,X214] : (s(bool,'T_0') != s(bool,happ(s(fun(X212,bool),X214),s(X212,X213))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X212,bool),bool),'_dstsel_0_x0_1'(s(X212,X213))),s(fun(X212,bool),X214)))) )),
  inference(forward_demodulation,[],[f16120,f289])).
fof(f16120,plain,(
  ( ! [X212,X216,X215,X213,X214] : (s(bool,'const.bool.DATATYPE_1'(s(X215,X216))) != s(bool,happ(s(fun(X212,bool),X214),s(X212,X213))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X212,bool),bool),'_dstsel_0_x0_1'(s(X212,X213))),s(fun(X212,bool),X214)))) )),
  inference(superposition,[],[f554,f333])).
fof(f17229,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') = s(bool,happ(s(fun(X4,bool),X6),s(X4,X5))) | s(bool,X8) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X4),'const.benchmark.Once_1'(s(X4,X5))),s(fun(X4,bool),X6),s(fun('type.benchmark.times'(X4),fun('type.benchmark.times'(X4),bool)),X7))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f335,f396])).
fof(f17230,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X13) = s(bool,happ(s(fun(X9,bool),X11),s(X9,X10))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X9),'const.benchmark.Once_1'(s(X9,X10))),s(fun(X9,bool),X11),s(fun('type.benchmark.times'(X9),fun('type.benchmark.times'(X9),bool)),X12)))) )),
  inference(superposition,[],[f335,f396])).
fof(f17393,plain,(
  ( ! [X261,X263,X260,X262] : (s(bool,'T_0') != s(bool,happ(s(fun(X260,bool),X262),s(X260,X261))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X260),'const.benchmark.Once_1'(s(X260,X261))),s(fun(X260,bool),X262),s(fun('type.benchmark.times'(X260),fun('type.benchmark.times'(X260),bool)),X263)))) )),
  inference(forward_demodulation,[],[f17292,f289])).
fof(f17292,plain,(
  ( ! [X261,X263,X265,X260,X262,X264] : (s(bool,'const.bool.DATATYPE_1'(s(X264,X265))) != s(bool,happ(s(fun(X260,bool),X262),s(X260,X261))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X260),'const.benchmark.Once_1'(s(X260,X261))),s(fun(X260,bool),X262),s(fun('type.benchmark.times'(X260),fun('type.benchmark.times'(X260),bool)),X263)))) )),
  inference(superposition,[],[f554,f335])).
fof(f18713,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X53)))) | p(s(bool,happ(s(fun(X50,bool),X54),s(X50,sK6(sK4(X51,X52,fun(X50,bool)),X54,X50))))) | p(s(bool,happ(s(fun(X50,bool),sK4(X51,X52,fun(X50,bool))),s(X50,sK5(sK4(X51,X52,fun(X50,bool)),X54,X50))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X50,bool),bool),X52)))) )),
  inference(superposition,[],[f300,f562])).
fof(f18805,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X3,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK6(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X3,X0)))))) )),
  inference(forward_demodulation,[],[f18705,f290])).
fof(f18705,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X3),s(X0,sK6(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X3,X0))))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))),s(X0,sK5(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X3,X0)))))) )),
  inference(superposition,[],[f300,f290])).
fof(f18806,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X4,bool),X6),s(X4,sK5(happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X9,X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X8)))) | p(s(bool,happ(s(fun(X4,bool),X9),s(X4,sK6(happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X9,X4)))))) )),
  inference(forward_demodulation,[],[f18706,f330])).
fof(f18706,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,X8)))) | p(s(bool,happ(s(fun(X4,bool),X9),s(X4,sK6(happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X9,X4))))) | p(s(bool,happ(s(fun(X4,bool),happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7))),s(X4,sK5(happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X9,X4)))))) )),
  inference(superposition,[],[f300,f330])).
fof(f18809,plain,(
  ( ! [X39,X43,X41,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK5('const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X43,X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X42)))) | p(s(bool,happ(s(fun(X39,bool),X43),s(X39,sK6('const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X43,X39)))))) )),
  inference(forward_demodulation,[],[f18711,f295])).
fof(f18711,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,X42)))) | p(s(bool,happ(s(fun(X39,bool),X43),s(X39,sK6('const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X43,X39))))) | p(s(bool,happ(s(fun(X39,bool),'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0'))),s(X39,sK5('const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X43,X39)))))) )),
  inference(superposition,[],[f300,f295])).
fof(f18815,plain,(
  ( ! [X14,X12,X10,X13,X11] : (p(s(bool,happ(s(fun(X10,bool),X13),s(X10,sK6(X11,X13,X10))))) | p(s(bool,happ(s(fun(X10,bool),X11),s(X10,sK5(X11,X13,X10))))) | s(bool,X14) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f18778,f246])).
fof(f18778,plain,(
  ( ! [X14,X12,X10,X13,X11] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X10,bool),X13),s(X10,sK6(X11,X13,X10))))) | p(s(bool,happ(s(fun(X10,bool),X11),s(X10,sK5(X11,X13,X10))))) | s(bool,X14) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f300,f396])).
fof(f28696,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X13,fun(X10,bool)),'_dst_x0x1_2'(s(fun(X11,fun(X10,bool)),X12),s(fun(X13,X11),X14))),s(X13,X15))),s(X10,sK5(X16,happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X10))))) | ~p(s(bool,happ(s(fun(X10,bool),X16),s(X10,X17)))) | p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15))))),s(X10,sK6(X16,happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X10)))))) )),
  inference(superposition,[],[f301,f340])).
fof(f28697,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X20,fun(X18,bool)),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))),s(X18,sK5(X24,happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X18))))) | ~p(s(bool,happ(s(fun(X18,bool),X24),s(X18,X25)))) | p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23))),s(X18,sK6(X24,happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X18)))))) )),
  inference(superposition,[],[f301,f340])).
fof(f28702,plain,(
  ( ! [X54,X52,X50,X53,X51] : (~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK5(X53,sK4(X51,X52,fun(X50,bool)),X50))))) | ~p(s(bool,happ(s(fun(X50,bool),X53),s(X50,X54)))) | p(s(bool,happ(s(fun(X50,bool),sK4(X51,X52,fun(X50,bool))),s(X50,sK6(X53,sK4(X51,X52,fun(X50,bool)),X50))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X50,bool),bool),X52)))) )),
  inference(superposition,[],[f301,f562])).
fof(f28748,plain,(
  ( ! [X94,X99,X97,X95,X98,X96] : (~p(s(bool,happ(s(fun(X95,bool),X96),s(X95,happ(s(fun(X94,X95),X97),s(X94,sK5(X98,'_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun(X94,X95),X97)),X94))))))) | ~p(s(bool,happ(s(fun(X94,bool),X98),s(X94,X99)))) | p(s(bool,happ(s(fun(X94,bool),'_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun(X94,X95),X97))),s(X94,sK6(X98,'_dst_x0x1_2'(s(fun(X95,bool),X96),s(fun(X94,X95),X97)),X94)))))) )),
  inference(superposition,[],[f301,f340])).
fof(f28752,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK6(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) )),
  inference(forward_demodulation,[],[f28694,f290])).
fof(f28694,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))),s(X0,sK6(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(superposition,[],[f301,f290])).
fof(f28753,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (p(s(bool,happ(s(fun(X4,bool),X6),s(X4,sK6(X8,happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,sK5(X8,happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X8),s(X4,X9))))) )),
  inference(forward_demodulation,[],[f28695,f330])).
fof(f28695,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X4,bool),X6),s(X4,sK5(X8,happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X4))))) | ~p(s(bool,happ(s(fun(X4,bool),X8),s(X4,X9)))) | p(s(bool,happ(s(fun(X4,bool),happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7))),s(X4,sK6(X8,happ(s(fun(X5,fun(X4,bool)),'_dst_x0_1'(s(fun(X4,bool),X6))),s(X5,X7)),X4)))))) )),
  inference(superposition,[],[f301,f330])).
fof(f28754,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,sK6(X30,happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,sK5(X30,happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X30),s(X26,X31))))) )),
  inference(forward_demodulation,[],[f28698,f333])).
fof(f28698,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (~p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,sK5(X30,happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X26))))) | ~p(s(bool,happ(s(fun(X26,bool),X30),s(X26,X31)))) | p(s(bool,happ(s(fun(X26,bool),happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29))),s(X26,sK6(X30,happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X26)))))) )),
  inference(superposition,[],[f301,f333])).
fof(f28755,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,sK6(X37,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,sK5(X37,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X37),s(X32,X38))))) )),
  inference(forward_demodulation,[],[f28699,f335])).
fof(f28699,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,sK5(X37,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X32))))) | ~p(s(bool,happ(s(fun(X32,bool),X37),s(X32,X38)))) | p(s(bool,happ(s(fun(X32,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36))),s(X32,sK6(X37,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X32)))))) )),
  inference(superposition,[],[f301,f335])).
fof(f28756,plain,(
  ( ! [X39,X43,X41,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK6(X42,'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK5(X42,'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X42),s(X39,X43))))) )),
  inference(forward_demodulation,[],[f28700,f295])).
fof(f28700,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,happ(s(fun(X39,bool),X40),s(X39,sK5(X42,'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X39))))) | ~p(s(bool,happ(s(fun(X39,bool),X42),s(X39,X43)))) | p(s(bool,happ(s(fun(X39,bool),'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0'))),s(X39,sK6(X42,'const.ind_type.FCONS_3'(s(fun(X39,bool),X40),s(fun('type.num.num',fun(X39,bool)),X41),s('type.num.num','const.num.|48|_0')),X39)))))) )),
  inference(superposition,[],[f301,f295])).
fof(f28757,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,sK6(X48,'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X44))))) | ~p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,sK5(X48,'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X44))))) | ~p(s(bool,happ(s(fun(X44,bool),X48),s(X44,X49))))) )),
  inference(forward_demodulation,[],[f28701,f304])).
fof(f28701,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (~p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,sK5(X48,'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X44))))) | ~p(s(bool,happ(s(fun(X44,bool),X48),s(X44,X49)))) | p(s(bool,happ(s(fun(X44,bool),'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))))),s(X44,sK6(X48,'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X44)))))) )),
  inference(superposition,[],[f301,f304])).
fof(f28778,plain,(
  ( ! [X12,X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),X10),s(X8,X11)))) | p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8))))) | s(bool,X12) = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK5(X10,X9,X8)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f28729,f246])).
fof(f28729,plain,(
  ( ! [X12,X10,X8,X11,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X8,bool),X10),s(X8,X11)))) | p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK6(X10,X9,X8))))) | s(bool,X12) = s(bool,happ(s(fun(X8,bool),X9),s(X8,sK5(X10,X9,X8)))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f301,f396])).
fof(f31770,plain,(
  ( ! [X231,X235,X233,X230,X234,X232] : (~p(s(bool,happ(s(fun(X231,bool),happ(s(fun(X230,fun(X231,bool)),X232),s(X230,sK5(X234,'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233)),X230)))),s(X231,X233)))) | ~p(s(bool,happ(s(fun(X230,bool),X234),s(X230,X235)))) | p(s(bool,happ(s(fun(X230,bool),'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233))),s(X230,sK6(X234,'_dst_x1x0_2'(s(fun(X230,fun(X231,bool)),X232),s(X231,X233)),X230)))))) )),
  inference(superposition,[],[f301,f341])).
fof(f31854,plain,(
  ( ! [X728,X730,X724,X726,X729,X731,X725,X727] : (~p(s(bool,happ(s(fun(X724,bool),happ(s(fun(X726,fun(X724,bool)),happ(s(fun(X725,fun(X726,fun(X724,bool))),X727),s(X725,X729))),s(X726,X728))),s(X724,sK5(X730,happ(s(fun(X725,fun(X724,bool)),'_dst_x1x0_2'(s(fun(X725,fun(X726,fun(X724,bool))),X727),s(X726,X728))),s(X725,X729)),X724))))) | ~p(s(bool,happ(s(fun(X724,bool),X730),s(X724,X731)))) | p(s(bool,happ(s(fun(X724,bool),happ(s(fun(X725,fun(X724,bool)),'_dst_x1x0_2'(s(fun(X725,fun(X726,fun(X724,bool))),X727),s(X726,X728))),s(X725,X729))),s(X724,sK6(X730,happ(s(fun(X725,fun(X724,bool)),'_dst_x1x0_2'(s(fun(X725,fun(X726,fun(X724,bool))),X727),s(X726,X728))),s(X725,X729)),X724)))))) )),
  inference(superposition,[],[f301,f341])).
fof(f31931,plain,(
  ( ! [X249,X246,X244,X248,X247,X245] : (~p(s(bool,happ(s(fun(X245,bool),'_dst_x1x0_2'(s(fun(X245,fun(X244,bool)),X246),s(X244,sK5(X248,happ(s(fun(X245,fun(X244,bool)),X246),s(X245,X247)),X244)))),s(X245,X247)))) | ~p(s(bool,happ(s(fun(X244,bool),X248),s(X244,X249)))) | p(s(bool,happ(s(fun(X244,bool),happ(s(fun(X245,fun(X244,bool)),X246),s(X245,X247))),s(X244,sK6(X248,happ(s(fun(X245,fun(X244,bool)),X246),s(X245,X247)),X244)))))) )),
  inference(superposition,[],[f301,f341])).
fof(f32015,plain,(
  ( ! [X738,X745,X741,X743,X739,X744,X740,X742] : (~p(s(bool,happ(s(fun(X738,bool),happ(s(fun(X740,fun(X738,bool)),'_dst_x1x0_2'(s(fun(X740,fun(X739,fun(X738,bool))),X741),s(X739,X743))),s(X740,X742))),s(X738,sK5(X744,happ(s(fun(X739,fun(X738,bool)),happ(s(fun(X740,fun(X739,fun(X738,bool))),X741),s(X740,X742))),s(X739,X743)),X738))))) | ~p(s(bool,happ(s(fun(X738,bool),X744),s(X738,X745)))) | p(s(bool,happ(s(fun(X738,bool),happ(s(fun(X739,fun(X738,bool)),happ(s(fun(X740,fun(X739,fun(X738,bool))),X741),s(X740,X742))),s(X739,X743))),s(X738,sK6(X744,happ(s(fun(X739,fun(X738,bool)),happ(s(fun(X740,fun(X739,fun(X738,bool))),X741),s(X740,X742))),s(X739,X743)),X738)))))) )),
  inference(superposition,[],[f301,f341])).
fof(f33072,plain,(
  ( ! [X524,X520,X522,X521,X523,X519] : (p(s(bool,happ(s(fun(X519,bool),'const.ind_type.FCONS_3'(s(fun(X519,bool),X521),s(fun('type.num.num',fun(X519,bool)),X520),s('type.num.num',X522))),s(X519,sK6(X523,happ(s(fun('type.num.num',fun(X519,bool)),happ(s(fun(fun(X519,bool),fun('type.num.num',fun(X519,bool))),'_dst_x1x0_2'(s(fun(fun(X519,bool),fun(fun('type.num.num',fun(X519,bool)),fun('type.num.num',fun(X519,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X519,bool)),X520))),s(fun(X519,bool),X521))),s('type.num.num',X522)),X519))))) | ~p(s(bool,happ(s(fun(X519,bool),'const.ind_type.FCONS_3'(s(fun(X519,bool),X521),s(fun('type.num.num',fun(X519,bool)),X520),s('type.num.num',X522))),s(X519,sK5(X523,happ(s(fun('type.num.num',fun(X519,bool)),happ(s(fun(fun(X519,bool),fun('type.num.num',fun(X519,bool))),'_dst_x1x0_2'(s(fun(fun(X519,bool),fun(fun('type.num.num',fun(X519,bool)),fun('type.num.num',fun(X519,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X519,bool)),X520))),s(fun(X519,bool),X521))),s('type.num.num',X522)),X519))))) | ~p(s(bool,happ(s(fun(X519,bool),X523),s(X519,X524))))) )),
  inference(forward_demodulation,[],[f32849,f377])).
fof(f32849,plain,(
  ( ! [X524,X520,X522,X521,X523,X519] : (~p(s(bool,happ(s(fun(X519,bool),'const.ind_type.FCONS_3'(s(fun(X519,bool),X521),s(fun('type.num.num',fun(X519,bool)),X520),s('type.num.num',X522))),s(X519,sK5(X523,happ(s(fun('type.num.num',fun(X519,bool)),happ(s(fun(fun(X519,bool),fun('type.num.num',fun(X519,bool))),'_dst_x1x0_2'(s(fun(fun(X519,bool),fun(fun('type.num.num',fun(X519,bool)),fun('type.num.num',fun(X519,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X519,bool)),X520))),s(fun(X519,bool),X521))),s('type.num.num',X522)),X519))))) | ~p(s(bool,happ(s(fun(X519,bool),X523),s(X519,X524)))) | p(s(bool,happ(s(fun(X519,bool),happ(s(fun('type.num.num',fun(X519,bool)),happ(s(fun(fun(X519,bool),fun('type.num.num',fun(X519,bool))),'_dst_x1x0_2'(s(fun(fun(X519,bool),fun(fun('type.num.num',fun(X519,bool)),fun('type.num.num',fun(X519,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X519,bool)),X520))),s(fun(X519,bool),X521))),s('type.num.num',X522))),s(X519,sK6(X523,happ(s(fun('type.num.num',fun(X519,bool)),happ(s(fun(fun(X519,bool),fun('type.num.num',fun(X519,bool))),'_dst_x1x0_2'(s(fun(fun(X519,bool),fun(fun('type.num.num',fun(X519,bool)),fun('type.num.num',fun(X519,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X519,bool)),X520))),s(fun(X519,bool),X521))),s('type.num.num',X522)),X519)))))) )),
  inference(superposition,[],[f301,f377])).
fof(f33925,plain,(
  ( ! [X111,X109,X107,X105,X110,X108,X106,X104] : (~p(s(bool,happ(s(fun(X104,bool),happ(s(fun(X107,fun(X104,bool)),'_dst_x00x11_2'(s(fun(X105,bool),X106),s(fun(X107,fun(X104,X105)),X108))),s(X107,X109))),s(X104,sK5(X110,'_dst_x0x1_2'(s(fun(X105,bool),X106),s(fun(X104,X105),happ(s(fun(X107,fun(X104,X105)),X108),s(X107,X109)))),X104))))) | ~p(s(bool,happ(s(fun(X104,bool),X110),s(X104,X111)))) | p(s(bool,happ(s(fun(X104,bool),'_dst_x0x1_2'(s(fun(X105,bool),X106),s(fun(X104,X105),happ(s(fun(X107,fun(X104,X105)),X108),s(X107,X109))))),s(X104,sK6(X110,'_dst_x0x1_2'(s(fun(X105,bool),X106),s(fun(X104,X105),happ(s(fun(X107,fun(X104,X105)),X108),s(X107,X109)))),X104)))))) )),
  inference(superposition,[],[f301,f358])).
fof(f33979,plain,(
  ( ! [X111,X109,X107,X105,X110,X108,X106,X104] : (~p(s(bool,happ(s(fun(X104,bool),'_dst_x0x1_2'(s(fun(X106,bool),X107),s(fun(X104,X106),happ(s(fun(X105,fun(X104,X106)),X108),s(X105,X109))))),s(X104,sK5(X110,happ(s(fun(X105,fun(X104,bool)),'_dst_x00x11_2'(s(fun(X106,bool),X107),s(fun(X105,fun(X104,X106)),X108))),s(X105,X109)),X104))))) | ~p(s(bool,happ(s(fun(X104,bool),X110),s(X104,X111)))) | p(s(bool,happ(s(fun(X104,bool),happ(s(fun(X105,fun(X104,bool)),'_dst_x00x11_2'(s(fun(X106,bool),X107),s(fun(X105,fun(X104,X106)),X108))),s(X105,X109))),s(X104,sK6(X110,happ(s(fun(X105,fun(X104,bool)),'_dst_x00x11_2'(s(fun(X106,bool),X107),s(fun(X105,fun(X104,X106)),X108))),s(X105,X109)),X104)))))) )),
  inference(superposition,[],[f301,f358])).
fof(f35237,plain,(
  ( ! [X757,X759,X753,X755,X756,X758,X752,X754] : (p(s(bool,happ(s(fun(X752,bool),happ(s(fun('type.benchmark.times'(X753),fun(X752,bool)),happ(s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757),s('type.benchmark.times'(X753),X754))),s('type.benchmark.times'(X753),X755))),s(X752,sK6(X758,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X753),'const.benchmark.Twice_2'(s('type.benchmark.times'(X753),X754),s('type.benchmark.times'(X753),X755))),s(fun(X753,fun(X752,bool)),X756),s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757)),X752))))) | ~p(s(bool,happ(s(fun(X752,bool),happ(s(fun('type.benchmark.times'(X753),fun(X752,bool)),happ(s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757),s('type.benchmark.times'(X753),X754))),s('type.benchmark.times'(X753),X755))),s(X752,sK5(X758,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X753),'const.benchmark.Twice_2'(s('type.benchmark.times'(X753),X754),s('type.benchmark.times'(X753),X755))),s(fun(X753,fun(X752,bool)),X756),s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757)),X752))))) | ~p(s(bool,happ(s(fun(X752,bool),X758),s(X752,X759))))) )),
  inference(forward_demodulation,[],[f35013,f336])).
fof(f35013,plain,(
  ( ! [X757,X759,X753,X755,X756,X758,X752,X754] : (~p(s(bool,happ(s(fun(X752,bool),happ(s(fun('type.benchmark.times'(X753),fun(X752,bool)),happ(s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757),s('type.benchmark.times'(X753),X754))),s('type.benchmark.times'(X753),X755))),s(X752,sK5(X758,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X753),'const.benchmark.Twice_2'(s('type.benchmark.times'(X753),X754),s('type.benchmark.times'(X753),X755))),s(fun(X753,fun(X752,bool)),X756),s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757)),X752))))) | ~p(s(bool,happ(s(fun(X752,bool),X758),s(X752,X759)))) | p(s(bool,happ(s(fun(X752,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X753),'const.benchmark.Twice_2'(s('type.benchmark.times'(X753),X754),s('type.benchmark.times'(X753),X755))),s(fun(X753,fun(X752,bool)),X756),s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757))),s(X752,sK6(X758,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X753),'const.benchmark.Twice_2'(s('type.benchmark.times'(X753),X754),s('type.benchmark.times'(X753),X755))),s(fun(X753,fun(X752,bool)),X756),s(fun('type.benchmark.times'(X753),fun('type.benchmark.times'(X753),fun(X752,bool))),X757)),X752)))))) )),
  inference(superposition,[],[f301,f336])).
fof(f36006,plain,(
  ( ! [X134,X140,X138,X136,X135,X133,X139,X137] : (s(X136,happ(s(fun(bool,X136),happ(s(fun(X137,fun(bool,X136)),X138),s(X137,X139))),s(bool,'T_0'))) = s(X136,happ(s(fun(X133,X136),'_dst_x0x0x1_3'(s(fun(X137,fun(bool,X136)),X138),s(X137,X139),s(fun(X133,bool),X134))),s(X133,X135))) | s(bool,X140) = s(bool,happ(s(fun(X133,bool),X134),s(X133,X135))) | s(bool,'T_0') = s(bool,X140)) )),
  inference(superposition,[],[f359,f396])).
fof(f36007,plain,(
  ( ! [X146,X144,X142,X147,X145,X143,X141,X148] : (s(X145,happ(s(fun(bool,X145),happ(s(fun(X146,fun(bool,X145)),X147),s(X146,X148))),s(bool,X144))) = s(X145,happ(s(fun(X141,X145),'_dst_x0x0x1_3'(s(fun(X146,fun(bool,X145)),X147),s(X146,X148),s(fun(X141,bool),X142))),s(X141,X143))) | s(bool,'T_0') = s(bool,X144) | s(bool,'T_0') = s(bool,happ(s(fun(X141,bool),X142),s(X141,X143)))) )),
  inference(superposition,[],[f359,f396])).
fof(f36094,plain,(
  ( ! [X356,X358,X354,X360,X357,X359,X353,X355] : (~p(s(bool,happ(s(fun(X355,bool),happ(s(fun(X354,fun(X355,bool)),X356),s(X354,X357))),s(X355,happ(s(fun(X353,X355),X358),s(X353,sK5(X359,'_dst_x0x0x1_3'(s(fun(X354,fun(X355,bool)),X356),s(X354,X357),s(fun(X353,X355),X358)),X353))))))) | ~p(s(bool,happ(s(fun(X353,bool),X359),s(X353,X360)))) | p(s(bool,happ(s(fun(X353,bool),'_dst_x0x0x1_3'(s(fun(X354,fun(X355,bool)),X356),s(X354,X357),s(fun(X353,X355),X358))),s(X353,sK6(X359,'_dst_x0x0x1_3'(s(fun(X354,fun(X355,bool)),X356),s(X354,X357),s(fun(X353,X355),X358)),X353)))))) )),
  inference(superposition,[],[f301,f359])).
fof(f36186,plain,(
  ( ! [X1104,X1099,X1097,X1103,X1101,X1095,X1098,X1096,X1102,X1100] : (~p(s(bool,happ(s(fun(X1095,bool),happ(s(fun(X1098,fun(X1095,bool)),happ(s(fun(X1097,fun(X1098,fun(X1095,bool))),X1099),s(X1097,X1100))),s(X1098,happ(s(fun(X1096,X1098),X1101),s(X1096,X1102))))),s(X1095,sK5(X1103,happ(s(fun(X1096,fun(X1095,bool)),'_dst_x0x0x1_3'(s(fun(X1097,fun(X1098,fun(X1095,bool))),X1099),s(X1097,X1100),s(fun(X1096,X1098),X1101))),s(X1096,X1102)),X1095))))) | ~p(s(bool,happ(s(fun(X1095,bool),X1103),s(X1095,X1104)))) | p(s(bool,happ(s(fun(X1095,bool),happ(s(fun(X1096,fun(X1095,bool)),'_dst_x0x0x1_3'(s(fun(X1097,fun(X1098,fun(X1095,bool))),X1099),s(X1097,X1100),s(fun(X1096,X1098),X1101))),s(X1096,X1102))),s(X1095,sK6(X1103,happ(s(fun(X1096,fun(X1095,bool)),'_dst_x0x0x1_3'(s(fun(X1097,fun(X1098,fun(X1095,bool))),X1099),s(X1097,X1100),s(fun(X1096,X1098),X1101))),s(X1096,X1102)),X1095)))))) )),
  inference(superposition,[],[f301,f359])).
fof(f36268,plain,(
  ( ! [X333,X331,X332,X334] : (~p(s(bool,happ(s(fun(X332,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X331),s(fun(X332,bool),X333))),s(X332,X334)))) | p(s(bool,happ(s(fun(X332,bool),X333),s(X332,X334))))) )),
  inference(superposition,[],[f321,f359])).
fof(f36271,plain,(
  ( ! [X344,X346,X343,X345] : (~p(s(bool,happ(s(fun(X344,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X343),s(fun(X344,bool),X345))),s(X344,X346)))) | p(s(bool,X343)) | p(s(bool,happ(s(fun(X344,bool),X345),s(X344,X346))))) )),
  inference(superposition,[],[f323,f359])).
fof(f36367,plain,(
  ( ! [X1112,X1116,X1110,X1108,X1115,X1113,X1107,X1111,X1109,X1114] : (~p(s(bool,happ(s(fun(X1107,bool),happ(s(fun(X1112,fun(X1107,bool)),'_dst_x0x0x1_3'(s(fun(X1109,fun(X1108,fun(X1107,bool))),X1110),s(X1109,X1111),s(fun(X1112,X1108),X1113))),s(X1112,X1114))),s(X1107,sK5(X1115,happ(s(fun(X1108,fun(X1107,bool)),happ(s(fun(X1109,fun(X1108,fun(X1107,bool))),X1110),s(X1109,X1111))),s(X1108,happ(s(fun(X1112,X1108),X1113),s(X1112,X1114)))),X1107))))) | ~p(s(bool,happ(s(fun(X1107,bool),X1115),s(X1107,X1116)))) | p(s(bool,happ(s(fun(X1107,bool),happ(s(fun(X1108,fun(X1107,bool)),happ(s(fun(X1109,fun(X1108,fun(X1107,bool))),X1110),s(X1109,X1111))),s(X1108,happ(s(fun(X1112,X1108),X1113),s(X1112,X1114))))),s(X1107,sK6(X1115,happ(s(fun(X1108,fun(X1107,bool)),happ(s(fun(X1109,fun(X1108,fun(X1107,bool))),X1110),s(X1109,X1111))),s(X1108,happ(s(fun(X1112,X1108),X1113),s(X1112,X1114)))),X1107)))))) )),
  inference(superposition,[],[f301,f359])).
fof(f37496,plain,(
  ( ! [X177,X175,X173,X171,X169,X178,X176,X174,X172,X170] : (~p(s(bool,happ(s(fun(X169,bool),happ(s(fun(X173,fun(X169,bool)),'_dst_x00x10x01_3'(s(fun(X170,fun(X171,bool)),X172),s(fun(X173,X170),X174),s(fun(X169,X171),X176))),s(X173,X175))),s(X169,sK5(X177,'_dst_x0x0x1_3'(s(fun(X170,fun(X171,bool)),X172),s(X170,happ(s(fun(X173,X170),X174),s(X173,X175))),s(fun(X169,X171),X176)),X169))))) | ~p(s(bool,happ(s(fun(X169,bool),X177),s(X169,X178)))) | p(s(bool,happ(s(fun(X169,bool),'_dst_x0x0x1_3'(s(fun(X170,fun(X171,bool)),X172),s(X170,happ(s(fun(X173,X170),X174),s(X173,X175))),s(fun(X169,X171),X176))),s(X169,sK6(X177,'_dst_x0x0x1_3'(s(fun(X170,fun(X171,bool)),X172),s(X170,happ(s(fun(X173,X170),X174),s(X173,X175))),s(fun(X169,X171),X176)),X169)))))) )),
  inference(superposition,[],[f301,f362])).
fof(f37562,plain,(
  ( ! [X198,X196,X194,X192,X200,X199,X197,X195,X193,X201] : (~p(s(bool,happ(s(fun(X192,bool),'_dst_x0x0x1_3'(s(fun(X194,fun(X195,bool)),X196),s(X194,happ(s(fun(X193,X194),X197),s(X193,X199))),s(fun(X192,X195),X198))),s(X192,sK5(X200,happ(s(fun(X193,fun(X192,bool)),'_dst_x00x10x01_3'(s(fun(X194,fun(X195,bool)),X196),s(fun(X193,X194),X197),s(fun(X192,X195),X198))),s(X193,X199)),X192))))) | ~p(s(bool,happ(s(fun(X192,bool),X200),s(X192,X201)))) | p(s(bool,happ(s(fun(X192,bool),happ(s(fun(X193,fun(X192,bool)),'_dst_x00x10x01_3'(s(fun(X194,fun(X195,bool)),X196),s(fun(X193,X194),X197),s(fun(X192,X195),X198))),s(X193,X199))),s(X192,sK6(X200,happ(s(fun(X193,fun(X192,bool)),'_dst_x00x10x01_3'(s(fun(X194,fun(X195,bool)),X196),s(fun(X193,X194),X197),s(fun(X192,X195),X198))),s(X193,X199)),X192)))))) )),
  inference(superposition,[],[f301,f362])).
fof(f38209,plain,(
  ( ! [X212,X210,X216,X218,X215,X213,X211,X217,X219,X214] : (~p(s(bool,happ(s(fun(X210,bool),happ(s(fun(X215,fun(X210,bool)),'_dst_x00x00x11_3'(s(fun(X211,fun(X212,bool)),X213),s(X211,X214),s(fun(X215,fun(X210,X212)),X216))),s(X215,X217))),s(X210,sK5(X218,'_dst_x0x0x1_3'(s(fun(X211,fun(X212,bool)),X213),s(X211,X214),s(fun(X210,X212),happ(s(fun(X215,fun(X210,X212)),X216),s(X215,X217)))),X210))))) | ~p(s(bool,happ(s(fun(X210,bool),X218),s(X210,X219)))) | p(s(bool,happ(s(fun(X210,bool),'_dst_x0x0x1_3'(s(fun(X211,fun(X212,bool)),X213),s(X211,X214),s(fun(X210,X212),happ(s(fun(X215,fun(X210,X212)),X216),s(X215,X217))))),s(X210,sK6(X218,'_dst_x0x0x1_3'(s(fun(X211,fun(X212,bool)),X213),s(X211,X214),s(fun(X210,X212),happ(s(fun(X215,fun(X210,X212)),X216),s(X215,X217)))),X210)))))) )),
  inference(superposition,[],[f301,f363])).
fof(f38279,plain,(
  ( ! [X222,X231,X229,X227,X225,X223,X230,X228,X226,X224] : (~p(s(bool,happ(s(fun(X222,bool),'_dst_x0x0x1_3'(s(fun(X224,fun(X225,bool)),X226),s(X224,X227),s(fun(X222,X225),happ(s(fun(X223,fun(X222,X225)),X228),s(X223,X229))))),s(X222,sK5(X230,happ(s(fun(X223,fun(X222,bool)),'_dst_x00x00x11_3'(s(fun(X224,fun(X225,bool)),X226),s(X224,X227),s(fun(X223,fun(X222,X225)),X228))),s(X223,X229)),X222))))) | ~p(s(bool,happ(s(fun(X222,bool),X230),s(X222,X231)))) | p(s(bool,happ(s(fun(X222,bool),happ(s(fun(X223,fun(X222,bool)),'_dst_x00x00x11_3'(s(fun(X224,fun(X225,bool)),X226),s(X224,X227),s(fun(X223,fun(X222,X225)),X228))),s(X223,X229))),s(X222,sK6(X230,happ(s(fun(X223,fun(X222,bool)),'_dst_x00x00x11_3'(s(fun(X224,fun(X225,bool)),X226),s(X224,X227),s(fun(X223,fun(X222,X225)),X228))),s(X223,X229)),X222)))))) )),
  inference(superposition,[],[f301,f363])).
fof(f40003,plain,(
  ( ! [X158,X156,X154,X159,X157,X155,X153,X160] : (s(X156,happ(s(fun(X153,X156),'_dst_x0x1x1_3'(s(fun(bool,fun(X157,X156)),X158),s(fun(X153,bool),X154),s(fun(X153,X157),X159))),s(X153,X155))) = s(X156,happ(s(fun(X157,X156),happ(s(fun(bool,fun(X157,X156)),X158),s(bool,'T_0'))),s(X157,happ(s(fun(X153,X157),X159),s(X153,X155))))) | s(bool,X160) = s(bool,happ(s(fun(X153,bool),X154),s(X153,X155))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f360,f396])).
fof(f40004,plain,(
  ( ! [X167,X165,X163,X161,X166,X164,X162,X168] : (s(X165,happ(s(fun(X161,X165),'_dst_x0x1x1_3'(s(fun(bool,fun(X166,X165)),X167),s(fun(X161,bool),X162),s(fun(X161,X166),X168))),s(X161,X163))) = s(X165,happ(s(fun(X166,X165),happ(s(fun(bool,fun(X166,X165)),X167),s(bool,X164))),s(X166,happ(s(fun(X161,X166),X168),s(X161,X163))))) | s(bool,'T_0') = s(bool,X164) | s(bool,'T_0') = s(bool,happ(s(fun(X161,bool),X162),s(X161,X163)))) )),
  inference(superposition,[],[f360,f396])).
fof(f40194,plain,(
  ( ! [X158,X156,X154,X159,X157,X155,X153,X160] : (s(X156,happ(s(fun(X153,X156),'_dst_x0x1x1_3'(s(fun(X157,fun(bool,X156)),X158),s(fun(X153,X157),X159),s(fun(X153,bool),X154))),s(X153,X155))) = s(X156,happ(s(fun(bool,X156),happ(s(fun(X157,fun(bool,X156)),X158),s(X157,happ(s(fun(X153,X157),X159),s(X153,X155))))),s(bool,'T_0'))) | s(bool,X160) = s(bool,happ(s(fun(X153,bool),X154),s(X153,X155))) | s(bool,'T_0') = s(bool,X160)) )),
  inference(superposition,[],[f360,f396])).
fof(f40195,plain,(
  ( ! [X167,X165,X163,X161,X166,X164,X162,X168] : (s(X165,happ(s(fun(X161,X165),'_dst_x0x1x1_3'(s(fun(X166,fun(bool,X165)),X167),s(fun(X161,X166),X168),s(fun(X161,bool),X162))),s(X161,X163))) = s(X165,happ(s(fun(bool,X165),happ(s(fun(X166,fun(bool,X165)),X167),s(X166,happ(s(fun(X161,X166),X168),s(X161,X163))))),s(bool,X164))) | s(bool,'T_0') = s(bool,X164) | s(bool,'T_0') = s(bool,happ(s(fun(X161,bool),X162),s(X161,X163)))) )),
  inference(superposition,[],[f360,f396])).
fof(f40293,plain,(
  ( ! [X453,X451,X452,X454] : (~p(s(bool,happ(s(fun(X451,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X451,bool),X452),s(fun(X451,bool),X454))),s(X451,X453)))) | p(s(bool,happ(s(fun(X451,bool),X454),s(X451,X453))))) )),
  inference(superposition,[],[f321,f360])).
fof(f40294,plain,(
  ( ! [X455,X457,X456,X458] : (~p(s(bool,happ(s(fun(X455,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(X455,bool),X456),s(fun(X455,bool),X458))),s(X455,X457)))) | p(s(bool,happ(s(fun(X455,bool),X456),s(X455,X457))))) )),
  inference(superposition,[],[f320,f360])).
fof(f40295,plain,(
  ( ! [X461,X459,X460,X462] : (p(s(bool,happ(s(fun(X459,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(X459,bool),X460),s(fun(X459,bool),X462))),s(X459,X461)))) | p(s(bool,happ(s(fun(X459,bool),X460),s(X459,X461))))) )),
  inference(superposition,[],[f327,f360])).
fof(f40296,plain,(
  ( ! [X466,X463,X465,X464] : (~p(s(bool,happ(s(fun(X463,bool),'_dst_x0x1x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun(X463,bool),X464),s(fun(X463,bool),X466))),s(X463,X465)))) | p(s(bool,happ(s(fun(X463,bool),X464),s(X463,X465)))) | p(s(bool,happ(s(fun(X463,bool),X466),s(X463,X465))))) )),
  inference(superposition,[],[f323,f360])).
fof(f40701,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1319,X1311,X1312,X1314,X1316,X1318] : (p(s(bool,happ(s(fun(X1310,bool),happ(s(fun(X1314,fun(X1310,bool)),'_dst_x0x1x1_3'(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(fun(X1314,X1312),X1315),s(fun(X1314,X1311),X1317))),s(X1314,X1316))),s(X1310,sK6(X1318,happ(s(fun(X1311,fun(X1310,bool)),happ(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(X1312,happ(s(fun(X1314,X1312),X1315),s(X1314,X1316))))),s(X1311,happ(s(fun(X1314,X1311),X1317),s(X1314,X1316)))),X1310))))) | ~p(s(bool,happ(s(fun(X1310,bool),happ(s(fun(X1314,fun(X1310,bool)),'_dst_x0x1x1_3'(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(fun(X1314,X1312),X1315),s(fun(X1314,X1311),X1317))),s(X1314,X1316))),s(X1310,sK5(X1318,happ(s(fun(X1311,fun(X1310,bool)),happ(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(X1312,happ(s(fun(X1314,X1312),X1315),s(X1314,X1316))))),s(X1311,happ(s(fun(X1314,X1311),X1317),s(X1314,X1316)))),X1310))))) | ~p(s(bool,happ(s(fun(X1310,bool),X1318),s(X1310,X1319))))) )),
  inference(forward_demodulation,[],[f40398,f360])).
fof(f40398,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1319,X1311,X1312,X1314,X1316,X1318] : (~p(s(bool,happ(s(fun(X1310,bool),happ(s(fun(X1314,fun(X1310,bool)),'_dst_x0x1x1_3'(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(fun(X1314,X1312),X1315),s(fun(X1314,X1311),X1317))),s(X1314,X1316))),s(X1310,sK5(X1318,happ(s(fun(X1311,fun(X1310,bool)),happ(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(X1312,happ(s(fun(X1314,X1312),X1315),s(X1314,X1316))))),s(X1311,happ(s(fun(X1314,X1311),X1317),s(X1314,X1316)))),X1310))))) | ~p(s(bool,happ(s(fun(X1310,bool),X1318),s(X1310,X1319)))) | p(s(bool,happ(s(fun(X1310,bool),happ(s(fun(X1311,fun(X1310,bool)),happ(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(X1312,happ(s(fun(X1314,X1312),X1315),s(X1314,X1316))))),s(X1311,happ(s(fun(X1314,X1311),X1317),s(X1314,X1316))))),s(X1310,sK6(X1318,happ(s(fun(X1311,fun(X1310,bool)),happ(s(fun(X1312,fun(X1311,fun(X1310,bool))),X1313),s(X1312,happ(s(fun(X1314,X1312),X1315),s(X1314,X1316))))),s(X1311,happ(s(fun(X1314,X1311),X1317),s(X1314,X1316)))),X1310)))))) )),
  inference(superposition,[],[f301,f360])).
fof(f41721,plain,(
  ( ! [X231,X239,X237,X235,X233,X240,X238,X236,X234,X232] : (~p(s(bool,happ(s(fun(X231,bool),happ(s(fun(X236,fun(X231,bool)),'_dst_x00x01x11_3'(s(fun(X232,fun(X233,bool)),X234),s(fun(X231,X232),X235),s(fun(X236,fun(X231,X233)),X237))),s(X236,X238))),s(X231,sK5(X239,'_dst_x0x1x1_3'(s(fun(X232,fun(X233,bool)),X234),s(fun(X231,X232),X235),s(fun(X231,X233),happ(s(fun(X236,fun(X231,X233)),X237),s(X236,X238)))),X231))))) | ~p(s(bool,happ(s(fun(X231,bool),X239),s(X231,X240)))) | p(s(bool,happ(s(fun(X231,bool),'_dst_x0x1x1_3'(s(fun(X232,fun(X233,bool)),X234),s(fun(X231,X232),X235),s(fun(X231,X233),happ(s(fun(X236,fun(X231,X233)),X237),s(X236,X238))))),s(X231,sK6(X239,'_dst_x0x1x1_3'(s(fun(X232,fun(X233,bool)),X234),s(fun(X231,X232),X235),s(fun(X231,X233),happ(s(fun(X236,fun(X231,X233)),X237),s(X236,X238)))),X231)))))) )),
  inference(superposition,[],[f301,f364])).
fof(f41804,plain,(
  ( ! [X292,X294,X290,X296,X298,X293,X295,X289,X291,X297] : (~p(s(bool,happ(s(fun(X289,bool),'_dst_x0x1x1_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X289,X291),X294),s(fun(X289,X292),happ(s(fun(X290,fun(X289,X292)),X295),s(X290,X296))))),s(X289,sK5(X297,happ(s(fun(X290,fun(X289,bool)),'_dst_x00x01x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X289,X291),X294),s(fun(X290,fun(X289,X292)),X295))),s(X290,X296)),X289))))) | ~p(s(bool,happ(s(fun(X289,bool),X297),s(X289,X298)))) | p(s(bool,happ(s(fun(X289,bool),happ(s(fun(X290,fun(X289,bool)),'_dst_x00x01x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X289,X291),X294),s(fun(X290,fun(X289,X292)),X295))),s(X290,X296))),s(X289,sK6(X297,happ(s(fun(X290,fun(X289,bool)),'_dst_x00x01x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X289,X291),X294),s(fun(X290,fun(X289,X292)),X295))),s(X290,X296)),X289)))))) )),
  inference(superposition,[],[f301,f364])).
fof(f43815,plain,(
  ( ! [X280,X271,X277,X279,X273,X275,X276,X278,X272,X274] : (p(s(bool,happ(s(fun(X271,bool),happ(s(fun(X275,fun(X271,bool)),'_dst_x00x11x11_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X275,fun(X271,X272)),X276),s(fun(X275,fun(X271,X273)),X278))),s(X275,X277))),s(X271,sK6(X279,'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X271,X272),happ(s(fun(X275,fun(X271,X272)),X276),s(X275,X277))),s(fun(X271,X273),happ(s(fun(X275,fun(X271,X273)),X278),s(X275,X277)))),X271))))) | ~p(s(bool,happ(s(fun(X271,bool),happ(s(fun(X275,fun(X271,bool)),'_dst_x00x11x11_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X275,fun(X271,X272)),X276),s(fun(X275,fun(X271,X273)),X278))),s(X275,X277))),s(X271,sK5(X279,'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X271,X272),happ(s(fun(X275,fun(X271,X272)),X276),s(X275,X277))),s(fun(X271,X273),happ(s(fun(X275,fun(X271,X273)),X278),s(X275,X277)))),X271))))) | ~p(s(bool,happ(s(fun(X271,bool),X279),s(X271,X280))))) )),
  inference(forward_demodulation,[],[f43739,f365])).
fof(f43739,plain,(
  ( ! [X280,X271,X277,X279,X273,X275,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun(X271,bool),happ(s(fun(X275,fun(X271,bool)),'_dst_x00x11x11_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X275,fun(X271,X272)),X276),s(fun(X275,fun(X271,X273)),X278))),s(X275,X277))),s(X271,sK5(X279,'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X271,X272),happ(s(fun(X275,fun(X271,X272)),X276),s(X275,X277))),s(fun(X271,X273),happ(s(fun(X275,fun(X271,X273)),X278),s(X275,X277)))),X271))))) | ~p(s(bool,happ(s(fun(X271,bool),X279),s(X271,X280)))) | p(s(bool,happ(s(fun(X271,bool),'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X271,X272),happ(s(fun(X275,fun(X271,X272)),X276),s(X275,X277))),s(fun(X271,X273),happ(s(fun(X275,fun(X271,X273)),X278),s(X275,X277))))),s(X271,sK6(X279,'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X271,X272),happ(s(fun(X275,fun(X271,X272)),X276),s(X275,X277))),s(fun(X271,X273),happ(s(fun(X275,fun(X271,X273)),X278),s(X275,X277)))),X271)))))) )),
  inference(superposition,[],[f301,f365])).
fof(f47321,plain,(
  ( ! [X1234,X1240,X1238,X1236,X1235,X1233,X1239,X1237] : (p(s(bool,happ(s(fun(X1233,bool),happ(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s('type.ind_type.recspace'(X1234),'const.ind_type.CONSTR_3'(s('type.num.num',X1236),s(X1234,X1238),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))))),s(X1233,sK6(X1239,happ(s(fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)),happ(s(fun(X1234,fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))),'_dst_x1x0_2'(s(fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)))),happ(s(fun('type.num.num',fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))))),X1235),s('type.num.num',X1236))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))),s(X1234,X1238))),s(fun('type.num.num',fun(X1233,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237)))),X1233))))) | ~p(s(bool,happ(s(fun(X1233,bool),happ(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s('type.ind_type.recspace'(X1234),'const.ind_type.CONSTR_3'(s('type.num.num',X1236),s(X1234,X1238),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))))),s(X1233,sK5(X1239,happ(s(fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)),happ(s(fun(X1234,fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))),'_dst_x1x0_2'(s(fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)))),happ(s(fun('type.num.num',fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))))),X1235),s('type.num.num',X1236))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))),s(X1234,X1238))),s(fun('type.num.num',fun(X1233,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237)))),X1233))))) | ~p(s(bool,happ(s(fun(X1233,bool),X1239),s(X1233,X1240))))) )),
  inference(forward_demodulation,[],[f47025,f378])).
fof(f47025,plain,(
  ( ! [X1234,X1240,X1238,X1236,X1235,X1233,X1239,X1237] : (~p(s(bool,happ(s(fun(X1233,bool),happ(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s('type.ind_type.recspace'(X1234),'const.ind_type.CONSTR_3'(s('type.num.num',X1236),s(X1234,X1238),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))))),s(X1233,sK5(X1239,happ(s(fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)),happ(s(fun(X1234,fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))),'_dst_x1x0_2'(s(fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)))),happ(s(fun('type.num.num',fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))))),X1235),s('type.num.num',X1236))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))),s(X1234,X1238))),s(fun('type.num.num',fun(X1233,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237)))),X1233))))) | ~p(s(bool,happ(s(fun(X1233,bool),X1239),s(X1233,X1240)))) | p(s(bool,happ(s(fun(X1233,bool),happ(s(fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)),happ(s(fun(X1234,fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))),'_dst_x1x0_2'(s(fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)))),happ(s(fun('type.num.num',fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))))),X1235),s('type.num.num',X1236))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))),s(X1234,X1238))),s(fun('type.num.num',fun(X1233,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))))),s(X1233,sK6(X1239,happ(s(fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)),happ(s(fun(X1234,fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))),'_dst_x1x0_2'(s(fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool)))),happ(s(fun('type.num.num',fun(X1234,fun(fun('type.num.num','type.ind_type.recspace'(X1234)),fun(fun('type.num.num',fun(X1233,bool)),fun(X1233,bool))))),X1235),s('type.num.num',X1236))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237))),s(X1234,X1238))),s(fun('type.num.num',fun(X1233,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1234),fun(X1233,bool)),sK10(X1235,X1234,fun(X1233,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1234)),X1237)))),X1233)))))) )),
  inference(superposition,[],[f301,f378])).
fof(f53956,plain,(
  ( ! [X668,X670,X667,X669,X671] : (p(s(bool,happ(s(fun(X667,bool),happ(s(fun(sK0,fun(X667,bool)),X668),s(sK0,sK3))),s(X667,sK6(X670,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X667,bool)),X668),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669)),X667))))) | ~p(s(bool,happ(s(fun(X667,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X667,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X667,sK5(X670,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X667,bool)),X668),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669)),X667))))) | ~p(s(bool,happ(s(fun(X667,bool),X670),s(X667,X671))))) )),
  inference(forward_demodulation,[],[f53236,f335])).
fof(f53236,plain,(
  ( ! [X668,X670,X667,X669,X671] : (~p(s(bool,happ(s(fun(X667,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X667,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X667,sK5(X670,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X667,bool)),X668),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669)),X667))))) | ~p(s(bool,happ(s(fun(X667,bool),X670),s(X667,X671)))) | p(s(bool,happ(s(fun(X667,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X667,bool)),X668),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669))),s(X667,sK6(X670,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X667,bool)),X668),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X667,bool))),X669)),X667)))))) )),
  inference(superposition,[],[f301,f34843])).
fof(f54111,plain,(
  ( ! [X790,X788,X787,X791,X789] : (~p(s(bool,happ(s(fun(X787,bool),happ(s(fun(sK0,fun(X787,bool)),X789),s(sK0,sK3))),s(X787,sK5(X790,happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X787))))) | ~p(s(bool,happ(s(fun(X787,bool),X790),s(X787,X791)))) | p(s(bool,happ(s(fun(X787,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X787,sK6(X790,happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X787)))))) )),
  inference(forward_demodulation,[],[f53485,f335])).
fof(f53485,plain,(
  ( ! [X790,X788,X787,X791,X789] : (~p(s(bool,happ(s(fun(X787,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X787,bool)),X789),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788))),s(X787,sK5(X790,happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X787))))) | ~p(s(bool,happ(s(fun(X787,bool),X790),s(X787,X791)))) | p(s(bool,happ(s(fun(X787,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X787,sK6(X790,happ(s(fun('type.benchmark.times'(sK0),fun(X787,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X787,bool))),X788),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X787)))))) )),
  inference(superposition,[],[f301,f34843])).
fof(f337,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f244])).
fof(f244,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f58])).
fof(f58,axiom,(
  ! [X46,X47,X48] : (p(s(bool,happ(s(fun(X46,bool),happ(s(fun(X46,fun(X46,bool)),'=_0'),s(X46,X47))),s(X46,X48)))) <=> s(X46,X47) = s(X46,X48))),
  file('thm.benchmark.times_distinct',arity_0_HL_EQ)).
fof(f338,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) != s(X0,X2)) )),
  inference(cnf_transformation,[],[f244])).
fof(f4516,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,happ(s(fun(X87,bool),happ(s(fun(X87,fun(X87,bool)),'=_0'),s(X87,X88))),s(X87,X90)))) | s(X87,X90) = s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) )),
  inference(superposition,[],[f337,f562])).
fof(f4548,plain,(
  ( ! [X90,X88,X87,X89] : (~p(s(bool,happ(s(fun(X87,bool),happ(s(fun(X87,fun(X87,bool)),'=_0'),s(X87,X90))),s(X87,X88)))) | s(X87,X90) = s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) )),
  inference(superposition,[],[f337,f562])).
fof(f4744,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,happ(s(fun(X87,bool),happ(s(fun(X87,fun(X87,bool)),'=_0'),s(X87,X88))),s(X87,X90)))) | s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) )),
  inference(superposition,[],[f338,f562])).
fof(f4776,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,happ(s(fun(X87,bool),happ(s(fun(X87,fun(X87,bool)),'=_0'),s(X87,X90))),s(X87,X88)))) | s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) )),
  inference(superposition,[],[f338,f562])).
fof(f53855,plain,(
  ( ! [X87,X85,X86,X84] : (s(X84,X87) != s(X84,happ(s(fun(sK0,X84),X85),s(sK0,sK3))) | p(s(bool,happ(s(fun(X84,bool),happ(s(fun(X84,fun(X84,bool)),'=_0'),s(X84,happ(s(fun('type.benchmark.times'(sK0),X84),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X84)),X86),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X84,X87))))) )),
  inference(forward_demodulation,[],[f53101,f335])).
fof(f53101,plain,(
  ( ! [X87,X85,X86,X84] : (p(s(bool,happ(s(fun(X84,bool),happ(s(fun(X84,fun(X84,bool)),'=_0'),s(X84,happ(s(fun('type.benchmark.times'(sK0),X84),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X84)),X86),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X84,X87)))) | s(X84,X87) != s(X84,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X84),X85),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X84)),X86)))) )),
  inference(superposition,[],[f338,f34843])).
fof(f53852,plain,(
  ( ! [X78,X76,X79,X77] : (s(X76,X79) = s(X76,happ(s(fun(sK0,X76),X77),s(sK0,sK3))) | ~p(s(bool,happ(s(fun(X76,bool),happ(s(fun(X76,fun(X76,bool)),'=_0'),s(X76,happ(s(fun('type.benchmark.times'(sK0),X76),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X76)),X78),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X76,X79))))) )),
  inference(forward_demodulation,[],[f53099,f335])).
fof(f53099,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,happ(s(fun(X76,bool),happ(s(fun(X76,fun(X76,bool)),'=_0'),s(X76,happ(s(fun('type.benchmark.times'(sK0),X76),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X76)),X78),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X76,X79)))) | s(X76,X79) = s(X76,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X76),X77),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X76)),X78)))) )),
  inference(superposition,[],[f337,f34843])).
fof(f53989,plain,(
  ( ! [X127,X130,X128,X129] : (p(s(bool,happ(s(fun(X127,bool),happ(s(fun(X127,fun(X127,bool)),'=_0'),s(X127,happ(s(fun(sK0,X127),X129),s(sK0,sK3))))),s(X127,X130)))) | s(X127,X130) != s(X127,happ(s(fun('type.benchmark.times'(sK0),X127),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X127)),X128),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53336,f335])).
fof(f53336,plain,(
  ( ! [X127,X130,X128,X129] : (p(s(bool,happ(s(fun(X127,bool),happ(s(fun(X127,fun(X127,bool)),'=_0'),s(X127,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X127),X129),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X127)),X128))))),s(X127,X130)))) | s(X127,X130) != s(X127,happ(s(fun('type.benchmark.times'(sK0),X127),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X127)),X128),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f338,f34843])).
fof(f53986,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,happ(s(fun(X119,bool),happ(s(fun(X119,fun(X119,bool)),'=_0'),s(X119,happ(s(fun(sK0,X119),X121),s(sK0,sK3))))),s(X119,X122)))) | s(X119,X122) = s(X119,happ(s(fun('type.benchmark.times'(sK0),X119),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X119)),X120),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53334,f335])).
fof(f53334,plain,(
  ( ! [X121,X122,X120,X119] : (~p(s(bool,happ(s(fun(X119,bool),happ(s(fun(X119,fun(X119,bool)),'=_0'),s(X119,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X119),X121),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X119)),X120))))),s(X119,X122)))) | s(X119,X122) = s(X119,happ(s(fun('type.benchmark.times'(sK0),X119),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X119)),X120),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f337,f34843])).
fof(f54112,plain,(
  ( ! [X795,X793,X794,X792] : (~p(s(bool,happ(s(fun(fun(X792,bool),bool),'!_1'),s(fun(X792,bool),happ(s(fun(sK0,fun(X792,bool)),X794),s(sK0,sK3)))))) | p(s(bool,happ(s(fun(X792,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X792,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X792,bool))),X793),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X792,X795))))) )),
  inference(forward_demodulation,[],[f53486,f335])).
fof(f53486,plain,(
  ( ! [X795,X793,X794,X792] : (~p(s(bool,happ(s(fun(fun(X792,bool),bool),'!_1'),s(fun(X792,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X792,bool)),X794),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X792,bool))),X793)))))) | p(s(bool,happ(s(fun(X792,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X792,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X792,bool))),X793),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X792,X795))))) )),
  inference(superposition,[],[f316,f34843])).
fof(f53961,plain,(
  ( ! [X693,X691,X692,X690] : (p(s(bool,'|dollar|exists_1'(s(fun(X690,bool),happ(s(fun(sK0,fun(X690,bool)),X691),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun(X690,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X690,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X690,bool))),X692),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X690,X693))))) )),
  inference(forward_demodulation,[],[f53242,f335])).
fof(f53242,plain,(
  ( ! [X693,X691,X692,X690] : (~p(s(bool,happ(s(fun(X690,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X690,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X690,bool))),X692),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X690,X693)))) | p(s(bool,'|dollar|exists_1'(s(fun(X690,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X690,bool)),X691),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X690,bool))),X692))))))) )),
  inference(superposition,[],[f3449,f34843])).
fof(f53960,plain,(
  ( ! [X685,X683,X684,X682] : (p(s(bool,happ(s(fun(fun(X682,bool),bool),'?_1'),s(fun(X682,bool),happ(s(fun(sK0,fun(X682,bool)),X683),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun(X682,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X682,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X682,bool))),X684),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X682,X685))))) )),
  inference(forward_demodulation,[],[f53240,f335])).
fof(f53240,plain,(
  ( ! [X685,X683,X684,X682] : (~p(s(bool,happ(s(fun(X682,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X682,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X682,bool))),X684),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X682,X685)))) | p(s(bool,happ(s(fun(fun(X682,bool),bool),'?_1'),s(fun(X682,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X682,bool)),X683),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X682,bool))),X684))))))) )),
  inference(superposition,[],[f319,f34843])).
fof(f53955,plain,(
  ( ! [X666,X662,X664,X663,X665] : (p(s(bool,happ(s(fun(X662,bool),happ(s(fun(sK0,fun(X662,bool)),X663),s(sK0,sK3))),s(X662,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X662,bool)),X663),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664)),X666,X662))))) | ~p(s(bool,happ(s(fun(X662,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X662,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X662,X665)))) | p(s(bool,happ(s(fun(X662,bool),X666),s(X662,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X662,bool)),X663),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664)),X666,X662)))))) )),
  inference(forward_demodulation,[],[f53235,f335])).
fof(f53235,plain,(
  ( ! [X666,X662,X664,X663,X665] : (~p(s(bool,happ(s(fun(X662,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X662,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X662,X665)))) | p(s(bool,happ(s(fun(X662,bool),X666),s(X662,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X662,bool)),X663),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664)),X666,X662))))) | p(s(bool,happ(s(fun(X662,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X662,bool)),X663),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664))),s(X662,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X662,bool)),X663),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X662,bool))),X664)),X666,X662)))))) )),
  inference(superposition,[],[f300,f34843])).
fof(f54117,plain,(
  ( ! [X810,X812,X811,X813] : (~p(s(bool,happ(s(fun(X810,bool),happ(s(fun(sK0,fun(X810,bool)),X812),s(sK0,sK3))),s(X810,X813)))) | p(s(bool,'|dollar|exists_1'(s(fun(X810,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X810,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X810,bool))),X811),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53491,f335])).
fof(f53491,plain,(
  ( ! [X810,X812,X811,X813] : (~p(s(bool,happ(s(fun(X810,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X810,bool)),X812),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X810,bool))),X811))),s(X810,X813)))) | p(s(bool,'|dollar|exists_1'(s(fun(X810,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X810,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X810,bool))),X811),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f3449,f34843])).
fof(f54115,plain,(
  ( ! [X802,X804,X803,X805] : (~p(s(bool,happ(s(fun(X802,bool),happ(s(fun(sK0,fun(X802,bool)),X804),s(sK0,sK3))),s(X802,X805)))) | p(s(bool,happ(s(fun(fun(X802,bool),bool),'?_1'),s(fun(X802,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X802,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X802,bool))),X803),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53489,f335])).
fof(f53489,plain,(
  ( ! [X802,X804,X803,X805] : (~p(s(bool,happ(s(fun(X802,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X802,bool)),X804),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X802,bool))),X803))),s(X802,X805)))) | p(s(bool,happ(s(fun(fun(X802,bool),bool),'?_1'),s(fun(X802,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X802,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X802,bool))),X803),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f319,f34843])).
fof(f54110,plain,(
  ( ! [X786,X784,X783,X785,X782] : (~p(s(bool,happ(s(fun(X782,bool),happ(s(fun(sK0,fun(X782,bool)),X784),s(sK0,sK3))),s(X782,X785)))) | p(s(bool,happ(s(fun(X782,bool),X786),s(X782,sK6(happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X786,X782))))) | p(s(bool,happ(s(fun(X782,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X782,sK5(happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X786,X782)))))) )),
  inference(forward_demodulation,[],[f53484,f335])).
fof(f53484,plain,(
  ( ! [X786,X784,X783,X785,X782] : (~p(s(bool,happ(s(fun(X782,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X782,bool)),X784),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783))),s(X782,X785)))) | p(s(bool,happ(s(fun(X782,bool),X786),s(X782,sK6(happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X786,X782))))) | p(s(bool,happ(s(fun(X782,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X782,sK5(happ(s(fun('type.benchmark.times'(sK0),fun(X782,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X782,bool))),X783),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X786,X782)))))) )),
  inference(superposition,[],[f300,f34843])).
fof(f53957,plain,(
  ( ! [X673,X675,X672,X674] : (p(s(bool,happ(s(fun(X672,bool),happ(s(fun(sK0,fun(X672,bool)),X673),s(sK0,sK3))),s(X672,X675)))) | ~p(s(bool,happ(s(fun(fun(X672,bool),bool),'!_1'),s(fun(X672,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X672,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X672,bool))),X674),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53237,f335])).
fof(f53237,plain,(
  ( ! [X673,X675,X672,X674] : (~p(s(bool,happ(s(fun(fun(X672,bool),bool),'!_1'),s(fun(X672,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X672,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X672,bool))),X674),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | p(s(bool,happ(s(fun(X672,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X672,bool)),X673),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X672,bool))),X674))),s(X672,X675))))) )),
  inference(superposition,[],[f316,f34843])).
fof(f31926,plain,(
  ( ! [X222,X220,X221] : (~p(s(bool,happ(s(fun(X220,bool),'_dst_x1x0_2'(s(fun(X220,fun(X220,bool)),'=_0'),s(X220,X222))),s(X220,X221)))) | s(X220,X221) = s(X220,X222)) )),
  inference(superposition,[],[f337,f341])).
fof(f31925,plain,(
  ( ! [X218,X219,X217] : (p(s(bool,happ(s(fun(X217,bool),'_dst_x1x0_2'(s(fun(X217,fun(X217,bool)),'=_0'),s(X217,X219))),s(X217,X218)))) | s(X217,X218) != s(X217,X219)) )),
  inference(superposition,[],[f338,f341])).
fof(f33469,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x0x1_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f33468,f359])).
fof(f33468,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(X0,X2))))))) )),
  inference(forward_demodulation,[],[f33467,f340])).
fof(f33467,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f33313,f31738])).
fof(f33313,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(unit_resulting_resolution,[],[f305,f338])).
fof(f16088,plain,(
  ( ! [X97,X95,X96] : (~p(s(bool,happ(s(fun(X95,bool),sK4(X97,'_dstsel_0_x0_1'(s(X95,X96)),fun(X95,bool))),s(X95,X96)))) | p(s(bool,'|dollar|exists_1'(s(fun(fun(X95,bool),bool),'_dstsel_0_x0_1'(s(X95,X96))))))) )),
  inference(superposition,[],[f299,f333])).
fof(f28789,plain,(
  ( ! [X103,X101,X102,X100] : (p(s(bool,happ(s(fun(X100,bool),sK6(X102,'_dstsel_0_x0_1'(s(X100,X101)),fun(X100,bool))),s(X100,X101)))) | ~p(s(bool,happ(s(fun(X100,bool),sK5(X102,'_dstsel_0_x0_1'(s(X100,X101)),fun(X100,bool))),s(X100,X101)))) | ~p(s(bool,happ(s(fun(fun(X100,bool),bool),X102),s(fun(X100,bool),X103))))) )),
  inference(forward_demodulation,[],[f28749,f333])).
fof(f28749,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,happ(s(fun(X100,bool),sK5(X102,'_dstsel_0_x0_1'(s(X100,X101)),fun(X100,bool))),s(X100,X101)))) | ~p(s(bool,happ(s(fun(fun(X100,bool),bool),X102),s(fun(X100,bool),X103)))) | p(s(bool,happ(s(fun(fun(X100,bool),bool),'_dstsel_0_x0_1'(s(X100,X101))),s(fun(X100,bool),sK6(X102,'_dstsel_0_x0_1'(s(X100,X101)),fun(X100,bool))))))) )),
  inference(superposition,[],[f301,f333])).
fof(f18810,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,sK5('const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X49,X44))))) | ~p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,X48)))) | p(s(bool,happ(s(fun(X44,bool),X49),s(X44,sK6('const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X49,X44)))))) )),
  inference(forward_demodulation,[],[f18712,f304])).
fof(f18712,plain,(
  ( ! [X47,X45,X48,X46,X44,X49] : (~p(s(bool,happ(s(fun(X44,bool),happ(s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num',X47))),s(X44,X48)))) | p(s(bool,happ(s(fun(X44,bool),X49),s(X44,sK6('const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X49,X44))))) | p(s(bool,happ(s(fun(X44,bool),'const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47))))),s(X44,sK5('const.ind_type.FCONS_3'(s(fun(X44,bool),X45),s(fun('type.num.num',fun(X44,bool)),X46),s('type.num.num','const.num.SUC_1'(s('type.num.num',X47)))),X49,X44)))))) )),
  inference(superposition,[],[f300,f304])).
fof(f31771,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,happ(s(fun(X237,bool),happ(s(fun(X236,fun(X237,bool)),X238),s(X236,sK8('_dst_x1x0_2'(s(fun(X236,fun(X237,bool)),X238),s(X237,X239)),X236)))),s(X237,X239)))) | p(s(bool,happ(s(fun(fun(X236,bool),bool),'!_1'),s(fun(X236,bool),'_dst_x1x0_2'(s(fun(X236,fun(X237,bool)),X238),s(X237,X239))))))) )),
  inference(superposition,[],[f317,f341])).
fof(f17816,plain,(
  ( ! [X187,X185,X186,X184] : (~p(s(bool,happ(s(fun(X185,bool),'_dst_x0x1_2'(s(fun(fun(X184,bool),bool),'?_1'),s(fun(X185,fun(X184,bool)),X186))),s(X185,X187)))) | p(s(bool,happ(s(fun(X184,bool),happ(s(fun(X185,fun(X184,bool)),X186),s(X185,X187))),s(X184,sK9(happ(s(fun(X185,fun(X184,bool)),X186),s(X185,X187)),X184)))))) )),
  inference(superposition,[],[f318,f340])).
fof(f17815,plain,(
  ( ! [X182,X180,X183,X181,X179] : (~p(s(bool,happ(s(fun(X180,bool),'_dst_x0x1_2'(s(fun(fun(X179,bool),bool),'!_1'),s(fun(X180,fun(X179,bool)),X181))),s(X180,X182)))) | p(s(bool,happ(s(fun(X179,bool),happ(s(fun(X180,fun(X179,bool)),X181),s(X180,X182))),s(X179,X183))))) )),
  inference(superposition,[],[f316,f340])).
fof(f31932,plain,(
  ( ! [X253,X251,X252,X250] : (~p(s(bool,happ(s(fun(X251,bool),'_dst_x1x0_2'(s(fun(X251,fun(X250,bool)),X252),s(X250,sK8(happ(s(fun(X251,fun(X250,bool)),X252),s(X251,X253)),X250)))),s(X251,X253)))) | p(s(bool,happ(s(fun(fun(X250,bool),bool),'!_1'),s(fun(X250,bool),happ(s(fun(X251,fun(X250,bool)),X252),s(X251,X253))))))) )),
  inference(superposition,[],[f317,f341])).
fof(f36269,plain,(
  ( ! [X335,X337,X336,X338] : (~p(s(bool,happ(s(fun(X336,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X335),s(fun(X336,bool),X337))),s(X336,X338)))) | p(s(bool,X335))) )),
  inference(superposition,[],[f320,f359])).
fof(f36270,plain,(
  ( ! [X341,X339,X340,X342] : (p(s(bool,happ(s(fun(X340,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X339),s(fun(X340,bool),X341))),s(X340,X342)))) | p(s(bool,X339))) )),
  inference(superposition,[],[f327,f359])).
fof(f3784,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,happ(s(fun(fun(X12,bool),bool),'!_1'),s(fun(X12,bool),X13)))) | p(s(bool,happ(s(fun(X12,bool),sK4(X13,X14,fun(X12,bool))),s(X12,X15)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f316,f562])).
fof(f18807,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,sK5(happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X31,X26))))) | ~p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,X30)))) | p(s(bool,happ(s(fun(X26,bool),X31),s(X26,sK6(happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X31,X26)))))) )),
  inference(forward_demodulation,[],[f18709,f333])).
fof(f18709,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (~p(s(bool,happ(s(fun(X26,bool),happ(s(fun(X27,fun(X26,bool)),X29),s(X27,X28))),s(X26,X30)))) | p(s(bool,happ(s(fun(X26,bool),X31),s(X26,sK6(happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X31,X26))))) | p(s(bool,happ(s(fun(X26,bool),happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29))),s(X26,sK5(happ(s(fun(fun(X27,fun(X26,bool)),fun(X26,bool)),'_dstsel_0_x0_1'(s(X27,X28))),s(fun(X27,fun(X26,bool)),X29)),X31,X26)))))) )),
  inference(superposition,[],[f300,f333])).
fof(f18808,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X38,X32))))) | ~p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,X37)))) | p(s(bool,happ(s(fun(X32,bool),X38),s(X32,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X38,X32)))))) )),
  inference(forward_demodulation,[],[f18710,f335])).
fof(f18710,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (~p(s(bool,happ(s(fun(X32,bool),happ(s(fun(X33,fun(X32,bool)),X35),s(X33,X34))),s(X32,X37)))) | p(s(bool,happ(s(fun(X32,bool),X38),s(X32,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X38,X32))))) | p(s(bool,happ(s(fun(X32,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36))),s(X32,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X34))),s(fun(X33,fun(X32,bool)),X35),s(fun('type.benchmark.times'(X33),fun('type.benchmark.times'(X33),fun(X32,bool))),X36)),X38,X32)))))) )),
  inference(superposition,[],[f300,f335])).
fof(f31766,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (~p(s(bool,happ(s(fun(X210,bool),happ(s(fun(X209,fun(X210,bool)),X211),s(X209,X213))),s(X210,X212)))) | p(s(bool,happ(s(fun(X209,bool),X214),s(X209,sK6('_dst_x1x0_2'(s(fun(X209,fun(X210,bool)),X211),s(X210,X212)),X214,X209))))) | p(s(bool,happ(s(fun(X209,bool),'_dst_x1x0_2'(s(fun(X209,fun(X210,bool)),X211),s(X210,X212))),s(X209,sK5('_dst_x1x0_2'(s(fun(X209,fun(X210,bool)),X211),s(X210,X212)),X214,X209)))))) )),
  inference(superposition,[],[f300,f341])).
fof(f31767,plain,(
  ( ! [X218,X216,X215,X219,X217] : (~p(s(bool,happ(s(fun(X216,bool),happ(s(fun(X215,fun(X216,bool)),X217),s(X215,X219))),s(X216,X218)))) | p(s(bool,happ(s(fun(fun(X215,bool),bool),'?_1'),s(fun(X215,bool),'_dst_x1x0_2'(s(fun(X215,fun(X216,bool)),X217),s(X216,X218))))))) )),
  inference(superposition,[],[f319,f341])).
fof(f31768,plain,(
  ( ! [X222,X220,X223,X221,X224] : (~p(s(bool,happ(s(fun(X221,bool),happ(s(fun(X220,fun(X221,bool)),X222),s(X220,X224))),s(X221,X223)))) | p(s(bool,'|dollar|exists_1'(s(fun(X220,bool),'_dst_x1x0_2'(s(fun(X220,fun(X221,bool)),X222),s(X221,X223))))))) )),
  inference(superposition,[],[f3449,f341])).
fof(f31773,plain,(
  ( ! [X249,X246,X248,X247,X245] : (p(s(bool,happ(s(fun(X246,bool),happ(s(fun(X245,fun(X246,bool)),X247),s(X245,X249))),s(X246,X248)))) | s(bool,'T_0') != s(bool,happ(s(fun(X245,bool),'_dst_x1x0_2'(s(fun(X245,fun(X246,bool)),X247),s(X246,X248))),s(X245,X249)))) )),
  inference(superposition,[],[f251,f341])).
fof(f31774,plain,(
  ( ! [X253,X251,X254,X252,X250] : (~p(s(bool,happ(s(fun(X251,bool),happ(s(fun(X250,fun(X251,bool)),X252),s(X250,X254))),s(X251,X253)))) | s(bool,'T_0') = s(bool,happ(s(fun(X250,bool),'_dst_x1x0_2'(s(fun(X250,fun(X251,bool)),X252),s(X251,X253))),s(X250,X254)))) )),
  inference(superposition,[],[f252,f341])).
fof(f31777,plain,(
  ( ! [X269,X265,X267,X268,X270,X266] : (p(s(bool,happ(s(fun(X266,bool),happ(s(fun(X265,fun(X266,bool)),X267),s(X265,X269))),s(X266,X268)))) | p(s(bool,X270)) | s(bool,X270) = s(bool,happ(s(fun(X265,bool),'_dst_x1x0_2'(s(fun(X265,fun(X266,bool)),X267),s(X266,X268))),s(X265,X269)))) )),
  inference(superposition,[],[f312,f341])).
fof(f31779,plain,(
  ( ! [X280,X282,X277,X279,X281,X278] : (~p(s(bool,happ(s(fun(X278,bool),happ(s(fun(X277,fun(X278,bool)),X279),s(X277,X281))),s(X278,X280)))) | ~p(s(bool,X282)) | s(bool,X282) = s(bool,happ(s(fun(X277,bool),'_dst_x1x0_2'(s(fun(X277,fun(X278,bool)),X279),s(X278,X280))),s(X277,X281)))) )),
  inference(superposition,[],[f315,f341])).
fof(f31780,plain,(
  ( ! [X288,X285,X287,X283,X284,X286] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X284,bool),happ(s(fun(X283,fun(X284,bool)),X285),s(X283,X287))),s(X284,X286))))),s(bool,X288)))) | p(s(bool,happ(s(fun(X283,bool),'_dst_x1x0_2'(s(fun(X283,fun(X284,bool)),X285),s(X284,X286))),s(X283,X287))))) )),
  inference(superposition,[],[f320,f341])).
fof(f31783,plain,(
  ( ! [X302,X304,X306,X301,X303,X305] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X306))),s(bool,happ(s(fun(X302,bool),happ(s(fun(X301,fun(X302,bool)),X303),s(X301,X305))),s(X302,X304)))))) | p(s(bool,happ(s(fun(X301,bool),'_dst_x1x0_2'(s(fun(X301,fun(X302,bool)),X303),s(X302,X304))),s(X301,X305))))) )),
  inference(superposition,[],[f321,f341])).
fof(f31784,plain,(
  ( ! [X308,X310,X312,X309,X311,X307] : (~p(s(bool,happ(s(fun(X308,bool),happ(s(fun(X307,fun(X308,bool)),X309),s(X307,X311))),s(X308,X310)))) | ~p(s(bool,X312)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X307,bool),'_dst_x1x0_2'(s(fun(X307,fun(X308,bool)),X309),s(X308,X310))),s(X307,X311))))),s(bool,X312))))) )),
  inference(superposition,[],[f322,f341])).
fof(f31785,plain,(
  ( ! [X313,X315,X316,X318,X314,X317] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X314,bool),happ(s(fun(X313,fun(X314,bool)),X315),s(X313,X317))),s(X314,X316))))),s(bool,X318)))) | p(s(bool,happ(s(fun(X313,bool),'_dst_x1x0_2'(s(fun(X313,fun(X314,bool)),X315),s(X314,X316))),s(X313,X317)))) | p(s(bool,X318))) )),
  inference(superposition,[],[f323,f341])).
fof(f31786,plain,(
  ( ! [X321,X323,X324,X320,X322,X319] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X324))),s(bool,happ(s(fun(X320,bool),happ(s(fun(X319,fun(X320,bool)),X321),s(X319,X323))),s(X320,X322)))))) | p(s(bool,X324)) | p(s(bool,happ(s(fun(X319,bool),'_dst_x1x0_2'(s(fun(X319,fun(X320,bool)),X321),s(X320,X322))),s(X319,X323))))) )),
  inference(superposition,[],[f323,f341])).
fof(f31787,plain,(
  ( ! [X325,X327,X329,X326,X328,X330] : (~p(s(bool,happ(s(fun(X326,bool),happ(s(fun(X325,fun(X326,bool)),X327),s(X325,X329))),s(X326,X328)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X325,bool),'_dst_x1x0_2'(s(fun(X325,fun(X326,bool)),X327),s(X326,X328))),s(X325,X329))))),s(bool,X330))))) )),
  inference(superposition,[],[f324,f341])).
fof(f31788,plain,(
  ( ! [X333,X335,X331,X332,X334,X336] : (~p(s(bool,happ(s(fun(X332,bool),happ(s(fun(X331,fun(X332,bool)),X333),s(X331,X335))),s(X332,X334)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X336))),s(bool,happ(s(fun(X331,bool),'_dst_x1x0_2'(s(fun(X331,fun(X332,bool)),X333),s(X332,X334))),s(X331,X335))))))) )),
  inference(superposition,[],[f325,f341])).
fof(f31789,plain,(
  ( ! [X341,X337,X339,X340,X342,X338] : (~p(s(bool,happ(s(fun(X338,bool),happ(s(fun(X337,fun(X338,bool)),X339),s(X337,X341))),s(X338,X340)))) | p(s(bool,X342)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X337,bool),'_dst_x1x0_2'(s(fun(X337,fun(X338,bool)),X339),s(X338,X340))),s(X337,X341))))),s(bool,X342))))) )),
  inference(superposition,[],[f326,f341])).
fof(f31790,plain,(
  ( ! [X344,X346,X343,X345,X347,X348] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X344,bool),happ(s(fun(X343,fun(X344,bool)),X345),s(X343,X347))),s(X344,X346))))),s(bool,X348)))) | p(s(bool,happ(s(fun(X343,bool),'_dst_x1x0_2'(s(fun(X343,fun(X344,bool)),X345),s(X344,X346))),s(X343,X347))))) )),
  inference(superposition,[],[f327,f341])).
fof(f31792,plain,(
  ( ! [X356,X358,X360,X357,X359,X355] : (~p(s(bool,happ(s(fun(X356,bool),happ(s(fun(X355,fun(X356,bool)),X357),s(X355,X359))),s(X356,X358)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X360))),s(bool,happ(s(fun(X355,bool),'_dst_x1x0_2'(s(fun(X355,fun(X356,bool)),X357),s(X356,X358))),s(X355,X359))))))) )),
  inference(superposition,[],[f328,f341])).
fof(f31797,plain,(
  ( ! [X389,X385,X387,X388,X390,X386] : (~p(s(bool,happ(s(fun(X386,bool),happ(s(fun(X385,fun(X386,bool)),X387),s(X385,X389))),s(X386,X388)))) | s(bool,X390) != s(bool,happ(s(fun(X385,bool),'_dst_x1x0_2'(s(fun(X385,fun(X386,bool)),X387),s(X386,X388))),s(X385,X389))) | s(bool,'T_0') = s(bool,X390)) )),
  inference(superposition,[],[f399,f341])).
fof(f31799,plain,(
  ( ! [X397,X399,X401,X396,X398,X400] : (p(s(bool,happ(s(fun(X397,bool),happ(s(fun(X396,fun(X397,bool)),X398),s(X396,X400))),s(X397,X399)))) | s(bool,X401) = s(bool,happ(s(fun(X396,bool),'_dst_x1x0_2'(s(fun(X396,fun(X397,bool)),X398),s(X397,X399))),s(X396,X400))) | s(bool,'T_0') = s(bool,X401)) )),
  inference(superposition,[],[f454,f341])).
fof(f31802,plain,(
  ( ! [X420,X416,X418,X415,X417,X419] : (~p(s(bool,happ(s(fun(X416,bool),happ(s(fun(X415,fun(X416,bool)),X417),s(X415,X419))),s(X416,X418)))) | p(s(bool,'|dollar|exists_1'(s(fun(X420,bool),'_dst_x0_1'(s(bool,happ(s(fun(X415,bool),'_dst_x1x0_2'(s(fun(X415,fun(X416,bool)),X417),s(X416,X418))),s(X415,X419))))))))) )),
  inference(superposition,[],[f1169,f341])).
fof(f31934,plain,(
  ( ! [X261,X263,X259,X260,X262] : (p(s(bool,happ(s(fun(X260,bool),'_dst_x1x0_2'(s(fun(X260,fun(X259,bool)),X261),s(X259,X263))),s(X260,X262)))) | s(bool,'T_0') != s(bool,happ(s(fun(X259,bool),happ(s(fun(X260,fun(X259,bool)),X261),s(X260,X262))),s(X259,X263)))) )),
  inference(superposition,[],[f251,f341])).
fof(f31935,plain,(
  ( ! [X265,X267,X268,X264,X266] : (~p(s(bool,happ(s(fun(X265,bool),'_dst_x1x0_2'(s(fun(X265,fun(X264,bool)),X266),s(X264,X268))),s(X265,X267)))) | s(bool,'T_0') = s(bool,happ(s(fun(X264,bool),happ(s(fun(X265,fun(X264,bool)),X266),s(X265,X267))),s(X264,X268)))) )),
  inference(superposition,[],[f252,f341])).
fof(f31938,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (p(s(bool,happ(s(fun(X280,bool),'_dst_x1x0_2'(s(fun(X280,fun(X279,bool)),X281),s(X279,X283))),s(X280,X282)))) | p(s(bool,X284)) | s(bool,X284) = s(bool,happ(s(fun(X279,bool),happ(s(fun(X280,fun(X279,bool)),X281),s(X280,X282))),s(X279,X283)))) )),
  inference(superposition,[],[f312,f341])).
fof(f31940,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (~p(s(bool,happ(s(fun(X292,bool),'_dst_x1x0_2'(s(fun(X292,fun(X291,bool)),X293),s(X291,X295))),s(X292,X294)))) | ~p(s(bool,X296)) | s(bool,X296) = s(bool,happ(s(fun(X291,bool),happ(s(fun(X292,fun(X291,bool)),X293),s(X292,X294))),s(X291,X295)))) )),
  inference(superposition,[],[f315,f341])).
fof(f31941,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X298,bool),'_dst_x1x0_2'(s(fun(X298,fun(X297,bool)),X299),s(X297,X301))),s(X298,X300))))),s(bool,X302)))) | p(s(bool,happ(s(fun(X297,bool),happ(s(fun(X298,fun(X297,bool)),X299),s(X298,X300))),s(X297,X301))))) )),
  inference(superposition,[],[f320,f341])).
fof(f31944,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X320))),s(bool,happ(s(fun(X316,bool),'_dst_x1x0_2'(s(fun(X316,fun(X315,bool)),X317),s(X315,X319))),s(X316,X318)))))) | p(s(bool,happ(s(fun(X315,bool),happ(s(fun(X316,fun(X315,bool)),X317),s(X316,X318))),s(X315,X319))))) )),
  inference(superposition,[],[f321,f341])).
fof(f31945,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (~p(s(bool,happ(s(fun(X322,bool),'_dst_x1x0_2'(s(fun(X322,fun(X321,bool)),X323),s(X321,X325))),s(X322,X324)))) | ~p(s(bool,X326)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X321,bool),happ(s(fun(X322,fun(X321,bool)),X323),s(X322,X324))),s(X321,X325))))),s(bool,X326))))) )),
  inference(superposition,[],[f322,f341])).
fof(f31946,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X328,bool),'_dst_x1x0_2'(s(fun(X328,fun(X327,bool)),X329),s(X327,X331))),s(X328,X330))))),s(bool,X332)))) | p(s(bool,happ(s(fun(X327,bool),happ(s(fun(X328,fun(X327,bool)),X329),s(X328,X330))),s(X327,X331)))) | p(s(bool,X332))) )),
  inference(superposition,[],[f323,f341])).
fof(f31947,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X338))),s(bool,happ(s(fun(X334,bool),'_dst_x1x0_2'(s(fun(X334,fun(X333,bool)),X335),s(X333,X337))),s(X334,X336)))))) | p(s(bool,X338)) | p(s(bool,happ(s(fun(X333,bool),happ(s(fun(X334,fun(X333,bool)),X335),s(X334,X336))),s(X333,X337))))) )),
  inference(superposition,[],[f323,f341])).
fof(f31948,plain,(
  ( ! [X344,X341,X343,X339,X340,X342] : (~p(s(bool,happ(s(fun(X340,bool),'_dst_x1x0_2'(s(fun(X340,fun(X339,bool)),X341),s(X339,X343))),s(X340,X342)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X339,bool),happ(s(fun(X340,fun(X339,bool)),X341),s(X340,X342))),s(X339,X343))))),s(bool,X344))))) )),
  inference(superposition,[],[f324,f341])).
fof(f31949,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (~p(s(bool,happ(s(fun(X346,bool),'_dst_x1x0_2'(s(fun(X346,fun(X345,bool)),X347),s(X345,X349))),s(X346,X348)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X350))),s(bool,happ(s(fun(X345,bool),happ(s(fun(X346,fun(X345,bool)),X347),s(X346,X348))),s(X345,X349))))))) )),
  inference(superposition,[],[f325,f341])).
fof(f31950,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (~p(s(bool,happ(s(fun(X352,bool),'_dst_x1x0_2'(s(fun(X352,fun(X351,bool)),X353),s(X351,X355))),s(X352,X354)))) | p(s(bool,X356)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X351,bool),happ(s(fun(X352,fun(X351,bool)),X353),s(X352,X354))),s(X351,X355))))),s(bool,X356))))) )),
  inference(superposition,[],[f326,f341])).
fof(f31951,plain,(
  ( ! [X358,X360,X362,X357,X359,X361] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X358,bool),'_dst_x1x0_2'(s(fun(X358,fun(X357,bool)),X359),s(X357,X361))),s(X358,X360))))),s(bool,X362)))) | p(s(bool,happ(s(fun(X357,bool),happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360))),s(X357,X361))))) )),
  inference(superposition,[],[f327,f341])).
fof(f31953,plain,(
  ( ! [X372,X374,X370,X373,X369,X371] : (~p(s(bool,happ(s(fun(X370,bool),'_dst_x1x0_2'(s(fun(X370,fun(X369,bool)),X371),s(X369,X373))),s(X370,X372)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X374))),s(bool,happ(s(fun(X369,bool),happ(s(fun(X370,fun(X369,bool)),X371),s(X370,X372))),s(X369,X373))))))) )),
  inference(superposition,[],[f328,f341])).
fof(f31958,plain,(
  ( ! [X399,X401,X403,X404,X400,X402] : (~p(s(bool,happ(s(fun(X400,bool),'_dst_x1x0_2'(s(fun(X400,fun(X399,bool)),X401),s(X399,X403))),s(X400,X402)))) | s(bool,X404) != s(bool,happ(s(fun(X399,bool),happ(s(fun(X400,fun(X399,bool)),X401),s(X400,X402))),s(X399,X403))) | s(bool,'T_0') = s(bool,X404)) )),
  inference(superposition,[],[f399,f341])).
fof(f31960,plain,(
  ( ! [X412,X414,X410,X413,X415,X411] : (p(s(bool,happ(s(fun(X411,bool),'_dst_x1x0_2'(s(fun(X411,fun(X410,bool)),X412),s(X410,X414))),s(X411,X413)))) | s(bool,X415) = s(bool,happ(s(fun(X410,bool),happ(s(fun(X411,fun(X410,bool)),X412),s(X411,X413))),s(X410,X414))) | s(bool,'T_0') = s(bool,X415)) )),
  inference(superposition,[],[f454,f341])).
fof(f31963,plain,(
  ( ! [X430,X432,X434,X429,X431,X433] : (~p(s(bool,happ(s(fun(X430,bool),'_dst_x1x0_2'(s(fun(X430,fun(X429,bool)),X431),s(X429,X433))),s(X430,X432)))) | p(s(bool,'|dollar|exists_1'(s(fun(X434,bool),'_dst_x0_1'(s(bool,happ(s(fun(X429,bool),happ(s(fun(X430,fun(X429,bool)),X431),s(X430,X432))),s(X429,X433))))))))) )),
  inference(superposition,[],[f1169,f341])).
fof(f32427,plain,(
  ( ! [X146,X144,X142,X145,X143,X141] : (~p(s(bool,happ(s(fun(X142,bool),'_dst_x1x0_2'(s(fun(X142,fun(X141,bool)),X143),s(X141,X145))),s(X142,X144)))) | p(s(bool,happ(s(fun(fun(X146,bool),bool),'?_1'),s(fun(X146,bool),'_dst_x0_1'(s(bool,happ(s(fun(X141,bool),happ(s(fun(X142,fun(X141,bool)),X143),s(X142,X144))),s(X141,X145))))))))) )),
  inference(superposition,[],[f4018,f341])).
fof(f32430,plain,(
  ( ! [X158,X161,X159,X157,X162,X160] : (~p(s(bool,happ(s(fun(X158,bool),happ(s(fun(X157,fun(X158,bool)),X159),s(X157,X161))),s(X158,X160)))) | p(s(bool,happ(s(fun(fun(X162,bool),bool),'?_1'),s(fun(X162,bool),'_dst_x0_1'(s(bool,happ(s(fun(X157,bool),'_dst_x1x0_2'(s(fun(X157,fun(X158,bool)),X159),s(X158,X160))),s(X157,X161))))))))) )),
  inference(superposition,[],[f4018,f341])).
fof(f43283,plain,(
  ( ! [X165,X163,X161,X164,X162,X160] : (~p(s(bool,happ(s(fun(X161,bool),'_dst_x1x0_2'(s(fun(X161,fun(X160,bool)),X162),s(X160,X164))),s(X161,X163)))) | p(s(bool,happ(s(fun(fun(X165,bool),bool),'!_1'),s(fun(X165,bool),'_dst_x0_1'(s(bool,happ(s(fun(X160,bool),happ(s(fun(X161,fun(X160,bool)),X162),s(X161,X163))),s(X160,X164))))))))) )),
  inference(superposition,[],[f5307,f341])).
fof(f43288,plain,(
  ( ! [X196,X194,X192,X197,X195,X193] : (~p(s(bool,happ(s(fun(X193,bool),happ(s(fun(X192,fun(X193,bool)),X194),s(X192,X196))),s(X193,X195)))) | p(s(bool,happ(s(fun(fun(X197,bool),bool),'!_1'),s(fun(X197,bool),'_dst_x0_1'(s(bool,happ(s(fun(X192,bool),'_dst_x1x0_2'(s(fun(X192,fun(X193,bool)),X194),s(X193,X195))),s(X192,X196))))))))) )),
  inference(superposition,[],[f5307,f341])).
fof(f17817,plain,(
  ( ! [X191,X189,X192,X190,X188] : (~p(s(bool,happ(s(fun(X190,bool),'_dst_x0x1_2'(s(fun(X188,bool),X189),s(fun(X190,X188),X191))),s(X190,X192)))) | p(s(bool,happ(s(fun(fun(X188,bool),bool),'?_1'),s(fun(X188,bool),X189))))) )),
  inference(superposition,[],[f319,f340])).
fof(f17818,plain,(
  ( ! [X196,X194,X197,X195,X193] : (~p(s(bool,happ(s(fun(X195,bool),'_dst_x0x1_2'(s(fun(X193,bool),X194),s(fun(X195,X193),X196))),s(X195,X197)))) | p(s(bool,'|dollar|exists_1'(s(fun(X193,bool),X194))))) )),
  inference(superposition,[],[f3449,f340])).
fof(f17822,plain,(
  ( ! [X239,X237,X235,X238,X236] : (p(s(bool,happ(s(fun(X237,bool),'_dst_x0x1_2'(s(fun(X235,bool),X236),s(fun(X237,X235),X238))),s(X237,X239)))) | s(bool,'T_0') != s(bool,happ(s(fun(X235,bool),X236),s(X235,happ(s(fun(X237,X235),X238),s(X237,X239)))))) )),
  inference(superposition,[],[f251,f340])).
fof(f17823,plain,(
  ( ! [X243,X241,X244,X242,X240] : (~p(s(bool,happ(s(fun(X242,bool),'_dst_x0x1_2'(s(fun(X240,bool),X241),s(fun(X242,X240),X243))),s(X242,X244)))) | s(bool,'T_0') = s(bool,happ(s(fun(X240,bool),X241),s(X240,happ(s(fun(X242,X240),X243),s(X242,X244)))))) )),
  inference(superposition,[],[f252,f340])).
fof(f17826,plain,(
  ( ! [X255,X257,X259,X260,X256,X258] : (p(s(bool,happ(s(fun(X257,bool),'_dst_x0x1_2'(s(fun(X255,bool),X256),s(fun(X257,X255),X258))),s(X257,X259)))) | p(s(bool,X260)) | s(bool,X260) = s(bool,happ(s(fun(X255,bool),X256),s(X255,happ(s(fun(X257,X255),X258),s(X257,X259)))))) )),
  inference(superposition,[],[f312,f340])).
fof(f17828,plain,(
  ( ! [X269,X271,X267,X268,X270,X272] : (~p(s(bool,happ(s(fun(X269,bool),'_dst_x0x1_2'(s(fun(X267,bool),X268),s(fun(X269,X267),X270))),s(X269,X271)))) | ~p(s(bool,X272)) | s(bool,X272) = s(bool,happ(s(fun(X267,bool),X268),s(X267,happ(s(fun(X269,X267),X270),s(X269,X271)))))) )),
  inference(superposition,[],[f315,f340])).
fof(f17829,plain,(
  ( ! [X277,X273,X275,X276,X278,X274] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X275,bool),'_dst_x0x1_2'(s(fun(X273,bool),X274),s(fun(X275,X273),X276))),s(X275,X277))))),s(bool,X278)))) | p(s(bool,happ(s(fun(X273,bool),X274),s(X273,happ(s(fun(X275,X273),X276),s(X275,X277))))))) )),
  inference(superposition,[],[f320,f340])).
fof(f17832,plain,(
  ( ! [X292,X294,X296,X293,X295,X291] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X296))),s(bool,happ(s(fun(X293,bool),'_dst_x0x1_2'(s(fun(X291,bool),X292),s(fun(X293,X291),X294))),s(X293,X295)))))) | p(s(bool,happ(s(fun(X291,bool),X292),s(X291,happ(s(fun(X293,X291),X294),s(X293,X295))))))) )),
  inference(superposition,[],[f321,f340])).
fof(f17833,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(X299,bool),'_dst_x0x1_2'(s(fun(X297,bool),X298),s(fun(X299,X297),X300))),s(X299,X301)))) | ~p(s(bool,X302)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X297,bool),X298),s(X297,happ(s(fun(X299,X297),X300),s(X299,X301))))))),s(bool,X302))))) )),
  inference(superposition,[],[f322,f340])).
fof(f17834,plain,(
  ( ! [X308,X304,X306,X303,X305,X307] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X305,bool),'_dst_x0x1_2'(s(fun(X303,bool),X304),s(fun(X305,X303),X306))),s(X305,X307))))),s(bool,X308)))) | p(s(bool,happ(s(fun(X303,bool),X304),s(X303,happ(s(fun(X305,X303),X306),s(X305,X307)))))) | p(s(bool,X308))) )),
  inference(superposition,[],[f323,f340])).
fof(f17835,plain,(
  ( ! [X313,X310,X312,X314,X309,X311] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X314))),s(bool,happ(s(fun(X311,bool),'_dst_x0x1_2'(s(fun(X309,bool),X310),s(fun(X311,X309),X312))),s(X311,X313)))))) | p(s(bool,X314)) | p(s(bool,happ(s(fun(X309,bool),X310),s(X309,happ(s(fun(X311,X309),X312),s(X311,X313))))))) )),
  inference(superposition,[],[f323,f340])).
fof(f17836,plain,(
  ( ! [X315,X316,X318,X320,X317,X319] : (~p(s(bool,happ(s(fun(X317,bool),'_dst_x0x1_2'(s(fun(X315,bool),X316),s(fun(X317,X315),X318))),s(X317,X319)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X315,bool),X316),s(X315,happ(s(fun(X317,X315),X318),s(X317,X319))))))),s(bool,X320))))) )),
  inference(superposition,[],[f324,f340])).
fof(f17837,plain,(
  ( ! [X325,X321,X323,X324,X326,X322] : (~p(s(bool,happ(s(fun(X323,bool),'_dst_x0x1_2'(s(fun(X321,bool),X322),s(fun(X323,X321),X324))),s(X323,X325)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X326))),s(bool,happ(s(fun(X321,bool),X322),s(X321,happ(s(fun(X323,X321),X324),s(X323,X325))))))))) )),
  inference(superposition,[],[f325,f340])).
fof(f17838,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (~p(s(bool,happ(s(fun(X329,bool),'_dst_x0x1_2'(s(fun(X327,bool),X328),s(fun(X329,X327),X330))),s(X329,X331)))) | p(s(bool,X332)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X327,bool),X328),s(X327,happ(s(fun(X329,X327),X330),s(X329,X331))))))),s(bool,X332))))) )),
  inference(superposition,[],[f326,f340])).
fof(f17839,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X335,bool),'_dst_x0x1_2'(s(fun(X333,bool),X334),s(fun(X335,X333),X336))),s(X335,X337))))),s(bool,X338)))) | p(s(bool,happ(s(fun(X333,bool),X334),s(X333,happ(s(fun(X335,X333),X336),s(X335,X337))))))) )),
  inference(superposition,[],[f327,f340])).
fof(f17841,plain,(
  ( ! [X350,X346,X349,X345,X347,X348] : (~p(s(bool,happ(s(fun(X347,bool),'_dst_x0x1_2'(s(fun(X345,bool),X346),s(fun(X347,X345),X348))),s(X347,X349)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X350))),s(bool,happ(s(fun(X345,bool),X346),s(X345,happ(s(fun(X347,X345),X348),s(X347,X349))))))))) )),
  inference(superposition,[],[f328,f340])).
fof(f17846,plain,(
  ( ! [X377,X379,X380,X376,X378,X375] : (~p(s(bool,happ(s(fun(X377,bool),'_dst_x0x1_2'(s(fun(X375,bool),X376),s(fun(X377,X375),X378))),s(X377,X379)))) | s(bool,X380) != s(bool,happ(s(fun(X375,bool),X376),s(X375,happ(s(fun(X377,X375),X378),s(X377,X379))))) | s(bool,'T_0') = s(bool,X380)) )),
  inference(superposition,[],[f399,f340])).
fof(f17848,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (p(s(bool,happ(s(fun(X388,bool),'_dst_x0x1_2'(s(fun(X386,bool),X387),s(fun(X388,X386),X389))),s(X388,X390)))) | s(bool,X391) = s(bool,happ(s(fun(X386,bool),X387),s(X386,happ(s(fun(X388,X386),X389),s(X388,X390))))) | s(bool,'T_0') = s(bool,X391)) )),
  inference(superposition,[],[f454,f340])).
fof(f17851,plain,(
  ( ! [X408,X410,X405,X407,X409,X406] : (~p(s(bool,happ(s(fun(X407,bool),'_dst_x0x1_2'(s(fun(X405,bool),X406),s(fun(X407,X405),X408))),s(X407,X409)))) | p(s(bool,'|dollar|exists_1'(s(fun(X410,bool),'_dst_x0_1'(s(bool,happ(s(fun(X405,bool),X406),s(X405,happ(s(fun(X407,X405),X408),s(X407,X409))))))))))) )),
  inference(superposition,[],[f1169,f340])).
fof(f17943,plain,(
  ( ! [X191,X189,X187,X190,X188] : (p(s(bool,happ(s(fun(X188,bool),X189),s(X188,happ(s(fun(X187,X188),X190),s(X187,X191)))))) | s(bool,'T_0') != s(bool,happ(s(fun(X187,bool),'_dst_x0x1_2'(s(fun(X188,bool),X189),s(fun(X187,X188),X190))),s(X187,X191)))) )),
  inference(superposition,[],[f251,f340])).
fof(f17944,plain,(
  ( ! [X196,X194,X192,X195,X193] : (~p(s(bool,happ(s(fun(X193,bool),X194),s(X193,happ(s(fun(X192,X193),X195),s(X192,X196)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X192,bool),'_dst_x0x1_2'(s(fun(X193,bool),X194),s(fun(X192,X193),X195))),s(X192,X196)))) )),
  inference(superposition,[],[f252,f340])).
fof(f17947,plain,(
  ( ! [X212,X210,X208,X211,X209,X207] : (p(s(bool,happ(s(fun(X208,bool),X209),s(X208,happ(s(fun(X207,X208),X210),s(X207,X211)))))) | p(s(bool,X212)) | s(bool,X212) = s(bool,happ(s(fun(X207,bool),'_dst_x0x1_2'(s(fun(X208,bool),X209),s(fun(X207,X208),X210))),s(X207,X211)))) )),
  inference(superposition,[],[f312,f340])).
fof(f17949,plain,(
  ( ! [X222,X220,X219,X223,X221,X224] : (~p(s(bool,happ(s(fun(X220,bool),X221),s(X220,happ(s(fun(X219,X220),X222),s(X219,X223)))))) | ~p(s(bool,X224)) | s(bool,X224) = s(bool,happ(s(fun(X219,bool),'_dst_x0x1_2'(s(fun(X220,bool),X221),s(fun(X219,X220),X222))),s(X219,X223)))) )),
  inference(superposition,[],[f315,f340])).
fof(f17950,plain,(
  ( ! [X229,X227,X225,X230,X228,X226] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X226,bool),X227),s(X226,happ(s(fun(X225,X226),X228),s(X225,X229))))))),s(bool,X230)))) | p(s(bool,happ(s(fun(X225,bool),'_dst_x0x1_2'(s(fun(X226,bool),X227),s(fun(X225,X226),X228))),s(X225,X229))))) )),
  inference(superposition,[],[f320,f340])).
fof(f17953,plain,(
  ( ! [X243,X246,X244,X248,X247,X245] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X248))),s(bool,happ(s(fun(X244,bool),X245),s(X244,happ(s(fun(X243,X244),X246),s(X243,X247)))))))) | p(s(bool,happ(s(fun(X243,bool),'_dst_x0x1_2'(s(fun(X244,bool),X245),s(fun(X243,X244),X246))),s(X243,X247))))) )),
  inference(superposition,[],[f321,f340])).
fof(f17954,plain,(
  ( ! [X253,X251,X249,X254,X252,X250] : (~p(s(bool,happ(s(fun(X250,bool),X251),s(X250,happ(s(fun(X249,X250),X252),s(X249,X253)))))) | ~p(s(bool,X254)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X249,bool),'_dst_x0x1_2'(s(fun(X250,bool),X251),s(fun(X249,X250),X252))),s(X249,X253))))),s(bool,X254))))) )),
  inference(superposition,[],[f322,f340])).
fof(f17955,plain,(
  ( ! [X255,X257,X259,X260,X256,X258] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X256,bool),X257),s(X256,happ(s(fun(X255,X256),X258),s(X255,X259))))))),s(bool,X260)))) | p(s(bool,happ(s(fun(X255,bool),'_dst_x0x1_2'(s(fun(X256,bool),X257),s(fun(X255,X256),X258))),s(X255,X259)))) | p(s(bool,X260))) )),
  inference(superposition,[],[f323,f340])).
fof(f17956,plain,(
  ( ! [X261,X263,X265,X262,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X266))),s(bool,happ(s(fun(X262,bool),X263),s(X262,happ(s(fun(X261,X262),X264),s(X261,X265)))))))) | p(s(bool,X266)) | p(s(bool,happ(s(fun(X261,bool),'_dst_x0x1_2'(s(fun(X262,bool),X263),s(fun(X261,X262),X264))),s(X261,X265))))) )),
  inference(superposition,[],[f323,f340])).
fof(f17957,plain,(
  ( ! [X269,X271,X267,X268,X270,X272] : (~p(s(bool,happ(s(fun(X268,bool),X269),s(X268,happ(s(fun(X267,X268),X270),s(X267,X271)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X267,bool),'_dst_x0x1_2'(s(fun(X268,bool),X269),s(fun(X267,X268),X270))),s(X267,X271))))),s(bool,X272))))) )),
  inference(superposition,[],[f324,f340])).
fof(f17958,plain,(
  ( ! [X277,X273,X275,X276,X278,X274] : (~p(s(bool,happ(s(fun(X274,bool),X275),s(X274,happ(s(fun(X273,X274),X276),s(X273,X277)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X278))),s(bool,happ(s(fun(X273,bool),'_dst_x0x1_2'(s(fun(X274,bool),X275),s(fun(X273,X274),X276))),s(X273,X277))))))) )),
  inference(superposition,[],[f325,f340])).
fof(f17959,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (~p(s(bool,happ(s(fun(X280,bool),X281),s(X280,happ(s(fun(X279,X280),X282),s(X279,X283)))))) | p(s(bool,X284)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X279,bool),'_dst_x0x1_2'(s(fun(X280,bool),X281),s(fun(X279,X280),X282))),s(X279,X283))))),s(bool,X284))))) )),
  inference(superposition,[],[f326,f340])).
fof(f17960,plain,(
  ( ! [X288,X290,X285,X287,X289,X286] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X286,bool),X287),s(X286,happ(s(fun(X285,X286),X288),s(X285,X289))))))),s(bool,X290)))) | p(s(bool,happ(s(fun(X285,bool),'_dst_x0x1_2'(s(fun(X286,bool),X287),s(fun(X285,X286),X288))),s(X285,X289))))) )),
  inference(superposition,[],[f327,f340])).
fof(f17962,plain,(
  ( ! [X300,X302,X298,X301,X297,X299] : (~p(s(bool,happ(s(fun(X298,bool),X299),s(X298,happ(s(fun(X297,X298),X300),s(X297,X301)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X302))),s(bool,happ(s(fun(X297,bool),'_dst_x0x1_2'(s(fun(X298,bool),X299),s(fun(X297,X298),X300))),s(X297,X301))))))) )),
  inference(superposition,[],[f328,f340])).
fof(f17967,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (~p(s(bool,happ(s(fun(X328,bool),X329),s(X328,happ(s(fun(X327,X328),X330),s(X327,X331)))))) | s(bool,X332) != s(bool,happ(s(fun(X327,bool),'_dst_x0x1_2'(s(fun(X328,bool),X329),s(fun(X327,X328),X330))),s(X327,X331))) | s(bool,'T_0') = s(bool,X332)) )),
  inference(superposition,[],[f399,f340])).
fof(f17969,plain,(
  ( ! [X341,X343,X339,X340,X342,X338] : (p(s(bool,happ(s(fun(X339,bool),X340),s(X339,happ(s(fun(X338,X339),X341),s(X338,X342)))))) | s(bool,X343) = s(bool,happ(s(fun(X338,bool),'_dst_x0x1_2'(s(fun(X339,bool),X340),s(fun(X338,X339),X341))),s(X338,X342))) | s(bool,'T_0') = s(bool,X343)) )),
  inference(superposition,[],[f454,f340])).
fof(f17972,plain,(
  ( ! [X358,X360,X362,X357,X359,X361] : (~p(s(bool,happ(s(fun(X358,bool),X359),s(X358,happ(s(fun(X357,X358),X360),s(X357,X361)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X362,bool),'_dst_x0_1'(s(bool,happ(s(fun(X357,bool),'_dst_x0x1_2'(s(fun(X358,bool),X359),s(fun(X357,X358),X360))),s(X357,X361))))))))) )),
  inference(superposition,[],[f1169,f340])).
fof(f18794,plain,(
  ( ! [X88,X87,X85,X83,X86,X84] : (~p(s(bool,happ(s(fun(X85,bool),'_dst_x0x1_2'(s(fun(X83,bool),X84),s(fun(X85,X83),X86))),s(X85,X87)))) | p(s(bool,happ(s(fun(X83,bool),X88),s(X83,sK6(X84,X88,X83))))) | p(s(bool,happ(s(fun(X83,bool),X84),s(X83,sK5(X84,X88,X83)))))) )),
  inference(superposition,[],[f300,f340])).
fof(f32426,plain,(
  ( ! [X140,X138,X136,X135,X139,X137] : (~p(s(bool,happ(s(fun(X137,bool),'_dst_x0x1_2'(s(fun(X135,bool),X136),s(fun(X137,X135),X138))),s(X137,X139)))) | p(s(bool,happ(s(fun(fun(X140,bool),bool),'?_1'),s(fun(X140,bool),'_dst_x0_1'(s(bool,happ(s(fun(X135,bool),X136),s(X135,happ(s(fun(X137,X135),X138),s(X137,X139))))))))))) )),
  inference(superposition,[],[f4018,f340])).
fof(f32428,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,happ(s(fun(X148,bool),X149),s(X148,happ(s(fun(X147,X148),X150),s(X147,X151)))))) | p(s(bool,happ(s(fun(fun(X152,bool),bool),'?_1'),s(fun(X152,bool),'_dst_x0_1'(s(bool,happ(s(fun(X147,bool),'_dst_x0x1_2'(s(fun(X148,bool),X149),s(fun(X147,X148),X150))),s(X147,X151))))))))) )),
  inference(superposition,[],[f4018,f340])).
fof(f43282,plain,(
  ( ! [X158,X156,X154,X159,X157,X155] : (~p(s(bool,happ(s(fun(X156,bool),'_dst_x0x1_2'(s(fun(X154,bool),X155),s(fun(X156,X154),X157))),s(X156,X158)))) | p(s(bool,happ(s(fun(fun(X159,bool),bool),'!_1'),s(fun(X159,bool),'_dst_x0_1'(s(bool,happ(s(fun(X154,bool),X155),s(X154,happ(s(fun(X156,X154),X157),s(X156,X158))))))))))) )),
  inference(superposition,[],[f5307,f340])).
fof(f43286,plain,(
  ( ! [X187,X185,X182,X186,X184,X183] : (~p(s(bool,happ(s(fun(X183,bool),X184),s(X183,happ(s(fun(X182,X183),X185),s(X182,X186)))))) | p(s(bool,happ(s(fun(fun(X187,bool),bool),'!_1'),s(fun(X187,bool),'_dst_x0_1'(s(bool,happ(s(fun(X182,bool),'_dst_x0x1_2'(s(fun(X183,bool),X184),s(fun(X182,X183),X185))),s(X182,X186))))))))) )),
  inference(superposition,[],[f5307,f340])).
fof(f33071,plain,(
  ( ! [X516,X518,X514,X517,X513,X515] : (p(s(bool,happ(s(fun(X513,bool),'const.ind_type.FCONS_3'(s(fun(X513,bool),X515),s(fun('type.num.num',fun(X513,bool)),X514),s('type.num.num',X516))),s(X513,sK5(happ(s(fun('type.num.num',fun(X513,bool)),happ(s(fun(fun(X513,bool),fun('type.num.num',fun(X513,bool))),'_dst_x1x0_2'(s(fun(fun(X513,bool),fun(fun('type.num.num',fun(X513,bool)),fun('type.num.num',fun(X513,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X513,bool)),X514))),s(fun(X513,bool),X515))),s('type.num.num',X516)),X518,X513))))) | ~p(s(bool,happ(s(fun(X513,bool),'const.ind_type.FCONS_3'(s(fun(X513,bool),X515),s(fun('type.num.num',fun(X513,bool)),X514),s('type.num.num',X516))),s(X513,X517)))) | p(s(bool,happ(s(fun(X513,bool),X518),s(X513,sK6(happ(s(fun('type.num.num',fun(X513,bool)),happ(s(fun(fun(X513,bool),fun('type.num.num',fun(X513,bool))),'_dst_x1x0_2'(s(fun(fun(X513,bool),fun(fun('type.num.num',fun(X513,bool)),fun('type.num.num',fun(X513,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X513,bool)),X514))),s(fun(X513,bool),X515))),s('type.num.num',X516)),X518,X513)))))) )),
  inference(forward_demodulation,[],[f32848,f377])).
fof(f32848,plain,(
  ( ! [X516,X518,X514,X517,X513,X515] : (~p(s(bool,happ(s(fun(X513,bool),'const.ind_type.FCONS_3'(s(fun(X513,bool),X515),s(fun('type.num.num',fun(X513,bool)),X514),s('type.num.num',X516))),s(X513,X517)))) | p(s(bool,happ(s(fun(X513,bool),X518),s(X513,sK6(happ(s(fun('type.num.num',fun(X513,bool)),happ(s(fun(fun(X513,bool),fun('type.num.num',fun(X513,bool))),'_dst_x1x0_2'(s(fun(fun(X513,bool),fun(fun('type.num.num',fun(X513,bool)),fun('type.num.num',fun(X513,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X513,bool)),X514))),s(fun(X513,bool),X515))),s('type.num.num',X516)),X518,X513))))) | p(s(bool,happ(s(fun(X513,bool),happ(s(fun('type.num.num',fun(X513,bool)),happ(s(fun(fun(X513,bool),fun('type.num.num',fun(X513,bool))),'_dst_x1x0_2'(s(fun(fun(X513,bool),fun(fun('type.num.num',fun(X513,bool)),fun('type.num.num',fun(X513,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X513,bool)),X514))),s(fun(X513,bool),X515))),s('type.num.num',X516))),s(X513,sK5(happ(s(fun('type.num.num',fun(X513,bool)),happ(s(fun(fun(X513,bool),fun('type.num.num',fun(X513,bool))),'_dst_x1x0_2'(s(fun(fun(X513,bool),fun(fun('type.num.num',fun(X513,bool)),fun('type.num.num',fun(X513,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X513,bool)),X514))),s(fun(X513,bool),X515))),s('type.num.num',X516)),X518,X513)))))) )),
  inference(superposition,[],[f300,f377])).
fof(f31927,plain,(
  ( ! [X227,X225,X223,X228,X226,X224] : (~p(s(bool,happ(s(fun(X224,bool),'_dst_x1x0_2'(s(fun(X224,fun(X223,bool)),X225),s(X223,X227))),s(X224,X226)))) | p(s(bool,happ(s(fun(X223,bool),X228),s(X223,sK6(happ(s(fun(X224,fun(X223,bool)),X225),s(X224,X226)),X228,X223))))) | p(s(bool,happ(s(fun(X223,bool),happ(s(fun(X224,fun(X223,bool)),X225),s(X224,X226))),s(X223,sK5(happ(s(fun(X224,fun(X223,bool)),X225),s(X224,X226)),X228,X223)))))) )),
  inference(superposition,[],[f300,f341])).
fof(f31928,plain,(
  ( ! [X231,X229,X233,X230,X232] : (~p(s(bool,happ(s(fun(X230,bool),'_dst_x1x0_2'(s(fun(X230,fun(X229,bool)),X231),s(X229,X233))),s(X230,X232)))) | p(s(bool,happ(s(fun(fun(X229,bool),bool),'?_1'),s(fun(X229,bool),happ(s(fun(X230,fun(X229,bool)),X231),s(X230,X232))))))) )),
  inference(superposition,[],[f319,f341])).
fof(f31929,plain,(
  ( ! [X237,X235,X238,X236,X234] : (~p(s(bool,happ(s(fun(X235,bool),'_dst_x1x0_2'(s(fun(X235,fun(X234,bool)),X236),s(X234,X238))),s(X235,X237)))) | p(s(bool,'|dollar|exists_1'(s(fun(X234,bool),happ(s(fun(X235,fun(X234,bool)),X236),s(X235,X237))))))) )),
  inference(superposition,[],[f3449,f341])).
fof(f36584,plain,(
  ( ! [X198,X202,X200,X199,X201] : (p(s(bool,happ(s(fun(X200,bool),'_dst_x0x0x1_3'(s(fun(X198,fun(X198,bool)),'=_0'),s(X198,X199),s(fun(X200,X198),X201))),s(X200,X202)))) | s(X198,X199) != s(X198,happ(s(fun(X200,X198),X201),s(X200,X202)))) )),
  inference(backward_demodulation,[],[f36032,f17819])).
fof(f36583,plain,(
  ( ! [X206,X204,X207,X205,X203] : (~p(s(bool,happ(s(fun(X205,bool),'_dst_x0x0x1_3'(s(fun(X203,fun(X203,bool)),'=_0'),s(X203,X204),s(fun(X205,X203),X206))),s(X205,X207)))) | s(X203,X204) = s(X203,happ(s(fun(X205,X203),X206),s(X205,X207)))) )),
  inference(backward_demodulation,[],[f36032,f17820])).
fof(f40298,plain,(
  ( ! [X476,X472,X474,X475,X473] : (~p(s(bool,happ(s(fun(X473,bool),'_dst_x0x1x1_3'(s(fun(X472,fun(X472,bool)),'=_0'),s(fun(X473,X472),X474),s(fun(X473,X472),X476))),s(X473,X475)))) | s(X472,happ(s(fun(X473,X472),X474),s(X473,X475))) = s(X472,happ(s(fun(X473,X472),X476),s(X473,X475)))) )),
  inference(superposition,[],[f337,f360])).
fof(f40297,plain,(
  ( ! [X469,X471,X467,X468,X470] : (p(s(bool,happ(s(fun(X468,bool),'_dst_x0x1x1_3'(s(fun(X467,fun(X467,bool)),'=_0'),s(fun(X468,X467),X469),s(fun(X468,X467),X471))),s(X468,X470)))) | s(X467,happ(s(fun(X468,X467),X469),s(X468,X470))) != s(X467,happ(s(fun(X468,X467),X471),s(X468,X470)))) )),
  inference(superposition,[],[f338,f360])).
fof(f35236,plain,(
  ( ! [X749,X751,X745,X747,X748,X750,X744,X746] : (p(s(bool,happ(s(fun(X744,bool),happ(s(fun('type.benchmark.times'(X745),fun(X744,bool)),happ(s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749),s('type.benchmark.times'(X745),X746))),s('type.benchmark.times'(X745),X747))),s(X744,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X745),'const.benchmark.Twice_2'(s('type.benchmark.times'(X745),X746),s('type.benchmark.times'(X745),X747))),s(fun(X745,fun(X744,bool)),X748),s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749)),X751,X744))))) | ~p(s(bool,happ(s(fun(X744,bool),happ(s(fun('type.benchmark.times'(X745),fun(X744,bool)),happ(s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749),s('type.benchmark.times'(X745),X746))),s('type.benchmark.times'(X745),X747))),s(X744,X750)))) | p(s(bool,happ(s(fun(X744,bool),X751),s(X744,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X745),'const.benchmark.Twice_2'(s('type.benchmark.times'(X745),X746),s('type.benchmark.times'(X745),X747))),s(fun(X745,fun(X744,bool)),X748),s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749)),X751,X744)))))) )),
  inference(forward_demodulation,[],[f35012,f336])).
fof(f35012,plain,(
  ( ! [X749,X751,X745,X747,X748,X750,X744,X746] : (~p(s(bool,happ(s(fun(X744,bool),happ(s(fun('type.benchmark.times'(X745),fun(X744,bool)),happ(s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749),s('type.benchmark.times'(X745),X746))),s('type.benchmark.times'(X745),X747))),s(X744,X750)))) | p(s(bool,happ(s(fun(X744,bool),X751),s(X744,sK6('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X745),'const.benchmark.Twice_2'(s('type.benchmark.times'(X745),X746),s('type.benchmark.times'(X745),X747))),s(fun(X745,fun(X744,bool)),X748),s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749)),X751,X744))))) | p(s(bool,happ(s(fun(X744,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X745),'const.benchmark.Twice_2'(s('type.benchmark.times'(X745),X746),s('type.benchmark.times'(X745),X747))),s(fun(X745,fun(X744,bool)),X748),s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749))),s(X744,sK5('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X745),'const.benchmark.Twice_2'(s('type.benchmark.times'(X745),X746),s('type.benchmark.times'(X745),X747))),s(fun(X745,fun(X744,bool)),X748),s(fun('type.benchmark.times'(X745),fun('type.benchmark.times'(X745),fun(X744,bool))),X749)),X751,X744)))))) )),
  inference(superposition,[],[f300,f336])).
fof(f40610,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X3,bool),'_dst_x0x1x1_3'(s(fun(X1,fun(X0,bool)),'_dst_x0x1_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X1,X0),X2))),s(fun(X3,X1),X4),s(fun(X3,X0),'_dst_x0x1_2'(s(fun(X1,X0),X2),s(fun(X3,X1),X4))))),s(X3,X5))))) )),
  inference(backward_demodulation,[],[f40041,f17674])).
fof(f18708,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (~p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X20,fun(X18,bool)),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))),s(X18,X24)))) | p(s(bool,happ(s(fun(X18,bool),X25),s(X18,sK6(happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X25,X18))))) | p(s(bool,happ(s(fun(X18,bool),happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23))),s(X18,sK5(happ(s(fun(X19,fun(X18,bool)),'_dst_x0x1_2'(s(fun(X20,fun(X18,bool)),X21),s(fun(X19,X20),X22))),s(X19,X23)),X25,X18)))))) )),
  inference(superposition,[],[f300,f340])).
fof(f18007,plain,(
  ( ! [X573,X575,X569,X571,X572,X574,X570] : (~p(s(bool,happ(s(fun(X569,bool),happ(s(fun(X571,fun(X569,bool)),X572),s(X571,happ(s(fun(X570,X571),X573),s(X570,X574))))),s(X569,X575)))) | p(s(bool,'|dollar|exists_1'(s(fun(X569,bool),happ(s(fun(X570,fun(X569,bool)),'_dst_x0x1_2'(s(fun(X571,fun(X569,bool)),X572),s(fun(X570,X571),X573))),s(X570,X574))))))) )),
  inference(superposition,[],[f3449,f340])).
fof(f18005,plain,(
  ( ! [X561,X557,X559,X555,X560,X556,X558] : (~p(s(bool,happ(s(fun(X555,bool),happ(s(fun(X557,fun(X555,bool)),X558),s(X557,happ(s(fun(X556,X557),X559),s(X556,X560))))),s(X555,X561)))) | p(s(bool,happ(s(fun(fun(X555,bool),bool),'?_1'),s(fun(X555,bool),happ(s(fun(X556,fun(X555,bool)),'_dst_x0x1_2'(s(fun(X557,fun(X555,bool)),X558),s(fun(X556,X557),X559))),s(X556,X560))))))) )),
  inference(superposition,[],[f319,f340])).
fof(f17881,plain,(
  ( ! [X617,X619,X615,X620,X616,X618,X614] : (~p(s(bool,happ(s(fun(fun(X614,bool),bool),'!_1'),s(fun(X614,bool),happ(s(fun(X617,fun(X614,bool)),'_dst_x0x1_2'(s(fun(X615,fun(X614,bool)),X616),s(fun(X617,X615),X618))),s(X617,X619)))))) | p(s(bool,happ(s(fun(X614,bool),happ(s(fun(X615,fun(X614,bool)),X616),s(X615,happ(s(fun(X617,X615),X618),s(X617,X619))))),s(X614,X620))))) )),
  inference(superposition,[],[f316,f340])).
fof(f32016,plain,(
  ( ! [X749,X751,X747,X752,X748,X750,X746] : (~p(s(bool,happ(s(fun(fun(X746,bool),bool),'!_1'),s(fun(X746,bool),happ(s(fun(X748,fun(X746,bool)),'_dst_x1x0_2'(s(fun(X748,fun(X747,fun(X746,bool))),X749),s(X747,X751))),s(X748,X750)))))) | p(s(bool,happ(s(fun(X746,bool),happ(s(fun(X747,fun(X746,bool)),happ(s(fun(X748,fun(X747,fun(X746,bool))),X749),s(X748,X750))),s(X747,X751))),s(X746,X752))))) )),
  inference(superposition,[],[f316,f341])).
fof(f31860,plain,(
  ( ! [X765,X767,X771,X769,X766,X770,X768] : (~p(s(bool,happ(s(fun(X765,bool),happ(s(fun(X767,fun(X765,bool)),happ(s(fun(X766,fun(X767,fun(X765,bool))),X768),s(X766,X770))),s(X767,X769))),s(X765,X771)))) | p(s(bool,'|dollar|exists_1'(s(fun(X765,bool),happ(s(fun(X766,fun(X765,bool)),'_dst_x1x0_2'(s(fun(X766,fun(X767,fun(X765,bool))),X768),s(X767,X769))),s(X766,X770))))))) )),
  inference(superposition,[],[f3449,f341])).
fof(f31858,plain,(
  ( ! [X757,X753,X755,X751,X756,X752,X754] : (~p(s(bool,happ(s(fun(X751,bool),happ(s(fun(X753,fun(X751,bool)),happ(s(fun(X752,fun(X753,fun(X751,bool))),X754),s(X752,X756))),s(X753,X755))),s(X751,X757)))) | p(s(bool,happ(s(fun(fun(X751,bool),bool),'?_1'),s(fun(X751,bool),happ(s(fun(X752,fun(X751,bool)),'_dst_x1x0_2'(s(fun(X752,fun(X753,fun(X751,bool))),X754),s(X753,X755))),s(X752,X756))))))) )),
  inference(superposition,[],[f319,f341])).
fof(f31853,plain,(
  ( ! [X720,X722,X716,X718,X721,X723,X717,X719] : (~p(s(bool,happ(s(fun(X716,bool),happ(s(fun(X718,fun(X716,bool)),happ(s(fun(X717,fun(X718,fun(X716,bool))),X719),s(X717,X721))),s(X718,X720))),s(X716,X722)))) | p(s(bool,happ(s(fun(X716,bool),X723),s(X716,sK6(happ(s(fun(X717,fun(X716,bool)),'_dst_x1x0_2'(s(fun(X717,fun(X718,fun(X716,bool))),X719),s(X718,X720))),s(X717,X721)),X723,X716))))) | p(s(bool,happ(s(fun(X716,bool),happ(s(fun(X717,fun(X716,bool)),'_dst_x1x0_2'(s(fun(X717,fun(X718,fun(X716,bool))),X719),s(X718,X720))),s(X717,X721))),s(X716,sK5(happ(s(fun(X717,fun(X716,bool)),'_dst_x1x0_2'(s(fun(X717,fun(X718,fun(X716,bool))),X719),s(X718,X720))),s(X717,X721)),X723,X716)))))) )),
  inference(superposition,[],[f300,f341])).
fof(f18707,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X13,fun(X10,bool)),'_dst_x0x1_2'(s(fun(X11,fun(X10,bool)),X12),s(fun(X13,X11),X14))),s(X13,X15))),s(X10,X16)))) | p(s(bool,happ(s(fun(X10,bool),X17),s(X10,sK6(happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X17,X10))))) | p(s(bool,happ(s(fun(X10,bool),happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15))))),s(X10,sK5(happ(s(fun(X11,fun(X10,bool)),X12),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))),X17,X10)))))) )),
  inference(superposition,[],[f300,f340])).
fof(f18002,plain,(
  ( ! [X540,X542,X536,X538,X541,X537,X539] : (~p(s(bool,happ(s(fun(fun(X536,bool),bool),'!_1'),s(fun(X536,bool),happ(s(fun(X538,fun(X536,bool)),X539),s(X538,happ(s(fun(X537,X538),X540),s(X537,X541)))))))) | p(s(bool,happ(s(fun(X536,bool),happ(s(fun(X537,fun(X536,bool)),'_dst_x0x1_2'(s(fun(X538,fun(X536,bool)),X539),s(fun(X537,X538),X540))),s(X537,X541))),s(X536,X542))))) )),
  inference(superposition,[],[f316,f340])).
fof(f17886,plain,(
  ( ! [X652,X648,X650,X653,X649,X651,X647] : (~p(s(bool,happ(s(fun(X647,bool),happ(s(fun(X650,fun(X647,bool)),'_dst_x0x1_2'(s(fun(X648,fun(X647,bool)),X649),s(fun(X650,X648),X651))),s(X650,X652))),s(X647,X653)))) | p(s(bool,'|dollar|exists_1'(s(fun(X647,bool),happ(s(fun(X648,fun(X647,bool)),X649),s(X648,happ(s(fun(X650,X648),X651),s(X650,X652))))))))) )),
  inference(superposition,[],[f3449,f340])).
fof(f17884,plain,(
  ( ! [X639,X633,X635,X636,X638,X634,X637] : (~p(s(bool,happ(s(fun(X633,bool),happ(s(fun(X636,fun(X633,bool)),'_dst_x0x1_2'(s(fun(X634,fun(X633,bool)),X635),s(fun(X636,X634),X637))),s(X636,X638))),s(X633,X639)))) | p(s(bool,happ(s(fun(fun(X633,bool),bool),'?_1'),s(fun(X633,bool),happ(s(fun(X634,fun(X633,bool)),X635),s(X634,happ(s(fun(X636,X634),X637),s(X636,X638))))))))) )),
  inference(superposition,[],[f319,f340])).
fof(f32021,plain,(
  ( ! [X784,X779,X783,X781,X785,X782,X780] : (~p(s(bool,happ(s(fun(X779,bool),happ(s(fun(X781,fun(X779,bool)),'_dst_x1x0_2'(s(fun(X781,fun(X780,fun(X779,bool))),X782),s(X780,X784))),s(X781,X783))),s(X779,X785)))) | p(s(bool,'|dollar|exists_1'(s(fun(X779,bool),happ(s(fun(X780,fun(X779,bool)),happ(s(fun(X781,fun(X780,fun(X779,bool))),X782),s(X781,X783))),s(X780,X784))))))) )),
  inference(superposition,[],[f3449,f341])).
fof(f32019,plain,(
  ( ! [X765,X767,X771,X769,X766,X770,X768] : (~p(s(bool,happ(s(fun(X765,bool),happ(s(fun(X767,fun(X765,bool)),'_dst_x1x0_2'(s(fun(X767,fun(X766,fun(X765,bool))),X768),s(X766,X770))),s(X767,X769))),s(X765,X771)))) | p(s(bool,happ(s(fun(fun(X765,bool),bool),'?_1'),s(fun(X765,bool),happ(s(fun(X766,fun(X765,bool)),happ(s(fun(X767,fun(X766,fun(X765,bool))),X768),s(X767,X769))),s(X766,X770))))))) )),
  inference(superposition,[],[f319,f341])).
fof(f32014,plain,(
  ( ! [X736,X732,X734,X730,X737,X733,X735,X731] : (~p(s(bool,happ(s(fun(X730,bool),happ(s(fun(X732,fun(X730,bool)),'_dst_x1x0_2'(s(fun(X732,fun(X731,fun(X730,bool))),X733),s(X731,X735))),s(X732,X734))),s(X730,X736)))) | p(s(bool,happ(s(fun(X730,bool),X737),s(X730,sK6(happ(s(fun(X731,fun(X730,bool)),happ(s(fun(X732,fun(X731,fun(X730,bool))),X733),s(X732,X734))),s(X731,X735)),X737,X730))))) | p(s(bool,happ(s(fun(X730,bool),happ(s(fun(X731,fun(X730,bool)),happ(s(fun(X732,fun(X731,fun(X730,bool))),X733),s(X732,X734))),s(X731,X735))),s(X730,sK5(happ(s(fun(X731,fun(X730,bool)),happ(s(fun(X732,fun(X731,fun(X730,bool))),X733),s(X732,X734))),s(X731,X735)),X737,X730)))))) )),
  inference(superposition,[],[f300,f341])).
fof(f31855,plain,(
  ( ! [X736,X732,X734,X738,X737,X733,X735] : (~p(s(bool,happ(s(fun(fun(X732,bool),bool),'!_1'),s(fun(X732,bool),happ(s(fun(X734,fun(X732,bool)),happ(s(fun(X733,fun(X734,fun(X732,bool))),X735),s(X733,X737))),s(X734,X736)))))) | p(s(bool,happ(s(fun(X732,bool),happ(s(fun(X733,fun(X732,bool)),'_dst_x1x0_2'(s(fun(X733,fun(X734,fun(X732,bool))),X735),s(X734,X736))),s(X733,X737))),s(X732,X738))))) )),
  inference(superposition,[],[f316,f341])).
fof(f33980,plain,(
  ( ! [X118,X116,X114,X112,X117,X115,X113] : (~p(s(bool,happ(s(fun(fun(X112,bool),bool),'!_1'),s(fun(X112,bool),'_dst_x0x1_2'(s(fun(X114,bool),X115),s(fun(X112,X114),happ(s(fun(X113,fun(X112,X114)),X116),s(X113,X117)))))))) | p(s(bool,happ(s(fun(X112,bool),happ(s(fun(X113,fun(X112,bool)),'_dst_x00x11_2'(s(fun(X114,bool),X115),s(fun(X113,fun(X112,X114)),X116))),s(X113,X117))),s(X112,X118))))) )),
  inference(superposition,[],[f316,f358])).
fof(f33931,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (~p(s(bool,happ(s(fun(X145,bool),happ(s(fun(X148,fun(X145,bool)),'_dst_x00x11_2'(s(fun(X146,bool),X147),s(fun(X148,fun(X145,X146)),X149))),s(X148,X150))),s(X145,X151)))) | p(s(bool,'|dollar|exists_1'(s(fun(X145,bool),'_dst_x0x1_2'(s(fun(X146,bool),X147),s(fun(X145,X146),happ(s(fun(X148,fun(X145,X146)),X149),s(X148,X150))))))))) )),
  inference(superposition,[],[f3449,f358])).
fof(f33929,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (~p(s(bool,happ(s(fun(X131,bool),happ(s(fun(X134,fun(X131,bool)),'_dst_x00x11_2'(s(fun(X132,bool),X133),s(fun(X134,fun(X131,X132)),X135))),s(X134,X136))),s(X131,X137)))) | p(s(bool,happ(s(fun(fun(X131,bool),bool),'?_1'),s(fun(X131,bool),'_dst_x0x1_2'(s(fun(X132,bool),X133),s(fun(X131,X132),happ(s(fun(X134,fun(X131,X132)),X135),s(X134,X136))))))))) )),
  inference(superposition,[],[f319,f358])).
fof(f33924,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X96] : (~p(s(bool,happ(s(fun(X96,bool),happ(s(fun(X99,fun(X96,bool)),'_dst_x00x11_2'(s(fun(X97,bool),X98),s(fun(X99,fun(X96,X97)),X100))),s(X99,X101))),s(X96,X102)))) | p(s(bool,happ(s(fun(X96,bool),X103),s(X96,sK6('_dst_x0x1_2'(s(fun(X97,bool),X98),s(fun(X96,X97),happ(s(fun(X99,fun(X96,X97)),X100),s(X99,X101)))),X103,X96))))) | p(s(bool,happ(s(fun(X96,bool),'_dst_x0x1_2'(s(fun(X97,bool),X98),s(fun(X96,X97),happ(s(fun(X99,fun(X96,X97)),X100),s(X99,X101))))),s(X96,sK5('_dst_x0x1_2'(s(fun(X97,bool),X98),s(fun(X96,X97),happ(s(fun(X99,fun(X96,X97)),X100),s(X99,X101)))),X103,X96)))))) )),
  inference(superposition,[],[f300,f358])).
fof(f17932,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (p(s(bool,happ(s(fun(X122,bool),happ(s(fun(X122,fun(X122,bool)),'=_0'),s(X122,happ(s(fun(X124,X122),X125),s(X124,happ(s(fun(X123,X124),X126),s(X123,X127))))))),s(X122,X128)))) | s(X122,X128) != s(X122,happ(s(fun(X123,X122),'_dst_x0x1_2'(s(fun(X124,X122),X125),s(fun(X123,X124),X126))),s(X123,X127)))) )),
  inference(superposition,[],[f338,f340])).
fof(f17930,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (~p(s(bool,happ(s(fun(X108,bool),happ(s(fun(X108,fun(X108,bool)),'=_0'),s(X108,happ(s(fun(X110,X108),X111),s(X110,happ(s(fun(X109,X110),X112),s(X109,X113))))))),s(X108,X114)))) | s(X108,X114) = s(X108,happ(s(fun(X109,X108),'_dst_x0x1_2'(s(fun(X110,X108),X111),s(fun(X109,X110),X112))),s(X109,X113)))) )),
  inference(superposition,[],[f337,f340])).
fof(f31758,plain,(
  ( ! [X146,X152,X151,X149,X147,X150,X148] : (p(s(bool,happ(s(fun(X146,bool),happ(s(fun(X146,fun(X146,bool)),'=_0'),s(X146,happ(s(fun(X148,X146),happ(s(fun(X147,fun(X148,X146)),X149),s(X147,X151))),s(X148,X150))))),s(X146,X152)))) | s(X146,X152) != s(X146,happ(s(fun(X147,X146),'_dst_x1x0_2'(s(fun(X147,fun(X148,X146)),X149),s(X148,X150))),s(X147,X151)))) )),
  inference(superposition,[],[f338,f341])).
fof(f31756,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (~p(s(bool,happ(s(fun(X132,bool),happ(s(fun(X132,fun(X132,bool)),'=_0'),s(X132,happ(s(fun(X134,X132),happ(s(fun(X133,fun(X134,X132)),X135),s(X133,X137))),s(X134,X136))))),s(X132,X138)))) | s(X132,X138) = s(X132,happ(s(fun(X133,X132),'_dst_x1x0_2'(s(fun(X133,fun(X134,X132)),X135),s(X134,X136))),s(X133,X137)))) )),
  inference(superposition,[],[f337,f341])).
fof(f17809,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (p(s(bool,happ(s(fun(X138,bool),happ(s(fun(X138,fun(X138,bool)),'=_0'),s(X138,happ(s(fun(X141,X138),'_dst_x0x1_2'(s(fun(X139,X138),X140),s(fun(X141,X139),X142))),s(X141,X143))))),s(X138,X144)))) | s(X138,X144) != s(X138,happ(s(fun(X139,X138),X140),s(X139,happ(s(fun(X141,X139),X142),s(X141,X143)))))) )),
  inference(superposition,[],[f338,f340])).
fof(f17807,plain,(
  ( ! [X127,X125,X130,X128,X126,X124,X129] : (~p(s(bool,happ(s(fun(X124,bool),happ(s(fun(X124,fun(X124,bool)),'=_0'),s(X124,happ(s(fun(X127,X124),'_dst_x0x1_2'(s(fun(X125,X124),X126),s(fun(X127,X125),X128))),s(X127,X129))))),s(X124,X130)))) | s(X124,X130) = s(X124,happ(s(fun(X125,X124),X126),s(X125,happ(s(fun(X127,X125),X128),s(X127,X129)))))) )),
  inference(superposition,[],[f337,f340])).
fof(f31913,plain,(
  ( ! [X146,X152,X151,X149,X147,X150,X148] : (p(s(bool,happ(s(fun(X146,bool),happ(s(fun(X146,fun(X146,bool)),'=_0'),s(X146,happ(s(fun(X148,X146),'_dst_x1x0_2'(s(fun(X148,fun(X147,X146)),X149),s(X147,X151))),s(X148,X150))))),s(X146,X152)))) | s(X146,X152) != s(X146,happ(s(fun(X147,X146),happ(s(fun(X148,fun(X147,X146)),X149),s(X148,X150))),s(X147,X151)))) )),
  inference(superposition,[],[f338,f341])).
fof(f31911,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (~p(s(bool,happ(s(fun(X132,bool),happ(s(fun(X132,fun(X132,bool)),'=_0'),s(X132,happ(s(fun(X134,X132),'_dst_x1x0_2'(s(fun(X134,fun(X133,X132)),X135),s(X133,X137))),s(X134,X136))))),s(X132,X138)))) | s(X132,X138) = s(X132,happ(s(fun(X133,X132),happ(s(fun(X134,fun(X133,X132)),X135),s(X134,X136))),s(X133,X137)))) )),
  inference(superposition,[],[f337,f341])).
fof(f47320,plain,(
  ( ! [X1232,X1227,X1225,X1231,X1229,X1226,X1230,X1228] : (p(s(bool,happ(s(fun(X1225,bool),happ(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s('type.ind_type.recspace'(X1226),'const.ind_type.CONSTR_3'(s('type.num.num',X1228),s(X1226,X1230),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))))),s(X1225,sK5(happ(s(fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)),happ(s(fun(X1226,fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))),'_dst_x1x0_2'(s(fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)))),happ(s(fun('type.num.num',fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))))),X1227),s('type.num.num',X1228))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))),s(X1226,X1230))),s(fun('type.num.num',fun(X1225,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229)))),X1232,X1225))))) | ~p(s(bool,happ(s(fun(X1225,bool),happ(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s('type.ind_type.recspace'(X1226),'const.ind_type.CONSTR_3'(s('type.num.num',X1228),s(X1226,X1230),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))))),s(X1225,X1231)))) | p(s(bool,happ(s(fun(X1225,bool),X1232),s(X1225,sK6(happ(s(fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)),happ(s(fun(X1226,fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))),'_dst_x1x0_2'(s(fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)))),happ(s(fun('type.num.num',fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))))),X1227),s('type.num.num',X1228))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))),s(X1226,X1230))),s(fun('type.num.num',fun(X1225,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229)))),X1232,X1225)))))) )),
  inference(forward_demodulation,[],[f47024,f378])).
fof(f47024,plain,(
  ( ! [X1232,X1227,X1225,X1231,X1229,X1226,X1230,X1228] : (~p(s(bool,happ(s(fun(X1225,bool),happ(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s('type.ind_type.recspace'(X1226),'const.ind_type.CONSTR_3'(s('type.num.num',X1228),s(X1226,X1230),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))))),s(X1225,X1231)))) | p(s(bool,happ(s(fun(X1225,bool),X1232),s(X1225,sK6(happ(s(fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)),happ(s(fun(X1226,fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))),'_dst_x1x0_2'(s(fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)))),happ(s(fun('type.num.num',fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))))),X1227),s('type.num.num',X1228))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))),s(X1226,X1230))),s(fun('type.num.num',fun(X1225,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229)))),X1232,X1225))))) | p(s(bool,happ(s(fun(X1225,bool),happ(s(fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)),happ(s(fun(X1226,fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))),'_dst_x1x0_2'(s(fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)))),happ(s(fun('type.num.num',fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))))),X1227),s('type.num.num',X1228))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))),s(X1226,X1230))),s(fun('type.num.num',fun(X1225,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))))),s(X1225,sK5(happ(s(fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)),happ(s(fun(X1226,fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))),'_dst_x1x0_2'(s(fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool)))),happ(s(fun('type.num.num',fun(X1226,fun(fun('type.num.num','type.ind_type.recspace'(X1226)),fun(fun('type.num.num',fun(X1225,bool)),fun(X1225,bool))))),X1227),s('type.num.num',X1228))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229))),s(X1226,X1230))),s(fun('type.num.num',fun(X1225,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1226),fun(X1225,bool)),sK10(X1227,X1226,fun(X1225,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1226)),X1229)))),X1232,X1225)))))) )),
  inference(superposition,[],[f300,f378])).
fof(f33985,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (~p(s(bool,happ(s(fun(X145,bool),'_dst_x0x1_2'(s(fun(X147,bool),X148),s(fun(X145,X147),happ(s(fun(X146,fun(X145,X147)),X149),s(X146,X150))))),s(X145,X151)))) | p(s(bool,'|dollar|exists_1'(s(fun(X145,bool),happ(s(fun(X146,fun(X145,bool)),'_dst_x00x11_2'(s(fun(X147,bool),X148),s(fun(X146,fun(X145,X147)),X149))),s(X146,X150))))))) )),
  inference(superposition,[],[f3449,f358])).
fof(f33983,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (~p(s(bool,happ(s(fun(X131,bool),'_dst_x0x1_2'(s(fun(X133,bool),X134),s(fun(X131,X133),happ(s(fun(X132,fun(X131,X133)),X135),s(X132,X136))))),s(X131,X137)))) | p(s(bool,happ(s(fun(fun(X131,bool),bool),'?_1'),s(fun(X131,bool),happ(s(fun(X132,fun(X131,bool)),'_dst_x00x11_2'(s(fun(X133,bool),X134),s(fun(X132,fun(X131,X133)),X135))),s(X132,X136))))))) )),
  inference(superposition,[],[f319,f358])).
fof(f33978,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X96] : (~p(s(bool,happ(s(fun(X96,bool),'_dst_x0x1_2'(s(fun(X98,bool),X99),s(fun(X96,X98),happ(s(fun(X97,fun(X96,X98)),X100),s(X97,X101))))),s(X96,X102)))) | p(s(bool,happ(s(fun(X96,bool),X103),s(X96,sK6(happ(s(fun(X97,fun(X96,bool)),'_dst_x00x11_2'(s(fun(X98,bool),X99),s(fun(X97,fun(X96,X98)),X100))),s(X97,X101)),X103,X96))))) | p(s(bool,happ(s(fun(X96,bool),happ(s(fun(X97,fun(X96,bool)),'_dst_x00x11_2'(s(fun(X98,bool),X99),s(fun(X97,fun(X96,X98)),X100))),s(X97,X101))),s(X96,sK5(happ(s(fun(X97,fun(X96,bool)),'_dst_x00x11_2'(s(fun(X98,bool),X99),s(fun(X97,fun(X96,X98)),X100))),s(X97,X101)),X103,X96)))))) )),
  inference(superposition,[],[f300,f358])).
fof(f33926,plain,(
  ( ! [X118,X116,X114,X112,X117,X115,X113] : (~p(s(bool,happ(s(fun(fun(X112,bool),bool),'!_1'),s(fun(X112,bool),happ(s(fun(X115,fun(X112,bool)),'_dst_x00x11_2'(s(fun(X113,bool),X114),s(fun(X115,fun(X112,X113)),X116))),s(X115,X117)))))) | p(s(bool,happ(s(fun(X112,bool),'_dst_x0x1_2'(s(fun(X113,bool),X114),s(fun(X112,X113),happ(s(fun(X115,fun(X112,X113)),X116),s(X115,X117))))),s(X112,X118))))) )),
  inference(superposition,[],[f316,f358])).
fof(f36097,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X375] : (p(s(bool,happ(s(fun(X376,bool),happ(s(fun(X375,fun(X376,bool)),X377),s(X375,X378))),s(X376,happ(s(fun(X374,X376),X379),s(X374,X380)))))) | s(bool,'T_0') != s(bool,happ(s(fun(X374,bool),'_dst_x0x0x1_3'(s(fun(X375,fun(X376,bool)),X377),s(X375,X378),s(fun(X374,X376),X379))),s(X374,X380)))) )),
  inference(superposition,[],[f251,f359])).
fof(f36098,plain,(
  ( ! [X383,X385,X387,X382,X384,X386,X381] : (~p(s(bool,happ(s(fun(X383,bool),happ(s(fun(X382,fun(X383,bool)),X384),s(X382,X385))),s(X383,happ(s(fun(X381,X383),X386),s(X381,X387)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X381,bool),'_dst_x0x0x1_3'(s(fun(X382,fun(X383,bool)),X384),s(X382,X385),s(fun(X381,X383),X386))),s(X381,X387)))) )),
  inference(superposition,[],[f252,f359])).
fof(f36101,plain,(
  ( ! [X408,X405,X407,X403,X409,X404,X406,X402] : (p(s(bool,happ(s(fun(X404,bool),happ(s(fun(X403,fun(X404,bool)),X405),s(X403,X406))),s(X404,happ(s(fun(X402,X404),X407),s(X402,X408)))))) | p(s(bool,X409)) | s(bool,X409) = s(bool,happ(s(fun(X402,bool),'_dst_x0x0x1_3'(s(fun(X403,fun(X404,bool)),X405),s(X403,X406),s(fun(X402,X404),X407))),s(X402,X408)))) )),
  inference(superposition,[],[f312,f359])).
fof(f36103,plain,(
  ( ! [X420,X422,X418,X424,X421,X423,X419,X425] : (~p(s(bool,happ(s(fun(X420,bool),happ(s(fun(X419,fun(X420,bool)),X421),s(X419,X422))),s(X420,happ(s(fun(X418,X420),X423),s(X418,X424)))))) | ~p(s(bool,X425)) | s(bool,X425) = s(bool,happ(s(fun(X418,bool),'_dst_x0x0x1_3'(s(fun(X419,fun(X420,bool)),X421),s(X419,X422),s(fun(X418,X420),X423))),s(X418,X424)))) )),
  inference(superposition,[],[f315,f359])).
fof(f36104,plain,(
  ( ! [X428,X430,X426,X432,X429,X431,X427,X433] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X428,bool),happ(s(fun(X427,fun(X428,bool)),X429),s(X427,X430))),s(X428,happ(s(fun(X426,X428),X431),s(X426,X432))))))),s(bool,X433)))) | p(s(bool,happ(s(fun(X426,bool),'_dst_x0x0x1_3'(s(fun(X427,fun(X428,bool)),X429),s(X427,X430),s(fun(X426,X428),X431))),s(X426,X432))))) )),
  inference(superposition,[],[f320,f359])).
fof(f36107,plain,(
  ( ! [X453,X455,X451,X457,X452,X454,X450,X456] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X457))),s(bool,happ(s(fun(X452,bool),happ(s(fun(X451,fun(X452,bool)),X453),s(X451,X454))),s(X452,happ(s(fun(X450,X452),X455),s(X450,X456)))))))) | p(s(bool,happ(s(fun(X450,bool),'_dst_x0x0x1_3'(s(fun(X451,fun(X452,bool)),X453),s(X451,X454),s(fun(X450,X452),X455))),s(X450,X456))))) )),
  inference(superposition,[],[f321,f359])).
fof(f36108,plain,(
  ( ! [X461,X463,X459,X465,X460,X462,X458,X464] : (~p(s(bool,happ(s(fun(X460,bool),happ(s(fun(X459,fun(X460,bool)),X461),s(X459,X462))),s(X460,happ(s(fun(X458,X460),X463),s(X458,X464)))))) | ~p(s(bool,X465)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X458,bool),'_dst_x0x0x1_3'(s(fun(X459,fun(X460,bool)),X461),s(X459,X462),s(fun(X458,X460),X463))),s(X458,X464))))),s(bool,X465))))) )),
  inference(superposition,[],[f322,f359])).
fof(f36109,plain,(
  ( ! [X466,X472,X469,X471,X467,X473,X468,X470] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X468,bool),happ(s(fun(X467,fun(X468,bool)),X469),s(X467,X470))),s(X468,happ(s(fun(X466,X468),X471),s(X466,X472))))))),s(bool,X473)))) | p(s(bool,happ(s(fun(X466,bool),'_dst_x0x0x1_3'(s(fun(X467,fun(X468,bool)),X469),s(X467,X470),s(fun(X466,X468),X471))),s(X466,X472)))) | p(s(bool,X473))) )),
  inference(superposition,[],[f323,f359])).
fof(f36110,plain,(
  ( ! [X476,X478,X474,X480,X475,X477,X479,X481] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X481))),s(bool,happ(s(fun(X476,bool),happ(s(fun(X475,fun(X476,bool)),X477),s(X475,X478))),s(X476,happ(s(fun(X474,X476),X479),s(X474,X480)))))))) | p(s(bool,X481)) | p(s(bool,happ(s(fun(X474,bool),'_dst_x0x0x1_3'(s(fun(X475,fun(X476,bool)),X477),s(X475,X478),s(fun(X474,X476),X479))),s(X474,X480))))) )),
  inference(superposition,[],[f323,f359])).
fof(f36111,plain,(
  ( ! [X484,X486,X482,X488,X485,X487,X483,X489] : (~p(s(bool,happ(s(fun(X484,bool),happ(s(fun(X483,fun(X484,bool)),X485),s(X483,X486))),s(X484,happ(s(fun(X482,X484),X487),s(X482,X488)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X482,bool),'_dst_x0x0x1_3'(s(fun(X483,fun(X484,bool)),X485),s(X483,X486),s(fun(X482,X484),X487))),s(X482,X488))))),s(bool,X489))))) )),
  inference(superposition,[],[f324,f359])).
fof(f36112,plain,(
  ( ! [X492,X494,X490,X496,X493,X495,X491,X497] : (~p(s(bool,happ(s(fun(X492,bool),happ(s(fun(X491,fun(X492,bool)),X493),s(X491,X494))),s(X492,happ(s(fun(X490,X492),X495),s(X490,X496)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X497))),s(bool,happ(s(fun(X490,bool),'_dst_x0x0x1_3'(s(fun(X491,fun(X492,bool)),X493),s(X491,X494),s(fun(X490,X492),X495))),s(X490,X496))))))) )),
  inference(superposition,[],[f325,f359])).
fof(f36113,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X501,X503] : (~p(s(bool,happ(s(fun(X500,bool),happ(s(fun(X499,fun(X500,bool)),X501),s(X499,X502))),s(X500,happ(s(fun(X498,X500),X503),s(X498,X504)))))) | p(s(bool,X505)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X498,bool),'_dst_x0x0x1_3'(s(fun(X499,fun(X500,bool)),X501),s(X499,X502),s(fun(X498,X500),X503))),s(X498,X504))))),s(bool,X505))))) )),
  inference(superposition,[],[f326,f359])).
fof(f36114,plain,(
  ( ! [X509,X511,X507,X512,X508,X510,X506,X513] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X508,bool),happ(s(fun(X507,fun(X508,bool)),X509),s(X507,X510))),s(X508,happ(s(fun(X506,X508),X511),s(X506,X512))))))),s(bool,X513)))) | p(s(bool,happ(s(fun(X506,bool),'_dst_x0x0x1_3'(s(fun(X507,fun(X508,bool)),X509),s(X507,X510),s(fun(X506,X508),X511))),s(X506,X512))))) )),
  inference(superposition,[],[f327,f359])).
fof(f36116,plain,(
  ( ! [X528,X524,X526,X522,X529,X525,X527,X523] : (~p(s(bool,happ(s(fun(X524,bool),happ(s(fun(X523,fun(X524,bool)),X525),s(X523,X526))),s(X524,happ(s(fun(X522,X524),X527),s(X522,X528)))))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X529))),s(bool,happ(s(fun(X522,bool),'_dst_x0x0x1_3'(s(fun(X523,fun(X524,bool)),X525),s(X523,X526),s(fun(X522,X524),X527))),s(X522,X528))))))) )),
  inference(superposition,[],[f328,f359])).
fof(f36121,plain,(
  ( ! [X569,X565,X567,X563,X568,X564,X566,X562] : (~p(s(bool,happ(s(fun(X564,bool),happ(s(fun(X563,fun(X564,bool)),X565),s(X563,X566))),s(X564,happ(s(fun(X562,X564),X567),s(X562,X568)))))) | s(bool,X569) != s(bool,happ(s(fun(X562,bool),'_dst_x0x0x1_3'(s(fun(X563,fun(X564,bool)),X565),s(X563,X566),s(fun(X562,X564),X567))),s(X562,X568))) | s(bool,'T_0') = s(bool,X569)) )),
  inference(superposition,[],[f399,f359])).
fof(f36123,plain,(
  ( ! [X584,X580,X582,X578,X581,X583,X577,X579] : (p(s(bool,happ(s(fun(X579,bool),happ(s(fun(X578,fun(X579,bool)),X580),s(X578,X581))),s(X579,happ(s(fun(X577,X579),X582),s(X577,X583)))))) | s(bool,X584) = s(bool,happ(s(fun(X577,bool),'_dst_x0x0x1_3'(s(fun(X578,fun(X579,bool)),X580),s(X578,X581),s(fun(X577,X579),X582))),s(X577,X583))) | s(bool,'T_0') = s(bool,X584)) )),
  inference(superposition,[],[f454,f359])).
fof(f36126,plain,(
  ( ! [X606,X602,X609,X605,X607,X603,X608,X604] : (~p(s(bool,happ(s(fun(X604,bool),happ(s(fun(X603,fun(X604,bool)),X605),s(X603,X606))),s(X604,happ(s(fun(X602,X604),X607),s(X602,X608)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X609,bool),'_dst_x0_1'(s(bool,happ(s(fun(X602,bool),'_dst_x0x0x1_3'(s(fun(X603,fun(X604,bool)),X605),s(X603,X606),s(fun(X602,X604),X607))),s(X602,X608))))))))) )),
  inference(superposition,[],[f1169,f359])).
fof(f36139,plain,(
  ( ! [X707,X712,X714,X708,X710,X713,X709,X711] : (~p(s(bool,happ(s(fun(X709,bool),happ(s(fun(X708,fun(X709,bool)),X710),s(X708,X711))),s(X709,happ(s(fun(X707,X709),X712),s(X707,X713)))))) | p(s(bool,happ(s(fun(fun(X714,bool),bool),'?_1'),s(fun(X714,bool),'_dst_x0_1'(s(bool,happ(s(fun(X707,bool),'_dst_x0x0x1_3'(s(fun(X708,fun(X709,bool)),X710),s(X708,X711),s(fun(X707,X709),X712))),s(X707,X713))))))))) )),
  inference(superposition,[],[f4018,f359])).
fof(f36274,plain,(
  ( ! [X358,X364,X360,X362,X357,X359,X361,X363] : (~p(s(bool,happ(s(fun(X361,bool),'_dst_x0x0x1_3'(s(fun(X358,fun(X357,bool)),X359),s(X358,X360),s(fun(X361,X357),X362))),s(X361,X363)))) | p(s(bool,happ(s(fun(X357,bool),X364),s(X357,sK6(happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360)),X364,X357))))) | p(s(bool,happ(s(fun(X357,bool),happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360))),s(X357,sK5(happ(s(fun(X358,fun(X357,bool)),X359),s(X358,X360)),X364,X357)))))) )),
  inference(superposition,[],[f300,f359])).
fof(f36275,plain,(
  ( ! [X366,X368,X370,X365,X367,X369,X371] : (~p(s(bool,happ(s(fun(X369,bool),'_dst_x0x0x1_3'(s(fun(X366,fun(X365,bool)),X367),s(X366,X368),s(fun(X369,X365),X370))),s(X369,X371)))) | p(s(bool,happ(s(fun(fun(X365,bool),bool),'?_1'),s(fun(X365,bool),happ(s(fun(X366,fun(X365,bool)),X367),s(X366,X368))))))) )),
  inference(superposition,[],[f319,f359])).
fof(f36276,plain,(
  ( ! [X377,X372,X374,X376,X378,X373,X375] : (~p(s(bool,happ(s(fun(X376,bool),'_dst_x0x0x1_3'(s(fun(X373,fun(X372,bool)),X374),s(X373,X375),s(fun(X376,X372),X377))),s(X376,X378)))) | p(s(bool,'|dollar|exists_1'(s(fun(X372,bool),happ(s(fun(X373,fun(X372,bool)),X374),s(X373,X375))))))) )),
  inference(superposition,[],[f3449,f359])).
fof(f36278,plain,(
  ( ! [X389,X391,X387,X388,X390,X386,X392] : (p(s(bool,happ(s(fun(X390,bool),'_dst_x0x0x1_3'(s(fun(X387,fun(X386,bool)),X388),s(X387,X389),s(fun(X390,X386),X391))),s(X390,X392)))) | s(bool,'T_0') != s(bool,happ(s(fun(X386,bool),happ(s(fun(X387,fun(X386,bool)),X388),s(X387,X389))),s(X386,happ(s(fun(X390,X386),X391),s(X390,X392)))))) )),
  inference(superposition,[],[f251,f359])).
fof(f36279,plain,(
  ( ! [X397,X399,X393,X395,X396,X398,X394] : (~p(s(bool,happ(s(fun(X397,bool),'_dst_x0x0x1_3'(s(fun(X394,fun(X393,bool)),X395),s(X394,X396),s(fun(X397,X393),X398))),s(X397,X399)))) | s(bool,'T_0') = s(bool,happ(s(fun(X393,bool),happ(s(fun(X394,fun(X393,bool)),X395),s(X394,X396))),s(X393,happ(s(fun(X397,X393),X398),s(X397,X399)))))) )),
  inference(superposition,[],[f252,f359])).
fof(f36282,plain,(
  ( ! [X414,X420,X416,X418,X415,X421,X417,X419] : (p(s(bool,happ(s(fun(X418,bool),'_dst_x0x0x1_3'(s(fun(X415,fun(X414,bool)),X416),s(X415,X417),s(fun(X418,X414),X419))),s(X418,X420)))) | p(s(bool,X421)) | s(bool,X421) = s(bool,happ(s(fun(X414,bool),happ(s(fun(X415,fun(X414,bool)),X416),s(X415,X417))),s(X414,happ(s(fun(X418,X414),X419),s(X418,X420)))))) )),
  inference(superposition,[],[f312,f359])).
fof(f36284,plain,(
  ( ! [X430,X436,X432,X434,X431,X437,X433,X435] : (~p(s(bool,happ(s(fun(X434,bool),'_dst_x0x0x1_3'(s(fun(X431,fun(X430,bool)),X432),s(X431,X433),s(fun(X434,X430),X435))),s(X434,X436)))) | ~p(s(bool,X437)) | s(bool,X437) = s(bool,happ(s(fun(X430,bool),happ(s(fun(X431,fun(X430,bool)),X432),s(X431,X433))),s(X430,happ(s(fun(X434,X430),X435),s(X434,X436)))))) )),
  inference(superposition,[],[f315,f359])).
fof(f36285,plain,(
  ( ! [X445,X441,X443,X438,X444,X440,X442,X439] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X442,bool),'_dst_x0x0x1_3'(s(fun(X439,fun(X438,bool)),X440),s(X439,X441),s(fun(X442,X438),X443))),s(X442,X444))))),s(bool,X445)))) | p(s(bool,happ(s(fun(X438,bool),happ(s(fun(X439,fun(X438,bool)),X440),s(X439,X441))),s(X438,happ(s(fun(X442,X438),X443),s(X442,X444))))))) )),
  inference(superposition,[],[f320,f359])).
fof(f36288,plain,(
  ( ! [X466,X463,X469,X465,X467,X462,X468,X464] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X469))),s(bool,happ(s(fun(X466,bool),'_dst_x0x0x1_3'(s(fun(X463,fun(X462,bool)),X464),s(X463,X465),s(fun(X466,X462),X467))),s(X466,X468)))))) | p(s(bool,happ(s(fun(X462,bool),happ(s(fun(X463,fun(X462,bool)),X464),s(X463,X465))),s(X462,happ(s(fun(X466,X462),X467),s(X466,X468))))))) )),
  inference(superposition,[],[f321,f359])).
fof(f36289,plain,(
  ( ! [X476,X472,X474,X471,X475,X477,X473,X470] : (~p(s(bool,happ(s(fun(X474,bool),'_dst_x0x0x1_3'(s(fun(X471,fun(X470,bool)),X472),s(X471,X473),s(fun(X474,X470),X475))),s(X474,X476)))) | ~p(s(bool,X477)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(X470,bool),happ(s(fun(X471,fun(X470,bool)),X472),s(X471,X473))),s(X470,happ(s(fun(X474,X470),X475),s(X474,X476))))))),s(bool,X477))))) )),
  inference(superposition,[],[f322,f359])).
fof(f36290,plain,(
  ( ! [X478,X484,X480,X482,X479,X485,X481,X483] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X482,bool),'_dst_x0x0x1_3'(s(fun(X479,fun(X478,bool)),X480),s(X479,X481),s(fun(X482,X478),X483))),s(X482,X484))))),s(bool,X485)))) | p(s(bool,happ(s(fun(X478,bool),happ(s(fun(X479,fun(X478,bool)),X480),s(X479,X481))),s(X478,happ(s(fun(X482,X478),X483),s(X482,X484)))))) | p(s(bool,X485))) )),
  inference(superposition,[],[f323,f359])).
fof(f36291,plain,(
  ( ! [X486,X492,X488,X490,X487,X493,X489,X491] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X493))),s(bool,happ(s(fun(X490,bool),'_dst_x0x0x1_3'(s(fun(X487,fun(X486,bool)),X488),s(X487,X489),s(fun(X490,X486),X491))),s(X490,X492)))))) | p(s(bool,X493)) | p(s(bool,happ(s(fun(X486,bool),happ(s(fun(X487,fun(X486,bool)),X488),s(X487,X489))),s(X486,happ(s(fun(X490,X486),X491),s(X490,X492))))))) )),
  inference(superposition,[],[f323,f359])).
fof(f36292,plain,(
  ( ! [X499,X494,X500,X496,X498,X495,X501,X497] : (~p(s(bool,happ(s(fun(X498,bool),'_dst_x0x0x1_3'(s(fun(X495,fun(X494,bool)),X496),s(X495,X497),s(fun(X498,X494),X499))),s(X498,X500)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(X494,bool),happ(s(fun(X495,fun(X494,bool)),X496),s(X495,X497))),s(X494,happ(s(fun(X498,X494),X499),s(X498,X500))))))),s(bool,X501))))) )),
  inference(superposition,[],[f324,f359])).
fof(f36293,plain,(
  ( ! [X509,X505,X507,X502,X508,X504,X506,X503] : (~p(s(bool,happ(s(fun(X506,bool),'_dst_x0x0x1_3'(s(fun(X503,fun(X502,bool)),X504),s(X503,X505),s(fun(X506,X502),X507))),s(X506,X508)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X509))),s(bool,happ(s(fun(X502,bool),happ(s(fun(X503,fun(X502,bool)),X504),s(X503,X505))),s(X502,happ(s(fun(X506,X502),X507),s(X506,X508))))))))) )),
  inference(superposition,[],[f325,f359])).
fof(f36294,plain,(
  ( ! [X511,X516,X512,X514,X510,X517,X513,X515] : (~p(s(bool,happ(s(fun(X514,bool),'_dst_x0x0x1_3'(s(fun(X511,fun(X510,bool)),X512),s(X511,X513),s(fun(X514,X510),X515))),s(X514,X516)))) | p(s(bool,X517)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X510,bool),happ(s(fun(X511,fun(X510,bool)),X512),s(X511,X513))),s(X510,happ(s(fun(X514,X510),X515),s(X514,X516))))))),s(bool,X517))))) )),
  inference(superposition,[],[f326,f359])).
fof(f36295,plain,(
  ( ! [X524,X520,X522,X518,X525,X521,X523,X519] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X522,bool),'_dst_x0x0x1_3'(s(fun(X519,fun(X518,bool)),X520),s(X519,X521),s(fun(X522,X518),X523))),s(X522,X524))))),s(bool,X525)))) | p(s(bool,happ(s(fun(X518,bool),happ(s(fun(X519,fun(X518,bool)),X520),s(X519,X521))),s(X518,happ(s(fun(X522,X518),X523),s(X522,X524))))))) )),
  inference(superposition,[],[f327,f359])).
fof(f36297,plain,(
  ( ! [X540,X536,X538,X534,X541,X537,X539,X535] : (~p(s(bool,happ(s(fun(X538,bool),'_dst_x0x0x1_3'(s(fun(X535,fun(X534,bool)),X536),s(X535,X537),s(fun(X538,X534),X539))),s(X538,X540)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X541))),s(bool,happ(s(fun(X534,bool),happ(s(fun(X535,fun(X534,bool)),X536),s(X535,X537))),s(X534,happ(s(fun(X538,X534),X539),s(X538,X540))))))))) )),
  inference(superposition,[],[f328,f359])).
fof(f36302,plain,(
  ( ! [X575,X580,X576,X578,X574,X581,X577,X579] : (~p(s(bool,happ(s(fun(X578,bool),'_dst_x0x0x1_3'(s(fun(X575,fun(X574,bool)),X576),s(X575,X577),s(fun(X578,X574),X579))),s(X578,X580)))) | s(bool,X581) != s(bool,happ(s(fun(X574,bool),happ(s(fun(X575,fun(X574,bool)),X576),s(X575,X577))),s(X574,happ(s(fun(X578,X574),X579),s(X578,X580))))) | s(bool,'T_0') = s(bool,X581)) )),
  inference(superposition,[],[f399,f359])).
fof(f36304,plain,(
  ( ! [X596,X592,X594,X590,X593,X595,X589,X591] : (p(s(bool,happ(s(fun(X593,bool),'_dst_x0x0x1_3'(s(fun(X590,fun(X589,bool)),X591),s(X590,X592),s(fun(X593,X589),X594))),s(X593,X595)))) | s(bool,X596) = s(bool,happ(s(fun(X589,bool),happ(s(fun(X590,fun(X589,bool)),X591),s(X590,X592))),s(X589,happ(s(fun(X593,X589),X594),s(X593,X595))))) | s(bool,'T_0') = s(bool,X596)) )),
  inference(superposition,[],[f454,f359])).
fof(f36307,plain,(
  ( ! [X621,X617,X619,X615,X620,X616,X618,X614] : (~p(s(bool,happ(s(fun(X618,bool),'_dst_x0x0x1_3'(s(fun(X615,fun(X614,bool)),X616),s(X615,X617),s(fun(X618,X614),X619))),s(X618,X620)))) | p(s(bool,'|dollar|exists_1'(s(fun(X621,bool),'_dst_x0_1'(s(bool,happ(s(fun(X614,bool),happ(s(fun(X615,fun(X614,bool)),X616),s(X615,X617))),s(X614,happ(s(fun(X618,X614),X619),s(X618,X620))))))))))) )),
  inference(superposition,[],[f1169,f359])).
fof(f36320,plain,(
  ( ! [X724,X726,X720,X722,X725,X721,X723,X719] : (~p(s(bool,happ(s(fun(X723,bool),'_dst_x0x0x1_3'(s(fun(X720,fun(X719,bool)),X721),s(X720,X722),s(fun(X723,X719),X724))),s(X723,X725)))) | p(s(bool,happ(s(fun(fun(X726,bool),bool),'?_1'),s(fun(X726,bool),'_dst_x0_1'(s(bool,happ(s(fun(X719,bool),happ(s(fun(X720,fun(X719,bool)),X721),s(X720,X722))),s(X719,happ(s(fun(X723,X719),X724),s(X723,X725))))))))))) )),
  inference(superposition,[],[f4018,f359])).
fof(f43284,plain,(
  ( ! [X167,X173,X171,X169,X166,X172,X170,X168] : (~p(s(bool,happ(s(fun(X170,bool),'_dst_x0x0x1_3'(s(fun(X167,fun(X166,bool)),X168),s(X167,X169),s(fun(X170,X166),X171))),s(X170,X172)))) | p(s(bool,happ(s(fun(fun(X173,bool),bool),'!_1'),s(fun(X173,bool),'_dst_x0_1'(s(bool,happ(s(fun(X166,bool),happ(s(fun(X167,fun(X166,bool)),X168),s(X167,X169))),s(X166,happ(s(fun(X170,X166),X171),s(X170,X172))))))))))) )),
  inference(superposition,[],[f5307,f359])).
fof(f43289,plain,(
  ( ! [X198,X204,X202,X200,X199,X205,X203,X201] : (~p(s(bool,happ(s(fun(X200,bool),happ(s(fun(X199,fun(X200,bool)),X201),s(X199,X202))),s(X200,happ(s(fun(X198,X200),X203),s(X198,X204)))))) | p(s(bool,happ(s(fun(fun(X205,bool),bool),'!_1'),s(fun(X205,bool),'_dst_x0_1'(s(bool,happ(s(fun(X198,bool),'_dst_x0x0x1_3'(s(fun(X199,fun(X200,bool)),X201),s(X199,X202),s(fun(X198,X200),X203))),s(X198,X204))))))))) )),
  inference(superposition,[],[f5307,f359])).
fof(f40227,plain,(
  ( ! [X47,X45,X52,X50,X48,X46,X51,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(X48,bool),'_dst_x0x1x1_3'(s(fun(X46,fun(X45,bool)),X47),s(fun(X48,X46),X49),s(fun(X48,X45),X51))),s(X48,X50))) | s(bool,X52) = s(bool,happ(s(fun(X45,bool),happ(s(fun(X46,fun(X45,bool)),X47),s(X46,happ(s(fun(X48,X46),X49),s(X48,X50))))),s(X45,happ(s(fun(X48,X45),X51),s(X48,X50))))) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f360,f396])).
fof(f40228,plain,(
  ( ! [X59,X57,X54,X60,X58,X56,X55,X53] : (s(bool,X60) = s(bool,happ(s(fun(X56,bool),'_dst_x0x1x1_3'(s(fun(X54,fun(X53,bool)),X55),s(fun(X56,X54),X57),s(fun(X56,X53),X59))),s(X56,X58))) | s(bool,'T_0') = s(bool,X60) | s(bool,'T_0') = s(bool,happ(s(fun(X53,bool),happ(s(fun(X54,fun(X53,bool)),X55),s(X54,happ(s(fun(X56,X54),X57),s(X56,X58))))),s(X53,happ(s(fun(X56,X53),X59),s(X56,X58)))))) )),
  inference(superposition,[],[f360,f396])).
fof(f40299,plain,(
  ( ! [X478,X484,X480,X482,X477,X479,X481,X483] : (~p(s(bool,happ(s(fun(X480,bool),'_dst_x0x1x1_3'(s(fun(X478,fun(X477,bool)),X479),s(fun(X480,X478),X481),s(fun(X480,X477),X483))),s(X480,X482)))) | p(s(bool,happ(s(fun(X477,bool),X484),s(X477,sK6(happ(s(fun(X478,fun(X477,bool)),X479),s(X478,happ(s(fun(X480,X478),X481),s(X480,X482)))),X484,X477))))) | p(s(bool,happ(s(fun(X477,bool),happ(s(fun(X478,fun(X477,bool)),X479),s(X478,happ(s(fun(X480,X478),X481),s(X480,X482))))),s(X477,sK5(happ(s(fun(X478,fun(X477,bool)),X479),s(X478,happ(s(fun(X480,X478),X481),s(X480,X482)))),X484,X477)))))) )),
  inference(superposition,[],[f300,f360])).
fof(f40300,plain,(
  ( ! [X486,X488,X490,X485,X487,X489,X491] : (~p(s(bool,happ(s(fun(X488,bool),'_dst_x0x1x1_3'(s(fun(X486,fun(X485,bool)),X487),s(fun(X488,X486),X489),s(fun(X488,X485),X491))),s(X488,X490)))) | p(s(bool,happ(s(fun(fun(X485,bool),bool),'?_1'),s(fun(X485,bool),happ(s(fun(X486,fun(X485,bool)),X487),s(X486,happ(s(fun(X488,X486),X489),s(X488,X490))))))))) )),
  inference(superposition,[],[f319,f360])).
fof(f40301,plain,(
  ( ! [X492,X494,X496,X498,X493,X495,X497] : (~p(s(bool,happ(s(fun(X495,bool),'_dst_x0x1x1_3'(s(fun(X493,fun(X492,bool)),X494),s(fun(X495,X493),X496),s(fun(X495,X492),X498))),s(X495,X497)))) | p(s(bool,'|dollar|exists_1'(s(fun(X492,bool),happ(s(fun(X493,fun(X492,bool)),X494),s(X493,happ(s(fun(X495,X493),X496),s(X495,X497))))))))) )),
  inference(superposition,[],[f3449,f360])).
fof(f40664,plain,(
  ( ! [X720,X722,X718,X721,X723,X717,X719] : (s(bool,'T_0') != s(bool,happ(s(fun(X720,bool),'_dst_x0x1x1_3'(s(fun(X718,fun(X717,bool)),X719),s(fun(X720,X718),X721),s(fun(X720,X717),X723))),s(X720,X722))) | s(bool,'T_0') = s(bool,happ(s(fun(X717,bool),happ(s(fun(X718,fun(X717,bool)),X719),s(X718,happ(s(fun(X720,X718),X721),s(X720,X722))))),s(X717,happ(s(fun(X720,X717),X723),s(X720,X722)))))) )),
  inference(forward_demodulation,[],[f40330,f289])).
fof(f40330,plain,(
  ( ! [X724,X720,X722,X718,X725,X721,X723,X717,X719] : (s(bool,'const.bool.DATATYPE_1'(s(X724,X725))) != s(bool,happ(s(fun(X720,bool),'_dst_x0x1x1_3'(s(fun(X718,fun(X717,bool)),X719),s(fun(X720,X718),X721),s(fun(X720,X717),X723))),s(X720,X722))) | s(bool,'T_0') = s(bool,happ(s(fun(X717,bool),happ(s(fun(X718,fun(X717,bool)),X719),s(X718,happ(s(fun(X720,X718),X721),s(X720,X722))))),s(X717,happ(s(fun(X720,X717),X723),s(X720,X722)))))) )),
  inference(superposition,[],[f554,f360])).
fof(f40611,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X5,bool),'_dst_x0x1x1_3'(s(fun(X1,fun(X0,bool)),'_dst_x0x1_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))))),s(fun(X5,X1),X6),s(fun(X5,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X1,X0)),X3),s(X2,X4),s(fun(X5,X1),X6))))),s(X5,X7))))) )),
  inference(backward_demodulation,[],[f40041,f35738])).
fof(f36078,plain,(
  ( ! [X198,X196,X204,X202,X200,X199,X197,X203,X201] : (p(s(bool,happ(s(fun(X196,bool),happ(s(fun(X196,fun(X196,bool)),'=_0'),s(X196,happ(s(fun(X199,X196),happ(s(fun(X198,fun(X199,X196)),X200),s(X198,X201))),s(X199,happ(s(fun(X197,X199),X202),s(X197,X203))))))),s(X196,X204)))) | s(X196,X204) != s(X196,happ(s(fun(X197,X196),'_dst_x0x0x1_3'(s(fun(X198,fun(X199,X196)),X200),s(X198,X201),s(fun(X197,X199),X202))),s(X197,X203)))) )),
  inference(superposition,[],[f338,f359])).
fof(f36076,plain,(
  ( ! [X185,X182,X180,X178,X186,X184,X183,X181,X179] : (~p(s(bool,happ(s(fun(X178,bool),happ(s(fun(X178,fun(X178,bool)),'=_0'),s(X178,happ(s(fun(X181,X178),happ(s(fun(X180,fun(X181,X178)),X182),s(X180,X183))),s(X181,happ(s(fun(X179,X181),X184),s(X179,X185))))))),s(X178,X186)))) | s(X178,X186) = s(X178,happ(s(fun(X179,X178),'_dst_x0x0x1_3'(s(fun(X180,fun(X181,X178)),X182),s(X180,X183),s(fun(X179,X181),X184))),s(X179,X185)))) )),
  inference(superposition,[],[f337,f359])).
fof(f36256,plain,(
  ( ! [X212,X210,X208,X216,X215,X213,X211,X209,X214] : (p(s(bool,happ(s(fun(X208,bool),happ(s(fun(X208,fun(X208,bool)),'=_0'),s(X208,happ(s(fun(X213,X208),'_dst_x0x0x1_3'(s(fun(X210,fun(X209,X208)),X211),s(X210,X212),s(fun(X213,X209),X214))),s(X213,X215))))),s(X208,X216)))) | s(X208,X216) != s(X208,happ(s(fun(X209,X208),happ(s(fun(X210,fun(X209,X208)),X211),s(X210,X212))),s(X209,happ(s(fun(X213,X209),X214),s(X213,X215)))))) )),
  inference(superposition,[],[f338,f359])).
fof(f36254,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X197,X195,X193] : (~p(s(bool,happ(s(fun(X190,bool),happ(s(fun(X190,fun(X190,bool)),'=_0'),s(X190,happ(s(fun(X195,X190),'_dst_x0x0x1_3'(s(fun(X192,fun(X191,X190)),X193),s(X192,X194),s(fun(X195,X191),X196))),s(X195,X197))))),s(X190,X198)))) | s(X190,X198) = s(X190,happ(s(fun(X191,X190),happ(s(fun(X192,fun(X191,X190)),X193),s(X192,X194))),s(X191,happ(s(fun(X195,X191),X196),s(X195,X197)))))) )),
  inference(superposition,[],[f337,f359])).
fof(f36368,plain,(
  ( ! [X1118,X1122,X1120,X1124,X1119,X1117,X1123,X1121,X1125] : (~p(s(bool,happ(s(fun(fun(X1117,bool),bool),'!_1'),s(fun(X1117,bool),happ(s(fun(X1122,fun(X1117,bool)),'_dst_x0x0x1_3'(s(fun(X1119,fun(X1118,fun(X1117,bool))),X1120),s(X1119,X1121),s(fun(X1122,X1118),X1123))),s(X1122,X1124)))))) | p(s(bool,happ(s(fun(X1117,bool),happ(s(fun(X1118,fun(X1117,bool)),happ(s(fun(X1119,fun(X1118,fun(X1117,bool))),X1120),s(X1119,X1121))),s(X1118,happ(s(fun(X1122,X1118),X1123),s(X1122,X1124))))),s(X1117,X1125))))) )),
  inference(superposition,[],[f316,f359])).
fof(f36192,plain,(
  ( ! [X1151,X1149,X1155,X1153,X1150,X1148,X1154,X1152,X1156] : (~p(s(bool,happ(s(fun(X1148,bool),happ(s(fun(X1151,fun(X1148,bool)),happ(s(fun(X1150,fun(X1151,fun(X1148,bool))),X1152),s(X1150,X1153))),s(X1151,happ(s(fun(X1149,X1151),X1154),s(X1149,X1155))))),s(X1148,X1156)))) | p(s(bool,'|dollar|exists_1'(s(fun(X1148,bool),happ(s(fun(X1149,fun(X1148,bool)),'_dst_x0x0x1_3'(s(fun(X1150,fun(X1151,fun(X1148,bool))),X1152),s(X1150,X1153),s(fun(X1149,X1151),X1154))),s(X1149,X1155))))))) )),
  inference(superposition,[],[f3449,f359])).
fof(f36190,plain,(
  ( ! [X1137,X1130,X1134,X1132,X1138,X1136,X1131,X1135,X1133] : (~p(s(bool,happ(s(fun(X1130,bool),happ(s(fun(X1133,fun(X1130,bool)),happ(s(fun(X1132,fun(X1133,fun(X1130,bool))),X1134),s(X1132,X1135))),s(X1133,happ(s(fun(X1131,X1133),X1136),s(X1131,X1137))))),s(X1130,X1138)))) | p(s(bool,happ(s(fun(fun(X1130,bool),bool),'?_1'),s(fun(X1130,bool),happ(s(fun(X1131,fun(X1130,bool)),'_dst_x0x0x1_3'(s(fun(X1132,fun(X1133,fun(X1130,bool))),X1134),s(X1132,X1135),s(fun(X1131,X1133),X1136))),s(X1131,X1137))))))) )),
  inference(superposition,[],[f319,f359])).
fof(f36185,plain,(
  ( ! [X1087,X1085,X1091,X1089,X1093,X1086,X1090,X1088,X1094,X1092] : (~p(s(bool,happ(s(fun(X1085,bool),happ(s(fun(X1088,fun(X1085,bool)),happ(s(fun(X1087,fun(X1088,fun(X1085,bool))),X1089),s(X1087,X1090))),s(X1088,happ(s(fun(X1086,X1088),X1091),s(X1086,X1092))))),s(X1085,X1093)))) | p(s(bool,happ(s(fun(X1085,bool),X1094),s(X1085,sK6(happ(s(fun(X1086,fun(X1085,bool)),'_dst_x0x0x1_3'(s(fun(X1087,fun(X1088,fun(X1085,bool))),X1089),s(X1087,X1090),s(fun(X1086,X1088),X1091))),s(X1086,X1092)),X1094,X1085))))) | p(s(bool,happ(s(fun(X1085,bool),happ(s(fun(X1086,fun(X1085,bool)),'_dst_x0x0x1_3'(s(fun(X1087,fun(X1088,fun(X1085,bool))),X1089),s(X1087,X1090),s(fun(X1086,X1088),X1091))),s(X1086,X1092))),s(X1085,sK5(happ(s(fun(X1086,fun(X1085,bool)),'_dst_x0x0x1_3'(s(fun(X1087,fun(X1088,fun(X1085,bool))),X1089),s(X1087,X1090),s(fun(X1086,X1088),X1091))),s(X1086,X1092)),X1094,X1085)))))) )),
  inference(superposition,[],[f300,f359])).
fof(f37563,plain,(
  ( ! [X210,X208,X206,X204,X202,X209,X207,X205,X203] : (~p(s(bool,happ(s(fun(fun(X202,bool),bool),'!_1'),s(fun(X202,bool),'_dst_x0x0x1_3'(s(fun(X204,fun(X205,bool)),X206),s(X204,happ(s(fun(X203,X204),X207),s(X203,X209))),s(fun(X202,X205),X208)))))) | p(s(bool,happ(s(fun(X202,bool),happ(s(fun(X203,fun(X202,bool)),'_dst_x00x10x01_3'(s(fun(X204,fun(X205,bool)),X206),s(fun(X203,X204),X207),s(fun(X202,X205),X208))),s(X203,X209))),s(X202,X210))))) )),
  inference(superposition,[],[f316,f362])).
fof(f37502,plain,(
  ( ! [X222,X229,X227,X225,X223,X230,X228,X226,X224] : (~p(s(bool,happ(s(fun(X222,bool),happ(s(fun(X226,fun(X222,bool)),'_dst_x00x10x01_3'(s(fun(X223,fun(X224,bool)),X225),s(fun(X226,X223),X227),s(fun(X222,X224),X229))),s(X226,X228))),s(X222,X230)))) | p(s(bool,'|dollar|exists_1'(s(fun(X222,bool),'_dst_x0x0x1_3'(s(fun(X223,fun(X224,bool)),X225),s(X223,happ(s(fun(X226,X223),X227),s(X226,X228))),s(fun(X222,X224),X229))))))) )),
  inference(superposition,[],[f3449,f362])).
fof(f37500,plain,(
  ( ! [X212,X210,X208,X206,X204,X211,X209,X207,X205] : (~p(s(bool,happ(s(fun(X204,bool),happ(s(fun(X208,fun(X204,bool)),'_dst_x00x10x01_3'(s(fun(X205,fun(X206,bool)),X207),s(fun(X208,X205),X209),s(fun(X204,X206),X211))),s(X208,X210))),s(X204,X212)))) | p(s(bool,happ(s(fun(fun(X204,bool),bool),'?_1'),s(fun(X204,bool),'_dst_x0x0x1_3'(s(fun(X205,fun(X206,bool)),X207),s(X205,happ(s(fun(X208,X205),X209),s(X208,X210))),s(fun(X204,X206),X211))))))) )),
  inference(superposition,[],[f319,f362])).
fof(f37495,plain,(
  ( ! [X167,X165,X163,X161,X159,X166,X164,X162,X160,X168] : (~p(s(bool,happ(s(fun(X159,bool),happ(s(fun(X163,fun(X159,bool)),'_dst_x00x10x01_3'(s(fun(X160,fun(X161,bool)),X162),s(fun(X163,X160),X164),s(fun(X159,X161),X166))),s(X163,X165))),s(X159,X167)))) | p(s(bool,happ(s(fun(X159,bool),X168),s(X159,sK6('_dst_x0x0x1_3'(s(fun(X160,fun(X161,bool)),X162),s(X160,happ(s(fun(X163,X160),X164),s(X163,X165))),s(fun(X159,X161),X166)),X168,X159))))) | p(s(bool,happ(s(fun(X159,bool),'_dst_x0x0x1_3'(s(fun(X160,fun(X161,bool)),X162),s(X160,happ(s(fun(X163,X160),X164),s(X163,X165))),s(fun(X159,X161),X166))),s(X159,sK5('_dst_x0x0x1_3'(s(fun(X160,fun(X161,bool)),X162),s(X160,happ(s(fun(X163,X160),X164),s(X163,X165))),s(fun(X159,X161),X166)),X168,X159)))))) )),
  inference(superposition,[],[f300,f362])).
fof(f41805,plain,(
  ( ! [X300,X302,X304,X306,X301,X303,X299,X305,X307] : (~p(s(bool,happ(s(fun(fun(X299,bool),bool),'!_1'),s(fun(X299,bool),'_dst_x0x1x1_3'(s(fun(X301,fun(X302,bool)),X303),s(fun(X299,X301),X304),s(fun(X299,X302),happ(s(fun(X300,fun(X299,X302)),X305),s(X300,X306)))))))) | p(s(bool,happ(s(fun(X299,bool),happ(s(fun(X300,fun(X299,bool)),'_dst_x00x01x11_3'(s(fun(X301,fun(X302,bool)),X303),s(fun(X299,X301),X304),s(fun(X300,fun(X299,X302)),X305))),s(X300,X306))),s(X299,X307))))) )),
  inference(superposition,[],[f316,f364])).
fof(f41727,plain,(
  ( ! [X292,X288,X290,X285,X287,X289,X291,X284,X286] : (~p(s(bool,happ(s(fun(X284,bool),happ(s(fun(X289,fun(X284,bool)),'_dst_x00x01x11_3'(s(fun(X285,fun(X286,bool)),X287),s(fun(X284,X285),X288),s(fun(X289,fun(X284,X286)),X290))),s(X289,X291))),s(X284,X292)))) | p(s(bool,'|dollar|exists_1'(s(fun(X284,bool),'_dst_x0x1x1_3'(s(fun(X285,fun(X286,bool)),X287),s(fun(X284,X285),X288),s(fun(X284,X286),happ(s(fun(X289,fun(X284,X286)),X290),s(X289,X291))))))))) )),
  inference(superposition,[],[f3449,f364])).
fof(f41725,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X266,X272,X274] : (~p(s(bool,happ(s(fun(X266,bool),happ(s(fun(X271,fun(X266,bool)),'_dst_x00x01x11_3'(s(fun(X267,fun(X268,bool)),X269),s(fun(X266,X267),X270),s(fun(X271,fun(X266,X268)),X272))),s(X271,X273))),s(X266,X274)))) | p(s(bool,happ(s(fun(fun(X266,bool),bool),'?_1'),s(fun(X266,bool),'_dst_x0x1x1_3'(s(fun(X267,fun(X268,bool)),X269),s(fun(X266,X267),X270),s(fun(X266,X268),happ(s(fun(X271,fun(X266,X268)),X272),s(X271,X273))))))))) )),
  inference(superposition,[],[f319,f364])).
fof(f41720,plain,(
  ( ! [X222,X229,X227,X225,X223,X221,X230,X228,X226,X224] : (~p(s(bool,happ(s(fun(X221,bool),happ(s(fun(X226,fun(X221,bool)),'_dst_x00x01x11_3'(s(fun(X222,fun(X223,bool)),X224),s(fun(X221,X222),X225),s(fun(X226,fun(X221,X223)),X227))),s(X226,X228))),s(X221,X229)))) | p(s(bool,happ(s(fun(X221,bool),X230),s(X221,sK6('_dst_x0x1x1_3'(s(fun(X222,fun(X223,bool)),X224),s(fun(X221,X222),X225),s(fun(X221,X223),happ(s(fun(X226,fun(X221,X223)),X227),s(X226,X228)))),X230,X221))))) | p(s(bool,happ(s(fun(X221,bool),'_dst_x0x1x1_3'(s(fun(X222,fun(X223,bool)),X224),s(fun(X221,X222),X225),s(fun(X221,X223),happ(s(fun(X226,fun(X221,X223)),X227),s(X226,X228))))),s(X221,sK5('_dst_x0x1x1_3'(s(fun(X222,fun(X223,bool)),X224),s(fun(X221,X222),X225),s(fun(X221,X223),happ(s(fun(X226,fun(X221,X223)),X227),s(X226,X228)))),X230,X221)))))) )),
  inference(superposition,[],[f300,f364])).
fof(f43814,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X270,X264,X266] : (p(s(bool,happ(s(fun(X261,bool),happ(s(fun(X265,fun(X261,bool)),'_dst_x00x11x11_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X265,fun(X261,X262)),X266),s(fun(X265,fun(X261,X263)),X268))),s(X265,X267))),s(X261,sK5('_dst_x0x1x1_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X261,X262),happ(s(fun(X265,fun(X261,X262)),X266),s(X265,X267))),s(fun(X261,X263),happ(s(fun(X265,fun(X261,X263)),X268),s(X265,X267)))),X270,X261))))) | ~p(s(bool,happ(s(fun(X261,bool),happ(s(fun(X265,fun(X261,bool)),'_dst_x00x11x11_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X265,fun(X261,X262)),X266),s(fun(X265,fun(X261,X263)),X268))),s(X265,X267))),s(X261,X269)))) | p(s(bool,happ(s(fun(X261,bool),X270),s(X261,sK6('_dst_x0x1x1_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X261,X262),happ(s(fun(X265,fun(X261,X262)),X266),s(X265,X267))),s(fun(X261,X263),happ(s(fun(X265,fun(X261,X263)),X268),s(X265,X267)))),X270,X261)))))) )),
  inference(forward_demodulation,[],[f43738,f365])).
fof(f43738,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X270,X264,X266] : (~p(s(bool,happ(s(fun(X261,bool),happ(s(fun(X265,fun(X261,bool)),'_dst_x00x11x11_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X265,fun(X261,X262)),X266),s(fun(X265,fun(X261,X263)),X268))),s(X265,X267))),s(X261,X269)))) | p(s(bool,happ(s(fun(X261,bool),X270),s(X261,sK6('_dst_x0x1x1_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X261,X262),happ(s(fun(X265,fun(X261,X262)),X266),s(X265,X267))),s(fun(X261,X263),happ(s(fun(X265,fun(X261,X263)),X268),s(X265,X267)))),X270,X261))))) | p(s(bool,happ(s(fun(X261,bool),'_dst_x0x1x1_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X261,X262),happ(s(fun(X265,fun(X261,X262)),X266),s(X265,X267))),s(fun(X261,X263),happ(s(fun(X265,fun(X261,X263)),X268),s(X265,X267))))),s(X261,sK5('_dst_x0x1x1_3'(s(fun(X262,fun(X263,bool)),X264),s(fun(X261,X262),happ(s(fun(X265,fun(X261,X262)),X266),s(X265,X267))),s(fun(X261,X263),happ(s(fun(X265,fun(X261,X263)),X268),s(X265,X267)))),X270,X261)))))) )),
  inference(superposition,[],[f300,f365])).
fof(f36373,plain,(
  ( ! [X1168,X1163,X1161,X1167,X1165,X1162,X1160,X1166,X1164] : (~p(s(bool,happ(s(fun(X1160,bool),happ(s(fun(X1165,fun(X1160,bool)),'_dst_x0x0x1_3'(s(fun(X1162,fun(X1161,fun(X1160,bool))),X1163),s(X1162,X1164),s(fun(X1165,X1161),X1166))),s(X1165,X1167))),s(X1160,X1168)))) | p(s(bool,'|dollar|exists_1'(s(fun(X1160,bool),happ(s(fun(X1161,fun(X1160,bool)),happ(s(fun(X1162,fun(X1161,fun(X1160,bool))),X1163),s(X1162,X1164))),s(X1161,happ(s(fun(X1165,X1161),X1166),s(X1165,X1167))))))))) )),
  inference(superposition,[],[f3449,f359])).
fof(f36371,plain,(
  ( ! [X1149,X1143,X1146,X1144,X1150,X1148,X1142,X1147,X1145] : (~p(s(bool,happ(s(fun(X1142,bool),happ(s(fun(X1147,fun(X1142,bool)),'_dst_x0x0x1_3'(s(fun(X1144,fun(X1143,fun(X1142,bool))),X1145),s(X1144,X1146),s(fun(X1147,X1143),X1148))),s(X1147,X1149))),s(X1142,X1150)))) | p(s(bool,happ(s(fun(fun(X1142,bool),bool),'?_1'),s(fun(X1142,bool),happ(s(fun(X1143,fun(X1142,bool)),happ(s(fun(X1144,fun(X1143,fun(X1142,bool))),X1145),s(X1144,X1146))),s(X1143,happ(s(fun(X1147,X1143),X1148),s(X1147,X1149))))))))) )),
  inference(superposition,[],[f319,f359])).
fof(f36366,plain,(
  ( ! [X1106,X1104,X1099,X1097,X1103,X1101,X1105,X1098,X1102,X1100] : (~p(s(bool,happ(s(fun(X1097,bool),happ(s(fun(X1102,fun(X1097,bool)),'_dst_x0x0x1_3'(s(fun(X1099,fun(X1098,fun(X1097,bool))),X1100),s(X1099,X1101),s(fun(X1102,X1098),X1103))),s(X1102,X1104))),s(X1097,X1105)))) | p(s(bool,happ(s(fun(X1097,bool),X1106),s(X1097,sK6(happ(s(fun(X1098,fun(X1097,bool)),happ(s(fun(X1099,fun(X1098,fun(X1097,bool))),X1100),s(X1099,X1101))),s(X1098,happ(s(fun(X1102,X1098),X1103),s(X1102,X1104)))),X1106,X1097))))) | p(s(bool,happ(s(fun(X1097,bool),happ(s(fun(X1098,fun(X1097,bool)),happ(s(fun(X1099,fun(X1098,fun(X1097,bool))),X1100),s(X1099,X1101))),s(X1098,happ(s(fun(X1102,X1098),X1103),s(X1102,X1104))))),s(X1097,sK5(happ(s(fun(X1098,fun(X1097,bool)),happ(s(fun(X1099,fun(X1098,fun(X1097,bool))),X1100),s(X1099,X1101))),s(X1098,happ(s(fun(X1102,X1098),X1103),s(X1102,X1104)))),X1106,X1097)))))) )),
  inference(superposition,[],[f300,f359])).
fof(f36187,plain,(
  ( ! [X1112,X1106,X1110,X1108,X1113,X1107,X1105,X1111,X1109] : (~p(s(bool,happ(s(fun(fun(X1105,bool),bool),'!_1'),s(fun(X1105,bool),happ(s(fun(X1108,fun(X1105,bool)),happ(s(fun(X1107,fun(X1108,fun(X1105,bool))),X1109),s(X1107,X1110))),s(X1108,happ(s(fun(X1106,X1108),X1111),s(X1106,X1112)))))))) | p(s(bool,happ(s(fun(X1105,bool),happ(s(fun(X1106,fun(X1105,bool)),'_dst_x0x0x1_3'(s(fun(X1107,fun(X1108,fun(X1105,bool))),X1109),s(X1107,X1110),s(fun(X1106,X1108),X1111))),s(X1106,X1112))),s(X1105,X1113))))) )),
  inference(superposition,[],[f316,f359])).
fof(f40700,plain,(
  ( ! [X1300,X1302,X1305,X1307,X1309,X1301,X1303,X1304,X1306,X1308] : (p(s(bool,happ(s(fun(X1300,bool),happ(s(fun(X1304,fun(X1300,bool)),'_dst_x0x1x1_3'(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(fun(X1304,X1302),X1305),s(fun(X1304,X1301),X1307))),s(X1304,X1306))),s(X1300,sK5(happ(s(fun(X1301,fun(X1300,bool)),happ(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(X1302,happ(s(fun(X1304,X1302),X1305),s(X1304,X1306))))),s(X1301,happ(s(fun(X1304,X1301),X1307),s(X1304,X1306)))),X1309,X1300))))) | ~p(s(bool,happ(s(fun(X1300,bool),happ(s(fun(X1304,fun(X1300,bool)),'_dst_x0x1x1_3'(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(fun(X1304,X1302),X1305),s(fun(X1304,X1301),X1307))),s(X1304,X1306))),s(X1300,X1308)))) | p(s(bool,happ(s(fun(X1300,bool),X1309),s(X1300,sK6(happ(s(fun(X1301,fun(X1300,bool)),happ(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(X1302,happ(s(fun(X1304,X1302),X1305),s(X1304,X1306))))),s(X1301,happ(s(fun(X1304,X1301),X1307),s(X1304,X1306)))),X1309,X1300)))))) )),
  inference(forward_demodulation,[],[f40397,f360])).
fof(f40397,plain,(
  ( ! [X1300,X1302,X1305,X1307,X1309,X1301,X1303,X1304,X1306,X1308] : (~p(s(bool,happ(s(fun(X1300,bool),happ(s(fun(X1304,fun(X1300,bool)),'_dst_x0x1x1_3'(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(fun(X1304,X1302),X1305),s(fun(X1304,X1301),X1307))),s(X1304,X1306))),s(X1300,X1308)))) | p(s(bool,happ(s(fun(X1300,bool),X1309),s(X1300,sK6(happ(s(fun(X1301,fun(X1300,bool)),happ(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(X1302,happ(s(fun(X1304,X1302),X1305),s(X1304,X1306))))),s(X1301,happ(s(fun(X1304,X1301),X1307),s(X1304,X1306)))),X1309,X1300))))) | p(s(bool,happ(s(fun(X1300,bool),happ(s(fun(X1301,fun(X1300,bool)),happ(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(X1302,happ(s(fun(X1304,X1302),X1305),s(X1304,X1306))))),s(X1301,happ(s(fun(X1304,X1301),X1307),s(X1304,X1306))))),s(X1300,sK5(happ(s(fun(X1301,fun(X1300,bool)),happ(s(fun(X1302,fun(X1301,fun(X1300,bool))),X1303),s(X1302,happ(s(fun(X1304,X1302),X1305),s(X1304,X1306))))),s(X1301,happ(s(fun(X1304,X1301),X1307),s(X1304,X1306)))),X1309,X1300)))))) )),
  inference(superposition,[],[f300,f360])).
fof(f38280,plain,(
  ( ! [X239,X237,X235,X233,X240,X238,X236,X234,X232] : (~p(s(bool,happ(s(fun(fun(X232,bool),bool),'!_1'),s(fun(X232,bool),'_dst_x0x0x1_3'(s(fun(X234,fun(X235,bool)),X236),s(X234,X237),s(fun(X232,X235),happ(s(fun(X233,fun(X232,X235)),X238),s(X233,X239)))))))) | p(s(bool,happ(s(fun(X232,bool),happ(s(fun(X233,fun(X232,bool)),'_dst_x00x00x11_3'(s(fun(X234,fun(X235,bool)),X236),s(X234,X237),s(fun(X233,fun(X232,X235)),X238))),s(X233,X239))),s(X232,X240))))) )),
  inference(superposition,[],[f316,f363])).
fof(f38215,plain,(
  ( ! [X263,X269,X271,X265,X267,X268,X270,X264,X266] : (~p(s(bool,happ(s(fun(X263,bool),happ(s(fun(X268,fun(X263,bool)),'_dst_x00x00x11_3'(s(fun(X264,fun(X265,bool)),X266),s(X264,X267),s(fun(X268,fun(X263,X265)),X269))),s(X268,X270))),s(X263,X271)))) | p(s(bool,'|dollar|exists_1'(s(fun(X263,bool),'_dst_x0x0x1_3'(s(fun(X264,fun(X265,bool)),X266),s(X264,X267),s(fun(X263,X265),happ(s(fun(X268,fun(X263,X265)),X269),s(X268,X270))))))))) )),
  inference(superposition,[],[f3449,f363])).
fof(f38213,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247,X245] : (~p(s(bool,happ(s(fun(X245,bool),happ(s(fun(X250,fun(X245,bool)),'_dst_x00x00x11_3'(s(fun(X246,fun(X247,bool)),X248),s(X246,X249),s(fun(X250,fun(X245,X247)),X251))),s(X250,X252))),s(X245,X253)))) | p(s(bool,happ(s(fun(fun(X245,bool),bool),'?_1'),s(fun(X245,bool),'_dst_x0x0x1_3'(s(fun(X246,fun(X247,bool)),X248),s(X246,X249),s(fun(X245,X247),happ(s(fun(X250,fun(X245,X247)),X251),s(X250,X252))))))))) )),
  inference(superposition,[],[f319,f363])).
fof(f38208,plain,(
  ( ! [X208,X206,X204,X202,X200,X209,X207,X205,X203,X201] : (~p(s(bool,happ(s(fun(X200,bool),happ(s(fun(X205,fun(X200,bool)),'_dst_x00x00x11_3'(s(fun(X201,fun(X202,bool)),X203),s(X201,X204),s(fun(X205,fun(X200,X202)),X206))),s(X205,X207))),s(X200,X208)))) | p(s(bool,happ(s(fun(X200,bool),X209),s(X200,sK6('_dst_x0x0x1_3'(s(fun(X201,fun(X202,bool)),X203),s(X201,X204),s(fun(X200,X202),happ(s(fun(X205,fun(X200,X202)),X206),s(X205,X207)))),X209,X200))))) | p(s(bool,happ(s(fun(X200,bool),'_dst_x0x0x1_3'(s(fun(X201,fun(X202,bool)),X203),s(X201,X204),s(fun(X200,X202),happ(s(fun(X205,fun(X200,X202)),X206),s(X205,X207))))),s(X200,sK5('_dst_x0x0x1_3'(s(fun(X201,fun(X202,bool)),X203),s(X201,X204),s(fun(X200,X202),happ(s(fun(X205,fun(X200,X202)),X206),s(X205,X207)))),X209,X200)))))) )),
  inference(superposition,[],[f300,f363])).
fof(f37568,plain,(
  ( ! [X253,X251,X249,X246,X252,X250,X248,X247,X245] : (~p(s(bool,happ(s(fun(X245,bool),'_dst_x0x0x1_3'(s(fun(X247,fun(X248,bool)),X249),s(X247,happ(s(fun(X246,X247),X250),s(X246,X252))),s(fun(X245,X248),X251))),s(X245,X253)))) | p(s(bool,'|dollar|exists_1'(s(fun(X245,bool),happ(s(fun(X246,fun(X245,bool)),'_dst_x00x10x01_3'(s(fun(X247,fun(X248,bool)),X249),s(fun(X246,X247),X250),s(fun(X245,X248),X251))),s(X246,X252))))))) )),
  inference(superposition,[],[f3449,f362])).
fof(f37566,plain,(
  ( ! [X231,X229,X227,X235,X233,X230,X228,X234,X232] : (~p(s(bool,happ(s(fun(X227,bool),'_dst_x0x0x1_3'(s(fun(X229,fun(X230,bool)),X231),s(X229,happ(s(fun(X228,X229),X232),s(X228,X234))),s(fun(X227,X230),X233))),s(X227,X235)))) | p(s(bool,happ(s(fun(fun(X227,bool),bool),'?_1'),s(fun(X227,bool),happ(s(fun(X228,fun(X227,bool)),'_dst_x00x10x01_3'(s(fun(X229,fun(X230,bool)),X231),s(fun(X228,X229),X232),s(fun(X227,X230),X233))),s(X228,X234))))))) )),
  inference(superposition,[],[f319,f362])).
fof(f37561,plain,(
  ( ! [X191,X189,X187,X185,X182,X190,X188,X186,X184,X183] : (~p(s(bool,happ(s(fun(X182,bool),'_dst_x0x0x1_3'(s(fun(X184,fun(X185,bool)),X186),s(X184,happ(s(fun(X183,X184),X187),s(X183,X189))),s(fun(X182,X185),X188))),s(X182,X190)))) | p(s(bool,happ(s(fun(X182,bool),X191),s(X182,sK6(happ(s(fun(X183,fun(X182,bool)),'_dst_x00x10x01_3'(s(fun(X184,fun(X185,bool)),X186),s(fun(X183,X184),X187),s(fun(X182,X185),X188))),s(X183,X189)),X191,X182))))) | p(s(bool,happ(s(fun(X182,bool),happ(s(fun(X183,fun(X182,bool)),'_dst_x00x10x01_3'(s(fun(X184,fun(X185,bool)),X186),s(fun(X183,X184),X187),s(fun(X182,X185),X188))),s(X183,X189))),s(X182,sK5(happ(s(fun(X183,fun(X182,bool)),'_dst_x00x10x01_3'(s(fun(X184,fun(X185,bool)),X186),s(fun(X183,X184),X187),s(fun(X182,X185),X188))),s(X183,X189)),X191,X182)))))) )),
  inference(superposition,[],[f300,f362])).
fof(f37497,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181,X179] : (~p(s(bool,happ(s(fun(fun(X179,bool),bool),'!_1'),s(fun(X179,bool),happ(s(fun(X183,fun(X179,bool)),'_dst_x00x10x01_3'(s(fun(X180,fun(X181,bool)),X182),s(fun(X183,X180),X184),s(fun(X179,X181),X186))),s(X183,X185)))))) | p(s(bool,happ(s(fun(X179,bool),'_dst_x0x0x1_3'(s(fun(X180,fun(X181,bool)),X182),s(X180,happ(s(fun(X183,X180),X184),s(X183,X185))),s(fun(X179,X181),X186))),s(X179,X187))))) )),
  inference(superposition,[],[f316,f362])).
fof(f38285,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X283,X276,X278] : (~p(s(bool,happ(s(fun(X275,bool),'_dst_x0x0x1_3'(s(fun(X277,fun(X278,bool)),X279),s(X277,X280),s(fun(X275,X278),happ(s(fun(X276,fun(X275,X278)),X281),s(X276,X282))))),s(X275,X283)))) | p(s(bool,'|dollar|exists_1'(s(fun(X275,bool),happ(s(fun(X276,fun(X275,bool)),'_dst_x00x00x11_3'(s(fun(X277,fun(X278,bool)),X279),s(X277,X280),s(fun(X276,fun(X275,X278)),X281))),s(X276,X282))))))) )),
  inference(superposition,[],[f3449,f363])).
fof(f38283,plain,(
  ( ! [X261,X263,X257,X259,X265,X260,X262,X258,X264] : (~p(s(bool,happ(s(fun(X257,bool),'_dst_x0x0x1_3'(s(fun(X259,fun(X260,bool)),X261),s(X259,X262),s(fun(X257,X260),happ(s(fun(X258,fun(X257,X260)),X263),s(X258,X264))))),s(X257,X265)))) | p(s(bool,happ(s(fun(fun(X257,bool),bool),'?_1'),s(fun(X257,bool),happ(s(fun(X258,fun(X257,bool)),'_dst_x00x00x11_3'(s(fun(X259,fun(X260,bool)),X261),s(X259,X262),s(fun(X258,fun(X257,X260)),X263))),s(X258,X264))))))) )),
  inference(superposition,[],[f319,f363])).
fof(f38278,plain,(
  ( ! [X212,X218,X216,X220,X215,X213,X219,X217,X221,X214] : (~p(s(bool,happ(s(fun(X212,bool),'_dst_x0x0x1_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,X217),s(fun(X212,X215),happ(s(fun(X213,fun(X212,X215)),X218),s(X213,X219))))),s(X212,X220)))) | p(s(bool,happ(s(fun(X212,bool),X221),s(X212,sK6(happ(s(fun(X213,fun(X212,bool)),'_dst_x00x00x11_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,X217),s(fun(X213,fun(X212,X215)),X218))),s(X213,X219)),X221,X212))))) | p(s(bool,happ(s(fun(X212,bool),happ(s(fun(X213,fun(X212,bool)),'_dst_x00x00x11_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,X217),s(fun(X213,fun(X212,X215)),X218))),s(X213,X219))),s(X212,sK5(happ(s(fun(X213,fun(X212,bool)),'_dst_x00x00x11_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,X217),s(fun(X213,fun(X212,X215)),X218))),s(X213,X219)),X221,X212)))))) )),
  inference(superposition,[],[f300,f363])).
fof(f38210,plain,(
  ( ! [X222,X220,X227,X225,X223,X221,X228,X226,X224] : (~p(s(bool,happ(s(fun(fun(X220,bool),bool),'!_1'),s(fun(X220,bool),happ(s(fun(X225,fun(X220,bool)),'_dst_x00x00x11_3'(s(fun(X221,fun(X222,bool)),X223),s(X221,X224),s(fun(X225,fun(X220,X222)),X226))),s(X225,X227)))))) | p(s(bool,happ(s(fun(X220,bool),'_dst_x0x0x1_3'(s(fun(X221,fun(X222,bool)),X223),s(X221,X224),s(fun(X220,X222),happ(s(fun(X225,fun(X220,X222)),X226),s(X225,X227))))),s(X220,X228))))) )),
  inference(superposition,[],[f316,f363])).
fof(f41810,plain,(
  ( ! [X350,X344,X346,X343,X349,X345,X347,X342,X348] : (~p(s(bool,happ(s(fun(X342,bool),'_dst_x0x1x1_3'(s(fun(X344,fun(X345,bool)),X346),s(fun(X342,X344),X347),s(fun(X342,X345),happ(s(fun(X343,fun(X342,X345)),X348),s(X343,X349))))),s(X342,X350)))) | p(s(bool,'|dollar|exists_1'(s(fun(X342,bool),happ(s(fun(X343,fun(X342,bool)),'_dst_x00x01x11_3'(s(fun(X344,fun(X345,bool)),X346),s(fun(X342,X344),X347),s(fun(X343,fun(X342,X345)),X348))),s(X343,X349))))))) )),
  inference(superposition,[],[f3449,f364])).
fof(f41808,plain,(
  ( ! [X325,X327,X329,X331,X324,X326,X332,X328,X330] : (~p(s(bool,happ(s(fun(X324,bool),'_dst_x0x1x1_3'(s(fun(X326,fun(X327,bool)),X328),s(fun(X324,X326),X329),s(fun(X324,X327),happ(s(fun(X325,fun(X324,X327)),X330),s(X325,X331))))),s(X324,X332)))) | p(s(bool,happ(s(fun(fun(X324,bool),bool),'?_1'),s(fun(X324,bool),happ(s(fun(X325,fun(X324,bool)),'_dst_x00x01x11_3'(s(fun(X326,fun(X327,bool)),X328),s(fun(X324,X326),X329),s(fun(X325,fun(X324,X327)),X330))),s(X325,X331))))))) )),
  inference(superposition,[],[f319,f364])).
fof(f41803,plain,(
  ( ! [X280,X282,X288,X279,X285,X287,X281,X283,X284,X286] : (~p(s(bool,happ(s(fun(X279,bool),'_dst_x0x1x1_3'(s(fun(X281,fun(X282,bool)),X283),s(fun(X279,X281),X284),s(fun(X279,X282),happ(s(fun(X280,fun(X279,X282)),X285),s(X280,X286))))),s(X279,X287)))) | p(s(bool,happ(s(fun(X279,bool),X288),s(X279,sK6(happ(s(fun(X280,fun(X279,bool)),'_dst_x00x01x11_3'(s(fun(X281,fun(X282,bool)),X283),s(fun(X279,X281),X284),s(fun(X280,fun(X279,X282)),X285))),s(X280,X286)),X288,X279))))) | p(s(bool,happ(s(fun(X279,bool),happ(s(fun(X280,fun(X279,bool)),'_dst_x00x01x11_3'(s(fun(X281,fun(X282,bool)),X283),s(fun(X279,X281),X284),s(fun(X280,fun(X279,X282)),X285))),s(X280,X286))),s(X279,sK5(happ(s(fun(X280,fun(X279,bool)),'_dst_x00x01x11_3'(s(fun(X281,fun(X282,bool)),X283),s(fun(X279,X281),X284),s(fun(X280,fun(X279,X282)),X285))),s(X280,X286)),X288,X279)))))) )),
  inference(superposition,[],[f300,f364])).
fof(f41722,plain,(
  ( ! [X243,X241,X249,X246,X244,X242,X248,X247,X245] : (~p(s(bool,happ(s(fun(fun(X241,bool),bool),'!_1'),s(fun(X241,bool),happ(s(fun(X246,fun(X241,bool)),'_dst_x00x01x11_3'(s(fun(X242,fun(X243,bool)),X244),s(fun(X241,X242),X245),s(fun(X246,fun(X241,X243)),X247))),s(X246,X248)))))) | p(s(bool,happ(s(fun(X241,bool),'_dst_x0x1x1_3'(s(fun(X242,fun(X243,bool)),X244),s(fun(X241,X242),X245),s(fun(X241,X243),happ(s(fun(X246,fun(X241,X243)),X247),s(X246,X248))))),s(X241,X249))))) )),
  inference(superposition,[],[f316,f364])).
fof(f43811,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X2,bool),'_dst_x0x1x1_3'(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X2,fun(X0,X1)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,fun(X0,X3)),X6),s(fun(X2,fun(X0,X4)),X7))),s(fun(X2,fun(X0,X1)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,fun(X0,X3)),X6),s(fun(X2,fun(X0,X4)),X7))))),s(X2,X8))))) )),
  inference(backward_demodulation,[],[f43670,f43383])).
fof(f45244,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(X3,bool),'_dst_x0x1x1_3'(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x110x101_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,fun(X0,X4)),X7),s(fun(X3,fun(X1,X5)),X8))),s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x110x101_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,fun(X0,X4)),X7),s(fun(X3,fun(X1,X5)),X8))))),s(X3,X9))))) )),
  inference(backward_demodulation,[],[f45107,f44792])).
fof(f30670,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (p(s(bool,happ(s(fun(X39,bool),sK5(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool))),s(X39,happ(s(fun(X40,X39),X41),s(X40,X42)))))) | ~p(s(bool,happ(s(fun(X39,bool),X43),s(X39,happ(s(fun(X40,X39),X41),s(X40,X42)))))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),X44),s(fun(X39,bool),sK6(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool))))))) )),
  inference(forward_demodulation,[],[f30669,f333])).
fof(f30669,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (p(s(bool,happ(s(fun(fun(X39,bool),bool),'_dstsel_0_x0_1'(s(X39,happ(s(fun(X40,X39),X41),s(X40,X42))))),s(fun(X39,bool),sK5(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool)))))) | ~p(s(bool,happ(s(fun(X39,bool),X43),s(X39,happ(s(fun(X40,X39),X41),s(X40,X42)))))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),X44),s(fun(X39,bool),sK6(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool))))))) )),
  inference(forward_demodulation,[],[f30668,f339])).
fof(f30668,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (~p(s(bool,happ(s(fun(X39,bool),X43),s(X39,happ(s(fun(X40,X39),X41),s(X40,X42)))))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),X44),s(fun(X39,bool),sK6(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool)))))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42))),s(fun(X39,bool),sK5(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool))))))) )),
  inference(forward_demodulation,[],[f30616,f333])).
fof(f30616,plain,(
  ( ! [X39,X43,X41,X44,X42,X40] : (~p(s(bool,happ(s(fun(fun(X39,bool),bool),'_dstsel_0_x0_1'(s(X39,happ(s(fun(X40,X39),X41),s(X40,X42))))),s(fun(X39,bool),X43)))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),X44),s(fun(X39,bool),sK6(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool)))))) | p(s(bool,happ(s(fun(fun(X39,bool),bool),happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42))),s(fun(X39,bool),sK5(happ(s(fun(X40,fun(fun(X39,bool),bool)),'_dstsel_1_x10_1'(s(fun(X40,X39),X41))),s(X40,X42)),X44,fun(X39,bool))))))) )),
  inference(superposition,[],[f300,f339])).
fof(f30676,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,happ(s(fun(fun(fun(X56,bool),bool),bool),'!_1'),s(fun(fun(X56,bool),bool),'_dstsel_0_x0_1'(s(X56,happ(s(fun(X57,X56),X58),s(X57,X59)))))))) | ~p(s(bool,happ(s(fun(X56,bool),sK8(happ(s(fun(X57,fun(fun(X56,bool),bool)),'_dstsel_1_x10_1'(s(fun(X57,X56),X58))),s(X57,X59)),fun(X56,bool))),s(X56,happ(s(fun(X57,X56),X58),s(X57,X59))))))) )),
  inference(forward_demodulation,[],[f30675,f339])).
fof(f30675,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,happ(s(fun(X56,bool),sK8(happ(s(fun(X57,fun(fun(X56,bool),bool)),'_dstsel_1_x10_1'(s(fun(X57,X56),X58))),s(X57,X59)),fun(X56,bool))),s(X56,happ(s(fun(X57,X56),X58),s(X57,X59)))))) | p(s(bool,happ(s(fun(fun(fun(X56,bool),bool),bool),'!_1'),s(fun(fun(X56,bool),bool),happ(s(fun(X57,fun(fun(X56,bool),bool)),'_dstsel_1_x10_1'(s(fun(X57,X56),X58))),s(X57,X59))))))) )),
  inference(forward_demodulation,[],[f30619,f333])).
fof(f30619,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,happ(s(fun(fun(X56,bool),bool),'_dstsel_0_x0_1'(s(X56,happ(s(fun(X57,X56),X58),s(X57,X59))))),s(fun(X56,bool),sK8(happ(s(fun(X57,fun(fun(X56,bool),bool)),'_dstsel_1_x10_1'(s(fun(X57,X56),X58))),s(X57,X59)),fun(X56,bool)))))) | p(s(bool,happ(s(fun(fun(fun(X56,bool),bool),bool),'!_1'),s(fun(fun(X56,bool),bool),happ(s(fun(X57,fun(fun(X56,bool),bool)),'_dstsel_1_x10_1'(s(fun(X57,X56),X58))),s(X57,X59))))))) )),
  inference(superposition,[],[f317,f339])).
fof(f30678,plain,(
  ( ! [X61,X62,X60,X63] : (p(s(bool,happ(s(fun(X60,bool),sK9(happ(s(fun(X61,fun(fun(X60,bool),bool)),'_dstsel_1_x10_1'(s(fun(X61,X60),X62))),s(X61,X63)),fun(X60,bool))),s(X60,happ(s(fun(X61,X60),X62),s(X61,X63)))))) | ~p(s(bool,happ(s(fun(fun(fun(X60,bool),bool),bool),'?_1'),s(fun(fun(X60,bool),bool),'_dstsel_0_x0_1'(s(X60,happ(s(fun(X61,X60),X62),s(X61,X63))))))))) )),
  inference(forward_demodulation,[],[f30677,f333])).
fof(f30677,plain,(
  ( ! [X61,X62,X60,X63] : (p(s(bool,happ(s(fun(fun(X60,bool),bool),'_dstsel_0_x0_1'(s(X60,happ(s(fun(X61,X60),X62),s(X61,X63))))),s(fun(X60,bool),sK9(happ(s(fun(X61,fun(fun(X60,bool),bool)),'_dstsel_1_x10_1'(s(fun(X61,X60),X62))),s(X61,X63)),fun(X60,bool)))))) | ~p(s(bool,happ(s(fun(fun(fun(X60,bool),bool),bool),'?_1'),s(fun(fun(X60,bool),bool),'_dstsel_0_x0_1'(s(X60,happ(s(fun(X61,X60),X62),s(X61,X63))))))))) )),
  inference(forward_demodulation,[],[f30620,f339])).
fof(f30620,plain,(
  ( ! [X61,X62,X60,X63] : (~p(s(bool,happ(s(fun(fun(fun(X60,bool),bool),bool),'?_1'),s(fun(fun(X60,bool),bool),'_dstsel_0_x0_1'(s(X60,happ(s(fun(X61,X60),X62),s(X61,X63)))))))) | p(s(bool,happ(s(fun(fun(X60,bool),bool),happ(s(fun(X61,fun(fun(X60,bool),bool)),'_dstsel_1_x10_1'(s(fun(X61,X60),X62))),s(X61,X63))),s(fun(X60,bool),sK9(happ(s(fun(X61,fun(fun(X60,bool),bool)),'_dstsel_1_x10_1'(s(fun(X61,X60),X62))),s(X61,X63)),fun(X60,bool))))))) )),
  inference(superposition,[],[f318,f339])).
fof(f17939,plain,(
  ( ! [X171,X169,X172,X170,X168] : (~p(s(bool,happ(s(fun(X169,bool),X170),s(X169,happ(s(fun(X168,X169),X171),s(X168,X172)))))) | p(s(bool,happ(s(fun(fun(X168,bool),bool),'?_1'),s(fun(X168,bool),'_dst_x0x1_2'(s(fun(X169,bool),X170),s(fun(X168,X169),X171))))))) )),
  inference(superposition,[],[f319,f340])).
fof(f17940,plain,(
  ( ! [X177,X175,X173,X176,X174] : (~p(s(bool,happ(s(fun(X174,bool),X175),s(X174,happ(s(fun(X173,X174),X176),s(X173,X177)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X173,bool),'_dst_x0x1_2'(s(fun(X174,bool),X175),s(fun(X173,X174),X176))))))) )),
  inference(superposition,[],[f3449,f340])).
fof(f18795,plain,(
  ( ! [X94,X92,X90,X93,X91,X89] : (~p(s(bool,happ(s(fun(X90,bool),X91),s(X90,happ(s(fun(X89,X90),X92),s(X89,X93)))))) | p(s(bool,happ(s(fun(X89,bool),X94),s(X89,sK6('_dst_x0x1_2'(s(fun(X90,bool),X91),s(fun(X89,X90),X92)),X94,X89))))) | p(s(bool,happ(s(fun(X89,bool),'_dst_x0x1_2'(s(fun(X90,bool),X91),s(fun(X89,X90),X92))),s(X89,sK5('_dst_x0x1_2'(s(fun(X90,bool),X91),s(fun(X89,X90),X92)),X94,X89)))))) )),
  inference(superposition,[],[f300,f340])).
fof(f17938,plain,(
  ( ! [X167,X165,X163,X166,X164] : (~p(s(bool,happ(s(fun(X164,bool),X165),s(X164,happ(s(fun(X163,X164),X166),s(X163,sK4(X167,'_dst_x0x1_2'(s(fun(X164,bool),X165),s(fun(X163,X164),X166)),X163))))))) | p(s(bool,'|dollar|exists_1'(s(fun(X163,bool),'_dst_x0x1_2'(s(fun(X164,bool),X165),s(fun(X163,X164),X166))))))) )),
  inference(superposition,[],[f299,f340])).
fof(f17941,plain,(
  ( ! [X180,X178,X181,X179] : (~p(s(bool,happ(s(fun(X179,bool),X180),s(X179,happ(s(fun(X178,X179),X181),s(X178,sK8('_dst_x0x1_2'(s(fun(X179,bool),X180),s(fun(X178,X179),X181)),X178))))))) | p(s(bool,happ(s(fun(fun(X178,bool),bool),'!_1'),s(fun(X178,bool),'_dst_x0x1_2'(s(fun(X179,bool),X180),s(fun(X178,X179),X181))))))) )),
  inference(superposition,[],[f317,f340])).
fof(f17933,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (p(s(bool,happ(s(fun(X129,bool),happ(s(fun(X129,fun(X129,bool)),'=_0'),s(X129,X135))),s(X129,happ(s(fun(X131,X129),X132),s(X131,happ(s(fun(X130,X131),X133),s(X130,X134)))))))) | s(X129,X135) != s(X129,happ(s(fun(X130,X129),'_dst_x0x1_2'(s(fun(X131,X129),X132),s(fun(X130,X131),X133))),s(X130,X134)))) )),
  inference(superposition,[],[f338,f340])).
fof(f17931,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (~p(s(bool,happ(s(fun(X115,bool),happ(s(fun(X115,fun(X115,bool)),'=_0'),s(X115,X121))),s(X115,happ(s(fun(X117,X115),X118),s(X117,happ(s(fun(X116,X117),X119),s(X116,X120)))))))) | s(X115,X121) = s(X115,happ(s(fun(X116,X115),'_dst_x0x1_2'(s(fun(X117,X115),X118),s(fun(X116,X117),X119))),s(X116,X120)))) )),
  inference(superposition,[],[f337,f340])).
fof(f30673,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (p(s(bool,happ(s(fun(X45,bool),sK6(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))),s(X45,happ(s(fun(X46,X45),X47),s(X46,X48)))))) | ~p(s(bool,happ(s(fun(X45,bool),sK5(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))),s(X45,happ(s(fun(X46,X45),X47),s(X46,X48)))))) | ~p(s(bool,happ(s(fun(fun(X45,bool),bool),X49),s(fun(X45,bool),X50))))) )),
  inference(forward_demodulation,[],[f30672,f333])).
fof(f30672,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (p(s(bool,happ(s(fun(fun(X45,bool),bool),'_dstsel_0_x0_1'(s(X45,happ(s(fun(X46,X45),X47),s(X46,X48))))),s(fun(X45,bool),sK6(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool)))))) | ~p(s(bool,happ(s(fun(X45,bool),sK5(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))),s(X45,happ(s(fun(X46,X45),X47),s(X46,X48)))))) | ~p(s(bool,happ(s(fun(fun(X45,bool),bool),X49),s(fun(X45,bool),X50))))) )),
  inference(forward_demodulation,[],[f30671,f339])).
fof(f30671,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,happ(s(fun(X45,bool),sK5(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))),s(X45,happ(s(fun(X46,X45),X47),s(X46,X48)))))) | ~p(s(bool,happ(s(fun(fun(X45,bool),bool),X49),s(fun(X45,bool),X50)))) | p(s(bool,happ(s(fun(fun(X45,bool),bool),happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48))),s(fun(X45,bool),sK6(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))))))) )),
  inference(forward_demodulation,[],[f30617,f333])).
fof(f30617,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,happ(s(fun(fun(X45,bool),bool),'_dstsel_0_x0_1'(s(X45,happ(s(fun(X46,X45),X47),s(X46,X48))))),s(fun(X45,bool),sK5(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool)))))) | ~p(s(bool,happ(s(fun(fun(X45,bool),bool),X49),s(fun(X45,bool),X50)))) | p(s(bool,happ(s(fun(fun(X45,bool),bool),happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48))),s(fun(X45,bool),sK6(X49,happ(s(fun(X46,fun(fun(X45,bool),bool)),'_dstsel_1_x10_1'(s(fun(X46,X45),X47))),s(X46,X48)),fun(X45,bool))))))) )),
  inference(superposition,[],[f301,f339])).
fof(f31473,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4))))))) )),
  inference(unit_resulting_resolution,[],[f341,f338])).
fof(f31759,plain,(
  ( ! [X158,X156,X154,X159,X157,X155,X153] : (p(s(bool,happ(s(fun(X153,bool),happ(s(fun(X153,fun(X153,bool)),'=_0'),s(X153,X159))),s(X153,happ(s(fun(X155,X153),happ(s(fun(X154,fun(X155,X153)),X156),s(X154,X158))),s(X155,X157)))))) | s(X153,X159) != s(X153,happ(s(fun(X154,X153),'_dst_x1x0_2'(s(fun(X154,fun(X155,X153)),X156),s(X155,X157))),s(X154,X158)))) )),
  inference(superposition,[],[f338,f341])).
fof(f31757,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (~p(s(bool,happ(s(fun(X139,bool),happ(s(fun(X139,fun(X139,bool)),'=_0'),s(X139,X145))),s(X139,happ(s(fun(X141,X139),happ(s(fun(X140,fun(X141,X139)),X142),s(X140,X144))),s(X141,X143)))))) | s(X139,X145) = s(X139,happ(s(fun(X140,X139),'_dst_x1x0_2'(s(fun(X140,fun(X141,X139)),X142),s(X141,X143))),s(X140,X144)))) )),
  inference(superposition,[],[f337,f341])).
fof(f36079,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X205] : (p(s(bool,happ(s(fun(X205,bool),happ(s(fun(X205,fun(X205,bool)),'=_0'),s(X205,X213))),s(X205,happ(s(fun(X208,X205),happ(s(fun(X207,fun(X208,X205)),X209),s(X207,X210))),s(X208,happ(s(fun(X206,X208),X211),s(X206,X212)))))))) | s(X205,X213) != s(X205,happ(s(fun(X206,X205),'_dst_x0x0x1_3'(s(fun(X207,fun(X208,X205)),X209),s(X207,X210),s(fun(X206,X208),X211))),s(X206,X212)))) )),
  inference(superposition,[],[f338,f359])).
fof(f36077,plain,(
  ( ! [X191,X189,X187,X194,X192,X190,X188,X195,X193] : (~p(s(bool,happ(s(fun(X187,bool),happ(s(fun(X187,fun(X187,bool)),'=_0'),s(X187,X195))),s(X187,happ(s(fun(X190,X187),happ(s(fun(X189,fun(X190,X187)),X191),s(X189,X192))),s(X190,happ(s(fun(X188,X190),X193),s(X188,X194)))))))) | s(X187,X195) = s(X187,happ(s(fun(X188,X187),'_dst_x0x0x1_3'(s(fun(X189,fun(X190,X187)),X191),s(X189,X192),s(fun(X188,X190),X193))),s(X188,X194)))) )),
  inference(superposition,[],[f337,f359])).
fof(f17810,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (p(s(bool,happ(s(fun(X145,bool),happ(s(fun(X145,fun(X145,bool)),'=_0'),s(X145,X151))),s(X145,happ(s(fun(X148,X145),'_dst_x0x1_2'(s(fun(X146,X145),X147),s(fun(X148,X146),X149))),s(X148,X150)))))) | s(X145,X151) != s(X145,happ(s(fun(X146,X145),X147),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150)))))) )),
  inference(superposition,[],[f338,f340])).
fof(f17808,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (~p(s(bool,happ(s(fun(X131,bool),happ(s(fun(X131,fun(X131,bool)),'=_0'),s(X131,X137))),s(X131,happ(s(fun(X134,X131),'_dst_x0x1_2'(s(fun(X132,X131),X133),s(fun(X134,X132),X135))),s(X134,X136)))))) | s(X131,X137) = s(X131,happ(s(fun(X132,X131),X133),s(X132,happ(s(fun(X134,X132),X135),s(X134,X136)))))) )),
  inference(superposition,[],[f337,f340])).
fof(f31519,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),'_dst_x1x0_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X5))),s(X2,X4))))))) )),
  inference(unit_resulting_resolution,[],[f341,f338])).
fof(f31914,plain,(
  ( ! [X158,X156,X154,X159,X157,X155,X153] : (p(s(bool,happ(s(fun(X153,bool),happ(s(fun(X153,fun(X153,bool)),'=_0'),s(X153,X159))),s(X153,happ(s(fun(X155,X153),'_dst_x1x0_2'(s(fun(X155,fun(X154,X153)),X156),s(X154,X158))),s(X155,X157)))))) | s(X153,X159) != s(X153,happ(s(fun(X154,X153),happ(s(fun(X155,fun(X154,X153)),X156),s(X155,X157))),s(X154,X158)))) )),
  inference(superposition,[],[f338,f341])).
fof(f31912,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (~p(s(bool,happ(s(fun(X139,bool),happ(s(fun(X139,fun(X139,bool)),'=_0'),s(X139,X145))),s(X139,happ(s(fun(X141,X139),'_dst_x1x0_2'(s(fun(X141,fun(X140,X139)),X142),s(X140,X144))),s(X141,X143)))))) | s(X139,X145) = s(X139,happ(s(fun(X140,X139),happ(s(fun(X141,fun(X140,X139)),X142),s(X141,X143))),s(X140,X144)))) )),
  inference(superposition,[],[f337,f341])).
fof(f36257,plain,(
  ( ! [X218,X222,X220,X225,X219,X217,X223,X221,X224] : (p(s(bool,happ(s(fun(X217,bool),happ(s(fun(X217,fun(X217,bool)),'=_0'),s(X217,X225))),s(X217,happ(s(fun(X222,X217),'_dst_x0x0x1_3'(s(fun(X219,fun(X218,X217)),X220),s(X219,X221),s(fun(X222,X218),X223))),s(X222,X224)))))) | s(X217,X225) != s(X217,happ(s(fun(X218,X217),happ(s(fun(X219,fun(X218,X217)),X220),s(X219,X221))),s(X218,happ(s(fun(X222,X218),X223),s(X222,X224)))))) )),
  inference(superposition,[],[f338,f359])).
fof(f36255,plain,(
  ( ! [X206,X204,X202,X200,X199,X207,X205,X203,X201] : (~p(s(bool,happ(s(fun(X199,bool),happ(s(fun(X199,fun(X199,bool)),'=_0'),s(X199,X207))),s(X199,happ(s(fun(X204,X199),'_dst_x0x0x1_3'(s(fun(X201,fun(X200,X199)),X202),s(X201,X203),s(fun(X204,X200),X205))),s(X204,X206)))))) | s(X199,X207) = s(X199,happ(s(fun(X200,X199),happ(s(fun(X201,fun(X200,X199)),X202),s(X201,X203))),s(X200,happ(s(fun(X204,X200),X205),s(X204,X206)))))) )),
  inference(superposition,[],[f337,f359])).
fof(f35680,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X0)),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))),s(X0,happ(s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))))))) )),
  inference(unit_resulting_resolution,[],[f359,f338])).
fof(f40590,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X2,bool),'_dst_x0x1x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun(X2,X0),X3),s(fun(X2,X0),X3))),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))))) )),
  inference(backward_demodulation,[],[f39983,f17676])).
fof(f36090,plain,(
  ( ! [X325,X327,X329,X331,X324,X326,X328,X330] : (~p(s(bool,happ(s(fun(X326,bool),happ(s(fun(X325,fun(X326,bool)),X327),s(X325,X328))),s(X326,happ(s(fun(X324,X326),X329),s(X324,X330)))))) | p(s(bool,happ(s(fun(X324,bool),X331),s(X324,sK6('_dst_x0x0x1_3'(s(fun(X325,fun(X326,bool)),X327),s(X325,X328),s(fun(X324,X326),X329)),X331,X324))))) | p(s(bool,happ(s(fun(X324,bool),'_dst_x0x0x1_3'(s(fun(X325,fun(X326,bool)),X327),s(X325,X328),s(fun(X324,X326),X329))),s(X324,sK5('_dst_x0x0x1_3'(s(fun(X325,fun(X326,bool)),X327),s(X325,X328),s(fun(X324,X326),X329)),X331,X324)))))) )),
  inference(superposition,[],[f300,f359])).
fof(f36091,plain,(
  ( ! [X333,X335,X337,X332,X334,X336,X338] : (~p(s(bool,happ(s(fun(X334,bool),happ(s(fun(X333,fun(X334,bool)),X335),s(X333,X336))),s(X334,happ(s(fun(X332,X334),X337),s(X332,X338)))))) | p(s(bool,happ(s(fun(fun(X332,bool),bool),'?_1'),s(fun(X332,bool),'_dst_x0x0x1_3'(s(fun(X333,fun(X334,bool)),X335),s(X333,X336),s(fun(X332,X334),X337))))))) )),
  inference(superposition,[],[f319,f359])).
fof(f36092,plain,(
  ( ! [X344,X341,X343,X339,X345,X340,X342] : (~p(s(bool,happ(s(fun(X341,bool),happ(s(fun(X340,fun(X341,bool)),X342),s(X340,X343))),s(X341,happ(s(fun(X339,X341),X344),s(X339,X345)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X339,bool),'_dst_x0x0x1_3'(s(fun(X340,fun(X341,bool)),X342),s(X340,X343),s(fun(X339,X341),X344))))))) )),
  inference(superposition,[],[f3449,f359])).
fof(f36095,plain,(
  ( ! [X364,X366,X362,X365,X361,X363] : (~p(s(bool,happ(s(fun(X363,bool),happ(s(fun(X362,fun(X363,bool)),X364),s(X362,X365))),s(X363,happ(s(fun(X361,X363),X366),s(X361,sK8('_dst_x0x0x1_3'(s(fun(X362,fun(X363,bool)),X364),s(X362,X365),s(fun(X361,X363),X366)),X361))))))) | p(s(bool,happ(s(fun(fun(X361,bool),bool),'!_1'),s(fun(X361,bool),'_dst_x0x0x1_3'(s(fun(X362,fun(X363,bool)),X364),s(X362,X365),s(fun(X361,X363),X366))))))) )),
  inference(superposition,[],[f317,f359])).
fof(f1177,plain,(
  ( ! [X4,X2,X3,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),X2)))) | s(bool,X4) = s(bool,happ(s(fun(X1,bool),X2),s(X1,sK4(X3,X2,X1)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1163,f246])).
fof(f1163,plain,(
  ( ! [X4,X2,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),X2)))) | s(bool,X4) = s(bool,happ(s(fun(X1,bool),X2),s(X1,sK4(X3,X2,X1)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f299,f396])).
fof(f299,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,X1,X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2] : ((s(X0,X2) = s(X0,sK4(X2,X1,X0)) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,X1,X0)))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f186])).
fof(f186,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(ennf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (s(X0,X2) = s(X0,X3) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X6] : ! [X27,X29] : (! [X28] : (s(X6,X28) = s(X6,X29) => p(s(bool,happ(s(fun(X6,bool),X27),s(X6,X28))))) => p(s(bool,'|dollar|exists_1'(s(fun(X6,bool),X27)))))),
  file('thm.benchmark.times_distinct','thm.bool.JRH_INDUCT_UTIL')).
fof(f1170,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f1154,f290])).
fof(f1154,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))))))) )),
  inference(superposition,[],[f299,f290])).
fof(f1171,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5)))) | ~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3)))))) )),
  inference(forward_demodulation,[],[f1155,f330])).
fof(f1155,plain,(
  ( ! [X6,X4,X7,X5,X3] : (~p(s(bool,happ(s(fun(X3,bool),X5),s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))))) | p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6))))))) )),
  inference(superposition,[],[f299,f330])).
fof(f1172,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9)))) | ~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8)))))) )),
  inference(forward_demodulation,[],[f1156,f295])).
fof(f1156,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(X8,bool),X9),s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))))) | p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f299,f295])).
fof(f3386,plain,(
  ( ! [X161,X159,X162,X160] : (~p(s(bool,happ(s(fun(X159,bool),X160),s(X159,sK4(X162,sK4(X160,X161,fun(X159,bool)),X159))))) | p(s(bool,'|dollar|exists_1'(s(fun(X159,bool),sK4(X160,X161,fun(X159,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X159,bool),bool),X161)))) )),
  inference(superposition,[],[f299,f562])).
fof(f18001,plain,(
  ( ! [X532,X534,X530,X533,X535,X529,X531] : (~p(s(bool,happ(s(fun(X529,bool),happ(s(fun(X531,fun(X529,bool)),X532),s(X531,happ(s(fun(X530,X531),X533),s(X530,X534))))),s(X529,sK4(X535,happ(s(fun(X530,fun(X529,bool)),'_dst_x0x1_2'(s(fun(X531,fun(X529,bool)),X532),s(fun(X530,X531),X533))),s(X530,X534)),X529))))) | p(s(bool,'|dollar|exists_1'(s(fun(X529,bool),happ(s(fun(X530,fun(X529,bool)),'_dst_x0x1_2'(s(fun(X531,fun(X529,bool)),X532),s(fun(X530,X531),X533))),s(X530,X534))))))) )),
  inference(superposition,[],[f299,f340])).
fof(f17880,plain,(
  ( ! [X613,X609,X611,X607,X612,X608,X610] : (~p(s(bool,happ(s(fun(X607,bool),happ(s(fun(X610,fun(X607,bool)),'_dst_x0x1_2'(s(fun(X608,fun(X607,bool)),X609),s(fun(X610,X608),X611))),s(X610,X612))),s(X607,sK4(X613,happ(s(fun(X608,fun(X607,bool)),X609),s(X608,happ(s(fun(X610,X608),X611),s(X610,X612)))),X607))))) | p(s(bool,'|dollar|exists_1'(s(fun(X607,bool),happ(s(fun(X608,fun(X607,bool)),X609),s(X608,happ(s(fun(X610,X608),X611),s(X610,X612))))))))) )),
  inference(superposition,[],[f299,f340])).
fof(f31852,plain,(
  ( ! [X712,X714,X710,X713,X715,X709,X711] : (~p(s(bool,happ(s(fun(X709,bool),happ(s(fun(X711,fun(X709,bool)),happ(s(fun(X710,fun(X711,fun(X709,bool))),X712),s(X710,X714))),s(X711,X713))),s(X709,sK4(X715,happ(s(fun(X710,fun(X709,bool)),'_dst_x1x0_2'(s(fun(X710,fun(X711,fun(X709,bool))),X712),s(X711,X713))),s(X710,X714)),X709))))) | p(s(bool,'|dollar|exists_1'(s(fun(X709,bool),happ(s(fun(X710,fun(X709,bool)),'_dst_x1x0_2'(s(fun(X710,fun(X711,fun(X709,bool))),X712),s(X711,X713))),s(X710,X714))))))) )),
  inference(superposition,[],[f299,f341])).
fof(f32013,plain,(
  ( ! [X728,X724,X726,X729,X725,X727,X723] : (~p(s(bool,happ(s(fun(X723,bool),happ(s(fun(X725,fun(X723,bool)),'_dst_x1x0_2'(s(fun(X725,fun(X724,fun(X723,bool))),X726),s(X724,X728))),s(X725,X727))),s(X723,sK4(X729,happ(s(fun(X724,fun(X723,bool)),happ(s(fun(X725,fun(X724,fun(X723,bool))),X726),s(X725,X727))),s(X724,X728)),X723))))) | p(s(bool,'|dollar|exists_1'(s(fun(X723,bool),happ(s(fun(X724,fun(X723,bool)),happ(s(fun(X725,fun(X724,fun(X723,bool))),X726),s(X725,X727))),s(X724,X728))))))) )),
  inference(superposition,[],[f299,f341])).
fof(f33923,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X89] : (~p(s(bool,happ(s(fun(X89,bool),happ(s(fun(X92,fun(X89,bool)),'_dst_x00x11_2'(s(fun(X90,bool),X91),s(fun(X92,fun(X89,X90)),X93))),s(X92,X94))),s(X89,sK4(X95,'_dst_x0x1_2'(s(fun(X90,bool),X91),s(fun(X89,X90),happ(s(fun(X92,fun(X89,X90)),X93),s(X92,X94)))),X89))))) | p(s(bool,'|dollar|exists_1'(s(fun(X89,bool),'_dst_x0x1_2'(s(fun(X90,bool),X91),s(fun(X89,X90),happ(s(fun(X92,fun(X89,X90)),X93),s(X92,X94))))))))) )),
  inference(superposition,[],[f299,f358])).
fof(f36184,plain,(
  ( ! [X1081,X1079,X1077,X1082,X1080,X1084,X1078,X1076,X1083] : (~p(s(bool,happ(s(fun(X1076,bool),happ(s(fun(X1079,fun(X1076,bool)),happ(s(fun(X1078,fun(X1079,fun(X1076,bool))),X1080),s(X1078,X1081))),s(X1079,happ(s(fun(X1077,X1079),X1082),s(X1077,X1083))))),s(X1076,sK4(X1084,happ(s(fun(X1077,fun(X1076,bool)),'_dst_x0x0x1_3'(s(fun(X1078,fun(X1079,fun(X1076,bool))),X1080),s(X1078,X1081),s(fun(X1077,X1079),X1082))),s(X1077,X1083)),X1076))))) | p(s(bool,'|dollar|exists_1'(s(fun(X1076,bool),happ(s(fun(X1077,fun(X1076,bool)),'_dst_x0x0x1_3'(s(fun(X1078,fun(X1079,fun(X1076,bool))),X1080),s(X1078,X1081),s(fun(X1077,X1079),X1082))),s(X1077,X1083))))))) )),
  inference(superposition,[],[f299,f359])).
fof(f36365,plain,(
  ( ! [X1091,X1089,X1095,X1093,X1096,X1090,X1088,X1094,X1092] : (~p(s(bool,happ(s(fun(X1088,bool),happ(s(fun(X1093,fun(X1088,bool)),'_dst_x0x0x1_3'(s(fun(X1090,fun(X1089,fun(X1088,bool))),X1091),s(X1090,X1092),s(fun(X1093,X1089),X1094))),s(X1093,X1095))),s(X1088,sK4(X1096,happ(s(fun(X1089,fun(X1088,bool)),happ(s(fun(X1090,fun(X1089,fun(X1088,bool))),X1091),s(X1090,X1092))),s(X1089,happ(s(fun(X1093,X1089),X1094),s(X1093,X1095)))),X1088))))) | p(s(bool,'|dollar|exists_1'(s(fun(X1088,bool),happ(s(fun(X1089,fun(X1088,bool)),happ(s(fun(X1090,fun(X1089,fun(X1088,bool))),X1091),s(X1090,X1092))),s(X1089,happ(s(fun(X1093,X1089),X1094),s(X1093,X1095))))))))) )),
  inference(superposition,[],[f299,f359])).
fof(f37494,plain,(
  ( ! [X158,X156,X154,X152,X151,X157,X155,X153,X150] : (~p(s(bool,happ(s(fun(X150,bool),happ(s(fun(X154,fun(X150,bool)),'_dst_x00x10x01_3'(s(fun(X151,fun(X152,bool)),X153),s(fun(X154,X151),X155),s(fun(X150,X152),X157))),s(X154,X156))),s(X150,sK4(X158,'_dst_x0x0x1_3'(s(fun(X151,fun(X152,bool)),X153),s(X151,happ(s(fun(X154,X151),X155),s(X154,X156))),s(fun(X150,X152),X157)),X150))))) | p(s(bool,'|dollar|exists_1'(s(fun(X150,bool),'_dst_x0x0x1_3'(s(fun(X151,fun(X152,bool)),X153),s(X151,happ(s(fun(X154,X151),X155),s(X154,X156))),s(fun(X150,X152),X157))))))) )),
  inference(superposition,[],[f299,f362])).
fof(f38207,plain,(
  ( ! [X191,X198,X196,X194,X192,X199,X197,X195,X193] : (~p(s(bool,happ(s(fun(X191,bool),happ(s(fun(X196,fun(X191,bool)),'_dst_x00x00x11_3'(s(fun(X192,fun(X193,bool)),X194),s(X192,X195),s(fun(X196,fun(X191,X193)),X197))),s(X196,X198))),s(X191,sK4(X199,'_dst_x0x0x1_3'(s(fun(X192,fun(X193,bool)),X194),s(X192,X195),s(fun(X191,X193),happ(s(fun(X196,fun(X191,X193)),X197),s(X196,X198)))),X191))))) | p(s(bool,'|dollar|exists_1'(s(fun(X191,bool),'_dst_x0x0x1_3'(s(fun(X192,fun(X193,bool)),X194),s(X192,X195),s(fun(X191,X193),happ(s(fun(X196,fun(X191,X193)),X197),s(X196,X198))))))))) )),
  inference(superposition,[],[f299,f363])).
fof(f41719,plain,(
  ( ! [X212,X218,X216,X220,X215,X213,X219,X217,X214] : (~p(s(bool,happ(s(fun(X212,bool),happ(s(fun(X217,fun(X212,bool)),'_dst_x00x01x11_3'(s(fun(X213,fun(X214,bool)),X215),s(fun(X212,X213),X216),s(fun(X217,fun(X212,X214)),X218))),s(X217,X219))),s(X212,sK4(X220,'_dst_x0x1x1_3'(s(fun(X213,fun(X214,bool)),X215),s(fun(X212,X213),X216),s(fun(X212,X214),happ(s(fun(X217,fun(X212,X214)),X218),s(X217,X219)))),X212))))) | p(s(bool,'|dollar|exists_1'(s(fun(X212,bool),'_dst_x0x1x1_3'(s(fun(X213,fun(X214,bool)),X215),s(fun(X212,X213),X216),s(fun(X212,X214),happ(s(fun(X217,fun(X212,X214)),X218),s(X217,X219))))))))) )),
  inference(superposition,[],[f299,f364])).
fof(f53954,plain,(
  ( ! [X660,X658,X661,X659] : (p(s(bool,'|dollar|exists_1'(s(fun(X658,bool),happ(s(fun(sK0,fun(X658,bool)),X659),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun(X658,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X658,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X658,bool))),X660),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X658,sK4(X661,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X658,bool)),X659),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X658,bool))),X660)),X658)))))) )),
  inference(forward_demodulation,[],[f53234,f335])).
fof(f53234,plain,(
  ( ! [X660,X658,X661,X659] : (~p(s(bool,happ(s(fun(X658,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X658,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X658,bool))),X660),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X658,sK4(X661,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X658,bool)),X659),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X658,bool))),X660)),X658))))) | p(s(bool,'|dollar|exists_1'(s(fun(X658,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X658,bool)),X659),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X658,bool))),X660))))))) )),
  inference(superposition,[],[f299,f34843])).
fof(f54109,plain,(
  ( ! [X779,X781,X778,X780] : (~p(s(bool,happ(s(fun(X778,bool),happ(s(fun(sK0,fun(X778,bool)),X780),s(sK0,sK3))),s(X778,sK4(X781,happ(s(fun('type.benchmark.times'(sK0),fun(X778,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X778,bool))),X779),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X778))))) | p(s(bool,'|dollar|exists_1'(s(fun(X778,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X778,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X778,bool))),X779),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53483,f335])).
fof(f53483,plain,(
  ( ! [X779,X781,X778,X780] : (~p(s(bool,happ(s(fun(X778,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X778,bool)),X780),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X778,bool))),X779))),s(X778,sK4(X781,happ(s(fun('type.benchmark.times'(sK0),fun(X778,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X778,bool))),X779),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X778))))) | p(s(bool,'|dollar|exists_1'(s(fun(X778,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X778,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X778,bool))),X779),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f299,f34843])).
fof(f33977,plain,(
  ( ! [X94,X92,X90,X95,X93,X91,X89] : (~p(s(bool,happ(s(fun(X89,bool),'_dst_x0x1_2'(s(fun(X91,bool),X92),s(fun(X89,X91),happ(s(fun(X90,fun(X89,X91)),X93),s(X90,X94))))),s(X89,sK4(X95,happ(s(fun(X90,fun(X89,bool)),'_dst_x00x11_2'(s(fun(X91,bool),X92),s(fun(X90,fun(X89,X91)),X93))),s(X90,X94)),X89))))) | p(s(bool,'|dollar|exists_1'(s(fun(X89,bool),happ(s(fun(X90,fun(X89,bool)),'_dst_x00x11_2'(s(fun(X91,bool),X92),s(fun(X90,fun(X89,X91)),X93))),s(X90,X94))))))) )),
  inference(superposition,[],[f299,f358])).
fof(f37560,plain,(
  ( ! [X177,X175,X173,X180,X178,X176,X174,X181,X179] : (~p(s(bool,happ(s(fun(X173,bool),'_dst_x0x0x1_3'(s(fun(X175,fun(X176,bool)),X177),s(X175,happ(s(fun(X174,X175),X178),s(X174,X180))),s(fun(X173,X176),X179))),s(X173,sK4(X181,happ(s(fun(X174,fun(X173,bool)),'_dst_x00x10x01_3'(s(fun(X175,fun(X176,bool)),X177),s(fun(X174,X175),X178),s(fun(X173,X176),X179))),s(X174,X180)),X173))))) | p(s(bool,'|dollar|exists_1'(s(fun(X173,bool),happ(s(fun(X174,fun(X173,bool)),'_dst_x00x10x01_3'(s(fun(X175,fun(X176,bool)),X177),s(fun(X174,X175),X178),s(fun(X173,X176),X179))),s(X174,X180))))))) )),
  inference(superposition,[],[f299,f362])).
fof(f38277,plain,(
  ( ! [X210,X208,X206,X204,X211,X209,X207,X205,X203] : (~p(s(bool,happ(s(fun(X203,bool),'_dst_x0x0x1_3'(s(fun(X205,fun(X206,bool)),X207),s(X205,X208),s(fun(X203,X206),happ(s(fun(X204,fun(X203,X206)),X209),s(X204,X210))))),s(X203,sK4(X211,happ(s(fun(X204,fun(X203,bool)),'_dst_x00x00x11_3'(s(fun(X205,fun(X206,bool)),X207),s(X205,X208),s(fun(X204,fun(X203,X206)),X209))),s(X204,X210)),X203))))) | p(s(bool,'|dollar|exists_1'(s(fun(X203,bool),happ(s(fun(X204,fun(X203,bool)),'_dst_x00x00x11_3'(s(fun(X205,fun(X206,bool)),X207),s(X205,X208),s(fun(X204,fun(X203,X206)),X209))),s(X204,X210))))))) )),
  inference(superposition,[],[f299,f363])).
fof(f41802,plain,(
  ( ! [X271,X277,X273,X275,X270,X276,X278,X272,X274] : (~p(s(bool,happ(s(fun(X270,bool),'_dst_x0x1x1_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X270,X272),X275),s(fun(X270,X273),happ(s(fun(X271,fun(X270,X273)),X276),s(X271,X277))))),s(X270,sK4(X278,happ(s(fun(X271,fun(X270,bool)),'_dst_x00x01x11_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X270,X272),X275),s(fun(X271,fun(X270,X273)),X276))),s(X271,X277)),X270))))) | p(s(bool,'|dollar|exists_1'(s(fun(X270,bool),happ(s(fun(X271,fun(X270,bool)),'_dst_x00x01x11_3'(s(fun(X272,fun(X273,bool)),X274),s(fun(X270,X272),X275),s(fun(X271,fun(X270,X273)),X276))),s(X271,X277))))))) )),
  inference(superposition,[],[f299,f364])).
fof(f5320,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X3)))) | s(bool,X4) = s(bool,happ(s(fun(X2,bool),X3),s(X2,sK8(X3,X2)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5295,f246])).
fof(f5295,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X3)))) | s(bool,X4) = s(bool,happ(s(fun(X2,bool),X3),s(X2,sK8(X3,X2)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f317,f396])).
fof(f317,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(X1,X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1))))) )),
  inference(cnf_transformation,[],[f232])).
fof(f5309,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),X4)))) | ~p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK8(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2)))))) )),
  inference(forward_demodulation,[],[f5277,f330])).
fof(f5277,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK8(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2))))) | p(s(bool,happ(s(fun(fun(X2,bool),bool),'!_1'),s(fun(X2,bool),happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5))))))) )),
  inference(superposition,[],[f317,f330])).
fof(f5308,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),X1)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(forward_demodulation,[],[f5276,f290])).
fof(f5276,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK8(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))))))) )),
  inference(superposition,[],[f317,f290])).
fof(f5310,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(fun(X6,bool),bool),'!_1'),s(fun(X6,bool),X7)))) | ~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK8('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6)))))) )),
  inference(forward_demodulation,[],[f5278,f295])).
fof(f5278,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK8('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6))))) | p(s(bool,happ(s(fun(fun(X6,bool),bool),'!_1'),s(fun(X6,bool),'const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(superposition,[],[f317,f295])).
fof(f5280,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(X13,bool),X14),s(X13,sK8(sK4(X14,X15,fun(X13,bool)),X13))))) | p(s(bool,happ(s(fun(fun(X13,bool),bool),'!_1'),s(fun(X13,bool),sK4(X14,X15,fun(X13,bool)))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X13,bool),bool),X15)))) )),
  inference(superposition,[],[f317,f562])).
fof(f18003,plain,(
  ( ! [X546,X545,X547,X543,X548,X544] : (~p(s(bool,happ(s(fun(X543,bool),happ(s(fun(X545,fun(X543,bool)),X546),s(X545,happ(s(fun(X544,X545),X547),s(X544,X548))))),s(X543,sK8(happ(s(fun(X544,fun(X543,bool)),'_dst_x0x1_2'(s(fun(X545,fun(X543,bool)),X546),s(fun(X544,X545),X547))),s(X544,X548)),X543))))) | p(s(bool,happ(s(fun(fun(X543,bool),bool),'!_1'),s(fun(X543,bool),happ(s(fun(X544,fun(X543,bool)),'_dst_x0x1_2'(s(fun(X545,fun(X543,bool)),X546),s(fun(X544,X545),X547))),s(X544,X548))))))) )),
  inference(superposition,[],[f317,f340])).
fof(f16218,plain,(
  ( ! [X327,X329,X326,X328] : (p(s(bool,happ(s(fun(fun(X326,bool),bool),'!_1'),s(fun(X326,bool),happ(s(fun(X327,fun(X326,bool)),X329),s(X327,X328)))))) | ~p(s(bool,happ(s(fun(X326,bool),happ(s(fun(X327,fun(X326,bool)),X329),s(X327,X328))),s(X326,sK8(happ(s(fun(fun(X327,fun(X326,bool)),fun(X326,bool)),'_dstsel_0_x0_1'(s(X327,X328))),s(fun(X327,fun(X326,bool)),X329)),X326)))))) )),
  inference(forward_demodulation,[],[f16149,f333])).
fof(f16149,plain,(
  ( ! [X327,X329,X326,X328] : (~p(s(bool,happ(s(fun(X326,bool),happ(s(fun(X327,fun(X326,bool)),X329),s(X327,X328))),s(X326,sK8(happ(s(fun(fun(X327,fun(X326,bool)),fun(X326,bool)),'_dstsel_0_x0_1'(s(X327,X328))),s(fun(X327,fun(X326,bool)),X329)),X326))))) | p(s(bool,happ(s(fun(fun(X326,bool),bool),'!_1'),s(fun(X326,bool),happ(s(fun(fun(X327,fun(X326,bool)),fun(X326,bool)),'_dstsel_0_x0_1'(s(X327,X328))),s(fun(X327,fun(X326,bool)),X329))))))) )),
  inference(superposition,[],[f317,f333])).
fof(f31856,plain,(
  ( ! [X741,X743,X739,X744,X740,X742] : (~p(s(bool,happ(s(fun(X739,bool),happ(s(fun(X741,fun(X739,bool)),happ(s(fun(X740,fun(X741,fun(X739,bool))),X742),s(X740,X744))),s(X741,X743))),s(X739,sK8(happ(s(fun(X740,fun(X739,bool)),'_dst_x1x0_2'(s(fun(X740,fun(X741,fun(X739,bool))),X742),s(X741,X743))),s(X740,X744)),X739))))) | p(s(bool,happ(s(fun(fun(X739,bool),bool),'!_1'),s(fun(X739,bool),happ(s(fun(X740,fun(X739,bool)),'_dst_x1x0_2'(s(fun(X740,fun(X741,fun(X739,bool))),X742),s(X741,X743))),s(X740,X744))))))) )),
  inference(superposition,[],[f317,f341])).
fof(f36188,plain,(
  ( ! [X1118,X1116,X1120,X1115,X1119,X1117,X1121,X1114] : (~p(s(bool,happ(s(fun(X1114,bool),happ(s(fun(X1117,fun(X1114,bool)),happ(s(fun(X1116,fun(X1117,fun(X1114,bool))),X1118),s(X1116,X1119))),s(X1117,happ(s(fun(X1115,X1117),X1120),s(X1115,X1121))))),s(X1114,sK8(happ(s(fun(X1115,fun(X1114,bool)),'_dst_x0x0x1_3'(s(fun(X1116,fun(X1117,fun(X1114,bool))),X1118),s(X1116,X1119),s(fun(X1115,X1117),X1120))),s(X1115,X1121)),X1114))))) | p(s(bool,happ(s(fun(fun(X1114,bool),bool),'!_1'),s(fun(X1114,bool),happ(s(fun(X1115,fun(X1114,bool)),'_dst_x0x0x1_3'(s(fun(X1116,fun(X1117,fun(X1114,bool))),X1118),s(X1116,X1119),s(fun(X1115,X1117),X1120))),s(X1115,X1121))))))) )),
  inference(superposition,[],[f317,f359])).
fof(f17882,plain,(
  ( ! [X625,X621,X623,X624,X626,X622] : (~p(s(bool,happ(s(fun(X621,bool),happ(s(fun(X624,fun(X621,bool)),'_dst_x0x1_2'(s(fun(X622,fun(X621,bool)),X623),s(fun(X624,X622),X625))),s(X624,X626))),s(X621,sK8(happ(s(fun(X622,fun(X621,bool)),X623),s(X622,happ(s(fun(X624,X622),X625),s(X624,X626)))),X621))))) | p(s(bool,happ(s(fun(fun(X621,bool),bool),'!_1'),s(fun(X621,bool),happ(s(fun(X622,fun(X621,bool)),X623),s(X622,happ(s(fun(X624,X622),X625),s(X624,X626))))))))) )),
  inference(superposition,[],[f317,f340])).
fof(f32017,plain,(
  ( ! [X757,X753,X755,X756,X758,X754] : (~p(s(bool,happ(s(fun(X753,bool),happ(s(fun(X755,fun(X753,bool)),'_dst_x1x0_2'(s(fun(X755,fun(X754,fun(X753,bool))),X756),s(X754,X758))),s(X755,X757))),s(X753,sK8(happ(s(fun(X754,fun(X753,bool)),happ(s(fun(X755,fun(X754,fun(X753,bool))),X756),s(X755,X757))),s(X754,X758)),X753))))) | p(s(bool,happ(s(fun(fun(X753,bool),bool),'!_1'),s(fun(X753,bool),happ(s(fun(X754,fun(X753,bool)),happ(s(fun(X755,fun(X754,fun(X753,bool))),X756),s(X755,X757))),s(X754,X758))))))) )),
  inference(superposition,[],[f317,f341])).
fof(f36369,plain,(
  ( ! [X1130,X1128,X1132,X1126,X1131,X1129,X1133,X1127] : (~p(s(bool,happ(s(fun(X1126,bool),happ(s(fun(X1131,fun(X1126,bool)),'_dst_x0x0x1_3'(s(fun(X1128,fun(X1127,fun(X1126,bool))),X1129),s(X1128,X1130),s(fun(X1131,X1127),X1132))),s(X1131,X1133))),s(X1126,sK8(happ(s(fun(X1127,fun(X1126,bool)),happ(s(fun(X1128,fun(X1127,fun(X1126,bool))),X1129),s(X1128,X1130))),s(X1127,happ(s(fun(X1131,X1127),X1132),s(X1131,X1133)))),X1126))))) | p(s(bool,happ(s(fun(fun(X1126,bool),bool),'!_1'),s(fun(X1126,bool),happ(s(fun(X1127,fun(X1126,bool)),happ(s(fun(X1128,fun(X1127,fun(X1126,bool))),X1129),s(X1128,X1130))),s(X1127,happ(s(fun(X1131,X1127),X1132),s(X1131,X1133))))))))) )),
  inference(superposition,[],[f317,f359])).
fof(f40703,plain,(
  ( ! [X1329,X1331,X1333,X1335,X1336,X1330,X1332,X1334] : (p(s(bool,happ(s(fun(fun(X1329,bool),bool),'!_1'),s(fun(X1329,bool),happ(s(fun(X1333,fun(X1329,bool)),'_dst_x0x1x1_3'(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(fun(X1333,X1331),X1334),s(fun(X1333,X1330),X1336))),s(X1333,X1335)))))) | ~p(s(bool,happ(s(fun(X1329,bool),happ(s(fun(X1333,fun(X1329,bool)),'_dst_x0x1x1_3'(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(fun(X1333,X1331),X1334),s(fun(X1333,X1330),X1336))),s(X1333,X1335))),s(X1329,sK8(happ(s(fun(X1330,fun(X1329,bool)),happ(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(X1331,happ(s(fun(X1333,X1331),X1334),s(X1333,X1335))))),s(X1330,happ(s(fun(X1333,X1330),X1336),s(X1333,X1335)))),X1329)))))) )),
  inference(forward_demodulation,[],[f40400,f360])).
fof(f40400,plain,(
  ( ! [X1329,X1331,X1333,X1335,X1336,X1330,X1332,X1334] : (~p(s(bool,happ(s(fun(X1329,bool),happ(s(fun(X1333,fun(X1329,bool)),'_dst_x0x1x1_3'(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(fun(X1333,X1331),X1334),s(fun(X1333,X1330),X1336))),s(X1333,X1335))),s(X1329,sK8(happ(s(fun(X1330,fun(X1329,bool)),happ(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(X1331,happ(s(fun(X1333,X1331),X1334),s(X1333,X1335))))),s(X1330,happ(s(fun(X1333,X1330),X1336),s(X1333,X1335)))),X1329))))) | p(s(bool,happ(s(fun(fun(X1329,bool),bool),'!_1'),s(fun(X1329,bool),happ(s(fun(X1330,fun(X1329,bool)),happ(s(fun(X1331,fun(X1330,fun(X1329,bool))),X1332),s(X1331,happ(s(fun(X1333,X1331),X1334),s(X1333,X1335))))),s(X1330,happ(s(fun(X1333,X1330),X1336),s(X1333,X1335))))))))) )),
  inference(superposition,[],[f317,f360])).
fof(f17412,plain,(
  ( ! [X420,X422,X418,X421,X419] : (p(s(bool,happ(s(fun(fun(X418,bool),bool),'!_1'),s(fun(X418,bool),happ(s(fun(X419,fun(X418,bool)),X421),s(X419,X420)))))) | ~p(s(bool,happ(s(fun(X418,bool),happ(s(fun(X419,fun(X418,bool)),X421),s(X419,X420))),s(X418,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X419),'const.benchmark.Once_1'(s(X419,X420))),s(fun(X419,fun(X418,bool)),X421),s(fun('type.benchmark.times'(X419),fun('type.benchmark.times'(X419),fun(X418,bool))),X422)),X418)))))) )),
  inference(forward_demodulation,[],[f17324,f335])).
fof(f17324,plain,(
  ( ! [X420,X422,X418,X421,X419] : (~p(s(bool,happ(s(fun(X418,bool),happ(s(fun(X419,fun(X418,bool)),X421),s(X419,X420))),s(X418,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X419),'const.benchmark.Once_1'(s(X419,X420))),s(fun(X419,fun(X418,bool)),X421),s(fun('type.benchmark.times'(X419),fun('type.benchmark.times'(X419),fun(X418,bool))),X422)),X418))))) | p(s(bool,happ(s(fun(fun(X418,bool),bool),'!_1'),s(fun(X418,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X419),'const.benchmark.Once_1'(s(X419,X420))),s(fun(X419,fun(X418,bool)),X421),s(fun('type.benchmark.times'(X419),fun('type.benchmark.times'(X419),fun(X418,bool))),X422))))))) )),
  inference(superposition,[],[f317,f335])).
fof(f33927,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X119,bool),happ(s(fun(X122,fun(X119,bool)),'_dst_x00x11_2'(s(fun(X120,bool),X121),s(fun(X122,fun(X119,X120)),X123))),s(X122,X124))),s(X119,sK8('_dst_x0x1_2'(s(fun(X120,bool),X121),s(fun(X119,X120),happ(s(fun(X122,fun(X119,X120)),X123),s(X122,X124)))),X119))))) | p(s(bool,happ(s(fun(fun(X119,bool),bool),'!_1'),s(fun(X119,bool),'_dst_x0x1_2'(s(fun(X120,bool),X121),s(fun(X119,X120),happ(s(fun(X122,fun(X119,X120)),X123),s(X122,X124))))))))) )),
  inference(superposition,[],[f317,f358])).
fof(f37498,plain,(
  ( ! [X191,X189,X194,X192,X190,X188,X195,X193] : (~p(s(bool,happ(s(fun(X188,bool),happ(s(fun(X192,fun(X188,bool)),'_dst_x00x10x01_3'(s(fun(X189,fun(X190,bool)),X191),s(fun(X192,X189),X193),s(fun(X188,X190),X195))),s(X192,X194))),s(X188,sK8('_dst_x0x0x1_3'(s(fun(X189,fun(X190,bool)),X191),s(X189,happ(s(fun(X192,X189),X193),s(X192,X194))),s(fun(X188,X190),X195)),X188))))) | p(s(bool,happ(s(fun(fun(X188,bool),bool),'!_1'),s(fun(X188,bool),'_dst_x0x0x1_3'(s(fun(X189,fun(X190,bool)),X191),s(X189,happ(s(fun(X192,X189),X193),s(X192,X194))),s(fun(X188,X190),X195))))))) )),
  inference(superposition,[],[f317,f362])).
fof(f38211,plain,(
  ( ! [X231,X229,X235,X233,X230,X236,X234,X232] : (~p(s(bool,happ(s(fun(X229,bool),happ(s(fun(X234,fun(X229,bool)),'_dst_x00x00x11_3'(s(fun(X230,fun(X231,bool)),X232),s(X230,X233),s(fun(X234,fun(X229,X231)),X235))),s(X234,X236))),s(X229,sK8('_dst_x0x0x1_3'(s(fun(X230,fun(X231,bool)),X232),s(X230,X233),s(fun(X229,X231),happ(s(fun(X234,fun(X229,X231)),X235),s(X234,X236)))),X229))))) | p(s(bool,happ(s(fun(fun(X229,bool),bool),'!_1'),s(fun(X229,bool),'_dst_x0x0x1_3'(s(fun(X230,fun(X231,bool)),X232),s(X230,X233),s(fun(X229,X231),happ(s(fun(X234,fun(X229,X231)),X235),s(X234,X236))))))))) )),
  inference(superposition,[],[f317,f363])).
fof(f41723,plain,(
  ( ! [X255,X253,X251,X257,X254,X252,X250,X256] : (~p(s(bool,happ(s(fun(X250,bool),happ(s(fun(X255,fun(X250,bool)),'_dst_x00x01x11_3'(s(fun(X251,fun(X252,bool)),X253),s(fun(X250,X251),X254),s(fun(X255,fun(X250,X252)),X256))),s(X255,X257))),s(X250,sK8('_dst_x0x1x1_3'(s(fun(X251,fun(X252,bool)),X253),s(fun(X250,X251),X254),s(fun(X250,X252),happ(s(fun(X255,fun(X250,X252)),X256),s(X255,X257)))),X250))))) | p(s(bool,happ(s(fun(fun(X250,bool),bool),'!_1'),s(fun(X250,bool),'_dst_x0x1x1_3'(s(fun(X251,fun(X252,bool)),X253),s(fun(X250,X251),X254),s(fun(X250,X252),happ(s(fun(X255,fun(X250,X252)),X256),s(X255,X257))))))))) )),
  inference(superposition,[],[f317,f364])).
fof(f43817,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291,X297] : (p(s(bool,happ(s(fun(fun(X290,bool),bool),'!_1'),s(fun(X290,bool),happ(s(fun(X294,fun(X290,bool)),'_dst_x00x11x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X294,fun(X290,X291)),X295),s(fun(X294,fun(X290,X292)),X297))),s(X294,X296)))))) | ~p(s(bool,happ(s(fun(X290,bool),happ(s(fun(X294,fun(X290,bool)),'_dst_x00x11x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X294,fun(X290,X291)),X295),s(fun(X294,fun(X290,X292)),X297))),s(X294,X296))),s(X290,sK8('_dst_x0x1x1_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X290,X291),happ(s(fun(X294,fun(X290,X291)),X295),s(X294,X296))),s(fun(X290,X292),happ(s(fun(X294,fun(X290,X292)),X297),s(X294,X296)))),X290)))))) )),
  inference(forward_demodulation,[],[f43741,f365])).
fof(f43741,plain,(
  ( ! [X292,X294,X290,X296,X293,X295,X291,X297] : (~p(s(bool,happ(s(fun(X290,bool),happ(s(fun(X294,fun(X290,bool)),'_dst_x00x11x11_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X294,fun(X290,X291)),X295),s(fun(X294,fun(X290,X292)),X297))),s(X294,X296))),s(X290,sK8('_dst_x0x1x1_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X290,X291),happ(s(fun(X294,fun(X290,X291)),X295),s(X294,X296))),s(fun(X290,X292),happ(s(fun(X294,fun(X290,X292)),X297),s(X294,X296)))),X290))))) | p(s(bool,happ(s(fun(fun(X290,bool),bool),'!_1'),s(fun(X290,bool),'_dst_x0x1x1_3'(s(fun(X291,fun(X292,bool)),X293),s(fun(X290,X291),happ(s(fun(X294,fun(X290,X291)),X295),s(X294,X296))),s(fun(X290,X292),happ(s(fun(X294,fun(X290,X292)),X297),s(X294,X296))))))))) )),
  inference(superposition,[],[f317,f365])).
fof(f35239,plain,(
  ( ! [X767,X771,X769,X770,X768,X772] : (p(s(bool,happ(s(fun(fun(X767,bool),bool),'!_1'),s(fun(X767,bool),happ(s(fun('type.benchmark.times'(X768),fun(X767,bool)),happ(s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772),s('type.benchmark.times'(X768),X769))),s('type.benchmark.times'(X768),X770)))))) | ~p(s(bool,happ(s(fun(X767,bool),happ(s(fun('type.benchmark.times'(X768),fun(X767,bool)),happ(s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772),s('type.benchmark.times'(X768),X769))),s('type.benchmark.times'(X768),X770))),s(X767,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X768),'const.benchmark.Twice_2'(s('type.benchmark.times'(X768),X769),s('type.benchmark.times'(X768),X770))),s(fun(X768,fun(X767,bool)),X771),s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772)),X767)))))) )),
  inference(forward_demodulation,[],[f35015,f336])).
fof(f35015,plain,(
  ( ! [X767,X771,X769,X770,X768,X772] : (~p(s(bool,happ(s(fun(X767,bool),happ(s(fun('type.benchmark.times'(X768),fun(X767,bool)),happ(s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772),s('type.benchmark.times'(X768),X769))),s('type.benchmark.times'(X768),X770))),s(X767,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X768),'const.benchmark.Twice_2'(s('type.benchmark.times'(X768),X769),s('type.benchmark.times'(X768),X770))),s(fun(X768,fun(X767,bool)),X771),s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772)),X767))))) | p(s(bool,happ(s(fun(fun(X767,bool),bool),'!_1'),s(fun(X767,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X768),'const.benchmark.Twice_2'(s('type.benchmark.times'(X768),X769),s('type.benchmark.times'(X768),X770))),s(fun(X768,fun(X767,bool)),X771),s(fun('type.benchmark.times'(X768),fun('type.benchmark.times'(X768),fun(X767,bool))),X772))))))) )),
  inference(superposition,[],[f317,f336])).
fof(f53958,plain,(
  ( ! [X677,X676,X678] : (p(s(bool,happ(s(fun(fun(X676,bool),bool),'!_1'),s(fun(X676,bool),happ(s(fun(sK0,fun(X676,bool)),X677),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun(X676,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X676,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X676,bool))),X678),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X676,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X676,bool)),X677),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X676,bool))),X678)),X676)))))) )),
  inference(forward_demodulation,[],[f53238,f335])).
fof(f53238,plain,(
  ( ! [X677,X676,X678] : (~p(s(bool,happ(s(fun(X676,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X676,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X676,bool))),X678),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X676,sK8('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X676,bool)),X677),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X676,bool))),X678)),X676))))) | p(s(bool,happ(s(fun(fun(X676,bool),bool),'!_1'),s(fun(X676,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X676,bool)),X677),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X676,bool))),X678))))))) )),
  inference(superposition,[],[f317,f34843])).
fof(f5311,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,happ(s(fun(fun(X9,bool),bool),'!_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12)))))) | ~p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK8('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9)))))) )),
  inference(forward_demodulation,[],[f5279,f304])).
fof(f5279,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK8('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9))))) | p(s(bool,happ(s(fun(fun(X9,bool),bool),'!_1'),s(fun(X9,bool),'const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))))))) )),
  inference(superposition,[],[f317,f304])).
fof(f47323,plain,(
  ( ! [X1250,X1248,X1252,X1251,X1249,X1253] : (p(s(bool,happ(s(fun(fun(X1248,bool),bool),'!_1'),s(fun(X1248,bool),happ(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s('type.ind_type.recspace'(X1249),'const.ind_type.CONSTR_3'(s('type.num.num',X1251),s(X1249,X1253),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252)))))))) | ~p(s(bool,happ(s(fun(X1248,bool),happ(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s('type.ind_type.recspace'(X1249),'const.ind_type.CONSTR_3'(s('type.num.num',X1251),s(X1249,X1253),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))))),s(X1248,sK8(happ(s(fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)),happ(s(fun(X1249,fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))),'_dst_x1x0_2'(s(fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)))),happ(s(fun('type.num.num',fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))))),X1250),s('type.num.num',X1251))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))),s(X1249,X1253))),s(fun('type.num.num',fun(X1248,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252)))),X1248)))))) )),
  inference(forward_demodulation,[],[f47027,f378])).
fof(f47027,plain,(
  ( ! [X1250,X1248,X1252,X1251,X1249,X1253] : (~p(s(bool,happ(s(fun(X1248,bool),happ(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s('type.ind_type.recspace'(X1249),'const.ind_type.CONSTR_3'(s('type.num.num',X1251),s(X1249,X1253),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))))),s(X1248,sK8(happ(s(fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)),happ(s(fun(X1249,fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))),'_dst_x1x0_2'(s(fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)))),happ(s(fun('type.num.num',fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))))),X1250),s('type.num.num',X1251))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))),s(X1249,X1253))),s(fun('type.num.num',fun(X1248,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252)))),X1248))))) | p(s(bool,happ(s(fun(fun(X1248,bool),bool),'!_1'),s(fun(X1248,bool),happ(s(fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)),happ(s(fun(X1249,fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))),'_dst_x1x0_2'(s(fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool)))),happ(s(fun('type.num.num',fun(X1249,fun(fun('type.num.num','type.ind_type.recspace'(X1249)),fun(fun('type.num.num',fun(X1248,bool)),fun(X1248,bool))))),X1250),s('type.num.num',X1251))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))),s(X1249,X1253))),s(fun('type.num.num',fun(X1248,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1249),fun(X1248,bool)),sK10(X1250,X1249,fun(X1248,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1249)),X1252))))))))) )),
  inference(superposition,[],[f317,f378])).
fof(f54113,plain,(
  ( ! [X798,X796,X797] : (~p(s(bool,happ(s(fun(X796,bool),happ(s(fun(sK0,fun(X796,bool)),X798),s(sK0,sK3))),s(X796,sK8(happ(s(fun('type.benchmark.times'(sK0),fun(X796,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X796,bool))),X797),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X796))))) | p(s(bool,happ(s(fun(fun(X796,bool),bool),'!_1'),s(fun(X796,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X796,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X796,bool))),X797),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53487,f335])).
fof(f53487,plain,(
  ( ! [X798,X796,X797] : (~p(s(bool,happ(s(fun(X796,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X796,bool)),X798),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X796,bool))),X797))),s(X796,sK8(happ(s(fun('type.benchmark.times'(sK0),fun(X796,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X796,bool))),X797),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X796))))) | p(s(bool,happ(s(fun(fun(X796,bool),bool),'!_1'),s(fun(X796,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X796,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X796,bool))),X797),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f317,f34843])).
fof(f33981,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (~p(s(bool,happ(s(fun(X119,bool),'_dst_x0x1_2'(s(fun(X121,bool),X122),s(fun(X119,X121),happ(s(fun(X120,fun(X119,X121)),X123),s(X120,X124))))),s(X119,sK8(happ(s(fun(X120,fun(X119,bool)),'_dst_x00x11_2'(s(fun(X121,bool),X122),s(fun(X120,fun(X119,X121)),X123))),s(X120,X124)),X119))))) | p(s(bool,happ(s(fun(fun(X119,bool),bool),'!_1'),s(fun(X119,bool),happ(s(fun(X120,fun(X119,bool)),'_dst_x00x11_2'(s(fun(X121,bool),X122),s(fun(X120,fun(X119,X121)),X123))),s(X120,X124))))))) )),
  inference(superposition,[],[f317,f358])).
fof(f33074,plain,(
  ( ! [X532,X530,X533,X531] : (p(s(bool,happ(s(fun(fun(X530,bool),bool),'!_1'),s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533)))))) | ~p(s(bool,happ(s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533))),s(X530,sK8(happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533)),X530)))))) )),
  inference(forward_demodulation,[],[f32851,f377])).
fof(f32851,plain,(
  ( ! [X532,X530,X533,X531] : (~p(s(bool,happ(s(fun(X530,bool),'const.ind_type.FCONS_3'(s(fun(X530,bool),X532),s(fun('type.num.num',fun(X530,bool)),X531),s('type.num.num',X533))),s(X530,sK8(happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533)),X530))))) | p(s(bool,happ(s(fun(fun(X530,bool),bool),'!_1'),s(fun(X530,bool),happ(s(fun('type.num.num',fun(X530,bool)),happ(s(fun(fun(X530,bool),fun('type.num.num',fun(X530,bool))),'_dst_x1x0_2'(s(fun(fun(X530,bool),fun(fun('type.num.num',fun(X530,bool)),fun('type.num.num',fun(X530,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X530,bool)),X531))),s(fun(X530,bool),X532))),s('type.num.num',X533))))))) )),
  inference(superposition,[],[f317,f377])).
fof(f37564,plain,(
  ( ! [X212,X218,X216,X215,X213,X211,X217,X214] : (~p(s(bool,happ(s(fun(X211,bool),'_dst_x0x0x1_3'(s(fun(X213,fun(X214,bool)),X215),s(X213,happ(s(fun(X212,X213),X216),s(X212,X218))),s(fun(X211,X214),X217))),s(X211,sK8(happ(s(fun(X212,fun(X211,bool)),'_dst_x00x10x01_3'(s(fun(X213,fun(X214,bool)),X215),s(fun(X212,X213),X216),s(fun(X211,X214),X217))),s(X212,X218)),X211))))) | p(s(bool,happ(s(fun(fun(X211,bool),bool),'!_1'),s(fun(X211,bool),happ(s(fun(X212,fun(X211,bool)),'_dst_x00x10x01_3'(s(fun(X213,fun(X214,bool)),X215),s(fun(X212,X213),X216),s(fun(X211,X214),X217))),s(X212,X218))))))) )),
  inference(superposition,[],[f317,f362])).
fof(f38281,plain,(
  ( ! [X243,X241,X246,X244,X242,X248,X247,X245] : (~p(s(bool,happ(s(fun(X241,bool),'_dst_x0x0x1_3'(s(fun(X243,fun(X244,bool)),X245),s(X243,X246),s(fun(X241,X244),happ(s(fun(X242,fun(X241,X244)),X247),s(X242,X248))))),s(X241,sK8(happ(s(fun(X242,fun(X241,bool)),'_dst_x00x00x11_3'(s(fun(X243,fun(X244,bool)),X245),s(X243,X246),s(fun(X242,fun(X241,X244)),X247))),s(X242,X248)),X241))))) | p(s(bool,happ(s(fun(fun(X241,bool),bool),'!_1'),s(fun(X241,bool),happ(s(fun(X242,fun(X241,bool)),'_dst_x00x00x11_3'(s(fun(X243,fun(X244,bool)),X245),s(X243,X246),s(fun(X242,fun(X241,X244)),X247))),s(X242,X248))))))) )),
  inference(superposition,[],[f317,f363])).
fof(f41806,plain,(
  ( ! [X313,X315,X308,X310,X312,X314,X309,X311] : (~p(s(bool,happ(s(fun(X308,bool),'_dst_x0x1x1_3'(s(fun(X310,fun(X311,bool)),X312),s(fun(X308,X310),X313),s(fun(X308,X311),happ(s(fun(X309,fun(X308,X311)),X314),s(X309,X315))))),s(X308,sK8(happ(s(fun(X309,fun(X308,bool)),'_dst_x00x01x11_3'(s(fun(X310,fun(X311,bool)),X312),s(fun(X308,X310),X313),s(fun(X309,fun(X308,X311)),X314))),s(X309,X315)),X308))))) | p(s(bool,happ(s(fun(fun(X308,bool),bool),'!_1'),s(fun(X308,bool),happ(s(fun(X309,fun(X308,bool)),'_dst_x00x01x11_3'(s(fun(X310,fun(X311,bool)),X312),s(fun(X308,X310),X313),s(fun(X309,fun(X308,X311)),X314))),s(X309,X315))))))) )),
  inference(superposition,[],[f317,f364])).
fof(f5514,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(X6,bool),X7),s(X6,sK9('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6))))) | ~p(s(bool,happ(s(fun(fun(X6,bool),bool),'?_1'),s(fun(X6,bool),X7))))) )),
  inference(forward_demodulation,[],[f5496,f295])).
fof(f5496,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(fun(X6,bool),bool),'?_1'),s(fun(X6,bool),X7)))) | p(s(bool,happ(s(fun(X6,bool),'const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0'))),s(X6,sK9('const.ind_type.FCONS_3'(s(fun(X6,bool),X7),s(fun('type.num.num',fun(X6,bool)),X8),s('type.num.num','const.num.|48|_0')),X6)))))) )),
  inference(superposition,[],[f318,f295])).
fof(f5513,plain,(
  ( ! [X4,X2,X5,X3] : (p(s(bool,happ(s(fun(X2,bool),X4),s(X2,sK9(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2))))) | ~p(s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X4))))) )),
  inference(forward_demodulation,[],[f5495,f330])).
fof(f5495,plain,(
  ( ! [X4,X2,X5,X3] : (~p(s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X4)))) | p(s(bool,happ(s(fun(X2,bool),happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5))),s(X2,sK9(happ(s(fun(X3,fun(X2,bool)),'_dst_x0_1'(s(fun(X2,bool),X4))),s(X3,X5)),X2)))))) )),
  inference(superposition,[],[f318,f330])).
fof(f5512,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))))) | ~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1))))) )),
  inference(forward_demodulation,[],[f5494,f290])).
fof(f5494,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1))),s(X0,sK9(happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0)))))) )),
  inference(superposition,[],[f318,f290])).
fof(f5518,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK9(X3,X2))))) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5501,f246])).
fof(f5501,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X2,bool),X3),s(X2,sK9(X3,X2))))) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f318,f396])).
fof(f318,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),X1)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK9(X1,X0)))))) )),
  inference(cnf_transformation,[],[f235])).
fof(f17413,plain,(
  ( ! [X424,X426,X423,X425,X427] : (p(s(bool,happ(s(fun(X423,bool),happ(s(fun(X424,fun(X423,bool)),X426),s(X424,X425))),s(X423,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X424),'const.benchmark.Once_1'(s(X424,X425))),s(fun(X424,fun(X423,bool)),X426),s(fun('type.benchmark.times'(X424),fun('type.benchmark.times'(X424),fun(X423,bool))),X427)),X423))))) | ~p(s(bool,happ(s(fun(fun(X423,bool),bool),'?_1'),s(fun(X423,bool),happ(s(fun(X424,fun(X423,bool)),X426),s(X424,X425))))))) )),
  inference(forward_demodulation,[],[f17325,f335])).
fof(f17325,plain,(
  ( ! [X424,X426,X423,X425,X427] : (~p(s(bool,happ(s(fun(fun(X423,bool),bool),'?_1'),s(fun(X423,bool),happ(s(fun(X424,fun(X423,bool)),X426),s(X424,X425)))))) | p(s(bool,happ(s(fun(X423,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X424),'const.benchmark.Once_1'(s(X424,X425))),s(fun(X424,fun(X423,bool)),X426),s(fun('type.benchmark.times'(X424),fun('type.benchmark.times'(X424),fun(X423,bool))),X427))),s(X423,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X424),'const.benchmark.Once_1'(s(X424,X425))),s(fun(X424,fun(X423,bool)),X426),s(fun('type.benchmark.times'(X424),fun('type.benchmark.times'(X424),fun(X423,bool))),X427)),X423)))))) )),
  inference(superposition,[],[f318,f335])).
fof(f17883,plain,(
  ( ! [X629,X631,X627,X632,X628,X630] : (~p(s(bool,happ(s(fun(fun(X627,bool),bool),'?_1'),s(fun(X627,bool),happ(s(fun(X630,fun(X627,bool)),'_dst_x0x1_2'(s(fun(X628,fun(X627,bool)),X629),s(fun(X630,X628),X631))),s(X630,X632)))))) | p(s(bool,happ(s(fun(X627,bool),happ(s(fun(X628,fun(X627,bool)),X629),s(X628,happ(s(fun(X630,X628),X631),s(X630,X632))))),s(X627,sK9(happ(s(fun(X628,fun(X627,bool)),X629),s(X628,happ(s(fun(X630,X628),X631),s(X630,X632)))),X627)))))) )),
  inference(superposition,[],[f318,f340])).
fof(f32018,plain,(
  ( ! [X761,X763,X759,X764,X760,X762] : (~p(s(bool,happ(s(fun(fun(X759,bool),bool),'?_1'),s(fun(X759,bool),happ(s(fun(X761,fun(X759,bool)),'_dst_x1x0_2'(s(fun(X761,fun(X760,fun(X759,bool))),X762),s(X760,X764))),s(X761,X763)))))) | p(s(bool,happ(s(fun(X759,bool),happ(s(fun(X760,fun(X759,bool)),happ(s(fun(X761,fun(X760,fun(X759,bool))),X762),s(X761,X763))),s(X760,X764))),s(X759,sK9(happ(s(fun(X760,fun(X759,bool)),happ(s(fun(X761,fun(X760,fun(X759,bool))),X762),s(X761,X763))),s(X760,X764)),X759)))))) )),
  inference(superposition,[],[f318,f341])).
fof(f36370,plain,(
  ( ! [X1139,X1137,X1141,X1134,X1138,X1136,X1140,X1135] : (~p(s(bool,happ(s(fun(fun(X1134,bool),bool),'?_1'),s(fun(X1134,bool),happ(s(fun(X1139,fun(X1134,bool)),'_dst_x0x0x1_3'(s(fun(X1136,fun(X1135,fun(X1134,bool))),X1137),s(X1136,X1138),s(fun(X1139,X1135),X1140))),s(X1139,X1141)))))) | p(s(bool,happ(s(fun(X1134,bool),happ(s(fun(X1135,fun(X1134,bool)),happ(s(fun(X1136,fun(X1135,fun(X1134,bool))),X1137),s(X1136,X1138))),s(X1135,happ(s(fun(X1139,X1135),X1140),s(X1139,X1141))))),s(X1134,sK9(happ(s(fun(X1135,fun(X1134,bool)),happ(s(fun(X1136,fun(X1135,fun(X1134,bool))),X1137),s(X1136,X1138))),s(X1135,happ(s(fun(X1139,X1135),X1140),s(X1139,X1141)))),X1134)))))) )),
  inference(superposition,[],[f318,f359])).
fof(f18004,plain,(
  ( ! [X553,X549,X551,X552,X554,X550] : (~p(s(bool,happ(s(fun(fun(X549,bool),bool),'?_1'),s(fun(X549,bool),happ(s(fun(X551,fun(X549,bool)),X552),s(X551,happ(s(fun(X550,X551),X553),s(X550,X554)))))))) | p(s(bool,happ(s(fun(X549,bool),happ(s(fun(X550,fun(X549,bool)),'_dst_x0x1_2'(s(fun(X551,fun(X549,bool)),X552),s(fun(X550,X551),X553))),s(X550,X554))),s(X549,sK9(happ(s(fun(X550,fun(X549,bool)),'_dst_x0x1_2'(s(fun(X551,fun(X549,bool)),X552),s(fun(X550,X551),X553))),s(X550,X554)),X549)))))) )),
  inference(superposition,[],[f318,f340])).
fof(f31857,plain,(
  ( ! [X749,X745,X747,X748,X750,X746] : (~p(s(bool,happ(s(fun(fun(X745,bool),bool),'?_1'),s(fun(X745,bool),happ(s(fun(X747,fun(X745,bool)),happ(s(fun(X746,fun(X747,fun(X745,bool))),X748),s(X746,X750))),s(X747,X749)))))) | p(s(bool,happ(s(fun(X745,bool),happ(s(fun(X746,fun(X745,bool)),'_dst_x1x0_2'(s(fun(X746,fun(X747,fun(X745,bool))),X748),s(X747,X749))),s(X746,X750))),s(X745,sK9(happ(s(fun(X746,fun(X745,bool)),'_dst_x1x0_2'(s(fun(X746,fun(X747,fun(X745,bool))),X748),s(X747,X749))),s(X746,X750)),X745)))))) )),
  inference(superposition,[],[f318,f341])).
fof(f37565,plain,(
  ( ! [X222,X220,X225,X219,X223,X221,X226,X224] : (~p(s(bool,happ(s(fun(fun(X219,bool),bool),'?_1'),s(fun(X219,bool),'_dst_x0x0x1_3'(s(fun(X221,fun(X222,bool)),X223),s(X221,happ(s(fun(X220,X221),X224),s(X220,X226))),s(fun(X219,X222),X225)))))) | p(s(bool,happ(s(fun(X219,bool),happ(s(fun(X220,fun(X219,bool)),'_dst_x00x10x01_3'(s(fun(X221,fun(X222,bool)),X223),s(fun(X220,X221),X224),s(fun(X219,X222),X225))),s(X220,X226))),s(X219,sK9(happ(s(fun(X220,fun(X219,bool)),'_dst_x00x10x01_3'(s(fun(X221,fun(X222,bool)),X223),s(fun(X220,X221),X224),s(fun(X219,X222),X225))),s(X220,X226)),X219)))))) )),
  inference(superposition,[],[f318,f362])).
fof(f33982,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(fun(X125,bool),bool),'?_1'),s(fun(X125,bool),'_dst_x0x1_2'(s(fun(X127,bool),X128),s(fun(X125,X127),happ(s(fun(X126,fun(X125,X127)),X129),s(X126,X130)))))))) | p(s(bool,happ(s(fun(X125,bool),happ(s(fun(X126,fun(X125,bool)),'_dst_x00x11_2'(s(fun(X127,bool),X128),s(fun(X126,fun(X125,X127)),X129))),s(X126,X130))),s(X125,sK9(happ(s(fun(X126,fun(X125,bool)),'_dst_x00x11_2'(s(fun(X127,bool),X128),s(fun(X126,fun(X125,X127)),X129))),s(X126,X130)),X125)))))) )),
  inference(superposition,[],[f318,f358])).
fof(f41807,plain,(
  ( ! [X321,X323,X316,X318,X320,X322,X317,X319] : (~p(s(bool,happ(s(fun(fun(X316,bool),bool),'?_1'),s(fun(X316,bool),'_dst_x0x1x1_3'(s(fun(X318,fun(X319,bool)),X320),s(fun(X316,X318),X321),s(fun(X316,X319),happ(s(fun(X317,fun(X316,X319)),X322),s(X317,X323)))))))) | p(s(bool,happ(s(fun(X316,bool),happ(s(fun(X317,fun(X316,bool)),'_dst_x00x01x11_3'(s(fun(X318,fun(X319,bool)),X320),s(fun(X316,X318),X321),s(fun(X317,fun(X316,X319)),X322))),s(X317,X323))),s(X316,sK9(happ(s(fun(X317,fun(X316,bool)),'_dst_x00x01x11_3'(s(fun(X318,fun(X319,bool)),X320),s(fun(X316,X318),X321),s(fun(X317,fun(X316,X319)),X322))),s(X317,X323)),X316)))))) )),
  inference(superposition,[],[f318,f364])).
fof(f36189,plain,(
  ( ! [X1128,X1122,X1126,X1124,X1129,X1123,X1127,X1125] : (~p(s(bool,happ(s(fun(fun(X1122,bool),bool),'?_1'),s(fun(X1122,bool),happ(s(fun(X1125,fun(X1122,bool)),happ(s(fun(X1124,fun(X1125,fun(X1122,bool))),X1126),s(X1124,X1127))),s(X1125,happ(s(fun(X1123,X1125),X1128),s(X1123,X1129)))))))) | p(s(bool,happ(s(fun(X1122,bool),happ(s(fun(X1123,fun(X1122,bool)),'_dst_x0x0x1_3'(s(fun(X1124,fun(X1125,fun(X1122,bool))),X1126),s(X1124,X1127),s(fun(X1123,X1125),X1128))),s(X1123,X1129))),s(X1122,sK9(happ(s(fun(X1123,fun(X1122,bool)),'_dst_x0x0x1_3'(s(fun(X1124,fun(X1125,fun(X1122,bool))),X1126),s(X1124,X1127),s(fun(X1123,X1125),X1128))),s(X1123,X1129)),X1122)))))) )),
  inference(superposition,[],[f318,f359])).
fof(f38282,plain,(
  ( ! [X255,X253,X251,X249,X254,X252,X250,X256] : (~p(s(bool,happ(s(fun(fun(X249,bool),bool),'?_1'),s(fun(X249,bool),'_dst_x0x0x1_3'(s(fun(X251,fun(X252,bool)),X253),s(X251,X254),s(fun(X249,X252),happ(s(fun(X250,fun(X249,X252)),X255),s(X250,X256)))))))) | p(s(bool,happ(s(fun(X249,bool),happ(s(fun(X250,fun(X249,bool)),'_dst_x00x00x11_3'(s(fun(X251,fun(X252,bool)),X253),s(X251,X254),s(fun(X250,fun(X249,X252)),X255))),s(X250,X256))),s(X249,sK9(happ(s(fun(X250,fun(X249,bool)),'_dst_x00x00x11_3'(s(fun(X251,fun(X252,bool)),X253),s(X251,X254),s(fun(X250,fun(X249,X252)),X255))),s(X250,X256)),X249)))))) )),
  inference(superposition,[],[f318,f363])).
fof(f16219,plain,(
  ( ! [X333,X331,X332,X330] : (p(s(bool,happ(s(fun(X330,bool),happ(s(fun(X331,fun(X330,bool)),X333),s(X331,X332))),s(X330,sK9(happ(s(fun(fun(X331,fun(X330,bool)),fun(X330,bool)),'_dstsel_0_x0_1'(s(X331,X332))),s(fun(X331,fun(X330,bool)),X333)),X330))))) | ~p(s(bool,happ(s(fun(fun(X330,bool),bool),'?_1'),s(fun(X330,bool),happ(s(fun(X331,fun(X330,bool)),X333),s(X331,X332))))))) )),
  inference(forward_demodulation,[],[f16150,f333])).
fof(f16150,plain,(
  ( ! [X333,X331,X332,X330] : (~p(s(bool,happ(s(fun(fun(X330,bool),bool),'?_1'),s(fun(X330,bool),happ(s(fun(X331,fun(X330,bool)),X333),s(X331,X332)))))) | p(s(bool,happ(s(fun(X330,bool),happ(s(fun(fun(X331,fun(X330,bool)),fun(X330,bool)),'_dstsel_0_x0_1'(s(X331,X332))),s(fun(X331,fun(X330,bool)),X333))),s(X330,sK9(happ(s(fun(fun(X331,fun(X330,bool)),fun(X330,bool)),'_dstsel_0_x0_1'(s(X331,X332))),s(fun(X331,fun(X330,bool)),X333)),X330)))))) )),
  inference(superposition,[],[f318,f333])).
fof(f40704,plain,(
  ( ! [X1341,X1343,X1344,X1338,X1340,X1342,X1337,X1339] : (p(s(bool,happ(s(fun(X1337,bool),happ(s(fun(X1341,fun(X1337,bool)),'_dst_x0x1x1_3'(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(fun(X1341,X1339),X1342),s(fun(X1341,X1338),X1344))),s(X1341,X1343))),s(X1337,sK9(happ(s(fun(X1338,fun(X1337,bool)),happ(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(X1339,happ(s(fun(X1341,X1339),X1342),s(X1341,X1343))))),s(X1338,happ(s(fun(X1341,X1338),X1344),s(X1341,X1343)))),X1337))))) | ~p(s(bool,happ(s(fun(fun(X1337,bool),bool),'?_1'),s(fun(X1337,bool),happ(s(fun(X1341,fun(X1337,bool)),'_dst_x0x1x1_3'(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(fun(X1341,X1339),X1342),s(fun(X1341,X1338),X1344))),s(X1341,X1343))))))) )),
  inference(forward_demodulation,[],[f40401,f360])).
fof(f40401,plain,(
  ( ! [X1341,X1343,X1344,X1338,X1340,X1342,X1337,X1339] : (~p(s(bool,happ(s(fun(fun(X1337,bool),bool),'?_1'),s(fun(X1337,bool),happ(s(fun(X1341,fun(X1337,bool)),'_dst_x0x1x1_3'(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(fun(X1341,X1339),X1342),s(fun(X1341,X1338),X1344))),s(X1341,X1343)))))) | p(s(bool,happ(s(fun(X1337,bool),happ(s(fun(X1338,fun(X1337,bool)),happ(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(X1339,happ(s(fun(X1341,X1339),X1342),s(X1341,X1343))))),s(X1338,happ(s(fun(X1341,X1338),X1344),s(X1341,X1343))))),s(X1337,sK9(happ(s(fun(X1338,fun(X1337,bool)),happ(s(fun(X1339,fun(X1338,fun(X1337,bool))),X1340),s(X1339,happ(s(fun(X1341,X1339),X1342),s(X1341,X1343))))),s(X1338,happ(s(fun(X1341,X1338),X1344),s(X1341,X1343)))),X1337)))))) )),
  inference(superposition,[],[f318,f360])).
fof(f43818,plain,(
  ( ! [X300,X302,X298,X304,X301,X303,X299,X305] : (p(s(bool,happ(s(fun(X298,bool),happ(s(fun(X302,fun(X298,bool)),'_dst_x00x11x11_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X302,fun(X298,X299)),X303),s(fun(X302,fun(X298,X300)),X305))),s(X302,X304))),s(X298,sK9('_dst_x0x1x1_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X298,X299),happ(s(fun(X302,fun(X298,X299)),X303),s(X302,X304))),s(fun(X298,X300),happ(s(fun(X302,fun(X298,X300)),X305),s(X302,X304)))),X298))))) | ~p(s(bool,happ(s(fun(fun(X298,bool),bool),'?_1'),s(fun(X298,bool),happ(s(fun(X302,fun(X298,bool)),'_dst_x00x11x11_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X302,fun(X298,X299)),X303),s(fun(X302,fun(X298,X300)),X305))),s(X302,X304))))))) )),
  inference(forward_demodulation,[],[f43742,f365])).
fof(f43742,plain,(
  ( ! [X300,X302,X298,X304,X301,X303,X299,X305] : (~p(s(bool,happ(s(fun(fun(X298,bool),bool),'?_1'),s(fun(X298,bool),happ(s(fun(X302,fun(X298,bool)),'_dst_x00x11x11_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X302,fun(X298,X299)),X303),s(fun(X302,fun(X298,X300)),X305))),s(X302,X304)))))) | p(s(bool,happ(s(fun(X298,bool),'_dst_x0x1x1_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X298,X299),happ(s(fun(X302,fun(X298,X299)),X303),s(X302,X304))),s(fun(X298,X300),happ(s(fun(X302,fun(X298,X300)),X305),s(X302,X304))))),s(X298,sK9('_dst_x0x1x1_3'(s(fun(X299,fun(X300,bool)),X301),s(fun(X298,X299),happ(s(fun(X302,fun(X298,X299)),X303),s(X302,X304))),s(fun(X298,X300),happ(s(fun(X302,fun(X298,X300)),X305),s(X302,X304)))),X298)))))) )),
  inference(superposition,[],[f318,f365])).
fof(f35240,plain,(
  ( ! [X777,X775,X773,X778,X776,X774] : (p(s(bool,happ(s(fun(X773,bool),happ(s(fun('type.benchmark.times'(X774),fun(X773,bool)),happ(s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778),s('type.benchmark.times'(X774),X775))),s('type.benchmark.times'(X774),X776))),s(X773,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X774),'const.benchmark.Twice_2'(s('type.benchmark.times'(X774),X775),s('type.benchmark.times'(X774),X776))),s(fun(X774,fun(X773,bool)),X777),s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778)),X773))))) | ~p(s(bool,happ(s(fun(fun(X773,bool),bool),'?_1'),s(fun(X773,bool),happ(s(fun('type.benchmark.times'(X774),fun(X773,bool)),happ(s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778),s('type.benchmark.times'(X774),X775))),s('type.benchmark.times'(X774),X776))))))) )),
  inference(forward_demodulation,[],[f35016,f336])).
fof(f35016,plain,(
  ( ! [X777,X775,X773,X778,X776,X774] : (~p(s(bool,happ(s(fun(fun(X773,bool),bool),'?_1'),s(fun(X773,bool),happ(s(fun('type.benchmark.times'(X774),fun(X773,bool)),happ(s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778),s('type.benchmark.times'(X774),X775))),s('type.benchmark.times'(X774),X776)))))) | p(s(bool,happ(s(fun(X773,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X774),'const.benchmark.Twice_2'(s('type.benchmark.times'(X774),X775),s('type.benchmark.times'(X774),X776))),s(fun(X774,fun(X773,bool)),X777),s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778))),s(X773,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X774),'const.benchmark.Twice_2'(s('type.benchmark.times'(X774),X775),s('type.benchmark.times'(X774),X776))),s(fun(X774,fun(X773,bool)),X777),s(fun('type.benchmark.times'(X774),fun('type.benchmark.times'(X774),fun(X773,bool))),X778)),X773)))))) )),
  inference(superposition,[],[f318,f336])).
fof(f54114,plain,(
  ( ! [X800,X799,X801] : (~p(s(bool,happ(s(fun(fun(X799,bool),bool),'?_1'),s(fun(X799,bool),happ(s(fun(sK0,fun(X799,bool)),X801),s(sK0,sK3)))))) | p(s(bool,happ(s(fun(X799,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X799,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X799,bool))),X800),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X799,sK9(happ(s(fun('type.benchmark.times'(sK0),fun(X799,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X799,bool))),X800),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X799)))))) )),
  inference(forward_demodulation,[],[f53488,f335])).
fof(f53488,plain,(
  ( ! [X800,X799,X801] : (~p(s(bool,happ(s(fun(fun(X799,bool),bool),'?_1'),s(fun(X799,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X799,bool)),X801),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X799,bool))),X800)))))) | p(s(bool,happ(s(fun(X799,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X799,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X799,bool))),X800),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(X799,sK9(happ(s(fun('type.benchmark.times'(sK0),fun(X799,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X799,bool))),X800),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X799)))))) )),
  inference(superposition,[],[f318,f34843])).
fof(f5515,plain,(
  ( ! [X12,X10,X11,X9] : (p(s(bool,happ(s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))),s(X9,sK9('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9))))) | ~p(s(bool,happ(s(fun(fun(X9,bool),bool),'?_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12))))))) )),
  inference(forward_demodulation,[],[f5497,f304])).
fof(f5497,plain,(
  ( ! [X12,X10,X11,X9] : (~p(s(bool,happ(s(fun(fun(X9,bool),bool),'?_1'),s(fun(X9,bool),happ(s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num',X12)))))) | p(s(bool,happ(s(fun(X9,bool),'const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12))))),s(X9,sK9('const.ind_type.FCONS_3'(s(fun(X9,bool),X10),s(fun('type.num.num',fun(X9,bool)),X11),s('type.num.num','const.num.SUC_1'(s('type.num.num',X12)))),X9)))))) )),
  inference(superposition,[],[f318,f304])).
fof(f47324,plain,(
  ( ! [X1258,X1256,X1254,X1259,X1257,X1255] : (p(s(bool,happ(s(fun(X1254,bool),happ(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s('type.ind_type.recspace'(X1255),'const.ind_type.CONSTR_3'(s('type.num.num',X1257),s(X1255,X1259),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))))),s(X1254,sK9(happ(s(fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)),happ(s(fun(X1255,fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))),'_dst_x1x0_2'(s(fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)))),happ(s(fun('type.num.num',fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))))),X1256),s('type.num.num',X1257))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))),s(X1255,X1259))),s(fun('type.num.num',fun(X1254,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258)))),X1254))))) | ~p(s(bool,happ(s(fun(fun(X1254,bool),bool),'?_1'),s(fun(X1254,bool),happ(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s('type.ind_type.recspace'(X1255),'const.ind_type.CONSTR_3'(s('type.num.num',X1257),s(X1255,X1259),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))))))))) )),
  inference(forward_demodulation,[],[f47028,f378])).
fof(f47028,plain,(
  ( ! [X1258,X1256,X1254,X1259,X1257,X1255] : (~p(s(bool,happ(s(fun(fun(X1254,bool),bool),'?_1'),s(fun(X1254,bool),happ(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s('type.ind_type.recspace'(X1255),'const.ind_type.CONSTR_3'(s('type.num.num',X1257),s(X1255,X1259),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258)))))))) | p(s(bool,happ(s(fun(X1254,bool),happ(s(fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)),happ(s(fun(X1255,fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))),'_dst_x1x0_2'(s(fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)))),happ(s(fun('type.num.num',fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))))),X1256),s('type.num.num',X1257))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))),s(X1255,X1259))),s(fun('type.num.num',fun(X1254,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))))),s(X1254,sK9(happ(s(fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)),happ(s(fun(X1255,fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))),'_dst_x1x0_2'(s(fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool)))),happ(s(fun('type.num.num',fun(X1255,fun(fun('type.num.num','type.ind_type.recspace'(X1255)),fun(fun('type.num.num',fun(X1254,bool)),fun(X1254,bool))))),X1256),s('type.num.num',X1257))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258))),s(X1255,X1259))),s(fun('type.num.num',fun(X1254,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1255),fun(X1254,bool)),sK10(X1256,X1255,fun(X1254,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1255)),X1258)))),X1254)))))) )),
  inference(superposition,[],[f318,f378])).
fof(f53959,plain,(
  ( ! [X681,X679,X680] : (p(s(bool,happ(s(fun(X679,bool),happ(s(fun(sK0,fun(X679,bool)),X680),s(sK0,sK3))),s(X679,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X679,bool)),X680),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X679,bool))),X681)),X679))))) | ~p(s(bool,happ(s(fun(fun(X679,bool),bool),'?_1'),s(fun(X679,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X679,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X679,bool))),X681),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53239,f335])).
fof(f53239,plain,(
  ( ! [X681,X679,X680] : (~p(s(bool,happ(s(fun(fun(X679,bool),bool),'?_1'),s(fun(X679,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X679,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X679,bool))),X681),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | p(s(bool,happ(s(fun(X679,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X679,bool)),X680),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X679,bool))),X681))),s(X679,sK9('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X679,bool)),X680),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X679,bool))),X681)),X679)))))) )),
  inference(superposition,[],[f318,f34843])).
fof(f33928,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(fun(X125,bool),bool),'?_1'),s(fun(X125,bool),happ(s(fun(X128,fun(X125,bool)),'_dst_x00x11_2'(s(fun(X126,bool),X127),s(fun(X128,fun(X125,X126)),X129))),s(X128,X130)))))) | p(s(bool,happ(s(fun(X125,bool),'_dst_x0x1_2'(s(fun(X126,bool),X127),s(fun(X125,X126),happ(s(fun(X128,fun(X125,X126)),X129),s(X128,X130))))),s(X125,sK9('_dst_x0x1_2'(s(fun(X126,bool),X127),s(fun(X125,X126),happ(s(fun(X128,fun(X125,X126)),X129),s(X128,X130)))),X125)))))) )),
  inference(superposition,[],[f318,f358])).
fof(f33075,plain,(
  ( ! [X536,X534,X537,X535] : (p(s(bool,happ(s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537))),s(X534,sK9(happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537)),X534))))) | ~p(s(bool,happ(s(fun(fun(X534,bool),bool),'?_1'),s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537))))))) )),
  inference(forward_demodulation,[],[f32852,f377])).
fof(f32852,plain,(
  ( ! [X536,X534,X537,X535] : (~p(s(bool,happ(s(fun(fun(X534,bool),bool),'?_1'),s(fun(X534,bool),'const.ind_type.FCONS_3'(s(fun(X534,bool),X536),s(fun('type.num.num',fun(X534,bool)),X535),s('type.num.num',X537)))))) | p(s(bool,happ(s(fun(X534,bool),happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537))),s(X534,sK9(happ(s(fun('type.num.num',fun(X534,bool)),happ(s(fun(fun(X534,bool),fun('type.num.num',fun(X534,bool))),'_dst_x1x0_2'(s(fun(fun(X534,bool),fun(fun('type.num.num',fun(X534,bool)),fun('type.num.num',fun(X534,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X534,bool)),X535))),s(fun(X534,bool),X536))),s('type.num.num',X537)),X534)))))) )),
  inference(superposition,[],[f318,f377])).
fof(f37499,plain,(
  ( ! [X198,X196,X202,X200,X199,X197,X203,X201] : (~p(s(bool,happ(s(fun(fun(X196,bool),bool),'?_1'),s(fun(X196,bool),happ(s(fun(X200,fun(X196,bool)),'_dst_x00x10x01_3'(s(fun(X197,fun(X198,bool)),X199),s(fun(X200,X197),X201),s(fun(X196,X198),X203))),s(X200,X202)))))) | p(s(bool,happ(s(fun(X196,bool),'_dst_x0x0x1_3'(s(fun(X197,fun(X198,bool)),X199),s(X197,happ(s(fun(X200,X197),X201),s(X200,X202))),s(fun(X196,X198),X203))),s(X196,sK9('_dst_x0x0x1_3'(s(fun(X197,fun(X198,bool)),X199),s(X197,happ(s(fun(X200,X197),X201),s(X200,X202))),s(fun(X196,X198),X203)),X196)))))) )),
  inference(superposition,[],[f318,f362])).
fof(f38212,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238] : (~p(s(bool,happ(s(fun(fun(X237,bool),bool),'?_1'),s(fun(X237,bool),happ(s(fun(X242,fun(X237,bool)),'_dst_x00x00x11_3'(s(fun(X238,fun(X239,bool)),X240),s(X238,X241),s(fun(X242,fun(X237,X239)),X243))),s(X242,X244)))))) | p(s(bool,happ(s(fun(X237,bool),'_dst_x0x0x1_3'(s(fun(X238,fun(X239,bool)),X240),s(X238,X241),s(fun(X237,X239),happ(s(fun(X242,fun(X237,X239)),X243),s(X242,X244))))),s(X237,sK9('_dst_x0x0x1_3'(s(fun(X238,fun(X239,bool)),X240),s(X238,X241),s(fun(X237,X239),happ(s(fun(X242,fun(X237,X239)),X243),s(X242,X244)))),X237)))))) )),
  inference(superposition,[],[f318,f363])).
fof(f41724,plain,(
  ( ! [X261,X263,X259,X265,X260,X262,X258,X264] : (~p(s(bool,happ(s(fun(fun(X258,bool),bool),'?_1'),s(fun(X258,bool),happ(s(fun(X263,fun(X258,bool)),'_dst_x00x01x11_3'(s(fun(X259,fun(X260,bool)),X261),s(fun(X258,X259),X262),s(fun(X263,fun(X258,X260)),X264))),s(X263,X265)))))) | p(s(bool,happ(s(fun(X258,bool),'_dst_x0x1x1_3'(s(fun(X259,fun(X260,bool)),X261),s(fun(X258,X259),X262),s(fun(X258,X260),happ(s(fun(X263,fun(X258,X260)),X264),s(X263,X265))))),s(X258,sK9('_dst_x0x1x1_3'(s(fun(X259,fun(X260,bool)),X261),s(fun(X258,X259),X262),s(fun(X258,X260),happ(s(fun(X263,fun(X258,X260)),X264),s(X263,X265)))),X258)))))) )),
  inference(superposition,[],[f318,f364])).
fof(f5498,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(fun(X13,bool),bool),'?_1'),s(fun(X13,bool),X14)))) | p(s(bool,happ(s(fun(X13,bool),sK4(X14,X15,fun(X13,bool))),s(X13,sK9(sK4(X14,X15,fun(X13,bool)),X13))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X13,bool),bool),X15)))) )),
  inference(superposition,[],[f318,f562])).
fof(f15736,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X4)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f15604,f250])).
fof(f15400,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X4))),s(bool,X4)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f15138,f250])).
fof(f4488,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X7)))) | s(bool,X6) = s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f337,f396])).
fof(f4508,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X60)))) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) )),
  inference(superposition,[],[f337,f562])).
fof(f4716,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X7)))) | s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f338,f396])).
fof(f4736,plain,(
  ( ! [X61,X59,X60,X58] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X60)))) | s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) )),
  inference(superposition,[],[f338,f562])).
fof(f13948,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X0)))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f5672,f396])).
fof(f1159,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X8)))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X7)))) | s(bool,'T_0') = s(bool,sK4(X6,X7,bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f299,f396])).
fof(f5283,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X4)))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X3)))) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,sK8(X3,bool))) )),
  inference(superposition,[],[f317,f396])).
fof(f28709,plain,(
  ( ! [X14,X12,X13,X11] : (~p(s(bool,happ(s(fun(bool,bool),X12),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),X12),s(bool,sK6(X11,X12,bool))))) | s(bool,X14) = s(bool,sK5(X11,X12,bool)) | s(bool,'T_0') = s(bool,X14)) )),
  inference(superposition,[],[f301,f396])).
fof(f28710,plain,(
  ( ! [X17,X15,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X18)))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,sK6(X15,X16,bool))))) | s(bool,'T_0') = s(bool,X17) | s(bool,'T_0') = s(bool,sK5(X15,X16,bool))) )),
  inference(superposition,[],[f301,f396])).
fof(f28787,plain,(
  ( ! [X88,X89] : (p(s(bool,sK6(X88,'_i_0_0',bool))) | ~p(s(bool,sK5(X88,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X88),s(bool,X89))))) )),
  inference(forward_demodulation,[],[f28746,f290])).
fof(f28746,plain,(
  ( ! [X88,X89] : (~p(s(bool,sK5(X88,'_i_0_0',bool))) | ~p(s(bool,happ(s(fun(bool,bool),X88),s(bool,X89)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6(X88,'_i_0_0',bool)))))) )),
  inference(superposition,[],[f301,f290])).
fof(f326,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | ~p(s(bool,X0)) | p(s(bool,X1))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))))),
  inference(flattening,[],[f240])).
fof(f240,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | (~p(s(bool,X0)) | p(s(bool,X1)))) & ((p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))))),
  inference(nnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) <=> (~p(s(bool,X0)) | p(s(bool,X1))))),
  inference(ennf_transformation,[],[f130])).
fof(f130,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) <=> (p(s(bool,X0)) => p(s(bool,X1))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X47,X48] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47))),s(bool,X48)))) <=> (p(s(bool,X47)) => p(s(bool,X48))))),
  file('thm.benchmark.times_distinct','==>_HL_0')).
fof(f327,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f241])).
fof(f328,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f241])).
fof(f3293,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(condensation,[],[f3292])).
fof(f3292,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f3223,f251])).
fof(f3223,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f327,f396])).
fof(f3306,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(subsumption_resolution,[],[f3271,f248])).
fof(f3271,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,X1)))) )),
  inference(superposition,[],[f327,f250])).
fof(f3362,plain,(
  ( ! [X88,X87,X89] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X87))),s(bool,X89)))) | p(s(bool,sK4(X87,X88,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) )),
  inference(superposition,[],[f327,f562])).
fof(f3551,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f3525,f246])).
fof(f3525,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f328,f396])).
fof(f15650,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X3)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f15606,f246])).
fof(f15606,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X3)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f326,f396])).
fof(f323,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f239])).
fof(f239,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0)) | p(s(bool,X1))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(flattening,[],[f238])).
fof(f238,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | (p(s(bool,X0)) | p(s(bool,X1)))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(nnf_transformation,[],[f129])).
fof(f129,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) <=> (p(s(bool,X0)) | p(s(bool,X1))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X47,X48] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X47))),s(bool,X48)))) <=> (p(s(bool,X47)) | p(s(bool,X48))))),
  file('thm.benchmark.times_distinct','|bslash||slash|_HL_0')).
fof(f324,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f239])).
fof(f325,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f239])).
fof(f2240,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2223,f246])).
fof(f2223,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f324,f396])).
fof(f3015,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f2992,f246])).
fof(f2992,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X3))),s(bool,X2)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f325,f396])).
fof(f15182,plain,(
  ( ! [X105,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X104))),s(bool,X106)))) | p(s(bool,sK4(X104,X105,bool))) | p(s(bool,X106)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X105)))) )),
  inference(superposition,[],[f323,f562])).
fof(f15226,plain,(
  ( ! [X105,X106,X104] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X106))),s(bool,X104)))) | p(s(bool,X106)) | p(s(bool,sK4(X104,X105,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X105)))) )),
  inference(superposition,[],[f323,f562])).
fof(f15245,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,X0)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f15244])).
fof(f15244,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f15141,f251])).
fof(f15141,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X6))),s(bool,X7)))) | p(s(bool,X5)) | p(s(bool,X7)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f323,f396])).
fof(f15308,plain,(
  ( ! [X0,X1] : (p(s(bool,X0)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f15307])).
fof(f15307,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X7))),s(bool,X6)))) | p(s(bool,X7)) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f15185,f251])).
fof(f15185,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X7))),s(bool,X6)))) | p(s(bool,X7)) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f323,f396])).
fof(f15373,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,X2)) | p(s(bool,X3)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f15228,f246])).
fof(f15228,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,X2)) | p(s(bool,X3)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X2))),s(bool,X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f323,f396])).
fof(f4489,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X10))),s(bool,X11)))) | s(bool,X9) = s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f337,f396])).
fof(f4498,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X36))),s(bool,X37)))) | s(bool,'T_0') = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f337,f396])).
fof(f4717,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X10))),s(bool,X11)))) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f338,f396])).
fof(f4726,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X36))),s(bool,X37)))) | s(bool,'T_0') != s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f338,f396])).
fof(f4749,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X11))),s(bool,X10)))) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f338,f396])).
fof(f4758,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X37))),s(bool,X36)))) | s(bool,'T_0') != s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) )),
  inference(superposition,[],[f338,f396])).
fof(f320,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f237])).
fof(f237,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) | (p(s(bool,X0)) & p(s(bool,X1)))) & (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(flattening,[],[f236])).
fof(f236,plain,(
  ! [X0,X1] : ((~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) | (p(s(bool,X0)) & p(s(bool,X1)))) & ((~p(s(bool,X0)) | ~p(s(bool,X1))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1))))))),
  inference(nnf_transformation,[],[f128])).
fof(f128,plain,(
  ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) <=> (p(s(bool,X0)) & p(s(bool,X1))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X47,X48] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X47))),s(bool,X48)))) <=> (p(s(bool,X47)) & p(s(bool,X48))))),
  file('thm.benchmark.times_distinct','|slash||bslash|_HL_0')).
fof(f321,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1)))) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f237])).
fof(f322,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | ~p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1))))) )),
  inference(cnf_transformation,[],[f237])).
fof(f1293,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X20))),s(bool,X21)))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f1259,f248])).
fof(f1259,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X20))),s(bool,X21)))) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f320,f250])).
fof(f1300,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,X0)) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1280,f246])).
fof(f1280,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | s(bool,X2) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f320,f396])).
fof(f1988,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X25))),s(bool,X24)))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(subsumption_resolution,[],[f1967,f248])).
fof(f1967,plain,(
  ( ! [X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X25))),s(bool,X24)))) | p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f321,f250])).
fof(f1998,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,X5)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X4))),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f1976,f246])).
fof(f1976,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X4))),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f321,f396])).
fof(f3356,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X69))),s(bool,X71)))) | p(s(bool,sK4(X69,X70,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X70)))) )),
  inference(superposition,[],[f320,f562])).
fof(f3359,plain,(
  ( ! [X80,X78,X79] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X80))),s(bool,X78)))) | p(s(bool,sK4(X78,X79,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X79)))) )),
  inference(superposition,[],[f321,f562])).
fof(f5708,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,X3)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f5674,f246])).
fof(f5674,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | ~p(s(bool,X3)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X2))),s(bool,X3)))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f322,f396])).
fof(f31922,plain,(
  ( ! [X208,X209] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X209))),s(bool,X208)))) | p(s(bool,X208))) )),
  inference(superposition,[],[f320,f341])).
fof(f31921,plain,(
  ( ! [X206,X207] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X207))),s(bool,X206)))) | p(s(bool,X207))) )),
  inference(superposition,[],[f321,f341])).
fof(f31923,plain,(
  ( ! [X210,X211] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X211))),s(bool,X210)))) | p(s(bool,X210))) )),
  inference(superposition,[],[f327,f341])).
fof(f31924,plain,(
  ( ! [X212,X213] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x1x0_2'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X213))),s(bool,X212)))) | p(s(bool,X212)) | p(s(bool,X213))) )),
  inference(superposition,[],[f323,f341])).
fof(f3885,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f3813,f359])).
fof(f3813,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f2221,f325])).
fof(f3884,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))),s(bool,X1))))) )),
  inference(forward_demodulation,[],[f3814,f359])).
fof(f3814,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X1))))))) )),
  inference(unit_resulting_resolution,[],[f2221,f328])).
fof(f15649,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,X105)) | p(s(bool,X107)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,sK4(X105,X106,bool)))),s(bool,X107)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X106)))) )),
  inference(superposition,[],[f326,f562])).
fof(f15684,plain,(
  ( ! [X74,X72,X71,X73] : (p(s(bool,X73)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X71,bool),X72))))),s(bool,X73)))) | s(X71,X74) = s(X71,sK4(X74,X72,X71))) )),
  inference(subsumption_resolution,[],[f15635,f246])).
fof(f15635,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'|dollar|exists_1'(s(fun(X71,bool),X72))))),s(bool,X73)))) | s(X71,X74) = s(X71,sK4(X74,X72,X71))) )),
  inference(superposition,[],[f326,f562])).
fof(f5707,plain,(
  ( ! [X88,X87,X86] : (~p(s(bool,X86)) | ~p(s(bool,X88)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,sK4(X86,X87,bool)))),s(bool,X88)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X87)))) )),
  inference(superposition,[],[f322,f562])).
fof(f5728,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,X58)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'|dollar|exists_1'(s(fun(X56,bool),X57))))),s(bool,X58)))) | s(X56,X59) = s(X56,sK4(X59,X57,X56))) )),
  inference(subsumption_resolution,[],[f5695,f246])).
fof(f5695,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,'T_0')) | ~p(s(bool,X58)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'|dollar|exists_1'(s(fun(X56,bool),X57))))),s(bool,X58)))) | s(X56,X59) = s(X56,sK4(X59,X57,X56))) )),
  inference(superposition,[],[f322,f562])).
fof(f3451,plain,(
  ( ! [X57,X58,X56,X55] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X55,bool),X56))))),s(bool,X57)))) | s(X55,X58) = s(X55,sK4(X58,X56,X55))) )),
  inference(subsumption_resolution,[],[f3404,f246])).
fof(f3404,plain,(
  ( ! [X57,X58,X56,X55] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'|dollar|exists_1'(s(fun(X55,bool),X56))))),s(bool,X57)))) | s(X55,X58) = s(X55,sK4(X58,X56,X55))) )),
  inference(superposition,[],[f324,f562])).
fof(f3360,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,X81)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,sK4(X81,X82,bool)))),s(bool,X83)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X82)))) )),
  inference(superposition,[],[f324,f562])).
fof(f1157,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X1)))) | s(bool,X2) = s(bool,sK4(X0,X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f299,f396])).
fof(f5282,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),X1)))) | s(bool,X2) = s(bool,sK8(X1,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f317,f396])).
fof(f4520,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X7))),s(bool,'T_0')))) | s(bool,X6) = s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f337,f396])).
fof(f4540,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X60))),s(bool,'T_0')))) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) )),
  inference(superposition,[],[f337,f562])).
fof(f4748,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X7))),s(bool,'T_0')))) | s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f338,f396])).
fof(f4768,plain,(
  ( ! [X61,X59,X60,X58] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X60))),s(bool,'T_0')))) | s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) )),
  inference(superposition,[],[f338,f562])).
fof(f13982,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f13938,f359])).
fof(f13938,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f5672,f325])).
fof(f12971,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f12879,f359])).
fof(f12879,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f3523,f325])).
fof(f12349,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f12257,f359])).
fof(f12257,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f2990,f325])).
fof(f13981,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f13939,f359])).
fof(f13939,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f5672,f328])).
fof(f12970,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f12880,f359])).
fof(f12880,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f3523,f328])).
fof(f12348,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))))),s(bool,'T_0'))))) )),
  inference(forward_demodulation,[],[f12258,f359])).
fof(f12258,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f2990,f328])).
fof(f3564,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK4(X56,X54,X53))) )),
  inference(subsumption_resolution,[],[f3544,f246])).
fof(f3544,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X55))),s(bool,'|dollar|exists_1'(s(fun(X53,bool),X54)))))) | s(X53,X56) = s(X53,sK4(X56,X54,X53))) )),
  inference(superposition,[],[f328,f562])).
fof(f3452,plain,(
  ( ! [X61,X59,X62,X60] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X61))),s(bool,'|dollar|exists_1'(s(fun(X59,bool),X60)))))) | s(X59,X62) = s(X59,sK4(X62,X60,X59))) )),
  inference(subsumption_resolution,[],[f3405,f246])).
fof(f3405,plain,(
  ( ! [X61,X59,X62,X60] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X61))),s(bool,'|dollar|exists_1'(s(fun(X59,bool),X60)))))) | s(X59,X62) = s(X59,sK4(X62,X60,X59))) )),
  inference(superposition,[],[f325,f562])).
fof(f3550,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X75))),s(bool,sK4(X73,X74,bool))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X74)))) )),
  inference(superposition,[],[f328,f562])).
fof(f3361,plain,(
  ( ! [X85,X86,X84] : (~p(s(bool,X84)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X86))),s(bool,sK4(X84,X85,bool))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X85)))) )),
  inference(superposition,[],[f325,f562])).
fof(f33955,plain,(
  ( ! [X350,X344,X346,X343,X349,X345,X347,X348] : (p(s(bool,happ(s(fun(fun(X343,X344),bool),happ(s(fun(fun(X343,X344),fun(fun(X343,X344),bool)),'=_0'),s(fun(X343,X344),happ(s(fun(X347,fun(X343,X344)),'_dst_x00x11_2'(s(fun(X345,X344),X346),s(fun(X347,fun(X343,X345)),X348))),s(X347,X349))))),s(fun(X343,X344),X350)))) | s(fun(X343,X344),X350) != s(fun(X343,X344),'_dst_x0x1_2'(s(fun(X345,X344),X346),s(fun(X343,X345),happ(s(fun(X347,fun(X343,X345)),X348),s(X347,X349)))))) )),
  inference(superposition,[],[f338,f358])).
fof(f33953,plain,(
  ( ! [X327,X333,X329,X331,X332,X334,X328,X330] : (~p(s(bool,happ(s(fun(fun(X327,X328),bool),happ(s(fun(fun(X327,X328),fun(fun(X327,X328),bool)),'=_0'),s(fun(X327,X328),happ(s(fun(X331,fun(X327,X328)),'_dst_x00x11_2'(s(fun(X329,X328),X330),s(fun(X331,fun(X327,X329)),X332))),s(X331,X333))))),s(fun(X327,X328),X334)))) | s(fun(X327,X328),X334) = s(fun(X327,X328),'_dst_x0x1_2'(s(fun(X329,X328),X330),s(fun(X327,X329),happ(s(fun(X331,fun(X327,X329)),X332),s(X331,X333)))))) )),
  inference(superposition,[],[f337,f358])).
fof(f34011,plain,(
  ( ! [X364,X366,X362,X368,X365,X367,X361,X363] : (p(s(bool,happ(s(fun(fun(X361,X362),bool),happ(s(fun(fun(X361,X362),fun(fun(X361,X362),bool)),'=_0'),s(fun(X361,X362),'_dst_x0x1_2'(s(fun(X364,X362),X365),s(fun(X361,X364),happ(s(fun(X363,fun(X361,X364)),X366),s(X363,X367))))))),s(fun(X361,X362),X368)))) | s(fun(X361,X362),X368) != s(fun(X361,X362),happ(s(fun(X363,fun(X361,X362)),'_dst_x00x11_2'(s(fun(X364,X362),X365),s(fun(X363,fun(X361,X364)),X366))),s(X363,X367)))) )),
  inference(superposition,[],[f338,f358])).
fof(f34009,plain,(
  ( ! [X350,X346,X352,X349,X351,X345,X347,X348] : (~p(s(bool,happ(s(fun(fun(X345,X346),bool),happ(s(fun(fun(X345,X346),fun(fun(X345,X346),bool)),'=_0'),s(fun(X345,X346),'_dst_x0x1_2'(s(fun(X348,X346),X349),s(fun(X345,X348),happ(s(fun(X347,fun(X345,X348)),X350),s(X347,X351))))))),s(fun(X345,X346),X352)))) | s(fun(X345,X346),X352) = s(fun(X345,X346),happ(s(fun(X347,fun(X345,X346)),'_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350))),s(X347,X351)))) )),
  inference(superposition,[],[f337,f358])).
fof(f37530,plain,(
  ( ! [X524,X526,X520,X522,X518,X525,X521,X523,X517,X519] : (p(s(bool,happ(s(fun(fun(X517,X518),bool),happ(s(fun(fun(X517,X518),fun(fun(X517,X518),bool)),'=_0'),s(fun(X517,X518),happ(s(fun(X522,fun(X517,X518)),'_dst_x00x10x01_3'(s(fun(X519,fun(X520,X518)),X521),s(fun(X522,X519),X523),s(fun(X517,X520),X525))),s(X522,X524))))),s(fun(X517,X518),X526)))) | s(fun(X517,X518),X526) != s(fun(X517,X518),'_dst_x0x0x1_3'(s(fun(X519,fun(X520,X518)),X521),s(X519,happ(s(fun(X522,X519),X523),s(X522,X524))),s(fun(X517,X520),X525)))) )),
  inference(superposition,[],[f338,f362])).
fof(f37528,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X501,X503,X497] : (~p(s(bool,happ(s(fun(fun(X497,X498),bool),happ(s(fun(fun(X497,X498),fun(fun(X497,X498),bool)),'=_0'),s(fun(X497,X498),happ(s(fun(X502,fun(X497,X498)),'_dst_x00x10x01_3'(s(fun(X499,fun(X500,X498)),X501),s(fun(X502,X499),X503),s(fun(X497,X500),X505))),s(X502,X504))))),s(fun(X497,X498),X506)))) | s(fun(X497,X498),X506) = s(fun(X497,X498),'_dst_x0x0x1_3'(s(fun(X499,fun(X500,X498)),X501),s(X499,happ(s(fun(X502,X499),X503),s(X502,X504))),s(fun(X497,X500),X505)))) )),
  inference(superposition,[],[f337,f362])).
fof(f41760,plain,(
  ( ! [X660,X656,X658,X652,X654,X661,X657,X659,X653,X655] : (p(s(bool,happ(s(fun(fun(X652,X653),bool),happ(s(fun(fun(X652,X653),fun(fun(X652,X653),bool)),'=_0'),s(fun(X652,X653),happ(s(fun(X658,fun(X652,X653)),'_dst_x00x01x11_3'(s(fun(X654,fun(X655,X653)),X656),s(fun(X652,X654),X657),s(fun(X658,fun(X652,X655)),X659))),s(X658,X660))))),s(fun(X652,X653),X661)))) | s(fun(X652,X653),X661) != s(fun(X652,X653),'_dst_x0x1x1_3'(s(fun(X654,fun(X655,X653)),X656),s(fun(X652,X654),X657),s(fun(X652,X655),happ(s(fun(X658,fun(X652,X655)),X659),s(X658,X660)))))) )),
  inference(superposition,[],[f338,f364])).
fof(f41758,plain,(
  ( ! [X639,X633,X635,X640,X636,X638,X632,X634,X641,X637] : (~p(s(bool,happ(s(fun(fun(X632,X633),bool),happ(s(fun(fun(X632,X633),fun(fun(X632,X633),bool)),'=_0'),s(fun(X632,X633),happ(s(fun(X638,fun(X632,X633)),'_dst_x00x01x11_3'(s(fun(X634,fun(X635,X633)),X636),s(fun(X632,X634),X637),s(fun(X638,fun(X632,X635)),X639))),s(X638,X640))))),s(fun(X632,X633),X641)))) | s(fun(X632,X633),X641) = s(fun(X632,X633),'_dst_x0x1x1_3'(s(fun(X634,fun(X635,X633)),X636),s(fun(X632,X634),X637),s(fun(X632,X635),happ(s(fun(X638,fun(X632,X635)),X639),s(X638,X640)))))) )),
  inference(superposition,[],[f337,f364])).
fof(f43782,plain,(
  ( ! [X761,X763,X757,X759,X755,X760,X762,X756,X758,X754] : (p(s(bool,happ(s(fun(fun(X754,X755),bool),happ(s(fun(fun(X754,X755),fun(fun(X754,X755),bool)),'=_0'),s(fun(X754,X755),happ(s(fun(X759,fun(X754,X755)),'_dst_x00x11x11_3'(s(fun(X756,fun(X757,X755)),X758),s(fun(X759,fun(X754,X756)),X760),s(fun(X759,fun(X754,X757)),X762))),s(X759,X761))))),s(fun(X754,X755),X763)))) | s(fun(X754,X755),X763) != s(fun(X754,X755),'_dst_x0x1x1_3'(s(fun(X756,fun(X757,X755)),X758),s(fun(X754,X756),happ(s(fun(X759,fun(X754,X756)),X760),s(X759,X761))),s(fun(X754,X757),happ(s(fun(X759,fun(X754,X757)),X762),s(X759,X761)))))) )),
  inference(superposition,[],[f338,f365])).
fof(f43780,plain,(
  ( ! [X736,X738,X734,X741,X743,X737,X739,X735,X740,X742] : (~p(s(bool,happ(s(fun(fun(X734,X735),bool),happ(s(fun(fun(X734,X735),fun(fun(X734,X735),bool)),'=_0'),s(fun(X734,X735),happ(s(fun(X739,fun(X734,X735)),'_dst_x00x11x11_3'(s(fun(X736,fun(X737,X735)),X738),s(fun(X739,fun(X734,X736)),X740),s(fun(X739,fun(X734,X737)),X742))),s(X739,X741))))),s(fun(X734,X735),X743)))) | s(fun(X734,X735),X743) = s(fun(X734,X735),'_dst_x0x1x1_3'(s(fun(X736,fun(X737,X735)),X738),s(fun(X734,X736),happ(s(fun(X739,fun(X734,X736)),X740),s(X739,X741))),s(fun(X734,X737),happ(s(fun(X739,fun(X734,X737)),X742),s(X739,X741)))))) )),
  inference(superposition,[],[f337,f365])).
fof(f38244,plain,(
  ( ! [X573,X575,X580,X582,X576,X578,X574,X581,X577,X579] : (p(s(bool,happ(s(fun(fun(X573,X574),bool),happ(s(fun(fun(X573,X574),fun(fun(X573,X574),bool)),'=_0'),s(fun(X573,X574),happ(s(fun(X579,fun(X573,X574)),'_dst_x00x00x11_3'(s(fun(X575,fun(X576,X574)),X577),s(X575,X578),s(fun(X579,fun(X573,X576)),X580))),s(X579,X581))))),s(fun(X573,X574),X582)))) | s(fun(X573,X574),X582) != s(fun(X573,X574),'_dst_x0x0x1_3'(s(fun(X575,fun(X576,X574)),X577),s(X575,X578),s(fun(X573,X576),happ(s(fun(X579,fun(X573,X576)),X580),s(X579,X581)))))) )),
  inference(superposition,[],[f338,f363])).
fof(f38242,plain,(
  ( ! [X561,X557,X559,X553,X555,X560,X562,X556,X558,X554] : (~p(s(bool,happ(s(fun(fun(X553,X554),bool),happ(s(fun(fun(X553,X554),fun(fun(X553,X554),bool)),'=_0'),s(fun(X553,X554),happ(s(fun(X559,fun(X553,X554)),'_dst_x00x00x11_3'(s(fun(X555,fun(X556,X554)),X557),s(X555,X558),s(fun(X559,fun(X553,X556)),X560))),s(X559,X561))))),s(fun(X553,X554),X562)))) | s(fun(X553,X554),X562) = s(fun(X553,X554),'_dst_x0x0x1_3'(s(fun(X555,fun(X556,X554)),X557),s(X555,X558),s(fun(X553,X556),happ(s(fun(X559,fun(X553,X556)),X560),s(X559,X561)))))) )),
  inference(superposition,[],[f337,f363])).
fof(f37599,plain,(
  ( ! [X575,X584,X580,X582,X576,X578,X581,X583,X577,X579] : (p(s(bool,happ(s(fun(fun(X575,X576),bool),happ(s(fun(fun(X575,X576),fun(fun(X575,X576),bool)),'=_0'),s(fun(X575,X576),'_dst_x0x0x1_3'(s(fun(X578,fun(X579,X576)),X580),s(X578,happ(s(fun(X577,X578),X581),s(X577,X583))),s(fun(X575,X579),X582))))),s(fun(X575,X576),X584)))) | s(fun(X575,X576),X584) != s(fun(X575,X576),happ(s(fun(X577,fun(X575,X576)),'_dst_x00x10x01_3'(s(fun(X578,fun(X579,X576)),X580),s(fun(X577,X578),X581),s(fun(X575,X579),X582))),s(X577,X583)))) )),
  inference(superposition,[],[f338,f362])).
fof(f37597,plain,(
  ( ! [X561,X563,X557,X559,X555,X564,X560,X562,X556,X558] : (~p(s(bool,happ(s(fun(fun(X555,X556),bool),happ(s(fun(fun(X555,X556),fun(fun(X555,X556),bool)),'=_0'),s(fun(X555,X556),'_dst_x0x0x1_3'(s(fun(X558,fun(X559,X556)),X560),s(X558,happ(s(fun(X557,X558),X561),s(X557,X563))),s(fun(X555,X559),X562))))),s(fun(X555,X556),X564)))) | s(fun(X555,X556),X564) = s(fun(X555,X556),happ(s(fun(X557,fun(X555,X556)),'_dst_x00x10x01_3'(s(fun(X558,fun(X559,X556)),X560),s(fun(X557,X558),X561),s(fun(X555,X559),X562))),s(X557,X563)))) )),
  inference(superposition,[],[f337,f362])).
fof(f38318,plain,(
  ( ! [X639,X635,X640,X642,X636,X638,X634,X641,X643,X637] : (p(s(bool,happ(s(fun(fun(X634,X635),bool),happ(s(fun(fun(X634,X635),fun(fun(X634,X635),bool)),'=_0'),s(fun(X634,X635),'_dst_x0x0x1_3'(s(fun(X637,fun(X638,X635)),X639),s(X637,X640),s(fun(X634,X638),happ(s(fun(X636,fun(X634,X638)),X641),s(X636,X642))))))),s(fun(X634,X635),X643)))) | s(fun(X634,X635),X643) != s(fun(X634,X635),happ(s(fun(X636,fun(X634,X635)),'_dst_x00x00x11_3'(s(fun(X637,fun(X638,X635)),X639),s(X637,X640),s(fun(X636,fun(X634,X638)),X641))),s(X636,X642)))) )),
  inference(superposition,[],[f338,f363])).
fof(f38316,plain,(
  ( ! [X621,X623,X617,X619,X615,X620,X622,X616,X618,X614] : (~p(s(bool,happ(s(fun(fun(X614,X615),bool),happ(s(fun(fun(X614,X615),fun(fun(X614,X615),bool)),'=_0'),s(fun(X614,X615),'_dst_x0x0x1_3'(s(fun(X617,fun(X618,X615)),X619),s(X617,X620),s(fun(X614,X618),happ(s(fun(X616,fun(X614,X618)),X621),s(X616,X622))))))),s(fun(X614,X615),X623)))) | s(fun(X614,X615),X623) = s(fun(X614,X615),happ(s(fun(X616,fun(X614,X615)),'_dst_x00x00x11_3'(s(fun(X617,fun(X618,X615)),X619),s(X617,X620),s(fun(X616,fun(X614,X618)),X621))),s(X616,X622)))) )),
  inference(superposition,[],[f337,f363])).
fof(f41850,plain,(
  ( ! [X798,X802,X800,X806,X804,X799,X797,X803,X801,X805] : (p(s(bool,happ(s(fun(fun(X797,X798),bool),happ(s(fun(fun(X797,X798),fun(fun(X797,X798),bool)),'=_0'),s(fun(X797,X798),'_dst_x0x1x1_3'(s(fun(X800,fun(X801,X798)),X802),s(fun(X797,X800),X803),s(fun(X797,X801),happ(s(fun(X799,fun(X797,X801)),X804),s(X799,X805))))))),s(fun(X797,X798),X806)))) | s(fun(X797,X798),X806) != s(fun(X797,X798),happ(s(fun(X799,fun(X797,X798)),'_dst_x00x01x11_3'(s(fun(X800,fun(X801,X798)),X802),s(fun(X797,X800),X803),s(fun(X799,fun(X797,X801)),X804))),s(X799,X805)))) )),
  inference(superposition,[],[f338,f364])).
fof(f41848,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X785,X778,X782,X780] : (~p(s(bool,happ(s(fun(fun(X777,X778),bool),happ(s(fun(fun(X777,X778),fun(fun(X777,X778),bool)),'=_0'),s(fun(X777,X778),'_dst_x0x1x1_3'(s(fun(X780,fun(X781,X778)),X782),s(fun(X777,X780),X783),s(fun(X777,X781),happ(s(fun(X779,fun(X777,X781)),X784),s(X779,X785))))))),s(fun(X777,X778),X786)))) | s(fun(X777,X778),X786) = s(fun(X777,X778),happ(s(fun(X779,fun(X777,X778)),'_dst_x00x01x11_3'(s(fun(X780,fun(X781,X778)),X782),s(fun(X777,X780),X783),s(fun(X779,fun(X777,X781)),X784))),s(X779,X785)))) )),
  inference(superposition,[],[f337,f364])).
fof(f43695,plain,(
  ( ! [X912,X914,X907,X905,X911,X909,X913,X906,X910,X908] : (p(s(bool,happ(s(fun(fun(X905,X906),bool),happ(s(fun(fun(X905,X906),fun(fun(X905,X906),bool)),'=_0'),s(fun(X905,X906),'_dst_x0x1x1_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X905,X908),happ(s(fun(X907,fun(X905,X908)),X911),s(X907,X913))),s(fun(X905,X909),happ(s(fun(X907,fun(X905,X909)),X912),s(X907,X913))))))),s(fun(X905,X906),X914)))) | s(fun(X905,X906),X914) != s(fun(X905,X906),happ(s(fun(X907,fun(X905,X906)),'_dst_x00x11x11_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X907,fun(X905,X908)),X911),s(fun(X907,fun(X905,X909)),X912))),s(X907,X913)))) )),
  inference(superposition,[],[f338,f365])).
fof(f43693,plain,(
  ( ! [X893,X887,X885,X890,X888,X894,X892,X886,X891,X889] : (~p(s(bool,happ(s(fun(fun(X885,X886),bool),happ(s(fun(fun(X885,X886),fun(fun(X885,X886),bool)),'=_0'),s(fun(X885,X886),'_dst_x0x1x1_3'(s(fun(X888,fun(X889,X886)),X890),s(fun(X885,X888),happ(s(fun(X887,fun(X885,X888)),X891),s(X887,X893))),s(fun(X885,X889),happ(s(fun(X887,fun(X885,X889)),X892),s(X887,X893))))))),s(fun(X885,X886),X894)))) | s(fun(X885,X886),X894) = s(fun(X885,X886),happ(s(fun(X887,fun(X885,X886)),'_dst_x00x11x11_3'(s(fun(X888,fun(X889,X886)),X890),s(fun(X887,fun(X885,X888)),X891),s(fun(X887,fun(X885,X889)),X892))),s(X887,X893)))) )),
  inference(superposition,[],[f337,f365])).
fof(f37311,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,happ(s(fun(X5,X2),X6),s(X5,X7))),s(fun(X0,X3),X8))))),s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,X2),X6),s(fun(X0,X3),X8))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f362,f338])).
fof(f37531,plain,(
  ( ! [X536,X532,X534,X528,X530,X533,X535,X529,X531,X527] : (p(s(bool,happ(s(fun(fun(X527,X528),bool),happ(s(fun(fun(X527,X528),fun(fun(X527,X528),bool)),'=_0'),s(fun(X527,X528),X536))),s(fun(X527,X528),happ(s(fun(X532,fun(X527,X528)),'_dst_x00x10x01_3'(s(fun(X529,fun(X530,X528)),X531),s(fun(X532,X529),X533),s(fun(X527,X530),X535))),s(X532,X534)))))) | s(fun(X527,X528),X536) != s(fun(X527,X528),'_dst_x0x0x1_3'(s(fun(X529,fun(X530,X528)),X531),s(X529,happ(s(fun(X532,X529),X533),s(X532,X534))),s(fun(X527,X530),X535)))) )),
  inference(superposition,[],[f338,f362])).
fof(f37529,plain,(
  ( ! [X509,X511,X507,X516,X512,X514,X508,X510,X513,X515] : (~p(s(bool,happ(s(fun(fun(X507,X508),bool),happ(s(fun(fun(X507,X508),fun(fun(X507,X508),bool)),'=_0'),s(fun(X507,X508),X516))),s(fun(X507,X508),happ(s(fun(X512,fun(X507,X508)),'_dst_x00x10x01_3'(s(fun(X509,fun(X510,X508)),X511),s(fun(X512,X509),X513),s(fun(X507,X510),X515))),s(X512,X514)))))) | s(fun(X507,X508),X516) = s(fun(X507,X508),'_dst_x0x0x1_3'(s(fun(X509,fun(X510,X508)),X511),s(X509,happ(s(fun(X512,X509),X513),s(X512,X514))),s(fun(X507,X510),X515)))) )),
  inference(superposition,[],[f337,f362])).
fof(f33786,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X3),s(fun(X0,X2),happ(s(fun(X4,fun(X0,X2)),X5),s(X4,X6))))))),s(fun(X0,X1),happ(s(fun(X4,fun(X0,X1)),'_dst_x00x11_2'(s(fun(X2,X1),X3),s(fun(X4,fun(X0,X2)),X5))),s(X4,X6))))))) )),
  inference(unit_resulting_resolution,[],[f358,f338])).
fof(f33956,plain,(
  ( ! [X356,X358,X352,X354,X351,X357,X353,X355] : (p(s(bool,happ(s(fun(fun(X351,X352),bool),happ(s(fun(fun(X351,X352),fun(fun(X351,X352),bool)),'=_0'),s(fun(X351,X352),X358))),s(fun(X351,X352),happ(s(fun(X355,fun(X351,X352)),'_dst_x00x11_2'(s(fun(X353,X352),X354),s(fun(X355,fun(X351,X353)),X356))),s(X355,X357)))))) | s(fun(X351,X352),X358) != s(fun(X351,X352),'_dst_x0x1_2'(s(fun(X353,X352),X354),s(fun(X351,X353),happ(s(fun(X355,fun(X351,X353)),X356),s(X355,X357)))))) )),
  inference(superposition,[],[f338,f358])).
fof(f33954,plain,(
  ( ! [X335,X341,X337,X339,X340,X342,X336,X338] : (~p(s(bool,happ(s(fun(fun(X335,X336),bool),happ(s(fun(fun(X335,X336),fun(fun(X335,X336),bool)),'=_0'),s(fun(X335,X336),X342))),s(fun(X335,X336),happ(s(fun(X339,fun(X335,X336)),'_dst_x00x11_2'(s(fun(X337,X336),X338),s(fun(X339,fun(X335,X337)),X340))),s(X339,X341)))))) | s(fun(X335,X336),X342) = s(fun(X335,X336),'_dst_x0x1_2'(s(fun(X337,X336),X338),s(fun(X335,X337),happ(s(fun(X339,fun(X335,X337)),X340),s(X339,X341)))))) )),
  inference(superposition,[],[f337,f358])).
fof(f41498,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))))))),s(fun(X0,X1),happ(s(fun(X6,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X6,fun(X0,X3)),X7))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f364,f338])).
fof(f41761,plain,(
  ( ! [X666,X668,X662,X664,X670,X667,X669,X663,X671,X665] : (p(s(bool,happ(s(fun(fun(X662,X663),bool),happ(s(fun(fun(X662,X663),fun(fun(X662,X663),bool)),'=_0'),s(fun(X662,X663),X671))),s(fun(X662,X663),happ(s(fun(X668,fun(X662,X663)),'_dst_x00x01x11_3'(s(fun(X664,fun(X665,X663)),X666),s(fun(X662,X664),X667),s(fun(X668,fun(X662,X665)),X669))),s(X668,X670)))))) | s(fun(X662,X663),X671) != s(fun(X662,X663),'_dst_x0x1x1_3'(s(fun(X664,fun(X665,X663)),X666),s(fun(X662,X664),X667),s(fun(X662,X665),happ(s(fun(X668,fun(X662,X665)),X669),s(X668,X670)))))) )),
  inference(superposition,[],[f338,f364])).
fof(f41759,plain,(
  ( ! [X648,X650,X644,X646,X642,X649,X651,X645,X647,X643] : (~p(s(bool,happ(s(fun(fun(X642,X643),bool),happ(s(fun(fun(X642,X643),fun(fun(X642,X643),bool)),'=_0'),s(fun(X642,X643),X651))),s(fun(X642,X643),happ(s(fun(X648,fun(X642,X643)),'_dst_x00x01x11_3'(s(fun(X644,fun(X645,X643)),X646),s(fun(X642,X644),X647),s(fun(X648,fun(X642,X645)),X649))),s(X648,X650)))))) | s(fun(X642,X643),X651) = s(fun(X642,X643),'_dst_x0x1x1_3'(s(fun(X644,fun(X645,X643)),X646),s(fun(X642,X644),X647),s(fun(X642,X645),happ(s(fun(X648,fun(X642,X645)),X649),s(X648,X650)))))) )),
  inference(superposition,[],[f337,f364])).
fof(f43783,plain,(
  ( ! [X765,X767,X771,X769,X773,X764,X766,X770,X768,X772] : (p(s(bool,happ(s(fun(fun(X764,X765),bool),happ(s(fun(fun(X764,X765),fun(fun(X764,X765),bool)),'=_0'),s(fun(X764,X765),X773))),s(fun(X764,X765),happ(s(fun(X769,fun(X764,X765)),'_dst_x00x11x11_3'(s(fun(X766,fun(X767,X765)),X768),s(fun(X769,fun(X764,X766)),X770),s(fun(X769,fun(X764,X767)),X772))),s(X769,X771)))))) | s(fun(X764,X765),X773) != s(fun(X764,X765),'_dst_x0x1x1_3'(s(fun(X766,fun(X767,X765)),X768),s(fun(X764,X766),happ(s(fun(X769,fun(X764,X766)),X770),s(X769,X771))),s(fun(X764,X767),happ(s(fun(X769,fun(X764,X767)),X772),s(X769,X771)))))) )),
  inference(superposition,[],[f338,f365])).
fof(f43781,plain,(
  ( ! [X753,X749,X751,X745,X747,X752,X748,X750,X744,X746] : (~p(s(bool,happ(s(fun(fun(X744,X745),bool),happ(s(fun(fun(X744,X745),fun(fun(X744,X745),bool)),'=_0'),s(fun(X744,X745),X753))),s(fun(X744,X745),happ(s(fun(X749,fun(X744,X745)),'_dst_x00x11x11_3'(s(fun(X746,fun(X747,X745)),X748),s(fun(X749,fun(X744,X746)),X750),s(fun(X749,fun(X744,X747)),X752))),s(X749,X751)))))) | s(fun(X744,X745),X753) = s(fun(X744,X745),'_dst_x0x1x1_3'(s(fun(X746,fun(X747,X745)),X748),s(fun(X744,X746),happ(s(fun(X749,fun(X744,X746)),X750),s(X749,X751))),s(fun(X744,X747),happ(s(fun(X749,fun(X744,X747)),X752),s(X749,X751)))))) )),
  inference(superposition,[],[f337,f365])).
fof(f37936,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))))))),s(fun(X0,X1),happ(s(fun(X6,fun(X0,X1)),'_dst_x00x00x11_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,X5),s(fun(X6,fun(X0,X3)),X7))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f363,f338])).
fof(f38245,plain,(
  ( ! [X592,X588,X590,X584,X586,X589,X591,X585,X587,X583] : (p(s(bool,happ(s(fun(fun(X583,X584),bool),happ(s(fun(fun(X583,X584),fun(fun(X583,X584),bool)),'=_0'),s(fun(X583,X584),X592))),s(fun(X583,X584),happ(s(fun(X589,fun(X583,X584)),'_dst_x00x00x11_3'(s(fun(X585,fun(X586,X584)),X587),s(X585,X588),s(fun(X589,fun(X583,X586)),X590))),s(X589,X591)))))) | s(fun(X583,X584),X592) != s(fun(X583,X584),'_dst_x0x0x1_3'(s(fun(X585,fun(X586,X584)),X587),s(X585,X588),s(fun(X583,X586),happ(s(fun(X589,fun(X583,X586)),X590),s(X589,X591)))))) )),
  inference(superposition,[],[f338,f363])).
fof(f38243,plain,(
  ( ! [X569,X571,X565,X567,X563,X572,X568,X570,X564,X566] : (~p(s(bool,happ(s(fun(fun(X563,X564),bool),happ(s(fun(fun(X563,X564),fun(fun(X563,X564),bool)),'=_0'),s(fun(X563,X564),X572))),s(fun(X563,X564),happ(s(fun(X569,fun(X563,X564)),'_dst_x00x00x11_3'(s(fun(X565,fun(X566,X564)),X567),s(X565,X568),s(fun(X569,fun(X563,X566)),X570))),s(X569,X571)))))) | s(fun(X563,X564),X572) = s(fun(X563,X564),'_dst_x0x0x1_3'(s(fun(X565,fun(X566,X564)),X567),s(X565,X568),s(fun(X563,X566),happ(s(fun(X569,fun(X563,X566)),X570),s(X569,X571)))))) )),
  inference(superposition,[],[f337,f363])).
fof(f33788,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x11_2'(s(fun(X3,X1),X4),s(fun(X2,fun(X0,X3)),X5))),s(X2,X6))))),s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X3,X1),X4),s(fun(X0,X3),happ(s(fun(X2,fun(X0,X3)),X5),s(X2,X6))))))))) )),
  inference(unit_resulting_resolution,[],[f358,f338])).
fof(f34012,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X369,X371] : (p(s(bool,happ(s(fun(fun(X369,X370),bool),happ(s(fun(fun(X369,X370),fun(fun(X369,X370),bool)),'=_0'),s(fun(X369,X370),X376))),s(fun(X369,X370),'_dst_x0x1_2'(s(fun(X372,X370),X373),s(fun(X369,X372),happ(s(fun(X371,fun(X369,X372)),X374),s(X371,X375)))))))) | s(fun(X369,X370),X376) != s(fun(X369,X370),happ(s(fun(X371,fun(X369,X370)),'_dst_x00x11_2'(s(fun(X372,X370),X373),s(fun(X371,fun(X369,X372)),X374))),s(X371,X375)))) )),
  inference(superposition,[],[f338,f358])).
fof(f34010,plain,(
  ( ! [X356,X358,X354,X360,X357,X359,X353,X355] : (~p(s(bool,happ(s(fun(fun(X353,X354),bool),happ(s(fun(fun(X353,X354),fun(fun(X353,X354),bool)),'=_0'),s(fun(X353,X354),X360))),s(fun(X353,X354),'_dst_x0x1_2'(s(fun(X356,X354),X357),s(fun(X353,X356),happ(s(fun(X355,fun(X353,X356)),X358),s(X355,X359)))))))) | s(fun(X353,X354),X360) = s(fun(X353,X354),happ(s(fun(X355,fun(X353,X354)),'_dst_x00x11_2'(s(fun(X356,X354),X357),s(fun(X355,fun(X353,X356)),X358))),s(X355,X359)))) )),
  inference(superposition,[],[f337,f358])).
fof(f37313,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,X3),X6),s(fun(X0,X4),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,X1)),X5),s(X3,happ(s(fun(X2,X3),X6),s(X2,X8))),s(fun(X0,X4),X7))))))) )),
  inference(unit_resulting_resolution,[],[f362,f338])).
fof(f37600,plain,(
  ( ! [X592,X594,X588,X590,X586,X593,X589,X591,X585,X587] : (p(s(bool,happ(s(fun(fun(X585,X586),bool),happ(s(fun(fun(X585,X586),fun(fun(X585,X586),bool)),'=_0'),s(fun(X585,X586),X594))),s(fun(X585,X586),'_dst_x0x0x1_3'(s(fun(X588,fun(X589,X586)),X590),s(X588,happ(s(fun(X587,X588),X591),s(X587,X593))),s(fun(X585,X589),X592)))))) | s(fun(X585,X586),X594) != s(fun(X585,X586),happ(s(fun(X587,fun(X585,X586)),'_dst_x00x10x01_3'(s(fun(X588,fun(X589,X586)),X590),s(fun(X587,X588),X591),s(fun(X585,X589),X592))),s(X587,X593)))) )),
  inference(superposition,[],[f338,f362])).
fof(f37598,plain,(
  ( ! [X573,X569,X571,X565,X567,X572,X574,X568,X570,X566] : (~p(s(bool,happ(s(fun(fun(X565,X566),bool),happ(s(fun(fun(X565,X566),fun(fun(X565,X566),bool)),'=_0'),s(fun(X565,X566),X574))),s(fun(X565,X566),'_dst_x0x0x1_3'(s(fun(X568,fun(X569,X566)),X570),s(X568,happ(s(fun(X567,X568),X571),s(X567,X573))),s(fun(X565,X569),X572)))))) | s(fun(X565,X566),X574) = s(fun(X565,X566),happ(s(fun(X567,fun(X565,X566)),'_dst_x00x10x01_3'(s(fun(X568,fun(X569,X566)),X570),s(fun(X567,X568),X571),s(fun(X565,X569),X572))),s(X567,X573)))) )),
  inference(superposition,[],[f337,f362])).
fof(f37938,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x00x11_3'(s(fun(X3,fun(X4,X1)),X5),s(X3,X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,X1)),X5),s(X3,X6),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8))))))))) )),
  inference(unit_resulting_resolution,[],[f363,f338])).
fof(f38319,plain,(
  ( ! [X652,X648,X650,X644,X646,X653,X649,X651,X645,X647] : (p(s(bool,happ(s(fun(fun(X644,X645),bool),happ(s(fun(fun(X644,X645),fun(fun(X644,X645),bool)),'=_0'),s(fun(X644,X645),X653))),s(fun(X644,X645),'_dst_x0x0x1_3'(s(fun(X647,fun(X648,X645)),X649),s(X647,X650),s(fun(X644,X648),happ(s(fun(X646,fun(X644,X648)),X651),s(X646,X652)))))))) | s(fun(X644,X645),X653) != s(fun(X644,X645),happ(s(fun(X646,fun(X644,X645)),'_dst_x00x00x11_3'(s(fun(X647,fun(X648,X645)),X649),s(X647,X650),s(fun(X646,fun(X644,X648)),X651))),s(X646,X652)))) )),
  inference(superposition,[],[f338,f363])).
fof(f38317,plain,(
  ( ! [X633,X629,X631,X625,X627,X632,X628,X630,X624,X626] : (~p(s(bool,happ(s(fun(fun(X624,X625),bool),happ(s(fun(fun(X624,X625),fun(fun(X624,X625),bool)),'=_0'),s(fun(X624,X625),X633))),s(fun(X624,X625),'_dst_x0x0x1_3'(s(fun(X627,fun(X628,X625)),X629),s(X627,X630),s(fun(X624,X628),happ(s(fun(X626,fun(X624,X628)),X631),s(X626,X632)))))))) | s(fun(X624,X625),X633) = s(fun(X624,X625),happ(s(fun(X626,fun(X624,X625)),'_dst_x00x00x11_3'(s(fun(X627,fun(X628,X625)),X629),s(X627,X630),s(fun(X626,fun(X624,X628)),X631))),s(X626,X632)))) )),
  inference(superposition,[],[f337,f363])).
fof(f41500,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),X6),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8))))))))) )),
  inference(unit_resulting_resolution,[],[f364,f338])).
fof(f41851,plain,(
  ( ! [X810,X808,X814,X812,X816,X811,X809,X815,X813,X807] : (p(s(bool,happ(s(fun(fun(X807,X808),bool),happ(s(fun(fun(X807,X808),fun(fun(X807,X808),bool)),'=_0'),s(fun(X807,X808),X816))),s(fun(X807,X808),'_dst_x0x1x1_3'(s(fun(X810,fun(X811,X808)),X812),s(fun(X807,X810),X813),s(fun(X807,X811),happ(s(fun(X809,fun(X807,X811)),X814),s(X809,X815)))))))) | s(fun(X807,X808),X816) != s(fun(X807,X808),happ(s(fun(X809,fun(X807,X808)),'_dst_x00x01x11_3'(s(fun(X810,fun(X811,X808)),X812),s(fun(X807,X810),X813),s(fun(X809,fun(X807,X811)),X814))),s(X809,X815)))) )),
  inference(superposition,[],[f338,f364])).
fof(f41849,plain,(
  ( ! [X796,X790,X788,X795,X793,X787,X791,X789,X794,X792] : (~p(s(bool,happ(s(fun(fun(X787,X788),bool),happ(s(fun(fun(X787,X788),fun(fun(X787,X788),bool)),'=_0'),s(fun(X787,X788),X796))),s(fun(X787,X788),'_dst_x0x1x1_3'(s(fun(X790,fun(X791,X788)),X792),s(fun(X787,X790),X793),s(fun(X787,X791),happ(s(fun(X789,fun(X787,X791)),X794),s(X789,X795)))))))) | s(fun(X787,X788),X796) = s(fun(X787,X788),happ(s(fun(X789,fun(X787,X788)),'_dst_x00x01x11_3'(s(fun(X790,fun(X791,X788)),X792),s(fun(X787,X790),X793),s(fun(X789,fun(X787,X791)),X794))),s(X789,X795)))) )),
  inference(superposition,[],[f337,f364])).
fof(f43696,plain,(
  ( ! [X922,X920,X918,X916,X924,X915,X921,X919,X917,X923] : (p(s(bool,happ(s(fun(fun(X915,X916),bool),happ(s(fun(fun(X915,X916),fun(fun(X915,X916),bool)),'=_0'),s(fun(X915,X916),X924))),s(fun(X915,X916),'_dst_x0x1x1_3'(s(fun(X918,fun(X919,X916)),X920),s(fun(X915,X918),happ(s(fun(X917,fun(X915,X918)),X921),s(X917,X923))),s(fun(X915,X919),happ(s(fun(X917,fun(X915,X919)),X922),s(X917,X923)))))))) | s(fun(X915,X916),X924) != s(fun(X915,X916),happ(s(fun(X917,fun(X915,X916)),'_dst_x00x11x11_3'(s(fun(X918,fun(X919,X916)),X920),s(fun(X917,fun(X915,X918)),X921),s(fun(X917,fun(X915,X919)),X922))),s(X917,X923)))) )),
  inference(superposition,[],[f338,f365])).
fof(f43694,plain,(
  ( ! [X895,X899,X897,X903,X901,X904,X898,X896,X902,X900] : (~p(s(bool,happ(s(fun(fun(X895,X896),bool),happ(s(fun(fun(X895,X896),fun(fun(X895,X896),bool)),'=_0'),s(fun(X895,X896),X904))),s(fun(X895,X896),'_dst_x0x1x1_3'(s(fun(X898,fun(X899,X896)),X900),s(fun(X895,X898),happ(s(fun(X897,fun(X895,X898)),X901),s(X897,X903))),s(fun(X895,X899),happ(s(fun(X897,fun(X895,X899)),X902),s(X897,X903)))))))) | s(fun(X895,X896),X904) = s(fun(X895,X896),happ(s(fun(X897,fun(X895,X896)),'_dst_x00x11x11_3'(s(fun(X898,fun(X899,X896)),X900),s(fun(X897,fun(X895,X898)),X901),s(fun(X897,fun(X895,X899)),X902))),s(X897,X903)))) )),
  inference(superposition,[],[f337,f365])).
fof(f13342,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f4794,f319])).
fof(f43297,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f43211,f246])).
fof(f43211,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f5307,f396])).
fof(f5307,plain,(
  ( ! [X35,X34] : (~p(s(bool,X35)) | p(s(bool,happ(s(fun(fun(X34,bool),bool),'!_1'),s(fun(X34,bool),'_dst_x0_1'(s(bool,X35))))))) )),
  inference(superposition,[],[f317,f330])).
fof(f32436,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,happ(s(fun(fun(X3,bool),bool),'?_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f32365,f246])).
fof(f32365,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X3,bool),bool),'?_1'),s(fun(X3,bool),'_dst_x0_1'(s(bool,X2)))))) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f4018,f396])).
fof(f4018,plain,(
  ( ! [X45,X46] : (~p(s(bool,X46)) | p(s(bool,happ(s(fun(fun(X45,bool),bool),'?_1'),s(fun(X45,bool),'_dst_x0_1'(s(bool,X46))))))) )),
  inference(superposition,[],[f319,f330])).
fof(f32467,plain,(
  ( ! [X94,X95,X93,X96] : (p(s(bool,happ(s(fun(fun(X95,bool),bool),'?_1'),s(fun(X95,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X93,bool),X94)))))))) | s(X93,X96) = s(X93,sK4(X96,X94,X93))) )),
  inference(subsumption_resolution,[],[f32405,f246])).
fof(f32405,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X95,bool),bool),'?_1'),s(fun(X95,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X93,bool),X94)))))))) | s(X93,X96) = s(X93,sK4(X96,X94,X93))) )),
  inference(superposition,[],[f4018,f562])).
fof(f43329,plain,(
  ( ! [X94,X97,X95,X96] : (p(s(bool,happ(s(fun(fun(X96,bool),bool),'!_1'),s(fun(X96,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95)))))))) | s(X94,X97) = s(X94,sK4(X97,X95,X94))) )),
  inference(subsumption_resolution,[],[f43253,f246])).
fof(f43253,plain,(
  ( ! [X94,X97,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X96,bool),bool),'!_1'),s(fun(X96,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95)))))))) | s(X94,X97) = s(X94,sK4(X97,X95,X94))) )),
  inference(superposition,[],[f5307,f562])).
fof(f32435,plain,(
  ( ! [X180,X181,X179] : (~p(s(bool,X179)) | p(s(bool,happ(s(fun(fun(X181,bool),bool),'?_1'),s(fun(X181,bool),'_dst_x0_1'(s(bool,sK4(X179,X180,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X180)))) )),
  inference(superposition,[],[f4018,f562])).
fof(f43296,plain,(
  ( ! [X233,X234,X232] : (~p(s(bool,X232)) | p(s(bool,happ(s(fun(fun(X234,bool),bool),'!_1'),s(fun(X234,bool),'_dst_x0_1'(s(bool,sK4(X232,X233,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X233)))) )),
  inference(superposition,[],[f5307,f562])).
fof(f35580,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun(fun(X1,bool),bool),X2),s(fun(X1,bool),sK6('?_1',X2,fun(X1,bool)))))) | p(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK5('?_1',X2,fun(X1,bool))))))) )),
  inference(subsumption_resolution,[],[f35450,f246])).
fof(f35450,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(X1,bool),bool),X2),s(fun(X1,bool),sK6('?_1',X2,fun(X1,bool)))))) | p(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK5('?_1',X2,fun(X1,bool))))))) )),
  inference(superposition,[],[f300,f33115])).
fof(f15708,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f15604,f316])).
fof(f14120,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f4481,f316])).
fof(f13929,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f5672,f319])).
fof(f12870,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))))))) )),
  inference(unit_resulting_resolution,[],[f3523,f319])).
fof(f46919,plain,(
  ( ! [X484,X480,X482,X481,X483] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X480),bool),sK10(X481,X480,bool)),s('type.ind_type.recspace'(X480),'const.ind_type.CONSTR_3'(s('type.num.num',X482),s(X480,X484),s(fun('type.num.num','type.ind_type.recspace'(X480)),X483)))))) | p(s(bool,happ(s(fun(fun(fun('type.num.num',bool),bool),bool),'?_1'),s(fun(fun('type.num.num',bool),bool),happ(s(fun(X480,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X480,fun(fun('type.num.num','type.ind_type.recspace'(X480)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X480,fun(fun('type.num.num','type.ind_type.recspace'(X480)),fun(fun('type.num.num',bool),bool)))),X481),s('type.num.num',X482))),s(fun('type.num.num','type.ind_type.recspace'(X480)),X483))),s(X480,X484))))))) )),
  inference(superposition,[],[f319,f378])).
fof(f32760,plain,(
  ( ! [X175,X176,X174] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X175),s(fun('type.num.num',bool),X174),s('type.num.num',X176)))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),'?_1'),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X174))),s(bool,X175))))))) )),
  inference(superposition,[],[f319,f377])).
fof(f32764,plain,(
  ( ! [X187,X188] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X188),s(fun('type.num.num',bool),X187),s('type.num.num',sK8(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X187))),s(bool,X188)),'type.num.num'))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),'!_1'),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X187))),s(bool,X188))))))) )),
  inference(superposition,[],[f317,f377])).
fof(f46918,plain,(
  ( ! [X476,X478,X474,X475,X477,X479] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X474),bool),sK10(X475,X474,bool)),s('type.ind_type.recspace'(X474),'const.ind_type.CONSTR_3'(s('type.num.num',X476),s(X474,X478),s(fun('type.num.num','type.ind_type.recspace'(X474)),X477)))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),X479),s(fun('type.num.num',bool),sK6(happ(s(fun(X474,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool)))),X475),s('type.num.num',X476))),s(fun('type.num.num','type.ind_type.recspace'(X474)),X477))),s(X474,X478)),X479,fun('type.num.num',bool)))))) | p(s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X474,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool)))),X475),s('type.num.num',X476))),s(fun('type.num.num','type.ind_type.recspace'(X474)),X477))),s(X474,X478))),s(fun('type.num.num',bool),sK5(happ(s(fun(X474,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X474,fun(fun('type.num.num','type.ind_type.recspace'(X474)),fun(fun('type.num.num',bool),bool)))),X475),s('type.num.num',X476))),s(fun('type.num.num','type.ind_type.recspace'(X474)),X477))),s(X474,X478)),X479,fun('type.num.num',bool))))))) )),
  inference(superposition,[],[f300,f378])).
fof(f39380,plain,(
  ( ! [X420,X422,X418,X424,X421,X423,X417,X419,X425] : (p(s(bool,happ(s(fun(fun(X417,fun(X418,X419)),bool),happ(s(fun(fun(X417,fun(X418,X419)),fun(fun(X417,fun(X418,X419)),bool)),'=_0'),s(fun(X417,fun(X418,X419)),happ(s(fun(X422,fun(X417,fun(X418,X419))),'_dst_x000x111_2'(s(fun(X420,X419),X421),s(fun(X422,fun(X417,fun(X418,X420))),X423))),s(X422,X424))))),s(fun(X417,fun(X418,X419)),X425)))) | s(fun(X417,fun(X418,X419)),X425) != s(fun(X417,fun(X418,X419)),'_dst_x00x11_2'(s(fun(X420,X419),X421),s(fun(X417,fun(X418,X420)),happ(s(fun(X422,fun(X417,fun(X418,X420))),X423),s(X422,X424)))))) )),
  inference(superposition,[],[f338,f361])).
fof(f39378,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,happ(s(fun(fun(X399,fun(X400,X401)),bool),happ(s(fun(fun(X399,fun(X400,X401)),fun(fun(X399,fun(X400,X401)),bool)),'=_0'),s(fun(X399,fun(X400,X401)),happ(s(fun(X404,fun(X399,fun(X400,X401))),'_dst_x000x111_2'(s(fun(X402,X401),X403),s(fun(X404,fun(X399,fun(X400,X402))),X405))),s(X404,X406))))),s(fun(X399,fun(X400,X401)),X407)))) | s(fun(X399,fun(X400,X401)),X407) = s(fun(X399,fun(X400,X401)),'_dst_x00x11_2'(s(fun(X402,X401),X403),s(fun(X399,fun(X400,X402)),happ(s(fun(X404,fun(X399,fun(X400,X402))),X405),s(X404,X406)))))) )),
  inference(superposition,[],[f337,f361])).
fof(f39445,plain,(
  ( ! [X499,X500,X502,X496,X498,X495,X501,X503,X497] : (p(s(bool,happ(s(fun(fun(X495,fun(X496,X497)),bool),happ(s(fun(fun(X495,fun(X496,X497)),fun(fun(X495,fun(X496,X497)),bool)),'=_0'),s(fun(X495,fun(X496,X497)),'_dst_x00x11_2'(s(fun(X499,X497),X500),s(fun(X495,fun(X496,X499)),happ(s(fun(X498,fun(X495,fun(X496,X499))),X501),s(X498,X502))))))),s(fun(X495,fun(X496,X497)),X503)))) | s(fun(X495,fun(X496,X497)),X503) != s(fun(X495,fun(X496,X497)),happ(s(fun(X498,fun(X495,fun(X496,X497))),'_dst_x000x111_2'(s(fun(X499,X497),X500),s(fun(X498,fun(X495,fun(X496,X499))),X501))),s(X498,X502)))) )),
  inference(superposition,[],[f338,f361])).
fof(f39443,plain,(
  ( ! [X478,X484,X480,X482,X477,X479,X485,X481,X483] : (~p(s(bool,happ(s(fun(fun(X477,fun(X478,X479)),bool),happ(s(fun(fun(X477,fun(X478,X479)),fun(fun(X477,fun(X478,X479)),bool)),'=_0'),s(fun(X477,fun(X478,X479)),'_dst_x00x11_2'(s(fun(X481,X479),X482),s(fun(X477,fun(X478,X481)),happ(s(fun(X480,fun(X477,fun(X478,X481))),X483),s(X480,X484))))))),s(fun(X477,fun(X478,X479)),X485)))) | s(fun(X477,fun(X478,X479)),X485) = s(fun(X477,fun(X478,X479)),happ(s(fun(X480,fun(X477,fun(X478,X479))),'_dst_x000x111_2'(s(fun(X481,X479),X482),s(fun(X480,fun(X477,fun(X478,X481))),X483))),s(X480,X484)))) )),
  inference(superposition,[],[f337,f361])).
fof(f42930,plain,(
  ( ! [X625,X627,X621,X623,X619,X628,X624,X626,X620,X622,X618] : (p(s(bool,happ(s(fun(fun(X618,fun(X619,X620)),bool),happ(s(fun(fun(X618,fun(X619,X620)),fun(fun(X618,fun(X619,X620)),bool)),'=_0'),s(fun(X618,fun(X619,X620)),happ(s(fun(X624,fun(X618,fun(X619,X620))),'_dst_x000x100x011_3'(s(fun(X621,fun(X622,X620)),X623),s(fun(X624,X621),X625),s(fun(X618,fun(X619,X622)),X627))),s(X624,X626))))),s(fun(X618,fun(X619,X620)),X628)))) | s(fun(X618,fun(X619,X620)),X628) != s(fun(X618,fun(X619,X620)),'_dst_x00x00x11_3'(s(fun(X621,fun(X622,X620)),X623),s(X621,happ(s(fun(X624,X621),X625),s(X624,X626))),s(fun(X618,fun(X619,X622)),X627)))) )),
  inference(superposition,[],[f338,f366])).
fof(f42928,plain,(
  ( ! [X606,X600,X602,X596,X598,X605,X601,X603,X597,X599,X604] : (~p(s(bool,happ(s(fun(fun(X596,fun(X597,X598)),bool),happ(s(fun(fun(X596,fun(X597,X598)),fun(fun(X596,fun(X597,X598)),bool)),'=_0'),s(fun(X596,fun(X597,X598)),happ(s(fun(X602,fun(X596,fun(X597,X598))),'_dst_x000x100x011_3'(s(fun(X599,fun(X600,X598)),X601),s(fun(X602,X599),X603),s(fun(X596,fun(X597,X600)),X605))),s(X602,X604))))),s(fun(X596,fun(X597,X598)),X606)))) | s(fun(X596,fun(X597,X598)),X606) = s(fun(X596,fun(X597,X598)),'_dst_x00x00x11_3'(s(fun(X599,fun(X600,X598)),X601),s(X599,happ(s(fun(X602,X599),X603),s(X602,X604))),s(fun(X596,fun(X597,X600)),X605)))) )),
  inference(superposition,[],[f337,f366])).
fof(f44345,plain,(
  ( ! [X720,X722,X716,X718,X712,X714,X721,X717,X719,X713,X715] : (p(s(bool,happ(s(fun(fun(X712,fun(X713,X714)),bool),happ(s(fun(fun(X712,fun(X713,X714)),fun(fun(X712,fun(X713,X714)),bool)),'=_0'),s(fun(X712,fun(X713,X714)),happ(s(fun(X718,fun(X712,fun(X713,X714))),'_dst_x000x111x011_3'(s(fun(X715,fun(X716,X714)),X717),s(fun(X718,fun(X712,fun(X713,X715))),X719),s(fun(X712,fun(X713,X716)),X721))),s(X718,X720))))),s(fun(X712,fun(X713,X714)),X722)))) | s(fun(X712,fun(X713,X714)),X722) != s(fun(X712,fun(X713,X714)),'_dst_x00x11x11_3'(s(fun(X715,fun(X716,X714)),X717),s(fun(X712,fun(X713,X715)),happ(s(fun(X718,fun(X712,fun(X713,X715))),X719),s(X718,X720))),s(fun(X712,fun(X713,X716)),X721)))) )),
  inference(superposition,[],[f338,f367])).
fof(f44343,plain,(
  ( ! [X697,X699,X693,X695,X691,X700,X696,X698,X692,X694,X690] : (~p(s(bool,happ(s(fun(fun(X690,fun(X691,X692)),bool),happ(s(fun(fun(X690,fun(X691,X692)),fun(fun(X690,fun(X691,X692)),bool)),'=_0'),s(fun(X690,fun(X691,X692)),happ(s(fun(X696,fun(X690,fun(X691,X692))),'_dst_x000x111x011_3'(s(fun(X693,fun(X694,X692)),X695),s(fun(X696,fun(X690,fun(X691,X693))),X697),s(fun(X690,fun(X691,X694)),X699))),s(X696,X698))))),s(fun(X690,fun(X691,X692)),X700)))) | s(fun(X690,fun(X691,X692)),X700) = s(fun(X690,fun(X691,X692)),'_dst_x00x11x11_3'(s(fun(X693,fun(X694,X692)),X695),s(fun(X690,fun(X691,X693)),happ(s(fun(X696,fun(X690,fun(X691,X693))),X697),s(X696,X698))),s(fun(X690,fun(X691,X694)),X699)))) )),
  inference(superposition,[],[f337,f367])).
fof(f45213,plain,(
  ( ! [X765,X767,X761,X763,X769,X764,X766,X760,X762,X770,X768] : (p(s(bool,happ(s(fun(fun(X760,fun(X761,X762)),bool),happ(s(fun(fun(X760,fun(X761,X762)),fun(fun(X760,fun(X761,X762)),bool)),'=_0'),s(fun(X760,fun(X761,X762)),happ(s(fun(X766,fun(X760,fun(X761,X762))),'_dst_x000x110x101_3'(s(fun(X763,fun(X764,X762)),X765),s(fun(X766,fun(X760,X763)),X767),s(fun(X766,fun(X761,X764)),X769))),s(X766,X768))))),s(fun(X760,fun(X761,X762)),X770)))) | s(fun(X760,fun(X761,X762)),X770) != s(fun(X760,fun(X761,X762)),'_dst_x00x10x01_3'(s(fun(X763,fun(X764,X762)),X765),s(fun(X760,X763),happ(s(fun(X766,fun(X760,X763)),X767),s(X766,X768))),s(fun(X761,X764),happ(s(fun(X766,fun(X761,X764)),X769),s(X766,X768)))))) )),
  inference(superposition,[],[f338,f368])).
fof(f45211,plain,(
  ( ! [X738,X745,X747,X741,X743,X739,X748,X744,X746,X740,X742] : (~p(s(bool,happ(s(fun(fun(X738,fun(X739,X740)),bool),happ(s(fun(fun(X738,fun(X739,X740)),fun(fun(X738,fun(X739,X740)),bool)),'=_0'),s(fun(X738,fun(X739,X740)),happ(s(fun(X744,fun(X738,fun(X739,X740))),'_dst_x000x110x101_3'(s(fun(X741,fun(X742,X740)),X743),s(fun(X744,fun(X738,X741)),X745),s(fun(X744,fun(X739,X742)),X747))),s(X744,X746))))),s(fun(X738,fun(X739,X740)),X748)))) | s(fun(X738,fun(X739,X740)),X748) = s(fun(X738,fun(X739,X740)),'_dst_x00x10x01_3'(s(fun(X741,fun(X742,X740)),X743),s(fun(X738,X741),happ(s(fun(X744,fun(X738,X741)),X745),s(X744,X746))),s(fun(X739,X742),happ(s(fun(X744,fun(X739,X742)),X747),s(X744,X746)))))) )),
  inference(superposition,[],[f337,f368])).
fof(f45132,plain,(
  ( ! [X984,X978,X982,X980,X987,X985,X979,X977,X983,X981,X986] : (p(s(bool,happ(s(fun(fun(X977,fun(X978,X979)),bool),happ(s(fun(fun(X977,fun(X978,X979)),fun(fun(X977,fun(X978,X979)),bool)),'=_0'),s(fun(X977,fun(X978,X979)),'_dst_x00x10x01_3'(s(fun(X981,fun(X982,X979)),X983),s(fun(X977,X981),happ(s(fun(X980,fun(X977,X981)),X984),s(X980,X986))),s(fun(X978,X982),happ(s(fun(X980,fun(X978,X982)),X985),s(X980,X986))))))),s(fun(X977,fun(X978,X979)),X987)))) | s(fun(X977,fun(X978,X979)),X987) != s(fun(X977,fun(X978,X979)),happ(s(fun(X980,fun(X977,fun(X978,X979))),'_dst_x000x110x101_3'(s(fun(X981,fun(X982,X979)),X983),s(fun(X980,fun(X977,X981)),X984),s(fun(X980,fun(X978,X982)),X985))),s(X980,X986)))) )),
  inference(superposition,[],[f338,f368])).
fof(f45130,plain,(
  ( ! [X957,X963,X961,X958,X956,X965,X962,X960,X955,X964,X959] : (~p(s(bool,happ(s(fun(fun(X955,fun(X956,X957)),bool),happ(s(fun(fun(X955,fun(X956,X957)),fun(fun(X955,fun(X956,X957)),bool)),'=_0'),s(fun(X955,fun(X956,X957)),'_dst_x00x10x01_3'(s(fun(X959,fun(X960,X957)),X961),s(fun(X955,X959),happ(s(fun(X958,fun(X955,X959)),X962),s(X958,X964))),s(fun(X956,X960),happ(s(fun(X958,fun(X956,X960)),X963),s(X958,X964))))))),s(fun(X955,fun(X956,X957)),X965)))) | s(fun(X955,fun(X956,X957)),X965) = s(fun(X955,fun(X956,X957)),happ(s(fun(X958,fun(X955,fun(X956,X957))),'_dst_x000x110x101_3'(s(fun(X959,fun(X960,X957)),X961),s(fun(X958,fun(X955,X959)),X962),s(fun(X958,fun(X956,X960)),X963))),s(X958,X964)))) )),
  inference(superposition,[],[f337,f368])).
fof(f44437,plain,(
  ( ! [X922,X920,X918,X916,X924,X915,X921,X919,X917,X923,X925] : (p(s(bool,happ(s(fun(fun(X915,fun(X916,X917)),bool),happ(s(fun(fun(X915,fun(X916,X917)),fun(fun(X915,fun(X916,X917)),bool)),'=_0'),s(fun(X915,fun(X916,X917)),'_dst_x00x11x11_3'(s(fun(X919,fun(X920,X917)),X921),s(fun(X915,fun(X916,X919)),happ(s(fun(X918,fun(X915,fun(X916,X919))),X922),s(X918,X924))),s(fun(X915,fun(X916,X920)),X923))))),s(fun(X915,fun(X916,X917)),X925)))) | s(fun(X915,fun(X916,X917)),X925) != s(fun(X915,fun(X916,X917)),happ(s(fun(X918,fun(X915,fun(X916,X917))),'_dst_x000x111x011_3'(s(fun(X919,fun(X920,X917)),X921),s(fun(X918,fun(X915,fun(X916,X919))),X922),s(fun(X915,fun(X916,X920)),X923))),s(X918,X924)))) )),
  inference(superposition,[],[f338,f367])).
fof(f44435,plain,(
  ( ! [X895,X893,X899,X897,X903,X894,X901,X898,X896,X902,X900] : (~p(s(bool,happ(s(fun(fun(X893,fun(X894,X895)),bool),happ(s(fun(fun(X893,fun(X894,X895)),fun(fun(X893,fun(X894,X895)),bool)),'=_0'),s(fun(X893,fun(X894,X895)),'_dst_x00x11x11_3'(s(fun(X897,fun(X898,X895)),X899),s(fun(X893,fun(X894,X897)),happ(s(fun(X896,fun(X893,fun(X894,X897))),X900),s(X896,X902))),s(fun(X893,fun(X894,X898)),X901))))),s(fun(X893,fun(X894,X895)),X903)))) | s(fun(X893,fun(X894,X895)),X903) = s(fun(X893,fun(X894,X895)),happ(s(fun(X896,fun(X893,fun(X894,X895))),'_dst_x000x111x011_3'(s(fun(X897,fun(X898,X895)),X899),s(fun(X896,fun(X893,fun(X894,X897))),X900),s(fun(X893,fun(X894,X898)),X901))),s(X896,X902)))) )),
  inference(superposition,[],[f337,f367])).
fof(f43011,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X787,X785,X778,X782,X780] : (p(s(bool,happ(s(fun(fun(X777,fun(X778,X779)),bool),happ(s(fun(fun(X777,fun(X778,X779)),fun(fun(X777,fun(X778,X779)),bool)),'=_0'),s(fun(X777,fun(X778,X779)),'_dst_x00x00x11_3'(s(fun(X781,fun(X782,X779)),X783),s(X781,happ(s(fun(X780,X781),X784),s(X780,X786))),s(fun(X777,fun(X778,X782)),X785))))),s(fun(X777,fun(X778,X779)),X787)))) | s(fun(X777,fun(X778,X779)),X787) != s(fun(X777,fun(X778,X779)),happ(s(fun(X780,fun(X777,fun(X778,X779))),'_dst_x000x100x011_3'(s(fun(X781,fun(X782,X779)),X783),s(fun(X780,X781),X784),s(fun(X777,fun(X778,X782)),X785))),s(X780,X786)))) )),
  inference(superposition,[],[f338,f366])).
fof(f43009,plain,(
  ( ! [X765,X761,X763,X757,X759,X755,X764,X760,X762,X756,X758] : (~p(s(bool,happ(s(fun(fun(X755,fun(X756,X757)),bool),happ(s(fun(fun(X755,fun(X756,X757)),fun(fun(X755,fun(X756,X757)),bool)),'=_0'),s(fun(X755,fun(X756,X757)),'_dst_x00x00x11_3'(s(fun(X759,fun(X760,X757)),X761),s(X759,happ(s(fun(X758,X759),X762),s(X758,X764))),s(fun(X755,fun(X756,X760)),X763))))),s(fun(X755,fun(X756,X757)),X765)))) | s(fun(X755,fun(X756,X757)),X765) = s(fun(X755,fun(X756,X757)),happ(s(fun(X758,fun(X755,fun(X756,X757))),'_dst_x000x100x011_3'(s(fun(X759,fun(X760,X757)),X761),s(fun(X758,X759),X762),s(fun(X755,fun(X756,X760)),X763))),s(X758,X764)))) )),
  inference(superposition,[],[f337,f366])).
fof(f42666,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),'_dst_x00x00x11_3'(s(fun(X3,fun(X4,X2)),X5),s(X3,happ(s(fun(X6,X3),X7),s(X6,X8))),s(fun(X0,fun(X1,X4)),X9))))),s(fun(X0,fun(X1,X2)),happ(s(fun(X6,fun(X0,fun(X1,X2))),'_dst_x000x100x011_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X6,X3),X7),s(fun(X0,fun(X1,X4)),X9))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f366,f338])).
fof(f42931,plain,(
  ( ! [X639,X633,X635,X629,X631,X636,X638,X632,X634,X630,X637] : (p(s(bool,happ(s(fun(fun(X629,fun(X630,X631)),bool),happ(s(fun(fun(X629,fun(X630,X631)),fun(fun(X629,fun(X630,X631)),bool)),'=_0'),s(fun(X629,fun(X630,X631)),X639))),s(fun(X629,fun(X630,X631)),happ(s(fun(X635,fun(X629,fun(X630,X631))),'_dst_x000x100x011_3'(s(fun(X632,fun(X633,X631)),X634),s(fun(X635,X632),X636),s(fun(X629,fun(X630,X633)),X638))),s(X635,X637)))))) | s(fun(X629,fun(X630,X631)),X639) != s(fun(X629,fun(X630,X631)),'_dst_x00x00x11_3'(s(fun(X632,fun(X633,X631)),X634),s(X632,happ(s(fun(X635,X632),X636),s(X635,X637))),s(fun(X629,fun(X630,X633)),X638)))) )),
  inference(superposition,[],[f338,f366])).
fof(f42929,plain,(
  ( ! [X617,X613,X615,X609,X611,X607,X616,X612,X614,X608,X610] : (~p(s(bool,happ(s(fun(fun(X607,fun(X608,X609)),bool),happ(s(fun(fun(X607,fun(X608,X609)),fun(fun(X607,fun(X608,X609)),bool)),'=_0'),s(fun(X607,fun(X608,X609)),X617))),s(fun(X607,fun(X608,X609)),happ(s(fun(X613,fun(X607,fun(X608,X609))),'_dst_x000x100x011_3'(s(fun(X610,fun(X611,X609)),X612),s(fun(X613,X610),X614),s(fun(X607,fun(X608,X611)),X616))),s(X613,X615)))))) | s(fun(X607,fun(X608,X609)),X617) = s(fun(X607,fun(X608,X609)),'_dst_x00x00x11_3'(s(fun(X610,fun(X611,X609)),X612),s(X610,happ(s(fun(X613,X610),X614),s(X613,X615))),s(fun(X607,fun(X608,X611)),X616)))) )),
  inference(superposition,[],[f337,f366])).
fof(f45214,plain,(
  ( ! [X779,X777,X781,X771,X775,X773,X778,X776,X780,X774,X772] : (p(s(bool,happ(s(fun(fun(X771,fun(X772,X773)),bool),happ(s(fun(fun(X771,fun(X772,X773)),fun(fun(X771,fun(X772,X773)),bool)),'=_0'),s(fun(X771,fun(X772,X773)),X781))),s(fun(X771,fun(X772,X773)),happ(s(fun(X777,fun(X771,fun(X772,X773))),'_dst_x000x110x101_3'(s(fun(X774,fun(X775,X773)),X776),s(fun(X777,fun(X771,X774)),X778),s(fun(X777,fun(X772,X775)),X780))),s(X777,X779)))))) | s(fun(X771,fun(X772,X773)),X781) != s(fun(X771,fun(X772,X773)),'_dst_x00x10x01_3'(s(fun(X774,fun(X775,X773)),X776),s(fun(X771,X774),happ(s(fun(X777,fun(X771,X774)),X778),s(X777,X779))),s(fun(X772,X775),happ(s(fun(X777,fun(X772,X775)),X780),s(X777,X779)))))) )),
  inference(superposition,[],[f338,f368])).
fof(f45212,plain,(
  ( ! [X757,X759,X753,X755,X749,X751,X756,X758,X752,X754,X750] : (~p(s(bool,happ(s(fun(fun(X749,fun(X750,X751)),bool),happ(s(fun(fun(X749,fun(X750,X751)),fun(fun(X749,fun(X750,X751)),bool)),'=_0'),s(fun(X749,fun(X750,X751)),X759))),s(fun(X749,fun(X750,X751)),happ(s(fun(X755,fun(X749,fun(X750,X751))),'_dst_x000x110x101_3'(s(fun(X752,fun(X753,X751)),X754),s(fun(X755,fun(X749,X752)),X756),s(fun(X755,fun(X750,X753)),X758))),s(X755,X757)))))) | s(fun(X749,fun(X750,X751)),X759) = s(fun(X749,fun(X750,X751)),'_dst_x00x10x01_3'(s(fun(X752,fun(X753,X751)),X754),s(fun(X749,X752),happ(s(fun(X755,fun(X749,X752)),X756),s(X755,X757))),s(fun(X750,X753),happ(s(fun(X755,fun(X750,X753)),X758),s(X755,X757)))))) )),
  inference(superposition,[],[f337,f368])).
fof(f39174,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),'_dst_x00x11_2'(s(fun(X3,X2),X4),s(fun(X0,fun(X1,X3)),happ(s(fun(X5,fun(X0,fun(X1,X3))),X6),s(X5,X7))))))),s(fun(X0,fun(X1,X2)),happ(s(fun(X5,fun(X0,fun(X1,X2))),'_dst_x000x111_2'(s(fun(X3,X2),X4),s(fun(X5,fun(X0,fun(X1,X3))),X6))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f361,f338])).
fof(f39381,plain,(
  ( ! [X428,X430,X426,X432,X434,X429,X431,X427,X433] : (p(s(bool,happ(s(fun(fun(X426,fun(X427,X428)),bool),happ(s(fun(fun(X426,fun(X427,X428)),fun(fun(X426,fun(X427,X428)),bool)),'=_0'),s(fun(X426,fun(X427,X428)),X434))),s(fun(X426,fun(X427,X428)),happ(s(fun(X431,fun(X426,fun(X427,X428))),'_dst_x000x111_2'(s(fun(X429,X428),X430),s(fun(X431,fun(X426,fun(X427,X429))),X432))),s(X431,X433)))))) | s(fun(X426,fun(X427,X428)),X434) != s(fun(X426,fun(X427,X428)),'_dst_x00x11_2'(s(fun(X429,X428),X430),s(fun(X426,fun(X427,X429)),happ(s(fun(X431,fun(X426,fun(X427,X429))),X432),s(X431,X433)))))) )),
  inference(superposition,[],[f338,f361])).
fof(f39379,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,happ(s(fun(fun(X408,fun(X409,X410)),bool),happ(s(fun(fun(X408,fun(X409,X410)),fun(fun(X408,fun(X409,X410)),bool)),'=_0'),s(fun(X408,fun(X409,X410)),X416))),s(fun(X408,fun(X409,X410)),happ(s(fun(X413,fun(X408,fun(X409,X410))),'_dst_x000x111_2'(s(fun(X411,X410),X412),s(fun(X413,fun(X408,fun(X409,X411))),X414))),s(X413,X415)))))) | s(fun(X408,fun(X409,X410)),X416) = s(fun(X408,fun(X409,X410)),'_dst_x00x11_2'(s(fun(X411,X410),X412),s(fun(X408,fun(X409,X411)),happ(s(fun(X413,fun(X408,fun(X409,X411))),X414),s(X413,X415)))))) )),
  inference(superposition,[],[f337,f361])).
fof(f44057,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X0,fun(X1,X3)),happ(s(fun(X6,fun(X0,fun(X1,X3))),X7),s(X6,X8))),s(fun(X0,fun(X1,X4)),X9))))),s(fun(X0,fun(X1,X2)),happ(s(fun(X6,fun(X0,fun(X1,X2))),'_dst_x000x111x011_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X6,fun(X0,fun(X1,X3))),X7),s(fun(X0,fun(X1,X4)),X9))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f367,f338])).
fof(f44346,plain,(
  ( ! [X732,X728,X730,X724,X726,X733,X729,X731,X725,X727,X723] : (p(s(bool,happ(s(fun(fun(X723,fun(X724,X725)),bool),happ(s(fun(fun(X723,fun(X724,X725)),fun(fun(X723,fun(X724,X725)),bool)),'=_0'),s(fun(X723,fun(X724,X725)),X733))),s(fun(X723,fun(X724,X725)),happ(s(fun(X729,fun(X723,fun(X724,X725))),'_dst_x000x111x011_3'(s(fun(X726,fun(X727,X725)),X728),s(fun(X729,fun(X723,fun(X724,X726))),X730),s(fun(X723,fun(X724,X727)),X732))),s(X729,X731)))))) | s(fun(X723,fun(X724,X725)),X733) != s(fun(X723,fun(X724,X725)),'_dst_x00x11x11_3'(s(fun(X726,fun(X727,X725)),X728),s(fun(X723,fun(X724,X726)),happ(s(fun(X729,fun(X723,fun(X724,X726))),X730),s(X729,X731))),s(fun(X723,fun(X724,X727)),X732)))) )),
  inference(superposition,[],[f338,f367])).
fof(f44344,plain,(
  ( ! [X711,X707,X705,X708,X710,X702,X704,X706,X709,X701,X703] : (~p(s(bool,happ(s(fun(fun(X701,fun(X702,X703)),bool),happ(s(fun(fun(X701,fun(X702,X703)),fun(fun(X701,fun(X702,X703)),bool)),'=_0'),s(fun(X701,fun(X702,X703)),X711))),s(fun(X701,fun(X702,X703)),happ(s(fun(X707,fun(X701,fun(X702,X703))),'_dst_x000x111x011_3'(s(fun(X704,fun(X705,X703)),X706),s(fun(X707,fun(X701,fun(X702,X704))),X708),s(fun(X701,fun(X702,X705)),X710))),s(X707,X709)))))) | s(fun(X701,fun(X702,X703)),X711) = s(fun(X701,fun(X702,X703)),'_dst_x00x11x11_3'(s(fun(X704,fun(X705,X703)),X706),s(fun(X701,fun(X702,X704)),happ(s(fun(X707,fun(X701,fun(X702,X704))),X708),s(X707,X709))),s(fun(X701,fun(X702,X705)),X710)))) )),
  inference(superposition,[],[f337,f367])).
fof(f45133,plain,(
  ( ! [X990,X988,X994,X992,X998,X996,X991,X989,X995,X993,X997] : (p(s(bool,happ(s(fun(fun(X988,fun(X989,X990)),bool),happ(s(fun(fun(X988,fun(X989,X990)),fun(fun(X988,fun(X989,X990)),bool)),'=_0'),s(fun(X988,fun(X989,X990)),X998))),s(fun(X988,fun(X989,X990)),'_dst_x00x10x01_3'(s(fun(X992,fun(X993,X990)),X994),s(fun(X988,X992),happ(s(fun(X991,fun(X988,X992)),X995),s(X991,X997))),s(fun(X989,X993),happ(s(fun(X991,fun(X989,X993)),X996),s(X991,X997)))))))) | s(fun(X988,fun(X989,X990)),X998) != s(fun(X988,fun(X989,X990)),happ(s(fun(X991,fun(X988,fun(X989,X990))),'_dst_x000x110x101_3'(s(fun(X992,fun(X993,X990)),X994),s(fun(X991,fun(X988,X992)),X995),s(fun(X991,fun(X989,X993)),X996))),s(X991,X997)))) )),
  inference(superposition,[],[f338,f368])).
fof(f45131,plain,(
  ( ! [X976,X971,X969,X975,X973,X967,X970,X968,X974,X972,X966] : (~p(s(bool,happ(s(fun(fun(X966,fun(X967,X968)),bool),happ(s(fun(fun(X966,fun(X967,X968)),fun(fun(X966,fun(X967,X968)),bool)),'=_0'),s(fun(X966,fun(X967,X968)),X976))),s(fun(X966,fun(X967,X968)),'_dst_x00x10x01_3'(s(fun(X970,fun(X971,X968)),X972),s(fun(X966,X970),happ(s(fun(X969,fun(X966,X970)),X973),s(X969,X975))),s(fun(X967,X971),happ(s(fun(X969,fun(X967,X971)),X974),s(X969,X975)))))))) | s(fun(X966,fun(X967,X968)),X976) = s(fun(X966,fun(X967,X968)),happ(s(fun(X969,fun(X966,fun(X967,X968))),'_dst_x000x110x101_3'(s(fun(X970,fun(X971,X968)),X972),s(fun(X969,fun(X966,X970)),X973),s(fun(X969,fun(X967,X971)),X974))),s(X969,X975)))) )),
  inference(superposition,[],[f337,f368])).
fof(f39176,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),happ(s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x111_2'(s(fun(X4,X2),X5),s(fun(X3,fun(X0,fun(X1,X4))),X6))),s(X3,X7))))),s(fun(X0,fun(X1,X2)),'_dst_x00x11_2'(s(fun(X4,X2),X5),s(fun(X0,fun(X1,X4)),happ(s(fun(X3,fun(X0,fun(X1,X4))),X6),s(X3,X7))))))))) )),
  inference(unit_resulting_resolution,[],[f361,f338])).
fof(f39446,plain,(
  ( ! [X509,X511,X505,X507,X512,X508,X510,X504,X506] : (p(s(bool,happ(s(fun(fun(X504,fun(X505,X506)),bool),happ(s(fun(fun(X504,fun(X505,X506)),fun(fun(X504,fun(X505,X506)),bool)),'=_0'),s(fun(X504,fun(X505,X506)),X512))),s(fun(X504,fun(X505,X506)),'_dst_x00x11_2'(s(fun(X508,X506),X509),s(fun(X504,fun(X505,X508)),happ(s(fun(X507,fun(X504,fun(X505,X508))),X510),s(X507,X511)))))))) | s(fun(X504,fun(X505,X506)),X512) != s(fun(X504,fun(X505,X506)),happ(s(fun(X507,fun(X504,fun(X505,X506))),'_dst_x000x111_2'(s(fun(X508,X506),X509),s(fun(X507,fun(X504,fun(X505,X508))),X510))),s(X507,X511)))) )),
  inference(superposition,[],[f338,f361])).
fof(f39444,plain,(
  ( ! [X486,X492,X494,X488,X490,X487,X493,X489,X491] : (~p(s(bool,happ(s(fun(fun(X486,fun(X487,X488)),bool),happ(s(fun(fun(X486,fun(X487,X488)),fun(fun(X486,fun(X487,X488)),bool)),'=_0'),s(fun(X486,fun(X487,X488)),X494))),s(fun(X486,fun(X487,X488)),'_dst_x00x11_2'(s(fun(X490,X488),X491),s(fun(X486,fun(X487,X490)),happ(s(fun(X489,fun(X486,fun(X487,X490))),X492),s(X489,X493)))))))) | s(fun(X486,fun(X487,X488)),X494) = s(fun(X486,fun(X487,X488)),happ(s(fun(X489,fun(X486,fun(X487,X488))),'_dst_x000x111_2'(s(fun(X490,X488),X491),s(fun(X489,fun(X486,fun(X487,X490))),X492))),s(X489,X493)))) )),
  inference(superposition,[],[f337,f361])).
fof(f44059,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),happ(s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x111x011_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,fun(X0,fun(X1,X4))),X7),s(fun(X0,fun(X1,X5)),X8))),s(X3,X9))))),s(fun(X0,fun(X1,X2)),'_dst_x00x11x11_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X0,fun(X1,X4)),happ(s(fun(X3,fun(X0,fun(X1,X4))),X7),s(X3,X9))),s(fun(X0,fun(X1,X5)),X8))))))) )),
  inference(unit_resulting_resolution,[],[f367,f338])).
fof(f44438,plain,(
  ( ! [X926,X936,X930,X928,X934,X932,X927,X931,X929,X935,X933] : (p(s(bool,happ(s(fun(fun(X926,fun(X927,X928)),bool),happ(s(fun(fun(X926,fun(X927,X928)),fun(fun(X926,fun(X927,X928)),bool)),'=_0'),s(fun(X926,fun(X927,X928)),X936))),s(fun(X926,fun(X927,X928)),'_dst_x00x11x11_3'(s(fun(X930,fun(X931,X928)),X932),s(fun(X926,fun(X927,X930)),happ(s(fun(X929,fun(X926,fun(X927,X930))),X933),s(X929,X935))),s(fun(X926,fun(X927,X931)),X934)))))) | s(fun(X926,fun(X927,X928)),X936) != s(fun(X926,fun(X927,X928)),happ(s(fun(X929,fun(X926,fun(X927,X928))),'_dst_x000x111x011_3'(s(fun(X930,fun(X931,X928)),X932),s(fun(X929,fun(X926,fun(X927,X930))),X933),s(fun(X926,fun(X927,X931)),X934))),s(X929,X935)))) )),
  inference(superposition,[],[f338,f367])).
fof(f44436,plain,(
  ( ! [X912,X914,X907,X905,X911,X909,X913,X906,X904,X910,X908] : (~p(s(bool,happ(s(fun(fun(X904,fun(X905,X906)),bool),happ(s(fun(fun(X904,fun(X905,X906)),fun(fun(X904,fun(X905,X906)),bool)),'=_0'),s(fun(X904,fun(X905,X906)),X914))),s(fun(X904,fun(X905,X906)),'_dst_x00x11x11_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X904,fun(X905,X908)),happ(s(fun(X907,fun(X904,fun(X905,X908))),X911),s(X907,X913))),s(fun(X904,fun(X905,X909)),X912)))))) | s(fun(X904,fun(X905,X906)),X914) = s(fun(X904,fun(X905,X906)),happ(s(fun(X907,fun(X904,fun(X905,X906))),'_dst_x000x111x011_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X907,fun(X904,fun(X905,X908))),X911),s(fun(X904,fun(X905,X909)),X912))),s(X907,X913)))) )),
  inference(superposition,[],[f337,f367])).
fof(f42668,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),happ(s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x100x011_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,X4),X7),s(fun(X0,fun(X1,X5)),X8))),s(X3,X9))))),s(fun(X0,fun(X1,X2)),'_dst_x00x00x11_3'(s(fun(X4,fun(X5,X2)),X6),s(X4,happ(s(fun(X3,X4),X7),s(X3,X9))),s(fun(X0,fun(X1,X5)),X8))))))) )),
  inference(unit_resulting_resolution,[],[f366,f338])).
fof(f43012,plain,(
  ( ! [X798,X796,X790,X788,X795,X793,X797,X791,X789,X794,X792] : (p(s(bool,happ(s(fun(fun(X788,fun(X789,X790)),bool),happ(s(fun(fun(X788,fun(X789,X790)),fun(fun(X788,fun(X789,X790)),bool)),'=_0'),s(fun(X788,fun(X789,X790)),X798))),s(fun(X788,fun(X789,X790)),'_dst_x00x00x11_3'(s(fun(X792,fun(X793,X790)),X794),s(X792,happ(s(fun(X791,X792),X795),s(X791,X797))),s(fun(X788,fun(X789,X793)),X796)))))) | s(fun(X788,fun(X789,X790)),X798) != s(fun(X788,fun(X789,X790)),happ(s(fun(X791,fun(X788,fun(X789,X790))),'_dst_x000x100x011_3'(s(fun(X792,fun(X793,X790)),X794),s(fun(X791,X792),X795),s(fun(X788,fun(X789,X793)),X796))),s(X791,X797)))) )),
  inference(superposition,[],[f338,f366])).
fof(f43010,plain,(
  ( ! [X767,X771,X769,X775,X773,X766,X776,X770,X768,X774,X772] : (~p(s(bool,happ(s(fun(fun(X766,fun(X767,X768)),bool),happ(s(fun(fun(X766,fun(X767,X768)),fun(fun(X766,fun(X767,X768)),bool)),'=_0'),s(fun(X766,fun(X767,X768)),X776))),s(fun(X766,fun(X767,X768)),'_dst_x00x00x11_3'(s(fun(X770,fun(X771,X768)),X772),s(X770,happ(s(fun(X769,X770),X773),s(X769,X775))),s(fun(X766,fun(X767,X771)),X774)))))) | s(fun(X766,fun(X767,X768)),X776) = s(fun(X766,fun(X767,X768)),happ(s(fun(X769,fun(X766,fun(X767,X768))),'_dst_x000x100x011_3'(s(fun(X770,fun(X771,X768)),X772),s(fun(X769,X770),X773),s(fun(X766,fun(X767,X771)),X774))),s(X769,X775)))) )),
  inference(superposition,[],[f337,f366])).
fof(f45725,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,fun(X2,X3))),bool),happ(s(fun(fun(X0,fun(X1,fun(X2,X3))),fun(fun(X0,fun(X1,fun(X2,X3))),bool)),'=_0'),s(fun(X0,fun(X1,fun(X2,X3))),happ(s(fun(X4,fun(X0,fun(X1,fun(X2,X3)))),'_dst_x0000x0111x1011_3'(s(fun(X5,fun(X6,X3)),X7),s(fun(X0,fun(X1,fun(X2,X5))),X8),s(fun(X4,fun(X1,fun(X2,X6))),X9))),s(X4,X10))))),s(fun(X0,fun(X1,fun(X2,X3))),'_dst_x000x111x011_3'(s(fun(X5,fun(X6,X3)),X7),s(fun(X0,fun(X1,fun(X2,X5))),X8),s(fun(X1,fun(X2,X6)),happ(s(fun(X4,fun(X1,fun(X2,X6))),X9),s(X4,X10))))))))) )),
  inference(unit_resulting_resolution,[],[f369,f338])).
fof(f46140,plain,(
  ( ! [X1151,X1149,X1155,X1153,X1146,X1144,X1150,X1148,X1154,X1152,X1147,X1145] : (p(s(bool,happ(s(fun(fun(X1144,fun(X1145,fun(X1146,X1147))),bool),happ(s(fun(fun(X1144,fun(X1145,fun(X1146,X1147))),fun(fun(X1144,fun(X1145,fun(X1146,X1147))),bool)),'=_0'),s(fun(X1144,fun(X1145,fun(X1146,X1147))),X1155))),s(fun(X1144,fun(X1145,fun(X1146,X1147))),'_dst_x000x111x011_3'(s(fun(X1149,fun(X1150,X1147)),X1151),s(fun(X1144,fun(X1145,fun(X1146,X1149))),X1152),s(fun(X1145,fun(X1146,X1150)),happ(s(fun(X1148,fun(X1145,fun(X1146,X1150))),X1153),s(X1148,X1154)))))))) | s(fun(X1144,fun(X1145,fun(X1146,X1147))),X1155) != s(fun(X1144,fun(X1145,fun(X1146,X1147))),happ(s(fun(X1148,fun(X1144,fun(X1145,fun(X1146,X1147)))),'_dst_x0000x0111x1011_3'(s(fun(X1149,fun(X1150,X1147)),X1151),s(fun(X1144,fun(X1145,fun(X1146,X1149))),X1152),s(fun(X1148,fun(X1145,fun(X1146,X1150))),X1153))),s(X1148,X1154)))) )),
  inference(superposition,[],[f338,f369])).
fof(f46138,plain,(
  ( ! [X1130,X1128,X1122,X1120,X1126,X1124,X1131,X1129,X1123,X1121,X1127,X1125] : (~p(s(bool,happ(s(fun(fun(X1120,fun(X1121,fun(X1122,X1123))),bool),happ(s(fun(fun(X1120,fun(X1121,fun(X1122,X1123))),fun(fun(X1120,fun(X1121,fun(X1122,X1123))),bool)),'=_0'),s(fun(X1120,fun(X1121,fun(X1122,X1123))),X1131))),s(fun(X1120,fun(X1121,fun(X1122,X1123))),'_dst_x000x111x011_3'(s(fun(X1125,fun(X1126,X1123)),X1127),s(fun(X1120,fun(X1121,fun(X1122,X1125))),X1128),s(fun(X1121,fun(X1122,X1126)),happ(s(fun(X1124,fun(X1121,fun(X1122,X1126))),X1129),s(X1124,X1130)))))))) | s(fun(X1120,fun(X1121,fun(X1122,X1123))),X1131) = s(fun(X1120,fun(X1121,fun(X1122,X1123))),happ(s(fun(X1124,fun(X1120,fun(X1121,fun(X1122,X1123)))),'_dst_x0000x0111x1011_3'(s(fun(X1125,fun(X1126,X1123)),X1127),s(fun(X1120,fun(X1121,fun(X1122,X1125))),X1128),s(fun(X1124,fun(X1121,fun(X1122,X1126))),X1129))),s(X1124,X1130)))) )),
  inference(superposition,[],[f337,f369])).
fof(f45723,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,fun(X2,X3))),bool),happ(s(fun(fun(X0,fun(X1,fun(X2,X3))),fun(fun(X0,fun(X1,fun(X2,X3))),bool)),'=_0'),s(fun(X0,fun(X1,fun(X2,X3))),'_dst_x000x111x011_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X0,fun(X1,fun(X2,X4))),X7),s(fun(X1,fun(X2,X5)),happ(s(fun(X8,fun(X1,fun(X2,X5))),X9),s(X8,X10))))))),s(fun(X0,fun(X1,fun(X2,X3))),happ(s(fun(X8,fun(X0,fun(X1,fun(X2,X3)))),'_dst_x0000x0111x1011_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X0,fun(X1,fun(X2,X4))),X7),s(fun(X8,fun(X1,fun(X2,X5))),X9))),s(X8,X10))))))) )),
  inference(unit_resulting_resolution,[],[f369,f338])).
fof(f46037,plain,(
  ( ! [X883,X881,X887,X885,X890,X888,X882,X880,X886,X884,X879,X889] : (p(s(bool,happ(s(fun(fun(X879,fun(X880,fun(X881,X882))),bool),happ(s(fun(fun(X879,fun(X880,fun(X881,X882))),fun(fun(X879,fun(X880,fun(X881,X882))),bool)),'=_0'),s(fun(X879,fun(X880,fun(X881,X882))),X890))),s(fun(X879,fun(X880,fun(X881,X882))),happ(s(fun(X887,fun(X879,fun(X880,fun(X881,X882)))),'_dst_x0000x0111x1011_3'(s(fun(X883,fun(X884,X882)),X885),s(fun(X879,fun(X880,fun(X881,X883))),X886),s(fun(X887,fun(X880,fun(X881,X884))),X888))),s(X887,X889)))))) | s(fun(X879,fun(X880,fun(X881,X882))),X890) != s(fun(X879,fun(X880,fun(X881,X882))),'_dst_x000x111x011_3'(s(fun(X883,fun(X884,X882)),X885),s(fun(X879,fun(X880,fun(X881,X883))),X886),s(fun(X880,fun(X881,X884)),happ(s(fun(X887,fun(X880,fun(X881,X884))),X888),s(X887,X889)))))) )),
  inference(superposition,[],[f338,f369])).
fof(f46035,plain,(
  ( ! [X860,X866,X864,X859,X857,X863,X861,X855,X865,X858,X856,X862] : (~p(s(bool,happ(s(fun(fun(X855,fun(X856,fun(X857,X858))),bool),happ(s(fun(fun(X855,fun(X856,fun(X857,X858))),fun(fun(X855,fun(X856,fun(X857,X858))),bool)),'=_0'),s(fun(X855,fun(X856,fun(X857,X858))),X866))),s(fun(X855,fun(X856,fun(X857,X858))),happ(s(fun(X863,fun(X855,fun(X856,fun(X857,X858)))),'_dst_x0000x0111x1011_3'(s(fun(X859,fun(X860,X858)),X861),s(fun(X855,fun(X856,fun(X857,X859))),X862),s(fun(X863,fun(X856,fun(X857,X860))),X864))),s(X863,X865)))))) | s(fun(X855,fun(X856,fun(X857,X858))),X866) = s(fun(X855,fun(X856,fun(X857,X858))),'_dst_x000x111x011_3'(s(fun(X859,fun(X860,X858)),X861),s(fun(X855,fun(X856,fun(X857,X859))),X862),s(fun(X856,fun(X857,X860)),happ(s(fun(X863,fun(X856,fun(X857,X860))),X864),s(X863,X865)))))) )),
  inference(superposition,[],[f337,f369])).
fof(f46036,plain,(
  ( ! [X874,X872,X878,X876,X870,X868,X875,X873,X877,X867,X871,X869] : (p(s(bool,happ(s(fun(fun(X867,fun(X868,fun(X869,X870))),bool),happ(s(fun(fun(X867,fun(X868,fun(X869,X870))),fun(fun(X867,fun(X868,fun(X869,X870))),bool)),'=_0'),s(fun(X867,fun(X868,fun(X869,X870))),happ(s(fun(X875,fun(X867,fun(X868,fun(X869,X870)))),'_dst_x0000x0111x1011_3'(s(fun(X871,fun(X872,X870)),X873),s(fun(X867,fun(X868,fun(X869,X871))),X874),s(fun(X875,fun(X868,fun(X869,X872))),X876))),s(X875,X877))))),s(fun(X867,fun(X868,fun(X869,X870))),X878)))) | s(fun(X867,fun(X868,fun(X869,X870))),X878) != s(fun(X867,fun(X868,fun(X869,X870))),'_dst_x000x111x011_3'(s(fun(X871,fun(X872,X870)),X873),s(fun(X867,fun(X868,fun(X869,X871))),X874),s(fun(X868,fun(X869,X872)),happ(s(fun(X875,fun(X868,fun(X869,X872))),X876),s(X875,X877)))))) )),
  inference(superposition,[],[f338,f369])).
fof(f46034,plain,(
  ( ! [X850,X848,X854,X852,X843,X847,X845,X851,X849,X853,X846,X844] : (~p(s(bool,happ(s(fun(fun(X843,fun(X844,fun(X845,X846))),bool),happ(s(fun(fun(X843,fun(X844,fun(X845,X846))),fun(fun(X843,fun(X844,fun(X845,X846))),bool)),'=_0'),s(fun(X843,fun(X844,fun(X845,X846))),happ(s(fun(X851,fun(X843,fun(X844,fun(X845,X846)))),'_dst_x0000x0111x1011_3'(s(fun(X847,fun(X848,X846)),X849),s(fun(X843,fun(X844,fun(X845,X847))),X850),s(fun(X851,fun(X844,fun(X845,X848))),X852))),s(X851,X853))))),s(fun(X843,fun(X844,fun(X845,X846))),X854)))) | s(fun(X843,fun(X844,fun(X845,X846))),X854) = s(fun(X843,fun(X844,fun(X845,X846))),'_dst_x000x111x011_3'(s(fun(X847,fun(X848,X846)),X849),s(fun(X843,fun(X844,fun(X845,X847))),X850),s(fun(X844,fun(X845,X848)),happ(s(fun(X851,fun(X844,fun(X845,X848))),X852),s(X851,X853)))))) )),
  inference(superposition,[],[f337,f369])).
fof(f46139,plain,(
  ( ! [X1139,X1137,X1143,X1141,X1134,X1132,X1138,X1136,X1142,X1140,X1135,X1133] : (p(s(bool,happ(s(fun(fun(X1132,fun(X1133,fun(X1134,X1135))),bool),happ(s(fun(fun(X1132,fun(X1133,fun(X1134,X1135))),fun(fun(X1132,fun(X1133,fun(X1134,X1135))),bool)),'=_0'),s(fun(X1132,fun(X1133,fun(X1134,X1135))),'_dst_x000x111x011_3'(s(fun(X1137,fun(X1138,X1135)),X1139),s(fun(X1132,fun(X1133,fun(X1134,X1137))),X1140),s(fun(X1133,fun(X1134,X1138)),happ(s(fun(X1136,fun(X1133,fun(X1134,X1138))),X1141),s(X1136,X1142))))))),s(fun(X1132,fun(X1133,fun(X1134,X1135))),X1143)))) | s(fun(X1132,fun(X1133,fun(X1134,X1135))),X1143) != s(fun(X1132,fun(X1133,fun(X1134,X1135))),happ(s(fun(X1136,fun(X1132,fun(X1133,fun(X1134,X1135)))),'_dst_x0000x0111x1011_3'(s(fun(X1137,fun(X1138,X1135)),X1139),s(fun(X1132,fun(X1133,fun(X1134,X1137))),X1140),s(fun(X1136,fun(X1133,fun(X1134,X1138))),X1141))),s(X1136,X1142)))) )),
  inference(superposition,[],[f338,f369])).
fof(f46137,plain,(
  ( ! [X1112,X1118,X1116,X1110,X1108,X1115,X1113,X1119,X1117,X1111,X1109,X1114] : (~p(s(bool,happ(s(fun(fun(X1108,fun(X1109,fun(X1110,X1111))),bool),happ(s(fun(fun(X1108,fun(X1109,fun(X1110,X1111))),fun(fun(X1108,fun(X1109,fun(X1110,X1111))),bool)),'=_0'),s(fun(X1108,fun(X1109,fun(X1110,X1111))),'_dst_x000x111x011_3'(s(fun(X1113,fun(X1114,X1111)),X1115),s(fun(X1108,fun(X1109,fun(X1110,X1113))),X1116),s(fun(X1109,fun(X1110,X1114)),happ(s(fun(X1112,fun(X1109,fun(X1110,X1114))),X1117),s(X1112,X1118))))))),s(fun(X1108,fun(X1109,fun(X1110,X1111))),X1119)))) | s(fun(X1108,fun(X1109,fun(X1110,X1111))),X1119) = s(fun(X1108,fun(X1109,fun(X1110,X1111))),happ(s(fun(X1112,fun(X1108,fun(X1109,fun(X1110,X1111)))),'_dst_x0000x0111x1011_3'(s(fun(X1113,fun(X1114,X1111)),X1115),s(fun(X1108,fun(X1109,fun(X1110,X1113))),X1116),s(fun(X1112,fun(X1109,fun(X1110,X1114))),X1117))),s(X1112,X1118)))) )),
  inference(superposition,[],[f337,f369])).
fof(f34876,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(X11),bool),happ(s(fun('type.benchmark.times'(X11),fun('type.benchmark.times'(X11),bool)),X15),s('type.benchmark.times'(X11),X12))),s('type.benchmark.times'(X11),X13))) | s(bool,X16) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X11),'const.benchmark.Twice_2'(s('type.benchmark.times'(X11),X12),s('type.benchmark.times'(X11),X13))),s(fun(X11,bool),X14),s(fun('type.benchmark.times'(X11),fun('type.benchmark.times'(X11),bool)),X15))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f336,f396])).
fof(f34877,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,X22) = s(bool,happ(s(fun('type.benchmark.times'(X17),bool),happ(s(fun('type.benchmark.times'(X17),fun('type.benchmark.times'(X17),bool)),X21),s('type.benchmark.times'(X17),X18))),s('type.benchmark.times'(X17),X19))) | s(bool,'T_0') = s(bool,X22) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X17),'const.benchmark.Twice_2'(s('type.benchmark.times'(X17),X18),s('type.benchmark.times'(X17),X19))),s(fun(X17,bool),X20),s(fun('type.benchmark.times'(X17),fun('type.benchmark.times'(X17),bool)),X21)))) )),
  inference(superposition,[],[f336,f396])).
fof(f35203,plain,(
  ( ! [X399,X401,X403,X400,X402] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(X399),bool),happ(s(fun('type.benchmark.times'(X399),fun('type.benchmark.times'(X399),bool)),X403),s('type.benchmark.times'(X399),X400))),s('type.benchmark.times'(X399),X401))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X399),'const.benchmark.Twice_2'(s('type.benchmark.times'(X399),X400),s('type.benchmark.times'(X399),X401))),s(fun(X399,bool),X402),s(fun('type.benchmark.times'(X399),fun('type.benchmark.times'(X399),bool)),X403)))) )),
  inference(forward_demodulation,[],[f34955,f289])).
fof(f34955,plain,(
  ( ! [X399,X405,X401,X403,X404,X400,X402] : (s(bool,'const.bool.DATATYPE_1'(s(X404,X405))) != s(bool,happ(s(fun('type.benchmark.times'(X399),bool),happ(s(fun('type.benchmark.times'(X399),fun('type.benchmark.times'(X399),bool)),X403),s('type.benchmark.times'(X399),X400))),s('type.benchmark.times'(X399),X401))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X399),'const.benchmark.Twice_2'(s('type.benchmark.times'(X399),X400),s('type.benchmark.times'(X399),X401))),s(fun(X399,bool),X402),s(fun('type.benchmark.times'(X399),fun('type.benchmark.times'(X399),bool)),X403)))) )),
  inference(superposition,[],[f554,f336])).
fof(f53694,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK3))),s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53693,f335])).
fof(f53693,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2))),s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f52866,f359])).
fof(f52866,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2))))),s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(unit_resulting_resolution,[],[f34843,f338])).
fof(f53857,plain,(
  ( ! [X90,X88,X91,X89] : (s(X88,X91) != s(X88,happ(s(fun(sK0,X88),X89),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X88,fun(X88,bool)),'=_0'),s(X88,X91),s(fun('type.benchmark.times'(sK0),X88),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X88)),X90),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53856,f335])).
fof(f53856,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X88,fun(X88,bool)),'=_0'),s(X88,X91),s(fun('type.benchmark.times'(sK0),X88),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X88)),X90),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | s(X88,X91) != s(X88,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X88),X89),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X88)),X90)))) )),
  inference(forward_demodulation,[],[f53102,f359])).
fof(f53102,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,happ(s(fun(X88,bool),happ(s(fun(X88,fun(X88,bool)),'=_0'),s(X88,X91))),s(X88,happ(s(fun('type.benchmark.times'(sK0),X88),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X88)),X90),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | s(X88,X91) != s(X88,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X88),X89),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X88)),X90)))) )),
  inference(superposition,[],[f338,f34843])).
fof(f53854,plain,(
  ( ! [X80,X83,X81,X82] : (s(X80,X83) = s(X80,happ(s(fun(sK0,X80),X81),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X80,fun(X80,bool)),'=_0'),s(X80,X83),s(fun('type.benchmark.times'(sK0),X80),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X80)),X82),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53853,f335])).
fof(f53853,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(X80,fun(X80,bool)),'=_0'),s(X80,X83),s(fun('type.benchmark.times'(sK0),X80),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X80)),X82),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | s(X80,X83) = s(X80,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X80),X81),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X80)),X82)))) )),
  inference(forward_demodulation,[],[f53100,f359])).
fof(f53100,plain,(
  ( ! [X80,X83,X81,X82] : (~p(s(bool,happ(s(fun(X80,bool),happ(s(fun(X80,fun(X80,bool)),'=_0'),s(X80,X83))),s(X80,happ(s(fun('type.benchmark.times'(sK0),X80),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X80)),X82),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | s(X80,X83) = s(X80,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X80),X81),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X80)),X82)))) )),
  inference(superposition,[],[f337,f34843])).
fof(f4176,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),X4),s('type.num.num',X5))) | s(bool,X6) = s(bool,'const.ind_type.FCONS_3'(s(bool,X3),s(fun('type.num.num',bool),X4),s('type.num.num','const.num.SUC_1'(s('type.num.num',X5))))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f304,f396])).
fof(f4177,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) = s(bool,happ(s(fun('type.num.num',bool),X8),s('type.num.num',X9))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X7),s(fun('type.num.num',bool),X8),s('type.num.num','const.num.SUC_1'(s('type.num.num',X9)))))) )),
  inference(superposition,[],[f304,f396])).
fof(f4266,plain,(
  ( ! [X111,X109,X110] : (p(s(bool,happ(s(fun('type.num.num',bool),X109),s('type.num.num',X110)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X111),s(fun('type.num.num',bool),X109))),s('type.num.num',X110))))) )),
  inference(forward_demodulation,[],[f4265,f304])).
fof(f4265,plain,(
  ( ! [X111,X109,X110,X108] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X111),s(fun('type.num.num',bool),X109))),s('type.num.num',X110)))) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num','const.num.SUC_1'(s('type.num.num',X110))))))) )),
  inference(forward_demodulation,[],[f4211,f359])).
fof(f4211,plain,(
  ( ! [X111,X109,X110,X108] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X111))),s(bool,happ(s(fun('type.num.num',bool),X109),s('type.num.num',X110)))))) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X108),s(fun('type.num.num',bool),X109),s('type.num.num','const.num.SUC_1'(s('type.num.num',X110))))))) )),
  inference(superposition,[],[f321,f304])).
fof(f4273,plain,(
  ( ! [X161,X159,X160] : (s(bool,'T_0') != s(bool,happ(s(fun('type.num.num',bool),X160),s('type.num.num',X161))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X159),s(fun('type.num.num',bool),X160),s('type.num.num','const.num.SUC_1'(s('type.num.num',X161)))))) )),
  inference(forward_demodulation,[],[f4224,f289])).
fof(f4224,plain,(
  ( ! [X163,X161,X159,X162,X160] : (s(bool,'const.bool.DATATYPE_1'(s(X162,X163))) != s(bool,happ(s(fun('type.num.num',bool),X160),s('type.num.num',X161))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X159),s(fun('type.num.num',bool),X160),s('type.num.num','const.num.SUC_1'(s('type.num.num',X161)))))) )),
  inference(superposition,[],[f554,f304])).
fof(f15372,plain,(
  ( ! [X103,X101,X102] : (p(s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num',X102)))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X103),s(fun('type.num.num',bool),X101))),s('type.num.num',X102)))) | p(s(bool,X103))) )),
  inference(forward_demodulation,[],[f15371,f304])).
fof(f15371,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X103),s(fun('type.num.num',bool),X101))),s('type.num.num',X102)))) | p(s(bool,X103)) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X100),s(fun('type.num.num',bool),X101),s('type.num.num','const.num.SUC_1'(s('type.num.num',X102))))))) )),
  inference(forward_demodulation,[],[f15225,f359])).
fof(f15225,plain,(
  ( ! [X103,X101,X102,X100] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X103))),s(bool,happ(s(fun('type.num.num',bool),X101),s('type.num.num',X102)))))) | p(s(bool,X103)) | p(s(bool,'const.ind_type.FCONS_3'(s(bool,X100),s(fun('type.num.num',bool),X101),s('type.num.num','const.num.SUC_1'(s('type.num.num',X102))))))) )),
  inference(superposition,[],[f323,f304])).
fof(f33016,plain,(
  ( ! [X185,X186,X184,X183] : (p(s(bool,'const.ind_type.FCONS_3'(s(bool,X184),s(fun('type.num.num',bool),X183),s('type.num.num',sK6(X185,happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X183))),s(bool,X184)),'type.num.num'))))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X184),s(fun('type.num.num',bool),X183),s('type.num.num',sK5(X185,happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X183))),s(bool,X184)),'type.num.num'))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X185),s('type.num.num',X186))))) )),
  inference(forward_demodulation,[],[f32763,f377])).
fof(f32763,plain,(
  ( ! [X185,X186,X184,X183] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X184),s(fun('type.num.num',bool),X183),s('type.num.num',sK5(X185,happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X183))),s(bool,X184)),'type.num.num'))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),X185),s('type.num.num',X186)))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X183))),s(bool,X184))),s('type.num.num',sK6(X185,happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X183))),s(bool,X184)),'type.num.num')))))) )),
  inference(superposition,[],[f301,f377])).
fof(f33015,plain,(
  ( ! [X173,X171,X172,X170] : (p(s(bool,'const.ind_type.FCONS_3'(s(bool,X171),s(fun('type.num.num',bool),X170),s('type.num.num',sK5(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X170))),s(bool,X171)),X173,'type.num.num'))))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X171),s(fun('type.num.num',bool),X170),s('type.num.num',X172)))) | p(s(bool,happ(s(fun('type.num.num',bool),X173),s('type.num.num',sK6(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X170))),s(bool,X171)),X173,'type.num.num')))))) )),
  inference(forward_demodulation,[],[f32759,f377])).
fof(f32759,plain,(
  ( ! [X173,X171,X172,X170] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X171),s(fun('type.num.num',bool),X170),s('type.num.num',X172)))) | p(s(bool,happ(s(fun('type.num.num',bool),X173),s('type.num.num',sK6(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X170))),s(bool,X171)),X173,'type.num.num'))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X170))),s(bool,X171))),s('type.num.num',sK5(happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X170))),s(bool,X171)),X173,'type.num.num')))))) )),
  inference(superposition,[],[f300,f377])).
fof(f17615,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79))))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X80))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79))))))))) )),
  inference(forward_demodulation,[],[f17586,f17542])).
fof(f17586,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X80))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79)))))))) | s('type.num.num',X80) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79)))))) )),
  inference(superposition,[],[f338,f296])).
fof(f17613,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X72))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71))))))))) )),
  inference(forward_demodulation,[],[f17584,f17542])).
fof(f17584,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X72))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71)))))))) | s('type.num.num',X72) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71)))))) )),
  inference(superposition,[],[f337,f296])).
fof(f17609,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X80))),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79)))))))))) | s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79)))))) )),
  inference(forward_demodulation,[],[f17563,f17542])).
fof(f17563,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X80))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79)))))))) | s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79)))))) )),
  inference(superposition,[],[f338,f296])).
fof(f17607,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X72))),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71)))))))))) | s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71)))))) )),
  inference(forward_demodulation,[],[f17561,f17542])).
fof(f17561,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X72))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71)))))))) | s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71)))))) )),
  inference(superposition,[],[f337,f296])).
fof(f17600,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))))))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))))) )),
  inference(backward_demodulation,[],[f17542,f17478])).
fof(f17599,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))))))))) )),
  inference(backward_demodulation,[],[f17542,f17476])).
fof(f17614,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75))))))) | p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75))))))),s('type.num.num',X76))))) )),
  inference(forward_demodulation,[],[f17585,f17542])).
fof(f17585,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75))))))),s('type.num.num',X76)))) | s('type.num.num',X76) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75)))))) )),
  inference(superposition,[],[f338,f296])).
fof(f17612,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67))))))) | ~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67))))))),s('type.num.num',X68))))) )),
  inference(forward_demodulation,[],[f17583,f17542])).
fof(f17583,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67))))))),s('type.num.num',X68)))) | s('type.num.num',X68) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67)))))) )),
  inference(superposition,[],[f337,f296])).
fof(f17608,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75))))))))),s('type.num.num',X76)))) | s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75)))))) )),
  inference(forward_demodulation,[],[f17562,f17542])).
fof(f17562,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75))))))),s('type.num.num',X76)))) | s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75)))))) )),
  inference(superposition,[],[f338,f296])).
fof(f17606,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67))))))))),s('type.num.num',X68)))) | s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67)))))) )),
  inference(forward_demodulation,[],[f17560,f17542])).
fof(f17560,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67))))))),s('type.num.num',X68)))) | s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67)))))) )),
  inference(superposition,[],[f337,f296])).
fof(f4865,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) != s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85))) | p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86),s(fun('type.num.num',X82),X84))),s('type.num.num',X85))))) )),
  inference(forward_demodulation,[],[f4864,f304])).
fof(f4864,plain,(
  ( ! [X85,X83,X86,X84,X82] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86),s(fun('type.num.num',X82),X84))),s('type.num.num',X85)))) | s(X82,X86) != s(X82,'const.ind_type.FCONS_3'(s(X82,X83),s(fun('type.num.num',X82),X84),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) )),
  inference(forward_demodulation,[],[f4775,f359])).
fof(f4775,plain,(
  ( ! [X85,X83,X86,X84,X82] : (p(s(bool,happ(s(fun(X82,bool),happ(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86))),s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))))) | s(X82,X86) != s(X82,'const.ind_type.FCONS_3'(s(X82,X83),s(fun('type.num.num',X82),X84),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) )),
  inference(superposition,[],[f338,f304])).
fof(f4592,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85))) | ~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86),s(fun('type.num.num',X82),X84))),s('type.num.num',X85))))) )),
  inference(forward_demodulation,[],[f4591,f304])).
fof(f4591,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86),s(fun('type.num.num',X82),X84))),s('type.num.num',X85)))) | s(X82,X86) = s(X82,'const.ind_type.FCONS_3'(s(X82,X83),s(fun('type.num.num',X82),X84),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) )),
  inference(forward_demodulation,[],[f4547,f359])).
fof(f4547,plain,(
  ( ! [X85,X83,X86,X84,X82] : (~p(s(bool,happ(s(fun(X82,bool),happ(s(fun(X82,fun(X82,bool)),'=_0'),s(X82,X86))),s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))))) | s(X82,X86) = s(X82,'const.ind_type.FCONS_3'(s(X82,X83),s(fun('type.num.num',X82),X84),s('type.num.num','const.num.SUC_1'(s('type.num.num',X85)))))) )),
  inference(superposition,[],[f337,f304])).
fof(f40625,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x1x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(fun('type.num.num',X0),X2),s(fun('type.num.num',X0),X2))),s('type.num.num',X3))))) )),
  inference(backward_demodulation,[],[f40222,f4791])).
fof(f46849,plain,(
  ( ! [X21,X19,X17,X22,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ind_type.recspace'(X17),bool),sK10(X18,X17,bool)),s('type.ind_type.recspace'(X17),'const.ind_type.CONSTR_3'(s('type.num.num',X19),s(X17,X21),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))))) | s(bool,X22) = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X17,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X17,fun(fun('type.num.num','type.ind_type.recspace'(X17)),fun(fun('type.num.num',bool),bool)))),X18),s('type.num.num',X19))),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))),s(X17,X21))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X17),bool),sK10(X18,X17,bool)),s(fun('type.num.num','type.ind_type.recspace'(X17)),X20))))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f378,f396])).
fof(f46850,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(bool,X28) = s(bool,happ(s(fun('type.ind_type.recspace'(X23),bool),sK10(X24,X23,bool)),s('type.ind_type.recspace'(X23),'const.ind_type.CONSTR_3'(s('type.num.num',X25),s(X23,X27),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))))) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X23,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',bool),bool)))),X24),s('type.num.num',X25))),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))),s(X23,X27))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X23),bool),sK10(X24,X23,bool)),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26)))))) )),
  inference(superposition,[],[f378,f396])).
fof(f46920,plain,(
  ( ! [X486,X488,X485,X487,X489] : (~p(s(bool,happ(s(fun('type.ind_type.recspace'(X485),bool),sK10(X486,X485,bool)),s('type.ind_type.recspace'(X485),'const.ind_type.CONSTR_3'(s('type.num.num',X487),s(X485,X489),s(fun('type.num.num','type.ind_type.recspace'(X485)),X488)))))) | p(s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X485,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X485,fun(fun('type.num.num','type.ind_type.recspace'(X485)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X485,fun(fun('type.num.num','type.ind_type.recspace'(X485)),fun(fun('type.num.num',bool),bool)))),X486),s('type.num.num',X487))),s(fun('type.num.num','type.ind_type.recspace'(X485)),X488))),s(X485,X489))))))) )),
  inference(superposition,[],[f3449,f378])).
fof(f47281,plain,(
  ( ! [X656,X652,X654,X653,X655] : (s(bool,'T_0') != s(bool,happ(s(fun('type.ind_type.recspace'(X652),bool),sK10(X653,X652,bool)),s('type.ind_type.recspace'(X652),'const.ind_type.CONSTR_3'(s('type.num.num',X654),s(X652,X656),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X652,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X652,fun(fun('type.num.num','type.ind_type.recspace'(X652)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X652,fun(fun('type.num.num','type.ind_type.recspace'(X652)),fun(fun('type.num.num',bool),bool)))),X653),s('type.num.num',X654))),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655))),s(X652,X656))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X652),bool),sK10(X653,X652,bool)),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655)))))) )),
  inference(forward_demodulation,[],[f46949,f289])).
fof(f46949,plain,(
  ( ! [X656,X658,X652,X654,X657,X653,X655] : (s(bool,'const.bool.DATATYPE_1'(s(X657,X658))) != s(bool,happ(s(fun('type.ind_type.recspace'(X652),bool),sK10(X653,X652,bool)),s('type.ind_type.recspace'(X652),'const.ind_type.CONSTR_3'(s('type.num.num',X654),s(X652,X656),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655))))) | s(bool,'T_0') = s(bool,happ(s(fun(fun('type.num.num',bool),bool),happ(s(fun(X652,fun(fun('type.num.num',bool),bool)),'_dst_x1x0_2'(s(fun(X652,fun(fun('type.num.num','type.ind_type.recspace'(X652)),fun(fun('type.num.num',bool),bool))),happ(s(fun('type.num.num',fun(X652,fun(fun('type.num.num','type.ind_type.recspace'(X652)),fun(fun('type.num.num',bool),bool)))),X653),s('type.num.num',X654))),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655))),s(X652,X656))),s(fun('type.num.num',bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X652),bool),sK10(X653,X652,bool)),s(fun('type.num.num','type.ind_type.recspace'(X652)),X655)))))) )),
  inference(superposition,[],[f554,f378])).
fof(f32710,plain,(
  ( ! [X19,X17,X20,X18] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X18),s(fun('type.num.num',bool),X17),s('type.num.num',X19))) | s(bool,X20) = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X17))),s(bool,X18))),s('type.num.num',X19))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f377,f396])).
fof(f32711,plain,(
  ( ! [X24,X23,X21,X22] : (s(bool,X24) = s(bool,'const.ind_type.FCONS_3'(s(bool,X22),s(fun('type.num.num',bool),X21),s('type.num.num',X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X21))),s(bool,X22))),s('type.num.num',X23)))) )),
  inference(superposition,[],[f377,f396])).
fof(f32761,plain,(
  ( ! [X177,X178,X179] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X178),s(fun('type.num.num',bool),X177),s('type.num.num',X179)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X177))),s(bool,X178))))))) )),
  inference(superposition,[],[f3449,f377])).
fof(f33037,plain,(
  ( ! [X296,X295,X297] : (s(bool,'T_0') != s(bool,'const.ind_type.FCONS_3'(s(bool,X296),s(fun('type.num.num',bool),X295),s('type.num.num',X297))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X295))),s(bool,X296))),s('type.num.num',X297)))) )),
  inference(forward_demodulation,[],[f32793,f289])).
fof(f32793,plain,(
  ( ! [X296,X298,X295,X297,X299] : (s(bool,'const.bool.DATATYPE_1'(s(X298,X299))) != s(bool,'const.ind_type.FCONS_3'(s(bool,X296),s(fun('type.num.num',bool),X295),s('type.num.num',X297))) | s(bool,'T_0') = s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X295))),s(bool,X296))),s('type.num.num',X297)))) )),
  inference(superposition,[],[f554,f377])).
fof(f298,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK4(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f223])).
fof(f558,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) | s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f298,f290])).
fof(f559,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5)))) | s(X3,X7) = s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) )),
  inference(superposition,[],[f298,f330])).
fof(f560,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9)))) | s(X8,X11) = s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) )),
  inference(superposition,[],[f298,f295])).
fof(f3321,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1))) | s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) )),
  inference(superposition,[],[f562,f290])).
fof(f3322,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X3,bool),X5))) | s(X3,X7) = s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) )),
  inference(superposition,[],[f562,f330])).
fof(f3323,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X8,bool),X9))) | s(X8,X11) = s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) )),
  inference(superposition,[],[f562,f295])).
fof(f3324,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X12,bool),X13))) | s(X12,X15) = s(X12,sK4(X15,sK4(X13,X14,fun(X12,bool)),X12)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X12,bool),bool),X14)))) )),
  inference(superposition,[],[f562,f562])).
fof(f3342,plain,(
  ( ! [X26,X24,X27,X25] : (s(X24,X25) != s(X24,X27) | s('type.benchmark.times'(X24),'const.benchmark.Once_1'(s(X24,X27))) = s('type.benchmark.times'(X24),'const.benchmark.Once_1'(s(X24,sK4(X25,X26,X24)))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X24,bool),X26)))) )),
  inference(superposition,[],[f303,f562])).
fof(f3387,plain,(
  ( ! [X165,X163,X166,X164] : (p(s(bool,'|dollar|exists_1'(s(fun(X163,bool),X164)))) | s(X163,X166) = s(X163,sK4(X166,sK4(X164,X165,fun(X163,bool)),X163)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X163,bool),bool),X165)))) )),
  inference(superposition,[],[f298,f562])).
fof(f3433,plain,(
  ( ! [X173,X171,X174,X172] : (s(bool,'T_0') != s(bool,X173) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X173))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'|dollar|exists_1'(s(fun(X171,bool),X172))))) | s(X171,X174) = s(X171,sK4(X174,X172,X171))) )),
  inference(superposition,[],[f303,f562])).
fof(f3450,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,X37)) | s(bool,X37) = s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | s(X35,X38) = s(X35,sK4(X38,X36,X35))) )),
  inference(subsumption_resolution,[],[f3399,f246])).
fof(f3399,plain,(
  ( ! [X37,X35,X38,X36] : (~p(s(bool,'T_0')) | ~p(s(bool,X37)) | s(bool,X37) = s(bool,'|dollar|exists_1'(s(fun(X35,bool),X36))) | s(X35,X38) = s(X35,sK4(X38,X36,X35))) )),
  inference(superposition,[],[f315,f562])).
fof(f3454,plain,(
  ( ! [X103,X105,X106,X104] : (p(s(bool,'|dollar|exists_1'(s(fun(X105,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X103,bool),X104)))))))) | s(X103,X106) = s(X103,sK4(X106,X104,X103))) )),
  inference(subsumption_resolution,[],[f3415,f246])).
fof(f3415,plain,(
  ( ! [X103,X105,X106,X104] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X105,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X103,bool),X104)))))))) | s(X103,X106) = s(X103,sK4(X106,X104,X103))) )),
  inference(superposition,[],[f1169,f562])).
fof(f18000,plain,(
  ( ! [X528,X524,X526,X522,X525,X527,X523] : (p(s(bool,'|dollar|exists_1'(s(fun(X522,bool),happ(s(fun(X524,fun(X522,bool)),X525),s(X524,happ(s(fun(X523,X524),X526),s(X523,X527)))))))) | s(X522,X528) = s(X522,sK4(X528,happ(s(fun(X523,fun(X522,bool)),'_dst_x0x1_2'(s(fun(X524,fun(X522,bool)),X525),s(fun(X523,X524),X526))),s(X523,X527)),X522))) )),
  inference(superposition,[],[f298,f340])).
fof(f17327,plain,(
  ( ! [X436,X438,X434,X437,X439,X435] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X434,bool),happ(s(fun(X435,fun(X434,bool)),X437),s(X435,X436))))) | s(X434,X439) = s(X434,sK4(X439,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X435),'const.benchmark.Once_1'(s(X435,X436))),s(fun(X435,fun(X434,bool)),X437),s(fun('type.benchmark.times'(X435),fun('type.benchmark.times'(X435),fun(X434,bool))),X438)),X434))) )),
  inference(superposition,[],[f562,f335])).
fof(f17321,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (p(s(bool,'|dollar|exists_1'(s(fun(X400,bool),happ(s(fun(X401,fun(X400,bool)),X403),s(X401,X402)))))) | s(X400,X405) = s(X400,sK4(X405,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X401),'const.benchmark.Once_1'(s(X401,X402))),s(fun(X401,fun(X400,bool)),X403),s(fun('type.benchmark.times'(X401),fun('type.benchmark.times'(X401),fun(X400,bool))),X404)),X400))) )),
  inference(superposition,[],[f298,f335])).
fof(f16152,plain,(
  ( ! [X341,X343,X339,X340,X342] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X339,bool),happ(s(fun(X340,fun(X339,bool)),X342),s(X340,X341))))) | s(X339,X343) = s(X339,sK4(X343,happ(s(fun(fun(X340,fun(X339,bool)),fun(X339,bool)),'_dstsel_0_x0_1'(s(X340,X341))),s(fun(X340,fun(X339,bool)),X342)),X339))) )),
  inference(superposition,[],[f562,f333])).
fof(f16146,plain,(
  ( ! [X313,X315,X312,X314,X311] : (p(s(bool,'|dollar|exists_1'(s(fun(X311,bool),happ(s(fun(X312,fun(X311,bool)),X314),s(X312,X313)))))) | s(X311,X315) = s(X311,sK4(X315,happ(s(fun(fun(X312,fun(X311,bool)),fun(X311,bool)),'_dstsel_0_x0_1'(s(X312,X313))),s(fun(X312,fun(X311,bool)),X314)),X311))) )),
  inference(superposition,[],[f298,f333])).
fof(f31851,plain,(
  ( ! [X705,X707,X708,X702,X704,X706,X703] : (p(s(bool,'|dollar|exists_1'(s(fun(X702,bool),happ(s(fun(X704,fun(X702,bool)),happ(s(fun(X703,fun(X704,fun(X702,bool))),X705),s(X703,X707))),s(X704,X706)))))) | s(X702,X708) = s(X702,sK4(X708,happ(s(fun(X703,fun(X702,bool)),'_dst_x1x0_2'(s(fun(X703,fun(X704,fun(X702,bool))),X705),s(X704,X706))),s(X703,X707)),X702))) )),
  inference(superposition,[],[f298,f341])).
fof(f36183,plain,(
  ( ! [X1075,X1073,X1070,X1068,X1074,X1072,X1067,X1071,X1069] : (p(s(bool,'|dollar|exists_1'(s(fun(X1067,bool),happ(s(fun(X1070,fun(X1067,bool)),happ(s(fun(X1069,fun(X1070,fun(X1067,bool))),X1071),s(X1069,X1072))),s(X1070,happ(s(fun(X1068,X1070),X1073),s(X1068,X1074)))))))) | s(X1067,X1075) = s(X1067,sK4(X1075,happ(s(fun(X1068,fun(X1067,bool)),'_dst_x0x0x1_3'(s(fun(X1069,fun(X1070,fun(X1067,bool))),X1071),s(X1069,X1072),s(fun(X1068,X1070),X1073))),s(X1068,X1074)),X1067))) )),
  inference(superposition,[],[f298,f359])).
fof(f17879,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (p(s(bool,'|dollar|exists_1'(s(fun(X600,bool),happ(s(fun(X603,fun(X600,bool)),'_dst_x0x1_2'(s(fun(X601,fun(X600,bool)),X602),s(fun(X603,X601),X604))),s(X603,X605)))))) | s(X600,X606) = s(X600,sK4(X606,happ(s(fun(X601,fun(X600,bool)),X602),s(X601,happ(s(fun(X603,X601),X604),s(X603,X605)))),X600))) )),
  inference(superposition,[],[f298,f340])).
fof(f32012,plain,(
  ( ! [X720,X722,X716,X718,X721,X717,X719] : (p(s(bool,'|dollar|exists_1'(s(fun(X716,bool),happ(s(fun(X718,fun(X716,bool)),'_dst_x1x0_2'(s(fun(X718,fun(X717,fun(X716,bool))),X719),s(X717,X721))),s(X718,X720)))))) | s(X716,X722) = s(X716,sK4(X722,happ(s(fun(X717,fun(X716,bool)),happ(s(fun(X718,fun(X717,fun(X716,bool))),X719),s(X718,X720))),s(X717,X721)),X716))) )),
  inference(superposition,[],[f298,f341])).
fof(f37493,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X141,X148] : (p(s(bool,'|dollar|exists_1'(s(fun(X141,bool),happ(s(fun(X145,fun(X141,bool)),'_dst_x00x10x01_3'(s(fun(X142,fun(X143,bool)),X144),s(fun(X145,X142),X146),s(fun(X141,X143),X148))),s(X145,X147)))))) | s(X141,X149) = s(X141,sK4(X149,'_dst_x0x0x1_3'(s(fun(X142,fun(X143,bool)),X144),s(X142,happ(s(fun(X145,X142),X146),s(X145,X147))),s(fun(X141,X143),X148)),X141))) )),
  inference(superposition,[],[f298,f362])).
fof(f33922,plain,(
  ( ! [X88,X87,X85,X83,X86,X84,X82] : (p(s(bool,'|dollar|exists_1'(s(fun(X82,bool),happ(s(fun(X85,fun(X82,bool)),'_dst_x00x11_2'(s(fun(X83,bool),X84),s(fun(X85,fun(X82,X83)),X86))),s(X85,X87)))))) | s(X82,X88) = s(X82,sK4(X88,'_dst_x0x1_2'(s(fun(X83,bool),X84),s(fun(X82,X83),happ(s(fun(X85,fun(X82,X83)),X86),s(X85,X87)))),X82))) )),
  inference(superposition,[],[f298,f358])).
fof(f41718,plain,(
  ( ! [X210,X208,X206,X204,X211,X209,X207,X205,X203] : (p(s(bool,'|dollar|exists_1'(s(fun(X203,bool),happ(s(fun(X208,fun(X203,bool)),'_dst_x00x01x11_3'(s(fun(X204,fun(X205,bool)),X206),s(fun(X203,X204),X207),s(fun(X208,fun(X203,X205)),X209))),s(X208,X210)))))) | s(X203,X211) = s(X203,sK4(X211,'_dst_x0x1x1_3'(s(fun(X204,fun(X205,bool)),X206),s(fun(X203,X204),X207),s(fun(X203,X205),happ(s(fun(X208,fun(X203,X205)),X209),s(X208,X210)))),X203))) )),
  inference(superposition,[],[f298,f364])).
fof(f43744,plain,(
  ( ! [X315,X321,X323,X316,X318,X320,X322,X317,X319] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X315,bool),happ(s(fun(X319,fun(X315,bool)),'_dst_x00x11x11_3'(s(fun(X316,fun(X317,bool)),X318),s(fun(X319,fun(X315,X316)),X320),s(fun(X319,fun(X315,X317)),X322))),s(X319,X321))))) | s(X315,X323) = s(X315,sK4(X323,'_dst_x0x1x1_3'(s(fun(X316,fun(X317,bool)),X318),s(fun(X315,X316),happ(s(fun(X319,fun(X315,X316)),X320),s(X319,X321))),s(fun(X315,X317),happ(s(fun(X319,fun(X315,X317)),X322),s(X319,X321)))),X315))) )),
  inference(superposition,[],[f562,f365])).
fof(f43736,plain,(
  ( ! [X243,X251,X249,X246,X244,X250,X248,X247,X245] : (p(s(bool,'|dollar|exists_1'(s(fun(X243,bool),happ(s(fun(X247,fun(X243,bool)),'_dst_x00x11x11_3'(s(fun(X244,fun(X245,bool)),X246),s(fun(X247,fun(X243,X244)),X248),s(fun(X247,fun(X243,X245)),X250))),s(X247,X249)))))) | s(X243,X251) = s(X243,sK4(X251,'_dst_x0x1x1_3'(s(fun(X244,fun(X245,bool)),X246),s(fun(X243,X244),happ(s(fun(X247,fun(X243,X244)),X248),s(X247,X249))),s(fun(X243,X245),happ(s(fun(X247,fun(X243,X245)),X250),s(X247,X249)))),X243))) )),
  inference(superposition,[],[f298,f365])).
fof(f36364,plain,(
  ( ! [X1081,X1087,X1085,X1079,X1082,X1080,X1086,X1084,X1083] : (p(s(bool,'|dollar|exists_1'(s(fun(X1079,bool),happ(s(fun(X1084,fun(X1079,bool)),'_dst_x0x0x1_3'(s(fun(X1081,fun(X1080,fun(X1079,bool))),X1082),s(X1081,X1083),s(fun(X1084,X1080),X1085))),s(X1084,X1086)))))) | s(X1079,X1087) = s(X1079,sK4(X1087,happ(s(fun(X1080,fun(X1079,bool)),happ(s(fun(X1081,fun(X1080,fun(X1079,bool))),X1082),s(X1081,X1083))),s(X1080,happ(s(fun(X1084,X1080),X1085),s(X1084,X1086)))),X1079))) )),
  inference(superposition,[],[f298,f359])).
fof(f40403,plain,(
  ( ! [X1360,X1362,X1354,X1356,X1358,X1361,X1355,X1357,X1359] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1354,bool),happ(s(fun(X1358,fun(X1354,bool)),'_dst_x0x1x1_3'(s(fun(X1356,fun(X1355,fun(X1354,bool))),X1357),s(fun(X1358,X1356),X1359),s(fun(X1358,X1355),X1361))),s(X1358,X1360))))) | s(X1354,X1362) = s(X1354,sK4(X1362,happ(s(fun(X1355,fun(X1354,bool)),happ(s(fun(X1356,fun(X1355,fun(X1354,bool))),X1357),s(X1356,happ(s(fun(X1358,X1356),X1359),s(X1358,X1360))))),s(X1355,happ(s(fun(X1358,X1355),X1361),s(X1358,X1360)))),X1354))) )),
  inference(superposition,[],[f562,f360])).
fof(f40395,plain,(
  ( ! [X1288,X1290,X1282,X1284,X1286,X1289,X1283,X1285,X1287] : (p(s(bool,'|dollar|exists_1'(s(fun(X1282,bool),happ(s(fun(X1286,fun(X1282,bool)),'_dst_x0x1x1_3'(s(fun(X1284,fun(X1283,fun(X1282,bool))),X1285),s(fun(X1286,X1284),X1287),s(fun(X1286,X1283),X1289))),s(X1286,X1288)))))) | s(X1282,X1290) = s(X1282,sK4(X1290,happ(s(fun(X1283,fun(X1282,bool)),happ(s(fun(X1284,fun(X1283,fun(X1282,bool))),X1285),s(X1284,happ(s(fun(X1286,X1284),X1287),s(X1286,X1288))))),s(X1283,happ(s(fun(X1286,X1283),X1289),s(X1286,X1288)))),X1282))) )),
  inference(superposition,[],[f298,f360])).
fof(f38206,plain,(
  ( ! [X189,X187,X185,X182,X190,X188,X186,X184,X183] : (p(s(bool,'|dollar|exists_1'(s(fun(X182,bool),happ(s(fun(X187,fun(X182,bool)),'_dst_x00x00x11_3'(s(fun(X183,fun(X184,bool)),X185),s(X183,X186),s(fun(X187,fun(X182,X184)),X188))),s(X187,X189)))))) | s(X182,X190) = s(X182,sK4(X190,'_dst_x0x0x1_3'(s(fun(X183,fun(X184,bool)),X185),s(X183,X186),s(fun(X182,X184),happ(s(fun(X187,fun(X182,X184)),X188),s(X187,X189)))),X182))) )),
  inference(superposition,[],[f298,f363])).
fof(f35018,plain,(
  ( ! [X786,X790,X788,X787,X791,X789,X792] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X786,bool),happ(s(fun('type.benchmark.times'(X787),fun(X786,bool)),happ(s(fun('type.benchmark.times'(X787),fun('type.benchmark.times'(X787),fun(X786,bool))),X791),s('type.benchmark.times'(X787),X788))),s('type.benchmark.times'(X787),X789))))) | s(X786,X792) = s(X786,sK4(X792,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X787),'const.benchmark.Twice_2'(s('type.benchmark.times'(X787),X788),s('type.benchmark.times'(X787),X789))),s(fun(X787,fun(X786,bool)),X790),s(fun('type.benchmark.times'(X787),fun('type.benchmark.times'(X787),fun(X786,bool))),X791)),X786))) )),
  inference(superposition,[],[f562,f336])).
fof(f35010,plain,(
  ( ! [X736,X732,X734,X730,X733,X735,X731] : (p(s(bool,'|dollar|exists_1'(s(fun(X730,bool),happ(s(fun('type.benchmark.times'(X731),fun(X730,bool)),happ(s(fun('type.benchmark.times'(X731),fun('type.benchmark.times'(X731),fun(X730,bool))),X735),s('type.benchmark.times'(X731),X732))),s('type.benchmark.times'(X731),X733)))))) | s(X730,X736) = s(X730,sK4(X736,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X731),'const.benchmark.Twice_2'(s('type.benchmark.times'(X731),X732),s('type.benchmark.times'(X731),X733))),s(fun(X731,fun(X730,bool)),X734),s(fun('type.benchmark.times'(X731),fun('type.benchmark.times'(X731),fun(X730,bool))),X735)),X730))) )),
  inference(superposition,[],[f298,f336])).
fof(f53233,plain,(
  ( ! [X656,X654,X657,X655] : (p(s(bool,'|dollar|exists_1'(s(fun(X654,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X654,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X654,bool))),X656),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | s(X654,X657) = s(X654,sK4(X657,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X654,bool)),X655),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X654,bool))),X656)),X654))) )),
  inference(superposition,[],[f298,f34843])).
fof(f4244,plain,(
  ( ! [X249,X246,X248,X247,X245] : (p(s(bool,'|dollar|exists_1'(s(fun(X245,bool),happ(s(fun('type.num.num',fun(X245,bool)),X247),s('type.num.num',X248)))))) | s(X245,X249) = s(X245,sK4(X249,'const.ind_type.FCONS_3'(s(fun(X245,bool),X246),s(fun('type.num.num',fun(X245,bool)),X247),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248)))),X245))) )),
  inference(superposition,[],[f298,f304])).
fof(f4242,plain,(
  ( ! [X239,X237,X235,X238,X236] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X235,bool),happ(s(fun('type.num.num',fun(X235,bool)),X237),s('type.num.num',X238))))) | s(X235,X239) = s(X235,sK4(X239,'const.ind_type.FCONS_3'(s(fun(X235,bool),X236),s(fun('type.num.num',fun(X235,bool)),X237),s('type.num.num','const.num.SUC_1'(s('type.num.num',X238)))),X235))) )),
  inference(superposition,[],[f562,f304])).
fof(f47030,plain,(
  ( ! [X1273,X1267,X1271,X1269,X1272,X1270,X1268] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1267,bool),happ(s(fun('type.ind_type.recspace'(X1268),fun(X1267,bool)),sK10(X1269,X1268,fun(X1267,bool))),s('type.ind_type.recspace'(X1268),'const.ind_type.CONSTR_3'(s('type.num.num',X1270),s(X1268,X1272),s(fun('type.num.num','type.ind_type.recspace'(X1268)),X1271))))))) | s(X1267,X1273) = s(X1267,sK4(X1273,happ(s(fun(fun('type.num.num',fun(X1267,bool)),fun(X1267,bool)),happ(s(fun(X1268,fun(fun('type.num.num',fun(X1267,bool)),fun(X1267,bool))),'_dst_x1x0_2'(s(fun(X1268,fun(fun('type.num.num','type.ind_type.recspace'(X1268)),fun(fun('type.num.num',fun(X1267,bool)),fun(X1267,bool)))),happ(s(fun('type.num.num',fun(X1268,fun(fun('type.num.num','type.ind_type.recspace'(X1268)),fun(fun('type.num.num',fun(X1267,bool)),fun(X1267,bool))))),X1269),s('type.num.num',X1270))),s(fun('type.num.num','type.ind_type.recspace'(X1268)),X1271))),s(X1268,X1272))),s(fun('type.num.num',fun(X1267,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1268),fun(X1267,bool)),sK10(X1269,X1268,fun(X1267,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1268)),X1271)))),X1267))) )),
  inference(superposition,[],[f562,f378])).
fof(f47022,plain,(
  ( ! [X1213,X1217,X1214,X1212,X1211,X1216,X1215] : (p(s(bool,'|dollar|exists_1'(s(fun(X1211,bool),happ(s(fun('type.ind_type.recspace'(X1212),fun(X1211,bool)),sK10(X1213,X1212,fun(X1211,bool))),s('type.ind_type.recspace'(X1212),'const.ind_type.CONSTR_3'(s('type.num.num',X1214),s(X1212,X1216),s(fun('type.num.num','type.ind_type.recspace'(X1212)),X1215)))))))) | s(X1211,X1217) = s(X1211,sK4(X1217,happ(s(fun(fun('type.num.num',fun(X1211,bool)),fun(X1211,bool)),happ(s(fun(X1212,fun(fun('type.num.num',fun(X1211,bool)),fun(X1211,bool))),'_dst_x1x0_2'(s(fun(X1212,fun(fun('type.num.num','type.ind_type.recspace'(X1212)),fun(fun('type.num.num',fun(X1211,bool)),fun(X1211,bool)))),happ(s(fun('type.num.num',fun(X1212,fun(fun('type.num.num','type.ind_type.recspace'(X1212)),fun(fun('type.num.num',fun(X1211,bool)),fun(X1211,bool))))),X1213),s('type.num.num',X1214))),s(fun('type.num.num','type.ind_type.recspace'(X1212)),X1215))),s(X1212,X1216))),s(fun('type.num.num',fun(X1211,bool)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1212),fun(X1211,bool)),sK10(X1213,X1212,fun(X1211,bool))),s(fun('type.num.num','type.ind_type.recspace'(X1212)),X1215)))),X1211))) )),
  inference(superposition,[],[f298,f378])).
fof(f54108,plain,(
  ( ! [X777,X775,X776,X774] : (p(s(bool,'|dollar|exists_1'(s(fun(X774,bool),happ(s(fun(sK0,fun(X774,bool)),X776),s(sK0,sK3)))))) | s(X774,X777) = s(X774,sK4(X777,happ(s(fun('type.benchmark.times'(sK0),fun(X774,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X774,bool))),X775),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X774))) )),
  inference(forward_demodulation,[],[f53482,f335])).
fof(f53482,plain,(
  ( ! [X777,X775,X776,X774] : (p(s(bool,'|dollar|exists_1'(s(fun(X774,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X774,bool)),X776),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X774,bool))),X775)))))) | s(X774,X777) = s(X774,sK4(X777,happ(s(fun('type.benchmark.times'(sK0),fun(X774,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X774,bool))),X775),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X774))) )),
  inference(superposition,[],[f298,f34843])).
fof(f33976,plain,(
  ( ! [X88,X87,X85,X83,X86,X84,X82] : (p(s(bool,'|dollar|exists_1'(s(fun(X82,bool),'_dst_x0x1_2'(s(fun(X84,bool),X85),s(fun(X82,X84),happ(s(fun(X83,fun(X82,X84)),X86),s(X83,X87)))))))) | s(X82,X88) = s(X82,sK4(X88,happ(s(fun(X83,fun(X82,bool)),'_dst_x00x11_2'(s(fun(X84,bool),X85),s(fun(X83,fun(X82,X84)),X86))),s(X83,X87)),X82))) )),
  inference(superposition,[],[f298,f358])).
fof(f32854,plain,(
  ( ! [X546,X545,X547,X543,X544] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X543,bool),'const.ind_type.FCONS_3'(s(fun(X543,bool),X545),s(fun('type.num.num',fun(X543,bool)),X544),s('type.num.num',X546))))) | s(X543,X547) = s(X543,sK4(X547,happ(s(fun('type.num.num',fun(X543,bool)),happ(s(fun(fun(X543,bool),fun('type.num.num',fun(X543,bool))),'_dst_x1x0_2'(s(fun(fun(X543,bool),fun(fun('type.num.num',fun(X543,bool)),fun('type.num.num',fun(X543,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X543,bool)),X544))),s(fun(X543,bool),X545))),s('type.num.num',X546)),X543))) )),
  inference(superposition,[],[f562,f377])).
fof(f32846,plain,(
  ( ! [X505,X507,X504,X506,X503] : (p(s(bool,'|dollar|exists_1'(s(fun(X503,bool),'const.ind_type.FCONS_3'(s(fun(X503,bool),X505),s(fun('type.num.num',fun(X503,bool)),X504),s('type.num.num',X506)))))) | s(X503,X507) = s(X503,sK4(X507,happ(s(fun('type.num.num',fun(X503,bool)),happ(s(fun(fun(X503,bool),fun('type.num.num',fun(X503,bool))),'_dst_x1x0_2'(s(fun(fun(X503,bool),fun(fun('type.num.num',fun(X503,bool)),fun('type.num.num',fun(X503,bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X503,bool)),X504))),s(fun(X503,bool),X505))),s('type.num.num',X506)),X503))) )),
  inference(superposition,[],[f298,f377])).
fof(f1169,plain,(
  ( ! [X21,X22] : (~p(s(bool,X22)) | p(s(bool,'|dollar|exists_1'(s(fun(X21,bool),'_dst_x0_1'(s(bool,X22))))))) )),
  inference(superposition,[],[f299,f330])).
fof(f1527,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X0)))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1514,f246])).
fof(f1514,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X0)))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1169,f396])).
fof(f3373,plain,(
  ( ! [X121,X122,X120] : (~p(s(bool,X120)) | p(s(bool,'|dollar|exists_1'(s(fun(X122,bool),'_dst_x0_1'(s(bool,sK4(X120,X121,bool))))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X121)))) )),
  inference(superposition,[],[f1169,f562])).
fof(f38276,plain,(
  ( ! [X198,X196,X194,X202,X200,X199,X197,X195,X201] : (p(s(bool,'|dollar|exists_1'(s(fun(X194,bool),'_dst_x0x0x1_3'(s(fun(X196,fun(X197,bool)),X198),s(X196,X199),s(fun(X194,X197),happ(s(fun(X195,fun(X194,X197)),X200),s(X195,X201)))))))) | s(X194,X202) = s(X194,sK4(X202,happ(s(fun(X195,fun(X194,bool)),'_dst_x00x00x11_3'(s(fun(X196,fun(X197,bool)),X198),s(X196,X199),s(fun(X195,fun(X194,X197)),X200))),s(X195,X201)),X194))) )),
  inference(superposition,[],[f298,f363])).
fof(f37559,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X172,X170,X168] : (p(s(bool,'|dollar|exists_1'(s(fun(X164,bool),'_dst_x0x0x1_3'(s(fun(X166,fun(X167,bool)),X168),s(X166,happ(s(fun(X165,X166),X169),s(X165,X171))),s(fun(X164,X167),X170)))))) | s(X164,X172) = s(X164,sK4(X172,happ(s(fun(X165,fun(X164,bool)),'_dst_x00x10x01_3'(s(fun(X166,fun(X167,bool)),X168),s(fun(X165,X166),X169),s(fun(X164,X167),X170))),s(X165,X171)),X164))) )),
  inference(superposition,[],[f298,f362])).
fof(f41801,plain,(
  ( ! [X261,X263,X269,X265,X267,X262,X268,X264,X266] : (p(s(bool,'|dollar|exists_1'(s(fun(X261,bool),'_dst_x0x1x1_3'(s(fun(X263,fun(X264,bool)),X265),s(fun(X261,X263),X266),s(fun(X261,X264),happ(s(fun(X262,fun(X261,X264)),X267),s(X262,X268)))))))) | s(X261,X269) = s(X261,sK4(X269,happ(s(fun(X262,fun(X261,bool)),'_dst_x00x01x11_3'(s(fun(X263,fun(X264,bool)),X265),s(fun(X261,X263),X266),s(fun(X262,fun(X261,X264)),X267))),s(X262,X268)),X261))) )),
  inference(superposition,[],[f298,f364])).
fof(f14014,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0)))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f13930,f396])).
fof(f3349,plain,(
  ( ! [X52,X53] : (p(s(bool,X52)) | s(bool,'T_0') != s(bool,sK4(X52,X53,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X53)))) )),
  inference(superposition,[],[f251,f562])).
fof(f3350,plain,(
  ( ! [X54,X55] : (~p(s(bool,X54)) | s(bool,'T_0') = s(bool,sK4(X54,X55,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X55)))) )),
  inference(superposition,[],[f252,f562])).
fof(f3353,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,X60)) | p(s(bool,X62)) | s(bool,X62) = s(bool,sK4(X60,X61,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X61)))) )),
  inference(superposition,[],[f312,f562])).
fof(f3355,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,X66)) | ~p(s(bool,X68)) | s(bool,X68) = s(bool,sK4(X66,X67,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X67)))) )),
  inference(superposition,[],[f315,f562])).
fof(f3368,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,X105)) | s(bool,X107) != s(bool,sK4(X105,X106,bool)) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X106)))) )),
  inference(superposition,[],[f399,f562])).
fof(f3370,plain,(
  ( ! [X111,X112,X110] : (p(s(bool,X110)) | s(bool,X112) = s(bool,sK4(X110,X111,bool)) | s(bool,'T_0') = s(bool,X112) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X111)))) )),
  inference(superposition,[],[f454,f562])).
fof(f30622,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X69,bool),bool),'_dstsel_0_x0_1'(s(X69,happ(s(fun(X70,X69),X71),s(X70,X72))))))) | s(fun(X69,bool),X73) = s(fun(X69,bool),sK4(X73,happ(s(fun(X70,fun(fun(X69,bool),bool)),'_dstsel_1_x10_1'(s(fun(X70,X69),X71))),s(X70,X72)),fun(X69,bool)))) )),
  inference(superposition,[],[f562,f339])).
fof(f30614,plain,(
  ( ! [X30,X33,X31,X29,X32] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X29,bool),bool),'_dstsel_0_x0_1'(s(X29,happ(s(fun(X30,X29),X31),s(X30,X32)))))))) | s(fun(X29,bool),X33) = s(fun(X29,bool),sK4(X33,happ(s(fun(X30,fun(fun(X29,bool),bool)),'_dstsel_1_x10_1'(s(fun(X30,X29),X31))),s(X30,X32)),fun(X29,bool)))) )),
  inference(superposition,[],[f298,f339])).
fof(f46662,plain,(
  ( ! [X383,X385,X387,X382,X388,X384,X386] : (s(X383,happ(s(fun('type.ind_type.recspace'(X382),X383),sK10(sK4(X384,X385,fun('type.num.num',fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),fun(fun('type.num.num',X383),X383))))),X382,X383)),s('type.ind_type.recspace'(X382),'const.ind_type.CONSTR_3'(s('type.num.num',X386),s(X382,X387),s(fun('type.num.num','type.ind_type.recspace'(X382)),X388))))) = s(X383,happ(s(fun(fun('type.num.num',X383),X383),happ(s(fun(X382,fun(fun('type.num.num',X383),X383)),'_dst_x1x0_2'(s(fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),fun(fun('type.num.num',X383),X383))),happ(s(fun('type.num.num',fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),fun(fun('type.num.num',X383),X383)))),X384),s('type.num.num',X386))),s(fun('type.num.num','type.ind_type.recspace'(X382)),X388))),s(X382,X387))),s(fun('type.num.num',X383),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X382),X383),sK10(sK4(X384,X385,fun('type.num.num',fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),fun(fun('type.num.num',X383),X383))))),X382,X383)),s(fun('type.num.num','type.ind_type.recspace'(X382)),X388))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun('type.num.num',fun(X382,fun(fun('type.num.num','type.ind_type.recspace'(X382)),fun(fun('type.num.num',X383),X383)))),bool),X385)))) )),
  inference(superposition,[],[f378,f562])).
fof(f29447,plain,(
  ( ! [X76,X74,X72,X77,X75,X73] : (s('type.benchmark.times'(X72),X73) != s('type.benchmark.times'(X72),X75) | s('type.benchmark.times'(X72),X76) != s('type.benchmark.times'(X72),X77) | s('type.benchmark.times'(X72),'const.benchmark.Twice_2'(s('type.benchmark.times'(X72),X75),s('type.benchmark.times'(X72),X77))) = s('type.benchmark.times'(X72),'const.benchmark.Twice_2'(s('type.benchmark.times'(X72),sK4(X73,X74,'type.benchmark.times'(X72))),s('type.benchmark.times'(X72),X76))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(X72),bool),X74)))) )),
  inference(superposition,[],[f310,f562])).
fof(f17050,plain,(
  ( ! [X21,X22,X20] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X20),s('type.benchmark.times'(sK0),X22))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),sK4(X20,X21,'type.benchmark.times'(sK0))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X21)))) )),
  inference(superposition,[],[f17025,f562])).
fof(f17145,plain,(
  ( ! [X21,X22,X20] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X22),s('type.benchmark.times'(sK0),X20))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),sK4(X20,X21,'type.benchmark.times'(sK0))))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X21)))) )),
  inference(superposition,[],[f17120,f562])).
fof(f17427,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X41),s('type.benchmark.times'(sK0),X43))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X44,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),sK4(X41,X42,'type.benchmark.times'(sK0))))),s(X44,X45))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X42)))) )),
  inference(superposition,[],[f17026,f562])).
fof(f17456,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X33),s('type.benchmark.times'(sK0),X35))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),sK4(X33,X34,'type.benchmark.times'(sK0))),s(fun('type.num.num','type.benchmark.times'(sK0)),X36),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X34)))) )),
  inference(superposition,[],[f17028,f562])).
fof(f17634,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X43),s('type.benchmark.times'(sK0),X41))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X44,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),sK4(X41,X42,'type.benchmark.times'(sK0))))),s(X44,X45))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X42)))) )),
  inference(superposition,[],[f17121,f562])).
fof(f17663,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X35),s('type.benchmark.times'(sK0),X33))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),sK4(X33,X34,'type.benchmark.times'(sK0))),s(fun('type.num.num','type.benchmark.times'(sK0)),X36),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X34)))) )),
  inference(superposition,[],[f17123,f562])).
fof(f53173,plain,(
  ( ! [X422,X424,X423] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X424,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X423),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X422),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X423)))) )),
  inference(superposition,[],[f2216,f34843])).
fof(f53158,plain,(
  ( ! [X374,X376,X373,X375] : (s(bool,'T_0') = s(bool,happ(s(fun(X375,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X374),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X375,X376))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X373),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X374)))) )),
  inference(superposition,[],[f515,f34843])).
fof(f53157,plain,(
  ( ! [X372,X370,X371] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X371),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num',bool),X372),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X370),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X371)))) )),
  inference(superposition,[],[f479,f34843])).
fof(f53155,plain,(
  ( ! [X366,X365] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X366),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X365),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X366)))) )),
  inference(superposition,[],[f429,f34843])).
fof(f54145,plain,(
  ( ! [X1280,X1281] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(sK0,'type.num.num'),X1281),s(sK0,sK3))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.benchmark.times'(sK0),'type.num.num'),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.num.num')),X1280),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'('type.benchmark.times'(sK0)),'const.benchmark.Once_1'(s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53559,f335])).
fof(f53559,plain,(
  ( ! [X1280,X1281] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.benchmark.times'(sK0),'type.num.num'),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.num.num')),X1280),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'('type.benchmark.times'(sK0)),'const.benchmark.Once_1'(s('type.benchmark.times'(sK0),sK1))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.num.num'),X1281),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.num.num')),X1280)))))) )),
  inference(superposition,[],[f296,f34843])).
fof(f53555,plain,(
  ( ! [X1258,X1256,X1254,X1259,X1257,X1255] : (s('type.benchmark.times'(X1254),X1257) != s('type.benchmark.times'(X1254),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1254)),X1256),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1254))),X1255))) | s('type.benchmark.times'(X1254),X1258) != s('type.benchmark.times'(X1254),X1259) | s('type.benchmark.times'(X1254),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1254),X1257),s('type.benchmark.times'(X1254),X1259))) = s('type.benchmark.times'(X1254),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1254),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1254)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1254))),X1255),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X1254),X1258)))) )),
  inference(superposition,[],[f310,f34843])).
fof(f54143,plain,(
  ( ! [X1234,X1232,X1231,X1235,X1233,X1230] : (s('type.benchmark.times'(X1230),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1230),X1234),s('type.benchmark.times'(X1230),X1235))) != s('type.benchmark.times'(X1230),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1230),X1233),s('type.benchmark.times'(X1230),happ(s(fun(sK0,'type.benchmark.times'(X1230)),X1232),s(sK0,sK3))))) | s('type.benchmark.times'(X1230),X1235) = s('type.benchmark.times'(X1230),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1230)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1230))),X1231),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53551,f335])).
fof(f53551,plain,(
  ( ! [X1234,X1232,X1231,X1235,X1233,X1230] : (s('type.benchmark.times'(X1230),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1230),X1234),s('type.benchmark.times'(X1230),X1235))) != s('type.benchmark.times'(X1230),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1230),X1233),s('type.benchmark.times'(X1230),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1230)),X1232),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1230))),X1231))))) | s('type.benchmark.times'(X1230),X1235) = s('type.benchmark.times'(X1230),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1230)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1230))),X1231),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f309,f34843])).
fof(f54141,plain,(
  ( ! [X1213,X1217,X1214,X1212,X1216,X1215] : (s('type.benchmark.times'(X1212),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1212),X1216),s('type.benchmark.times'(X1212),X1217))) != s('type.benchmark.times'(X1212),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1212),happ(s(fun(sK0,'type.benchmark.times'(X1212)),X1214),s(sK0,sK3))),s('type.benchmark.times'(X1212),X1215))) | s('type.benchmark.times'(X1212),X1216) = s('type.benchmark.times'(X1212),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1212)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1212))),X1213),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53548,f335])).
fof(f53548,plain,(
  ( ! [X1213,X1217,X1214,X1212,X1216,X1215] : (s('type.benchmark.times'(X1212),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1212),X1216),s('type.benchmark.times'(X1212),X1217))) != s('type.benchmark.times'(X1212),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1212),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1212)),X1214),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1212))),X1213))),s('type.benchmark.times'(X1212),X1215))) | s('type.benchmark.times'(X1212),X1216) = s('type.benchmark.times'(X1212),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1212)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1212))),X1213),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f308,f34843])).
fof(f54121,plain,(
  ( ! [X1104,X1099,X1103,X1101,X1105,X1102,X1100] : (s(X1100,happ(s(fun('type.ind_type.recspace'(X1099),X1100),sK10(happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))))),X1101),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X1099,X1100)),s('type.ind_type.recspace'(X1099),'const.ind_type.CONSTR_3'(s('type.num.num',X1103),s(X1099,X1104),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105))))) = s(X1100,happ(s(fun(fun('type.num.num',X1100),X1100),happ(s(fun(X1099,fun(fun('type.num.num',X1100),X1100)),'_dst_x1x0_2'(s(fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))),happ(s(fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))),happ(s(fun(sK0,fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),X1102),s(sK0,sK3))),s('type.num.num',X1103))),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105))),s(X1099,X1104))),s(fun('type.num.num',X1100),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1099),X1100),sK10(happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))))),X1101),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X1099,X1100)),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105)))))) )),
  inference(forward_demodulation,[],[f53521,f335])).
fof(f53521,plain,(
  ( ! [X1104,X1099,X1103,X1101,X1105,X1102,X1100] : (s(X1100,happ(s(fun('type.ind_type.recspace'(X1099),X1100),sK10(happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))))),X1101),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X1099,X1100)),s('type.ind_type.recspace'(X1099),'const.ind_type.CONSTR_3'(s('type.num.num',X1103),s(X1099,X1104),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105))))) = s(X1100,happ(s(fun(fun('type.num.num',X1100),X1100),happ(s(fun(X1099,fun(fun('type.num.num',X1100),X1100)),'_dst_x1x0_2'(s(fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))),happ(s(fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),X1102),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))))),X1101))),s('type.num.num',X1103))),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105))),s(X1099,X1104))),s(fun('type.num.num',X1100),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1099),X1100),sK10(happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100))))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X1099,fun(fun('type.num.num','type.ind_type.recspace'(X1099)),fun(fun('type.num.num',X1100),X1100)))))),X1101),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X1099,X1100)),s(fun('type.num.num','type.ind_type.recspace'(X1099)),X1105)))))) )),
  inference(superposition,[],[f378,f34843])).
fof(f54120,plain,(
  ( ! [X850,X848,X852,X847,X851,X849,X846] : (s(fun(X846,fun(X847,X851)),'_dst_x00x11_2'(s(fun(X848,X851),X852),s(fun(X846,fun(X847,X848)),happ(s(fun(sK0,fun(X846,fun(X847,X848))),X850),s(sK0,sK3))))) = s(fun(X846,fun(X847,X851)),happ(s(fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X851))),'_dst_x000x111_2'(s(fun(X848,X851),X852),s(fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X848))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X848)))),X849),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53496,f335])).
fof(f53496,plain,(
  ( ! [X850,X848,X852,X847,X851,X849,X846] : (s(fun(X846,fun(X847,X851)),'_dst_x00x11_2'(s(fun(X848,X851),X852),s(fun(X846,fun(X847,X848)),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X846,fun(X847,X848))),X850),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X848)))),X849))))) = s(fun(X846,fun(X847,X851)),happ(s(fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X851))),'_dst_x000x111_2'(s(fun(X848,X851),X852),s(fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X848))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X846,fun(X847,X848)))),X849),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f361,f34843])).
fof(f54119,plain,(
  ( ! [X843,X841,X845,X839,X837,X842,X840,X844,X838] : (s(fun(X837,fun(X838,X842)),'_dst_x00x11x11_3'(s(fun(X839,fun(X843,X842)),X844),s(fun(X837,fun(X838,X839)),happ(s(fun(sK0,fun(X837,fun(X838,X839))),X841),s(sK0,sK3))),s(fun(X837,fun(X838,X843)),X845))) = s(fun(X837,fun(X838,X842)),happ(s(fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X842))),'_dst_x000x111x011_3'(s(fun(X839,fun(X843,X842)),X844),s(fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X839))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X839)))),X840),s('type.benchmark.times'(sK0),sK2))),s(fun(X837,fun(X838,X843)),X845))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53495,f335])).
fof(f53495,plain,(
  ( ! [X843,X841,X845,X839,X837,X842,X840,X844,X838] : (s(fun(X837,fun(X838,X842)),'_dst_x00x11x11_3'(s(fun(X839,fun(X843,X842)),X844),s(fun(X837,fun(X838,X839)),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X837,fun(X838,X839))),X841),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X839)))),X840))),s(fun(X837,fun(X838,X843)),X845))) = s(fun(X837,fun(X838,X842)),happ(s(fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X842))),'_dst_x000x111x011_3'(s(fun(X839,fun(X843,X842)),X844),s(fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X839))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X837,fun(X838,X839)))),X840),s('type.benchmark.times'(sK0),sK2))),s(fun(X837,fun(X838,X843)),X845))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f367,f34843])).
fof(f54118,plain,(
  ( ! [X831,X829,X835,X833,X830,X828,X834,X832,X836,X827] : (s(fun(X832,fun(X827,fun(X828,X833))),'_dst_x000x111x011_3'(s(fun(X834,fun(X829,X833)),X835),s(fun(X832,fun(X827,fun(X828,X834))),X836),s(fun(X827,fun(X828,X829)),happ(s(fun(sK0,fun(X827,fun(X828,X829))),X831),s(sK0,sK3))))) = s(fun(X832,fun(X827,fun(X828,X833))),happ(s(fun('type.benchmark.times'(sK0),fun(X832,fun(X827,fun(X828,X833)))),'_dst_x0000x0111x1011_3'(s(fun(X834,fun(X829,X833)),X835),s(fun(X832,fun(X827,fun(X828,X834))),X836),s(fun('type.benchmark.times'(sK0),fun(X827,fun(X828,X829))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X827,fun(X828,X829)))),X830),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53494,f335])).
fof(f53494,plain,(
  ( ! [X831,X829,X835,X833,X830,X828,X834,X832,X836,X827] : (s(fun(X832,fun(X827,fun(X828,X833))),'_dst_x000x111x011_3'(s(fun(X834,fun(X829,X833)),X835),s(fun(X832,fun(X827,fun(X828,X834))),X836),s(fun(X827,fun(X828,X829)),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X827,fun(X828,X829))),X831),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X827,fun(X828,X829)))),X830))))) = s(fun(X832,fun(X827,fun(X828,X833))),happ(s(fun('type.benchmark.times'(sK0),fun(X832,fun(X827,fun(X828,X833)))),'_dst_x0000x0111x1011_3'(s(fun(X834,fun(X829,X833)),X835),s(fun(X832,fun(X827,fun(X828,X834))),X836),s(fun('type.benchmark.times'(sK0),fun(X827,fun(X828,X829))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X827,fun(X828,X829)))),X830),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f369,f34843])).
fof(f54116,plain,(
  ( ! [X808,X806,X809,X807] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X806,bool),happ(s(fun(sK0,fun(X806,bool)),X808),s(sK0,sK3))))) | s(X806,X809) = s(X806,sK4(X809,happ(s(fun('type.benchmark.times'(sK0),fun(X806,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X806,bool))),X807),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X806))) )),
  inference(forward_demodulation,[],[f53490,f335])).
fof(f53490,plain,(
  ( ! [X808,X806,X809,X807] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X806,bool),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X806,bool)),X808),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X806,bool))),X807))))) | s(X806,X809) = s(X806,sK4(X809,happ(s(fun('type.benchmark.times'(sK0),fun(X806,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X806,bool))),X807),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)),X806))) )),
  inference(superposition,[],[f562,f34843])).
fof(f54106,plain,(
  ( ! [X639,X644,X640,X642,X638,X645,X641,X643,X637] : (s(fun(X641,fun(X637,X642)),'_dst_x00x10x01_3'(s(fun(X643,fun(X638,X642)),X644),s(fun(X641,X643),happ(s(fun('type.benchmark.times'(sK0),fun(X641,X643)),X645),s('type.benchmark.times'(sK0),sK1))),s(fun(X637,X638),happ(s(fun(sK0,fun(X637,X638)),X640),s(sK0,sK3))))) = s(fun(X641,fun(X637,X642)),happ(s(fun('type.benchmark.times'(sK0),fun(X641,fun(X637,X642))),'_dst_x000x110x101_3'(s(fun(X643,fun(X638,X642)),X644),s(fun('type.benchmark.times'(sK0),fun(X641,X643)),X645),s(fun('type.benchmark.times'(sK0),fun(X637,X638)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X637,X638))),X639),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53464,f335])).
fof(f53464,plain,(
  ( ! [X639,X644,X640,X642,X638,X645,X641,X643,X637] : (s(fun(X641,fun(X637,X642)),happ(s(fun('type.benchmark.times'(sK0),fun(X641,fun(X637,X642))),'_dst_x000x110x101_3'(s(fun(X643,fun(X638,X642)),X644),s(fun('type.benchmark.times'(sK0),fun(X641,X643)),X645),s(fun('type.benchmark.times'(sK0),fun(X637,X638)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X637,X638))),X639),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X641,fun(X637,X642)),'_dst_x00x10x01_3'(s(fun(X643,fun(X638,X642)),X644),s(fun(X641,X643),happ(s(fun('type.benchmark.times'(sK0),fun(X641,X643)),X645),s('type.benchmark.times'(sK0),sK1))),s(fun(X637,X638),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X637,X638)),X640),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X637,X638))),X639)))))) )),
  inference(superposition,[],[f368,f34843])).
fof(f54105,plain,(
  ( ! [X633,X635,X629,X631,X636,X632,X634,X628,X630] : (s(fun(X628,fun(X632,X633)),'_dst_x00x10x01_3'(s(fun(X629,fun(X634,X633)),X635),s(fun(X628,X629),happ(s(fun(sK0,fun(X628,X629)),X631),s(sK0,sK3))),s(fun(X632,X634),happ(s(fun('type.benchmark.times'(sK0),fun(X632,X634)),X636),s('type.benchmark.times'(sK0),sK1))))) = s(fun(X628,fun(X632,X633)),happ(s(fun('type.benchmark.times'(sK0),fun(X628,fun(X632,X633))),'_dst_x000x110x101_3'(s(fun(X629,fun(X634,X633)),X635),s(fun('type.benchmark.times'(sK0),fun(X628,X629)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X628,X629))),X630),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X632,X634)),X636))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53463,f335])).
fof(f53463,plain,(
  ( ! [X633,X635,X629,X631,X636,X632,X634,X628,X630] : (s(fun(X628,fun(X632,X633)),happ(s(fun('type.benchmark.times'(sK0),fun(X628,fun(X632,X633))),'_dst_x000x110x101_3'(s(fun(X629,fun(X634,X633)),X635),s(fun('type.benchmark.times'(sK0),fun(X628,X629)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X628,X629))),X630),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X632,X634)),X636))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X628,fun(X632,X633)),'_dst_x00x10x01_3'(s(fun(X629,fun(X634,X633)),X635),s(fun(X628,X629),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X628,X629)),X631),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X628,X629))),X630))),s(fun(X632,X634),happ(s(fun('type.benchmark.times'(sK0),fun(X632,X634)),X636),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f368,f34843])).
fof(f54104,plain,(
  ( ! [X625,X627,X621,X623,X624,X626,X620,X622] : (s(fun(X620,X624),'_dst_x0x1x1_3'(s(fun(X621,fun(X625,X624)),X626),s(fun(X620,X621),happ(s(fun(sK0,fun(X620,X621)),X623),s(sK0,sK3))),s(fun(X620,X625),happ(s(fun('type.benchmark.times'(sK0),fun(X620,X625)),X627),s('type.benchmark.times'(sK0),sK1))))) = s(fun(X620,X624),happ(s(fun('type.benchmark.times'(sK0),fun(X620,X624)),'_dst_x00x11x11_3'(s(fun(X621,fun(X625,X624)),X626),s(fun('type.benchmark.times'(sK0),fun(X620,X621)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X620,X621))),X622),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X620,X625)),X627))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53462,f335])).
fof(f53462,plain,(
  ( ! [X625,X627,X621,X623,X624,X626,X620,X622] : (s(fun(X620,X624),happ(s(fun('type.benchmark.times'(sK0),fun(X620,X624)),'_dst_x00x11x11_3'(s(fun(X621,fun(X625,X624)),X626),s(fun('type.benchmark.times'(sK0),fun(X620,X621)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X620,X621))),X622),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X620,X625)),X627))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X620,X624),'_dst_x0x1x1_3'(s(fun(X621,fun(X625,X624)),X626),s(fun(X620,X621),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X620,X621)),X623),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X620,X621))),X622))),s(fun(X620,X625),happ(s(fun('type.benchmark.times'(sK0),fun(X620,X625)),X627),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f365,f34843])).
fof(f54103,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X612,X614] : (s(fun(X612,X616),'_dst_x0x1x1_3'(s(fun(X617,fun(X613,X616)),X618),s(fun(X612,X617),happ(s(fun('type.benchmark.times'(sK0),fun(X612,X617)),X619),s('type.benchmark.times'(sK0),sK1))),s(fun(X612,X613),happ(s(fun(sK0,fun(X612,X613)),X615),s(sK0,sK3))))) = s(fun(X612,X616),happ(s(fun('type.benchmark.times'(sK0),fun(X612,X616)),'_dst_x00x11x11_3'(s(fun(X617,fun(X613,X616)),X618),s(fun('type.benchmark.times'(sK0),fun(X612,X617)),X619),s(fun('type.benchmark.times'(sK0),fun(X612,X613)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X612,X613))),X614),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53461,f335])).
fof(f53461,plain,(
  ( ! [X617,X619,X613,X615,X616,X618,X612,X614] : (s(fun(X612,X616),happ(s(fun('type.benchmark.times'(sK0),fun(X612,X616)),'_dst_x00x11x11_3'(s(fun(X617,fun(X613,X616)),X618),s(fun('type.benchmark.times'(sK0),fun(X612,X617)),X619),s(fun('type.benchmark.times'(sK0),fun(X612,X613)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X612,X613))),X614),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X612,X616),'_dst_x0x1x1_3'(s(fun(X617,fun(X613,X616)),X618),s(fun(X612,X617),happ(s(fun('type.benchmark.times'(sK0),fun(X612,X617)),X619),s('type.benchmark.times'(sK0),sK1))),s(fun(X612,X613),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X612,X613)),X615),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X612,X613))),X614)))))) )),
  inference(superposition,[],[f365,f34843])).
fof(f54102,plain,(
  ( ! [X610,X606,X609,X605,X611,X607,X608,X604] : (s(fun(X604,X608),'_dst_x0x1x1_3'(s(fun(X609,fun(X605,X608)),X610),s(fun(X604,X609),X611),s(fun(X604,X605),happ(s(fun(sK0,fun(X604,X605)),X607),s(sK0,sK3))))) = s(fun(X604,X608),happ(s(fun('type.benchmark.times'(sK0),fun(X604,X608)),'_dst_x00x01x11_3'(s(fun(X609,fun(X605,X608)),X610),s(fun(X604,X609),X611),s(fun('type.benchmark.times'(sK0),fun(X604,X605)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X604,X605))),X606),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53460,f335])).
fof(f53460,plain,(
  ( ! [X610,X606,X609,X605,X611,X607,X608,X604] : (s(fun(X604,X608),'_dst_x0x1x1_3'(s(fun(X609,fun(X605,X608)),X610),s(fun(X604,X609),X611),s(fun(X604,X605),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X604,X605)),X607),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X604,X605))),X606))))) = s(fun(X604,X608),happ(s(fun('type.benchmark.times'(sK0),fun(X604,X608)),'_dst_x00x01x11_3'(s(fun(X609,fun(X605,X608)),X610),s(fun(X604,X609),X611),s(fun('type.benchmark.times'(sK0),fun(X604,X605)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X604,X605))),X606),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f364,f34843])).
fof(f54101,plain,(
  ( ! [X600,X602,X596,X598,X601,X603,X597,X599] : (s(fun(X596,X600),'_dst_x0x0x1_3'(s(fun(X601,fun(X597,X600)),X602),s(X601,X603),s(fun(X596,X597),happ(s(fun(sK0,fun(X596,X597)),X599),s(sK0,sK3))))) = s(fun(X596,X600),happ(s(fun('type.benchmark.times'(sK0),fun(X596,X600)),'_dst_x00x00x11_3'(s(fun(X601,fun(X597,X600)),X602),s(X601,X603),s(fun('type.benchmark.times'(sK0),fun(X596,X597)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X596,X597))),X598),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53459,f335])).
fof(f53459,plain,(
  ( ! [X600,X602,X596,X598,X601,X603,X597,X599] : (s(fun(X596,X600),'_dst_x0x0x1_3'(s(fun(X601,fun(X597,X600)),X602),s(X601,X603),s(fun(X596,X597),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X596,X597)),X599),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X596,X597))),X598))))) = s(fun(X596,X600),happ(s(fun('type.benchmark.times'(sK0),fun(X596,X600)),'_dst_x00x00x11_3'(s(fun(X601,fun(X597,X600)),X602),s(X601,X603),s(fun('type.benchmark.times'(sK0),fun(X596,X597)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X596,X597))),X598),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f363,f34843])).
fof(f54100,plain,(
  ( ! [X592,X594,X590,X593,X595,X589,X591] : (s(X590,happ(s(fun(X589,X590),happ(s(fun(sK0,fun(X589,X590)),X592),s(sK0,sK3))),s(X589,happ(s(fun(X593,X589),X594),s(X593,X595))))) = s(X590,happ(s(fun(X593,X590),'_dst_x0x0x1_3'(s(fun('type.benchmark.times'(sK0),fun(X589,X590)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X589,X590))),X591),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1),s(fun(X593,X589),X594))),s(X593,X595)))) )),
  inference(forward_demodulation,[],[f53458,f335])).
fof(f53458,plain,(
  ( ! [X592,X594,X590,X593,X595,X589,X591] : (s(X590,happ(s(fun(X593,X590),'_dst_x0x0x1_3'(s(fun('type.benchmark.times'(sK0),fun(X589,X590)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X589,X590))),X591),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1),s(fun(X593,X589),X594))),s(X593,X595))) = s(X590,happ(s(fun(X589,X590),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X589,X590)),X592),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X589,X590))),X591))),s(X589,happ(s(fun(X593,X589),X594),s(X593,X595)))))) )),
  inference(superposition,[],[f359,f34843])).
fof(f54099,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (s(fun(X583,X587),'_dst_x0x1_2'(s(fun(X584,X587),X588),s(fun(X583,X584),happ(s(fun(sK0,fun(X583,X584)),X586),s(sK0,sK3))))) = s(fun(X583,X587),happ(s(fun('type.benchmark.times'(sK0),fun(X583,X587)),'_dst_x00x11_2'(s(fun(X584,X587),X588),s(fun('type.benchmark.times'(sK0),fun(X583,X584)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X583,X584))),X585),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53457,f335])).
fof(f53457,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (s(fun(X583,X587),'_dst_x0x1_2'(s(fun(X584,X587),X588),s(fun(X583,X584),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X583,X584)),X586),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X583,X584))),X585))))) = s(fun(X583,X587),happ(s(fun('type.benchmark.times'(sK0),fun(X583,X587)),'_dst_x00x11_2'(s(fun(X584,X587),X588),s(fun('type.benchmark.times'(sK0),fun(X583,X584)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X583,X584))),X585),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f358,f34843])).
fof(f54098,plain,(
  ( ! [X580,X582,X578,X581,X579] : (s(X579,happ(s(fun(X578,X579),happ(s(fun(sK0,fun(X578,X579)),X581),s(sK0,sK3))),s(X578,X582))) = s(X579,happ(s(fun('type.benchmark.times'(sK0),X579),'_dst_x1x0_2'(s(fun('type.benchmark.times'(sK0),fun(X578,X579)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X578,X579))),X580),s('type.benchmark.times'(sK0),sK2))),s(X578,X582))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53456,f335])).
fof(f53456,plain,(
  ( ! [X580,X582,X578,X581,X579] : (s(X579,happ(s(fun(X578,X579),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X578,X579)),X581),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X578,X579))),X580))),s(X578,X582))) = s(X579,happ(s(fun('type.benchmark.times'(sK0),X579),'_dst_x1x0_2'(s(fun('type.benchmark.times'(sK0),fun(X578,X579)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X578,X579))),X580),s('type.benchmark.times'(sK0),sK2))),s(X578,X582))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f341,f34843])).
fof(f53410,plain,(
  ( ! [X466,X465,X467] : (s(bool,X467) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X466),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X465))) | s(bool,'T_0') = s(bool,X467) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X465),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f1864,f34843])).
fof(f54047,plain,(
  ( ! [X430,X429] : (s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X430),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53399,f289])).
fof(f53399,plain,(
  ( ! [X430,X432,X429,X431] : (s(bool,'const.bool.DATATYPE_1'(s(X431,X432))) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X430),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f554,f34843])).
fof(f53325,plain,(
  ( ! [X78,X76,X79,X77] : (s(X76,X79) != s(X76,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X76),X78),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X76)),X77))) | s('type.benchmark.times'(X76),'const.benchmark.Once_1'(s(X76,X79))) = s('type.benchmark.times'(X76),'const.benchmark.Once_1'(s(X76,happ(s(fun('type.benchmark.times'(sK0),X76),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X76)),X77),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f303,f34843])).
fof(f53984,plain,(
  ( ! [X70,X68,X71,X69] : (s('type.benchmark.times'(X68),'const.benchmark.Once_1'(s(X68,X71))) != s('type.benchmark.times'(X68),'const.benchmark.Once_1'(s(X68,happ(s(fun(sK0,X68),X70),s(sK0,sK3))))) | s(X68,X71) = s(X68,happ(s(fun('type.benchmark.times'(sK0),X68),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X68)),X69),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53323,f335])).
fof(f53323,plain,(
  ( ! [X70,X68,X71,X69] : (s('type.benchmark.times'(X68),'const.benchmark.Once_1'(s(X68,X71))) != s('type.benchmark.times'(X68),'const.benchmark.Once_1'(s(X68,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X68),X70),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X68)),X69))))) | s(X68,X71) = s(X68,happ(s(fun('type.benchmark.times'(sK0),X68),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X68)),X69),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f302,f34843])).
fof(f53983,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(X41,happ(s(fun(X38,X41),X42),s(X38,happ(s(fun(sK0,X38),X40),s(sK0,sK3))))) = s(X41,happ(s(fun('type.benchmark.times'(sK0),X41),'_dst_x0x1_2'(s(fun(X38,X41),X42),s(fun('type.benchmark.times'(sK0),X38),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X38)),X39),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53316,f335])).
fof(f53316,plain,(
  ( ! [X39,X41,X38,X42,X40] : (s(X41,happ(s(fun(X38,X41),X42),s(X38,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X38),X40),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X38)),X39))))) = s(X41,happ(s(fun('type.benchmark.times'(sK0),X41),'_dst_x0x1_2'(s(fun(X38,X41),X42),s(fun('type.benchmark.times'(sK0),X38),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X38)),X39),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f340,f34843])).
fof(f53982,plain,(
  ( ! [X37,X35,X33,X31,X36,X34,X32] : (s(X34,happ(s(fun(X31,X34),happ(s(fun(X35,fun(X31,X34)),X36),s(X35,X37))),s(X31,happ(s(fun(sK0,X31),X33),s(sK0,sK3))))) = s(X34,happ(s(fun('type.benchmark.times'(sK0),X34),'_dst_x0x0x1_3'(s(fun(X35,fun(X31,X34)),X36),s(X35,X37),s(fun('type.benchmark.times'(sK0),X31),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X31)),X32),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53315,f335])).
fof(f53315,plain,(
  ( ! [X37,X35,X33,X31,X36,X34,X32] : (s(X34,happ(s(fun('type.benchmark.times'(sK0),X34),'_dst_x0x0x1_3'(s(fun(X35,fun(X31,X34)),X36),s(X35,X37),s(fun('type.benchmark.times'(sK0),X31),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X31)),X32),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X34,happ(s(fun(X31,X34),happ(s(fun(X35,fun(X31,X34)),X36),s(X35,X37))),s(X31,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X31),X33),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X31)),X32)))))) )),
  inference(superposition,[],[f359,f34843])).
fof(f53981,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(fun(X26,X27),'_dst_x0x0x1_3'(s(fun(X23,fun(X28,X27)),X29),s(X23,happ(s(fun(sK0,X23),X25),s(sK0,sK3))),s(fun(X26,X28),X30))) = s(fun(X26,X27),happ(s(fun('type.benchmark.times'(sK0),fun(X26,X27)),'_dst_x00x10x01_3'(s(fun(X23,fun(X28,X27)),X29),s(fun('type.benchmark.times'(sK0),X23),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X23)),X24),s('type.benchmark.times'(sK0),sK2))),s(fun(X26,X28),X30))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53314,f335])).
fof(f53314,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(fun(X26,X27),'_dst_x0x0x1_3'(s(fun(X23,fun(X28,X27)),X29),s(X23,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X23),X25),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X23)),X24))),s(fun(X26,X28),X30))) = s(fun(X26,X27),happ(s(fun('type.benchmark.times'(sK0),fun(X26,X27)),'_dst_x00x10x01_3'(s(fun(X23,fun(X28,X27)),X29),s(fun('type.benchmark.times'(sK0),X23),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X23)),X24),s('type.benchmark.times'(sK0),sK2))),s(fun(X26,X28),X30))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f362,f34843])).
fof(f53980,plain,(
  ( ! [X21,X19,X17,X22,X20,X18,X16] : (s(X19,happ(s(fun(X20,X19),happ(s(fun(X16,fun(X20,X19)),X21),s(X16,happ(s(fun(sK0,X16),X18),s(sK0,sK3))))),s(X20,happ(s(fun('type.benchmark.times'(sK0),X20),X22),s('type.benchmark.times'(sK0),sK1))))) = s(X19,happ(s(fun('type.benchmark.times'(sK0),X19),'_dst_x0x1x1_3'(s(fun(X16,fun(X20,X19)),X21),s(fun('type.benchmark.times'(sK0),X16),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X16)),X17),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),X20),X22))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53313,f335])).
fof(f53313,plain,(
  ( ! [X21,X19,X17,X22,X20,X18,X16] : (s(X19,happ(s(fun('type.benchmark.times'(sK0),X19),'_dst_x0x1x1_3'(s(fun(X16,fun(X20,X19)),X21),s(fun('type.benchmark.times'(sK0),X16),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X16)),X17),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),X20),X22))),s('type.benchmark.times'(sK0),sK1))) = s(X19,happ(s(fun(X20,X19),happ(s(fun(X16,fun(X20,X19)),X21),s(X16,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X16),X18),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X16)),X17))))),s(X20,happ(s(fun('type.benchmark.times'(sK0),X20),X22),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f360,f34843])).
fof(f53979,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(X12,happ(s(fun(X9,X12),happ(s(fun(X13,fun(X9,X12)),X14),s(X13,happ(s(fun('type.benchmark.times'(sK0),X13),X15),s('type.benchmark.times'(sK0),sK1))))),s(X9,happ(s(fun(sK0,X9),X11),s(sK0,sK3))))) = s(X12,happ(s(fun('type.benchmark.times'(sK0),X12),'_dst_x0x1x1_3'(s(fun(X13,fun(X9,X12)),X14),s(fun('type.benchmark.times'(sK0),X13),X15),s(fun('type.benchmark.times'(sK0),X9),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X9)),X10),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53312,f335])).
fof(f53312,plain,(
  ( ! [X14,X12,X10,X15,X13,X11,X9] : (s(X12,happ(s(fun('type.benchmark.times'(sK0),X12),'_dst_x0x1x1_3'(s(fun(X13,fun(X9,X12)),X14),s(fun('type.benchmark.times'(sK0),X13),X15),s(fun('type.benchmark.times'(sK0),X9),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X9)),X10),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X12,happ(s(fun(X9,X12),happ(s(fun(X13,fun(X9,X12)),X14),s(X13,happ(s(fun('type.benchmark.times'(sK0),X13),X15),s('type.benchmark.times'(sK0),sK1))))),s(X9,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X9),X11),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X9)),X10)))))) )),
  inference(superposition,[],[f360,f34843])).
fof(f53978,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X3,fun(X4,X5)),'_dst_x00x00x11_3'(s(fun(X0,fun(X6,X5)),X7),s(X0,happ(s(fun(sK0,X0),X2),s(sK0,sK3))),s(fun(X3,fun(X4,X6)),X8))) = s(fun(X3,fun(X4,X5)),happ(s(fun('type.benchmark.times'(sK0),fun(X3,fun(X4,X5))),'_dst_x000x100x011_3'(s(fun(X0,fun(X6,X5)),X7),s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s(fun(X3,fun(X4,X6)),X8))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53311,f335])).
fof(f53311,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X3,fun(X4,X5)),'_dst_x00x00x11_3'(s(fun(X0,fun(X6,X5)),X7),s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1))),s(fun(X3,fun(X4,X6)),X8))) = s(fun(X3,fun(X4,X5)),happ(s(fun('type.benchmark.times'(sK0),fun(X3,fun(X4,X5))),'_dst_x000x100x011_3'(s(fun(X0,fun(X6,X5)),X7),s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s(fun(X3,fun(X4,X6)),X8))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f366,f34843])).
fof(f53976,plain,(
  ( ! [X1112,X1110,X1108,X1107,X1111,X1109] : (s('type.benchmark.times'(X1107),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1107),X1110),s('type.benchmark.times'(X1107),X1112))) = s('type.benchmark.times'(X1107),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1107),happ(s(fun(sK0,'type.benchmark.times'(X1107)),X1108),s(sK0,sK3))),s('type.benchmark.times'(X1107),X1111))) | s('type.benchmark.times'(X1107),X1110) != s('type.benchmark.times'(X1107),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1107)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1107))),X1109),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s('type.benchmark.times'(X1107),X1111) != s('type.benchmark.times'(X1107),X1112)) )),
  inference(forward_demodulation,[],[f53302,f335])).
fof(f53302,plain,(
  ( ! [X1112,X1110,X1108,X1107,X1111,X1109] : (s('type.benchmark.times'(X1107),X1110) != s('type.benchmark.times'(X1107),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1107)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1107))),X1109),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s('type.benchmark.times'(X1107),X1111) != s('type.benchmark.times'(X1107),X1112) | s('type.benchmark.times'(X1107),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1107),X1110),s('type.benchmark.times'(X1107),X1112))) = s('type.benchmark.times'(X1107),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1107),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1107)),X1108),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1107))),X1109))),s('type.benchmark.times'(X1107),X1111)))) )),
  inference(superposition,[],[f310,f34843])).
fof(f53298,plain,(
  ( ! [X1087,X1085,X1086,X1084,X1088,X1083] : (s('type.benchmark.times'(X1083),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1083),X1087),s('type.benchmark.times'(X1083),X1088))) != s('type.benchmark.times'(X1083),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1083),X1086),s('type.benchmark.times'(X1083),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1083)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1083))),X1085),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s('type.benchmark.times'(X1083),X1088) = s('type.benchmark.times'(X1083),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1083)),X1084),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1083))),X1085)))) )),
  inference(superposition,[],[f309,f34843])).
fof(f53295,plain,(
  ( ! [X1066,X1070,X1068,X1067,X1065,X1069] : (s('type.benchmark.times'(X1065),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1065),X1069),s('type.benchmark.times'(X1065),X1070))) != s('type.benchmark.times'(X1065),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1065),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1065)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1065))),X1067),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X1065),X1068))) | s('type.benchmark.times'(X1065),X1069) = s('type.benchmark.times'(X1065),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X1065)),X1066),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X1065))),X1067)))) )),
  inference(superposition,[],[f308,f34843])).
fof(f53283,plain,(
  ( ! [X1015,X1016,X1014] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1016),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1015),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1014),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1015)))) )),
  inference(superposition,[],[f17086,f34843])).
fof(f53274,plain,(
  ( ! [X982,X983,X981] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X982),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X983))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X981),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X982)))) )),
  inference(superposition,[],[f16999,f34843])).
fof(f53269,plain,(
  ( ! [X957,X954,X958,X956,X955,X953,X959] : (s(X954,happ(s(fun('type.ind_type.recspace'(X953),X954),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954))))),X955),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954)))))),X956)),X953,X954)),s('type.ind_type.recspace'(X953),'const.ind_type.CONSTR_3'(s('type.num.num',X957),s(X953,X958),s(fun('type.num.num','type.ind_type.recspace'(X953)),X959))))) = s(X954,happ(s(fun(fun('type.num.num',X954),X954),happ(s(fun(X953,fun(fun('type.num.num',X954),X954)),'_dst_x1x0_2'(s(fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954))),happ(s(fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954)))),happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954))))),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954)))))),X956),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.num.num',X957))),s(fun('type.num.num','type.ind_type.recspace'(X953)),X959))),s(X953,X958))),s(fun('type.num.num',X954),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X953),X954),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954))))),X955),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun('type.num.num',fun(X953,fun(fun('type.num.num','type.ind_type.recspace'(X953)),fun(fun('type.num.num',X954),X954)))))),X956)),X953,X954)),s(fun('type.num.num','type.ind_type.recspace'(X953)),X959)))))) )),
  inference(superposition,[],[f378,f34843])).
fof(f53241,plain,(
  ( ! [X689,X687,X688,X686] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X686,bool),happ(s(fun('type.benchmark.times'(sK0),fun(X686,bool)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X686,bool))),X688),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s(X686,X689) = s(X686,sK4(X689,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X686,bool)),X687),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X686,bool))),X688)),X686))) )),
  inference(superposition,[],[f562,f34843])).
fof(f53174,plain,(
  ( ! [X426,X425,X427] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X426),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,X427) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X425),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X426))) | s(bool,'F_0') = s(bool,X427)) )),
  inference(superposition,[],[f2492,f34843])).
fof(f53171,plain,(
  ( ! [X416,X418,X417] : (s(bool,X418) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X417),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X416),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X417))) | s(bool,'F_0') = s(bool,X418)) )),
  inference(superposition,[],[f1864,f34843])).
fof(f53170,plain,(
  ( ! [X414,X413,X415] : (s(bool,X415) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X415) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X413),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414)))) )),
  inference(superposition,[],[f1864,f34843])).
fof(f53903,plain,(
  ( ! [X377,X378] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X377),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378)))) )),
  inference(forward_demodulation,[],[f53159,f289])).
fof(f53159,plain,(
  ( ! [X377,X379,X380,X378] : (s(bool,'const.bool.DATATYPE_1'(s(X379,X380))) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X377),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378)))) )),
  inference(superposition,[],[f554,f34843])).
fof(f53850,plain,(
  ( ! [X35,X33,X36,X34] : (s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X36))) = s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,happ(s(fun(sK0,X33),X34),s(sK0,sK3))))) | s(X33,X36) != s(X33,happ(s(fun('type.benchmark.times'(sK0),X33),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X33)),X35),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53090,f335])).
fof(f53090,plain,(
  ( ! [X35,X33,X36,X34] : (s(X33,X36) != s(X33,happ(s(fun('type.benchmark.times'(sK0),X33),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X33)),X35),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,X36))) = s('type.benchmark.times'(X33),'const.benchmark.Once_1'(s(X33,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X33),X34),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X33)),X35)))))) )),
  inference(superposition,[],[f303,f34843])).
fof(f53088,plain,(
  ( ! [X28,X26,X27,X25] : (s('type.benchmark.times'(X25),'const.benchmark.Once_1'(s(X25,X28))) != s('type.benchmark.times'(X25),'const.benchmark.Once_1'(s(X25,happ(s(fun('type.benchmark.times'(sK0),X25),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X25)),X27),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s(X25,X28) = s(X25,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X25),X26),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X25)),X27)))) )),
  inference(superposition,[],[f302,f34843])).
fof(f53849,plain,(
  ( ! [X68] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X68),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),'const.benchmark.Twice_0')))) )),
  inference(forward_demodulation,[],[f53080,f245])).
fof(f53080,plain,(
  ( ! [X68] : (s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),sK2),s('type.benchmark.times'(sK0),sK1))) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X68),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),'const.benchmark.Twice_0')))) )),
  inference(superposition,[],[f34843,f297])).
fof(f53055,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X3),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1)))) )),
  inference(superposition,[],[f34843,f34843])).
fof(f53054,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(X85,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X85),X89),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X85)),'_dst_x1x0_2'(s(fun('type.benchmark.times'(sK0),fun(X86,fun('type.benchmark.times'(sK0),X85))),X87),s(X86,X88))))) = s(X85,happ(s(fun('type.benchmark.times'(sK0),X85),happ(s(fun(X86,fun('type.benchmark.times'(sK0),X85)),happ(s(fun('type.benchmark.times'(sK0),fun(X86,fun('type.benchmark.times'(sK0),X85))),X87),s('type.benchmark.times'(sK0),sK2))),s(X86,X88))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f34843,f341])).
fof(f53053,plain,(
  ( ! [X83,X84,X82] : (s(X82,happ(s(fun('type.benchmark.times'(sK0),X82),X83),s('type.benchmark.times'(sK0),sK1))) = s(X82,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X82),X84),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X82)),'_dst_x0_1'(s(fun('type.benchmark.times'(sK0),X82),X83)))))) )),
  inference(superposition,[],[f34843,f330])).
fof(f53052,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(X77,happ(s(fun('type.benchmark.times'(sK0),X77),happ(s(fun(X78,fun('type.benchmark.times'(sK0),X77)),X79),s(X78,happ(s(fun('type.benchmark.times'(sK0),X78),X80),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X77,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X77),X81),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X77)),'_dst_x0x1_2'(s(fun(X78,fun('type.benchmark.times'(sK0),X77)),X79),s(fun('type.benchmark.times'(sK0),X78),X80)))))) )),
  inference(superposition,[],[f34843,f340])).
fof(f53051,plain,(
  ( ! [X76,X74,X72,X75,X73] : (s(X72,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X72),X76),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X72)),happ(s(fun(X73,fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X72))),X74),s(X73,X75))))) = s(X72,happ(s(fun('type.benchmark.times'(sK0),X72),happ(s(fun(X73,fun('type.benchmark.times'(sK0),X72)),'_dst_x1x0_2'(s(fun(X73,fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X72))),X74),s('type.benchmark.times'(sK0),sK2))),s(X73,X75))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f34843,f341])).
fof(f53050,plain,(
  ( ! [X70,X68,X66,X64,X71,X69,X67,X65,X63] : (s(fun(X63,fun(X64,X65)),happ(s(fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X65))),'_dst_x000x111x011_3'(s(fun(X66,fun(X67,X65)),X68),s(fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X66))),X69),s(fun(X63,fun(X64,X67)),happ(s(fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X67))),X70),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X63,fun(X64,X65)),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X63,fun(X64,X65))),X71),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X65)))),'_dst_x0000x0111x1011_3'(s(fun(X66,fun(X67,X65)),X68),s(fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X66))),X69),s(fun('type.benchmark.times'(sK0),fun(X63,fun(X64,X67))),X70)))))) )),
  inference(superposition,[],[f34843,f369])).
fof(f53049,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55] : (s(fun(X55,X56),happ(s(fun('type.benchmark.times'(sK0),fun(X55,X56)),'_dst_x00x11x11_3'(s(fun(X57,fun(X58,X56)),X59),s(fun('type.benchmark.times'(sK0),fun(X55,X57)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X55,X57))),X60),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X55,X58)),X61))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X55,X56),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X55,X56)),X62),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X55,X56))),'_dst_x000x111x011_3'(s(fun(X57,fun(X58,X56)),X59),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X55,X57))),X60),s(fun('type.benchmark.times'(sK0),fun(X55,X58)),X61)))))) )),
  inference(superposition,[],[f34843,f367])).
fof(f53048,plain,(
  ( ! [X54,X52,X50,X53,X51,X49] : (s(fun(X49,X50),happ(s(fun('type.benchmark.times'(sK0),fun(X49,X50)),'_dst_x00x11_2'(s(fun(X51,X50),X52),s(fun('type.benchmark.times'(sK0),fun(X49,X51)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X49,X51))),X53),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X49,X50),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X49,X50)),X54),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X49,X50))),'_dst_x000x111_2'(s(fun(X51,X50),X52),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X49,X51))),X53)))))) )),
  inference(superposition,[],[f34843,f361])).
fof(f53047,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42] : (s(fun(X41,X42),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X41,X42)),X48),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X41,X42))),'_dst_x000x110x101_3'(s(fun(X43,fun(X44,X42)),X45),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X43)),X46),s(fun('type.benchmark.times'(sK0),fun(X41,X44)),X47))))) = s(fun(X41,X42),happ(s(fun('type.benchmark.times'(sK0),fun(X41,X42)),'_dst_x00x10x01_3'(s(fun(X43,fun(X44,X42)),X45),s(fun('type.benchmark.times'(sK0),X43),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X43)),X46),s('type.benchmark.times'(sK0),sK2))),s(fun(X41,X44),happ(s(fun('type.benchmark.times'(sK0),fun(X41,X44)),X47),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f34843,f368])).
fof(f53046,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(fun(X33,X34),happ(s(fun('type.benchmark.times'(sK0),fun(X33,X34)),'_dst_x00x00x11_3'(s(fun(X35,fun(X36,X34)),X37),s(X35,happ(s(fun('type.benchmark.times'(sK0),X35),X38),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),fun(X33,X36)),X39))),s('type.benchmark.times'(sK0),sK1))) = s(fun(X33,X34),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,fun(X33,X34)),X40),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),fun(X33,X34))),'_dst_x000x100x011_3'(s(fun(X35,fun(X36,X34)),X37),s(fun('type.benchmark.times'(sK0),X35),X38),s(fun('type.benchmark.times'(sK0),fun(X33,X36)),X39)))))) )),
  inference(superposition,[],[f34843,f366])).
fof(f53045,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X32] : (s(X26,happ(s(fun('type.benchmark.times'(sK0),X26),'_dst_x0x0x1_3'(s(fun(X27,fun(X28,X26)),X29),s(X27,X30),s(fun('type.benchmark.times'(sK0),X28),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X28)),X31),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X26,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X26),X32),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X26)),'_dst_x00x00x11_3'(s(fun(X27,fun(X28,X26)),X29),s(X27,X30),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X28)),X31)))))) )),
  inference(superposition,[],[f34843,f363])).
fof(f53044,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20] : (s(X19,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X19),X25),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X19)),'_dst_x00x11x11_3'(s(fun(X20,fun(X21,X19)),X22),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X20)),X23),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X21)),X24))))) = s(X19,happ(s(fun('type.benchmark.times'(sK0),X19),'_dst_x0x1x1_3'(s(fun(X20,fun(X21,X19)),X22),s(fun('type.benchmark.times'(sK0),X20),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X20)),X23),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),X21),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X21)),X24),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f34843,f365])).
fof(f53043,plain,(
  ( ! [X14,X12,X17,X15,X13,X18,X16] : (s(X12,happ(s(fun('type.benchmark.times'(sK0),X12),'_dst_x0x1x1_3'(s(fun(X13,fun(X14,X12)),X15),s(fun('type.benchmark.times'(sK0),X13),X16),s(fun('type.benchmark.times'(sK0),X14),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X14)),X17),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X12,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X12),X18),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X12)),'_dst_x00x01x11_3'(s(fun(X13,fun(X14,X12)),X15),s(fun('type.benchmark.times'(sK0),X13),X16),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X14)),X17)))))) )),
  inference(superposition,[],[f34843,f364])).
fof(f53042,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s(X7,happ(s(fun('type.benchmark.times'(sK0),X7),'_dst_x0x1_2'(s(fun(X8,X7),X9),s(fun('type.benchmark.times'(sK0),X8),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X8)),X10),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))) = s(X7,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X7),X11),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X7)),'_dst_x00x11_2'(s(fun(X8,X7),X9),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X8)),X10)))))) )),
  inference(superposition,[],[f34843,f358])).
fof(f53041,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X3),s(X1,happ(s(fun('type.benchmark.times'(sK0),X1),X4),s('type.benchmark.times'(sK0),sK2))),s(fun('type.benchmark.times'(sK0),X2),X5))),s('type.benchmark.times'(sK0),sK1))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X2,X0)),X3),s(fun('type.benchmark.times'(sK0),X1),X4),s(fun('type.benchmark.times'(sK0),X2),X5)))))) )),
  inference(superposition,[],[f34843,f362])).
fof(f52987,plain,(
  ( ! [X35,X33,X34] : (s(bool,X35) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X34),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X33),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X34))) | s(bool,'F_0') = s(bool,X35)) )),
  inference(superposition,[],[f34843,f1759])).
fof(f52985,plain,(
  ( ! [X28,X29,X27] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X28),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,X29) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X27),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X28))) | s(bool,'F_0') = s(bool,X29)) )),
  inference(superposition,[],[f34843,f1759])).
fof(f53819,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X21),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X20),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X21)))) )),
  inference(forward_demodulation,[],[f52983,f1545])).
fof(f52983,plain,(
  ( ! [X21,X22,X20] : (s(bool,'|dollar|exists_1'(s(fun(X22,bool),'_dst_x0_1'(s(bool,'T_0'))))) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X21),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X20),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X21)))) )),
  inference(superposition,[],[f34843,f1676])).
fof(f52980,plain,(
  ( ! [X12,X13,X11] : (s(bool,X13) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X12),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X11),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X12)))) )),
  inference(superposition,[],[f34843,f396])).
fof(f52979,plain,(
  ( ! [X10,X8,X9] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X9),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,X10) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X8),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X9))) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f34843,f396])).
fof(f52977,plain,(
  ( ! [X4,X5,X3] : (s(X3,happ(s(fun(sK0,X3),X4),s(sK0,sK3))) = s(X3,happ(s(fun('type.benchmark.times'(sK0),X3),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X3)),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f34843,f335])).
fof(f53675,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X7),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52876,f335])).
fof(f52876,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6)))))) )),
  inference(unit_resulting_resolution,[],[f340,f34843,f310])).
fof(f53674,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X6),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52877,f335])).
fof(f52877,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f341,f34843,f310])).
fof(f53673,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X9),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X8),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52878,f335])).
fof(f52878,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X8),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X9),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X8)))))) )),
  inference(unit_resulting_resolution,[],[f359,f34843,f310])).
fof(f53650,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X2),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53649,f335])).
fof(f53649,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52890,f295])).
fof(f52890,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num','const.num.|48|_0'))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f295,f34843,f310])).
fof(f53644,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X6),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52893,f335])).
fof(f52893,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f340,f34843,f310])).
fof(f53643,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X6),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52894,f335])).
fof(f52894,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X7),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f341,f34843,f310])).
fof(f53642,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X8),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X9),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52895,f335])).
fof(f52895,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X8),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X9))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X9),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f359,f34843,f310])).
fof(f53637,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X4),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53636,f335])).
fof(f53636,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52898,f335])).
fof(f52898,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3))),s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X6))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f335,f34843,f310])).
fof(f53635,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X5),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53634,f335])).
fof(f53634,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X5),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52899,f336])).
fof(f52899,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X5),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1),X3),s('type.benchmark.times'(X1),X4))),s(fun(X1,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X6),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f336,f34843,f310])).
fof(f53631,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X4),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53630,f335])).
fof(f53630,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52901,f377])).
fof(f52901,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.num.num','type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.num.num','type.benchmark.times'(X0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X0),fun(fun('type.num.num','type.benchmark.times'(X0)),fun('type.num.num','type.benchmark.times'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X0)),X2))),s('type.benchmark.times'(X0),X1))),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X5),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f377,f34843,f310])).
fof(f53613,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X7),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X4,X2),X5))),s(X4,X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6)))))))) )),
  inference(forward_demodulation,[],[f52910,f335])).
fof(f52910,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X4,X2),X5))),s(X4,X6)))))) )),
  inference(unit_resulting_resolution,[],[f340,f34843,f310])).
fof(f53612,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X3,'type.benchmark.times'(X0))),X5),s(X4,X6))),s(X3,X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X4,fun(X3,'type.benchmark.times'(X0))),X5),s(X3,X7))),s(X4,X6)))))) )),
  inference(forward_demodulation,[],[f52911,f335])).
fof(f52911,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X3,'type.benchmark.times'(X0))),X5),s(X4,X6))),s(X3,X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X4,fun(X3,'type.benchmark.times'(X0))),X5),s(X3,X7))),s(X4,X6)))))) )),
  inference(unit_resulting_resolution,[],[f341,f34843,f310])).
fof(f53611,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X9),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6))),s(X4,happ(s(fun(X2,X4),X7),s(X2,X8))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6),s(fun(X2,X4),X7))),s(X2,X8)))))) )),
  inference(forward_demodulation,[],[f52912,f335])).
fof(f52912,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6),s(fun(X2,X4),X7))),s(X2,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X9),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6))),s(X4,happ(s(fun(X2,X4),X7),s(X2,X8)))))))) )),
  inference(unit_resulting_resolution,[],[f359,f34843,f310])).
fof(f53602,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X2),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X4),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53601,f335])).
fof(f53601,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X4),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3)))))) )),
  inference(forward_demodulation,[],[f52917,f335])).
fof(f52917,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X3),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f34843,f34843,f310])).
fof(f53588,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),X3))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),X3)))) )),
  inference(forward_demodulation,[],[f53587,f335])).
fof(f53587,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),X3))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),X3)))) )),
  inference(forward_demodulation,[],[f52924,f295])).
fof(f52924,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),X3))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f295,f34843,f310])).
fof(f53582,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,happ(s(fun(X5,X3),X6),s(X5,X7))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X3,'type.benchmark.times'(X0)),X4),s(fun(X5,X3),X6))),s(X5,X7)))))) )),
  inference(forward_demodulation,[],[f52927,f335])).
fof(f52927,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,happ(s(fun(X5,X3),X6),s(X5,X7))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X3,'type.benchmark.times'(X0)),X4),s(fun(X5,X3),X6))),s(X5,X7)))))) )),
  inference(unit_resulting_resolution,[],[f340,f34843,f310])).
fof(f53581,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X4,X6))),s(X3,X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X7))),s(X4,X6)))))) )),
  inference(forward_demodulation,[],[f52928,f335])).
fof(f52928,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X4,X6))),s(X3,X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X7))),s(X4,X6)))))) )),
  inference(unit_resulting_resolution,[],[f341,f34843,f310])).
fof(f53580,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X7),s(fun(X3,X5),X8))),s(X3,X9))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X7))),s(X5,happ(s(fun(X3,X5),X8),s(X3,X9)))))))) )),
  inference(forward_demodulation,[],[f52929,f335])).
fof(f52929,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X7),s(fun(X3,X5),X8))),s(X3,X9))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X7))),s(X5,happ(s(fun(X3,X5),X8),s(X3,X9)))))))) )),
  inference(unit_resulting_resolution,[],[f359,f34843,f310])).
fof(f53575,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,X5)))))) )),
  inference(forward_demodulation,[],[f53574,f335])).
fof(f53574,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,X5)))))) )),
  inference(forward_demodulation,[],[f52932,f335])).
fof(f52932,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),X4),s(X3,X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X3),'const.benchmark.Once_1'(s(X3,X5))),s(fun(X3,'type.benchmark.times'(X0)),X4),s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X6)))))) )),
  inference(unit_resulting_resolution,[],[f335,f34843,f310])).
fof(f53573,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X3),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(X3),X5))),s('type.benchmark.times'(X3),X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X3),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(X3),X5))),s('type.benchmark.times'(X3),X6)))))) )),
  inference(forward_demodulation,[],[f53572,f335])).
fof(f53572,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X3),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(X3),X5))),s('type.benchmark.times'(X3),X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X3),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(X3),X5))),s('type.benchmark.times'(X3),X6)))))) )),
  inference(forward_demodulation,[],[f52933,f336])).
fof(f52933,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X3),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(X3),X5))),s('type.benchmark.times'(X3),X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X3),'const.benchmark.Twice_2'(s('type.benchmark.times'(X3),X5),s('type.benchmark.times'(X3),X6))),s(fun(X3,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(X3),fun('type.benchmark.times'(X3),'type.benchmark.times'(X0))),X4)))))) )),
  inference(unit_resulting_resolution,[],[f336,f34843,f310])).
fof(f53571,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X3),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53570,f335])).
fof(f53570,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X3),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52934,f335])).
fof(f52934,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X3),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X4))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X4),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f34843,f34843,f310])).
fof(f53569,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(sK0,'type.benchmark.times'(X0)),X1),s(sK0,sK3))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num',X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f53568,f335])).
fof(f53568,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num',X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num',X5)))))) )),
  inference(forward_demodulation,[],[f52935,f377])).
fof(f52935,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(X0)),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X3),s(fun('type.num.num','type.benchmark.times'(X0)),X4),s('type.num.num',X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(X0),happ(s(fun('type.num.num','type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.num.num','type.benchmark.times'(X0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X0),fun(fun('type.num.num','type.benchmark.times'(X0)),fun('type.num.num','type.benchmark.times'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X0)),X4))),s('type.benchmark.times'(X0),X3))),s('type.num.num',X5)))))) )),
  inference(unit_resulting_resolution,[],[f377,f34843,f310])).
fof(f53565,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK3))))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f52937,f335])).
fof(f52937,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X1),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2))))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X2),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(unit_resulting_resolution,[],[f34843,f303])).
fof(f51855,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,X3) = s(bool,'const.bool.DATATYPE_1'(s(X4,X5))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(trivial_inequality_removal,[],[f51720])).
fof(f51720,plain,(
  ( ! [X6,X4,X5,X3] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) | s(bool,X3) = s(bool,'const.bool.DATATYPE_1'(s(X4,X5))) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1010,f396])).
fof(f51711,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X0))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X1))) | s(bool,X1) = s(bool,'const.bool.DATATYPE_1'(s(X2,X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1010,f396])).
fof(f48762,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X0),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(X0,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X0),fun(X0,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X0,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X0),'type.ind_type.recspace'(X0)),sK7(X0))))) )),
  inference(unit_resulting_resolution,[],[f381,f311,f1150])).
fof(f48763,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X1),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(X1,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X1),fun(X1,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun(X1,'type.ind_type.recspace'(X1)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X1,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X1),'type.ind_type.recspace'(X1)),sK7(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f311,f1169])).
fof(f48764,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X1),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(X1,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X1),fun(X1,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun(X1,'type.ind_type.recspace'(X1)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X1,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X1),'type.ind_type.recspace'(X1)),sK7(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f311,f4018])).
fof(f48765,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X1),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X1),bool),'_dst_x0x1_2'(s(fun(fun(X1,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X1),fun(X1,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun(X1,'type.ind_type.recspace'(X1)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X1),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool)),'=_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),'type.ind_type.recspace'(X1))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X1,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'),s(fun('type.ind_type.recspace'(X1),fun('type.num.num','type.ind_type.recspace'(X1))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X1),fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun('type.num.num','type.ind_type.recspace'(X1)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X1)),'_dst_x0_1'(s('type.ind_type.recspace'(X1),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),fun('type.ind_type.recspace'(X1),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X1),bool),fun('type.ind_type.recspace'(X1),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X1),fun(fun('type.ind_type.recspace'(X1),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X1),'type.ind_type.recspace'(X1)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X1),'type.ind_type.recspace'(X1)),sK7(X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f311,f5307])).
fof(f48645,plain,(
  ( ! [X249,X248,X247] : (s(bool,X247) != s(bool,'|dollar|exists_1'(s(fun(fun(X249,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,sK4(X247,X248,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X248)))) )),
  inference(superposition,[],[f44658,f562])).
fof(f48643,plain,(
  ( ! [X241,X242,X240] : (s(bool,X240) != s(bool,'|dollar|exists_1'(s(fun(fun(X242,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X240),s(fun('type.num.num',bool),X241),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f44658,f295])).
fof(f48635,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X198) != s(bool,'|dollar|exists_1'(s(fun(fun(X200,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(X197,bool),'_dst_x0_1'(s(bool,X198))),s(X197,X199)))) )),
  inference(superposition,[],[f44658,f330])).
fof(f48629,plain,(
  ( ! [X161,X162] : (s(bool,X161) != s(bool,'|dollar|exists_1'(s(fun(fun(X162,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X161)))) )),
  inference(superposition,[],[f44658,f290])).
fof(f47853,plain,(
  ( ! [X30,X29] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X30))) != s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.ast.spec_size_1'(s('type.ast.spec','const.ast.Stype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X29))))))) | s('type.num.num',X30) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.list.list'('type.string.char')),'type.num.num'),'const.list.list_size_1'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))))),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.ast.t'),'type.num.num'),'const.list.list_size_1'(s(fun('type.ast.t','type.num.num'),'const.ast.t_size_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X29)))))) )),
  inference(superposition,[],[f302,f249])).
fof(f47842,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.ast.spec_size_1'(s('type.ast.spec','const.ast.Stype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),happ(s(fun(X0,'type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),X1),s(X0,X2))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),'_dst_x0x1_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.list.list'('type.string.char')),'type.num.num'),'const.list.list_size_1'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))))),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.ast.t'),'type.num.num'),'const.list.list_size_1'(s(fun('type.ast.t','type.num.num'),'const.ast.t_size_0'))))))))))))),s(fun(X0,'type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))))),X1))),s(X0,X2)))))) )),
  inference(superposition,[],[f249,f340])).
fof(f47729,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f45361,f399])).
fof(f47730,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(X0,bool)),'const.benchmark.Once_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'?_1'),s(fun('type.benchmark.times'(fun(X0,bool)),fun('type.benchmark.times'(fun(X0,bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f45361,f399])).
fof(f47734,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK9('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f381,f45361,f1150])).
fof(f47735,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45361,f1169])).
fof(f47736,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45361,f4018])).
fof(f47737,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45361,f5307])).
fof(f47577,plain,(
  ( ! [X269,X267,X268] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X269))) | s(bool,X269) = s(bool,happ(s(fun(X267,bool),sK9('!_1',fun(X267,bool))),s(X267,X268)))) )),
  inference(superposition,[],[f302,f45393])).
fof(f47569,plain,(
  ( ! [X241,X239,X237,X242,X240,X238] : (s(X239,happ(s(fun(bool,X239),happ(s(fun(X240,fun(bool,X239)),X241),s(X240,X242))),s(bool,'T_0'))) = s(X239,happ(s(fun(X237,X239),'_dst_x0x0x1_3'(s(fun(X240,fun(bool,X239)),X241),s(X240,X242),s(fun(X237,bool),sK9('!_1',fun(X237,bool))))),s(X237,X238)))) )),
  inference(superposition,[],[f359,f45393])).
fof(f47568,plain,(
  ( ! [X229,X227,X225,X228,X226,X224] : (s(X226,happ(s(fun(X227,X226),happ(s(fun(bool,fun(X227,X226)),X228),s(bool,'T_0'))),s(X227,happ(s(fun(X224,X227),X229),s(X224,X225))))) = s(X226,happ(s(fun(X224,X226),'_dst_x0x1x1_3'(s(fun(bool,fun(X227,X226)),X228),s(fun(X224,bool),sK9('!_1',fun(X224,bool))),s(fun(X224,X227),X229))),s(X224,X225)))) )),
  inference(superposition,[],[f360,f45393])).
fof(f47567,plain,(
  ( ! [X218,X222,X220,X219,X223,X221] : (s(X220,happ(s(fun(bool,X220),happ(s(fun(X221,fun(bool,X220)),X222),s(X221,happ(s(fun(X218,X221),X223),s(X218,X219))))),s(bool,'T_0'))) = s(X220,happ(s(fun(X218,X220),'_dst_x0x1x1_3'(s(fun(X221,fun(bool,X220)),X222),s(fun(X218,X221),X223),s(fun(X218,bool),sK9('!_1',fun(X218,bool))))),s(X218,X219)))) )),
  inference(superposition,[],[f360,f45393])).
fof(f47686,plain,(
  ( ! [X83,X81,X82] : (s(bool,X83) != s(bool,happ(s(fun(X81,bool),sK9('!_1',fun(X81,bool))),s(X81,X82))) | s(bool,'T_0') = s(bool,X83)) )),
  inference(subsumption_resolution,[],[f47515,f246])).
fof(f47515,plain,(
  ( ! [X83,X81,X82] : (~p(s(bool,'T_0')) | s(bool,X83) != s(bool,happ(s(fun(X81,bool),sK9('!_1',fun(X81,bool))),s(X81,X82))) | s(bool,'T_0') = s(bool,X83)) )),
  inference(superposition,[],[f399,f45393])).
fof(f47384,plain,(
  ( ! [X125,X124] : (s(bool,X124) = s(bool,happ(s(fun(bool,bool),sK9('!_1',fun(bool,bool))),s(bool,X124))) | s(bool,X124) = s(bool,X125) | s(bool,'T_0') = s(bool,X125)) )),
  inference(superposition,[],[f45393,f396])).
fof(f47335,plain,(
  ( ! [X1928,X1926,X1924,X1927,X1925] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun('type.ind_type.recspace'(X1924),'type.num.num'),sK10(X1925,X1924,'type.num.num')),s('type.ind_type.recspace'(X1924),'const.ind_type.CONSTR_3'(s('type.num.num',X1926),s(X1924,X1928),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927))))))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1924,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1924,fun(fun('type.num.num','type.ind_type.recspace'(X1924)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1924,fun(fun('type.num.num','type.ind_type.recspace'(X1924)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1925),s('type.num.num',X1926))),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927))),s(X1924,X1928))),s('type.benchmark.times'(fun('type.num.num','type.num.num')),'const.benchmark.Once_1'(s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1924),'type.num.num'),sK10(X1925,X1924,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927)))))))) )),
  inference(forward_demodulation,[],[f47093,f17542])).
fof(f47093,plain,(
  ( ! [X1928,X1926,X1924,X1927,X1925] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun('type.ind_type.recspace'(X1924),'type.num.num'),sK10(X1925,X1924,'type.num.num')),s('type.ind_type.recspace'(X1924),'const.ind_type.CONSTR_3'(s('type.num.num',X1926),s(X1924,X1928),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927))))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(fun('type.num.num','type.num.num'),'type.num.num'),happ(s(fun(X1924,fun(fun('type.num.num','type.num.num'),'type.num.num')),'_dst_x1x0_2'(s(fun(X1924,fun(fun('type.num.num','type.ind_type.recspace'(X1924)),fun(fun('type.num.num','type.num.num'),'type.num.num'))),happ(s(fun('type.num.num',fun(X1924,fun(fun('type.num.num','type.ind_type.recspace'(X1924)),fun(fun('type.num.num','type.num.num'),'type.num.num')))),X1925),s('type.num.num',X1926))),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927))),s(X1924,X1928))),s('type.benchmark.times'(fun('type.num.num','type.num.num')),'const.benchmark.Once_1'(s(fun('type.num.num','type.num.num'),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1924),'type.num.num'),sK10(X1925,X1924,'type.num.num')),s(fun('type.num.num','type.ind_type.recspace'(X1924)),X1927)))))))) )),
  inference(superposition,[],[f296,f378])).
fof(f47085,plain,(
  ( ! [X1857,X1855,X1853,X1851,X1858,X1856,X1854,X1852,X1850] : (s('type.benchmark.times'(X1850),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1850),X1857),s('type.benchmark.times'(X1850),X1858))) != s('type.benchmark.times'(X1850),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1850),X1856),s('type.benchmark.times'(X1850),happ(s(fun('type.ind_type.recspace'(X1851),'type.benchmark.times'(X1850)),sK10(X1852,X1851,'type.benchmark.times'(X1850))),s('type.ind_type.recspace'(X1851),'const.ind_type.CONSTR_3'(s('type.num.num',X1853),s(X1851,X1855),s(fun('type.num.num','type.ind_type.recspace'(X1851)),X1854))))))) | s('type.benchmark.times'(X1850),X1858) = s('type.benchmark.times'(X1850),happ(s(fun(fun('type.num.num','type.benchmark.times'(X1850)),'type.benchmark.times'(X1850)),happ(s(fun(X1851,fun(fun('type.num.num','type.benchmark.times'(X1850)),'type.benchmark.times'(X1850))),'_dst_x1x0_2'(s(fun(X1851,fun(fun('type.num.num','type.ind_type.recspace'(X1851)),fun(fun('type.num.num','type.benchmark.times'(X1850)),'type.benchmark.times'(X1850)))),happ(s(fun('type.num.num',fun(X1851,fun(fun('type.num.num','type.ind_type.recspace'(X1851)),fun(fun('type.num.num','type.benchmark.times'(X1850)),'type.benchmark.times'(X1850))))),X1852),s('type.num.num',X1853))),s(fun('type.num.num','type.ind_type.recspace'(X1851)),X1854))),s(X1851,X1855))),s(fun('type.num.num','type.benchmark.times'(X1850)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1851),'type.benchmark.times'(X1850)),sK10(X1852,X1851,'type.benchmark.times'(X1850))),s(fun('type.num.num','type.ind_type.recspace'(X1851)),X1854)))))) )),
  inference(superposition,[],[f309,f378])).
fof(f47082,plain,(
  ( ! [X1824,X1831,X1829,X1827,X1825,X1823,X1830,X1828,X1826] : (s('type.benchmark.times'(X1823),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1823),X1830),s('type.benchmark.times'(X1823),X1831))) != s('type.benchmark.times'(X1823),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1823),happ(s(fun('type.ind_type.recspace'(X1824),'type.benchmark.times'(X1823)),sK10(X1825,X1824,'type.benchmark.times'(X1823))),s('type.ind_type.recspace'(X1824),'const.ind_type.CONSTR_3'(s('type.num.num',X1826),s(X1824,X1828),s(fun('type.num.num','type.ind_type.recspace'(X1824)),X1827))))),s('type.benchmark.times'(X1823),X1829))) | s('type.benchmark.times'(X1823),X1830) = s('type.benchmark.times'(X1823),happ(s(fun(fun('type.num.num','type.benchmark.times'(X1823)),'type.benchmark.times'(X1823)),happ(s(fun(X1824,fun(fun('type.num.num','type.benchmark.times'(X1823)),'type.benchmark.times'(X1823))),'_dst_x1x0_2'(s(fun(X1824,fun(fun('type.num.num','type.ind_type.recspace'(X1824)),fun(fun('type.num.num','type.benchmark.times'(X1823)),'type.benchmark.times'(X1823)))),happ(s(fun('type.num.num',fun(X1824,fun(fun('type.num.num','type.ind_type.recspace'(X1824)),fun(fun('type.num.num','type.benchmark.times'(X1823)),'type.benchmark.times'(X1823))))),X1825),s('type.num.num',X1826))),s(fun('type.num.num','type.ind_type.recspace'(X1824)),X1827))),s(X1824,X1828))),s(fun('type.num.num','type.benchmark.times'(X1823)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1824),'type.benchmark.times'(X1823)),sK10(X1825,X1824,'type.benchmark.times'(X1823))),s(fun('type.num.num','type.ind_type.recspace'(X1824)),X1827)))))) )),
  inference(superposition,[],[f308,f378])).
fof(f47070,plain,(
  ( ! [X1736,X1738,X1740,X1737,X1739,X1741] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1741),s('type.benchmark.times'(sK0),happ(s(fun('type.ind_type.recspace'(X1736),'type.benchmark.times'(sK0)),sK10(X1737,X1736,'type.benchmark.times'(sK0))),s('type.ind_type.recspace'(X1736),'const.ind_type.CONSTR_3'(s('type.num.num',X1738),s(X1736,X1740),s(fun('type.num.num','type.ind_type.recspace'(X1736)),X1739))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)),happ(s(fun(X1736,fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0))),'_dst_x1x0_2'(s(fun(X1736,fun(fun('type.num.num','type.ind_type.recspace'(X1736)),fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)))),happ(s(fun('type.num.num',fun(X1736,fun(fun('type.num.num','type.ind_type.recspace'(X1736)),fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0))))),X1737),s('type.num.num',X1738))),s(fun('type.num.num','type.ind_type.recspace'(X1736)),X1739))),s(X1736,X1740))),s(fun('type.num.num','type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1736),'type.benchmark.times'(sK0)),sK10(X1737,X1736,'type.benchmark.times'(sK0))),s(fun('type.num.num','type.ind_type.recspace'(X1736)),X1739)))))) )),
  inference(superposition,[],[f17086,f378])).
fof(f47061,plain,(
  ( ! [X1676,X1678,X1681,X1677,X1679,X1680] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.ind_type.recspace'(X1676),'type.benchmark.times'(sK0)),sK10(X1677,X1676,'type.benchmark.times'(sK0))),s('type.ind_type.recspace'(X1676),'const.ind_type.CONSTR_3'(s('type.num.num',X1678),s(X1676,X1680),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679))))),s('type.benchmark.times'(sK0),X1681))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)),happ(s(fun(X1676,fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0))),'_dst_x1x0_2'(s(fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)))),happ(s(fun('type.num.num',fun(X1676,fun(fun('type.num.num','type.ind_type.recspace'(X1676)),fun(fun('type.num.num','type.benchmark.times'(sK0)),'type.benchmark.times'(sK0))))),X1677),s('type.num.num',X1678))),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679))),s(X1676,X1680))),s(fun('type.num.num','type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1676),'type.benchmark.times'(sK0)),sK10(X1677,X1676,'type.benchmark.times'(sK0))),s(fun('type.num.num','type.ind_type.recspace'(X1676)),X1679)))))) )),
  inference(superposition,[],[f16999,f378])).
fof(f47005,plain,(
  ( ! [X1035,X1033,X1037,X1027,X1031,X1029,X1034,X1032,X1036,X1026,X1030,X1028] : (s(fun(X1033,fun(X1026,X1034)),'_dst_x00x10x01_3'(s(fun(X1035,fun(X1027,X1034)),X1036),s(fun(X1033,X1035),happ(s(fun(fun('type.num.num',fun(X1026,X1027)),fun(X1033,X1035)),X1037),s(fun('type.num.num',fun(X1026,X1027)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1028),fun(X1026,X1027)),sK10(X1029,X1028,fun(X1026,X1027))),s(fun('type.num.num','type.ind_type.recspace'(X1028)),X1031))))),s(fun(X1026,X1027),happ(s(fun('type.ind_type.recspace'(X1028),fun(X1026,X1027)),sK10(X1029,X1028,fun(X1026,X1027))),s('type.ind_type.recspace'(X1028),'const.ind_type.CONSTR_3'(s('type.num.num',X1030),s(X1028,X1032),s(fun('type.num.num','type.ind_type.recspace'(X1028)),X1031))))))) = s(fun(X1033,fun(X1026,X1034)),happ(s(fun(fun('type.num.num',fun(X1026,X1027)),fun(X1033,fun(X1026,X1034))),'_dst_x000x110x101_3'(s(fun(X1035,fun(X1027,X1034)),X1036),s(fun(fun('type.num.num',fun(X1026,X1027)),fun(X1033,X1035)),X1037),s(fun(fun('type.num.num',fun(X1026,X1027)),fun(X1026,X1027)),happ(s(fun(X1028,fun(fun('type.num.num',fun(X1026,X1027)),fun(X1026,X1027))),'_dst_x1x0_2'(s(fun(X1028,fun(fun('type.num.num','type.ind_type.recspace'(X1028)),fun(fun('type.num.num',fun(X1026,X1027)),fun(X1026,X1027)))),happ(s(fun('type.num.num',fun(X1028,fun(fun('type.num.num','type.ind_type.recspace'(X1028)),fun(fun('type.num.num',fun(X1026,X1027)),fun(X1026,X1027))))),X1029),s('type.num.num',X1030))),s(fun('type.num.num','type.ind_type.recspace'(X1028)),X1031))),s(X1028,X1032))))),s(fun('type.num.num',fun(X1026,X1027)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1028),fun(X1026,X1027)),sK10(X1029,X1028,fun(X1026,X1027))),s(fun('type.num.num','type.ind_type.recspace'(X1028)),X1031)))))) )),
  inference(superposition,[],[f368,f378])).
fof(f47004,plain,(
  ( ! [X1019,X1017,X1023,X1021,X1015,X1025,X1018,X1016,X1022,X1020,X1014,X1024] : (s(fun(X1014,fun(X1021,X1022)),'_dst_x00x10x01_3'(s(fun(X1015,fun(X1023,X1022)),X1024),s(fun(X1014,X1015),happ(s(fun('type.ind_type.recspace'(X1016),fun(X1014,X1015)),sK10(X1017,X1016,fun(X1014,X1015))),s('type.ind_type.recspace'(X1016),'const.ind_type.CONSTR_3'(s('type.num.num',X1018),s(X1016,X1020),s(fun('type.num.num','type.ind_type.recspace'(X1016)),X1019))))),s(fun(X1021,X1023),happ(s(fun(fun('type.num.num',fun(X1014,X1015)),fun(X1021,X1023)),X1025),s(fun('type.num.num',fun(X1014,X1015)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1016),fun(X1014,X1015)),sK10(X1017,X1016,fun(X1014,X1015))),s(fun('type.num.num','type.ind_type.recspace'(X1016)),X1019))))))) = s(fun(X1014,fun(X1021,X1022)),happ(s(fun(fun('type.num.num',fun(X1014,X1015)),fun(X1014,fun(X1021,X1022))),'_dst_x000x110x101_3'(s(fun(X1015,fun(X1023,X1022)),X1024),s(fun(fun('type.num.num',fun(X1014,X1015)),fun(X1014,X1015)),happ(s(fun(X1016,fun(fun('type.num.num',fun(X1014,X1015)),fun(X1014,X1015))),'_dst_x1x0_2'(s(fun(X1016,fun(fun('type.num.num','type.ind_type.recspace'(X1016)),fun(fun('type.num.num',fun(X1014,X1015)),fun(X1014,X1015)))),happ(s(fun('type.num.num',fun(X1016,fun(fun('type.num.num','type.ind_type.recspace'(X1016)),fun(fun('type.num.num',fun(X1014,X1015)),fun(X1014,X1015))))),X1017),s('type.num.num',X1018))),s(fun('type.num.num','type.ind_type.recspace'(X1016)),X1019))),s(X1016,X1020))),s(fun(fun('type.num.num',fun(X1014,X1015)),fun(X1021,X1023)),X1025))),s(fun('type.num.num',fun(X1014,X1015)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1016),fun(X1014,X1015)),sK10(X1017,X1016,fun(X1014,X1015))),s(fun('type.num.num','type.ind_type.recspace'(X1016)),X1019)))))) )),
  inference(superposition,[],[f368,f378])).
fof(f47003,plain,(
  ( ! [X1011,X1009,X1013,X1006,X1004,X1010,X1008,X1012,X1003,X1007,X1005] : (s(fun(X1003,X1010),'_dst_x0x1x1_3'(s(fun(X1004,fun(X1011,X1010)),X1012),s(fun(X1003,X1004),happ(s(fun('type.ind_type.recspace'(X1005),fun(X1003,X1004)),sK10(X1006,X1005,fun(X1003,X1004))),s('type.ind_type.recspace'(X1005),'const.ind_type.CONSTR_3'(s('type.num.num',X1007),s(X1005,X1009),s(fun('type.num.num','type.ind_type.recspace'(X1005)),X1008))))),s(fun(X1003,X1011),happ(s(fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1011)),X1013),s(fun('type.num.num',fun(X1003,X1004)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1005),fun(X1003,X1004)),sK10(X1006,X1005,fun(X1003,X1004))),s(fun('type.num.num','type.ind_type.recspace'(X1005)),X1008))))))) = s(fun(X1003,X1010),happ(s(fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1010)),'_dst_x00x11x11_3'(s(fun(X1004,fun(X1011,X1010)),X1012),s(fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1004)),happ(s(fun(X1005,fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1004))),'_dst_x1x0_2'(s(fun(X1005,fun(fun('type.num.num','type.ind_type.recspace'(X1005)),fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1004)))),happ(s(fun('type.num.num',fun(X1005,fun(fun('type.num.num','type.ind_type.recspace'(X1005)),fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1004))))),X1006),s('type.num.num',X1007))),s(fun('type.num.num','type.ind_type.recspace'(X1005)),X1008))),s(X1005,X1009))),s(fun(fun('type.num.num',fun(X1003,X1004)),fun(X1003,X1011)),X1013))),s(fun('type.num.num',fun(X1003,X1004)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1005),fun(X1003,X1004)),sK10(X1006,X1005,fun(X1003,X1004))),s(fun('type.num.num','type.ind_type.recspace'(X1005)),X1008)))))) )),
  inference(superposition,[],[f365,f378])).
fof(f47002,plain,(
  ( ! [X1002,X1000,X994,X992,X998,X996,X1001,X995,X993,X999,X997] : (s(fun(X992,X999),'_dst_x0x1x1_3'(s(fun(X1000,fun(X993,X999)),X1001),s(fun(X992,X1000),happ(s(fun(fun('type.num.num',fun(X992,X993)),fun(X992,X1000)),X1002),s(fun('type.num.num',fun(X992,X993)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X994),fun(X992,X993)),sK10(X995,X994,fun(X992,X993))),s(fun('type.num.num','type.ind_type.recspace'(X994)),X997))))),s(fun(X992,X993),happ(s(fun('type.ind_type.recspace'(X994),fun(X992,X993)),sK10(X995,X994,fun(X992,X993))),s('type.ind_type.recspace'(X994),'const.ind_type.CONSTR_3'(s('type.num.num',X996),s(X994,X998),s(fun('type.num.num','type.ind_type.recspace'(X994)),X997))))))) = s(fun(X992,X999),happ(s(fun(fun('type.num.num',fun(X992,X993)),fun(X992,X999)),'_dst_x00x11x11_3'(s(fun(X1000,fun(X993,X999)),X1001),s(fun(fun('type.num.num',fun(X992,X993)),fun(X992,X1000)),X1002),s(fun(fun('type.num.num',fun(X992,X993)),fun(X992,X993)),happ(s(fun(X994,fun(fun('type.num.num',fun(X992,X993)),fun(X992,X993))),'_dst_x1x0_2'(s(fun(X994,fun(fun('type.num.num','type.ind_type.recspace'(X994)),fun(fun('type.num.num',fun(X992,X993)),fun(X992,X993)))),happ(s(fun('type.num.num',fun(X994,fun(fun('type.num.num','type.ind_type.recspace'(X994)),fun(fun('type.num.num',fun(X992,X993)),fun(X992,X993))))),X995),s('type.num.num',X996))),s(fun('type.num.num','type.ind_type.recspace'(X994)),X997))),s(X994,X998))))),s(fun('type.num.num',fun(X992,X993)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X994),fun(X992,X993)),sK10(X995,X994,fun(X992,X993))),s(fun('type.num.num','type.ind_type.recspace'(X994)),X997)))))) )),
  inference(superposition,[],[f365,f378])).
fof(f47001,plain,(
  ( ! [X969,X963,X961,X967,X965,X968,X962,X960,X966,X964] : (s(X961,happ(s(fun(X960,X961),happ(s(fun('type.ind_type.recspace'(X962),fun(X960,X961)),sK10(X963,X962,fun(X960,X961))),s('type.ind_type.recspace'(X962),'const.ind_type.CONSTR_3'(s('type.num.num',X964),s(X962,X966),s(fun('type.num.num','type.ind_type.recspace'(X962)),X965))))),s(X960,happ(s(fun(X967,X960),X968),s(X967,X969))))) = s(X961,happ(s(fun(X967,X961),'_dst_x0x0x1_3'(s(fun(fun('type.num.num',fun(X960,X961)),fun(X960,X961)),happ(s(fun(X962,fun(fun('type.num.num',fun(X960,X961)),fun(X960,X961))),'_dst_x1x0_2'(s(fun(X962,fun(fun('type.num.num','type.ind_type.recspace'(X962)),fun(fun('type.num.num',fun(X960,X961)),fun(X960,X961)))),happ(s(fun('type.num.num',fun(X962,fun(fun('type.num.num','type.ind_type.recspace'(X962)),fun(fun('type.num.num',fun(X960,X961)),fun(X960,X961))))),X963),s('type.num.num',X964))),s(fun('type.num.num','type.ind_type.recspace'(X962)),X965))),s(X962,X966))),s(fun('type.num.num',fun(X960,X961)),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X962),fun(X960,X961)),sK10(X963,X962,fun(X960,X961))),s(fun('type.num.num','type.ind_type.recspace'(X962)),X965))),s(fun(X967,X960),X968))),s(X967,X969)))) )),
  inference(superposition,[],[f359,f378])).
fof(f46880,plain,(
  ( ! [X111,X109,X107,X112,X110,X108,X113] : (s('type.benchmark.times'(X107),'const.benchmark.Once_1'(s(X107,X113))) != s('type.benchmark.times'(X107),'const.benchmark.Once_1'(s(X107,happ(s(fun('type.ind_type.recspace'(X108),X107),sK10(X109,X108,X107)),s('type.ind_type.recspace'(X108),'const.ind_type.CONSTR_3'(s('type.num.num',X110),s(X108,X112),s(fun('type.num.num','type.ind_type.recspace'(X108)),X111))))))) | s(X107,X113) = s(X107,happ(s(fun(fun('type.num.num',X107),X107),happ(s(fun(X108,fun(fun('type.num.num',X107),X107)),'_dst_x1x0_2'(s(fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X107),X107))),happ(s(fun('type.num.num',fun(X108,fun(fun('type.num.num','type.ind_type.recspace'(X108)),fun(fun('type.num.num',X107),X107)))),X109),s('type.num.num',X110))),s(fun('type.num.num','type.ind_type.recspace'(X108)),X111))),s(X108,X112))),s(fun('type.num.num',X107),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X108),X107),sK10(X109,X108,X107)),s(fun('type.num.num','type.ind_type.recspace'(X108)),X111)))))) )),
  inference(superposition,[],[f302,f378])).
fof(f46872,plain,(
  ( ! [X47,X45,X43,X52,X50,X48,X46,X44,X51,X49] : (s(X49,happ(s(fun(X43,X49),happ(s(fun(X50,fun(X43,X49)),X51),s(X50,X52))),s(X43,happ(s(fun('type.ind_type.recspace'(X44),X43),sK10(X45,X44,X43)),s('type.ind_type.recspace'(X44),'const.ind_type.CONSTR_3'(s('type.num.num',X46),s(X44,X48),s(fun('type.num.num','type.ind_type.recspace'(X44)),X47))))))) = s(X49,happ(s(fun(fun('type.num.num',X43),X49),'_dst_x0x0x1_3'(s(fun(X50,fun(X43,X49)),X51),s(X50,X52),s(fun(fun('type.num.num',X43),X43),happ(s(fun(X44,fun(fun('type.num.num',X43),X43)),'_dst_x1x0_2'(s(fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X43),X43))),happ(s(fun('type.num.num',fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),fun(fun('type.num.num',X43),X43)))),X45),s('type.num.num',X46))),s(fun('type.num.num','type.ind_type.recspace'(X44)),X47))),s(X44,X48))))),s(fun('type.num.num',X43),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X44),X43),sK10(X45,X44,X43)),s(fun('type.num.num','type.ind_type.recspace'(X44)),X47)))))) )),
  inference(superposition,[],[f359,f378])).
fof(f46871,plain,(
  ( ! [X30,X28,X26,X24,X23,X31,X29,X27,X25,X22] : (s(X28,happ(s(fun(X29,X28),happ(s(fun(X22,fun(X29,X28)),X30),s(X22,happ(s(fun('type.ind_type.recspace'(X23),X22),sK10(X24,X23,X22)),s('type.ind_type.recspace'(X23),'const.ind_type.CONSTR_3'(s('type.num.num',X25),s(X23,X27),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))))))),s(X29,happ(s(fun(fun('type.num.num',X22),X29),X31),s(fun('type.num.num',X22),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X23),X22),sK10(X24,X23,X22)),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))))))) = s(X28,happ(s(fun(fun('type.num.num',X22),X28),'_dst_x0x1x1_3'(s(fun(X22,fun(X29,X28)),X30),s(fun(fun('type.num.num',X22),X22),happ(s(fun(X23,fun(fun('type.num.num',X22),X22)),'_dst_x1x0_2'(s(fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',X22),X22))),happ(s(fun('type.num.num',fun(X23,fun(fun('type.num.num','type.ind_type.recspace'(X23)),fun(fun('type.num.num',X22),X22)))),X24),s('type.num.num',X25))),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26))),s(X23,X27))),s(fun(fun('type.num.num',X22),X29),X31))),s(fun('type.num.num',X22),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X23),X22),sK10(X24,X23,X22)),s(fun('type.num.num','type.ind_type.recspace'(X23)),X26)))))) )),
  inference(superposition,[],[f360,f378])).
fof(f46870,plain,(
  ( ! [X14,X12,X21,X19,X17,X15,X13,X20,X18,X16] : (s(X18,happ(s(fun(X12,X18),happ(s(fun(X19,fun(X12,X18)),X20),s(X19,happ(s(fun(fun('type.num.num',X12),X19),X21),s(fun('type.num.num',X12),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X13),X12),sK10(X14,X13,X12)),s(fun('type.num.num','type.ind_type.recspace'(X13)),X16))))))),s(X12,happ(s(fun('type.ind_type.recspace'(X13),X12),sK10(X14,X13,X12)),s('type.ind_type.recspace'(X13),'const.ind_type.CONSTR_3'(s('type.num.num',X15),s(X13,X17),s(fun('type.num.num','type.ind_type.recspace'(X13)),X16))))))) = s(X18,happ(s(fun(fun('type.num.num',X12),X18),'_dst_x0x1x1_3'(s(fun(X19,fun(X12,X18)),X20),s(fun(fun('type.num.num',X12),X19),X21),s(fun(fun('type.num.num',X12),X12),happ(s(fun(X13,fun(fun('type.num.num',X12),X12)),'_dst_x1x0_2'(s(fun(X13,fun(fun('type.num.num','type.ind_type.recspace'(X13)),fun(fun('type.num.num',X12),X12))),happ(s(fun('type.num.num',fun(X13,fun(fun('type.num.num','type.ind_type.recspace'(X13)),fun(fun('type.num.num',X12),X12)))),X14),s('type.num.num',X15))),s(fun('type.num.num','type.ind_type.recspace'(X13)),X16))),s(X13,X17))))),s(fun('type.num.num',X12),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X13),X12),sK10(X14,X13,X12)),s(fun('type.num.num','type.ind_type.recspace'(X13)),X16)))))) )),
  inference(superposition,[],[f360,f378])).
fof(f46847,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,happ(s(fun('type.ind_type.recspace'(X7),X6),sK10(X8,X7,X6)),s('type.ind_type.recspace'(X7),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X7,X11),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))) = s(X6,happ(s(fun(X7,X6),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num',X6),X6)),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6))),happ(s(fun('type.num.num',fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6)))),X8),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))),s(fun('type.num.num',X6),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X7),X6),sK10(X8,X7,X6)),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))),s(X7,X11)))) )),
  inference(superposition,[],[f378,f341])).
fof(f46846,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X6),s(X1,X7),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4),s(X3,X5))))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X6))),s(fun('type.num.num','type.ind_type.recspace'(X1)),happ(s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4),s(X3,X5))))),s(X1,X7))),s(fun('type.num.num',X0),happ(s(fun(X3,fun('type.num.num',X0)),'_dst_x00x11_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun(X3,fun('type.num.num','type.ind_type.recspace'(X1))),X4))),s(X3,X5)))))) )),
  inference(superposition,[],[f378,f358])).
fof(f46818,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun('type.ind_type.recspace'(X7),X6),sK10(X8,X7,X6)),s('type.ind_type.recspace'(X7),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))))) = s(X6,happ(s(fun(fun('type.num.num',X6),X6),happ(s(fun(X11,fun(fun('type.num.num',X6),X6)),'_dst_x0x1_2'(s(fun(X7,fun(fun('type.num.num',X6),X6)),'_dst_x1x0_2'(s(fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6))),happ(s(fun('type.num.num',fun(X7,fun(fun('type.num.num','type.ind_type.recspace'(X7)),fun(fun('type.num.num',X6),X6)))),X8),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10))),s(fun(X11,X7),X12))),s(X11,X13))),s(fun('type.num.num',X6),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X7),X6),sK10(X8,X7,X6)),s(fun('type.num.num','type.ind_type.recspace'(X7)),X10)))))) )),
  inference(superposition,[],[f378,f340])).
fof(f46699,plain,(
  ( ! [X158,X156,X154,X152,X151,X157,X155,X153] : (s(X152,happ(s(fun('type.ind_type.recspace'(X151),X152),sK10('_dst_x1x0_2'(s(fun('type.num.num',fun(X153,fun(X151,fun(fun('type.num.num','type.ind_type.recspace'(X151)),fun(fun('type.num.num',X152),X152))))),X154),s(X153,X155)),X151,X152)),s('type.ind_type.recspace'(X151),'const.ind_type.CONSTR_3'(s('type.num.num',X156),s(X151,X157),s(fun('type.num.num','type.ind_type.recspace'(X151)),X158))))) = s(X152,happ(s(fun(fun('type.num.num',X152),X152),happ(s(fun(X151,fun(fun('type.num.num',X152),X152)),'_dst_x1x0_2'(s(fun(X151,fun(fun('type.num.num','type.ind_type.recspace'(X151)),fun(fun('type.num.num',X152),X152))),happ(s(fun(X153,fun(X151,fun(fun('type.num.num','type.ind_type.recspace'(X151)),fun(fun('type.num.num',X152),X152)))),happ(s(fun('type.num.num',fun(X153,fun(X151,fun(fun('type.num.num','type.ind_type.recspace'(X151)),fun(fun('type.num.num',X152),X152))))),X154),s('type.num.num',X156))),s(X153,X155))),s(fun('type.num.num','type.ind_type.recspace'(X151)),X158))),s(X151,X157))),s(fun('type.num.num',X152),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X151),X152),sK10('_dst_x1x0_2'(s(fun('type.num.num',fun(X153,fun(X151,fun(fun('type.num.num','type.ind_type.recspace'(X151)),fun(fun('type.num.num',X152),X152))))),X154),s(X153,X155)),X151,X152)),s(fun('type.num.num','type.ind_type.recspace'(X151)),X158)))))) )),
  inference(superposition,[],[f378,f341])).
fof(f46698,plain,(
  ( ! [X146,X149,X147,X145,X150,X148] : (s(X146,happ(s(fun('type.ind_type.recspace'(X145),X146),sK10('_dst_x0_1'(s(fun(X145,fun(fun('type.num.num','type.ind_type.recspace'(X145)),fun(fun('type.num.num',X146),X146))),X147)),X145,X146)),s('type.ind_type.recspace'(X145),'const.ind_type.CONSTR_3'(s('type.num.num',X148),s(X145,X149),s(fun('type.num.num','type.ind_type.recspace'(X145)),X150))))) = s(X146,happ(s(fun(fun('type.num.num',X146),X146),happ(s(fun(X145,fun(fun('type.num.num',X146),X146)),'_dst_x1x0_2'(s(fun(X145,fun(fun('type.num.num','type.ind_type.recspace'(X145)),fun(fun('type.num.num',X146),X146))),X147),s(fun('type.num.num','type.ind_type.recspace'(X145)),X150))),s(X145,X149))),s(fun('type.num.num',X146),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X145),X146),sK10('_dst_x0_1'(s(fun(X145,fun(fun('type.num.num','type.ind_type.recspace'(X145)),fun(fun('type.num.num',X146),X146))),X147)),X145,X146)),s(fun('type.num.num','type.ind_type.recspace'(X145)),X150)))))) )),
  inference(superposition,[],[f378,f330])).
fof(f46697,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139,X137] : (s(X138,happ(s(fun('type.ind_type.recspace'(X137),X138),sK10('_dst_x0x1_2'(s(fun(X139,fun(X137,fun(fun('type.num.num','type.ind_type.recspace'(X137)),fun(fun('type.num.num',X138),X138)))),X140),s(fun('type.num.num',X139),X141)),X137,X138)),s('type.ind_type.recspace'(X137),'const.ind_type.CONSTR_3'(s('type.num.num',X142),s(X137,X143),s(fun('type.num.num','type.ind_type.recspace'(X137)),X144))))) = s(X138,happ(s(fun(fun('type.num.num',X138),X138),happ(s(fun(X137,fun(fun('type.num.num',X138),X138)),'_dst_x1x0_2'(s(fun(X137,fun(fun('type.num.num','type.ind_type.recspace'(X137)),fun(fun('type.num.num',X138),X138))),happ(s(fun(X139,fun(X137,fun(fun('type.num.num','type.ind_type.recspace'(X137)),fun(fun('type.num.num',X138),X138)))),X140),s(X139,happ(s(fun('type.num.num',X139),X141),s('type.num.num',X142))))),s(fun('type.num.num','type.ind_type.recspace'(X137)),X144))),s(X137,X143))),s(fun('type.num.num',X138),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X137),X138),sK10('_dst_x0x1_2'(s(fun(X139,fun(X137,fun(fun('type.num.num','type.ind_type.recspace'(X137)),fun(fun('type.num.num',X138),X138)))),X140),s(fun('type.num.num',X139),X141)),X137,X138)),s(fun('type.num.num','type.ind_type.recspace'(X137)),X144)))))) )),
  inference(superposition,[],[f378,f340])).
fof(f46696,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X135,X133,X131,X129] : (s(X128,happ(s(fun('type.ind_type.recspace'(X127),X128),sK10(happ(s(fun(X129,fun('type.num.num',fun(X127,fun(fun('type.num.num','type.ind_type.recspace'(X127)),fun(fun('type.num.num',X128),X128))))),X130),s(X129,happ(s(fun(X131,X129),X132),s(X131,X133)))),X127,X128)),s('type.ind_type.recspace'(X127),'const.ind_type.CONSTR_3'(s('type.num.num',happ(s(fun(X131,'type.num.num'),X134),s(X131,X133))),s(X127,X135),s(fun('type.num.num','type.ind_type.recspace'(X127)),X136))))) = s(X128,happ(s(fun(fun('type.num.num',X128),X128),happ(s(fun(X127,fun(fun('type.num.num',X128),X128)),'_dst_x1x0_2'(s(fun(X127,fun(fun('type.num.num','type.ind_type.recspace'(X127)),fun(fun('type.num.num',X128),X128))),happ(s(fun(X131,fun(X127,fun(fun('type.num.num','type.ind_type.recspace'(X127)),fun(fun('type.num.num',X128),X128)))),'_dst_x0x1x1_3'(s(fun(X129,fun('type.num.num',fun(X127,fun(fun('type.num.num','type.ind_type.recspace'(X127)),fun(fun('type.num.num',X128),X128))))),X130),s(fun(X131,X129),X132),s(fun(X131,'type.num.num'),X134))),s(X131,X133))),s(fun('type.num.num','type.ind_type.recspace'(X127)),X136))),s(X127,X135))),s(fun('type.num.num',X128),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X127),X128),sK10(happ(s(fun(X129,fun('type.num.num',fun(X127,fun(fun('type.num.num','type.ind_type.recspace'(X127)),fun(fun('type.num.num',X128),X128))))),X130),s(X129,happ(s(fun(X131,X129),X132),s(X131,X133)))),X127,X128)),s(fun('type.num.num','type.ind_type.recspace'(X127)),X136)))))) )),
  inference(superposition,[],[f378,f360])).
fof(f46695,plain,(
  ( ! [X125,X123,X121,X118,X126,X124,X122,X120,X119,X117] : (s(X118,happ(s(fun('type.ind_type.recspace'(X117),X118),sK10(happ(s(fun(X119,fun('type.num.num',fun(X117,fun(fun('type.num.num','type.ind_type.recspace'(X117)),fun(fun('type.num.num',X118),X118))))),X120),s(X119,X121)),X117,X118)),s('type.ind_type.recspace'(X117),'const.ind_type.CONSTR_3'(s('type.num.num',happ(s(fun(X122,'type.num.num'),X123),s(X122,X124))),s(X117,X125),s(fun('type.num.num','type.ind_type.recspace'(X117)),X126))))) = s(X118,happ(s(fun(fun('type.num.num',X118),X118),happ(s(fun(X117,fun(fun('type.num.num',X118),X118)),'_dst_x1x0_2'(s(fun(X117,fun(fun('type.num.num','type.ind_type.recspace'(X117)),fun(fun('type.num.num',X118),X118))),happ(s(fun(X122,fun(X117,fun(fun('type.num.num','type.ind_type.recspace'(X117)),fun(fun('type.num.num',X118),X118)))),'_dst_x0x0x1_3'(s(fun(X119,fun('type.num.num',fun(X117,fun(fun('type.num.num','type.ind_type.recspace'(X117)),fun(fun('type.num.num',X118),X118))))),X120),s(X119,X121),s(fun(X122,'type.num.num'),X123))),s(X122,X124))),s(fun('type.num.num','type.ind_type.recspace'(X117)),X126))),s(X117,X125))),s(fun('type.num.num',X118),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X117),X118),sK10(happ(s(fun(X119,fun('type.num.num',fun(X117,fun(fun('type.num.num','type.ind_type.recspace'(X117)),fun(fun('type.num.num',X118),X118))))),X120),s(X119,X121)),X117,X118)),s(fun('type.num.num','type.ind_type.recspace'(X117)),X126)))))) )),
  inference(superposition,[],[f378,f359])).
fof(f46694,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X115,X113] : (s(X110,happ(s(fun('type.ind_type.recspace'(X109),X110),sK10(happ(s(fun(X111,fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X112),s(X111,X113)),X109,X110)),s('type.ind_type.recspace'(X109),'const.ind_type.CONSTR_3'(s('type.num.num',X114),s(X109,X115),s(fun('type.num.num','type.ind_type.recspace'(X109)),X116))))) = s(X110,happ(s(fun(fun('type.num.num',X110),X110),happ(s(fun(X109,fun(fun('type.num.num',X110),X110)),'_dst_x1x0_2'(s(fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))),happ(s(fun(X111,fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110)))),'_dst_x1x0_2'(s(fun(X111,fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X112),s('type.num.num',X114))),s(X111,X113))),s(fun('type.num.num','type.ind_type.recspace'(X109)),X116))),s(X109,X115))),s(fun('type.num.num',X110),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X109),X110),sK10(happ(s(fun(X111,fun('type.num.num',fun(X109,fun(fun('type.num.num','type.ind_type.recspace'(X109)),fun(fun('type.num.num',X110),X110))))),X112),s(X111,X113)),X109,X110)),s(fun('type.num.num','type.ind_type.recspace'(X109)),X116)))))) )),
  inference(superposition,[],[f378,f341])).
fof(f46693,plain,(
  ( ! [X101,X99,X97,X102,X100,X98,X96] : (s(X97,happ(s(fun('type.ind_type.recspace'(X96),X97),sK10(happ(s(fun(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))))),'_dst_x1x0_2'(s(fun(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),fun(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),X98))),s(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),X99)),X96,X97)),s('type.ind_type.recspace'(X96),'const.ind_type.CONSTR_3'(s('type.num.num',X100),s(X96,X101),s(fun('type.num.num','type.ind_type.recspace'(X96)),X102))))) = s(X97,happ(s(fun(fun('type.num.num',X97),X97),happ(s(fun(X96,fun(fun('type.num.num',X97),X97)),'_dst_x1x0_2'(s(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),'const.ind_type.FCONS_3'(s(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),X99),s(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),X98),s('type.num.num',X100))),s(fun('type.num.num','type.ind_type.recspace'(X96)),X102))),s(X96,X101))),s(fun('type.num.num',X97),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X96),X97),sK10(happ(s(fun(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))))),'_dst_x1x0_2'(s(fun(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),fun(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97)))),X98))),s(fun(X96,fun(fun('type.num.num','type.ind_type.recspace'(X96)),fun(fun('type.num.num',X97),X97))),X99)),X96,X97)),s(fun('type.num.num','type.ind_type.recspace'(X96)),X102)))))) )),
  inference(superposition,[],[f378,f377])).
fof(f46692,plain,(
  ( ! [X94,X92,X90,X88,X87,X95,X93,X91,X89,X86] : (s(X87,happ(s(fun('type.ind_type.recspace'(X86),X87),sK10('_dst_x00x00x11_3'(s(fun(X88,fun(X89,fun(fun('type.num.num','type.ind_type.recspace'(X86)),fun(fun('type.num.num',X87),X87)))),X90),s(X88,X91),s(fun('type.num.num',fun(X86,X89)),X92)),X86,X87)),s('type.ind_type.recspace'(X86),'const.ind_type.CONSTR_3'(s('type.num.num',X93),s(X86,X94),s(fun('type.num.num','type.ind_type.recspace'(X86)),X95))))) = s(X87,happ(s(fun(fun('type.num.num',X87),X87),happ(s(fun(X86,fun(fun('type.num.num',X87),X87)),'_dst_x1x0_2'(s(fun(X86,fun(fun('type.num.num','type.ind_type.recspace'(X86)),fun(fun('type.num.num',X87),X87))),'_dst_x0x0x1_3'(s(fun(X88,fun(X89,fun(fun('type.num.num','type.ind_type.recspace'(X86)),fun(fun('type.num.num',X87),X87)))),X90),s(X88,X91),s(fun(X86,X89),happ(s(fun('type.num.num',fun(X86,X89)),X92),s('type.num.num',X93))))),s(fun('type.num.num','type.ind_type.recspace'(X86)),X95))),s(X86,X94))),s(fun('type.num.num',X87),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X86),X87),sK10('_dst_x00x00x11_3'(s(fun(X88,fun(X89,fun(fun('type.num.num','type.ind_type.recspace'(X86)),fun(fun('type.num.num',X87),X87)))),X90),s(X88,X91),s(fun('type.num.num',fun(X86,X89)),X92)),X86,X87)),s(fun('type.num.num','type.ind_type.recspace'(X86)),X95)))))) )),
  inference(superposition,[],[f378,f363])).
fof(f46691,plain,(
  ( ! [X80,X78,X76,X85,X83,X81,X79,X77,X84,X82] : (s(X77,happ(s(fun('type.ind_type.recspace'(X76),X77),sK10('_dst_x00x11x11_3'(s(fun(X78,fun(X79,fun(fun('type.num.num','type.ind_type.recspace'(X76)),fun(fun('type.num.num',X77),X77)))),X80),s(fun('type.num.num',fun(X76,X78)),X81),s(fun('type.num.num',fun(X76,X79)),X82)),X76,X77)),s('type.ind_type.recspace'(X76),'const.ind_type.CONSTR_3'(s('type.num.num',X83),s(X76,X84),s(fun('type.num.num','type.ind_type.recspace'(X76)),X85))))) = s(X77,happ(s(fun(fun('type.num.num',X77),X77),happ(s(fun(X76,fun(fun('type.num.num',X77),X77)),'_dst_x1x0_2'(s(fun(X76,fun(fun('type.num.num','type.ind_type.recspace'(X76)),fun(fun('type.num.num',X77),X77))),'_dst_x0x1x1_3'(s(fun(X78,fun(X79,fun(fun('type.num.num','type.ind_type.recspace'(X76)),fun(fun('type.num.num',X77),X77)))),X80),s(fun(X76,X78),happ(s(fun('type.num.num',fun(X76,X78)),X81),s('type.num.num',X83))),s(fun(X76,X79),happ(s(fun('type.num.num',fun(X76,X79)),X82),s('type.num.num',X83))))),s(fun('type.num.num','type.ind_type.recspace'(X76)),X85))),s(X76,X84))),s(fun('type.num.num',X77),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X76),X77),sK10('_dst_x00x11x11_3'(s(fun(X78,fun(X79,fun(fun('type.num.num','type.ind_type.recspace'(X76)),fun(fun('type.num.num',X77),X77)))),X80),s(fun('type.num.num',fun(X76,X78)),X81),s(fun('type.num.num',fun(X76,X79)),X82)),X76,X77)),s(fun('type.num.num','type.ind_type.recspace'(X76)),X85)))))) )),
  inference(superposition,[],[f378,f365])).
fof(f46690,plain,(
  ( ! [X70,X68,X66,X74,X72,X71,X69,X67,X75,X73] : (s(X67,happ(s(fun('type.ind_type.recspace'(X66),X67),sK10('_dst_x00x01x11_3'(s(fun(X68,fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',X67),X67)))),X70),s(fun(X66,X68),X71),s(fun('type.num.num',fun(X66,X69)),X72)),X66,X67)),s('type.ind_type.recspace'(X66),'const.ind_type.CONSTR_3'(s('type.num.num',X73),s(X66,X74),s(fun('type.num.num','type.ind_type.recspace'(X66)),X75))))) = s(X67,happ(s(fun(fun('type.num.num',X67),X67),happ(s(fun(X66,fun(fun('type.num.num',X67),X67)),'_dst_x1x0_2'(s(fun(X66,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',X67),X67))),'_dst_x0x1x1_3'(s(fun(X68,fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',X67),X67)))),X70),s(fun(X66,X68),X71),s(fun(X66,X69),happ(s(fun('type.num.num',fun(X66,X69)),X72),s('type.num.num',X73))))),s(fun('type.num.num','type.ind_type.recspace'(X66)),X75))),s(X66,X74))),s(fun('type.num.num',X67),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X66),X67),sK10('_dst_x00x01x11_3'(s(fun(X68,fun(X69,fun(fun('type.num.num','type.ind_type.recspace'(X66)),fun(fun('type.num.num',X67),X67)))),X70),s(fun(X66,X68),X71),s(fun('type.num.num',fun(X66,X69)),X72)),X66,X67)),s(fun('type.num.num','type.ind_type.recspace'(X66)),X75)))))) )),
  inference(superposition,[],[f378,f364])).
fof(f46689,plain,(
  ( ! [X61,X59,X64,X62,X60,X58,X65,X63] : (s(X59,happ(s(fun('type.ind_type.recspace'(X58),X59),sK10('_dst_x00x11_2'(s(fun(X60,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))),X61),s(fun('type.num.num',fun(X58,X60)),X62)),X58,X59)),s('type.ind_type.recspace'(X58),'const.ind_type.CONSTR_3'(s('type.num.num',X63),s(X58,X64),s(fun('type.num.num','type.ind_type.recspace'(X58)),X65))))) = s(X59,happ(s(fun(fun('type.num.num',X59),X59),happ(s(fun(X58,fun(fun('type.num.num',X59),X59)),'_dst_x1x0_2'(s(fun(X58,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))),'_dst_x0x1_2'(s(fun(X60,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))),X61),s(fun(X58,X60),happ(s(fun('type.num.num',fun(X58,X60)),X62),s('type.num.num',X63))))),s(fun('type.num.num','type.ind_type.recspace'(X58)),X65))),s(X58,X64))),s(fun('type.num.num',X59),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X58),X59),sK10('_dst_x00x11_2'(s(fun(X60,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))),X61),s(fun('type.num.num',fun(X58,X60)),X62)),X58,X59)),s(fun('type.num.num','type.ind_type.recspace'(X58)),X65)))))) )),
  inference(superposition,[],[f378,f358])).
fof(f46688,plain,(
  ( ! [X57,X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s(X49,happ(s(fun('type.ind_type.recspace'(X48),X49),sK10('_dst_x00x10x01_3'(s(fun(X50,fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X52),s(fun('type.num.num',X50),X53),s(fun(X48,X51),X54)),X48,X49)),s('type.ind_type.recspace'(X48),'const.ind_type.CONSTR_3'(s('type.num.num',X55),s(X48,X56),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57))))) = s(X49,happ(s(fun(fun('type.num.num',X49),X49),happ(s(fun(X48,fun(fun('type.num.num',X49),X49)),'_dst_x1x0_2'(s(fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),'_dst_x0x0x1_3'(s(fun(X50,fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X52),s(X50,happ(s(fun('type.num.num',X50),X53),s('type.num.num',X55))),s(fun(X48,X51),X54))),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57))),s(X48,X56))),s(fun('type.num.num',X49),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X48),X49),sK10('_dst_x00x10x01_3'(s(fun(X50,fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),X52),s(fun('type.num.num',X50),X53),s(fun(X48,X51),X54)),X48,X49)),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57)))))) )),
  inference(superposition,[],[f378,f362])).
fof(f46687,plain,(
  ( ! [X39,X47,X45,X43,X41,X38,X46,X44,X42,X40] : (s(X39,happ(s(fun('type.ind_type.recspace'(X38),X39),sK10('_dst_x000x111x011_3'(s(fun(X40,fun(X41,fun(fun('type.num.num',X39),X39))),X42),s(fun('type.num.num',fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X40))),X43),s(fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X41)),X44)),X38,X39)),s('type.ind_type.recspace'(X38),'const.ind_type.CONSTR_3'(s('type.num.num',X45),s(X38,X46),s(fun('type.num.num','type.ind_type.recspace'(X38)),X47))))) = s(X39,happ(s(fun(fun('type.num.num',X39),X39),happ(s(fun(X38,fun(fun('type.num.num',X39),X39)),'_dst_x1x0_2'(s(fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),fun(fun('type.num.num',X39),X39))),'_dst_x00x11x11_3'(s(fun(X40,fun(X41,fun(fun('type.num.num',X39),X39))),X42),s(fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X40)),happ(s(fun('type.num.num',fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X40))),X43),s('type.num.num',X45))),s(fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X41)),X44))),s(fun('type.num.num','type.ind_type.recspace'(X38)),X47))),s(X38,X46))),s(fun('type.num.num',X39),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X38),X39),sK10('_dst_x000x111x011_3'(s(fun(X40,fun(X41,fun(fun('type.num.num',X39),X39))),X42),s(fun('type.num.num',fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X40))),X43),s(fun(X38,fun(fun('type.num.num','type.ind_type.recspace'(X38)),X41)),X44)),X38,X39)),s(fun('type.num.num','type.ind_type.recspace'(X38)),X47)))))) )),
  inference(superposition,[],[f378,f367])).
fof(f46686,plain,(
  ( ! [X30,X37,X35,X33,X31,X36,X34,X32] : (s(X31,happ(s(fun('type.ind_type.recspace'(X30),X31),sK10('_dst_x000x111_2'(s(fun(X32,fun(fun('type.num.num',X31),X31)),X33),s(fun('type.num.num',fun(X30,fun(fun('type.num.num','type.ind_type.recspace'(X30)),X32))),X34)),X30,X31)),s('type.ind_type.recspace'(X30),'const.ind_type.CONSTR_3'(s('type.num.num',X35),s(X30,X36),s(fun('type.num.num','type.ind_type.recspace'(X30)),X37))))) = s(X31,happ(s(fun(fun('type.num.num',X31),X31),happ(s(fun(X30,fun(fun('type.num.num',X31),X31)),'_dst_x1x0_2'(s(fun(X30,fun(fun('type.num.num','type.ind_type.recspace'(X30)),fun(fun('type.num.num',X31),X31))),'_dst_x00x11_2'(s(fun(X32,fun(fun('type.num.num',X31),X31)),X33),s(fun(X30,fun(fun('type.num.num','type.ind_type.recspace'(X30)),X32)),happ(s(fun('type.num.num',fun(X30,fun(fun('type.num.num','type.ind_type.recspace'(X30)),X32))),X34),s('type.num.num',X35))))),s(fun('type.num.num','type.ind_type.recspace'(X30)),X37))),s(X30,X36))),s(fun('type.num.num',X31),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X30),X31),sK10('_dst_x000x111_2'(s(fun(X32,fun(fun('type.num.num',X31),X31)),X33),s(fun('type.num.num',fun(X30,fun(fun('type.num.num','type.ind_type.recspace'(X30)),X32))),X34)),X30,X31)),s(fun('type.num.num','type.ind_type.recspace'(X30)),X37)))))) )),
  inference(superposition,[],[f378,f361])).
fof(f46685,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22,X20] : (s(X21,happ(s(fun('type.ind_type.recspace'(X20),X21),sK10('_dst_x000x110x101_3'(s(fun(X22,fun(X23,fun(fun('type.num.num',X21),X21))),X24),s(fun('type.num.num',fun(X20,X22)),X25),s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X20)),X23)),X26)),X20,X21)),s('type.ind_type.recspace'(X20),'const.ind_type.CONSTR_3'(s('type.num.num',X27),s(X20,X28),s(fun('type.num.num','type.ind_type.recspace'(X20)),X29))))) = s(X21,happ(s(fun(fun('type.num.num',X21),X21),happ(s(fun(X20,fun(fun('type.num.num',X21),X21)),'_dst_x1x0_2'(s(fun(X20,fun(fun('type.num.num','type.ind_type.recspace'(X20)),fun(fun('type.num.num',X21),X21))),'_dst_x00x10x01_3'(s(fun(X22,fun(X23,fun(fun('type.num.num',X21),X21))),X24),s(fun(X20,X22),happ(s(fun('type.num.num',fun(X20,X22)),X25),s('type.num.num',X27))),s(fun(fun('type.num.num','type.ind_type.recspace'(X20)),X23),happ(s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X20)),X23)),X26),s('type.num.num',X27))))),s(fun('type.num.num','type.ind_type.recspace'(X20)),X29))),s(X20,X28))),s(fun('type.num.num',X21),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X20),X21),sK10('_dst_x000x110x101_3'(s(fun(X22,fun(X23,fun(fun('type.num.num',X21),X21))),X24),s(fun('type.num.num',fun(X20,X22)),X25),s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X20)),X23)),X26)),X20,X21)),s(fun('type.num.num','type.ind_type.recspace'(X20)),X29)))))) )),
  inference(superposition,[],[f378,f368])).
fof(f46684,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X18,X16] : (s(X11,happ(s(fun('type.ind_type.recspace'(X10),X11),sK10('_dst_x000x100x011_3'(s(fun(X12,fun(X13,fun(fun('type.num.num',X11),X11))),X14),s(fun('type.num.num',X12),X15),s(fun(X10,fun(fun('type.num.num','type.ind_type.recspace'(X10)),X13)),X16)),X10,X11)),s('type.ind_type.recspace'(X10),'const.ind_type.CONSTR_3'(s('type.num.num',X17),s(X10,X18),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19))))) = s(X11,happ(s(fun(fun('type.num.num',X11),X11),happ(s(fun(X10,fun(fun('type.num.num',X11),X11)),'_dst_x1x0_2'(s(fun(X10,fun(fun('type.num.num','type.ind_type.recspace'(X10)),fun(fun('type.num.num',X11),X11))),'_dst_x00x00x11_3'(s(fun(X12,fun(X13,fun(fun('type.num.num',X11),X11))),X14),s(X12,happ(s(fun('type.num.num',X12),X15),s('type.num.num',X17))),s(fun(X10,fun(fun('type.num.num','type.ind_type.recspace'(X10)),X13)),X16))),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19))),s(X10,X18))),s(fun('type.num.num',X11),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X10),X11),sK10('_dst_x000x100x011_3'(s(fun(X12,fun(X13,fun(fun('type.num.num',X11),X11))),X14),s(fun('type.num.num',X12),X15),s(fun(X10,fun(fun('type.num.num','type.ind_type.recspace'(X10)),X13)),X16)),X10,X11)),s(fun('type.num.num','type.ind_type.recspace'(X10)),X19)))))) )),
  inference(superposition,[],[f378,f366])).
fof(f46683,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK10('_dst_x0000x0111x1011_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X2))),X5),s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X3))),X6)),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X7),s(X0,X8),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(X0,fun(fun('type.num.num',X1),X1)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),'_dst_x000x111x011_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X2))),X5),s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X3)),happ(s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X3))),X6),s('type.num.num',X7))))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9))),s(X0,X8))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK10('_dst_x0000x0111x1011_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X2))),X5),s(fun('type.num.num',fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X3))),X6)),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X9)))))) )),
  inference(superposition,[],[f378,f369])).
fof(f46661,plain,(
  ( ! [X377,X379,X374,X380,X376,X378,X375,X381] : (s(X375,happ(s(fun('type.ind_type.recspace'(X374),X375),sK10('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375)))),X376),s(fun('type.num.num',fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375))))),X377),s('type.num.num','const.num.SUC_1'(s('type.num.num',X378)))),X374,X375)),s('type.ind_type.recspace'(X374),'const.ind_type.CONSTR_3'(s('type.num.num',X379),s(X374,X380),s(fun('type.num.num','type.ind_type.recspace'(X374)),X381))))) = s(X375,happ(s(fun(fun('type.num.num',X375),X375),happ(s(fun(X374,fun(fun('type.num.num',X375),X375)),'_dst_x1x0_2'(s(fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375))),happ(s(fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375)))),happ(s(fun('type.num.num',fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375))))),X377),s('type.num.num',X378))),s('type.num.num',X379))),s(fun('type.num.num','type.ind_type.recspace'(X374)),X381))),s(X374,X380))),s(fun('type.num.num',X375),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X374),X375),sK10('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375)))),X376),s(fun('type.num.num',fun('type.num.num',fun(X374,fun(fun('type.num.num','type.ind_type.recspace'(X374)),fun(fun('type.num.num',X375),X375))))),X377),s('type.num.num','const.num.SUC_1'(s('type.num.num',X378)))),X374,X375)),s(fun('type.num.num','type.ind_type.recspace'(X374)),X381)))))) )),
  inference(superposition,[],[f378,f304])).
fof(f46660,plain,(
  ( ! [X372,X368,X370,X367,X373,X369,X371] : (s(X368,happ(s(fun('type.ind_type.recspace'(X367),X368),sK10('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368)))),X369),s(fun('type.num.num',fun('type.num.num',fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368))))),X370),s('type.num.num','const.num.|48|_0')),X367,X368)),s('type.ind_type.recspace'(X367),'const.ind_type.CONSTR_3'(s('type.num.num',X371),s(X367,X372),s(fun('type.num.num','type.ind_type.recspace'(X367)),X373))))) = s(X368,happ(s(fun(fun('type.num.num',X368),X368),happ(s(fun(X367,fun(fun('type.num.num',X368),X368)),'_dst_x1x0_2'(s(fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368))),happ(s(fun('type.num.num',fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368)))),X369),s('type.num.num',X371))),s(fun('type.num.num','type.ind_type.recspace'(X367)),X373))),s(X367,X372))),s(fun('type.num.num',X368),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X367),X368),sK10('const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368)))),X369),s(fun('type.num.num',fun('type.num.num',fun(X367,fun(fun('type.num.num','type.ind_type.recspace'(X367)),fun(fun('type.num.num',X368),X368))))),X370),s('type.num.num','const.num.|48|_0')),X367,X368)),s(fun('type.num.num','type.ind_type.recspace'(X367)),X373)))))) )),
  inference(superposition,[],[f378,f295])).
fof(f46659,plain,(
  ( ! [X358,X364,X366,X360,X362,X357,X359,X365,X361,X363] : (s(X358,happ(s(fun('type.ind_type.recspace'(X357),X358),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X359),'const.benchmark.Twice_2'(s('type.benchmark.times'(X359),X360),s('type.benchmark.times'(X359),X361))),s(fun(X359,fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358))))),X362),s(fun('type.benchmark.times'(X359),fun('type.benchmark.times'(X359),fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358)))))),X363)),X357,X358)),s('type.ind_type.recspace'(X357),'const.ind_type.CONSTR_3'(s('type.num.num',X364),s(X357,X365),s(fun('type.num.num','type.ind_type.recspace'(X357)),X366))))) = s(X358,happ(s(fun(fun('type.num.num',X358),X358),happ(s(fun(X357,fun(fun('type.num.num',X358),X358)),'_dst_x1x0_2'(s(fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358))),happ(s(fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358)))),happ(s(fun('type.benchmark.times'(X359),fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358))))),happ(s(fun('type.benchmark.times'(X359),fun('type.benchmark.times'(X359),fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358)))))),X363),s('type.benchmark.times'(X359),X360))),s('type.benchmark.times'(X359),X361))),s('type.num.num',X364))),s(fun('type.num.num','type.ind_type.recspace'(X357)),X366))),s(X357,X365))),s(fun('type.num.num',X358),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X357),X358),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X359),'const.benchmark.Twice_2'(s('type.benchmark.times'(X359),X360),s('type.benchmark.times'(X359),X361))),s(fun(X359,fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358))))),X362),s(fun('type.benchmark.times'(X359),fun('type.benchmark.times'(X359),fun('type.num.num',fun(X357,fun(fun('type.num.num','type.ind_type.recspace'(X357)),fun(fun('type.num.num',X358),X358)))))),X363)),X357,X358)),s(fun('type.num.num','type.ind_type.recspace'(X357)),X366)))))) )),
  inference(superposition,[],[f378,f336])).
fof(f46658,plain,(
  ( ! [X350,X356,X352,X354,X349,X351,X353,X355,X348] : (s(X349,happ(s(fun('type.ind_type.recspace'(X348),X349),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X350),'const.benchmark.Once_1'(s(X350,X351))),s(fun(X350,fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349))))),X352),s(fun('type.benchmark.times'(X350),fun('type.benchmark.times'(X350),fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349)))))),X353)),X348,X349)),s('type.ind_type.recspace'(X348),'const.ind_type.CONSTR_3'(s('type.num.num',X354),s(X348,X355),s(fun('type.num.num','type.ind_type.recspace'(X348)),X356))))) = s(X349,happ(s(fun(fun('type.num.num',X349),X349),happ(s(fun(X348,fun(fun('type.num.num',X349),X349)),'_dst_x1x0_2'(s(fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349))),happ(s(fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349)))),happ(s(fun(X350,fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349))))),X352),s(X350,X351))),s('type.num.num',X354))),s(fun('type.num.num','type.ind_type.recspace'(X348)),X356))),s(X348,X355))),s(fun('type.num.num',X349),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X348),X349),sK10('const.benchmark.times_CASE_3'(s('type.benchmark.times'(X350),'const.benchmark.Once_1'(s(X350,X351))),s(fun(X350,fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349))))),X352),s(fun('type.benchmark.times'(X350),fun('type.benchmark.times'(X350),fun('type.num.num',fun(X348,fun(fun('type.num.num','type.ind_type.recspace'(X348)),fun(fun('type.num.num',X349),X349)))))),X353)),X348,X349)),s(fun('type.num.num','type.ind_type.recspace'(X348)),X356)))))) )),
  inference(superposition,[],[f378,f335])).
fof(f46657,plain,(
  ( ! [X344,X346,X341,X343,X345,X347,X340,X342] : (s(X341,happ(s(fun('type.ind_type.recspace'(X340),X341),sK10(happ(s(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),happ(s(fun(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))))),'_dst_x1x0_2'(s(fun(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),fun(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),X342))),s(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),X343))),s('type.num.num',X344)),X340,X341)),s('type.ind_type.recspace'(X340),'const.ind_type.CONSTR_3'(s('type.num.num',X345),s(X340,X346),s(fun('type.num.num','type.ind_type.recspace'(X340)),X347))))) = s(X341,happ(s(fun(fun('type.num.num',X341),X341),happ(s(fun(X340,fun(fun('type.num.num',X341),X341)),'_dst_x1x0_2'(s(fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))),happ(s(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),'const.ind_type.FCONS_3'(s(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),X343),s(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),X342),s('type.num.num',X344))),s('type.num.num',X345))),s(fun('type.num.num','type.ind_type.recspace'(X340)),X347))),s(X340,X346))),s(fun('type.num.num',X341),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X340),X341),sK10(happ(s(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),happ(s(fun(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))))),'_dst_x1x0_2'(s(fun(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),fun(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341))))),X342))),s(fun('type.num.num',fun(X340,fun(fun('type.num.num','type.ind_type.recspace'(X340)),fun(fun('type.num.num',X341),X341)))),X343))),s('type.num.num',X344)),X340,X341)),s(fun('type.num.num','type.ind_type.recspace'(X340)),X347)))))) )),
  inference(superposition,[],[f378,f377])).
fof(f46656,plain,(
  ( ! [X333,X335,X331,X337,X339,X332,X334,X330,X336,X338] : (s(X331,happ(s(fun('type.ind_type.recspace'(X330),X331),sK10(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),happ(s(fun(X332,fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))),'_dst_x1x0_2'(s(fun(X332,fun(fun('type.num.num','type.ind_type.recspace'(X332)),fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))))),happ(s(fun('type.num.num',fun(X332,fun(fun('type.num.num','type.ind_type.recspace'(X332)),fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))))),X333),s('type.num.num',X334))),s(fun('type.num.num','type.ind_type.recspace'(X332)),X335))),s(X332,X336))),s(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X332),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),sK10(X333,X332,fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))),s(fun('type.num.num','type.ind_type.recspace'(X332)),X335)))),X330,X331)),s('type.ind_type.recspace'(X330),'const.ind_type.CONSTR_3'(s('type.num.num',X337),s(X330,X338),s(fun('type.num.num','type.ind_type.recspace'(X330)),X339))))) = s(X331,happ(s(fun(fun('type.num.num',X331),X331),happ(s(fun(X330,fun(fun('type.num.num',X331),X331)),'_dst_x1x0_2'(s(fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))),happ(s(fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))),happ(s(fun('type.ind_type.recspace'(X332),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),sK10(X333,X332,fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))),s('type.ind_type.recspace'(X332),'const.ind_type.CONSTR_3'(s('type.num.num',X334),s(X332,X336),s(fun('type.num.num','type.ind_type.recspace'(X332)),X335))))),s('type.num.num',X337))),s(fun('type.num.num','type.ind_type.recspace'(X330)),X339))),s(X330,X338))),s(fun('type.num.num',X331),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X330),X331),sK10(happ(s(fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),happ(s(fun(X332,fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))),'_dst_x1x0_2'(s(fun(X332,fun(fun('type.num.num','type.ind_type.recspace'(X332)),fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))))),happ(s(fun('type.num.num',fun(X332,fun(fun('type.num.num','type.ind_type.recspace'(X332)),fun(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))))),X333),s('type.num.num',X334))),s(fun('type.num.num','type.ind_type.recspace'(X332)),X335))),s(X332,X336))),s(fun('type.num.num',fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X332),fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331))))),sK10(X333,X332,fun('type.num.num',fun(X330,fun(fun('type.num.num','type.ind_type.recspace'(X330)),fun(fun('type.num.num',X331),X331)))))),s(fun('type.num.num','type.ind_type.recspace'(X332)),X335)))),X330,X331)),s(fun('type.num.num','type.ind_type.recspace'(X330)),X339)))))) )),
  inference(superposition,[],[f378,f378])).
fof(f46655,plain,(
  ( ! [X325,X327,X323,X329,X324,X326,X322,X328] : (s(X323,happ(s(fun('type.ind_type.recspace'(X322),X323),sK10(happ(s(fun(fun(X324,fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),'_dstsel_0_x0_1'(s(X324,X325))),s(fun(X324,fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),X326)),X322,X323)),s('type.ind_type.recspace'(X322),'const.ind_type.CONSTR_3'(s('type.num.num',X327),s(X322,X328),s(fun('type.num.num','type.ind_type.recspace'(X322)),X329))))) = s(X323,happ(s(fun(fun('type.num.num',X323),X323),happ(s(fun(X322,fun(fun('type.num.num',X323),X323)),'_dst_x1x0_2'(s(fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))),happ(s(fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323)))),happ(s(fun(X324,fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),X326),s(X324,X325))),s('type.num.num',X327))),s(fun('type.num.num','type.ind_type.recspace'(X322)),X329))),s(X322,X328))),s(fun('type.num.num',X323),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X322),X323),sK10(happ(s(fun(fun(X324,fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),'_dstsel_0_x0_1'(s(X324,X325))),s(fun(X324,fun('type.num.num',fun(X322,fun(fun('type.num.num','type.ind_type.recspace'(X322)),fun(fun('type.num.num',X323),X323))))),X326)),X322,X323)),s(fun('type.num.num','type.ind_type.recspace'(X322)),X329)))))) )),
  inference(superposition,[],[f378,f333])).
fof(f46654,plain,(
  ( ! [X313,X315,X321,X310,X316,X318,X312,X314,X320,X311,X317,X319] : (s(X311,happ(s(fun('type.ind_type.recspace'(X310),X311),sK10(happ(s(fun(X312,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311))))),'_dst_x0x0x1_3'(s(fun(X313,fun(X314,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311)))))),X315),s(X313,X316),s(fun(X312,X314),X317))),s(X312,X318)),X310,X311)),s('type.ind_type.recspace'(X310),'const.ind_type.CONSTR_3'(s('type.num.num',X319),s(X310,X320),s(fun('type.num.num','type.ind_type.recspace'(X310)),X321))))) = s(X311,happ(s(fun(fun('type.num.num',X311),X311),happ(s(fun(X310,fun(fun('type.num.num',X311),X311)),'_dst_x1x0_2'(s(fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311))),happ(s(fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311)))),happ(s(fun(X314,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311))))),happ(s(fun(X313,fun(X314,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311)))))),X315),s(X313,X316))),s(X314,happ(s(fun(X312,X314),X317),s(X312,X318))))),s('type.num.num',X319))),s(fun('type.num.num','type.ind_type.recspace'(X310)),X321))),s(X310,X320))),s(fun('type.num.num',X311),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X310),X311),sK10(happ(s(fun(X312,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311))))),'_dst_x0x0x1_3'(s(fun(X313,fun(X314,fun('type.num.num',fun(X310,fun(fun('type.num.num','type.ind_type.recspace'(X310)),fun(fun('type.num.num',X311),X311)))))),X315),s(X313,X316),s(fun(X312,X314),X317))),s(X312,X318)),X310,X311)),s(fun('type.num.num','type.ind_type.recspace'(X310)),X321)))))) )),
  inference(superposition,[],[f378,f359])).
fof(f46653,plain,(
  ( ! [X300,X302,X308,X304,X306,X301,X303,X309,X305,X307] : (s(X301,happ(s(fun('type.ind_type.recspace'(X300),X301),sK10(happ(s(fun(X302,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301))))),'_dst_x1x0_2'(s(fun(X302,fun(X303,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301)))))),X304),s(X303,X305))),s(X302,X306)),X300,X301)),s('type.ind_type.recspace'(X300),'const.ind_type.CONSTR_3'(s('type.num.num',X307),s(X300,X308),s(fun('type.num.num','type.ind_type.recspace'(X300)),X309))))) = s(X301,happ(s(fun(fun('type.num.num',X301),X301),happ(s(fun(X300,fun(fun('type.num.num',X301),X301)),'_dst_x1x0_2'(s(fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301))),happ(s(fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301)))),happ(s(fun(X303,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301))))),happ(s(fun(X302,fun(X303,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301)))))),X304),s(X302,X306))),s(X303,X305))),s('type.num.num',X307))),s(fun('type.num.num','type.ind_type.recspace'(X300)),X309))),s(X300,X308))),s(fun('type.num.num',X301),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X300),X301),sK10(happ(s(fun(X302,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301))))),'_dst_x1x0_2'(s(fun(X302,fun(X303,fun('type.num.num',fun(X300,fun(fun('type.num.num','type.ind_type.recspace'(X300)),fun(fun('type.num.num',X301),X301)))))),X304),s(X303,X305))),s(X302,X306)),X300,X301)),s(fun('type.num.num','type.ind_type.recspace'(X300)),X309)))))) )),
  inference(superposition,[],[f378,f341])).
fof(f46652,plain,(
  ( ! [X292,X294,X296,X298,X293,X295,X297,X299] : (s(X293,happ(s(fun('type.ind_type.recspace'(X292),X293),sK10(happ(s(fun(X294,fun('type.num.num',fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293))))),'_dst_x0_1'(s(fun('type.num.num',fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293)))),X295))),s(X294,X296)),X292,X293)),s('type.ind_type.recspace'(X292),'const.ind_type.CONSTR_3'(s('type.num.num',X297),s(X292,X298),s(fun('type.num.num','type.ind_type.recspace'(X292)),X299))))) = s(X293,happ(s(fun(fun('type.num.num',X293),X293),happ(s(fun(X292,fun(fun('type.num.num',X293),X293)),'_dst_x1x0_2'(s(fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293))),happ(s(fun('type.num.num',fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293)))),X295),s('type.num.num',X297))),s(fun('type.num.num','type.ind_type.recspace'(X292)),X299))),s(X292,X298))),s(fun('type.num.num',X293),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X292),X293),sK10(happ(s(fun(X294,fun('type.num.num',fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293))))),'_dst_x0_1'(s(fun('type.num.num',fun(X292,fun(fun('type.num.num','type.ind_type.recspace'(X292)),fun(fun('type.num.num',X293),X293)))),X295))),s(X294,X296)),X292,X293)),s(fun('type.num.num','type.ind_type.recspace'(X292)),X299)))))) )),
  inference(superposition,[],[f378,f330])).
fof(f46651,plain,(
  ( ! [X282,X288,X290,X285,X287,X283,X289,X291,X284,X286] : (s(X283,happ(s(fun('type.ind_type.recspace'(X282),X283),sK10(happ(s(fun(X284,fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))))),'_dst_x0x1_2'(s(fun(X285,fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))))),X286),s(fun(X284,X285),X287))),s(X284,X288)),X282,X283)),s('type.ind_type.recspace'(X282),'const.ind_type.CONSTR_3'(s('type.num.num',X289),s(X282,X290),s(fun('type.num.num','type.ind_type.recspace'(X282)),X291))))) = s(X283,happ(s(fun(fun('type.num.num',X283),X283),happ(s(fun(X282,fun(fun('type.num.num',X283),X283)),'_dst_x1x0_2'(s(fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))),happ(s(fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283)))),happ(s(fun(X285,fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))))),X286),s(X285,happ(s(fun(X284,X285),X287),s(X284,X288))))),s('type.num.num',X289))),s(fun('type.num.num','type.ind_type.recspace'(X282)),X291))),s(X282,X290))),s(fun('type.num.num',X283),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X282),X283),sK10(happ(s(fun(X284,fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))))),'_dst_x0x1_2'(s(fun(X285,fun('type.num.num',fun(X282,fun(fun('type.num.num','type.ind_type.recspace'(X282)),fun(fun('type.num.num',X283),X283))))),X286),s(fun(X284,X285),X287))),s(X284,X288)),X282,X283)),s(fun('type.num.num','type.ind_type.recspace'(X282)),X291)))))) )),
  inference(superposition,[],[f378,f340])).
fof(f46650,plain,(
  ( ! [X280,X271,X277,X279,X273,X275,X281,X270,X276,X278,X272,X274] : (s(X271,happ(s(fun('type.ind_type.recspace'(X270),X271),sK10(happ(s(fun(X272,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271))))),happ(s(fun(X273,fun(X272,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271)))))),X274),s(X273,happ(s(fun(X275,X273),X276),s(X275,X277))))),s(X272,happ(s(fun(X275,X272),X278),s(X275,X277)))),X270,X271)),s('type.ind_type.recspace'(X270),'const.ind_type.CONSTR_3'(s('type.num.num',X279),s(X270,X280),s(fun('type.num.num','type.ind_type.recspace'(X270)),X281))))) = s(X271,happ(s(fun(fun('type.num.num',X271),X271),happ(s(fun(X270,fun(fun('type.num.num',X271),X271)),'_dst_x1x0_2'(s(fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271))),happ(s(fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271)))),happ(s(fun(X275,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271))))),'_dst_x0x1x1_3'(s(fun(X273,fun(X272,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271)))))),X274),s(fun(X275,X273),X276),s(fun(X275,X272),X278))),s(X275,X277))),s('type.num.num',X279))),s(fun('type.num.num','type.ind_type.recspace'(X270)),X281))),s(X270,X280))),s(fun('type.num.num',X271),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X270),X271),sK10(happ(s(fun(X272,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271))))),happ(s(fun(X273,fun(X272,fun('type.num.num',fun(X270,fun(fun('type.num.num','type.ind_type.recspace'(X270)),fun(fun('type.num.num',X271),X271)))))),X274),s(X273,happ(s(fun(X275,X273),X276),s(X275,X277))))),s(X272,happ(s(fun(X275,X272),X278),s(X275,X277)))),X270,X271)),s(fun('type.num.num','type.ind_type.recspace'(X270)),X281)))))) )),
  inference(superposition,[],[f378,f360])).
fof(f46649,plain,(
  ( ! [X261,X263,X259,X269,X265,X267,X260,X262,X258,X268,X264,X266] : (s(X259,happ(s(fun('type.ind_type.recspace'(X258),X259),sK10(happ(s(fun(X260,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259))))),happ(s(fun(X261,fun(X260,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259)))))),X262),s(X261,X263))),s(X260,happ(s(fun(X264,X260),X265),s(X264,X266)))),X258,X259)),s('type.ind_type.recspace'(X258),'const.ind_type.CONSTR_3'(s('type.num.num',X267),s(X258,X268),s(fun('type.num.num','type.ind_type.recspace'(X258)),X269))))) = s(X259,happ(s(fun(fun('type.num.num',X259),X259),happ(s(fun(X258,fun(fun('type.num.num',X259),X259)),'_dst_x1x0_2'(s(fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259))),happ(s(fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259)))),happ(s(fun(X264,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259))))),'_dst_x0x0x1_3'(s(fun(X261,fun(X260,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259)))))),X262),s(X261,X263),s(fun(X264,X260),X265))),s(X264,X266))),s('type.num.num',X267))),s(fun('type.num.num','type.ind_type.recspace'(X258)),X269))),s(X258,X268))),s(fun('type.num.num',X259),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X258),X259),sK10(happ(s(fun(X260,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259))))),happ(s(fun(X261,fun(X260,fun('type.num.num',fun(X258,fun(fun('type.num.num','type.ind_type.recspace'(X258)),fun(fun('type.num.num',X259),X259)))))),X262),s(X261,X263))),s(X260,happ(s(fun(X264,X260),X265),s(X264,X266)))),X258,X259)),s(fun('type.num.num','type.ind_type.recspace'(X258)),X269)))))) )),
  inference(superposition,[],[f378,f359])).
fof(f46648,plain,(
  ( ! [X255,X253,X251,X249,X257,X254,X252,X250,X248,X256] : (s(X249,happ(s(fun('type.ind_type.recspace'(X248),X249),sK10(happ(s(fun(X250,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249))))),happ(s(fun(X251,fun(X250,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249)))))),X252),s(X251,X253))),s(X250,X254)),X248,X249)),s('type.ind_type.recspace'(X248),'const.ind_type.CONSTR_3'(s('type.num.num',X255),s(X248,X256),s(fun('type.num.num','type.ind_type.recspace'(X248)),X257))))) = s(X249,happ(s(fun(fun('type.num.num',X249),X249),happ(s(fun(X248,fun(fun('type.num.num',X249),X249)),'_dst_x1x0_2'(s(fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249))),happ(s(fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249)))),happ(s(fun(X251,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249))))),'_dst_x1x0_2'(s(fun(X251,fun(X250,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249)))))),X252),s(X250,X254))),s(X251,X253))),s('type.num.num',X255))),s(fun('type.num.num','type.ind_type.recspace'(X248)),X257))),s(X248,X256))),s(fun('type.num.num',X249),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X248),X249),sK10(happ(s(fun(X250,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249))))),happ(s(fun(X251,fun(X250,fun('type.num.num',fun(X248,fun(fun('type.num.num','type.ind_type.recspace'(X248)),fun(fun('type.num.num',X249),X249)))))),X252),s(X251,X253))),s(X250,X254)),X248,X249)),s(fun('type.num.num','type.ind_type.recspace'(X248)),X257)))))) )),
  inference(superposition,[],[f378,f341])).
fof(f46647,plain,(
  ( ! [X243,X241,X239,X246,X244,X242,X240,X238,X247,X245] : (s(X239,happ(s(fun('type.ind_type.recspace'(X238),X239),sK10(happ(s(fun(X240,fun('type.num.num',fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239))))),X241),s(X240,happ(s(fun(X242,X240),X243),s(X242,X244)))),X238,X239)),s('type.ind_type.recspace'(X238),'const.ind_type.CONSTR_3'(s('type.num.num',X245),s(X238,X246),s(fun('type.num.num','type.ind_type.recspace'(X238)),X247))))) = s(X239,happ(s(fun(fun('type.num.num',X239),X239),happ(s(fun(X238,fun(fun('type.num.num',X239),X239)),'_dst_x1x0_2'(s(fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239))),happ(s(fun('type.num.num',fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239)))),happ(s(fun(X242,fun('type.num.num',fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239))))),'_dst_x0x1_2'(s(fun(X240,fun('type.num.num',fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239))))),X241),s(fun(X242,X240),X243))),s(X242,X244))),s('type.num.num',X245))),s(fun('type.num.num','type.ind_type.recspace'(X238)),X247))),s(X238,X246))),s(fun('type.num.num',X239),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X238),X239),sK10(happ(s(fun(X240,fun('type.num.num',fun(X238,fun(fun('type.num.num','type.ind_type.recspace'(X238)),fun(fun('type.num.num',X239),X239))))),X241),s(X240,happ(s(fun(X242,X240),X243),s(X242,X244)))),X238,X239)),s(fun('type.num.num','type.ind_type.recspace'(X238)),X247)))))) )),
  inference(superposition,[],[f378,f340])).
fof(f46646,plain,(
  ( ! [X237,X235,X233,X236,X234,X232] : (s(X233,happ(s(fun('type.ind_type.recspace'(X232),X233),sK10(happ(s(fun(fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233)))),fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233))))),'_i_0_0'),s(fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233)))),X234)),X232,X233)),s('type.ind_type.recspace'(X232),'const.ind_type.CONSTR_3'(s('type.num.num',X235),s(X232,X236),s(fun('type.num.num','type.ind_type.recspace'(X232)),X237))))) = s(X233,happ(s(fun(fun('type.num.num',X233),X233),happ(s(fun(X232,fun(fun('type.num.num',X233),X233)),'_dst_x1x0_2'(s(fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233))),happ(s(fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233)))),X234),s('type.num.num',X235))),s(fun('type.num.num','type.ind_type.recspace'(X232)),X237))),s(X232,X236))),s(fun('type.num.num',X233),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X232),X233),sK10(happ(s(fun(fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233)))),fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233))))),'_i_0_0'),s(fun('type.num.num',fun(X232,fun(fun('type.num.num','type.ind_type.recspace'(X232)),fun(fun('type.num.num',X233),X233)))),X234)),X232,X233)),s(fun('type.num.num','type.ind_type.recspace'(X232)),X237)))))) )),
  inference(superposition,[],[f378,f290])).
fof(f46645,plain,(
  ( ! [X222,X220,X231,X229,X227,X225,X223,X221,X230,X228,X226,X224] : (s(X221,happ(s(fun('type.ind_type.recspace'(X220),X221),sK10('_dst_x0x1x1_3'(s(fun(X222,fun(X223,fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221))))),X224),s(fun('type.num.num',X222),happ(s(fun(X225,fun('type.num.num',X222)),X226),s(X225,X227))),s(fun('type.num.num',X223),happ(s(fun(X225,fun('type.num.num',X223)),X228),s(X225,X227)))),X220,X221)),s('type.ind_type.recspace'(X220),'const.ind_type.CONSTR_3'(s('type.num.num',X229),s(X220,X230),s(fun('type.num.num','type.ind_type.recspace'(X220)),X231))))) = s(X221,happ(s(fun(fun('type.num.num',X221),X221),happ(s(fun(X220,fun(fun('type.num.num',X221),X221)),'_dst_x1x0_2'(s(fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221))),happ(s(fun('type.num.num',fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221)))),happ(s(fun(X225,fun('type.num.num',fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221))))),'_dst_x00x11x11_3'(s(fun(X222,fun(X223,fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221))))),X224),s(fun(X225,fun('type.num.num',X222)),X226),s(fun(X225,fun('type.num.num',X223)),X228))),s(X225,X227))),s('type.num.num',X229))),s(fun('type.num.num','type.ind_type.recspace'(X220)),X231))),s(X220,X230))),s(fun('type.num.num',X221),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X220),X221),sK10('_dst_x0x1x1_3'(s(fun(X222,fun(X223,fun(X220,fun(fun('type.num.num','type.ind_type.recspace'(X220)),fun(fun('type.num.num',X221),X221))))),X224),s(fun('type.num.num',X222),happ(s(fun(X225,fun('type.num.num',X222)),X226),s(X225,X227))),s(fun('type.num.num',X223),happ(s(fun(X225,fun('type.num.num',X223)),X228),s(X225,X227)))),X220,X221)),s(fun('type.num.num','type.ind_type.recspace'(X220)),X231)))))) )),
  inference(superposition,[],[f378,f365])).
fof(f46644,plain,(
  ( ! [X212,X210,X208,X216,X218,X215,X213,X211,X209,X217,X219,X214] : (s(X209,happ(s(fun('type.ind_type.recspace'(X208),X209),sK10('_dst_x0x1x1_3'(s(fun(X210,fun(X211,fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209))))),X212),s(fun('type.num.num',X210),X213),s(fun('type.num.num',X211),happ(s(fun(X214,fun('type.num.num',X211)),X215),s(X214,X216)))),X208,X209)),s('type.ind_type.recspace'(X208),'const.ind_type.CONSTR_3'(s('type.num.num',X217),s(X208,X218),s(fun('type.num.num','type.ind_type.recspace'(X208)),X219))))) = s(X209,happ(s(fun(fun('type.num.num',X209),X209),happ(s(fun(X208,fun(fun('type.num.num',X209),X209)),'_dst_x1x0_2'(s(fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209))),happ(s(fun('type.num.num',fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209)))),happ(s(fun(X214,fun('type.num.num',fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209))))),'_dst_x00x01x11_3'(s(fun(X210,fun(X211,fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209))))),X212),s(fun('type.num.num',X210),X213),s(fun(X214,fun('type.num.num',X211)),X215))),s(X214,X216))),s('type.num.num',X217))),s(fun('type.num.num','type.ind_type.recspace'(X208)),X219))),s(X208,X218))),s(fun('type.num.num',X209),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X208),X209),sK10('_dst_x0x1x1_3'(s(fun(X210,fun(X211,fun(X208,fun(fun('type.num.num','type.ind_type.recspace'(X208)),fun(fun('type.num.num',X209),X209))))),X212),s(fun('type.num.num',X210),X213),s(fun('type.num.num',X211),happ(s(fun(X214,fun('type.num.num',X211)),X215),s(X214,X216)))),X208,X209)),s(fun('type.num.num','type.ind_type.recspace'(X208)),X219)))))) )),
  inference(superposition,[],[f378,f364])).
fof(f46643,plain,(
  ( ! [X198,X196,X206,X204,X202,X200,X199,X197,X207,X205,X203,X201] : (s(X197,happ(s(fun('type.ind_type.recspace'(X196),X197),sK10('_dst_x0x0x1_3'(s(fun(X198,fun(X199,fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197))))),X200),s(X198,X201),s(fun('type.num.num',X199),happ(s(fun(X202,fun('type.num.num',X199)),X203),s(X202,X204)))),X196,X197)),s('type.ind_type.recspace'(X196),'const.ind_type.CONSTR_3'(s('type.num.num',X205),s(X196,X206),s(fun('type.num.num','type.ind_type.recspace'(X196)),X207))))) = s(X197,happ(s(fun(fun('type.num.num',X197),X197),happ(s(fun(X196,fun(fun('type.num.num',X197),X197)),'_dst_x1x0_2'(s(fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197))),happ(s(fun('type.num.num',fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197)))),happ(s(fun(X202,fun('type.num.num',fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197))))),'_dst_x00x00x11_3'(s(fun(X198,fun(X199,fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197))))),X200),s(X198,X201),s(fun(X202,fun('type.num.num',X199)),X203))),s(X202,X204))),s('type.num.num',X205))),s(fun('type.num.num','type.ind_type.recspace'(X196)),X207))),s(X196,X206))),s(fun('type.num.num',X197),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X196),X197),sK10('_dst_x0x0x1_3'(s(fun(X198,fun(X199,fun(X196,fun(fun('type.num.num','type.ind_type.recspace'(X196)),fun(fun('type.num.num',X197),X197))))),X200),s(X198,X201),s(fun('type.num.num',X199),happ(s(fun(X202,fun('type.num.num',X199)),X203),s(X202,X204)))),X196,X197)),s(fun('type.num.num','type.ind_type.recspace'(X196)),X207)))))) )),
  inference(superposition,[],[f378,f363])).
fof(f46642,plain,(
  ( ! [X191,X189,X187,X185,X194,X192,X190,X188,X186,X184,X193,X195] : (s(X185,happ(s(fun('type.ind_type.recspace'(X184),X185),sK10('_dst_x0x0x1_3'(s(fun(X186,fun(X187,fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))))),X188),s(X186,happ(s(fun(X189,X186),X190),s(X189,X191))),s(fun('type.num.num',X187),X192)),X184,X185)),s('type.ind_type.recspace'(X184),'const.ind_type.CONSTR_3'(s('type.num.num',X193),s(X184,X194),s(fun('type.num.num','type.ind_type.recspace'(X184)),X195))))) = s(X185,happ(s(fun(fun('type.num.num',X185),X185),happ(s(fun(X184,fun(fun('type.num.num',X185),X185)),'_dst_x1x0_2'(s(fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))),happ(s(fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185)))),happ(s(fun(X189,fun('type.num.num',fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))))),'_dst_x00x10x01_3'(s(fun(X186,fun(X187,fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))))),X188),s(fun(X189,X186),X190),s(fun('type.num.num',X187),X192))),s(X189,X191))),s('type.num.num',X193))),s(fun('type.num.num','type.ind_type.recspace'(X184)),X195))),s(X184,X194))),s(fun('type.num.num',X185),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X184),X185),sK10('_dst_x0x0x1_3'(s(fun(X186,fun(X187,fun(X184,fun(fun('type.num.num','type.ind_type.recspace'(X184)),fun(fun('type.num.num',X185),X185))))),X188),s(X186,happ(s(fun(X189,X186),X190),s(X189,X191))),s(fun('type.num.num',X187),X192)),X184,X185)),s(fun('type.num.num','type.ind_type.recspace'(X184)),X195)))))) )),
  inference(superposition,[],[f378,f362])).
fof(f46641,plain,(
  ( ! [X177,X175,X182,X180,X178,X176,X174,X183,X181,X179] : (s(X175,happ(s(fun('type.ind_type.recspace'(X174),X175),sK10('_dst_x0x1_2'(s(fun(X176,fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175)))),X177),s(fun('type.num.num',X176),happ(s(fun(X178,fun('type.num.num',X176)),X179),s(X178,X180)))),X174,X175)),s('type.ind_type.recspace'(X174),'const.ind_type.CONSTR_3'(s('type.num.num',X181),s(X174,X182),s(fun('type.num.num','type.ind_type.recspace'(X174)),X183))))) = s(X175,happ(s(fun(fun('type.num.num',X175),X175),happ(s(fun(X174,fun(fun('type.num.num',X175),X175)),'_dst_x1x0_2'(s(fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175))),happ(s(fun('type.num.num',fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175)))),happ(s(fun(X178,fun('type.num.num',fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175))))),'_dst_x00x11_2'(s(fun(X176,fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175)))),X177),s(fun(X178,fun('type.num.num',X176)),X179))),s(X178,X180))),s('type.num.num',X181))),s(fun('type.num.num','type.ind_type.recspace'(X174)),X183))),s(X174,X182))),s(fun('type.num.num',X175),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X174),X175),sK10('_dst_x0x1_2'(s(fun(X176,fun(X174,fun(fun('type.num.num','type.ind_type.recspace'(X174)),fun(fun('type.num.num',X175),X175)))),X177),s(fun('type.num.num',X176),happ(s(fun(X178,fun('type.num.num',X176)),X179),s(X178,X180)))),X174,X175)),s(fun('type.num.num','type.ind_type.recspace'(X174)),X183)))))) )),
  inference(superposition,[],[f378,f358])).
fof(f46640,plain,(
  ( ! [X167,X165,X163,X173,X171,X169,X166,X164,X162,X172,X170,X168] : (s(X163,happ(s(fun('type.ind_type.recspace'(X162),X163),sK10(happ(s(fun(X164,fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),'_dst_x00x00x11_3'(s(fun(X165,fun(X166,fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),X167),s(X165,X168),s(fun(X164,fun('type.num.num',X166)),X169))),s(X164,X170)),X162,X163)),s('type.ind_type.recspace'(X162),'const.ind_type.CONSTR_3'(s('type.num.num',X171),s(X162,X172),s(fun('type.num.num','type.ind_type.recspace'(X162)),X173))))) = s(X163,happ(s(fun(fun('type.num.num',X163),X163),happ(s(fun(X162,fun(fun('type.num.num',X163),X163)),'_dst_x1x0_2'(s(fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))),happ(s(fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163)))),'_dst_x0x0x1_3'(s(fun(X165,fun(X166,fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),X167),s(X165,X168),s(fun('type.num.num',X166),happ(s(fun(X164,fun('type.num.num',X166)),X169),s(X164,X170))))),s('type.num.num',X171))),s(fun('type.num.num','type.ind_type.recspace'(X162)),X173))),s(X162,X172))),s(fun('type.num.num',X163),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X162),X163),sK10(happ(s(fun(X164,fun('type.num.num',fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),'_dst_x00x00x11_3'(s(fun(X165,fun(X166,fun(X162,fun(fun('type.num.num','type.ind_type.recspace'(X162)),fun(fun('type.num.num',X163),X163))))),X167),s(X165,X168),s(fun(X164,fun('type.num.num',X166)),X169))),s(X164,X170)),X162,X163)),s(fun('type.num.num','type.ind_type.recspace'(X162)),X173)))))) )),
  inference(superposition,[],[f378,f363])).
fof(f46639,plain,(
  ( ! [X158,X156,X154,X152,X161,X151,X159,X157,X155,X153,X160,X150] : (s(X151,happ(s(fun('type.ind_type.recspace'(X150),X151),sK10(happ(s(fun(X152,fun('type.num.num',fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))))),'_dst_x00x11x11_3'(s(fun(X153,fun(X154,fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))))),X155),s(fun(X152,fun('type.num.num',X153)),X156),s(fun(X152,fun('type.num.num',X154)),X157))),s(X152,X158)),X150,X151)),s('type.ind_type.recspace'(X150),'const.ind_type.CONSTR_3'(s('type.num.num',X159),s(X150,X160),s(fun('type.num.num','type.ind_type.recspace'(X150)),X161))))) = s(X151,happ(s(fun(fun('type.num.num',X151),X151),happ(s(fun(X150,fun(fun('type.num.num',X151),X151)),'_dst_x1x0_2'(s(fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))),happ(s(fun('type.num.num',fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151)))),'_dst_x0x1x1_3'(s(fun(X153,fun(X154,fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))))),X155),s(fun('type.num.num',X153),happ(s(fun(X152,fun('type.num.num',X153)),X156),s(X152,X158))),s(fun('type.num.num',X154),happ(s(fun(X152,fun('type.num.num',X154)),X157),s(X152,X158))))),s('type.num.num',X159))),s(fun('type.num.num','type.ind_type.recspace'(X150)),X161))),s(X150,X160))),s(fun('type.num.num',X151),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X150),X151),sK10(happ(s(fun(X152,fun('type.num.num',fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))))),'_dst_x00x11x11_3'(s(fun(X153,fun(X154,fun(X150,fun(fun('type.num.num','type.ind_type.recspace'(X150)),fun(fun('type.num.num',X151),X151))))),X155),s(fun(X152,fun('type.num.num',X153)),X156),s(fun(X152,fun('type.num.num',X154)),X157))),s(X152,X158)),X150,X151)),s(fun('type.num.num','type.ind_type.recspace'(X150)),X161)))))) )),
  inference(superposition,[],[f378,f365])).
fof(f46638,plain,(
  ( ! [X146,X144,X142,X140,X138,X149,X147,X145,X143,X141,X139,X148] : (s(X139,happ(s(fun('type.ind_type.recspace'(X138),X139),sK10(happ(s(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),'_dst_x00x01x11_3'(s(fun(X141,fun(X142,fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X143),s(fun('type.num.num',X141),X144),s(fun(X140,fun('type.num.num',X142)),X145))),s(X140,X146)),X138,X139)),s('type.ind_type.recspace'(X138),'const.ind_type.CONSTR_3'(s('type.num.num',X147),s(X138,X148),s(fun('type.num.num','type.ind_type.recspace'(X138)),X149))))) = s(X139,happ(s(fun(fun('type.num.num',X139),X139),happ(s(fun(X138,fun(fun('type.num.num',X139),X139)),'_dst_x1x0_2'(s(fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))),happ(s(fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139)))),'_dst_x0x1x1_3'(s(fun(X141,fun(X142,fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X143),s(fun('type.num.num',X141),X144),s(fun('type.num.num',X142),happ(s(fun(X140,fun('type.num.num',X142)),X145),s(X140,X146))))),s('type.num.num',X147))),s(fun('type.num.num','type.ind_type.recspace'(X138)),X149))),s(X138,X148))),s(fun('type.num.num',X139),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X138),X139),sK10(happ(s(fun(X140,fun('type.num.num',fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),'_dst_x00x01x11_3'(s(fun(X141,fun(X142,fun(X138,fun(fun('type.num.num','type.ind_type.recspace'(X138)),fun(fun('type.num.num',X139),X139))))),X143),s(fun('type.num.num',X141),X144),s(fun(X140,fun('type.num.num',X142)),X145))),s(X140,X146)),X138,X139)),s(fun('type.num.num','type.ind_type.recspace'(X138)),X149)))))) )),
  inference(superposition,[],[f378,f364])).
fof(f46637,plain,(
  ( ! [X134,X132,X130,X128,X136,X135,X133,X131,X129,X137] : (s(X129,happ(s(fun('type.ind_type.recspace'(X128),X129),sK10(happ(s(fun(X130,fun('type.num.num',fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129))))),'_dst_x00x11_2'(s(fun(X131,fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129)))),X132),s(fun(X130,fun('type.num.num',X131)),X133))),s(X130,X134)),X128,X129)),s('type.ind_type.recspace'(X128),'const.ind_type.CONSTR_3'(s('type.num.num',X135),s(X128,X136),s(fun('type.num.num','type.ind_type.recspace'(X128)),X137))))) = s(X129,happ(s(fun(fun('type.num.num',X129),X129),happ(s(fun(X128,fun(fun('type.num.num',X129),X129)),'_dst_x1x0_2'(s(fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129))),happ(s(fun('type.num.num',fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129)))),'_dst_x0x1_2'(s(fun(X131,fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129)))),X132),s(fun('type.num.num',X131),happ(s(fun(X130,fun('type.num.num',X131)),X133),s(X130,X134))))),s('type.num.num',X135))),s(fun('type.num.num','type.ind_type.recspace'(X128)),X137))),s(X128,X136))),s(fun('type.num.num',X129),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X128),X129),sK10(happ(s(fun(X130,fun('type.num.num',fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129))))),'_dst_x00x11_2'(s(fun(X131,fun(X128,fun(fun('type.num.num','type.ind_type.recspace'(X128)),fun(fun('type.num.num',X129),X129)))),X132),s(fun(X130,fun('type.num.num',X131)),X133))),s(X130,X134)),X128,X129)),s(fun('type.num.num','type.ind_type.recspace'(X128)),X137)))))) )),
  inference(superposition,[],[f378,f358])).
fof(f46636,plain,(
  ( ! [X127,X125,X123,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (s(X117,happ(s(fun('type.ind_type.recspace'(X116),X117),sK10(happ(s(fun(X118,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),'_dst_x00x10x01_3'(s(fun(X119,fun(X120,fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),X121),s(fun(X118,X119),X122),s(fun('type.num.num',X120),X123))),s(X118,X124)),X116,X117)),s('type.ind_type.recspace'(X116),'const.ind_type.CONSTR_3'(s('type.num.num',X125),s(X116,X126),s(fun('type.num.num','type.ind_type.recspace'(X116)),X127))))) = s(X117,happ(s(fun(fun('type.num.num',X117),X117),happ(s(fun(X116,fun(fun('type.num.num',X117),X117)),'_dst_x1x0_2'(s(fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))),happ(s(fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117)))),'_dst_x0x0x1_3'(s(fun(X119,fun(X120,fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),X121),s(X119,happ(s(fun(X118,X119),X122),s(X118,X124))),s(fun('type.num.num',X120),X123))),s('type.num.num',X125))),s(fun('type.num.num','type.ind_type.recspace'(X116)),X127))),s(X116,X126))),s(fun('type.num.num',X117),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X116),X117),sK10(happ(s(fun(X118,fun('type.num.num',fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),'_dst_x00x10x01_3'(s(fun(X119,fun(X120,fun(X116,fun(fun('type.num.num','type.ind_type.recspace'(X116)),fun(fun('type.num.num',X117),X117))))),X121),s(fun(X118,X119),X122),s(fun('type.num.num',X120),X123))),s(X118,X124)),X116,X117)),s(fun('type.num.num','type.ind_type.recspace'(X116)),X127)))))) )),
  inference(superposition,[],[f378,f362])).
fof(f46635,plain,(
  ( ! [X111,X109,X107,X105,X114,X112,X110,X108,X106,X104,X115,X113] : (s(X105,happ(s(fun('type.ind_type.recspace'(X104),X105),sK10('_dst_x00x00x11_3'(s(fun(X106,fun(X107,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105)))),X108),s(X106,happ(s(fun(X109,X106),X110),s(X109,X111))),s(fun('type.num.num',fun(X104,X107)),X112)),X104,X105)),s('type.ind_type.recspace'(X104),'const.ind_type.CONSTR_3'(s('type.num.num',X113),s(X104,X114),s(fun('type.num.num','type.ind_type.recspace'(X104)),X115))))) = s(X105,happ(s(fun(fun('type.num.num',X105),X105),happ(s(fun(X104,fun(fun('type.num.num',X105),X105)),'_dst_x1x0_2'(s(fun(X104,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105))),happ(s(fun('type.num.num',fun(X104,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105)))),happ(s(fun(X109,fun('type.num.num',fun(X104,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105))))),'_dst_x000x100x011_3'(s(fun(X106,fun(X107,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105)))),X108),s(fun(X109,X106),X110),s(fun('type.num.num',fun(X104,X107)),X112))),s(X109,X111))),s('type.num.num',X113))),s(fun('type.num.num','type.ind_type.recspace'(X104)),X115))),s(X104,X114))),s(fun('type.num.num',X105),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X104),X105),sK10('_dst_x00x00x11_3'(s(fun(X106,fun(X107,fun(fun('type.num.num','type.ind_type.recspace'(X104)),fun(fun('type.num.num',X105),X105)))),X108),s(X106,happ(s(fun(X109,X106),X110),s(X109,X111))),s(fun('type.num.num',fun(X104,X107)),X112)),X104,X105)),s(fun('type.num.num','type.ind_type.recspace'(X104)),X115)))))) )),
  inference(superposition,[],[f378,f366])).
fof(f46634,plain,(
  ( ! [X94,X92,X103,X101,X99,X97,X95,X93,X102,X100,X98,X96] : (s(X93,happ(s(fun('type.ind_type.recspace'(X92),X93),sK10('_dst_x00x11x11_3'(s(fun(X94,fun(X95,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93)))),X96),s(fun('type.num.num',fun(X92,X94)),happ(s(fun(X97,fun('type.num.num',fun(X92,X94))),X98),s(X97,X99))),s(fun('type.num.num',fun(X92,X95)),X100)),X92,X93)),s('type.ind_type.recspace'(X92),'const.ind_type.CONSTR_3'(s('type.num.num',X101),s(X92,X102),s(fun('type.num.num','type.ind_type.recspace'(X92)),X103))))) = s(X93,happ(s(fun(fun('type.num.num',X93),X93),happ(s(fun(X92,fun(fun('type.num.num',X93),X93)),'_dst_x1x0_2'(s(fun(X92,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93))),happ(s(fun('type.num.num',fun(X92,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93)))),happ(s(fun(X97,fun('type.num.num',fun(X92,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93))))),'_dst_x000x111x011_3'(s(fun(X94,fun(X95,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93)))),X96),s(fun(X97,fun('type.num.num',fun(X92,X94))),X98),s(fun('type.num.num',fun(X92,X95)),X100))),s(X97,X99))),s('type.num.num',X101))),s(fun('type.num.num','type.ind_type.recspace'(X92)),X103))),s(X92,X102))),s(fun('type.num.num',X93),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X92),X93),sK10('_dst_x00x11x11_3'(s(fun(X94,fun(X95,fun(fun('type.num.num','type.ind_type.recspace'(X92)),fun(fun('type.num.num',X93),X93)))),X96),s(fun('type.num.num',fun(X92,X94)),happ(s(fun(X97,fun('type.num.num',fun(X92,X94))),X98),s(X97,X99))),s(fun('type.num.num',fun(X92,X95)),X100)),X92,X93)),s(fun('type.num.num','type.ind_type.recspace'(X92)),X103)))))) )),
  inference(superposition,[],[f378,f367])).
fof(f46633,plain,(
  ( ! [X90,X88,X87,X85,X83,X91,X89,X86,X84,X82] : (s(X83,happ(s(fun('type.ind_type.recspace'(X82),X83),sK10('_dst_x00x11_2'(s(fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))),X85),s(fun('type.num.num',fun(X82,X84)),happ(s(fun(X86,fun('type.num.num',fun(X82,X84))),X87),s(X86,X88)))),X82,X83)),s('type.ind_type.recspace'(X82),'const.ind_type.CONSTR_3'(s('type.num.num',X89),s(X82,X90),s(fun('type.num.num','type.ind_type.recspace'(X82)),X91))))) = s(X83,happ(s(fun(fun('type.num.num',X83),X83),happ(s(fun(X82,fun(fun('type.num.num',X83),X83)),'_dst_x1x0_2'(s(fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))),happ(s(fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83)))),happ(s(fun(X86,fun('type.num.num',fun(X82,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))))),'_dst_x000x111_2'(s(fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))),X85),s(fun(X86,fun('type.num.num',fun(X82,X84))),X87))),s(X86,X88))),s('type.num.num',X89))),s(fun('type.num.num','type.ind_type.recspace'(X82)),X91))),s(X82,X90))),s(fun('type.num.num',X83),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X82),X83),sK10('_dst_x00x11_2'(s(fun(X84,fun(fun('type.num.num','type.ind_type.recspace'(X82)),fun(fun('type.num.num',X83),X83))),X85),s(fun('type.num.num',fun(X82,X84)),happ(s(fun(X86,fun('type.num.num',fun(X82,X84))),X87),s(X86,X88)))),X82,X83)),s(fun('type.num.num','type.ind_type.recspace'(X82)),X91)))))) )),
  inference(superposition,[],[f378,f361])).
fof(f46632,plain,(
  ( ! [X80,X70,X78,X76,X74,X72,X81,X71,X79,X77,X75,X73] : (s(X71,happ(s(fun('type.ind_type.recspace'(X70),X71),sK10('_dst_x00x10x01_3'(s(fun(X72,fun(X73,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71)))),X74),s(fun('type.num.num',X72),happ(s(fun(X75,fun('type.num.num',X72)),X76),s(X75,X77))),s(fun(X70,X73),happ(s(fun(X75,fun(X70,X73)),X78),s(X75,X77)))),X70,X71)),s('type.ind_type.recspace'(X70),'const.ind_type.CONSTR_3'(s('type.num.num',X79),s(X70,X80),s(fun('type.num.num','type.ind_type.recspace'(X70)),X81))))) = s(X71,happ(s(fun(fun('type.num.num',X71),X71),happ(s(fun(X70,fun(fun('type.num.num',X71),X71)),'_dst_x1x0_2'(s(fun(X70,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71))),happ(s(fun('type.num.num',fun(X70,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71)))),happ(s(fun(X75,fun('type.num.num',fun(X70,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71))))),'_dst_x000x110x101_3'(s(fun(X72,fun(X73,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71)))),X74),s(fun(X75,fun('type.num.num',X72)),X76),s(fun(X75,fun(X70,X73)),X78))),s(X75,X77))),s('type.num.num',X79))),s(fun('type.num.num','type.ind_type.recspace'(X70)),X81))),s(X70,X80))),s(fun('type.num.num',X71),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X70),X71),sK10('_dst_x00x10x01_3'(s(fun(X72,fun(X73,fun(fun('type.num.num','type.ind_type.recspace'(X70)),fun(fun('type.num.num',X71),X71)))),X74),s(fun('type.num.num',X72),happ(s(fun(X75,fun('type.num.num',X72)),X76),s(X75,X77))),s(fun(X70,X73),happ(s(fun(X75,fun(X70,X73)),X78),s(X75,X77)))),X70,X71)),s(fun('type.num.num','type.ind_type.recspace'(X70)),X81)))))) )),
  inference(superposition,[],[f378,f368])).
fof(f46631,plain,(
  ( ! [X61,X59,X68,X66,X64,X62,X60,X58,X69,X67,X65,X63] : (s(X59,happ(s(fun('type.ind_type.recspace'(X58),X59),sK10(happ(s(fun(X60,fun('type.num.num',fun(X58,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))))),'_dst_x000x111x011_3'(s(fun(X61,fun(X62,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59)))),X63),s(fun(X60,fun('type.num.num',fun(X58,X61))),X64),s(fun('type.num.num',fun(X58,X62)),X65))),s(X60,X66)),X58,X59)),s('type.ind_type.recspace'(X58),'const.ind_type.CONSTR_3'(s('type.num.num',X67),s(X58,X68),s(fun('type.num.num','type.ind_type.recspace'(X58)),X69))))) = s(X59,happ(s(fun(fun('type.num.num',X59),X59),happ(s(fun(X58,fun(fun('type.num.num',X59),X59)),'_dst_x1x0_2'(s(fun(X58,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))),happ(s(fun('type.num.num',fun(X58,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59)))),'_dst_x00x11x11_3'(s(fun(X61,fun(X62,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59)))),X63),s(fun('type.num.num',fun(X58,X61)),happ(s(fun(X60,fun('type.num.num',fun(X58,X61))),X64),s(X60,X66))),s(fun('type.num.num',fun(X58,X62)),X65))),s('type.num.num',X67))),s(fun('type.num.num','type.ind_type.recspace'(X58)),X69))),s(X58,X68))),s(fun('type.num.num',X59),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X58),X59),sK10(happ(s(fun(X60,fun('type.num.num',fun(X58,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59))))),'_dst_x000x111x011_3'(s(fun(X61,fun(X62,fun(fun('type.num.num','type.ind_type.recspace'(X58)),fun(fun('type.num.num',X59),X59)))),X63),s(fun(X60,fun('type.num.num',fun(X58,X61))),X64),s(fun('type.num.num',fun(X58,X62)),X65))),s(X60,X66)),X58,X59)),s(fun('type.num.num','type.ind_type.recspace'(X58)),X69)))))) )),
  inference(superposition,[],[f378,f367])).
fof(f46630,plain,(
  ( ! [X57,X54,X52,X50,X48,X56,X55,X53,X51,X49] : (s(X49,happ(s(fun('type.ind_type.recspace'(X48),X49),sK10(happ(s(fun(X50,fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))))),'_dst_x000x111_2'(s(fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),X52),s(fun(X50,fun('type.num.num',fun(X48,X51))),X53))),s(X50,X54)),X48,X49)),s('type.ind_type.recspace'(X48),'const.ind_type.CONSTR_3'(s('type.num.num',X55),s(X48,X56),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57))))) = s(X49,happ(s(fun(fun('type.num.num',X49),X49),happ(s(fun(X48,fun(fun('type.num.num',X49),X49)),'_dst_x1x0_2'(s(fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),happ(s(fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49)))),'_dst_x00x11_2'(s(fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),X52),s(fun('type.num.num',fun(X48,X51)),happ(s(fun(X50,fun('type.num.num',fun(X48,X51))),X53),s(X50,X54))))),s('type.num.num',X55))),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57))),s(X48,X56))),s(fun('type.num.num',X49),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X48),X49),sK10(happ(s(fun(X50,fun('type.num.num',fun(X48,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))))),'_dst_x000x111_2'(s(fun(X51,fun(fun('type.num.num','type.ind_type.recspace'(X48)),fun(fun('type.num.num',X49),X49))),X52),s(fun(X50,fun('type.num.num',fun(X48,X51))),X53))),s(X50,X54)),X48,X49)),s(fun('type.num.num','type.ind_type.recspace'(X48)),X57)))))) )),
  inference(superposition,[],[f378,f361])).
fof(f46629,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X38,X36,X46,X44,X42,X40] : (s(X37,happ(s(fun('type.ind_type.recspace'(X36),X37),sK10(happ(s(fun(X38,fun('type.num.num',fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),'_dst_x000x110x101_3'(s(fun(X39,fun(X40,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37)))),X41),s(fun(X38,fun('type.num.num',X39)),X42),s(fun(X38,fun(X36,X40)),X43))),s(X38,X44)),X36,X37)),s('type.ind_type.recspace'(X36),'const.ind_type.CONSTR_3'(s('type.num.num',X45),s(X36,X46),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47))))) = s(X37,happ(s(fun(fun('type.num.num',X37),X37),happ(s(fun(X36,fun(fun('type.num.num',X37),X37)),'_dst_x1x0_2'(s(fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))),happ(s(fun('type.num.num',fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37)))),'_dst_x00x10x01_3'(s(fun(X39,fun(X40,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37)))),X41),s(fun('type.num.num',X39),happ(s(fun(X38,fun('type.num.num',X39)),X42),s(X38,X44))),s(fun(X36,X40),happ(s(fun(X38,fun(X36,X40)),X43),s(X38,X44))))),s('type.num.num',X45))),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47))),s(X36,X46))),s(fun('type.num.num',X37),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X36),X37),sK10(happ(s(fun(X38,fun('type.num.num',fun(X36,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37))))),'_dst_x000x110x101_3'(s(fun(X39,fun(X40,fun(fun('type.num.num','type.ind_type.recspace'(X36)),fun(fun('type.num.num',X37),X37)))),X41),s(fun(X38,fun('type.num.num',X39)),X42),s(fun(X38,fun(X36,X40)),X43))),s(X38,X44)),X36,X37)),s(fun('type.num.num','type.ind_type.recspace'(X36)),X47)))))) )),
  inference(superposition,[],[f378,f368])).
fof(f46628,plain,(
  ( ! [X30,X28,X26,X24,X35,X33,X31,X29,X27,X25,X34,X32] : (s(X25,happ(s(fun('type.ind_type.recspace'(X24),X25),sK10(happ(s(fun(X26,fun('type.num.num',fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),'_dst_x000x100x011_3'(s(fun(X27,fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25)))),X29),s(fun(X26,X27),X30),s(fun('type.num.num',fun(X24,X28)),X31))),s(X26,X32)),X24,X25)),s('type.ind_type.recspace'(X24),'const.ind_type.CONSTR_3'(s('type.num.num',X33),s(X24,X34),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35))))) = s(X25,happ(s(fun(fun('type.num.num',X25),X25),happ(s(fun(X24,fun(fun('type.num.num',X25),X25)),'_dst_x1x0_2'(s(fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))),happ(s(fun('type.num.num',fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25)))),'_dst_x00x00x11_3'(s(fun(X27,fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25)))),X29),s(X27,happ(s(fun(X26,X27),X30),s(X26,X32))),s(fun('type.num.num',fun(X24,X28)),X31))),s('type.num.num',X33))),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35))),s(X24,X34))),s(fun('type.num.num',X25),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X24),X25),sK10(happ(s(fun(X26,fun('type.num.num',fun(X24,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25))))),'_dst_x000x100x011_3'(s(fun(X27,fun(X28,fun(fun('type.num.num','type.ind_type.recspace'(X24)),fun(fun('type.num.num',X25),X25)))),X29),s(fun(X26,X27),X30),s(fun('type.num.num',fun(X24,X28)),X31))),s(X26,X32)),X24,X25)),s(fun('type.num.num','type.ind_type.recspace'(X24)),X35)))))) )),
  inference(superposition,[],[f378,f366])).
fof(f46627,plain,(
  ( ! [X14,X12,X23,X21,X19,X17,X15,X13,X22,X20,X18,X16] : (s(X13,happ(s(fun('type.ind_type.recspace'(X12),X13),sK10(happ(s(fun(X14,fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),'_dst_x0000x0111x1011_3'(s(fun(X15,fun(X16,fun(fun('type.num.num',X13),X13))),X17),s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X15))),X18),s(fun(X14,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X16))),X19))),s(X14,X20)),X12,X13)),s('type.ind_type.recspace'(X12),'const.ind_type.CONSTR_3'(s('type.num.num',X21),s(X12,X22),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23))))) = s(X13,happ(s(fun(fun('type.num.num',X13),X13),happ(s(fun(X12,fun(fun('type.num.num',X13),X13)),'_dst_x1x0_2'(s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))),happ(s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13)))),'_dst_x000x111x011_3'(s(fun(X15,fun(X16,fun(fun('type.num.num',X13),X13))),X17),s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X15))),X18),s(fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X16)),happ(s(fun(X14,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X16))),X19),s(X14,X20))))),s('type.num.num',X21))),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23))),s(X12,X22))),s(fun('type.num.num',X13),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X12),X13),sK10(happ(s(fun(X14,fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),fun(fun('type.num.num',X13),X13))))),'_dst_x0000x0111x1011_3'(s(fun(X15,fun(X16,fun(fun('type.num.num',X13),X13))),X17),s(fun('type.num.num',fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X15))),X18),s(fun(X14,fun(X12,fun(fun('type.num.num','type.ind_type.recspace'(X12)),X16))),X19))),s(X14,X20)),X12,X13)),s(fun('type.num.num','type.ind_type.recspace'(X12)),X23)))))) )),
  inference(superposition,[],[f378,f369])).
fof(f46626,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(X1,happ(s(fun('type.ind_type.recspace'(X0),X1),sK10('_dst_x000x111x011_3'(s(fun(X2,fun(X3,fun(fun('type.num.num',X1),X1))),X4),s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X2))),X5),s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X3)),happ(s(fun(X6,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),X7),s(X6,X8)))),X0,X1)),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X9),s(X0,X10),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11))))) = s(X1,happ(s(fun(fun('type.num.num',X1),X1),happ(s(fun(X0,fun(fun('type.num.num',X1),X1)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))),happ(s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1)))),happ(s(fun(X6,fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun(fun('type.num.num',X1),X1))))),'_dst_x0000x0111x1011_3'(s(fun(X2,fun(X3,fun(fun('type.num.num',X1),X1))),X4),s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X2))),X5),s(fun(X6,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),X7))),s(X6,X8))),s('type.num.num',X9))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11))),s(X0,X10))),s(fun('type.num.num',X1),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),X1),sK10('_dst_x000x111x011_3'(s(fun(X2,fun(X3,fun(fun('type.num.num',X1),X1))),X4),s(fun('type.num.num',fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X2))),X5),s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X3)),happ(s(fun(X6,fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),X7),s(X6,X8)))),X0,X1)),s(fun('type.num.num','type.ind_type.recspace'(X0)),X11)))))) )),
  inference(superposition,[],[f378,f369])).
fof(f47173,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(fun('type.num.num',X0),bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X4),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))),s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))),s(X1,X4))))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))) )),
  inference(forward_demodulation,[],[f46558,f359])).
fof(f46558,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X3),s(X1,X4),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))),s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X3))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))),s(X1,X4))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X5))))))))) )),
  inference(unit_resulting_resolution,[],[f378,f338])).
fof(f46392,plain,(
  ( ! [X134,X133] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X134))) | s(bool,X134) = s(bool,'|dollar|exists_1'(s(fun(X133,bool),sK9('!_1',fun(X133,bool)))))) )),
  inference(superposition,[],[f302,f46194])).
fof(f46474,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(X46,bool),sK9('!_1',fun(X46,bool))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f46334,f246])).
fof(f46334,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(X46,bool),sK9('!_1',fun(X46,bool))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f399,f46194])).
fof(f46194,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f381,f45363,f1150])).
fof(f46195,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45363,f1169])).
fof(f46196,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45363,f4018])).
fof(f46197,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f45363,f5307])).
fof(f46128,plain,(
  ( ! [X1002,X1000,X1004,X994,X998,X996,X1003,X1001,X995,X993,X999,X997] : (s(fun(X993,fun(X994,fun(X995,X996))),X1004) != s(fun(X993,fun(X994,fun(X995,X996))),'_dst_x000x111x011_3'(s(fun(X998,fun(X999,X996)),X1000),s(fun(X993,fun(X994,fun(X995,X998))),X1001),s(fun(X994,fun(X995,X999)),happ(s(fun(X997,fun(X994,fun(X995,X999))),X1002),s(X997,X1003))))) | s('type.benchmark.times'(fun(X993,fun(X994,fun(X995,X996)))),'const.benchmark.Once_1'(s(fun(X993,fun(X994,fun(X995,X996))),X1004))) = s('type.benchmark.times'(fun(X993,fun(X994,fun(X995,X996)))),'const.benchmark.Once_1'(s(fun(X993,fun(X994,fun(X995,X996))),happ(s(fun(X997,fun(X993,fun(X994,fun(X995,X996)))),'_dst_x0000x0111x1011_3'(s(fun(X998,fun(X999,X996)),X1000),s(fun(X993,fun(X994,fun(X995,X998))),X1001),s(fun(X997,fun(X994,fun(X995,X999))),X1002))),s(X997,X1003)))))) )),
  inference(superposition,[],[f303,f369])).
fof(f46126,plain,(
  ( ! [X978,X976,X980,X971,X969,X975,X973,X979,X977,X970,X974,X972] : (s('type.benchmark.times'(fun(X969,fun(X970,fun(X971,X972)))),'const.benchmark.Once_1'(s(fun(X969,fun(X970,fun(X971,X972))),X980))) != s('type.benchmark.times'(fun(X969,fun(X970,fun(X971,X972)))),'const.benchmark.Once_1'(s(fun(X969,fun(X970,fun(X971,X972))),'_dst_x000x111x011_3'(s(fun(X974,fun(X975,X972)),X976),s(fun(X969,fun(X970,fun(X971,X974))),X977),s(fun(X970,fun(X971,X975)),happ(s(fun(X973,fun(X970,fun(X971,X975))),X978),s(X973,X979))))))) | s(fun(X969,fun(X970,fun(X971,X972))),X980) = s(fun(X969,fun(X970,fun(X971,X972))),happ(s(fun(X973,fun(X969,fun(X970,fun(X971,X972)))),'_dst_x0000x0111x1011_3'(s(fun(X974,fun(X975,X972)),X976),s(fun(X969,fun(X970,fun(X971,X974))),X977),s(fun(X973,fun(X970,fun(X971,X975))),X978))),s(X973,X979)))) )),
  inference(superposition,[],[f302,f369])).
fof(f46118,plain,(
  ( ! [X883,X881,X874,X885,X878,X876,X882,X880,X884,X875,X873,X879,X877] : (s(X884,happ(s(fun(X877,X884),'_dst_x0x1_2'(s(fun(fun(X873,fun(X874,fun(X875,X876))),X884),X885),s(fun(X877,fun(X873,fun(X874,fun(X875,X876)))),'_dst_x0000x0111x1011_3'(s(fun(X878,fun(X879,X876)),X880),s(fun(X873,fun(X874,fun(X875,X878))),X881),s(fun(X877,fun(X874,fun(X875,X879))),X882))))),s(X877,X883))) = s(X884,happ(s(fun(fun(X873,fun(X874,fun(X875,X876))),X884),X885),s(fun(X873,fun(X874,fun(X875,X876))),'_dst_x000x111x011_3'(s(fun(X878,fun(X879,X876)),X880),s(fun(X873,fun(X874,fun(X875,X878))),X881),s(fun(X874,fun(X875,X879)),happ(s(fun(X877,fun(X874,fun(X875,X879))),X882),s(X877,X883)))))))) )),
  inference(superposition,[],[f340,f369])).
fof(f46117,plain,(
  ( ! [X860,X872,X866,X864,X870,X868,X859,X863,X861,X867,X865,X871,X869,X858,X862] : (s(X869,happ(s(fun(X862,X869),'_dst_x0x0x1_3'(s(fun(X870,fun(fun(X858,fun(X859,fun(X860,X861))),X869)),X871),s(X870,X872),s(fun(X862,fun(X858,fun(X859,fun(X860,X861)))),'_dst_x0000x0111x1011_3'(s(fun(X863,fun(X864,X861)),X865),s(fun(X858,fun(X859,fun(X860,X863))),X866),s(fun(X862,fun(X859,fun(X860,X864))),X867))))),s(X862,X868))) = s(X869,happ(s(fun(fun(X858,fun(X859,fun(X860,X861))),X869),happ(s(fun(X870,fun(fun(X858,fun(X859,fun(X860,X861))),X869)),X871),s(X870,X872))),s(fun(X858,fun(X859,fun(X860,X861))),'_dst_x000x111x011_3'(s(fun(X863,fun(X864,X861)),X865),s(fun(X858,fun(X859,fun(X860,X863))),X866),s(fun(X859,fun(X860,X864)),happ(s(fun(X862,fun(X859,fun(X860,X864))),X867),s(X862,X868)))))))) )),
  inference(superposition,[],[f359,f369])).
fof(f46116,plain,(
  ( ! [X850,X848,X854,X852,X843,X847,X845,X857,X851,X849,X855,X853,X842,X846,X844,X856] : (s(fun(X853,X854),'_dst_x0x0x1_3'(s(fun(fun(X842,fun(X843,fun(X844,X845))),fun(X855,X854)),X856),s(fun(X842,fun(X843,fun(X844,X845))),'_dst_x000x111x011_3'(s(fun(X847,fun(X848,X845)),X849),s(fun(X842,fun(X843,fun(X844,X847))),X850),s(fun(X843,fun(X844,X848)),happ(s(fun(X846,fun(X843,fun(X844,X848))),X851),s(X846,X852))))),s(fun(X853,X855),X857))) = s(fun(X853,X854),happ(s(fun(X846,fun(X853,X854)),'_dst_x00x10x01_3'(s(fun(fun(X842,fun(X843,fun(X844,X845))),fun(X855,X854)),X856),s(fun(X846,fun(X842,fun(X843,fun(X844,X845)))),'_dst_x0000x0111x1011_3'(s(fun(X847,fun(X848,X845)),X849),s(fun(X842,fun(X843,fun(X844,X847))),X850),s(fun(X846,fun(X843,fun(X844,X848))),X851))),s(fun(X853,X855),X857))),s(X846,X852)))) )),
  inference(superposition,[],[f362,f369])).
fof(f46115,plain,(
  ( ! [X831,X829,X841,X835,X833,X839,X837,X830,X828,X840,X834,X832,X838,X836,X827] : (s(X838,happ(s(fun(X831,X838),'_dst_x0x1x1_3'(s(fun(fun(X827,fun(X828,fun(X829,X830))),fun(X839,X838)),X840),s(fun(X831,fun(X827,fun(X828,fun(X829,X830)))),'_dst_x0000x0111x1011_3'(s(fun(X832,fun(X833,X830)),X834),s(fun(X827,fun(X828,fun(X829,X832))),X835),s(fun(X831,fun(X828,fun(X829,X833))),X836))),s(fun(X831,X839),X841))),s(X831,X837))) = s(X838,happ(s(fun(X839,X838),happ(s(fun(fun(X827,fun(X828,fun(X829,X830))),fun(X839,X838)),X840),s(fun(X827,fun(X828,fun(X829,X830))),'_dst_x000x111x011_3'(s(fun(X832,fun(X833,X830)),X834),s(fun(X827,fun(X828,fun(X829,X832))),X835),s(fun(X828,fun(X829,X833)),happ(s(fun(X831,fun(X828,fun(X829,X833))),X836),s(X831,X837))))))),s(X839,happ(s(fun(X831,X839),X841),s(X831,X837)))))) )),
  inference(superposition,[],[f360,f369])).
fof(f46114,plain,(
  ( ! [X825,X819,X817,X823,X821,X814,X812,X826,X824,X818,X816,X822,X820,X815,X813] : (s(X823,happ(s(fun(X816,X823),'_dst_x0x1x1_3'(s(fun(X824,fun(fun(X812,fun(X813,fun(X814,X815))),X823)),X825),s(fun(X816,X824),X826),s(fun(X816,fun(X812,fun(X813,fun(X814,X815)))),'_dst_x0000x0111x1011_3'(s(fun(X817,fun(X818,X815)),X819),s(fun(X812,fun(X813,fun(X814,X817))),X820),s(fun(X816,fun(X813,fun(X814,X818))),X821))))),s(X816,X822))) = s(X823,happ(s(fun(fun(X812,fun(X813,fun(X814,X815))),X823),happ(s(fun(X824,fun(fun(X812,fun(X813,fun(X814,X815))),X823)),X825),s(X824,happ(s(fun(X816,X824),X826),s(X816,X822))))),s(fun(X812,fun(X813,fun(X814,X815))),'_dst_x000x111x011_3'(s(fun(X817,fun(X818,X815)),X819),s(fun(X812,fun(X813,fun(X814,X817))),X820),s(fun(X813,fun(X814,X818)),happ(s(fun(X816,fun(X813,fun(X814,X818))),X821),s(X816,X822)))))))) )),
  inference(superposition,[],[f360,f369])).
fof(f46113,plain,(
  ( ! [X798,X796,X810,X808,X802,X800,X806,X804,X795,X799,X797,X811,X809,X803,X801,X807,X805] : (s(fun(X806,fun(X807,X808)),'_dst_x00x00x11_3'(s(fun(fun(X795,fun(X796,fun(X797,X798))),fun(X809,X808)),X810),s(fun(X795,fun(X796,fun(X797,X798))),'_dst_x000x111x011_3'(s(fun(X800,fun(X801,X798)),X802),s(fun(X795,fun(X796,fun(X797,X800))),X803),s(fun(X796,fun(X797,X801)),happ(s(fun(X799,fun(X796,fun(X797,X801))),X804),s(X799,X805))))),s(fun(X806,fun(X807,X809)),X811))) = s(fun(X806,fun(X807,X808)),happ(s(fun(X799,fun(X806,fun(X807,X808))),'_dst_x000x100x011_3'(s(fun(fun(X795,fun(X796,fun(X797,X798))),fun(X809,X808)),X810),s(fun(X799,fun(X795,fun(X796,fun(X797,X798)))),'_dst_x0000x0111x1011_3'(s(fun(X800,fun(X801,X798)),X802),s(fun(X795,fun(X796,fun(X797,X800))),X803),s(fun(X799,fun(X796,fun(X797,X801))),X804))),s(fun(X806,fun(X807,X809)),X811))),s(X799,X805)))) )),
  inference(superposition,[],[f366,f369])).
fof(f46097,plain,(
  ( ! [X565,X561,X563,X557,X559,X553,X555,X564,X566,X560,X562,X556,X558,X554] : (s(fun(X554,fun(X555,X556)),happ(s(fun(X563,fun(X554,fun(X555,X556))),'_dst_x0x1x1_3'(s(fun(X557,fun(X553,fun(X554,fun(X555,X556)))),'_dst_x0000x0111x1011_3'(s(fun(X558,fun(X559,X556)),X560),s(fun(X553,fun(X554,fun(X555,X558))),X561),s(fun(X557,fun(X554,fun(X555,X559))),X562))),s(fun(X563,X557),X564),s(fun(X563,X553),X566))),s(X563,X565))) = s(fun(X554,fun(X555,X556)),happ(s(fun(X553,fun(X554,fun(X555,X556))),'_dst_x000x111x011_3'(s(fun(X558,fun(X559,X556)),X560),s(fun(X553,fun(X554,fun(X555,X558))),X561),s(fun(X554,fun(X555,X559)),happ(s(fun(X557,fun(X554,fun(X555,X559))),X562),s(X557,happ(s(fun(X563,X557),X564),s(X563,X565))))))),s(X553,happ(s(fun(X563,X553),X566),s(X563,X565)))))) )),
  inference(superposition,[],[f360,f369])).
fof(f46096,plain,(
  ( ! [X540,X542,X546,X538,X549,X551,X545,X541,X543,X537,X539,X547,X552,X548,X550,X544] : (s(fun(X548,fun(X537,X549)),happ(s(fun(X541,fun(X548,fun(X537,X549))),'_dst_x000x110x101_3'(s(fun(X550,fun(fun(X538,fun(X539,X540)),X549)),X551),s(fun(X541,fun(X548,X550)),X552),s(fun(X541,fun(X537,fun(X538,fun(X539,X540)))),'_dst_x0000x0111x1011_3'(s(fun(X542,fun(X543,X540)),X544),s(fun(X537,fun(X538,fun(X539,X542))),X545),s(fun(X541,fun(X538,fun(X539,X543))),X546))))),s(X541,X547))) = s(fun(X548,fun(X537,X549)),'_dst_x00x10x01_3'(s(fun(X550,fun(fun(X538,fun(X539,X540)),X549)),X551),s(fun(X548,X550),happ(s(fun(X541,fun(X548,X550)),X552),s(X541,X547))),s(fun(X537,fun(X538,fun(X539,X540))),'_dst_x000x111x011_3'(s(fun(X542,fun(X543,X540)),X544),s(fun(X537,fun(X538,fun(X539,X542))),X545),s(fun(X538,fun(X539,X543)),happ(s(fun(X541,fun(X538,fun(X539,X543))),X546),s(X541,X547)))))))) )),
  inference(superposition,[],[f368,f369])).
fof(f46095,plain,(
  ( ! [X536,X532,X534,X528,X530,X524,X526,X522,X533,X535,X529,X531,X525,X527,X521,X523] : (s(fun(X521,fun(X532,X533)),happ(s(fun(X525,fun(X521,fun(X532,X533))),'_dst_x000x110x101_3'(s(fun(fun(X522,fun(X523,X524)),fun(X534,X533)),X535),s(fun(X525,fun(X521,fun(X522,fun(X523,X524)))),'_dst_x0000x0111x1011_3'(s(fun(X526,fun(X527,X524)),X528),s(fun(X521,fun(X522,fun(X523,X526))),X529),s(fun(X525,fun(X522,fun(X523,X527))),X530))),s(fun(X525,fun(X532,X534)),X536))),s(X525,X531))) = s(fun(X521,fun(X532,X533)),'_dst_x00x10x01_3'(s(fun(fun(X522,fun(X523,X524)),fun(X534,X533)),X535),s(fun(X521,fun(X522,fun(X523,X524))),'_dst_x000x111x011_3'(s(fun(X526,fun(X527,X524)),X528),s(fun(X521,fun(X522,fun(X523,X526))),X529),s(fun(X522,fun(X523,X527)),happ(s(fun(X525,fun(X522,fun(X523,X527))),X530),s(X525,X531))))),s(fun(X532,X534),happ(s(fun(X525,fun(X532,X534)),X536),s(X525,X531)))))) )),
  inference(superposition,[],[f368,f369])).
fof(f46094,plain,(
  ( ! [X509,X511,X507,X520,X516,X518,X512,X514,X508,X510,X506,X517,X519,X513,X515] : (s(fun(X506,X517),happ(s(fun(X510,fun(X506,X517)),'_dst_x00x11x11_3'(s(fun(fun(X507,fun(X508,X509)),fun(X518,X517)),X519),s(fun(X510,fun(X506,fun(X507,fun(X508,X509)))),'_dst_x0000x0111x1011_3'(s(fun(X511,fun(X512,X509)),X513),s(fun(X506,fun(X507,fun(X508,X511))),X514),s(fun(X510,fun(X507,fun(X508,X512))),X515))),s(fun(X510,fun(X506,X518)),X520))),s(X510,X516))) = s(fun(X506,X517),'_dst_x0x1x1_3'(s(fun(fun(X507,fun(X508,X509)),fun(X518,X517)),X519),s(fun(X506,fun(X507,fun(X508,X509))),'_dst_x000x111x011_3'(s(fun(X511,fun(X512,X509)),X513),s(fun(X506,fun(X507,fun(X508,X511))),X514),s(fun(X507,fun(X508,X512)),happ(s(fun(X510,fun(X507,fun(X508,X512))),X515),s(X510,X516))))),s(fun(X506,X518),happ(s(fun(X510,fun(X506,X518)),X520),s(X510,X516)))))) )),
  inference(superposition,[],[f365,f369])).
fof(f46093,plain,(
  ( ! [X499,X505,X492,X494,X500,X502,X496,X498,X504,X493,X495,X491,X501,X503,X497] : (s(fun(X491,X502),happ(s(fun(X495,fun(X491,X502)),'_dst_x00x11x11_3'(s(fun(X503,fun(fun(X492,fun(X493,X494)),X502)),X504),s(fun(X495,fun(X491,X503)),X505),s(fun(X495,fun(X491,fun(X492,fun(X493,X494)))),'_dst_x0000x0111x1011_3'(s(fun(X496,fun(X497,X494)),X498),s(fun(X491,fun(X492,fun(X493,X496))),X499),s(fun(X495,fun(X492,fun(X493,X497))),X500))))),s(X495,X501))) = s(fun(X491,X502),'_dst_x0x1x1_3'(s(fun(X503,fun(fun(X492,fun(X493,X494)),X502)),X504),s(fun(X491,X503),happ(s(fun(X495,fun(X491,X503)),X505),s(X495,X501))),s(fun(X491,fun(X492,fun(X493,X494))),'_dst_x000x111x011_3'(s(fun(X496,fun(X497,X494)),X498),s(fun(X491,fun(X492,fun(X493,X496))),X499),s(fun(X492,fun(X493,X497)),happ(s(fun(X495,fun(X492,fun(X493,X497))),X500),s(X495,X501)))))))) )),
  inference(superposition,[],[f365,f369])).
fof(f46092,plain,(
  ( ! [X476,X478,X484,X486,X480,X482,X488,X490,X477,X479,X485,X487,X481,X483,X489] : (s(fun(X476,X487),'_dst_x0x1x1_3'(s(fun(X488,fun(fun(X477,fun(X478,X479)),X487)),X489),s(fun(X476,X488),X490),s(fun(X476,fun(X477,fun(X478,X479))),'_dst_x000x111x011_3'(s(fun(X481,fun(X482,X479)),X483),s(fun(X476,fun(X477,fun(X478,X481))),X484),s(fun(X477,fun(X478,X482)),happ(s(fun(X480,fun(X477,fun(X478,X482))),X485),s(X480,X486))))))) = s(fun(X476,X487),happ(s(fun(X480,fun(X476,X487)),'_dst_x00x01x11_3'(s(fun(X488,fun(fun(X477,fun(X478,X479)),X487)),X489),s(fun(X476,X488),X490),s(fun(X480,fun(X476,fun(X477,fun(X478,X479)))),'_dst_x0000x0111x1011_3'(s(fun(X481,fun(X482,X479)),X483),s(fun(X476,fun(X477,fun(X478,X481))),X484),s(fun(X480,fun(X477,fun(X478,X482))),X485))))),s(X480,X486)))) )),
  inference(superposition,[],[f364,f369])).
fof(f46091,plain,(
  ( ! [X466,X472,X474,X461,X463,X469,X471,X465,X475,X467,X473,X462,X468,X470,X464] : (s(fun(X461,X472),'_dst_x0x0x1_3'(s(fun(X473,fun(fun(X462,fun(X463,X464)),X472)),X474),s(X473,X475),s(fun(X461,fun(X462,fun(X463,X464))),'_dst_x000x111x011_3'(s(fun(X466,fun(X467,X464)),X468),s(fun(X461,fun(X462,fun(X463,X466))),X469),s(fun(X462,fun(X463,X467)),happ(s(fun(X465,fun(X462,fun(X463,X467))),X470),s(X465,X471))))))) = s(fun(X461,X472),happ(s(fun(X465,fun(X461,X472)),'_dst_x00x00x11_3'(s(fun(X473,fun(fun(X462,fun(X463,X464)),X472)),X474),s(X473,X475),s(fun(X465,fun(X461,fun(X462,fun(X463,X464)))),'_dst_x0000x0111x1011_3'(s(fun(X466,fun(X467,X464)),X468),s(fun(X461,fun(X462,fun(X463,X466))),X469),s(fun(X465,fun(X462,fun(X463,X467))),X470))))),s(X465,X471)))) )),
  inference(superposition,[],[f363,f369])).
fof(f46090,plain,(
  ( ! [X447,X453,X455,X449,X451,X457,X459,X452,X454,X448,X450,X460,X456,X458] : (s(fun(X448,fun(X449,X450)),happ(s(fun(X447,fun(X448,fun(X449,X450))),'_dst_x000x111x011_3'(s(fun(X452,fun(X453,X450)),X454),s(fun(X447,fun(X448,fun(X449,X452))),X455),s(fun(X448,fun(X449,X453)),happ(s(fun(X451,fun(X448,fun(X449,X453))),X456),s(X451,X457))))),s(X447,happ(s(fun(X458,X447),X459),s(X458,X460))))) = s(fun(X448,fun(X449,X450)),happ(s(fun(X458,fun(X448,fun(X449,X450))),'_dst_x0x0x1_3'(s(fun(X451,fun(X447,fun(X448,fun(X449,X450)))),'_dst_x0000x0111x1011_3'(s(fun(X452,fun(X453,X450)),X454),s(fun(X447,fun(X448,fun(X449,X452))),X455),s(fun(X451,fun(X448,fun(X449,X453))),X456))),s(X451,X457),s(fun(X458,X447),X459))),s(X458,X460)))) )),
  inference(superposition,[],[f359,f369])).
fof(f46089,plain,(
  ( ! [X445,X441,X443,X436,X438,X434,X444,X446,X440,X442,X437,X439,X435] : (s(fun(X434,X445),'_dst_x0x1_2'(s(fun(fun(X435,fun(X436,X437)),X445),X446),s(fun(X434,fun(X435,fun(X436,X437))),'_dst_x000x111x011_3'(s(fun(X439,fun(X440,X437)),X441),s(fun(X434,fun(X435,fun(X436,X439))),X442),s(fun(X435,fun(X436,X440)),happ(s(fun(X438,fun(X435,fun(X436,X440))),X443),s(X438,X444))))))) = s(fun(X434,X445),happ(s(fun(X438,fun(X434,X445)),'_dst_x00x11_2'(s(fun(fun(X435,fun(X436,X437)),X445),X446),s(fun(X438,fun(X434,fun(X435,fun(X436,X437)))),'_dst_x0000x0111x1011_3'(s(fun(X439,fun(X440,X437)),X441),s(fun(X434,fun(X435,fun(X436,X439))),X442),s(fun(X438,fun(X435,fun(X436,X440))),X443))))),s(X438,X444)))) )),
  inference(superposition,[],[f358,f369])).
fof(f46088,plain,(
  ( ! [X422,X428,X430,X424,X426,X432,X423,X429,X431,X425,X427,X433] : (s(fun(X423,fun(X424,X425)),happ(s(fun(X422,fun(X423,fun(X424,X425))),'_dst_x000x111x011_3'(s(fun(X427,fun(X428,X425)),X429),s(fun(X422,fun(X423,fun(X424,X427))),X430),s(fun(X423,fun(X424,X428)),happ(s(fun(X426,fun(X423,fun(X424,X428))),X431),s(X426,X432))))),s(X422,X433))) = s(fun(X423,fun(X424,X425)),happ(s(fun(X426,fun(X423,fun(X424,X425))),'_dst_x1x0_2'(s(fun(X426,fun(X422,fun(X423,fun(X424,X425)))),'_dst_x0000x0111x1011_3'(s(fun(X427,fun(X428,X425)),X429),s(fun(X422,fun(X423,fun(X424,X427))),X430),s(fun(X426,fun(X423,fun(X424,X428))),X431))),s(X422,X433))),s(X426,X432)))) )),
  inference(superposition,[],[f341,f369])).
fof(f46065,plain,(
  ( ! [X80,X70,X78,X76,X74,X72,X81,X71,X79,X77,X75,X73,X82] : (s(fun(X70,fun(X71,X81)),'_dst_x00x11_2'(s(fun(fun(X72,X73),X81),X82),s(fun(X70,fun(X71,fun(X72,X73))),'_dst_x000x111x011_3'(s(fun(X75,fun(X76,X73)),X77),s(fun(X70,fun(X71,fun(X72,X75))),X78),s(fun(X71,fun(X72,X76)),happ(s(fun(X74,fun(X71,fun(X72,X76))),X79),s(X74,X80))))))) = s(fun(X70,fun(X71,X81)),happ(s(fun(X74,fun(X70,fun(X71,X81))),'_dst_x000x111_2'(s(fun(fun(X72,X73),X81),X82),s(fun(X74,fun(X70,fun(X71,fun(X72,X73)))),'_dst_x0000x0111x1011_3'(s(fun(X75,fun(X76,X73)),X77),s(fun(X70,fun(X71,fun(X72,X75))),X78),s(fun(X74,fun(X71,fun(X72,X76))),X79))))),s(X74,X80)))) )),
  inference(superposition,[],[f361,f369])).
fof(f46064,plain,(
  ( ! [X61,X59,X57,X68,X66,X64,X62,X60,X58,X56,X69,X67,X65,X55,X63] : (s(fun(X55,fun(X56,X66)),'_dst_x00x11x11_3'(s(fun(fun(X57,X58),fun(X67,X66)),X68),s(fun(X55,fun(X56,fun(X57,X58))),'_dst_x000x111x011_3'(s(fun(X60,fun(X61,X58)),X62),s(fun(X55,fun(X56,fun(X57,X60))),X63),s(fun(X56,fun(X57,X61)),happ(s(fun(X59,fun(X56,fun(X57,X61))),X64),s(X59,X65))))),s(fun(X55,fun(X56,X67)),X69))) = s(fun(X55,fun(X56,X66)),happ(s(fun(X59,fun(X55,fun(X56,X66))),'_dst_x000x111x011_3'(s(fun(fun(X57,X58),fun(X67,X66)),X68),s(fun(X59,fun(X55,fun(X56,fun(X57,X58)))),'_dst_x0000x0111x1011_3'(s(fun(X60,fun(X61,X58)),X62),s(fun(X55,fun(X56,fun(X57,X60))),X63),s(fun(X59,fun(X56,fun(X57,X61))),X64))),s(fun(X55,fun(X56,X67)),X69))),s(X59,X65)))) )),
  inference(superposition,[],[f367,f369])).
fof(f46025,plain,(
  ( ! [X736,X732,X734,X728,X730,X738,X737,X739,X733,X729,X731,X735] : (s(fun(X728,fun(X729,fun(X730,X731))),X739) != s(fun(X728,fun(X729,fun(X730,X731))),happ(s(fun(X736,fun(X728,fun(X729,fun(X730,X731)))),'_dst_x0000x0111x1011_3'(s(fun(X732,fun(X733,X731)),X734),s(fun(X728,fun(X729,fun(X730,X732))),X735),s(fun(X736,fun(X729,fun(X730,X733))),X737))),s(X736,X738))) | s('type.benchmark.times'(fun(X728,fun(X729,fun(X730,X731)))),'const.benchmark.Once_1'(s(fun(X728,fun(X729,fun(X730,X731))),X739))) = s('type.benchmark.times'(fun(X728,fun(X729,fun(X730,X731)))),'const.benchmark.Once_1'(s(fun(X728,fun(X729,fun(X730,X731))),'_dst_x000x111x011_3'(s(fun(X732,fun(X733,X731)),X734),s(fun(X728,fun(X729,fun(X730,X732))),X735),s(fun(X729,fun(X730,X733)),happ(s(fun(X736,fun(X729,fun(X730,X733))),X737),s(X736,X738)))))))) )),
  inference(superposition,[],[f303,f369])).
fof(f46023,plain,(
  ( ! [X707,X712,X714,X708,X710,X704,X706,X713,X715,X709,X711,X705] : (s('type.benchmark.times'(fun(X704,fun(X705,fun(X706,X707)))),'const.benchmark.Once_1'(s(fun(X704,fun(X705,fun(X706,X707))),X715))) != s('type.benchmark.times'(fun(X704,fun(X705,fun(X706,X707)))),'const.benchmark.Once_1'(s(fun(X704,fun(X705,fun(X706,X707))),happ(s(fun(X712,fun(X704,fun(X705,fun(X706,X707)))),'_dst_x0000x0111x1011_3'(s(fun(X708,fun(X709,X707)),X710),s(fun(X704,fun(X705,fun(X706,X708))),X711),s(fun(X712,fun(X705,fun(X706,X709))),X713))),s(X712,X714))))) | s(fun(X704,fun(X705,fun(X706,X707))),X715) = s(fun(X704,fun(X705,fun(X706,X707))),'_dst_x000x111x011_3'(s(fun(X708,fun(X709,X707)),X710),s(fun(X704,fun(X705,fun(X706,X708))),X711),s(fun(X705,fun(X706,X709)),happ(s(fun(X712,fun(X705,fun(X706,X709))),X713),s(X712,X714)))))) )),
  inference(superposition,[],[f302,f369])).
fof(f45975,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(fun(X1,fun(X2,X3)),'_dst_x00x11x11_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X1,fun(X2,X4)),happ(s(fun(X0,fun(X1,fun(X2,X4))),X7),s(X0,X11))),s(fun(X1,fun(X2,X5)),happ(s(fun(X8,fun(X1,fun(X2,X5))),X9),s(X8,X10))))) = s(fun(X1,fun(X2,X3)),happ(s(fun(X0,fun(X1,fun(X2,X3))),happ(s(fun(X8,fun(X0,fun(X1,fun(X2,X3)))),'_dst_x0000x0111x1011_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X0,fun(X1,fun(X2,X4))),X7),s(fun(X8,fun(X1,fun(X2,X5))),X9))),s(X8,X10))),s(X0,X11)))) )),
  inference(superposition,[],[f367,f369])).
fof(f45974,plain,(
  ( ! [X14,X12,X23,X21,X19,X17,X15,X13,X11,X22,X20,X18,X16] : (s(fun(X11,fun(X12,fun(X13,X14))),'_dst_x000x111x011_3'(s(fun(X16,fun(X17,X14)),X18),s(fun(X11,fun(X12,fun(X13,X16))),X19),s(fun(X12,fun(X13,X17)),happ(s(fun(X15,fun(X12,fun(X13,X17))),X20),s(X15,happ(s(fun(X21,X15),X22),s(X21,X23))))))) = s(fun(X11,fun(X12,fun(X13,X14))),happ(s(fun(X21,fun(X11,fun(X12,fun(X13,X14)))),'_dst_x0x1_2'(s(fun(X15,fun(X11,fun(X12,fun(X13,X14)))),'_dst_x0000x0111x1011_3'(s(fun(X16,fun(X17,X14)),X18),s(fun(X11,fun(X12,fun(X13,X16))),X19),s(fun(X15,fun(X12,fun(X13,X17))),X20))),s(fun(X21,X15),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f369,f340])).
fof(f45746,plain,(
  ( ! [X292,X294,X288,X290,X296,X287,X293,X295,X289,X291,X286] : (s(fun(X292,fun(X286,fun(X287,X293))),'_dst_x000x111x011_3'(s(fun(X294,fun(X288,X293)),X295),s(fun(X292,fun(X286,fun(X287,X294))),X296),s(fun(X286,fun(X287,X288)),'const.ind_type.FCONS_3'(s(fun(X286,fun(X287,X288)),X290),s(fun('type.num.num',fun(X286,fun(X287,X288))),X289),s('type.num.num',X291))))) = s(fun(X292,fun(X286,fun(X287,X293))),happ(s(fun('type.num.num',fun(X292,fun(X286,fun(X287,X293)))),'_dst_x0000x0111x1011_3'(s(fun(X294,fun(X288,X293)),X295),s(fun(X292,fun(X286,fun(X287,X294))),X296),s(fun('type.num.num',fun(X286,fun(X287,X288))),happ(s(fun(fun(X286,fun(X287,X288)),fun('type.num.num',fun(X286,fun(X287,X288)))),'_dst_x1x0_2'(s(fun(fun(X286,fun(X287,X288)),fun(fun('type.num.num',fun(X286,fun(X287,X288))),fun('type.num.num',fun(X286,fun(X287,X288))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X286,fun(X287,X288))),X289))),s(fun(X286,fun(X287,X288)),X290))))),s('type.num.num',X291)))) )),
  inference(superposition,[],[f369,f377])).
fof(f45745,plain,(
  ( ! [X261,X263,X269,X271,X265,X267,X273,X260,X262,X268,X270,X264,X266,X272,X274] : (s(fun(X270,fun(X260,fun(X261,X271))),'_dst_x000x111x011_3'(s(fun(X272,fun(X262,X271)),X273),s(fun(X270,fun(X260,fun(X261,X272))),X274),s(fun(X260,fun(X261,X262)),happ(s(fun(X265,fun(X260,fun(X261,X262))),happ(s(fun(X264,fun(X265,fun(X260,fun(X261,X262)))),X266),s(X264,X267))),s(X265,happ(s(fun(X263,X265),X268),s(X263,X269))))))) = s(fun(X270,fun(X260,fun(X261,X271))),happ(s(fun(X263,fun(X270,fun(X260,fun(X261,X271)))),'_dst_x0000x0111x1011_3'(s(fun(X272,fun(X262,X271)),X273),s(fun(X270,fun(X260,fun(X261,X272))),X274),s(fun(X263,fun(X260,fun(X261,X262))),'_dst_x0x0x1_3'(s(fun(X264,fun(X265,fun(X260,fun(X261,X262)))),X266),s(X264,X267),s(fun(X263,X265),X268))))),s(X263,X269)))) )),
  inference(superposition,[],[f369,f359])).
fof(f45744,plain,(
  ( ! [X255,X253,X257,X249,X259,X251,X254,X256,X258,X248,X250,X252,X247] : (s(fun(X255,fun(X247,fun(X248,X256))),'_dst_x000x111x011_3'(s(fun(X257,fun(X249,X256)),X258),s(fun(X255,fun(X247,fun(X248,X257))),X259),s(fun(X247,fun(X248,X249)),happ(s(fun(X251,fun(X247,fun(X248,X249))),happ(s(fun(X250,fun(X251,fun(X247,fun(X248,X249)))),X252),s(X250,X254))),s(X251,X253))))) = s(fun(X255,fun(X247,fun(X248,X256))),happ(s(fun(X250,fun(X255,fun(X247,fun(X248,X256)))),'_dst_x0000x0111x1011_3'(s(fun(X257,fun(X249,X256)),X258),s(fun(X255,fun(X247,fun(X248,X257))),X259),s(fun(X250,fun(X247,fun(X248,X249))),'_dst_x1x0_2'(s(fun(X250,fun(X251,fun(X247,fun(X248,X249)))),X252),s(X251,X253))))),s(X250,X254)))) )),
  inference(superposition,[],[f369,f341])).
fof(f45743,plain,(
  ( ! [X243,X241,X239,X237,X246,X244,X242,X240,X238,X236,X245] : (s(fun(X242,fun(X236,fun(X237,X243))),'_dst_x000x111x011_3'(s(fun(X244,fun(X238,X243)),X245),s(fun(X242,fun(X236,fun(X237,X244))),X246),s(fun(X236,fun(X237,X238)),X240))) = s(fun(X242,fun(X236,fun(X237,X243))),happ(s(fun(X239,fun(X242,fun(X236,fun(X237,X243)))),'_dst_x0000x0111x1011_3'(s(fun(X244,fun(X238,X243)),X245),s(fun(X242,fun(X236,fun(X237,X244))),X246),s(fun(X239,fun(X236,fun(X237,X238))),'_dst_x0_1'(s(fun(X236,fun(X237,X238)),X240))))),s(X239,X241)))) )),
  inference(superposition,[],[f369,f330])).
fof(f45742,plain,(
  ( ! [X231,X229,X227,X225,X235,X233,X223,X230,X228,X226,X224,X234,X232] : (s(fun(X231,fun(X223,fun(X224,X232))),'_dst_x000x111x011_3'(s(fun(X233,fun(X225,X232)),X234),s(fun(X231,fun(X223,fun(X224,X233))),X235),s(fun(X223,fun(X224,X225)),happ(s(fun(X227,fun(X223,fun(X224,X225))),X228),s(X227,happ(s(fun(X226,X227),X229),s(X226,X230))))))) = s(fun(X231,fun(X223,fun(X224,X232))),happ(s(fun(X226,fun(X231,fun(X223,fun(X224,X232)))),'_dst_x0000x0111x1011_3'(s(fun(X233,fun(X225,X232)),X234),s(fun(X231,fun(X223,fun(X224,X233))),X235),s(fun(X226,fun(X223,fun(X224,X225))),'_dst_x0x1_2'(s(fun(X227,fun(X223,fun(X224,X225))),X228),s(fun(X226,X227),X229))))),s(X226,X230)))) )),
  inference(superposition,[],[f369,f340])).
fof(f45741,plain,(
  ( ! [X212,X218,X208,X210,X220,X222,X216,X215,X213,X219,X209,X211,X221,X217,X214] : (s(fun(X218,fun(X208,fun(X209,X219))),'_dst_x000x111x011_3'(s(fun(X220,fun(X210,X219)),X221),s(fun(X218,fun(X208,fun(X209,X220))),X222),s(fun(X208,fun(X209,X210)),happ(s(fun(X214,fun(X208,fun(X209,X210))),'_dst_x0x1x1_3'(s(fun(X212,fun(X211,fun(X208,fun(X209,X210)))),X213),s(fun(X214,X212),X215),s(fun(X214,X211),X217))),s(X214,X216))))) = s(fun(X218,fun(X208,fun(X209,X219))),happ(s(fun(X211,fun(X218,fun(X208,fun(X209,X219)))),'_dst_x0000x0111x1011_3'(s(fun(X220,fun(X210,X219)),X221),s(fun(X218,fun(X208,fun(X209,X220))),X222),s(fun(X211,fun(X208,fun(X209,X210))),happ(s(fun(X212,fun(X211,fun(X208,fun(X209,X210)))),X213),s(X212,happ(s(fun(X214,X212),X215),s(X214,X216))))))),s(X211,happ(s(fun(X214,X211),X217),s(X214,X216)))))) )),
  inference(superposition,[],[f369,f360])).
fof(f45740,plain,(
  ( ! [X198,X196,X194,X206,X204,X202,X200,X199,X197,X195,X193,X207,X205,X203,X201] : (s(fun(X203,fun(X193,fun(X194,X204))),'_dst_x000x111x011_3'(s(fun(X205,fun(X195,X204)),X206),s(fun(X203,fun(X193,fun(X194,X205))),X207),s(fun(X193,fun(X194,X195)),happ(s(fun(X200,fun(X193,fun(X194,X195))),'_dst_x0x0x1_3'(s(fun(X197,fun(X196,fun(X193,fun(X194,X195)))),X198),s(X197,X199),s(fun(X200,X196),X201))),s(X200,X202))))) = s(fun(X203,fun(X193,fun(X194,X204))),happ(s(fun(X196,fun(X203,fun(X193,fun(X194,X204)))),'_dst_x0000x0111x1011_3'(s(fun(X205,fun(X195,X204)),X206),s(fun(X203,fun(X193,fun(X194,X205))),X207),s(fun(X196,fun(X193,fun(X194,X195))),happ(s(fun(X197,fun(X196,fun(X193,fun(X194,X195)))),X198),s(X197,X199))))),s(X196,happ(s(fun(X200,X196),X201),s(X200,X202)))))) )),
  inference(superposition,[],[f369,f359])).
fof(f45739,plain,(
  ( ! [X191,X189,X187,X185,X192,X182,X180,X190,X188,X186,X184,X183,X181] : (s(fun(X188,fun(X180,fun(X181,X189))),'_dst_x000x111x011_3'(s(fun(X190,fun(X182,X189)),X191),s(fun(X188,fun(X180,fun(X181,X190))),X192),s(fun(X180,fun(X181,X182)),happ(s(fun(X184,fun(X180,fun(X181,X182))),'_dst_x1x0_2'(s(fun(X184,fun(X183,fun(X180,fun(X181,X182)))),X185),s(X183,X187))),s(X184,X186))))) = s(fun(X188,fun(X180,fun(X181,X189))),happ(s(fun(X183,fun(X188,fun(X180,fun(X181,X189)))),'_dst_x0000x0111x1011_3'(s(fun(X190,fun(X182,X189)),X191),s(fun(X188,fun(X180,fun(X181,X190))),X192),s(fun(X183,fun(X180,fun(X181,X182))),happ(s(fun(X184,fun(X183,fun(X180,fun(X181,X182)))),X185),s(X184,X186))))),s(X183,X187)))) )),
  inference(superposition,[],[f369,f341])).
fof(f45738,plain,(
  ( ! [X177,X167,X175,X173,X171,X169,X178,X176,X174,X172,X170,X168,X179] : (s(fun(X175,fun(X167,fun(X168,X176))),happ(s(fun(X170,fun(X175,fun(X167,fun(X168,X176)))),'_dst_x0000x0111x1011_3'(s(fun(X177,fun(X169,X176)),X178),s(fun(X175,fun(X167,fun(X168,X177))),X179),s(fun(X170,fun(X167,fun(X168,X169))),X171))),s(X170,happ(s(fun(X172,X170),X173),s(X172,X174))))) = s(fun(X175,fun(X167,fun(X168,X176))),'_dst_x000x111x011_3'(s(fun(X177,fun(X169,X176)),X178),s(fun(X175,fun(X167,fun(X168,X177))),X179),s(fun(X167,fun(X168,X169)),happ(s(fun(X172,fun(X167,fun(X168,X169))),'_dst_x0x1_2'(s(fun(X170,fun(X167,fun(X168,X169))),X171),s(fun(X172,X170),X173))),s(X172,X174)))))) )),
  inference(superposition,[],[f369,f340])).
fof(f45737,plain,(
  ( ! [X146,X144,X156,X154,X152,X151,X149,X147,X145,X157,X155,X153,X143,X150,X148] : (s(fun(X153,fun(X143,fun(X144,X154))),'_dst_x000x111x011_3'(s(fun(X155,fun(X145,X154)),X156),s(fun(X153,fun(X143,fun(X144,X155))),X157),s(fun(X143,fun(X144,X145)),'_dst_x0x0x1_3'(s(fun(X147,fun(X148,fun(X144,X145))),X149),s(X147,X150),s(fun(X143,X148),happ(s(fun(X146,fun(X143,X148)),X151),s(X146,X152))))))) = s(fun(X153,fun(X143,fun(X144,X154))),happ(s(fun(X146,fun(X153,fun(X143,fun(X144,X154)))),'_dst_x0000x0111x1011_3'(s(fun(X155,fun(X145,X154)),X156),s(fun(X153,fun(X143,fun(X144,X155))),X157),s(fun(X146,fun(X143,fun(X144,X145))),'_dst_x00x00x11_3'(s(fun(X147,fun(X148,fun(X144,X145))),X149),s(X147,X150),s(fun(X146,fun(X143,X148)),X151))))),s(X146,X152)))) )),
  inference(superposition,[],[f369,f363])).
fof(f45736,plain,(
  ( ! [X134,X132,X130,X128,X142,X140,X138,X136,X135,X133,X131,X129,X141,X139,X137] : (s(fun(X138,fun(X128,fun(X129,X139))),happ(s(fun(X131,fun(X138,fun(X128,fun(X129,X139)))),'_dst_x0000x0111x1011_3'(s(fun(X140,fun(X130,X139)),X141),s(fun(X138,fun(X128,fun(X129,X140))),X142),s(fun(X131,fun(X128,fun(X129,X130))),'_dst_x00x11x11_3'(s(fun(X132,fun(X133,fun(X129,X130))),X134),s(fun(X131,fun(X128,X132)),X135),s(fun(X131,fun(X128,X133)),X136))))),s(X131,X137))) = s(fun(X138,fun(X128,fun(X129,X139))),'_dst_x000x111x011_3'(s(fun(X140,fun(X130,X139)),X141),s(fun(X138,fun(X128,fun(X129,X140))),X142),s(fun(X128,fun(X129,X130)),'_dst_x0x1x1_3'(s(fun(X132,fun(X133,fun(X129,X130))),X134),s(fun(X128,X132),happ(s(fun(X131,fun(X128,X132)),X135),s(X131,X137))),s(fun(X128,X133),happ(s(fun(X131,fun(X128,X133)),X136),s(X131,X137)))))))) )),
  inference(superposition,[],[f369,f365])).
fof(f45735,plain,(
  ( ! [X127,X125,X123,X121,X118,X116,X114,X126,X124,X122,X120,X119,X117,X115,X113] : (s(fun(X123,fun(X113,fun(X114,X124))),'_dst_x000x111x011_3'(s(fun(X125,fun(X115,X124)),X126),s(fun(X123,fun(X113,fun(X114,X125))),X127),s(fun(X113,fun(X114,X115)),'_dst_x0x1x1_3'(s(fun(X117,fun(X118,fun(X114,X115))),X119),s(fun(X113,X117),X120),s(fun(X113,X118),happ(s(fun(X116,fun(X113,X118)),X121),s(X116,X122))))))) = s(fun(X123,fun(X113,fun(X114,X124))),happ(s(fun(X116,fun(X123,fun(X113,fun(X114,X124)))),'_dst_x0000x0111x1011_3'(s(fun(X125,fun(X115,X124)),X126),s(fun(X123,fun(X113,fun(X114,X125))),X127),s(fun(X116,fun(X113,fun(X114,X115))),'_dst_x00x01x11_3'(s(fun(X117,fun(X118,fun(X114,X115))),X119),s(fun(X113,X117),X120),s(fun(X116,fun(X113,X118)),X121))))),s(X116,X122)))) )),
  inference(superposition,[],[f369,f364])).
fof(f45734,plain,(
  ( ! [X103,X101,X111,X109,X107,X105,X112,X102,X100,X110,X108,X106,X104] : (s(fun(X108,fun(X100,fun(X101,X109))),'_dst_x000x111x011_3'(s(fun(X110,fun(X102,X109)),X111),s(fun(X108,fun(X100,fun(X101,X110))),X112),s(fun(X100,fun(X101,X102)),'_dst_x0x1_2'(s(fun(X104,fun(X101,X102)),X105),s(fun(X100,X104),happ(s(fun(X103,fun(X100,X104)),X106),s(X103,X107))))))) = s(fun(X108,fun(X100,fun(X101,X109))),happ(s(fun(X103,fun(X108,fun(X100,fun(X101,X109)))),'_dst_x0000x0111x1011_3'(s(fun(X110,fun(X102,X109)),X111),s(fun(X108,fun(X100,fun(X101,X110))),X112),s(fun(X103,fun(X100,fun(X101,X102))),'_dst_x00x11_2'(s(fun(X104,fun(X101,X102)),X105),s(fun(X103,fun(X100,X104)),X106))))),s(X103,X107)))) )),
  inference(superposition,[],[f369,f358])).
fof(f45733,plain,(
  ( ! [X94,X92,X90,X88,X99,X97,X87,X85,X95,X93,X91,X89,X98,X96,X86] : (s(fun(X95,fun(X85,fun(X86,X96))),'_dst_x000x111x011_3'(s(fun(X97,fun(X87,X96)),X98),s(fun(X95,fun(X85,fun(X86,X97))),X99),s(fun(X85,fun(X86,X87)),'_dst_x0x0x1_3'(s(fun(X89,fun(X90,fun(X86,X87))),X91),s(X89,happ(s(fun(X88,X89),X92),s(X88,X94))),s(fun(X85,X90),X93))))) = s(fun(X95,fun(X85,fun(X86,X96))),happ(s(fun(X88,fun(X95,fun(X85,fun(X86,X96)))),'_dst_x0000x0111x1011_3'(s(fun(X97,fun(X87,X96)),X98),s(fun(X95,fun(X85,fun(X86,X97))),X99),s(fun(X88,fun(X85,fun(X86,X87))),'_dst_x00x10x01_3'(s(fun(X89,fun(X90,fun(X86,X87))),X91),s(fun(X88,X89),X92),s(fun(X85,X90),X93))))),s(X88,X94)))) )),
  inference(superposition,[],[f369,f362])).
fof(f45732,plain,(
  ( ! [X80,X78,X76,X74,X83,X81,X79,X77,X75,X84,X82] : (s(fun(X80,fun(fun(X74,fun(X75,X76)),fun(X75,X81))),'_dst_x000x111x011_3'(s(fun(X82,fun(X76,X81)),X83),s(fun(X80,fun(fun(X74,fun(X75,X76)),fun(X75,X82))),X84),s(fun(fun(X74,fun(X75,X76)),fun(X75,X76)),'_dstsel_0_x0_1'(s(X74,happ(s(fun(X77,X74),X78),s(X77,X79))))))) = s(fun(X80,fun(fun(X74,fun(X75,X76)),fun(X75,X81))),happ(s(fun(X77,fun(X80,fun(fun(X74,fun(X75,X76)),fun(X75,X81)))),'_dst_x0000x0111x1011_3'(s(fun(X82,fun(X76,X81)),X83),s(fun(X80,fun(fun(X74,fun(X75,X76)),fun(X75,X82))),X84),s(fun(X77,fun(fun(X74,fun(X75,X76)),fun(X75,X76))),'_dstsel_1_x10_1'(s(fun(X77,X74),X78))))),s(X77,X79)))) )),
  inference(superposition,[],[f369,f339])).
fof(f45731,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X72,X62,X60,X58,X71,X69,X67,X65,X73,X63] : (s(fun(X69,fun(X58,fun(X59,X70))),'_dst_x000x111x011_3'(s(fun(X71,fun(fun(X60,X61),X70)),X72),s(fun(X69,fun(X58,fun(X59,X71))),X73),s(fun(X58,fun(X59,fun(X60,X61))),'_dst_x000x111x011_3'(s(fun(X63,fun(X64,X61)),X65),s(fun(X58,fun(X59,fun(X60,X63))),X66),s(fun(X59,fun(X60,X64)),happ(s(fun(X62,fun(X59,fun(X60,X64))),X67),s(X62,X68))))))) = s(fun(X69,fun(X58,fun(X59,X70))),happ(s(fun(X62,fun(X69,fun(X58,fun(X59,X70)))),'_dst_x0000x0111x1011_3'(s(fun(X71,fun(fun(X60,X61),X70)),X72),s(fun(X69,fun(X58,fun(X59,X71))),X73),s(fun(X62,fun(X58,fun(X59,fun(X60,X61)))),'_dst_x0000x0111x1011_3'(s(fun(X63,fun(X64,X61)),X65),s(fun(X58,fun(X59,fun(X60,X63))),X66),s(fun(X62,fun(X59,fun(X60,X64))),X67))))),s(X62,X68)))) )),
  inference(superposition,[],[f369,f369])).
fof(f45730,plain,(
  ( ! [X57,X47,X45,X43,X54,X52,X50,X48,X56,X46,X44,X55,X53,X51,X49] : (s(fun(X53,fun(X43,fun(X44,X54))),'_dst_x000x111x011_3'(s(fun(X55,fun(X45,X54)),X56),s(fun(X53,fun(X43,fun(X44,X55))),X57),s(fun(X43,fun(X44,X45)),'_dst_x00x11x11_3'(s(fun(X47,fun(X48,X45)),X49),s(fun(X43,fun(X44,X47)),happ(s(fun(X46,fun(X43,fun(X44,X47))),X50),s(X46,X52))),s(fun(X43,fun(X44,X48)),X51))))) = s(fun(X53,fun(X43,fun(X44,X54))),happ(s(fun(X46,fun(X53,fun(X43,fun(X44,X54)))),'_dst_x0000x0111x1011_3'(s(fun(X55,fun(X45,X54)),X56),s(fun(X53,fun(X43,fun(X44,X55))),X57),s(fun(X46,fun(X43,fun(X44,X45))),'_dst_x000x111x011_3'(s(fun(X47,fun(X48,X45)),X49),s(fun(X46,fun(X43,fun(X44,X47))),X50),s(fun(X43,fun(X44,X48)),X51))))),s(X46,X52)))) )),
  inference(superposition,[],[f369,f367])).
fof(f45729,plain,(
  ( ! [X30,X39,X37,X35,X33,X41,X31,X38,X36,X34,X32,X42,X40] : (s(fun(X38,fun(X30,fun(X31,X39))),'_dst_x000x111x011_3'(s(fun(X40,fun(X32,X39)),X41),s(fun(X38,fun(X30,fun(X31,X40))),X42),s(fun(X30,fun(X31,X32)),'_dst_x00x11_2'(s(fun(X34,X32),X35),s(fun(X30,fun(X31,X34)),happ(s(fun(X33,fun(X30,fun(X31,X34))),X36),s(X33,X37))))))) = s(fun(X38,fun(X30,fun(X31,X39))),happ(s(fun(X33,fun(X38,fun(X30,fun(X31,X39)))),'_dst_x0000x0111x1011_3'(s(fun(X40,fun(X32,X39)),X41),s(fun(X38,fun(X30,fun(X31,X40))),X42),s(fun(X33,fun(X30,fun(X31,X32))),'_dst_x000x111_2'(s(fun(X34,X32),X35),s(fun(X33,fun(X30,fun(X31,X34))),X36))))),s(X33,X37)))) )),
  inference(superposition,[],[f369,f361])).
fof(f45728,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X17,X29,X27,X25,X15,X22,X20,X18,X16] : (s(fun(X25,fun(X15,fun(X16,X26))),happ(s(fun(X18,fun(X25,fun(X15,fun(X16,X26)))),'_dst_x0000x0111x1011_3'(s(fun(X27,fun(X17,X26)),X28),s(fun(X25,fun(X15,fun(X16,X27))),X29),s(fun(X18,fun(X15,fun(X16,X17))),'_dst_x000x110x101_3'(s(fun(X19,fun(X20,X17)),X21),s(fun(X18,fun(X15,X19)),X22),s(fun(X18,fun(X16,X20)),X23))))),s(X18,X24))) = s(fun(X25,fun(X15,fun(X16,X26))),'_dst_x000x111x011_3'(s(fun(X27,fun(X17,X26)),X28),s(fun(X25,fun(X15,fun(X16,X27))),X29),s(fun(X15,fun(X16,X17)),'_dst_x00x10x01_3'(s(fun(X19,fun(X20,X17)),X21),s(fun(X15,X19),happ(s(fun(X18,fun(X15,X19)),X22),s(X18,X24))),s(fun(X16,X20),happ(s(fun(X18,fun(X16,X20)),X23),s(X18,X24)))))))) )),
  inference(superposition,[],[f369,f368])).
fof(f45727,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s(fun(X10,fun(X0,fun(X1,X11))),'_dst_x000x111x011_3'(s(fun(X12,fun(X2,X11)),X13),s(fun(X10,fun(X0,fun(X1,X12))),X14),s(fun(X0,fun(X1,X2)),'_dst_x00x00x11_3'(s(fun(X4,fun(X5,X2)),X6),s(X4,happ(s(fun(X3,X4),X7),s(X3,X9))),s(fun(X0,fun(X1,X5)),X8))))) = s(fun(X10,fun(X0,fun(X1,X11))),happ(s(fun(X3,fun(X10,fun(X0,fun(X1,X11)))),'_dst_x0000x0111x1011_3'(s(fun(X12,fun(X2,X11)),X13),s(fun(X10,fun(X0,fun(X1,X12))),X14),s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x100x011_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,X4),X7),s(fun(X0,fun(X1,X5)),X8))))),s(X3,X9)))) )),
  inference(superposition,[],[f369,f366])).
fof(f45726,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(fun(X0,fun(X1,fun(X2,X3)))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,fun(X2,X3))),'_dst_x000x111x011_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X0,fun(X1,fun(X2,X4))),X7),s(fun(X1,fun(X2,X5)),happ(s(fun(X8,fun(X1,fun(X2,X5))),X9),s(X8,X10))))))) = s('type.benchmark.times'(fun(X0,fun(X1,fun(X2,X3)))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,fun(X2,X3))),happ(s(fun(X8,fun(X0,fun(X1,fun(X2,X3)))),'_dst_x0000x0111x1011_3'(s(fun(X4,fun(X5,X3)),X6),s(fun(X0,fun(X1,fun(X2,X4))),X7),s(fun(X8,fun(X1,fun(X2,X5))),X9))),s(X8,X10)))))) )),
  inference(unit_resulting_resolution,[],[f369,f303])).
fof(f45361,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK9('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f45246,f319])).
fof(f45363,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f45246,f299])).
fof(f45386,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),sK9('!_1',fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f304,f45246,f399])).
fof(f45387,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'_dstsel_0_x0_1'(s(X0,X1))),s(fun(X0,bool),sK9('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f333,f45246,f399])).
fof(f45388,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun(X1,bool),sK9('!_1',fun(X1,bool))),s(fun(X0,X1),X2))),s(X0,X3)))) )),
  inference(unit_resulting_resolution,[],[f340,f45246,f399])).
fof(f45389,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))),s(fun(X0,bool),sK9('!_1',fun(X0,bool))),s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),X2)))) )),
  inference(unit_resulting_resolution,[],[f335,f45246,f399])).
fof(f45393,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK9('!_1',fun(X0,bool))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f381,f45246,f1150])).
fof(f45394,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK9('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f45246,f1169])).
fof(f45395,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK9('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f45246,f4018])).
fof(f45396,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK9('!_1',fun(X1,bool))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f45246,f5307])).
fof(f45246,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),sK9('!_1',fun(X0,bool))),s(X0,X1))))) )),
  inference(unit_resulting_resolution,[],[f44678,f316])).
fof(f45269,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f44678,f399])).
fof(f45270,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(X0,bool)),'const.benchmark.Once_1'(s(fun(X0,bool),sK9('!_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'!_1'),s(fun('type.benchmark.times'(fun(X0,bool)),fun('type.benchmark.times'(fun(X0,bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f44678,f399])).
fof(f45274,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),sK9('!_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f381,f44678,f1150])).
fof(f45275,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f44678,f1169])).
fof(f45276,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f44678,f4018])).
fof(f45277,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),sK9('!_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f44678,f5307])).
fof(f45202,plain,(
  ( ! [X639,X633,X635,X640,X642,X636,X638,X632,X634,X641,X637] : (s(fun(X632,fun(X633,X634)),X642) != s(fun(X632,fun(X633,X634)),happ(s(fun(X638,fun(X632,fun(X633,X634))),'_dst_x000x110x101_3'(s(fun(X635,fun(X636,X634)),X637),s(fun(X638,fun(X632,X635)),X639),s(fun(X638,fun(X633,X636)),X641))),s(X638,X640))) | s('type.benchmark.times'(fun(X632,fun(X633,X634))),'const.benchmark.Once_1'(s(fun(X632,fun(X633,X634)),X642))) = s('type.benchmark.times'(fun(X632,fun(X633,X634))),'const.benchmark.Once_1'(s(fun(X632,fun(X633,X634)),'_dst_x00x10x01_3'(s(fun(X635,fun(X636,X634)),X637),s(fun(X632,X635),happ(s(fun(X638,fun(X632,X635)),X639),s(X638,X640))),s(fun(X633,X636),happ(s(fun(X638,fun(X633,X636)),X641),s(X638,X640)))))))) )),
  inference(superposition,[],[f303,f368])).
fof(f45200,plain,(
  ( ! [X617,X619,X613,X615,X611,X620,X616,X618,X612,X614,X610] : (s('type.benchmark.times'(fun(X610,fun(X611,X612))),'const.benchmark.Once_1'(s(fun(X610,fun(X611,X612)),X620))) != s('type.benchmark.times'(fun(X610,fun(X611,X612))),'const.benchmark.Once_1'(s(fun(X610,fun(X611,X612)),happ(s(fun(X616,fun(X610,fun(X611,X612))),'_dst_x000x110x101_3'(s(fun(X613,fun(X614,X612)),X615),s(fun(X616,fun(X610,X613)),X617),s(fun(X616,fun(X611,X614)),X619))),s(X616,X618))))) | s(fun(X610,fun(X611,X612)),X620) = s(fun(X610,fun(X611,X612)),'_dst_x00x10x01_3'(s(fun(X613,fun(X614,X612)),X615),s(fun(X610,X613),happ(s(fun(X616,fun(X610,X613)),X617),s(X616,X618))),s(fun(X611,X614),happ(s(fun(X616,fun(X611,X614)),X619),s(X616,X618)))))) )),
  inference(superposition,[],[f302,f368])).
fof(f45157,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32] : (s(fun(X24,X25),happ(s(fun(X23,fun(X24,X25)),happ(s(fun(X29,fun(X23,fun(X24,X25))),'_dst_x000x110x101_3'(s(fun(X26,fun(X27,X25)),X28),s(fun(X29,fun(X23,X26)),X30),s(fun(X29,fun(X24,X27)),X32))),s(X29,X31))),s(X23,X33))) = s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X26,fun(X27,X25)),X28),s(X26,happ(s(fun(X23,X26),happ(s(fun(X29,fun(X23,X26)),X30),s(X29,X31))),s(X23,X33))),s(fun(X24,X27),happ(s(fun(X29,fun(X24,X27)),X32),s(X29,X31)))))) )),
  inference(superposition,[],[f362,f368])).
fof(f45121,plain,(
  ( ! [X850,X854,X852,X859,X857,X851,X849,X855,X853,X858,X856] : (s(fun(X849,fun(X850,X851)),X859) != s(fun(X849,fun(X850,X851)),'_dst_x00x10x01_3'(s(fun(X853,fun(X854,X851)),X855),s(fun(X849,X853),happ(s(fun(X852,fun(X849,X853)),X856),s(X852,X858))),s(fun(X850,X854),happ(s(fun(X852,fun(X850,X854)),X857),s(X852,X858))))) | s('type.benchmark.times'(fun(X849,fun(X850,X851))),'const.benchmark.Once_1'(s(fun(X849,fun(X850,X851)),X859))) = s('type.benchmark.times'(fun(X849,fun(X850,X851))),'const.benchmark.Once_1'(s(fun(X849,fun(X850,X851)),happ(s(fun(X852,fun(X849,fun(X850,X851))),'_dst_x000x110x101_3'(s(fun(X853,fun(X854,X851)),X855),s(fun(X852,fun(X849,X853)),X856),s(fun(X852,fun(X850,X854)),X857))),s(X852,X858)))))) )),
  inference(superposition,[],[f303,f368])).
fof(f45119,plain,(
  ( ! [X831,X829,X835,X833,X837,X830,X828,X834,X832,X836,X827] : (s('type.benchmark.times'(fun(X827,fun(X828,X829))),'const.benchmark.Once_1'(s(fun(X827,fun(X828,X829)),X837))) != s('type.benchmark.times'(fun(X827,fun(X828,X829))),'const.benchmark.Once_1'(s(fun(X827,fun(X828,X829)),'_dst_x00x10x01_3'(s(fun(X831,fun(X832,X829)),X833),s(fun(X827,X831),happ(s(fun(X830,fun(X827,X831)),X834),s(X830,X836))),s(fun(X828,X832),happ(s(fun(X830,fun(X828,X832)),X835),s(X830,X836))))))) | s(fun(X827,fun(X828,X829)),X837) = s(fun(X827,fun(X828,X829)),happ(s(fun(X830,fun(X827,fun(X828,X829))),'_dst_x000x110x101_3'(s(fun(X831,fun(X832,X829)),X833),s(fun(X830,fun(X827,X831)),X834),s(fun(X830,fun(X828,X832)),X835))),s(X830,X836)))) )),
  inference(superposition,[],[f302,f368])).
fof(f45111,plain,(
  ( ! [X749,X745,X747,X741,X743,X739,X748,X750,X744,X746,X740,X742] : (s(X749,happ(s(fun(X742,X749),'_dst_x0x1_2'(s(fun(fun(X739,fun(X740,X741)),X749),X750),s(fun(X742,fun(X739,fun(X740,X741))),'_dst_x000x110x101_3'(s(fun(X743,fun(X744,X741)),X745),s(fun(X742,fun(X739,X743)),X746),s(fun(X742,fun(X740,X744)),X747))))),s(X742,X748))) = s(X749,happ(s(fun(fun(X739,fun(X740,X741)),X749),X750),s(fun(X739,fun(X740,X741)),'_dst_x00x10x01_3'(s(fun(X743,fun(X744,X741)),X745),s(fun(X739,X743),happ(s(fun(X742,fun(X739,X743)),X746),s(X742,X748))),s(fun(X740,X744),happ(s(fun(X742,fun(X740,X744)),X747),s(X742,X748)))))))) )),
  inference(superposition,[],[f340,f368])).
fof(f45110,plain,(
  ( ! [X736,X738,X732,X728,X730,X734,X726,X737,X733,X735,X729,X731,X725,X727] : (s(X735,happ(s(fun(X728,X735),'_dst_x0x0x1_3'(s(fun(X736,fun(fun(X725,fun(X726,X727)),X735)),X737),s(X736,X738),s(fun(X728,fun(X725,fun(X726,X727))),'_dst_x000x110x101_3'(s(fun(X729,fun(X730,X727)),X731),s(fun(X728,fun(X725,X729)),X732),s(fun(X728,fun(X726,X730)),X733))))),s(X728,X734))) = s(X735,happ(s(fun(fun(X725,fun(X726,X727)),X735),happ(s(fun(X736,fun(fun(X725,fun(X726,X727)),X735)),X737),s(X736,X738))),s(fun(X725,fun(X726,X727)),'_dst_x00x10x01_3'(s(fun(X729,fun(X730,X727)),X731),s(fun(X725,X729),happ(s(fun(X728,fun(X725,X729)),X732),s(X728,X734))),s(fun(X726,X730),happ(s(fun(X728,fun(X726,X730)),X733),s(X728,X734)))))))) )),
  inference(superposition,[],[f359,f368])).
fof(f45109,plain,(
  ( ! [X724,X720,X722,X716,X718,X712,X714,X710,X721,X723,X717,X719,X713,X715,X711] : (s(fun(X720,X721),happ(s(fun(X713,fun(X720,X721)),'_dst_x00x10x01_3'(s(fun(fun(X710,fun(X711,X712)),fun(X722,X721)),X723),s(fun(X713,fun(X710,fun(X711,X712))),'_dst_x000x110x101_3'(s(fun(X714,fun(X715,X712)),X716),s(fun(X713,fun(X710,X714)),X717),s(fun(X713,fun(X711,X715)),X718))),s(fun(X720,X722),X724))),s(X713,X719))) = s(fun(X720,X721),'_dst_x0x0x1_3'(s(fun(fun(X710,fun(X711,X712)),fun(X722,X721)),X723),s(fun(X710,fun(X711,X712)),'_dst_x00x10x01_3'(s(fun(X714,fun(X715,X712)),X716),s(fun(X710,X714),happ(s(fun(X713,fun(X710,X714)),X717),s(X713,X719))),s(fun(X711,X715),happ(s(fun(X713,fun(X711,X715)),X718),s(X713,X719))))),s(fun(X720,X722),X724)))) )),
  inference(superposition,[],[f362,f368])).
fof(f45108,plain,(
  ( ! [X697,X699,X707,X705,X708,X700,X702,X706,X696,X698,X704,X709,X701,X703] : (s(X706,happ(s(fun(X699,X706),'_dst_x0x1x1_3'(s(fun(fun(X696,fun(X697,X698)),fun(X707,X706)),X708),s(fun(X699,fun(X696,fun(X697,X698))),'_dst_x000x110x101_3'(s(fun(X700,fun(X701,X698)),X702),s(fun(X699,fun(X696,X700)),X703),s(fun(X699,fun(X697,X701)),X704))),s(fun(X699,X707),X709))),s(X699,X705))) = s(X706,happ(s(fun(X707,X706),happ(s(fun(fun(X696,fun(X697,X698)),fun(X707,X706)),X708),s(fun(X696,fun(X697,X698)),'_dst_x00x10x01_3'(s(fun(X700,fun(X701,X698)),X702),s(fun(X696,X700),happ(s(fun(X699,fun(X696,X700)),X703),s(X699,X705))),s(fun(X697,X701),happ(s(fun(X699,fun(X697,X701)),X704),s(X699,X705))))))),s(X707,happ(s(fun(X699,X707),X709),s(X699,X705)))))) )),
  inference(superposition,[],[f360,f368])).
fof(f45107,plain,(
  ( ! [X693,X695,X689,X691,X685,X687,X683,X692,X694,X688,X690,X684,X686,X682] : (s(X692,happ(s(fun(X685,X692),'_dst_x0x1x1_3'(s(fun(X693,fun(fun(X682,fun(X683,X684)),X692)),X694),s(fun(X685,X693),X695),s(fun(X685,fun(X682,fun(X683,X684))),'_dst_x000x110x101_3'(s(fun(X686,fun(X687,X684)),X688),s(fun(X685,fun(X682,X686)),X689),s(fun(X685,fun(X683,X687)),X690))))),s(X685,X691))) = s(X692,happ(s(fun(fun(X682,fun(X683,X684)),X692),happ(s(fun(X693,fun(fun(X682,fun(X683,X684)),X692)),X694),s(X693,happ(s(fun(X685,X693),X695),s(X685,X691))))),s(fun(X682,fun(X683,X684)),'_dst_x00x10x01_3'(s(fun(X686,fun(X687,X684)),X688),s(fun(X682,X686),happ(s(fun(X685,fun(X682,X686)),X689),s(X685,X691))),s(fun(X683,X687),happ(s(fun(X685,fun(X683,X687)),X690),s(X685,X691)))))))) )),
  inference(superposition,[],[f360,f368])).
fof(f45106,plain,(
  ( ! [X666,X668,X670,X681,X677,X679,X673,X675,X667,X669,X671,X680,X676,X678,X672,X674] : (s(fun(X676,fun(X677,X678)),happ(s(fun(X669,fun(X676,fun(X677,X678))),'_dst_x000x100x011_3'(s(fun(fun(X666,fun(X667,X668)),fun(X679,X678)),X680),s(fun(X669,fun(X666,fun(X667,X668))),'_dst_x000x110x101_3'(s(fun(X670,fun(X671,X668)),X672),s(fun(X669,fun(X666,X670)),X673),s(fun(X669,fun(X667,X671)),X674))),s(fun(X676,fun(X677,X679)),X681))),s(X669,X675))) = s(fun(X676,fun(X677,X678)),'_dst_x00x00x11_3'(s(fun(fun(X666,fun(X667,X668)),fun(X679,X678)),X680),s(fun(X666,fun(X667,X668)),'_dst_x00x10x01_3'(s(fun(X670,fun(X671,X668)),X672),s(fun(X666,X670),happ(s(fun(X669,fun(X666,X670)),X673),s(X669,X675))),s(fun(X667,X671),happ(s(fun(X669,fun(X667,X671)),X674),s(X669,X675))))),s(fun(X676,fun(X677,X679)),X681)))) )),
  inference(superposition,[],[f366,f368])).
fof(f45090,plain,(
  ( ! [X445,X447,X441,X443,X449,X451,X444,X446,X440,X442,X452,X448,X450] : (s(fun(X441,X442),happ(s(fun(X449,fun(X441,X442)),'_dst_x0x1x1_3'(s(fun(X443,fun(X440,fun(X441,X442))),'_dst_x000x110x101_3'(s(fun(X444,fun(X445,X442)),X446),s(fun(X443,fun(X440,X444)),X447),s(fun(X443,fun(X441,X445)),X448))),s(fun(X449,X443),X450),s(fun(X449,X440),X452))),s(X449,X451))) = s(fun(X441,X442),happ(s(fun(X440,fun(X441,X442)),'_dst_x00x10x01_3'(s(fun(X444,fun(X445,X442)),X446),s(fun(X440,X444),happ(s(fun(X443,fun(X440,X444)),X447),s(X443,happ(s(fun(X449,X443),X450),s(X449,X451))))),s(fun(X441,X445),happ(s(fun(X443,fun(X441,X445)),X448),s(X443,happ(s(fun(X449,X443),X450),s(X449,X451))))))),s(X440,happ(s(fun(X449,X440),X452),s(X449,X451)))))) )),
  inference(superposition,[],[f360,f368])).
fof(f45089,plain,(
  ( ! [X428,X430,X426,X436,X438,X432,X434,X429,X431,X427,X437,X439,X433,X435] : (s(fun(X426,X436),happ(s(fun(X429,fun(X426,X436)),'_dst_x00x11x11_3'(s(fun(fun(X427,X428),fun(X437,X436)),X438),s(fun(X429,fun(X426,fun(X427,X428))),'_dst_x000x110x101_3'(s(fun(X430,fun(X431,X428)),X432),s(fun(X429,fun(X426,X430)),X433),s(fun(X429,fun(X427,X431)),X434))),s(fun(X429,fun(X426,X437)),X439))),s(X429,X435))) = s(fun(X426,X436),'_dst_x0x1x1_3'(s(fun(fun(X427,X428),fun(X437,X436)),X438),s(fun(X426,fun(X427,X428)),'_dst_x00x10x01_3'(s(fun(X430,fun(X431,X428)),X432),s(fun(X426,X430),happ(s(fun(X429,fun(X426,X430)),X433),s(X429,X435))),s(fun(X427,X431),happ(s(fun(X429,fun(X427,X431)),X434),s(X429,X435))))),s(fun(X426,X437),happ(s(fun(X429,fun(X426,X437)),X439),s(X429,X435)))))) )),
  inference(superposition,[],[f365,f368])).
fof(f45088,plain,(
  ( ! [X412,X414,X420,X422,X416,X418,X424,X413,X415,X421,X423,X417,X419,X425] : (s(fun(X412,X422),happ(s(fun(X415,fun(X412,X422)),'_dst_x00x11x11_3'(s(fun(X423,fun(fun(X413,X414),X422)),X424),s(fun(X415,fun(X412,X423)),X425),s(fun(X415,fun(X412,fun(X413,X414))),'_dst_x000x110x101_3'(s(fun(X416,fun(X417,X414)),X418),s(fun(X415,fun(X412,X416)),X419),s(fun(X415,fun(X413,X417)),X420))))),s(X415,X421))) = s(fun(X412,X422),'_dst_x0x1x1_3'(s(fun(X423,fun(fun(X413,X414),X422)),X424),s(fun(X412,X423),happ(s(fun(X415,fun(X412,X423)),X425),s(X415,X421))),s(fun(X412,fun(X413,X414)),'_dst_x00x10x01_3'(s(fun(X416,fun(X417,X414)),X418),s(fun(X412,X416),happ(s(fun(X415,fun(X412,X416)),X419),s(X415,X421))),s(fun(X413,X417),happ(s(fun(X415,fun(X413,X417)),X420),s(X415,X421)))))))) )),
  inference(superposition,[],[f365,f368])).
fof(f45087,plain,(
  ( ! [X408,X410,X399,X405,X407,X401,X403,X409,X411,X398,X404,X406,X400,X402] : (s(fun(X398,X408),happ(s(fun(X401,fun(X398,X408)),'_dst_x00x01x11_3'(s(fun(X409,fun(fun(X399,X400),X408)),X410),s(fun(X398,X409),X411),s(fun(X401,fun(X398,fun(X399,X400))),'_dst_x000x110x101_3'(s(fun(X402,fun(X403,X400)),X404),s(fun(X401,fun(X398,X402)),X405),s(fun(X401,fun(X399,X403)),X406))))),s(X401,X407))) = s(fun(X398,X408),'_dst_x0x1x1_3'(s(fun(X409,fun(fun(X399,X400),X408)),X410),s(fun(X398,X409),X411),s(fun(X398,fun(X399,X400)),'_dst_x00x10x01_3'(s(fun(X402,fun(X403,X400)),X404),s(fun(X398,X402),happ(s(fun(X401,fun(X398,X402)),X405),s(X401,X407))),s(fun(X399,X403),happ(s(fun(X401,fun(X399,X403)),X406),s(X401,X407)))))))) )),
  inference(superposition,[],[f364,f368])).
fof(f45086,plain,(
  ( ! [X389,X391,X385,X387,X397,X393,X395,X388,X390,X384,X386,X396,X392,X394] : (s(fun(X384,X394),happ(s(fun(X387,fun(X384,X394)),'_dst_x00x00x11_3'(s(fun(X395,fun(fun(X385,X386),X394)),X396),s(X395,X397),s(fun(X387,fun(X384,fun(X385,X386))),'_dst_x000x110x101_3'(s(fun(X388,fun(X389,X386)),X390),s(fun(X387,fun(X384,X388)),X391),s(fun(X387,fun(X385,X389)),X392))))),s(X387,X393))) = s(fun(X384,X394),'_dst_x0x0x1_3'(s(fun(X395,fun(fun(X385,X386),X394)),X396),s(X395,X397),s(fun(X384,fun(X385,X386)),'_dst_x00x10x01_3'(s(fun(X388,fun(X389,X386)),X390),s(fun(X384,X388),happ(s(fun(X387,fun(X384,X388)),X391),s(X387,X393))),s(fun(X385,X389),happ(s(fun(X387,fun(X385,X389)),X392),s(X387,X393)))))))) )),
  inference(superposition,[],[f363,f368])).
fof(f45085,plain,(
  ( ! [X383,X377,X379,X372,X374,X380,X382,X376,X378,X373,X375,X371,X381] : (s(fun(X372,X373),happ(s(fun(X381,fun(X372,X373)),'_dst_x0x0x1_3'(s(fun(X374,fun(X371,fun(X372,X373))),'_dst_x000x110x101_3'(s(fun(X375,fun(X376,X373)),X377),s(fun(X374,fun(X371,X375)),X378),s(fun(X374,fun(X372,X376)),X379))),s(X374,X380),s(fun(X381,X371),X382))),s(X381,X383))) = s(fun(X372,X373),happ(s(fun(X371,fun(X372,X373)),'_dst_x00x10x01_3'(s(fun(X375,fun(X376,X373)),X377),s(fun(X371,X375),happ(s(fun(X374,fun(X371,X375)),X378),s(X374,X380))),s(fun(X372,X376),happ(s(fun(X374,fun(X372,X376)),X379),s(X374,X380))))),s(X371,happ(s(fun(X381,X371),X382),s(X381,X383)))))) )),
  inference(superposition,[],[f359,f368])).
fof(f45084,plain,(
  ( ! [X364,X366,X360,X362,X368,X370,X359,X365,X367,X361,X363,X369] : (s(fun(X359,X369),happ(s(fun(X362,fun(X359,X369)),'_dst_x00x11_2'(s(fun(fun(X360,X361),X369),X370),s(fun(X362,fun(X359,fun(X360,X361))),'_dst_x000x110x101_3'(s(fun(X363,fun(X364,X361)),X365),s(fun(X362,fun(X359,X363)),X366),s(fun(X362,fun(X360,X364)),X367))))),s(X362,X368))) = s(fun(X359,X369),'_dst_x0x1_2'(s(fun(fun(X360,X361),X369),X370),s(fun(X359,fun(X360,X361)),'_dst_x00x10x01_3'(s(fun(X363,fun(X364,X361)),X365),s(fun(X359,X363),happ(s(fun(X362,fun(X359,X363)),X366),s(X362,X368))),s(fun(X360,X364),happ(s(fun(X362,fun(X360,X364)),X367),s(X362,X368)))))))) )),
  inference(superposition,[],[f358,f368])).
fof(f45083,plain,(
  ( ! [X350,X356,X358,X352,X354,X349,X351,X357,X353,X355,X348] : (s(fun(X349,X350),happ(s(fun(X351,fun(X349,X350)),'_dst_x1x0_2'(s(fun(X351,fun(X348,fun(X349,X350))),'_dst_x000x110x101_3'(s(fun(X352,fun(X353,X350)),X354),s(fun(X351,fun(X348,X352)),X355),s(fun(X351,fun(X349,X353)),X356))),s(X348,X358))),s(X351,X357))) = s(fun(X349,X350),happ(s(fun(X348,fun(X349,X350)),'_dst_x00x10x01_3'(s(fun(X352,fun(X353,X350)),X354),s(fun(X348,X352),happ(s(fun(X351,fun(X348,X352)),X355),s(X351,X357))),s(fun(X349,X353),happ(s(fun(X351,fun(X349,X353)),X356),s(X351,X357))))),s(X348,X358)))) )),
  inference(superposition,[],[f341,f368])).
fof(f45061,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X48,X38,X46,X44,X42,X40] : (s(fun(X37,fun(X38,X47)),happ(s(fun(X40,fun(X37,fun(X38,X47))),'_dst_x000x111_2'(s(fun(X39,X47),X48),s(fun(X40,fun(X37,fun(X38,X39))),'_dst_x000x110x101_3'(s(fun(X41,fun(X42,X39)),X43),s(fun(X40,fun(X37,X41)),X44),s(fun(X40,fun(X38,X42)),X45))))),s(X40,X46))) = s(fun(X37,fun(X38,X47)),'_dst_x00x11_2'(s(fun(X39,X47),X48),s(fun(X37,fun(X38,X39)),'_dst_x00x10x01_3'(s(fun(X41,fun(X42,X39)),X43),s(fun(X37,X41),happ(s(fun(X40,fun(X37,X41)),X44),s(X40,X46))),s(fun(X38,X42),happ(s(fun(X40,fun(X38,X42)),X45),s(X40,X46)))))))) )),
  inference(superposition,[],[f361,f368])).
fof(f45060,plain,(
  ( ! [X30,X28,X26,X24,X35,X33,X23,X31,X29,X27,X25,X36,X34,X32] : (s(fun(X23,fun(X24,X33)),happ(s(fun(X26,fun(X23,fun(X24,X33))),'_dst_x000x111x011_3'(s(fun(X25,fun(X34,X33)),X35),s(fun(X26,fun(X23,fun(X24,X25))),'_dst_x000x110x101_3'(s(fun(X27,fun(X28,X25)),X29),s(fun(X26,fun(X23,X27)),X30),s(fun(X26,fun(X24,X28)),X31))),s(fun(X23,fun(X24,X34)),X36))),s(X26,X32))) = s(fun(X23,fun(X24,X33)),'_dst_x00x11x11_3'(s(fun(X25,fun(X34,X33)),X35),s(fun(X23,fun(X24,X25)),'_dst_x00x10x01_3'(s(fun(X27,fun(X28,X25)),X29),s(fun(X23,X27),happ(s(fun(X26,fun(X23,X27)),X30),s(X26,X32))),s(fun(X24,X28),happ(s(fun(X26,fun(X24,X28)),X31),s(X26,X32))))),s(fun(X23,fun(X24,X34)),X36)))) )),
  inference(superposition,[],[f367,f368])).
fof(f45057,plain,(
  ( ! [X261,X255,X263,X259,X257,X260,X254,X262,X258,X256] : (s(fun(X259,fun(X254,X260)),'_dst_x00x10x01_3'(s(fun(X261,fun(X255,X260)),X262),s(fun(X259,X261),happ(s(fun('type.num.num',fun(X259,X261)),X263),s('type.num.num',X258))),s(fun(X254,X255),'const.ind_type.FCONS_3'(s(fun(X254,X255),X257),s(fun('type.num.num',fun(X254,X255)),X256),s('type.num.num',X258))))) = s(fun(X259,fun(X254,X260)),happ(s(fun('type.num.num',fun(X259,fun(X254,X260))),'_dst_x000x110x101_3'(s(fun(X261,fun(X255,X260)),X262),s(fun('type.num.num',fun(X259,X261)),X263),s(fun('type.num.num',fun(X254,X255)),happ(s(fun(fun(X254,X255),fun('type.num.num',fun(X254,X255))),'_dst_x1x0_2'(s(fun(fun(X254,X255),fun(fun('type.num.num',fun(X254,X255)),fun('type.num.num',fun(X254,X255)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X254,X255)),X256))),s(fun(X254,X255),X257))))),s('type.num.num',X258)))) )),
  inference(superposition,[],[f368,f377])).
fof(f45056,plain,(
  ( ! [X253,X251,X249,X246,X244,X252,X250,X248,X247,X245] : (s(fun(X249,fun(X244,X250)),'_dst_x00x10x01_3'(s(fun(X251,fun(X245,X250)),X252),s(fun(X249,X251),happ(s(fun(fun(X246,fun(X244,X245)),fun(X249,X251)),X253),s(fun(X246,fun(X244,X245)),X248))),s(fun(X244,X245),happ(s(fun(X246,fun(X244,X245)),X248),s(X246,X247))))) = s(fun(X249,fun(X244,X250)),happ(s(fun(fun(X246,fun(X244,X245)),fun(X249,fun(X244,X250))),'_dst_x000x110x101_3'(s(fun(X251,fun(X245,X250)),X252),s(fun(fun(X246,fun(X244,X245)),fun(X249,X251)),X253),s(fun(fun(X246,fun(X244,X245)),fun(X244,X245)),'_dstsel_0_x0_1'(s(X246,X247))))),s(fun(X246,fun(X244,X245)),X248)))) )),
  inference(superposition,[],[f368,f333])).
fof(f45055,plain,(
  ( ! [X243,X241,X231,X239,X237,X235,X233,X242,X240,X230,X238,X236,X234,X232] : (s(fun(X239,fun(X230,X240)),happ(s(fun(X232,fun(X239,fun(X230,X240))),'_dst_x000x110x101_3'(s(fun(X241,fun(X231,X240)),X242),s(fun(X232,fun(X239,X241)),X243),s(fun(X232,fun(X230,X231)),'_dst_x0x0x1_3'(s(fun(X233,fun(X234,fun(X230,X231))),X235),s(X233,X236),s(fun(X232,X234),X237))))),s(X232,X238))) = s(fun(X239,fun(X230,X240)),'_dst_x00x10x01_3'(s(fun(X241,fun(X231,X240)),X242),s(fun(X239,X241),happ(s(fun(X232,fun(X239,X241)),X243),s(X232,X238))),s(fun(X230,X231),happ(s(fun(X234,fun(X230,X231)),happ(s(fun(X233,fun(X234,fun(X230,X231))),X235),s(X233,X236))),s(X234,happ(s(fun(X232,X234),X237),s(X232,X238)))))))) )),
  inference(superposition,[],[f368,f359])).
fof(f45054,plain,(
  ( ! [X218,X222,X220,X229,X227,X225,X219,X223,X221,X228,X226,X224] : (s(fun(X225,fun(X218,X226)),happ(s(fun(X220,fun(X225,fun(X218,X226))),'_dst_x000x110x101_3'(s(fun(X227,fun(X219,X226)),X228),s(fun(X220,fun(X225,X227)),X229),s(fun(X220,fun(X218,X219)),'_dst_x1x0_2'(s(fun(X220,fun(X221,fun(X218,X219))),X222),s(X221,X223))))),s(X220,X224))) = s(fun(X225,fun(X218,X226)),'_dst_x00x10x01_3'(s(fun(X227,fun(X219,X226)),X228),s(fun(X225,X227),happ(s(fun(X220,fun(X225,X227)),X229),s(X220,X224))),s(fun(X218,X219),happ(s(fun(X221,fun(X218,X219)),happ(s(fun(X220,fun(X221,fun(X218,X219))),X222),s(X220,X224))),s(X221,X223)))))) )),
  inference(superposition,[],[f368,f341])).
fof(f45053,plain,(
  ( ! [X212,X210,X208,X216,X215,X213,X211,X209,X217,X214] : (s(fun(X213,fun(X208,X214)),'_dst_x00x10x01_3'(s(fun(X215,fun(X209,X214)),X216),s(fun(X213,X215),happ(s(fun(X210,fun(X213,X215)),X217),s(X210,X212))),s(fun(X208,X209),X211))) = s(fun(X213,fun(X208,X214)),happ(s(fun(X210,fun(X213,fun(X208,X214))),'_dst_x000x110x101_3'(s(fun(X215,fun(X209,X214)),X216),s(fun(X210,fun(X213,X215)),X217),s(fun(X210,fun(X208,X209)),'_dst_x0_1'(s(fun(X208,X209),X211))))),s(X210,X212)))) )),
  inference(superposition,[],[f368,f330])).
fof(f45052,plain,(
  ( ! [X198,X196,X206,X204,X202,X200,X199,X197,X207,X205,X203,X201] : (s(fun(X203,fun(X196,X204)),happ(s(fun(X198,fun(X203,fun(X196,X204))),'_dst_x000x110x101_3'(s(fun(X205,fun(X197,X204)),X206),s(fun(X198,fun(X203,X205)),X207),s(fun(X198,fun(X196,X197)),'_dst_x0x1_2'(s(fun(X199,fun(X196,X197)),X200),s(fun(X198,X199),X201))))),s(X198,X202))) = s(fun(X203,fun(X196,X204)),'_dst_x00x10x01_3'(s(fun(X205,fun(X197,X204)),X206),s(fun(X203,X205),happ(s(fun(X198,fun(X203,X205)),X207),s(X198,X202))),s(fun(X196,X197),happ(s(fun(X199,fun(X196,X197)),X200),s(X199,happ(s(fun(X198,X199),X201),s(X198,X202)))))))) )),
  inference(superposition,[],[f368,f340])).
fof(f45051,plain,(
  ( ! [X191,X189,X187,X185,X194,X192,X182,X190,X188,X186,X184,X193,X195,X183] : (s(fun(X191,fun(X182,X192)),happ(s(fun(X184,fun(X191,fun(X182,X192))),'_dst_x000x110x101_3'(s(fun(X193,fun(X183,X192)),X194),s(fun(X184,fun(X191,X193)),X195),s(fun(X184,fun(X182,X183)),happ(s(fun(X185,fun(X184,fun(X182,X183))),X186),s(X185,happ(s(fun(X187,X185),X188),s(X187,X189))))))),s(X184,happ(s(fun(X187,X184),X190),s(X187,X189))))) = s(fun(X191,fun(X182,X192)),'_dst_x00x10x01_3'(s(fun(X193,fun(X183,X192)),X194),s(fun(X191,X193),happ(s(fun(X184,fun(X191,X193)),X195),s(X184,happ(s(fun(X187,X184),X190),s(X187,X189))))),s(fun(X182,X183),happ(s(fun(X187,fun(X182,X183)),'_dst_x0x1x1_3'(s(fun(X185,fun(X184,fun(X182,X183))),X186),s(fun(X187,X185),X188),s(fun(X187,X184),X190))),s(X187,X189)))))) )),
  inference(superposition,[],[f368,f360])).
fof(f45050,plain,(
  ( ! [X177,X175,X173,X171,X169,X180,X178,X176,X174,X172,X170,X168,X181,X179] : (s(fun(X177,fun(X168,X178)),happ(s(fun(X170,fun(X177,fun(X168,X178))),'_dst_x000x110x101_3'(s(fun(X179,fun(X169,X178)),X180),s(fun(X170,fun(X177,X179)),X181),s(fun(X170,fun(X168,X169)),happ(s(fun(X171,fun(X170,fun(X168,X169))),X172),s(X171,X173))))),s(X170,happ(s(fun(X174,X170),X175),s(X174,X176))))) = s(fun(X177,fun(X168,X178)),'_dst_x00x10x01_3'(s(fun(X179,fun(X169,X178)),X180),s(fun(X177,X179),happ(s(fun(X170,fun(X177,X179)),X181),s(X170,happ(s(fun(X174,X170),X175),s(X174,X176))))),s(fun(X168,X169),happ(s(fun(X174,fun(X168,X169)),'_dst_x0x0x1_3'(s(fun(X171,fun(X170,fun(X168,X169))),X172),s(X171,X173),s(fun(X174,X170),X175))),s(X174,X176)))))) )),
  inference(superposition,[],[f368,f359])).
fof(f45049,plain,(
  ( ! [X158,X156,X167,X165,X163,X161,X159,X157,X166,X164,X162,X160] : (s(fun(X163,fun(X156,X164)),happ(s(fun(X158,fun(X163,fun(X156,X164))),'_dst_x000x110x101_3'(s(fun(X165,fun(X157,X164)),X166),s(fun(X158,fun(X163,X165)),X167),s(fun(X158,fun(X156,X157)),happ(s(fun(X159,fun(X158,fun(X156,X157))),X160),s(X159,X161))))),s(X158,X162))) = s(fun(X163,fun(X156,X164)),'_dst_x00x10x01_3'(s(fun(X165,fun(X157,X164)),X166),s(fun(X163,X165),happ(s(fun(X158,fun(X163,X165)),X167),s(X158,X162))),s(fun(X156,X157),happ(s(fun(X159,fun(X156,X157)),'_dst_x1x0_2'(s(fun(X159,fun(X158,fun(X156,X157))),X160),s(X158,X162))),s(X159,X161)))))) )),
  inference(superposition,[],[f368,f341])).
fof(f45048,plain,(
  ( ! [X146,X144,X154,X152,X151,X149,X147,X145,X155,X153,X150,X148] : (s(fun(X151,fun(X144,X152)),happ(s(fun(X146,fun(X151,fun(X144,X152))),'_dst_x000x110x101_3'(s(fun(X153,fun(X145,X152)),X154),s(fun(X146,fun(X151,X153)),X155),s(fun(X146,fun(X144,X145)),X147))),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150))))) = s(fun(X151,fun(X144,X152)),'_dst_x00x10x01_3'(s(fun(X153,fun(X145,X152)),X154),s(fun(X151,X153),happ(s(fun(X146,fun(X151,X153)),X155),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150))))),s(fun(X144,X145),happ(s(fun(X148,fun(X144,X145)),'_dst_x0x1_2'(s(fun(X146,fun(X144,X145)),X147),s(fun(X148,X146),X149))),s(X148,X150)))))) )),
  inference(superposition,[],[f368,f340])).
fof(f45047,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s(fun(X139,fun(X136,X140)),'_dst_x00x10x01_3'(s(fun(X141,fun(X137,X140)),X142),s(fun(X139,X141),happ(s(fun(fun(X136,X137),fun(X139,X141)),X143),s(fun(X136,X137),X138))),s(fun(X136,X137),X138))) = s(fun(X139,fun(X136,X140)),happ(s(fun(fun(X136,X137),fun(X139,fun(X136,X140))),'_dst_x000x110x101_3'(s(fun(X141,fun(X137,X140)),X142),s(fun(fun(X136,X137),fun(X139,X141)),X143),s(fun(fun(X136,X137),fun(X136,X137)),'_i_0_0'))),s(fun(X136,X137),X138)))) )),
  inference(superposition,[],[f368,f290])).
fof(f45046,plain,(
  ( ! [X127,X125,X123,X121,X134,X132,X130,X128,X126,X124,X122,X135,X133,X131,X129] : (s(fun(X131,fun(X121,X132)),happ(s(fun(X124,fun(X131,fun(X121,X132))),'_dst_x000x110x101_3'(s(fun(X133,fun(fun(X122,X123),X132)),X134),s(fun(X124,fun(X131,X133)),X135),s(fun(X124,fun(X121,fun(X122,X123))),'_dst_x000x111x011_3'(s(fun(X125,fun(X126,X123)),X127),s(fun(X124,fun(X121,fun(X122,X125))),X128),s(fun(X121,fun(X122,X126)),X129))))),s(X124,X130))) = s(fun(X131,fun(X121,X132)),'_dst_x00x10x01_3'(s(fun(X133,fun(fun(X122,X123),X132)),X134),s(fun(X131,X133),happ(s(fun(X124,fun(X131,X133)),X135),s(X124,X130))),s(fun(X121,fun(X122,X123)),'_dst_x00x11x11_3'(s(fun(X125,fun(X126,X123)),X127),s(fun(X121,fun(X122,X125)),happ(s(fun(X124,fun(X121,fun(X122,X125))),X128),s(X124,X130))),s(fun(X121,fun(X122,X126)),X129)))))) )),
  inference(superposition,[],[f368,f367])).
fof(f45045,plain,(
  ( ! [X111,X109,X118,X116,X114,X112,X120,X110,X108,X119,X117,X115,X113] : (s(fun(X116,fun(X108,X117)),happ(s(fun(X111,fun(X116,fun(X108,X117))),'_dst_x000x110x101_3'(s(fun(X118,fun(fun(X109,X110),X117)),X119),s(fun(X111,fun(X116,X118)),X120),s(fun(X111,fun(X108,fun(X109,X110))),'_dst_x000x111_2'(s(fun(X112,X110),X113),s(fun(X111,fun(X108,fun(X109,X112))),X114))))),s(X111,X115))) = s(fun(X116,fun(X108,X117)),'_dst_x00x10x01_3'(s(fun(X118,fun(fun(X109,X110),X117)),X119),s(fun(X116,X118),happ(s(fun(X111,fun(X116,X118)),X120),s(X111,X115))),s(fun(X108,fun(X109,X110)),'_dst_x00x11_2'(s(fun(X112,X110),X113),s(fun(X108,fun(X109,X112)),happ(s(fun(X111,fun(X108,fun(X109,X112))),X114),s(X111,X115)))))))) )),
  inference(superposition,[],[f368,f361])).
fof(f45044,plain,(
  ( ! [X94,X103,X101,X99,X97,X107,X105,X95,X93,X102,X100,X98,X96,X106,X104] : (s(fun(X103,fun(X93,X104)),happ(s(fun(X96,fun(X103,fun(X93,X104))),'_dst_x000x110x101_3'(s(fun(X105,fun(fun(X94,X95),X104)),X106),s(fun(X96,fun(X103,X105)),X107),s(fun(X96,fun(X93,fun(X94,X95))),'_dst_x000x110x101_3'(s(fun(X97,fun(X98,X95)),X99),s(fun(X96,fun(X93,X97)),X100),s(fun(X96,fun(X94,X98)),X101))))),s(X96,X102))) = s(fun(X103,fun(X93,X104)),'_dst_x00x10x01_3'(s(fun(X105,fun(fun(X94,X95),X104)),X106),s(fun(X103,X105),happ(s(fun(X96,fun(X103,X105)),X107),s(X96,X102))),s(fun(X93,fun(X94,X95)),'_dst_x00x10x01_3'(s(fun(X97,fun(X98,X95)),X99),s(fun(X93,X97),happ(s(fun(X96,fun(X93,X97)),X100),s(X96,X102))),s(fun(X94,X98),happ(s(fun(X96,fun(X94,X98)),X101),s(X96,X102)))))))) )),
  inference(superposition,[],[f368,f368])).
fof(f45043,plain,(
  ( ! [X80,X92,X90,X88,X78,X87,X85,X83,X81,X91,X89,X79,X86,X84,X82] : (s(fun(X88,fun(X78,X89)),happ(s(fun(X81,fun(X88,fun(X78,X89))),'_dst_x000x110x101_3'(s(fun(X90,fun(fun(X79,X80),X89)),X91),s(fun(X81,fun(X88,X90)),X92),s(fun(X81,fun(X78,fun(X79,X80))),'_dst_x000x100x011_3'(s(fun(X82,fun(X83,X80)),X84),s(fun(X81,X82),X85),s(fun(X78,fun(X79,X83)),X86))))),s(X81,X87))) = s(fun(X88,fun(X78,X89)),'_dst_x00x10x01_3'(s(fun(X90,fun(fun(X79,X80),X89)),X91),s(fun(X88,X90),happ(s(fun(X81,fun(X88,X90)),X92),s(X81,X87))),s(fun(X78,fun(X79,X80)),'_dst_x00x00x11_3'(s(fun(X82,fun(X83,X80)),X84),s(X82,happ(s(fun(X81,X82),X85),s(X81,X87))),s(fun(X78,fun(X79,X83)),X86)))))) )),
  inference(superposition,[],[f368,f366])).
fof(f45042,plain,(
  ( ! [X70,X68,X66,X64,X76,X74,X72,X71,X69,X67,X65,X77,X75,X73] : (s(fun(X73,fun(X64,X74)),happ(s(fun(X66,fun(X73,fun(X64,X74))),'_dst_x000x110x101_3'(s(fun(X75,fun(X65,X74)),X76),s(fun(X66,fun(X73,X75)),X77),s(fun(X66,fun(X64,X65)),'_dst_x00x00x11_3'(s(fun(X67,fun(X68,X65)),X69),s(X67,X70),s(fun(X66,fun(X64,X68)),X71))))),s(X66,X72))) = s(fun(X73,fun(X64,X74)),'_dst_x00x10x01_3'(s(fun(X75,fun(X65,X74)),X76),s(fun(X73,X75),happ(s(fun(X66,fun(X73,X75)),X77),s(X66,X72))),s(fun(X64,X65),'_dst_x0x0x1_3'(s(fun(X67,fun(X68,X65)),X69),s(X67,X70),s(fun(X64,X68),happ(s(fun(X66,fun(X64,X68)),X71),s(X66,X72)))))))) )),
  inference(superposition,[],[f368,f363])).
fof(f45041,plain,(
  ( ! [X61,X59,X57,X54,X52,X50,X62,X60,X58,X56,X55,X53,X51,X63] : (s(fun(X59,fun(X50,X60)),happ(s(fun(X52,fun(X59,fun(X50,X60))),'_dst_x000x110x101_3'(s(fun(X61,fun(X51,X60)),X62),s(fun(X52,fun(X59,X61)),X63),s(fun(X52,fun(X50,X51)),'_dst_x00x11x11_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X52,fun(X50,X53)),X56),s(fun(X52,fun(X50,X54)),X57))))),s(X52,X58))) = s(fun(X59,fun(X50,X60)),'_dst_x00x10x01_3'(s(fun(X61,fun(X51,X60)),X62),s(fun(X59,X61),happ(s(fun(X52,fun(X59,X61)),X63),s(X52,X58))),s(fun(X50,X51),'_dst_x0x1x1_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X50,X53),happ(s(fun(X52,fun(X50,X53)),X56),s(X52,X58))),s(fun(X50,X54),happ(s(fun(X52,fun(X50,X54)),X57),s(X52,X58)))))))) )),
  inference(superposition,[],[f368,f365])).
fof(f45040,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X48,X38,X36,X46,X44,X42,X40,X49] : (s(fun(X45,fun(X36,X46)),happ(s(fun(X38,fun(X45,fun(X36,X46))),'_dst_x000x110x101_3'(s(fun(X47,fun(X37,X46)),X48),s(fun(X38,fun(X45,X47)),X49),s(fun(X38,fun(X36,X37)),'_dst_x00x01x11_3'(s(fun(X39,fun(X40,X37)),X41),s(fun(X36,X39),X42),s(fun(X38,fun(X36,X40)),X43))))),s(X38,X44))) = s(fun(X45,fun(X36,X46)),'_dst_x00x10x01_3'(s(fun(X47,fun(X37,X46)),X48),s(fun(X45,X47),happ(s(fun(X38,fun(X45,X47)),X49),s(X38,X44))),s(fun(X36,X37),'_dst_x0x1x1_3'(s(fun(X39,fun(X40,X37)),X41),s(fun(X36,X39),X42),s(fun(X36,X40),happ(s(fun(X38,fun(X36,X40)),X43),s(X38,X44)))))))) )),
  inference(superposition,[],[f368,f364])).
fof(f45039,plain,(
  ( ! [X30,X28,X26,X24,X35,X33,X31,X29,X27,X25,X34,X32] : (s(fun(X31,fun(X24,X32)),happ(s(fun(X26,fun(X31,fun(X24,X32))),'_dst_x000x110x101_3'(s(fun(X33,fun(X25,X32)),X34),s(fun(X26,fun(X31,X33)),X35),s(fun(X26,fun(X24,X25)),'_dst_x00x11_2'(s(fun(X27,X25),X28),s(fun(X26,fun(X24,X27)),X29))))),s(X26,X30))) = s(fun(X31,fun(X24,X32)),'_dst_x00x10x01_3'(s(fun(X33,fun(X25,X32)),X34),s(fun(X31,X33),happ(s(fun(X26,fun(X31,X33)),X35),s(X26,X30))),s(fun(X24,X25),'_dst_x0x1_2'(s(fun(X27,X25),X28),s(fun(X24,X27),happ(s(fun(X26,fun(X24,X27)),X29),s(X26,X30)))))))) )),
  inference(superposition,[],[f368,f358])).
fof(f45038,plain,(
  ( ! [X14,X12,X10,X23,X21,X19,X17,X15,X13,X11,X22,X20,X18,X16] : (s(fun(X19,fun(X10,X20)),happ(s(fun(X12,fun(X19,fun(X10,X20))),'_dst_x000x110x101_3'(s(fun(X21,fun(X11,X20)),X22),s(fun(X12,fun(X19,X21)),X23),s(fun(X12,fun(X10,X11)),'_dst_x00x10x01_3'(s(fun(X13,fun(X14,X11)),X15),s(fun(X12,X13),X16),s(fun(X10,X14),X17))))),s(X12,X18))) = s(fun(X19,fun(X10,X20)),'_dst_x00x10x01_3'(s(fun(X21,fun(X11,X20)),X22),s(fun(X19,X21),happ(s(fun(X12,fun(X19,X21)),X23),s(X12,X18))),s(fun(X10,X11),'_dst_x0x0x1_3'(s(fun(X13,fun(X14,X11)),X15),s(X13,happ(s(fun(X12,X13),X16),s(X12,X18))),s(fun(X10,X14),X17)))))) )),
  inference(superposition,[],[f368,f362])).
fof(f45037,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(X5,fun(fun(X0,X1),X6)),'_dst_x00x10x01_3'(s(fun(X7,fun(X1,X6)),X8),s(fun(X5,X7),happ(s(fun(X2,fun(X5,X7)),X9),s(X2,X4))),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s(fun(X5,fun(fun(X0,X1),X6)),happ(s(fun(X2,fun(X5,fun(fun(X0,X1),X6))),'_dst_x000x110x101_3'(s(fun(X7,fun(X1,X6)),X8),s(fun(X2,fun(X5,X7)),X9),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4)))) )),
  inference(superposition,[],[f368,f339])).
fof(f44887,plain,(
  ( ! [X255,X261,X257,X259,X263,X260,X254,X262,X256,X258] : (s(fun(X254,fun(X259,X260)),'_dst_x00x10x01_3'(s(fun(X255,fun(X261,X260)),X262),s(fun(X254,X255),'const.ind_type.FCONS_3'(s(fun(X254,X255),X257),s(fun('type.num.num',fun(X254,X255)),X256),s('type.num.num',X258))),s(fun(X259,X261),happ(s(fun('type.num.num',fun(X259,X261)),X263),s('type.num.num',X258))))) = s(fun(X254,fun(X259,X260)),happ(s(fun('type.num.num',fun(X254,fun(X259,X260))),'_dst_x000x110x101_3'(s(fun(X255,fun(X261,X260)),X262),s(fun('type.num.num',fun(X254,X255)),happ(s(fun(fun(X254,X255),fun('type.num.num',fun(X254,X255))),'_dst_x1x0_2'(s(fun(fun(X254,X255),fun(fun('type.num.num',fun(X254,X255)),fun('type.num.num',fun(X254,X255)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X254,X255)),X256))),s(fun(X254,X255),X257))),s(fun('type.num.num',fun(X259,X261)),X263))),s('type.num.num',X258)))) )),
  inference(superposition,[],[f368,f377])).
fof(f44886,plain,(
  ( ! [X253,X251,X249,X246,X244,X252,X250,X248,X247,X245] : (s(fun(X244,fun(X249,X250)),'_dst_x00x10x01_3'(s(fun(X245,fun(X251,X250)),X252),s(fun(X244,X245),happ(s(fun(X246,fun(X244,X245)),X248),s(X246,X247))),s(fun(X249,X251),happ(s(fun(fun(X246,fun(X244,X245)),fun(X249,X251)),X253),s(fun(X246,fun(X244,X245)),X248))))) = s(fun(X244,fun(X249,X250)),happ(s(fun(fun(X246,fun(X244,X245)),fun(X244,fun(X249,X250))),'_dst_x000x110x101_3'(s(fun(X245,fun(X251,X250)),X252),s(fun(fun(X246,fun(X244,X245)),fun(X244,X245)),'_dstsel_0_x0_1'(s(X246,X247))),s(fun(fun(X246,fun(X244,X245)),fun(X249,X251)),X253))),s(fun(X246,fun(X244,X245)),X248)))) )),
  inference(superposition,[],[f368,f333])).
fof(f44885,plain,(
  ( ! [X243,X241,X231,X239,X237,X235,X233,X242,X240,X230,X238,X236,X234,X232] : (s(fun(X230,fun(X239,X240)),happ(s(fun(X232,fun(X230,fun(X239,X240))),'_dst_x000x110x101_3'(s(fun(X231,fun(X241,X240)),X242),s(fun(X232,fun(X230,X231)),'_dst_x0x0x1_3'(s(fun(X233,fun(X234,fun(X230,X231))),X235),s(X233,X236),s(fun(X232,X234),X237))),s(fun(X232,fun(X239,X241)),X243))),s(X232,X238))) = s(fun(X230,fun(X239,X240)),'_dst_x00x10x01_3'(s(fun(X231,fun(X241,X240)),X242),s(fun(X230,X231),happ(s(fun(X234,fun(X230,X231)),happ(s(fun(X233,fun(X234,fun(X230,X231))),X235),s(X233,X236))),s(X234,happ(s(fun(X232,X234),X237),s(X232,X238))))),s(fun(X239,X241),happ(s(fun(X232,fun(X239,X241)),X243),s(X232,X238)))))) )),
  inference(superposition,[],[f368,f359])).
fof(f44884,plain,(
  ( ! [X218,X222,X220,X229,X227,X225,X219,X223,X221,X228,X226,X224] : (s(fun(X218,fun(X225,X226)),happ(s(fun(X220,fun(X218,fun(X225,X226))),'_dst_x000x110x101_3'(s(fun(X219,fun(X227,X226)),X228),s(fun(X220,fun(X218,X219)),'_dst_x1x0_2'(s(fun(X220,fun(X221,fun(X218,X219))),X222),s(X221,X223))),s(fun(X220,fun(X225,X227)),X229))),s(X220,X224))) = s(fun(X218,fun(X225,X226)),'_dst_x00x10x01_3'(s(fun(X219,fun(X227,X226)),X228),s(fun(X218,X219),happ(s(fun(X221,fun(X218,X219)),happ(s(fun(X220,fun(X221,fun(X218,X219))),X222),s(X220,X224))),s(X221,X223))),s(fun(X225,X227),happ(s(fun(X220,fun(X225,X227)),X229),s(X220,X224)))))) )),
  inference(superposition,[],[f368,f341])).
fof(f44883,plain,(
  ( ! [X212,X210,X208,X216,X215,X213,X211,X209,X217,X214] : (s(fun(X208,fun(X213,X214)),'_dst_x00x10x01_3'(s(fun(X209,fun(X215,X214)),X216),s(fun(X208,X209),X211),s(fun(X213,X215),happ(s(fun(X210,fun(X213,X215)),X217),s(X210,X212))))) = s(fun(X208,fun(X213,X214)),happ(s(fun(X210,fun(X208,fun(X213,X214))),'_dst_x000x110x101_3'(s(fun(X209,fun(X215,X214)),X216),s(fun(X210,fun(X208,X209)),'_dst_x0_1'(s(fun(X208,X209),X211))),s(fun(X210,fun(X213,X215)),X217))),s(X210,X212)))) )),
  inference(superposition,[],[f368,f330])).
fof(f44882,plain,(
  ( ! [X198,X196,X206,X204,X202,X200,X199,X197,X207,X205,X203,X201] : (s(fun(X196,fun(X203,X204)),happ(s(fun(X198,fun(X196,fun(X203,X204))),'_dst_x000x110x101_3'(s(fun(X197,fun(X205,X204)),X206),s(fun(X198,fun(X196,X197)),'_dst_x0x1_2'(s(fun(X199,fun(X196,X197)),X200),s(fun(X198,X199),X201))),s(fun(X198,fun(X203,X205)),X207))),s(X198,X202))) = s(fun(X196,fun(X203,X204)),'_dst_x00x10x01_3'(s(fun(X197,fun(X205,X204)),X206),s(fun(X196,X197),happ(s(fun(X199,fun(X196,X197)),X200),s(X199,happ(s(fun(X198,X199),X201),s(X198,X202))))),s(fun(X203,X205),happ(s(fun(X198,fun(X203,X205)),X207),s(X198,X202)))))) )),
  inference(superposition,[],[f368,f340])).
fof(f44881,plain,(
  ( ! [X191,X189,X187,X185,X194,X192,X182,X190,X188,X186,X184,X193,X195,X183] : (s(fun(X182,fun(X191,X192)),happ(s(fun(X184,fun(X182,fun(X191,X192))),'_dst_x000x110x101_3'(s(fun(X183,fun(X193,X192)),X194),s(fun(X184,fun(X182,X183)),happ(s(fun(X185,fun(X184,fun(X182,X183))),X186),s(X185,happ(s(fun(X187,X185),X188),s(X187,X189))))),s(fun(X184,fun(X191,X193)),X195))),s(X184,happ(s(fun(X187,X184),X190),s(X187,X189))))) = s(fun(X182,fun(X191,X192)),'_dst_x00x10x01_3'(s(fun(X183,fun(X193,X192)),X194),s(fun(X182,X183),happ(s(fun(X187,fun(X182,X183)),'_dst_x0x1x1_3'(s(fun(X185,fun(X184,fun(X182,X183))),X186),s(fun(X187,X185),X188),s(fun(X187,X184),X190))),s(X187,X189))),s(fun(X191,X193),happ(s(fun(X184,fun(X191,X193)),X195),s(X184,happ(s(fun(X187,X184),X190),s(X187,X189)))))))) )),
  inference(superposition,[],[f368,f360])).
fof(f44880,plain,(
  ( ! [X177,X175,X173,X171,X169,X180,X178,X176,X174,X172,X170,X168,X181,X179] : (s(fun(X168,fun(X177,X178)),happ(s(fun(X170,fun(X168,fun(X177,X178))),'_dst_x000x110x101_3'(s(fun(X169,fun(X179,X178)),X180),s(fun(X170,fun(X168,X169)),happ(s(fun(X171,fun(X170,fun(X168,X169))),X172),s(X171,X173))),s(fun(X170,fun(X177,X179)),X181))),s(X170,happ(s(fun(X174,X170),X175),s(X174,X176))))) = s(fun(X168,fun(X177,X178)),'_dst_x00x10x01_3'(s(fun(X169,fun(X179,X178)),X180),s(fun(X168,X169),happ(s(fun(X174,fun(X168,X169)),'_dst_x0x0x1_3'(s(fun(X171,fun(X170,fun(X168,X169))),X172),s(X171,X173),s(fun(X174,X170),X175))),s(X174,X176))),s(fun(X177,X179),happ(s(fun(X170,fun(X177,X179)),X181),s(X170,happ(s(fun(X174,X170),X175),s(X174,X176)))))))) )),
  inference(superposition,[],[f368,f359])).
fof(f44879,plain,(
  ( ! [X158,X156,X167,X165,X163,X161,X159,X157,X166,X164,X162,X160] : (s(fun(X156,fun(X163,X164)),happ(s(fun(X158,fun(X156,fun(X163,X164))),'_dst_x000x110x101_3'(s(fun(X157,fun(X165,X164)),X166),s(fun(X158,fun(X156,X157)),happ(s(fun(X159,fun(X158,fun(X156,X157))),X160),s(X159,X161))),s(fun(X158,fun(X163,X165)),X167))),s(X158,X162))) = s(fun(X156,fun(X163,X164)),'_dst_x00x10x01_3'(s(fun(X157,fun(X165,X164)),X166),s(fun(X156,X157),happ(s(fun(X159,fun(X156,X157)),'_dst_x1x0_2'(s(fun(X159,fun(X158,fun(X156,X157))),X160),s(X158,X162))),s(X159,X161))),s(fun(X163,X165),happ(s(fun(X158,fun(X163,X165)),X167),s(X158,X162)))))) )),
  inference(superposition,[],[f368,f341])).
fof(f44878,plain,(
  ( ! [X146,X144,X154,X152,X151,X149,X147,X145,X155,X153,X150,X148] : (s(fun(X144,fun(X151,X152)),happ(s(fun(X146,fun(X144,fun(X151,X152))),'_dst_x000x110x101_3'(s(fun(X145,fun(X153,X152)),X154),s(fun(X146,fun(X144,X145)),X147),s(fun(X146,fun(X151,X153)),X155))),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150))))) = s(fun(X144,fun(X151,X152)),'_dst_x00x10x01_3'(s(fun(X145,fun(X153,X152)),X154),s(fun(X144,X145),happ(s(fun(X148,fun(X144,X145)),'_dst_x0x1_2'(s(fun(X146,fun(X144,X145)),X147),s(fun(X148,X146),X149))),s(X148,X150))),s(fun(X151,X153),happ(s(fun(X146,fun(X151,X153)),X155),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150)))))))) )),
  inference(superposition,[],[f368,f340])).
fof(f44877,plain,(
  ( ! [X142,X140,X138,X136,X143,X141,X139,X137] : (s(fun(X136,fun(X139,X140)),'_dst_x00x10x01_3'(s(fun(X137,fun(X141,X140)),X142),s(fun(X136,X137),X138),s(fun(X139,X141),happ(s(fun(fun(X136,X137),fun(X139,X141)),X143),s(fun(X136,X137),X138))))) = s(fun(X136,fun(X139,X140)),happ(s(fun(fun(X136,X137),fun(X136,fun(X139,X140))),'_dst_x000x110x101_3'(s(fun(X137,fun(X141,X140)),X142),s(fun(fun(X136,X137),fun(X136,X137)),'_i_0_0'),s(fun(fun(X136,X137),fun(X139,X141)),X143))),s(fun(X136,X137),X138)))) )),
  inference(superposition,[],[f368,f290])).
fof(f44876,plain,(
  ( ! [X127,X125,X123,X121,X134,X132,X130,X128,X126,X124,X122,X135,X133,X131,X129] : (s(fun(X121,fun(X131,X132)),happ(s(fun(X124,fun(X121,fun(X131,X132))),'_dst_x000x110x101_3'(s(fun(fun(X122,X123),fun(X133,X132)),X134),s(fun(X124,fun(X121,fun(X122,X123))),'_dst_x000x111x011_3'(s(fun(X125,fun(X126,X123)),X127),s(fun(X124,fun(X121,fun(X122,X125))),X128),s(fun(X121,fun(X122,X126)),X129))),s(fun(X124,fun(X131,X133)),X135))),s(X124,X130))) = s(fun(X121,fun(X131,X132)),'_dst_x00x10x01_3'(s(fun(fun(X122,X123),fun(X133,X132)),X134),s(fun(X121,fun(X122,X123)),'_dst_x00x11x11_3'(s(fun(X125,fun(X126,X123)),X127),s(fun(X121,fun(X122,X125)),happ(s(fun(X124,fun(X121,fun(X122,X125))),X128),s(X124,X130))),s(fun(X121,fun(X122,X126)),X129))),s(fun(X131,X133),happ(s(fun(X124,fun(X131,X133)),X135),s(X124,X130)))))) )),
  inference(superposition,[],[f368,f367])).
fof(f44875,plain,(
  ( ! [X111,X109,X118,X116,X114,X112,X120,X110,X108,X119,X117,X115,X113] : (s(fun(X108,fun(X116,X117)),happ(s(fun(X111,fun(X108,fun(X116,X117))),'_dst_x000x110x101_3'(s(fun(fun(X109,X110),fun(X118,X117)),X119),s(fun(X111,fun(X108,fun(X109,X110))),'_dst_x000x111_2'(s(fun(X112,X110),X113),s(fun(X111,fun(X108,fun(X109,X112))),X114))),s(fun(X111,fun(X116,X118)),X120))),s(X111,X115))) = s(fun(X108,fun(X116,X117)),'_dst_x00x10x01_3'(s(fun(fun(X109,X110),fun(X118,X117)),X119),s(fun(X108,fun(X109,X110)),'_dst_x00x11_2'(s(fun(X112,X110),X113),s(fun(X108,fun(X109,X112)),happ(s(fun(X111,fun(X108,fun(X109,X112))),X114),s(X111,X115))))),s(fun(X116,X118),happ(s(fun(X111,fun(X116,X118)),X120),s(X111,X115)))))) )),
  inference(superposition,[],[f368,f361])).
fof(f44874,plain,(
  ( ! [X94,X103,X101,X99,X97,X107,X105,X95,X93,X102,X100,X98,X96,X106,X104] : (s(fun(X93,fun(X103,X104)),happ(s(fun(X96,fun(X93,fun(X103,X104))),'_dst_x000x110x101_3'(s(fun(fun(X94,X95),fun(X105,X104)),X106),s(fun(X96,fun(X93,fun(X94,X95))),'_dst_x000x110x101_3'(s(fun(X97,fun(X98,X95)),X99),s(fun(X96,fun(X93,X97)),X100),s(fun(X96,fun(X94,X98)),X101))),s(fun(X96,fun(X103,X105)),X107))),s(X96,X102))) = s(fun(X93,fun(X103,X104)),'_dst_x00x10x01_3'(s(fun(fun(X94,X95),fun(X105,X104)),X106),s(fun(X93,fun(X94,X95)),'_dst_x00x10x01_3'(s(fun(X97,fun(X98,X95)),X99),s(fun(X93,X97),happ(s(fun(X96,fun(X93,X97)),X100),s(X96,X102))),s(fun(X94,X98),happ(s(fun(X96,fun(X94,X98)),X101),s(X96,X102))))),s(fun(X103,X105),happ(s(fun(X96,fun(X103,X105)),X107),s(X96,X102)))))) )),
  inference(superposition,[],[f368,f368])).
fof(f44873,plain,(
  ( ! [X80,X92,X90,X88,X78,X87,X85,X83,X81,X91,X89,X79,X86,X84,X82] : (s(fun(X78,fun(X88,X89)),happ(s(fun(X81,fun(X78,fun(X88,X89))),'_dst_x000x110x101_3'(s(fun(fun(X79,X80),fun(X90,X89)),X91),s(fun(X81,fun(X78,fun(X79,X80))),'_dst_x000x100x011_3'(s(fun(X82,fun(X83,X80)),X84),s(fun(X81,X82),X85),s(fun(X78,fun(X79,X83)),X86))),s(fun(X81,fun(X88,X90)),X92))),s(X81,X87))) = s(fun(X78,fun(X88,X89)),'_dst_x00x10x01_3'(s(fun(fun(X79,X80),fun(X90,X89)),X91),s(fun(X78,fun(X79,X80)),'_dst_x00x00x11_3'(s(fun(X82,fun(X83,X80)),X84),s(X82,happ(s(fun(X81,X82),X85),s(X81,X87))),s(fun(X78,fun(X79,X83)),X86))),s(fun(X88,X90),happ(s(fun(X81,fun(X88,X90)),X92),s(X81,X87)))))) )),
  inference(superposition,[],[f368,f366])).
fof(f44872,plain,(
  ( ! [X70,X68,X66,X64,X76,X74,X72,X71,X69,X67,X65,X77,X75,X73] : (s(fun(X64,fun(X73,X74)),happ(s(fun(X66,fun(X64,fun(X73,X74))),'_dst_x000x110x101_3'(s(fun(X65,fun(X75,X74)),X76),s(fun(X66,fun(X64,X65)),'_dst_x00x00x11_3'(s(fun(X67,fun(X68,X65)),X69),s(X67,X70),s(fun(X66,fun(X64,X68)),X71))),s(fun(X66,fun(X73,X75)),X77))),s(X66,X72))) = s(fun(X64,fun(X73,X74)),'_dst_x00x10x01_3'(s(fun(X65,fun(X75,X74)),X76),s(fun(X64,X65),'_dst_x0x0x1_3'(s(fun(X67,fun(X68,X65)),X69),s(X67,X70),s(fun(X64,X68),happ(s(fun(X66,fun(X64,X68)),X71),s(X66,X72))))),s(fun(X73,X75),happ(s(fun(X66,fun(X73,X75)),X77),s(X66,X72)))))) )),
  inference(superposition,[],[f368,f363])).
fof(f44871,plain,(
  ( ! [X61,X59,X57,X54,X52,X50,X62,X60,X58,X56,X55,X53,X51,X63] : (s(fun(X50,fun(X59,X60)),happ(s(fun(X52,fun(X50,fun(X59,X60))),'_dst_x000x110x101_3'(s(fun(X51,fun(X61,X60)),X62),s(fun(X52,fun(X50,X51)),'_dst_x00x11x11_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X52,fun(X50,X53)),X56),s(fun(X52,fun(X50,X54)),X57))),s(fun(X52,fun(X59,X61)),X63))),s(X52,X58))) = s(fun(X50,fun(X59,X60)),'_dst_x00x10x01_3'(s(fun(X51,fun(X61,X60)),X62),s(fun(X50,X51),'_dst_x0x1x1_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X50,X53),happ(s(fun(X52,fun(X50,X53)),X56),s(X52,X58))),s(fun(X50,X54),happ(s(fun(X52,fun(X50,X54)),X57),s(X52,X58))))),s(fun(X59,X61),happ(s(fun(X52,fun(X59,X61)),X63),s(X52,X58)))))) )),
  inference(superposition,[],[f368,f365])).
fof(f44870,plain,(
  ( ! [X39,X37,X47,X45,X43,X41,X48,X38,X36,X46,X44,X42,X40,X49] : (s(fun(X36,fun(X45,X46)),happ(s(fun(X38,fun(X36,fun(X45,X46))),'_dst_x000x110x101_3'(s(fun(X37,fun(X47,X46)),X48),s(fun(X38,fun(X36,X37)),'_dst_x00x01x11_3'(s(fun(X39,fun(X40,X37)),X41),s(fun(X36,X39),X42),s(fun(X38,fun(X36,X40)),X43))),s(fun(X38,fun(X45,X47)),X49))),s(X38,X44))) = s(fun(X36,fun(X45,X46)),'_dst_x00x10x01_3'(s(fun(X37,fun(X47,X46)),X48),s(fun(X36,X37),'_dst_x0x1x1_3'(s(fun(X39,fun(X40,X37)),X41),s(fun(X36,X39),X42),s(fun(X36,X40),happ(s(fun(X38,fun(X36,X40)),X43),s(X38,X44))))),s(fun(X45,X47),happ(s(fun(X38,fun(X45,X47)),X49),s(X38,X44)))))) )),
  inference(superposition,[],[f368,f364])).
fof(f44869,plain,(
  ( ! [X30,X28,X26,X24,X35,X33,X31,X29,X27,X25,X34,X32] : (s(fun(X24,fun(X31,X32)),happ(s(fun(X26,fun(X24,fun(X31,X32))),'_dst_x000x110x101_3'(s(fun(X25,fun(X33,X32)),X34),s(fun(X26,fun(X24,X25)),'_dst_x00x11_2'(s(fun(X27,X25),X28),s(fun(X26,fun(X24,X27)),X29))),s(fun(X26,fun(X31,X33)),X35))),s(X26,X30))) = s(fun(X24,fun(X31,X32)),'_dst_x00x10x01_3'(s(fun(X25,fun(X33,X32)),X34),s(fun(X24,X25),'_dst_x0x1_2'(s(fun(X27,X25),X28),s(fun(X24,X27),happ(s(fun(X26,fun(X24,X27)),X29),s(X26,X30))))),s(fun(X31,X33),happ(s(fun(X26,fun(X31,X33)),X35),s(X26,X30)))))) )),
  inference(superposition,[],[f368,f358])).
fof(f44868,plain,(
  ( ! [X14,X12,X10,X23,X21,X19,X17,X15,X13,X11,X22,X20,X18,X16] : (s(fun(X10,fun(X19,X20)),happ(s(fun(X12,fun(X10,fun(X19,X20))),'_dst_x000x110x101_3'(s(fun(X11,fun(X21,X20)),X22),s(fun(X12,fun(X10,X11)),'_dst_x00x10x01_3'(s(fun(X13,fun(X14,X11)),X15),s(fun(X12,X13),X16),s(fun(X10,X14),X17))),s(fun(X12,fun(X19,X21)),X23))),s(X12,X18))) = s(fun(X10,fun(X19,X20)),'_dst_x00x10x01_3'(s(fun(X11,fun(X21,X20)),X22),s(fun(X10,X11),'_dst_x0x0x1_3'(s(fun(X13,fun(X14,X11)),X15),s(X13,happ(s(fun(X12,X13),X16),s(X12,X18))),s(fun(X10,X14),X17))),s(fun(X19,X21),happ(s(fun(X12,fun(X19,X21)),X23),s(X12,X18)))))) )),
  inference(superposition,[],[f368,f362])).
fof(f44867,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(fun(X0,X1),fun(X5,X6)),'_dst_x00x10x01_3'(s(fun(X1,fun(X7,X6)),X8),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(X5,X7),happ(s(fun(X2,fun(X5,X7)),X9),s(X2,X4))))) = s(fun(fun(X0,X1),fun(X5,X6)),happ(s(fun(X2,fun(fun(X0,X1),fun(X5,X6))),'_dst_x000x110x101_3'(s(fun(X1,fun(X7,X6)),X8),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X2,fun(X5,X7)),X9))),s(X2,X4)))) )),
  inference(superposition,[],[f368,f339])).
fof(f44796,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X20,X18,X16] : (s(fun(X10,fun(X11,X12)),happ(s(fun(X19,fun(X10,fun(X11,X12))),'_dst_x0x1_2'(s(fun(X13,fun(X10,fun(X11,X12))),'_dst_x000x110x101_3'(s(fun(X14,fun(X15,X12)),X16),s(fun(X13,fun(X10,X14)),X17),s(fun(X13,fun(X11,X15)),X18))),s(fun(X19,X13),X20))),s(X19,X21))) = s(fun(X10,fun(X11,X12)),'_dst_x00x10x01_3'(s(fun(X14,fun(X15,X12)),X16),s(fun(X10,X14),happ(s(fun(X13,fun(X10,X14)),X17),s(X13,happ(s(fun(X19,X13),X20),s(X19,X21))))),s(fun(X11,X15),happ(s(fun(X13,fun(X11,X15)),X18),s(X13,happ(s(fun(X19,X13),X20),s(X19,X21)))))))) )),
  inference(superposition,[],[f368,f340])).
fof(f44792,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),happ(s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x110x101_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,fun(X0,X4)),X7),s(fun(X3,fun(X1,X5)),X8))),s(X3,X9))))),s(fun(X0,fun(X1,X2)),'_dst_x00x10x01_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X0,X4),happ(s(fun(X3,fun(X0,X4)),X7),s(X3,X9))),s(fun(X1,X5),happ(s(fun(X3,fun(X1,X5)),X8),s(X3,X9))))))))) )),
  inference(unit_resulting_resolution,[],[f368,f338])).
fof(f44794,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (p(s(bool,happ(s(fun(fun(X0,fun(X1,X2)),bool),happ(s(fun(fun(X0,fun(X1,X2)),fun(fun(X0,fun(X1,X2)),bool)),'=_0'),s(fun(X0,fun(X1,X2)),'_dst_x00x10x01_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))),s(fun(X1,X4),happ(s(fun(X6,fun(X1,X4)),X9),s(X6,X8))))))),s(fun(X0,fun(X1,X2)),happ(s(fun(X6,fun(X0,fun(X1,X2))),'_dst_x000x110x101_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X6,fun(X0,X3)),X7),s(fun(X6,fun(X1,X4)),X9))),s(X6,X8))))))) )),
  inference(unit_resulting_resolution,[],[f368,f338])).
fof(f44795,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),happ(s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x110x101_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X3,fun(X0,X4)),X7),s(fun(X3,fun(X1,X5)),X8))),s(X3,X9))))) = s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),'_dst_x00x10x01_3'(s(fun(X4,fun(X5,X2)),X6),s(fun(X0,X4),happ(s(fun(X3,fun(X0,X4)),X7),s(X3,X9))),s(fun(X1,X5),happ(s(fun(X3,fun(X1,X5)),X8),s(X3,X9)))))))) )),
  inference(unit_resulting_resolution,[],[f368,f303])).
fof(f44678,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),sK9('!_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f43822,f318])).
fof(f44701,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(fun(X0,bool),bool),bool),bool),'_dstsel_0_x0_1'(s(fun(fun(X0,bool),bool),'!_1'))),s(fun(fun(fun(X0,bool),bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f43822,f399])).
fof(f44702,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(fun(X0,bool),bool)),'const.benchmark.Once_1'(s(fun(fun(X0,bool),bool),'!_1'))),s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun('type.benchmark.times'(fun(fun(X0,bool),bool)),fun('type.benchmark.times'(fun(fun(X0,bool),bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f43822,f399])).
fof(f44706,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f381,f43822,f1150])).
fof(f44707,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43822,f1169])).
fof(f44708,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43822,f4018])).
fof(f44709,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43822,f5307])).
fof(f44578,plain,(
  ( ! [X134,X133] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X134))) | s(bool,X134) = s(bool,'|dollar|exists_1'(s(fun(fun(X133,bool),bool),'!_1')))) )),
  inference(superposition,[],[f302,f43969])).
fof(f44658,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(fun(X46,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f44520,f246])).
fof(f44520,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(fun(X46,bool),bool),'!_1'))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f399,f43969])).
fof(f44426,plain,(
  ( ! [X796,X790,X788,X795,X793,X797,X787,X791,X789,X794,X792] : (s(fun(X787,fun(X788,X789)),X797) != s(fun(X787,fun(X788,X789)),'_dst_x00x11x11_3'(s(fun(X791,fun(X792,X789)),X793),s(fun(X787,fun(X788,X791)),happ(s(fun(X790,fun(X787,fun(X788,X791))),X794),s(X790,X796))),s(fun(X787,fun(X788,X792)),X795))) | s('type.benchmark.times'(fun(X787,fun(X788,X789))),'const.benchmark.Once_1'(s(fun(X787,fun(X788,X789)),X797))) = s('type.benchmark.times'(fun(X787,fun(X788,X789))),'const.benchmark.Once_1'(s(fun(X787,fun(X788,X789)),happ(s(fun(X790,fun(X787,fun(X788,X789))),'_dst_x000x111x011_3'(s(fun(X791,fun(X792,X789)),X793),s(fun(X790,fun(X787,fun(X788,X791))),X794),s(fun(X787,fun(X788,X792)),X795))),s(X790,X796)))))) )),
  inference(superposition,[],[f303,f367])).
fof(f44424,plain,(
  ( ! [X765,X767,X771,X769,X775,X773,X766,X770,X768,X774,X772] : (s('type.benchmark.times'(fun(X765,fun(X766,X767))),'const.benchmark.Once_1'(s(fun(X765,fun(X766,X767)),X775))) != s('type.benchmark.times'(fun(X765,fun(X766,X767))),'const.benchmark.Once_1'(s(fun(X765,fun(X766,X767)),'_dst_x00x11x11_3'(s(fun(X769,fun(X770,X767)),X771),s(fun(X765,fun(X766,X769)),happ(s(fun(X768,fun(X765,fun(X766,X769))),X772),s(X768,X774))),s(fun(X765,fun(X766,X770)),X773))))) | s(fun(X765,fun(X766,X767)),X775) = s(fun(X765,fun(X766,X767)),happ(s(fun(X768,fun(X765,fun(X766,X767))),'_dst_x000x111x011_3'(s(fun(X769,fun(X770,X767)),X771),s(fun(X768,fun(X765,fun(X766,X769))),X772),s(fun(X765,fun(X766,X770)),X773))),s(X768,X774)))) )),
  inference(superposition,[],[f302,f367])).
fof(f44416,plain,(
  ( ! [X685,X687,X681,X683,X677,X679,X688,X684,X686,X680,X682,X678] : (s(X687,happ(s(fun(X680,X687),'_dst_x0x1_2'(s(fun(fun(X677,fun(X678,X679)),X687),X688),s(fun(X680,fun(X677,fun(X678,X679))),'_dst_x000x111x011_3'(s(fun(X681,fun(X682,X679)),X683),s(fun(X680,fun(X677,fun(X678,X681))),X684),s(fun(X677,fun(X678,X682)),X685))))),s(X680,X686))) = s(X687,happ(s(fun(fun(X677,fun(X678,X679)),X687),X688),s(fun(X677,fun(X678,X679)),'_dst_x00x11x11_3'(s(fun(X681,fun(X682,X679)),X683),s(fun(X677,fun(X678,X681)),happ(s(fun(X680,fun(X677,fun(X678,X681))),X684),s(X680,X686))),s(fun(X677,fun(X678,X682)),X685)))))) )),
  inference(superposition,[],[f340,f367])).
fof(f44415,plain,(
  ( ! [X666,X668,X670,X664,X673,X675,X667,X669,X663,X665,X671,X676,X672,X674] : (s(X673,happ(s(fun(X666,X673),'_dst_x0x0x1_3'(s(fun(X674,fun(fun(X663,fun(X664,X665)),X673)),X675),s(X674,X676),s(fun(X666,fun(X663,fun(X664,X665))),'_dst_x000x111x011_3'(s(fun(X667,fun(X668,X665)),X669),s(fun(X666,fun(X663,fun(X664,X667))),X670),s(fun(X663,fun(X664,X668)),X671))))),s(X666,X672))) = s(X673,happ(s(fun(fun(X663,fun(X664,X665)),X673),happ(s(fun(X674,fun(fun(X663,fun(X664,X665)),X673)),X675),s(X674,X676))),s(fun(X663,fun(X664,X665)),'_dst_x00x11x11_3'(s(fun(X667,fun(X668,X665)),X669),s(fun(X663,fun(X664,X667)),happ(s(fun(X666,fun(X663,fun(X664,X667))),X670),s(X666,X672))),s(fun(X663,fun(X664,X668)),X671)))))) )),
  inference(superposition,[],[f359,f367])).
fof(f44414,plain,(
  ( ! [X660,X662,X656,X658,X652,X654,X648,X650,X661,X657,X659,X653,X655,X649,X651] : (s(fun(X658,X659),'_dst_x0x0x1_3'(s(fun(fun(X648,fun(X649,X650)),fun(X660,X659)),X661),s(fun(X648,fun(X649,X650)),'_dst_x00x11x11_3'(s(fun(X652,fun(X653,X650)),X654),s(fun(X648,fun(X649,X652)),happ(s(fun(X651,fun(X648,fun(X649,X652))),X655),s(X651,X657))),s(fun(X648,fun(X649,X653)),X656))),s(fun(X658,X660),X662))) = s(fun(X658,X659),happ(s(fun(X651,fun(X658,X659)),'_dst_x00x10x01_3'(s(fun(fun(X648,fun(X649,X650)),fun(X660,X659)),X661),s(fun(X651,fun(X648,fun(X649,X650))),'_dst_x000x111x011_3'(s(fun(X652,fun(X653,X650)),X654),s(fun(X651,fun(X648,fun(X649,X652))),X655),s(fun(X648,fun(X649,X653)),X656))),s(fun(X658,X660),X662))),s(X651,X657)))) )),
  inference(superposition,[],[f362,f367])).
fof(f44413,plain,(
  ( ! [X639,X635,X644,X646,X640,X642,X636,X638,X634,X645,X647,X641,X643,X637] : (s(X644,happ(s(fun(X637,X644),'_dst_x0x1x1_3'(s(fun(fun(X634,fun(X635,X636)),fun(X645,X644)),X646),s(fun(X637,fun(X634,fun(X635,X636))),'_dst_x000x111x011_3'(s(fun(X638,fun(X639,X636)),X640),s(fun(X637,fun(X634,fun(X635,X638))),X641),s(fun(X634,fun(X635,X639)),X642))),s(fun(X637,X645),X647))),s(X637,X643))) = s(X644,happ(s(fun(X645,X644),happ(s(fun(fun(X634,fun(X635,X636)),fun(X645,X644)),X646),s(fun(X634,fun(X635,X636)),'_dst_x00x11x11_3'(s(fun(X638,fun(X639,X636)),X640),s(fun(X634,fun(X635,X638)),happ(s(fun(X637,fun(X634,fun(X635,X638))),X641),s(X637,X643))),s(fun(X634,fun(X635,X639)),X642))))),s(X645,happ(s(fun(X637,X645),X647),s(X637,X643)))))) )),
  inference(superposition,[],[f360,f367])).
fof(f44412,plain,(
  ( ! [X633,X629,X631,X625,X627,X621,X623,X632,X628,X630,X624,X626,X620,X622] : (s(X630,happ(s(fun(X623,X630),'_dst_x0x1x1_3'(s(fun(X631,fun(fun(X620,fun(X621,X622)),X630)),X632),s(fun(X623,X631),X633),s(fun(X623,fun(X620,fun(X621,X622))),'_dst_x000x111x011_3'(s(fun(X624,fun(X625,X622)),X626),s(fun(X623,fun(X620,fun(X621,X624))),X627),s(fun(X620,fun(X621,X625)),X628))))),s(X623,X629))) = s(X630,happ(s(fun(fun(X620,fun(X621,X622)),X630),happ(s(fun(X631,fun(fun(X620,fun(X621,X622)),X630)),X632),s(X631,happ(s(fun(X623,X631),X633),s(X623,X629))))),s(fun(X620,fun(X621,X622)),'_dst_x00x11x11_3'(s(fun(X624,fun(X625,X622)),X626),s(fun(X620,fun(X621,X624)),happ(s(fun(X623,fun(X620,fun(X621,X624))),X627),s(X623,X629))),s(fun(X620,fun(X621,X625)),X628)))))) )),
  inference(superposition,[],[f360,f367])).
fof(f44411,plain,(
  ( ! [X606,X610,X617,X619,X613,X615,X609,X605,X607,X611,X616,X618,X612,X614,X608,X604] : (s(fun(X614,fun(X615,X616)),'_dst_x00x00x11_3'(s(fun(fun(X604,fun(X605,X606)),fun(X617,X616)),X618),s(fun(X604,fun(X605,X606)),'_dst_x00x11x11_3'(s(fun(X608,fun(X609,X606)),X610),s(fun(X604,fun(X605,X608)),happ(s(fun(X607,fun(X604,fun(X605,X608))),X611),s(X607,X613))),s(fun(X604,fun(X605,X609)),X612))),s(fun(X614,fun(X615,X617)),X619))) = s(fun(X614,fun(X615,X616)),happ(s(fun(X607,fun(X614,fun(X615,X616))),'_dst_x000x100x011_3'(s(fun(fun(X604,fun(X605,X606)),fun(X617,X616)),X618),s(fun(X607,fun(X604,fun(X605,X606))),'_dst_x000x111x011_3'(s(fun(X608,fun(X609,X606)),X610),s(fun(X607,fun(X604,fun(X605,X608))),X611),s(fun(X604,fun(X605,X609)),X612))),s(fun(X614,fun(X615,X617)),X619))),s(X607,X613)))) )),
  inference(superposition,[],[f366,f367])).
fof(f44395,plain,(
  ( ! [X383,X379,X389,X385,X387,X380,X382,X378,X388,X390,X384,X386,X381] : (s(fun(X379,X380),happ(s(fun(X387,fun(X379,X380)),'_dst_x0x1x1_3'(s(fun(X381,fun(X378,fun(X379,X380))),'_dst_x000x111x011_3'(s(fun(X382,fun(X383,X380)),X384),s(fun(X381,fun(X378,fun(X379,X382))),X385),s(fun(X378,fun(X379,X383)),X386))),s(fun(X387,X381),X388),s(fun(X387,X378),X390))),s(X387,X389))) = s(fun(X379,X380),happ(s(fun(X378,fun(X379,X380)),'_dst_x00x11x11_3'(s(fun(X382,fun(X383,X380)),X384),s(fun(X378,fun(X379,X382)),happ(s(fun(X381,fun(X378,fun(X379,X382))),X385),s(X381,happ(s(fun(X387,X381),X388),s(X387,X389))))),s(fun(X378,fun(X379,X383)),X386))),s(X378,happ(s(fun(X387,X378),X390),s(X387,X389)))))) )),
  inference(superposition,[],[f360,f367])).
fof(f44394,plain,(
  ( ! [X377,X364,X366,X372,X374,X368,X370,X376,X365,X367,X373,X375,X369,X371] : (s(fun(X364,X374),happ(s(fun(X367,fun(X364,X374)),'_dst_x00x11x11_3'(s(fun(fun(X365,X366),fun(X375,X374)),X376),s(fun(X367,fun(X364,fun(X365,X366))),'_dst_x000x111x011_3'(s(fun(X368,fun(X369,X366)),X370),s(fun(X367,fun(X364,fun(X365,X368))),X371),s(fun(X364,fun(X365,X369)),X372))),s(fun(X367,fun(X364,X375)),X377))),s(X367,X373))) = s(fun(X364,X374),'_dst_x0x1x1_3'(s(fun(fun(X365,X366),fun(X375,X374)),X376),s(fun(X364,fun(X365,X366)),'_dst_x00x11x11_3'(s(fun(X368,fun(X369,X366)),X370),s(fun(X364,fun(X365,X368)),happ(s(fun(X367,fun(X364,fun(X365,X368))),X371),s(X367,X373))),s(fun(X364,fun(X365,X369)),X372))),s(fun(X364,X375),happ(s(fun(X367,fun(X364,X375)),X377),s(X367,X373)))))) )),
  inference(superposition,[],[f365,f367])).
fof(f44393,plain,(
  ( ! [X350,X356,X358,X352,X354,X360,X362,X351,X357,X359,X353,X355,X361,X363] : (s(fun(X350,X360),happ(s(fun(X353,fun(X350,X360)),'_dst_x00x11x11_3'(s(fun(X361,fun(fun(X351,X352),X360)),X362),s(fun(X353,fun(X350,X361)),X363),s(fun(X353,fun(X350,fun(X351,X352))),'_dst_x000x111x011_3'(s(fun(X354,fun(X355,X352)),X356),s(fun(X353,fun(X350,fun(X351,X354))),X357),s(fun(X350,fun(X351,X355)),X358))))),s(X353,X359))) = s(fun(X350,X360),'_dst_x0x1x1_3'(s(fun(X361,fun(fun(X351,X352),X360)),X362),s(fun(X350,X361),happ(s(fun(X353,fun(X350,X361)),X363),s(X353,X359))),s(fun(X350,fun(X351,X352)),'_dst_x00x11x11_3'(s(fun(X354,fun(X355,X352)),X356),s(fun(X350,fun(X351,X354)),happ(s(fun(X353,fun(X350,fun(X351,X354))),X357),s(X353,X359))),s(fun(X350,fun(X351,X355)),X358)))))) )),
  inference(superposition,[],[f365,f367])).
fof(f44392,plain,(
  ( ! [X344,X346,X341,X343,X337,X339,X349,X345,X347,X340,X342,X336,X338,X348] : (s(fun(X336,X346),'_dst_x0x1x1_3'(s(fun(X347,fun(fun(X337,X338),X346)),X348),s(fun(X336,X347),X349),s(fun(X336,fun(X337,X338)),'_dst_x00x11x11_3'(s(fun(X340,fun(X341,X338)),X342),s(fun(X336,fun(X337,X340)),happ(s(fun(X339,fun(X336,fun(X337,X340))),X343),s(X339,X345))),s(fun(X336,fun(X337,X341)),X344))))) = s(fun(X336,X346),happ(s(fun(X339,fun(X336,X346)),'_dst_x00x01x11_3'(s(fun(X347,fun(fun(X337,X338),X346)),X348),s(fun(X336,X347),X349),s(fun(X339,fun(X336,fun(X337,X338))),'_dst_x000x111x011_3'(s(fun(X340,fun(X341,X338)),X342),s(fun(X339,fun(X336,fun(X337,X340))),X343),s(fun(X336,fun(X337,X341)),X344))))),s(X339,X345)))) )),
  inference(superposition,[],[f364,f367])).
fof(f44391,plain,(
  ( ! [X325,X327,X323,X333,X335,X329,X331,X324,X326,X322,X332,X334,X328,X330] : (s(fun(X322,X332),'_dst_x0x0x1_3'(s(fun(X333,fun(fun(X323,X324),X332)),X334),s(X333,X335),s(fun(X322,fun(X323,X324)),'_dst_x00x11x11_3'(s(fun(X326,fun(X327,X324)),X328),s(fun(X322,fun(X323,X326)),happ(s(fun(X325,fun(X322,fun(X323,X326))),X329),s(X325,X331))),s(fun(X322,fun(X323,X327)),X330))))) = s(fun(X322,X332),happ(s(fun(X325,fun(X322,X332)),'_dst_x00x00x11_3'(s(fun(X333,fun(fun(X323,X324),X332)),X334),s(X333,X335),s(fun(X325,fun(X322,fun(X323,X324))),'_dst_x000x111x011_3'(s(fun(X326,fun(X327,X324)),X328),s(fun(X325,fun(X322,fun(X323,X326))),X329),s(fun(X322,fun(X323,X327)),X330))))),s(X325,X331)))) )),
  inference(superposition,[],[f363,f367])).
fof(f44390,plain,(
  ( ! [X313,X315,X321,X310,X316,X318,X312,X314,X320,X309,X311,X317,X319] : (s(fun(X310,X311),happ(s(fun(X319,fun(X310,X311)),'_dst_x0x0x1_3'(s(fun(X312,fun(X309,fun(X310,X311))),'_dst_x000x111x011_3'(s(fun(X313,fun(X314,X311)),X315),s(fun(X312,fun(X309,fun(X310,X313))),X316),s(fun(X309,fun(X310,X314)),X317))),s(X312,X318),s(fun(X319,X309),X320))),s(X319,X321))) = s(fun(X310,X311),happ(s(fun(X309,fun(X310,X311)),'_dst_x00x11x11_3'(s(fun(X313,fun(X314,X311)),X315),s(fun(X309,fun(X310,X313)),happ(s(fun(X312,fun(X309,fun(X310,X313))),X316),s(X312,X318))),s(fun(X309,fun(X310,X314)),X317))),s(X309,happ(s(fun(X319,X309),X320),s(X319,X321)))))) )),
  inference(superposition,[],[f359,f367])).
fof(f44389,plain,(
  ( ! [X300,X302,X298,X308,X304,X306,X301,X303,X297,X299,X305,X307] : (s(fun(X297,X307),'_dst_x0x1_2'(s(fun(fun(X298,X299),X307),X308),s(fun(X297,fun(X298,X299)),'_dst_x00x11x11_3'(s(fun(X301,fun(X302,X299)),X303),s(fun(X297,fun(X298,X301)),happ(s(fun(X300,fun(X297,fun(X298,X301))),X304),s(X300,X306))),s(fun(X297,fun(X298,X302)),X305))))) = s(fun(X297,X307),happ(s(fun(X300,fun(X297,X307)),'_dst_x00x11_2'(s(fun(fun(X298,X299),X307),X308),s(fun(X300,fun(X297,fun(X298,X299))),'_dst_x000x111x011_3'(s(fun(X301,fun(X302,X299)),X303),s(fun(X300,fun(X297,fun(X298,X301))),X304),s(fun(X297,fun(X298,X302)),X305))))),s(X300,X306)))) )),
  inference(superposition,[],[f358,f367])).
fof(f44388,plain,(
  ( ! [X292,X294,X288,X290,X296,X287,X293,X295,X289,X291,X286] : (s(fun(X287,X288),happ(s(fun(X286,fun(X287,X288)),'_dst_x00x11x11_3'(s(fun(X290,fun(X291,X288)),X292),s(fun(X286,fun(X287,X290)),happ(s(fun(X289,fun(X286,fun(X287,X290))),X293),s(X289,X295))),s(fun(X286,fun(X287,X291)),X294))),s(X286,X296))) = s(fun(X287,X288),happ(s(fun(X289,fun(X287,X288)),'_dst_x1x0_2'(s(fun(X289,fun(X286,fun(X287,X288))),'_dst_x000x111x011_3'(s(fun(X290,fun(X291,X288)),X292),s(fun(X289,fun(X286,fun(X287,X290))),X293),s(fun(X286,fun(X287,X291)),X294))),s(X286,X296))),s(X289,X295)))) )),
  inference(superposition,[],[f341,f367])).
fof(f44369,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X34,X32] : (s(fun(X23,fun(X24,X33)),'_dst_x00x11_2'(s(fun(X25,X33),X34),s(fun(X23,fun(X24,X25)),'_dst_x00x11x11_3'(s(fun(X27,fun(X28,X25)),X29),s(fun(X23,fun(X24,X27)),happ(s(fun(X26,fun(X23,fun(X24,X27))),X30),s(X26,X32))),s(fun(X23,fun(X24,X28)),X31))))) = s(fun(X23,fun(X24,X33)),happ(s(fun(X26,fun(X23,fun(X24,X33))),'_dst_x000x111_2'(s(fun(X25,X33),X34),s(fun(X26,fun(X23,fun(X24,X25))),'_dst_x000x111x011_3'(s(fun(X27,fun(X28,X25)),X29),s(fun(X26,fun(X23,fun(X24,X27))),X30),s(fun(X23,fun(X24,X28)),X31))))),s(X26,X32)))) )),
  inference(superposition,[],[f361,f367])).
fof(f44334,plain,(
  ( ! [X592,X594,X588,X590,X584,X586,X593,X589,X591,X585,X587] : (s(fun(X584,fun(X585,X586)),X594) != s(fun(X584,fun(X585,X586)),happ(s(fun(X590,fun(X584,fun(X585,X586))),'_dst_x000x111x011_3'(s(fun(X587,fun(X588,X586)),X589),s(fun(X590,fun(X584,fun(X585,X587))),X591),s(fun(X584,fun(X585,X588)),X593))),s(X590,X592))) | s('type.benchmark.times'(fun(X584,fun(X585,X586))),'const.benchmark.Once_1'(s(fun(X584,fun(X585,X586)),X594))) = s('type.benchmark.times'(fun(X584,fun(X585,X586))),'const.benchmark.Once_1'(s(fun(X584,fun(X585,X586)),'_dst_x00x11x11_3'(s(fun(X587,fun(X588,X586)),X589),s(fun(X584,fun(X585,X587)),happ(s(fun(X590,fun(X584,fun(X585,X587))),X591),s(X590,X592))),s(fun(X584,fun(X585,X588)),X593)))))) )),
  inference(superposition,[],[f303,f367])).
fof(f44332,plain,(
  ( ! [X569,X571,X565,X567,X563,X572,X568,X570,X564,X566,X562] : (s('type.benchmark.times'(fun(X562,fun(X563,X564))),'const.benchmark.Once_1'(s(fun(X562,fun(X563,X564)),X572))) != s('type.benchmark.times'(fun(X562,fun(X563,X564))),'const.benchmark.Once_1'(s(fun(X562,fun(X563,X564)),happ(s(fun(X568,fun(X562,fun(X563,X564))),'_dst_x000x111x011_3'(s(fun(X565,fun(X566,X564)),X567),s(fun(X568,fun(X562,fun(X563,X565))),X569),s(fun(X562,fun(X563,X566)),X571))),s(X568,X570))))) | s(fun(X562,fun(X563,X564)),X572) = s(fun(X562,fun(X563,X564)),'_dst_x00x11x11_3'(s(fun(X565,fun(X566,X564)),X567),s(fun(X562,fun(X563,X565)),happ(s(fun(X568,fun(X562,fun(X563,X565))),X569),s(X568,X570))),s(fun(X562,fun(X563,X566)),X571)))) )),
  inference(superposition,[],[f302,f367])).
fof(f44292,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32] : (s(fun(X24,X25),happ(s(fun(X23,fun(X24,X25)),happ(s(fun(X29,fun(X23,fun(X24,X25))),'_dst_x000x111x011_3'(s(fun(X26,fun(X27,X25)),X28),s(fun(X29,fun(X23,fun(X24,X26))),X30),s(fun(X23,fun(X24,X27)),X32))),s(X29,X31))),s(X23,X33))) = s(fun(X24,X25),'_dst_x0x1x1_3'(s(fun(X26,fun(X27,X25)),X28),s(fun(X24,X26),happ(s(fun(X23,fun(X24,X26)),happ(s(fun(X29,fun(X23,fun(X24,X26))),X30),s(X29,X31))),s(X23,X33))),s(fun(X24,X27),happ(s(fun(X23,fun(X24,X27)),X32),s(X23,X33)))))) )),
  inference(superposition,[],[f365,f367])).
fof(f44289,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X20,X18,X16] : (s(fun(X10,fun(X11,X12)),'_dst_x00x11x11_3'(s(fun(X14,fun(X15,X12)),X16),s(fun(X10,fun(X11,X14)),happ(s(fun(X13,fun(X10,fun(X11,X14))),X17),s(X13,happ(s(fun(X19,X13),X20),s(X19,X21))))),s(fun(X10,fun(X11,X15)),X18))) = s(fun(X10,fun(X11,X12)),happ(s(fun(X19,fun(X10,fun(X11,X12))),'_dst_x0x1_2'(s(fun(X13,fun(X10,fun(X11,X12))),'_dst_x000x111x011_3'(s(fun(X14,fun(X15,X12)),X16),s(fun(X13,fun(X10,fun(X11,X14))),X17),s(fun(X10,fun(X11,X15)),X18))),s(fun(X19,X13),X20))),s(X19,X21)))) )),
  inference(superposition,[],[f367,f340])).
fof(f44078,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236,X245] : (s(fun(X236,fun(X237,X242)),'_dst_x00x11x11_3'(s(fun(X238,fun(X243,X242)),X244),s(fun(X236,fun(X237,X238)),'const.ind_type.FCONS_3'(s(fun(X236,fun(X237,X238)),X240),s(fun('type.num.num',fun(X236,fun(X237,X238))),X239),s('type.num.num',X241))),s(fun(X236,fun(X237,X243)),X245))) = s(fun(X236,fun(X237,X242)),happ(s(fun('type.num.num',fun(X236,fun(X237,X242))),'_dst_x000x111x011_3'(s(fun(X238,fun(X243,X242)),X244),s(fun('type.num.num',fun(X236,fun(X237,X238))),happ(s(fun(fun(X236,fun(X237,X238)),fun('type.num.num',fun(X236,fun(X237,X238)))),'_dst_x1x0_2'(s(fun(fun(X236,fun(X237,X238)),fun(fun('type.num.num',fun(X236,fun(X237,X238))),fun('type.num.num',fun(X236,fun(X237,X238))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X236,fun(X237,X238))),X239))),s(fun(X236,fun(X237,X238)),X240))),s(fun(X236,fun(X237,X243)),X245))),s('type.num.num',X241)))) )),
  inference(superposition,[],[f367,f377])).
fof(f44077,plain,(
  ( ! [X212,X218,X216,X222,X220,X225,X215,X213,X219,X217,X223,X221,X224,X214] : (s(fun(X212,fun(X213,X222)),happ(s(fun(X215,fun(X212,fun(X213,X222))),'_dst_x000x111x011_3'(s(fun(X214,fun(X223,X222)),X224),s(fun(X215,fun(X212,fun(X213,X214))),'_dst_x0x0x1_3'(s(fun(X216,fun(X217,fun(X212,fun(X213,X214)))),X218),s(X216,X219),s(fun(X215,X217),X220))),s(fun(X212,fun(X213,X223)),X225))),s(X215,X221))) = s(fun(X212,fun(X213,X222)),'_dst_x00x11x11_3'(s(fun(X214,fun(X223,X222)),X224),s(fun(X212,fun(X213,X214)),happ(s(fun(X217,fun(X212,fun(X213,X214))),happ(s(fun(X216,fun(X217,fun(X212,fun(X213,X214)))),X218),s(X216,X219))),s(X217,happ(s(fun(X215,X217),X220),s(X215,X221))))),s(fun(X212,fun(X213,X223)),X225)))) )),
  inference(superposition,[],[f367,f359])).
fof(f44076,plain,(
  ( ! [X210,X208,X206,X204,X202,X200,X211,X209,X207,X205,X203,X201] : (s(fun(X200,fun(X201,X208)),'_dst_x00x11x11_3'(s(fun(X202,fun(X209,X208)),X210),s(fun(X200,fun(X201,X202)),happ(s(fun(X204,fun(X200,fun(X201,X202))),happ(s(fun(X203,fun(X204,fun(X200,fun(X201,X202)))),X205),s(X203,X207))),s(X204,X206))),s(fun(X200,fun(X201,X209)),X211))) = s(fun(X200,fun(X201,X208)),happ(s(fun(X203,fun(X200,fun(X201,X208))),'_dst_x000x111x011_3'(s(fun(X202,fun(X209,X208)),X210),s(fun(X203,fun(X200,fun(X201,X202))),'_dst_x1x0_2'(s(fun(X203,fun(X204,fun(X200,fun(X201,X202)))),X205),s(X204,X206))),s(fun(X200,fun(X201,X209)),X211))),s(X203,X207)))) )),
  inference(superposition,[],[f367,f341])).
fof(f44075,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X199,X197,X195,X193] : (s(fun(X190,fun(X191,X196)),'_dst_x00x11x11_3'(s(fun(X192,fun(X197,X196)),X198),s(fun(X190,fun(X191,X192)),X194),s(fun(X190,fun(X191,X197)),X199))) = s(fun(X190,fun(X191,X196)),happ(s(fun(X193,fun(X190,fun(X191,X196))),'_dst_x000x111x011_3'(s(fun(X192,fun(X197,X196)),X198),s(fun(X193,fun(X190,fun(X191,X192))),'_dst_x0_1'(s(fun(X190,fun(X191,X192)),X194))),s(fun(X190,fun(X191,X197)),X199))),s(X193,X195)))) )),
  inference(superposition,[],[f367,f330])).
fof(f44074,plain,(
  ( ! [X189,X187,X185,X182,X180,X178,X188,X186,X184,X183,X181,X179] : (s(fun(X178,fun(X179,X186)),'_dst_x00x11x11_3'(s(fun(X180,fun(X187,X186)),X188),s(fun(X178,fun(X179,X180)),happ(s(fun(X182,fun(X178,fun(X179,X180))),X183),s(X182,happ(s(fun(X181,X182),X184),s(X181,X185))))),s(fun(X178,fun(X179,X187)),X189))) = s(fun(X178,fun(X179,X186)),happ(s(fun(X181,fun(X178,fun(X179,X186))),'_dst_x000x111x011_3'(s(fun(X180,fun(X187,X186)),X188),s(fun(X181,fun(X178,fun(X179,X180))),'_dst_x0x1_2'(s(fun(X182,fun(X178,fun(X179,X180))),X183),s(fun(X181,X182),X184))),s(fun(X178,fun(X179,X187)),X189))),s(X181,X185)))) )),
  inference(superposition,[],[f367,f340])).
fof(f44073,plain,(
  ( ! [X177,X167,X165,X175,X173,X171,X169,X176,X166,X164,X174,X172,X170,X168] : (s(fun(X164,fun(X165,X174)),'_dst_x00x11x11_3'(s(fun(X166,fun(X175,X174)),X176),s(fun(X164,fun(X165,X166)),happ(s(fun(X170,fun(X164,fun(X165,X166))),'_dst_x0x1x1_3'(s(fun(X168,fun(X167,fun(X164,fun(X165,X166)))),X169),s(fun(X170,X168),X171),s(fun(X170,X167),X173))),s(X170,X172))),s(fun(X164,fun(X165,X175)),X177))) = s(fun(X164,fun(X165,X174)),happ(s(fun(X167,fun(X164,fun(X165,X174))),'_dst_x000x111x011_3'(s(fun(X166,fun(X175,X174)),X176),s(fun(X167,fun(X164,fun(X165,X166))),happ(s(fun(X168,fun(X167,fun(X164,fun(X165,X166)))),X169),s(X168,happ(s(fun(X170,X168),X171),s(X170,X172))))),s(fun(X164,fun(X165,X175)),X177))),s(X167,happ(s(fun(X170,X167),X173),s(X170,X172)))))) )),
  inference(superposition,[],[f367,f360])).
fof(f44072,plain,(
  ( ! [X158,X156,X154,X152,X163,X161,X151,X159,X157,X155,X153,X162,X160,X150] : (s(fun(X150,fun(X151,X160)),'_dst_x00x11x11_3'(s(fun(X152,fun(X161,X160)),X162),s(fun(X150,fun(X151,X152)),happ(s(fun(X157,fun(X150,fun(X151,X152))),'_dst_x0x0x1_3'(s(fun(X154,fun(X153,fun(X150,fun(X151,X152)))),X155),s(X154,X156),s(fun(X157,X153),X158))),s(X157,X159))),s(fun(X150,fun(X151,X161)),X163))) = s(fun(X150,fun(X151,X160)),happ(s(fun(X153,fun(X150,fun(X151,X160))),'_dst_x000x111x011_3'(s(fun(X152,fun(X161,X160)),X162),s(fun(X153,fun(X150,fun(X151,X152))),happ(s(fun(X154,fun(X153,fun(X150,fun(X151,X152)))),X155),s(X154,X156))),s(fun(X150,fun(X151,X161)),X163))),s(X153,happ(s(fun(X157,X153),X158),s(X157,X159)))))) )),
  inference(superposition,[],[f367,f359])).
fof(f44071,plain,(
  ( ! [X146,X144,X142,X140,X138,X149,X147,X145,X143,X141,X139,X148] : (s(fun(X138,fun(X139,X146)),'_dst_x00x11x11_3'(s(fun(X140,fun(X147,X146)),X148),s(fun(X138,fun(X139,X140)),happ(s(fun(X142,fun(X138,fun(X139,X140))),'_dst_x1x0_2'(s(fun(X142,fun(X141,fun(X138,fun(X139,X140)))),X143),s(X141,X145))),s(X142,X144))),s(fun(X138,fun(X139,X147)),X149))) = s(fun(X138,fun(X139,X146)),happ(s(fun(X141,fun(X138,fun(X139,X146))),'_dst_x000x111x011_3'(s(fun(X140,fun(X147,X146)),X148),s(fun(X141,fun(X138,fun(X139,X140))),happ(s(fun(X142,fun(X141,fun(X138,fun(X139,X140)))),X143),s(X142,X144))),s(fun(X138,fun(X139,X147)),X149))),s(X141,X145)))) )),
  inference(superposition,[],[f367,f341])).
fof(f44070,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X126,X135,X133,X131,X129,X137] : (s(fun(X126,fun(X127,X134)),happ(s(fun(X129,fun(X126,fun(X127,X134))),'_dst_x000x111x011_3'(s(fun(X128,fun(X135,X134)),X136),s(fun(X129,fun(X126,fun(X127,X128))),X130),s(fun(X126,fun(X127,X135)),X137))),s(X129,happ(s(fun(X131,X129),X132),s(X131,X133))))) = s(fun(X126,fun(X127,X134)),'_dst_x00x11x11_3'(s(fun(X128,fun(X135,X134)),X136),s(fun(X126,fun(X127,X128)),happ(s(fun(X131,fun(X126,fun(X127,X128))),'_dst_x0x1_2'(s(fun(X129,fun(X126,fun(X127,X128))),X130),s(fun(X131,X129),X132))),s(X131,X133))),s(fun(X126,fun(X127,X135)),X137)))) )),
  inference(superposition,[],[f367,f340])).
fof(f44069,plain,(
  ( ! [X111,X109,X107,X105,X116,X114,X112,X110,X108,X106,X104,X117,X115,X113] : (s(fun(X104,fun(X105,X114)),'_dst_x00x11x11_3'(s(fun(X106,fun(X115,X114)),X116),s(fun(X104,fun(X105,X106)),'_dst_x0x0x1_3'(s(fun(X108,fun(X109,fun(X105,X106))),X110),s(X108,X111),s(fun(X104,X109),happ(s(fun(X107,fun(X104,X109)),X112),s(X107,X113))))),s(fun(X104,fun(X105,X115)),X117))) = s(fun(X104,fun(X105,X114)),happ(s(fun(X107,fun(X104,fun(X105,X114))),'_dst_x000x111x011_3'(s(fun(X106,fun(X115,X114)),X116),s(fun(X107,fun(X104,fun(X105,X106))),'_dst_x00x00x11_3'(s(fun(X108,fun(X109,fun(X105,X106))),X110),s(X108,X111),s(fun(X107,fun(X104,X109)),X112))),s(fun(X104,fun(X105,X115)),X117))),s(X107,X113)))) )),
  inference(superposition,[],[f367,f363])).
fof(f44068,plain,(
  ( ! [X94,X92,X90,X103,X101,X99,X97,X95,X93,X91,X102,X100,X98,X96] : (s(fun(X90,fun(X91,X100)),happ(s(fun(X93,fun(X90,fun(X91,X100))),'_dst_x000x111x011_3'(s(fun(X92,fun(X101,X100)),X102),s(fun(X93,fun(X90,fun(X91,X92))),'_dst_x00x11x11_3'(s(fun(X94,fun(X95,fun(X91,X92))),X96),s(fun(X93,fun(X90,X94)),X97),s(fun(X93,fun(X90,X95)),X98))),s(fun(X90,fun(X91,X101)),X103))),s(X93,X99))) = s(fun(X90,fun(X91,X100)),'_dst_x00x11x11_3'(s(fun(X92,fun(X101,X100)),X102),s(fun(X90,fun(X91,X92)),'_dst_x0x1x1_3'(s(fun(X94,fun(X95,fun(X91,X92))),X96),s(fun(X90,X94),happ(s(fun(X93,fun(X90,X94)),X97),s(X93,X99))),s(fun(X90,X95),happ(s(fun(X93,fun(X90,X95)),X98),s(X93,X99))))),s(fun(X90,fun(X91,X101)),X103)))) )),
  inference(superposition,[],[f367,f365])).
fof(f44067,plain,(
  ( ! [X80,X88,X78,X76,X87,X85,X83,X81,X89,X79,X77,X86,X84,X82] : (s(fun(X76,fun(X77,X86)),'_dst_x00x11x11_3'(s(fun(X78,fun(X87,X86)),X88),s(fun(X76,fun(X77,X78)),'_dst_x0x1x1_3'(s(fun(X80,fun(X81,fun(X77,X78))),X82),s(fun(X76,X80),X83),s(fun(X76,X81),happ(s(fun(X79,fun(X76,X81)),X84),s(X79,X85))))),s(fun(X76,fun(X77,X87)),X89))) = s(fun(X76,fun(X77,X86)),happ(s(fun(X79,fun(X76,fun(X77,X86))),'_dst_x000x111x011_3'(s(fun(X78,fun(X87,X86)),X88),s(fun(X79,fun(X76,fun(X77,X78))),'_dst_x00x01x11_3'(s(fun(X80,fun(X81,fun(X77,X78))),X82),s(fun(X76,X80),X83),s(fun(X79,fun(X76,X81)),X84))),s(fun(X76,fun(X77,X87)),X89))),s(X79,X85)))) )),
  inference(superposition,[],[f367,f364])).
fof(f44066,plain,(
  ( ! [X70,X68,X66,X64,X74,X72,X71,X69,X67,X65,X75,X73] : (s(fun(X64,fun(X65,X72)),'_dst_x00x11x11_3'(s(fun(X66,fun(X73,X72)),X74),s(fun(X64,fun(X65,X66)),'_dst_x0x1_2'(s(fun(X68,fun(X65,X66)),X69),s(fun(X64,X68),happ(s(fun(X67,fun(X64,X68)),X70),s(X67,X71))))),s(fun(X64,fun(X65,X73)),X75))) = s(fun(X64,fun(X65,X72)),happ(s(fun(X67,fun(X64,fun(X65,X72))),'_dst_x000x111x011_3'(s(fun(X66,fun(X73,X72)),X74),s(fun(X67,fun(X64,fun(X65,X66))),'_dst_x00x11_2'(s(fun(X68,fun(X65,X66)),X69),s(fun(X67,fun(X64,X68)),X70))),s(fun(X64,fun(X65,X73)),X75))),s(X67,X71)))) )),
  inference(superposition,[],[f367,f358])).
fof(f44065,plain,(
  ( ! [X61,X59,X57,X54,X52,X50,X62,X60,X58,X56,X55,X53,X51,X63] : (s(fun(X50,fun(X51,X60)),'_dst_x00x11x11_3'(s(fun(X52,fun(X61,X60)),X62),s(fun(X50,fun(X51,X52)),'_dst_x0x0x1_3'(s(fun(X54,fun(X55,fun(X51,X52))),X56),s(X54,happ(s(fun(X53,X54),X57),s(X53,X59))),s(fun(X50,X55),X58))),s(fun(X50,fun(X51,X61)),X63))) = s(fun(X50,fun(X51,X60)),happ(s(fun(X53,fun(X50,fun(X51,X60))),'_dst_x000x111x011_3'(s(fun(X52,fun(X61,X60)),X62),s(fun(X53,fun(X50,fun(X51,X52))),'_dst_x00x10x01_3'(s(fun(X54,fun(X55,fun(X51,X52))),X56),s(fun(X53,X54),X57),s(fun(X50,X55),X58))),s(fun(X50,fun(X51,X61)),X63))),s(X53,X59)))) )),
  inference(superposition,[],[f367,f362])).
fof(f44064,plain,(
  ( ! [X47,X45,X43,X41,X48,X46,X44,X42,X40,X49] : (s(fun(fun(X40,fun(X41,X42)),fun(X41,X46)),'_dst_x00x11x11_3'(s(fun(X42,fun(X47,X46)),X48),s(fun(fun(X40,fun(X41,X42)),fun(X41,X42)),'_dstsel_0_x0_1'(s(X40,happ(s(fun(X43,X40),X44),s(X43,X45))))),s(fun(fun(X40,fun(X41,X42)),fun(X41,X47)),X49))) = s(fun(fun(X40,fun(X41,X42)),fun(X41,X46)),happ(s(fun(X43,fun(fun(X40,fun(X41,X42)),fun(X41,X46))),'_dst_x000x111x011_3'(s(fun(X42,fun(X47,X46)),X48),s(fun(X43,fun(fun(X40,fun(X41,X42)),fun(X41,X42))),'_dstsel_1_x10_1'(s(fun(X43,X40),X44))),s(fun(fun(X40,fun(X41,X42)),fun(X41,X47)),X49))),s(X43,X45)))) )),
  inference(superposition,[],[f367,f339])).
fof(f44063,plain,(
  ( ! [X30,X28,X26,X39,X37,X35,X33,X31,X29,X27,X38,X36,X34,X32] : (s(fun(X26,fun(X27,X36)),'_dst_x00x11x11_3'(s(fun(X28,fun(X37,X36)),X38),s(fun(X26,fun(X27,X28)),'_dst_x00x11x11_3'(s(fun(X30,fun(X31,X28)),X32),s(fun(X26,fun(X27,X30)),happ(s(fun(X29,fun(X26,fun(X27,X30))),X33),s(X29,X35))),s(fun(X26,fun(X27,X31)),X34))),s(fun(X26,fun(X27,X37)),X39))) = s(fun(X26,fun(X27,X36)),happ(s(fun(X29,fun(X26,fun(X27,X36))),'_dst_x000x111x011_3'(s(fun(X28,fun(X37,X36)),X38),s(fun(X29,fun(X26,fun(X27,X28))),'_dst_x000x111x011_3'(s(fun(X30,fun(X31,X28)),X32),s(fun(X29,fun(X26,fun(X27,X30))),X33),s(fun(X26,fun(X27,X31)),X34))),s(fun(X26,fun(X27,X37)),X39))),s(X29,X35)))) )),
  inference(superposition,[],[f367,f367])).
fof(f44062,plain,(
  ( ! [X24,X14,X12,X23,X21,X19,X17,X25,X15,X13,X22,X20,X18,X16] : (s(fun(X12,fun(X13,X22)),'_dst_x00x11x11_3'(s(fun(X14,fun(X23,X22)),X24),s(fun(X12,fun(X13,X14)),'_dst_x00x00x11_3'(s(fun(X16,fun(X17,X14)),X18),s(X16,happ(s(fun(X15,X16),X19),s(X15,X21))),s(fun(X12,fun(X13,X17)),X20))),s(fun(X12,fun(X13,X23)),X25))) = s(fun(X12,fun(X13,X22)),happ(s(fun(X15,fun(X12,fun(X13,X22))),'_dst_x000x111x011_3'(s(fun(X14,fun(X23,X22)),X24),s(fun(X15,fun(X12,fun(X13,X14))),'_dst_x000x100x011_3'(s(fun(X16,fun(X17,X14)),X18),s(fun(X15,X16),X19),s(fun(X12,fun(X13,X17)),X20))),s(fun(X12,fun(X13,X23)),X25))),s(X15,X21)))) )),
  inference(superposition,[],[f367,f366])).
fof(f44061,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s(fun(X0,fun(X1,X8)),'_dst_x00x11x11_3'(s(fun(X2,fun(X9,X8)),X10),s(fun(X0,fun(X1,X2)),'_dst_x00x11_2'(s(fun(X4,X2),X5),s(fun(X0,fun(X1,X4)),happ(s(fun(X3,fun(X0,fun(X1,X4))),X6),s(X3,X7))))),s(fun(X0,fun(X1,X9)),X11))) = s(fun(X0,fun(X1,X8)),happ(s(fun(X3,fun(X0,fun(X1,X8))),'_dst_x000x111x011_3'(s(fun(X2,fun(X9,X8)),X10),s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x111_2'(s(fun(X4,X2),X5),s(fun(X3,fun(X0,fun(X1,X4))),X6))),s(fun(X0,fun(X1,X9)),X11))),s(X3,X7)))) )),
  inference(superposition,[],[f367,f361])).
fof(f44060,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X0,fun(X1,X3)),happ(s(fun(X6,fun(X0,fun(X1,X3))),X7),s(X6,X8))),s(fun(X0,fun(X1,X4)),X9))))) = s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),happ(s(fun(X6,fun(X0,fun(X1,X2))),'_dst_x000x111x011_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X6,fun(X0,fun(X1,X3))),X7),s(fun(X0,fun(X1,X4)),X9))),s(X6,X8)))))) )),
  inference(unit_resulting_resolution,[],[f367,f303])).
fof(f43969,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f381,f43823,f1150])).
fof(f43970,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43823,f1169])).
fof(f43971,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43823,f4018])).
fof(f43972,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'!_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f43823,f5307])).
fof(f43822,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'!_1'))))) )),
  inference(unit_resulting_resolution,[],[f43209,f319])).
fof(f43823,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'!_1'))))) )),
  inference(unit_resulting_resolution,[],[f43209,f3449])).
fof(f43844,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))),s(fun(fun(X0,bool),bool),'!_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f43209,f399])).
fof(f43845,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(X0,bool)),'const.benchmark.Once_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))),s(fun(fun(X0,bool),bool),'!_1'),s(fun('type.benchmark.times'(fun(X0,bool)),fun('type.benchmark.times'(fun(X0,bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f43209,f399])).
fof(f43849,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f381,f43209,f1150])).
fof(f43850,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f43209,f1169])).
fof(f43851,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f43209,f4018])).
fof(f43852,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'!_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f43209,f5307])).
fof(f43771,plain,(
  ( ! [X639,X644,X646,X640,X642,X638,X645,X641,X643,X637] : (s(fun(X637,X638),X646) != s(fun(X637,X638),happ(s(fun(X642,fun(X637,X638)),'_dst_x00x11x11_3'(s(fun(X639,fun(X640,X638)),X641),s(fun(X642,fun(X637,X639)),X643),s(fun(X642,fun(X637,X640)),X645))),s(X642,X644))) | s('type.benchmark.times'(fun(X637,X638)),'const.benchmark.Once_1'(s(fun(X637,X638),X646))) = s('type.benchmark.times'(fun(X637,X638)),'const.benchmark.Once_1'(s(fun(X637,X638),'_dst_x0x1x1_3'(s(fun(X639,fun(X640,X638)),X641),s(fun(X637,X639),happ(s(fun(X642,fun(X637,X639)),X643),s(X642,X644))),s(fun(X637,X640),happ(s(fun(X642,fun(X637,X640)),X645),s(X642,X644)))))))) )),
  inference(superposition,[],[f303,f365])).
fof(f43769,plain,(
  ( ! [X625,X621,X623,X617,X619,X624,X626,X620,X622,X618] : (s('type.benchmark.times'(fun(X617,X618)),'const.benchmark.Once_1'(s(fun(X617,X618),X626))) != s('type.benchmark.times'(fun(X617,X618)),'const.benchmark.Once_1'(s(fun(X617,X618),happ(s(fun(X622,fun(X617,X618)),'_dst_x00x11x11_3'(s(fun(X619,fun(X620,X618)),X621),s(fun(X622,fun(X617,X619)),X623),s(fun(X622,fun(X617,X620)),X625))),s(X622,X624))))) | s(fun(X617,X618),X626) = s(fun(X617,X618),'_dst_x0x1x1_3'(s(fun(X619,fun(X620,X618)),X621),s(fun(X617,X619),happ(s(fun(X622,fun(X617,X619)),X623),s(X622,X624))),s(fun(X617,X620),happ(s(fun(X622,fun(X617,X620)),X625),s(X622,X624)))))) )),
  inference(superposition,[],[f302,f365])).
fof(f43684,plain,(
  ( ! [X796,X790,X788,X795,X793,X797,X791,X789,X794,X792] : (s(fun(X788,X789),X797) != s(fun(X788,X789),'_dst_x0x1x1_3'(s(fun(X791,fun(X792,X789)),X793),s(fun(X788,X791),happ(s(fun(X790,fun(X788,X791)),X794),s(X790,X796))),s(fun(X788,X792),happ(s(fun(X790,fun(X788,X792)),X795),s(X790,X796))))) | s('type.benchmark.times'(fun(X788,X789)),'const.benchmark.Once_1'(s(fun(X788,X789),X797))) = s('type.benchmark.times'(fun(X788,X789)),'const.benchmark.Once_1'(s(fun(X788,X789),happ(s(fun(X790,fun(X788,X789)),'_dst_x00x11x11_3'(s(fun(X791,fun(X792,X789)),X793),s(fun(X790,fun(X788,X791)),X794),s(fun(X790,fun(X788,X792)),X795))),s(X790,X796)))))) )),
  inference(superposition,[],[f303,f365])).
fof(f43682,plain,(
  ( ! [X777,X771,X769,X775,X773,X776,X770,X768,X774,X772] : (s('type.benchmark.times'(fun(X768,X769)),'const.benchmark.Once_1'(s(fun(X768,X769),X777))) != s('type.benchmark.times'(fun(X768,X769)),'const.benchmark.Once_1'(s(fun(X768,X769),'_dst_x0x1x1_3'(s(fun(X771,fun(X772,X769)),X773),s(fun(X768,X771),happ(s(fun(X770,fun(X768,X771)),X774),s(X770,X776))),s(fun(X768,X772),happ(s(fun(X770,fun(X768,X772)),X775),s(X770,X776))))))) | s(fun(X768,X769),X777) = s(fun(X768,X769),happ(s(fun(X770,fun(X768,X769)),'_dst_x00x11x11_3'(s(fun(X771,fun(X772,X769)),X773),s(fun(X770,fun(X768,X771)),X774),s(fun(X770,fun(X768,X772)),X775))),s(X770,X776)))) )),
  inference(superposition,[],[f302,f365])).
fof(f43674,plain,(
  ( ! [X697,X693,X695,X689,X691,X696,X698,X692,X694,X688,X690] : (s(X697,happ(s(fun(X690,X697),'_dst_x0x1_2'(s(fun(fun(X688,X689),X697),X698),s(fun(X690,fun(X688,X689)),'_dst_x00x11x11_3'(s(fun(X691,fun(X692,X689)),X693),s(fun(X690,fun(X688,X691)),X694),s(fun(X690,fun(X688,X692)),X695))))),s(X690,X696))) = s(X697,happ(s(fun(fun(X688,X689),X697),X698),s(fun(X688,X689),'_dst_x0x1x1_3'(s(fun(X691,fun(X692,X689)),X693),s(fun(X688,X691),happ(s(fun(X690,fun(X688,X691)),X694),s(X690,X696))),s(fun(X688,X692),happ(s(fun(X690,fun(X688,X692)),X695),s(X690,X696)))))))) )),
  inference(superposition,[],[f340,f365])).
fof(f43673,plain,(
  ( ! [X685,X687,X681,X683,X677,X679,X675,X684,X686,X680,X682,X676,X678] : (s(X684,happ(s(fun(X677,X684),'_dst_x0x0x1_3'(s(fun(X685,fun(fun(X675,X676),X684)),X686),s(X685,X687),s(fun(X677,fun(X675,X676)),'_dst_x00x11x11_3'(s(fun(X678,fun(X679,X676)),X680),s(fun(X677,fun(X675,X678)),X681),s(fun(X677,fun(X675,X679)),X682))))),s(X677,X683))) = s(X684,happ(s(fun(fun(X675,X676),X684),happ(s(fun(X685,fun(fun(X675,X676),X684)),X686),s(X685,X687))),s(fun(X675,X676),'_dst_x0x1x1_3'(s(fun(X678,fun(X679,X676)),X680),s(fun(X675,X678),happ(s(fun(X677,fun(X675,X678)),X681),s(X677,X683))),s(fun(X675,X679),happ(s(fun(X677,fun(X675,X679)),X682),s(X677,X683)))))))) )),
  inference(superposition,[],[f359,f365])).
fof(f43672,plain,(
  ( ! [X666,X668,X670,X662,X664,X673,X667,X661,X671,X663,X665,X669,X672,X674] : (s(fun(X670,X671),happ(s(fun(X663,fun(X670,X671)),'_dst_x00x10x01_3'(s(fun(fun(X661,X662),fun(X672,X671)),X673),s(fun(X663,fun(X661,X662)),'_dst_x00x11x11_3'(s(fun(X664,fun(X665,X662)),X666),s(fun(X663,fun(X661,X664)),X667),s(fun(X663,fun(X661,X665)),X668))),s(fun(X670,X672),X674))),s(X663,X669))) = s(fun(X670,X671),'_dst_x0x0x1_3'(s(fun(fun(X661,X662),fun(X672,X671)),X673),s(fun(X661,X662),'_dst_x0x1x1_3'(s(fun(X664,fun(X665,X662)),X666),s(fun(X661,X664),happ(s(fun(X663,fun(X661,X664)),X667),s(X663,X669))),s(fun(X661,X665),happ(s(fun(X663,fun(X661,X665)),X668),s(X663,X669))))),s(fun(X670,X672),X674)))) )),
  inference(superposition,[],[f362,f365])).
fof(f43671,plain,(
  ( ! [X660,X656,X658,X652,X654,X648,X650,X657,X659,X653,X655,X649,X651] : (s(X657,happ(s(fun(X650,X657),'_dst_x0x1x1_3'(s(fun(fun(X648,X649),fun(X658,X657)),X659),s(fun(X650,fun(X648,X649)),'_dst_x00x11x11_3'(s(fun(X651,fun(X652,X649)),X653),s(fun(X650,fun(X648,X651)),X654),s(fun(X650,fun(X648,X652)),X655))),s(fun(X650,X658),X660))),s(X650,X656))) = s(X657,happ(s(fun(X658,X657),happ(s(fun(fun(X648,X649),fun(X658,X657)),X659),s(fun(X648,X649),'_dst_x0x1x1_3'(s(fun(X651,fun(X652,X649)),X653),s(fun(X648,X651),happ(s(fun(X650,fun(X648,X651)),X654),s(X650,X656))),s(fun(X648,X652),happ(s(fun(X650,fun(X648,X652)),X655),s(X650,X656))))))),s(X658,happ(s(fun(X650,X658),X660),s(X650,X656)))))) )),
  inference(superposition,[],[f360,f365])).
fof(f43670,plain,(
  ( ! [X639,X635,X644,X646,X640,X642,X636,X638,X645,X647,X641,X643,X637] : (s(X644,happ(s(fun(X637,X644),'_dst_x0x1x1_3'(s(fun(X645,fun(fun(X635,X636),X644)),X646),s(fun(X637,X645),X647),s(fun(X637,fun(X635,X636)),'_dst_x00x11x11_3'(s(fun(X638,fun(X639,X636)),X640),s(fun(X637,fun(X635,X638)),X641),s(fun(X637,fun(X635,X639)),X642))))),s(X637,X643))) = s(X644,happ(s(fun(fun(X635,X636),X644),happ(s(fun(X645,fun(fun(X635,X636),X644)),X646),s(X645,happ(s(fun(X637,X645),X647),s(X637,X643))))),s(fun(X635,X636),'_dst_x0x1x1_3'(s(fun(X638,fun(X639,X636)),X640),s(fun(X635,X638),happ(s(fun(X637,fun(X635,X638)),X641),s(X637,X643))),s(fun(X635,X639),happ(s(fun(X637,fun(X635,X639)),X642),s(X637,X643)))))))) )),
  inference(superposition,[],[f360,f365])).
fof(f43669,plain,(
  ( ! [X633,X629,X631,X625,X627,X621,X623,X632,X634,X628,X630,X624,X626,X620,X622] : (s(fun(X629,fun(X630,X631)),happ(s(fun(X622,fun(X629,fun(X630,X631))),'_dst_x000x100x011_3'(s(fun(fun(X620,X621),fun(X632,X631)),X633),s(fun(X622,fun(X620,X621)),'_dst_x00x11x11_3'(s(fun(X623,fun(X624,X621)),X625),s(fun(X622,fun(X620,X623)),X626),s(fun(X622,fun(X620,X624)),X627))),s(fun(X629,fun(X630,X632)),X634))),s(X622,X628))) = s(fun(X629,fun(X630,X631)),'_dst_x00x00x11_3'(s(fun(fun(X620,X621),fun(X632,X631)),X633),s(fun(X620,X621),'_dst_x0x1x1_3'(s(fun(X623,fun(X624,X621)),X625),s(fun(X620,X623),happ(s(fun(X622,fun(X620,X623)),X626),s(X622,X628))),s(fun(X620,X624),happ(s(fun(X622,fun(X620,X624)),X627),s(X622,X628))))),s(fun(X629,fun(X630,X632)),X634)))) )),
  inference(superposition,[],[f366,f365])).
fof(f43655,plain,(
  ( ! [X412,X414,X408,X410,X416,X418,X413,X415,X409,X411,X417,X419] : (s(fun(X408,fun(X409,X418)),happ(s(fun(X411,fun(X408,fun(X409,X418))),'_dst_x000x111_2'(s(fun(X410,X418),X419),s(fun(X411,fun(X408,fun(X409,X410))),'_dst_x00x11x11_3'(s(fun(X412,fun(X413,fun(X409,X410))),X414),s(fun(X411,fun(X408,X412)),X415),s(fun(X411,fun(X408,X413)),X416))))),s(X411,X417))) = s(fun(X408,fun(X409,X418)),'_dst_x00x11_2'(s(fun(X410,X418),X419),s(fun(X408,fun(X409,X410)),'_dst_x0x1x1_3'(s(fun(X412,fun(X413,fun(X409,X410))),X414),s(fun(X408,X412),happ(s(fun(X411,fun(X408,X412)),X415),s(X411,X417))),s(fun(X408,X413),happ(s(fun(X411,fun(X408,X413)),X416),s(X411,X417)))))))) )),
  inference(superposition,[],[f361,f365])).
fof(f43637,plain,(
  ( ! [X94,X92,X90,X88,X99,X97,X95,X93,X91,X89,X98,X96] : (s(X89,happ(s(fun(X96,X89),'_dst_x0x1x1_3'(s(fun(X90,fun(X88,X89)),'_dst_x00x11x11_3'(s(fun(X91,fun(X92,X89)),X93),s(fun(X90,fun(X88,X91)),X94),s(fun(X90,fun(X88,X92)),X95))),s(fun(X96,X90),X97),s(fun(X96,X88),X99))),s(X96,X98))) = s(X89,happ(s(fun(X88,X89),'_dst_x0x1x1_3'(s(fun(X91,fun(X92,X89)),X93),s(fun(X88,X91),happ(s(fun(X90,fun(X88,X91)),X94),s(X90,happ(s(fun(X96,X90),X97),s(X96,X98))))),s(fun(X88,X92),happ(s(fun(X90,fun(X88,X92)),X95),s(X90,happ(s(fun(X96,X90),X97),s(X96,X98))))))),s(X88,happ(s(fun(X96,X88),X99),s(X96,X98)))))) )),
  inference(superposition,[],[f360,f365])).
fof(f43636,plain,(
  ( ! [X80,X78,X76,X87,X85,X83,X81,X79,X77,X75,X86,X84,X82] : (s(fun(X75,X84),happ(s(fun(X77,fun(X75,X84)),'_dst_x00x01x11_3'(s(fun(X85,fun(X76,X84)),X86),s(fun(X75,X85),X87),s(fun(X77,fun(X75,X76)),'_dst_x00x11x11_3'(s(fun(X78,fun(X79,X76)),X80),s(fun(X77,fun(X75,X78)),X81),s(fun(X77,fun(X75,X79)),X82))))),s(X77,X83))) = s(fun(X75,X84),'_dst_x0x1x1_3'(s(fun(X85,fun(X76,X84)),X86),s(fun(X75,X85),X87),s(fun(X75,X76),'_dst_x0x1x1_3'(s(fun(X78,fun(X79,X76)),X80),s(fun(X75,X78),happ(s(fun(X77,fun(X75,X78)),X81),s(X77,X83))),s(fun(X75,X79),happ(s(fun(X77,fun(X75,X79)),X82),s(X77,X83)))))))) )),
  inference(superposition,[],[f364,f365])).
fof(f43635,plain,(
  ( ! [X70,X68,X66,X64,X74,X72,X62,X71,X69,X67,X65,X73,X63] : (s(fun(X62,X71),happ(s(fun(X64,fun(X62,X71)),'_dst_x00x00x11_3'(s(fun(X72,fun(X63,X71)),X73),s(X72,X74),s(fun(X64,fun(X62,X63)),'_dst_x00x11x11_3'(s(fun(X65,fun(X66,X63)),X67),s(fun(X64,fun(X62,X65)),X68),s(fun(X64,fun(X62,X66)),X69))))),s(X64,X70))) = s(fun(X62,X71),'_dst_x0x0x1_3'(s(fun(X72,fun(X63,X71)),X73),s(X72,X74),s(fun(X62,X63),'_dst_x0x1x1_3'(s(fun(X65,fun(X66,X63)),X67),s(fun(X62,X65),happ(s(fun(X64,fun(X62,X65)),X68),s(X64,X70))),s(fun(X62,X66),happ(s(fun(X64,fun(X62,X66)),X69),s(X64,X70)))))))) )),
  inference(superposition,[],[f363,f365])).
fof(f43634,plain,(
  ( ! [X61,X59,X57,X54,X52,X50,X60,X58,X56,X55,X53,X51] : (s(X51,happ(s(fun(X59,X51),'_dst_x0x0x1_3'(s(fun(X52,fun(X50,X51)),'_dst_x00x11x11_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X52,fun(X50,X53)),X56),s(fun(X52,fun(X50,X54)),X57))),s(X52,X58),s(fun(X59,X50),X60))),s(X59,X61))) = s(X51,happ(s(fun(X50,X51),'_dst_x0x1x1_3'(s(fun(X53,fun(X54,X51)),X55),s(fun(X50,X53),happ(s(fun(X52,fun(X50,X53)),X56),s(X52,X58))),s(fun(X50,X54),happ(s(fun(X52,fun(X50,X54)),X57),s(X52,X58))))),s(X50,happ(s(fun(X59,X50),X60),s(X59,X61)))))) )),
  inference(superposition,[],[f359,f365])).
fof(f43633,plain,(
  ( ! [X39,X47,X45,X43,X41,X48,X46,X44,X42,X40,X49] : (s(fun(X39,X48),happ(s(fun(X41,fun(X39,X48)),'_dst_x00x11_2'(s(fun(X40,X48),X49),s(fun(X41,fun(X39,X40)),'_dst_x00x11x11_3'(s(fun(X42,fun(X43,X40)),X44),s(fun(X41,fun(X39,X42)),X45),s(fun(X41,fun(X39,X43)),X46))))),s(X41,X47))) = s(fun(X39,X48),'_dst_x0x1_2'(s(fun(X40,X48),X49),s(fun(X39,X40),'_dst_x0x1x1_3'(s(fun(X42,fun(X43,X40)),X44),s(fun(X39,X42),happ(s(fun(X41,fun(X39,X42)),X45),s(X41,X47))),s(fun(X39,X43),happ(s(fun(X41,fun(X39,X43)),X46),s(X41,X47)))))))) )),
  inference(superposition,[],[f358,f365])).
fof(f43632,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s(X30,happ(s(fun(X31,X30),'_dst_x1x0_2'(s(fun(X31,fun(X29,X30)),'_dst_x00x11x11_3'(s(fun(X32,fun(X33,X30)),X34),s(fun(X31,fun(X29,X32)),X35),s(fun(X31,fun(X29,X33)),X36))),s(X29,X38))),s(X31,X37))) = s(X30,happ(s(fun(X29,X30),'_dst_x0x1x1_3'(s(fun(X32,fun(X33,X30)),X34),s(fun(X29,X32),happ(s(fun(X31,fun(X29,X32)),X35),s(X31,X37))),s(fun(X29,X33),happ(s(fun(X31,fun(X29,X33)),X36),s(X31,X37))))),s(X29,X38)))) )),
  inference(superposition,[],[f341,f365])).
fof(f43628,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X9,X16] : (s(fun(X9,X10),happ(s(fun(X14,fun(X9,X10)),'_dst_x00x11x11_3'(s(fun(X11,fun(X12,X10)),X13),s(fun(X14,fun(X9,X11)),X15),s(fun(X14,fun(X9,X12)),X17))),s(X14,X16))) = s(fun(X9,X10),happ(s(fun(X14,fun(X9,X10)),'_dst_x00x01x11_3'(s(fun(X11,fun(X12,X10)),X13),s(fun(X9,X11),happ(s(fun(X14,fun(X9,X11)),X15),s(X14,X16))),s(fun(X14,fun(X9,X12)),X17))),s(X14,X16)))) )),
  inference(superposition,[],[f365,f364])).
fof(f43627,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s(fun(X206,X211),'_dst_x0x1x1_3'(s(fun(X212,fun(X207,X211)),X213),s(fun(X206,X212),happ(s(fun('type.num.num',fun(X206,X212)),X214),s('type.num.num',X210))),s(fun(X206,X207),'const.ind_type.FCONS_3'(s(fun(X206,X207),X209),s(fun('type.num.num',fun(X206,X207)),X208),s('type.num.num',X210))))) = s(fun(X206,X211),happ(s(fun('type.num.num',fun(X206,X211)),'_dst_x00x11x11_3'(s(fun(X212,fun(X207,X211)),X213),s(fun('type.num.num',fun(X206,X212)),X214),s(fun('type.num.num',fun(X206,X207)),happ(s(fun(fun(X206,X207),fun('type.num.num',fun(X206,X207))),'_dst_x1x0_2'(s(fun(fun(X206,X207),fun(fun('type.num.num',fun(X206,X207)),fun('type.num.num',fun(X206,X207)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X206,X207)),X208))),s(fun(X206,X207),X209))))),s('type.num.num',X210)))) )),
  inference(superposition,[],[f365,f377])).
fof(f43626,plain,(
  ( ! [X198,X204,X202,X200,X199,X197,X205,X203,X201] : (s(fun(X197,X202),'_dst_x0x1x1_3'(s(fun(X203,fun(X198,X202)),X204),s(fun(X197,X203),happ(s(fun(fun(X199,fun(X197,X198)),fun(X197,X203)),X205),s(fun(X199,fun(X197,X198)),X201))),s(fun(X197,X198),happ(s(fun(X199,fun(X197,X198)),X201),s(X199,X200))))) = s(fun(X197,X202),happ(s(fun(fun(X199,fun(X197,X198)),fun(X197,X202)),'_dst_x00x11x11_3'(s(fun(X203,fun(X198,X202)),X204),s(fun(fun(X199,fun(X197,X198)),fun(X197,X203)),X205),s(fun(fun(X199,fun(X197,X198)),fun(X197,X198)),'_dstsel_0_x0_1'(s(X199,X200))))),s(fun(X199,fun(X197,X198)),X201)))) )),
  inference(superposition,[],[f365,f333])).
fof(f43625,plain,(
  ( ! [X191,X189,X187,X185,X194,X196,X192,X190,X188,X186,X184,X193,X195] : (s(fun(X184,X193),happ(s(fun(X186,fun(X184,X193)),'_dst_x00x11x11_3'(s(fun(X194,fun(X185,X193)),X195),s(fun(X186,fun(X184,X194)),X196),s(fun(X186,fun(X184,X185)),'_dst_x0x0x1_3'(s(fun(X187,fun(X188,fun(X184,X185))),X189),s(X187,X190),s(fun(X186,X188),X191))))),s(X186,X192))) = s(fun(X184,X193),'_dst_x0x1x1_3'(s(fun(X194,fun(X185,X193)),X195),s(fun(X184,X194),happ(s(fun(X186,fun(X184,X194)),X196),s(X186,X192))),s(fun(X184,X185),happ(s(fun(X188,fun(X184,X185)),happ(s(fun(X187,fun(X188,fun(X184,X185))),X189),s(X187,X190))),s(X188,happ(s(fun(X186,X188),X191),s(X186,X192)))))))) )),
  inference(superposition,[],[f365,f359])).
fof(f43624,plain,(
  ( ! [X177,X175,X173,X182,X180,X178,X176,X174,X183,X181,X179] : (s(fun(X173,X180),happ(s(fun(X175,fun(X173,X180)),'_dst_x00x11x11_3'(s(fun(X181,fun(X174,X180)),X182),s(fun(X175,fun(X173,X181)),X183),s(fun(X175,fun(X173,X174)),'_dst_x1x0_2'(s(fun(X175,fun(X176,fun(X173,X174))),X177),s(X176,X178))))),s(X175,X179))) = s(fun(X173,X180),'_dst_x0x1x1_3'(s(fun(X181,fun(X174,X180)),X182),s(fun(X173,X181),happ(s(fun(X175,fun(X173,X181)),X183),s(X175,X179))),s(fun(X173,X174),happ(s(fun(X176,fun(X173,X174)),happ(s(fun(X175,fun(X176,fun(X173,X174))),X177),s(X175,X179))),s(X176,X178)))))) )),
  inference(superposition,[],[f365,f341])).
fof(f43623,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X172,X170,X168] : (s(fun(X164,X169),'_dst_x0x1x1_3'(s(fun(X170,fun(X165,X169)),X171),s(fun(X164,X170),happ(s(fun(X166,fun(X164,X170)),X172),s(X166,X168))),s(fun(X164,X165),X167))) = s(fun(X164,X169),happ(s(fun(X166,fun(X164,X169)),'_dst_x00x11x11_3'(s(fun(X170,fun(X165,X169)),X171),s(fun(X166,fun(X164,X170)),X172),s(fun(X166,fun(X164,X165)),'_dst_x0_1'(s(fun(X164,X165),X167))))),s(X166,X168)))) )),
  inference(superposition,[],[f365,f330])).
fof(f43622,plain,(
  ( ! [X158,X156,X154,X163,X161,X159,X157,X155,X153,X162,X160] : (s(fun(X153,X160),happ(s(fun(X155,fun(X153,X160)),'_dst_x00x11x11_3'(s(fun(X161,fun(X154,X160)),X162),s(fun(X155,fun(X153,X161)),X163),s(fun(X155,fun(X153,X154)),'_dst_x0x1_2'(s(fun(X156,fun(X153,X154)),X157),s(fun(X155,X156),X158))))),s(X155,X159))) = s(fun(X153,X160),'_dst_x0x1x1_3'(s(fun(X161,fun(X154,X160)),X162),s(fun(X153,X161),happ(s(fun(X155,fun(X153,X161)),X163),s(X155,X159))),s(fun(X153,X154),happ(s(fun(X156,fun(X153,X154)),X157),s(X156,happ(s(fun(X155,X156),X158),s(X155,X159)))))))) )),
  inference(superposition,[],[f365,f340])).
fof(f43621,plain,(
  ( ! [X146,X144,X152,X142,X140,X151,X149,X147,X145,X143,X141,X150,X148] : (s(fun(X140,X149),happ(s(fun(X142,fun(X140,X149)),'_dst_x00x11x11_3'(s(fun(X150,fun(X141,X149)),X151),s(fun(X142,fun(X140,X150)),X152),s(fun(X142,fun(X140,X141)),happ(s(fun(X143,fun(X142,fun(X140,X141))),X144),s(X143,happ(s(fun(X145,X143),X146),s(X145,X147))))))),s(X142,happ(s(fun(X145,X142),X148),s(X145,X147))))) = s(fun(X140,X149),'_dst_x0x1x1_3'(s(fun(X150,fun(X141,X149)),X151),s(fun(X140,X150),happ(s(fun(X142,fun(X140,X150)),X152),s(X142,happ(s(fun(X145,X142),X148),s(X145,X147))))),s(fun(X140,X141),happ(s(fun(X145,fun(X140,X141)),'_dst_x0x1x1_3'(s(fun(X143,fun(X142,fun(X140,X141))),X144),s(fun(X145,X143),X146),s(fun(X145,X142),X148))),s(X145,X147)))))) )),
  inference(superposition,[],[f365,f360])).
fof(f43620,plain,(
  ( ! [X127,X134,X132,X130,X128,X138,X136,X135,X133,X131,X129,X139,X137] : (s(fun(X127,X136),happ(s(fun(X129,fun(X127,X136)),'_dst_x00x11x11_3'(s(fun(X137,fun(X128,X136)),X138),s(fun(X129,fun(X127,X137)),X139),s(fun(X129,fun(X127,X128)),happ(s(fun(X130,fun(X129,fun(X127,X128))),X131),s(X130,X132))))),s(X129,happ(s(fun(X133,X129),X134),s(X133,X135))))) = s(fun(X127,X136),'_dst_x0x1x1_3'(s(fun(X137,fun(X128,X136)),X138),s(fun(X127,X137),happ(s(fun(X129,fun(X127,X137)),X139),s(X129,happ(s(fun(X133,X129),X134),s(X133,X135))))),s(fun(X127,X128),happ(s(fun(X133,fun(X127,X128)),'_dst_x0x0x1_3'(s(fun(X130,fun(X129,fun(X127,X128))),X131),s(X130,X132),s(fun(X133,X129),X134))),s(X133,X135)))))) )),
  inference(superposition,[],[f365,f359])).
fof(f43619,plain,(
  ( ! [X125,X123,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (s(fun(X116,X123),happ(s(fun(X118,fun(X116,X123)),'_dst_x00x11x11_3'(s(fun(X124,fun(X117,X123)),X125),s(fun(X118,fun(X116,X124)),X126),s(fun(X118,fun(X116,X117)),happ(s(fun(X119,fun(X118,fun(X116,X117))),X120),s(X119,X121))))),s(X118,X122))) = s(fun(X116,X123),'_dst_x0x1x1_3'(s(fun(X124,fun(X117,X123)),X125),s(fun(X116,X124),happ(s(fun(X118,fun(X116,X124)),X126),s(X118,X122))),s(fun(X116,X117),happ(s(fun(X119,fun(X116,X117)),'_dst_x1x0_2'(s(fun(X119,fun(X118,fun(X116,X117))),X120),s(X118,X122))),s(X119,X121)))))) )),
  inference(superposition,[],[f365,f341])).
fof(f43618,plain,(
  ( ! [X111,X109,X107,X105,X114,X112,X110,X108,X106,X115,X113] : (s(fun(X105,X112),happ(s(fun(X107,fun(X105,X112)),'_dst_x00x11x11_3'(s(fun(X113,fun(X106,X112)),X114),s(fun(X107,fun(X105,X113)),X115),s(fun(X107,fun(X105,X106)),X108))),s(X107,happ(s(fun(X109,X107),X110),s(X109,X111))))) = s(fun(X105,X112),'_dst_x0x1x1_3'(s(fun(X113,fun(X106,X112)),X114),s(fun(X105,X113),happ(s(fun(X107,fun(X105,X113)),X115),s(X107,happ(s(fun(X109,X107),X110),s(X109,X111))))),s(fun(X105,X106),happ(s(fun(X109,fun(X105,X106)),'_dst_x0x1_2'(s(fun(X107,fun(X105,X106)),X108),s(fun(X109,X107),X110))),s(X109,X111)))))) )),
  inference(superposition,[],[f365,f340])).
fof(f43617,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s(fun(X98,X101),'_dst_x0x1x1_3'(s(fun(X102,fun(X99,X101)),X103),s(fun(X98,X102),happ(s(fun(fun(X98,X99),fun(X98,X102)),X104),s(fun(X98,X99),X100))),s(fun(X98,X99),X100))) = s(fun(X98,X101),happ(s(fun(fun(X98,X99),fun(X98,X101)),'_dst_x00x11x11_3'(s(fun(X102,fun(X99,X101)),X103),s(fun(fun(X98,X99),fun(X98,X102)),X104),s(fun(fun(X98,X99),fun(X98,X99)),'_i_0_0'))),s(fun(X98,X99),X100)))) )),
  inference(superposition,[],[f365,f290])).
fof(f43616,plain,(
  ( ! [X94,X92,X90,X88,X97,X87,X85,X95,X93,X91,X89,X96,X86,X84] : (s(fun(X84,X94),happ(s(fun(X87,fun(X84,X94)),'_dst_x00x11x11_3'(s(fun(X95,fun(fun(X85,X86),X94)),X96),s(fun(X87,fun(X84,X95)),X97),s(fun(X87,fun(X84,fun(X85,X86))),'_dst_x000x100x011_3'(s(fun(X88,fun(X89,X86)),X90),s(fun(X87,X88),X91),s(fun(X84,fun(X85,X89)),X92))))),s(X87,X93))) = s(fun(X84,X94),'_dst_x0x1x1_3'(s(fun(X95,fun(fun(X85,X86),X94)),X96),s(fun(X84,X95),happ(s(fun(X87,fun(X84,X95)),X97),s(X87,X93))),s(fun(X84,fun(X85,X86)),'_dst_x00x00x11_3'(s(fun(X88,fun(X89,X86)),X90),s(X88,happ(s(fun(X87,X88),X91),s(X87,X93))),s(fun(X84,fun(X85,X89)),X92)))))) )),
  inference(superposition,[],[f365,f366])).
fof(f43615,plain,(
  ( ! [X80,X78,X76,X74,X72,X83,X81,X79,X77,X75,X73,X82] : (s(fun(X72,X80),happ(s(fun(X75,fun(X72,X80)),'_dst_x00x11x11_3'(s(fun(X81,fun(fun(X73,X74),X80)),X82),s(fun(X75,fun(X72,X81)),X83),s(fun(X75,fun(X72,fun(X73,X74))),'_dst_x000x111_2'(s(fun(X76,X74),X77),s(fun(X75,fun(X72,fun(X73,X76))),X78))))),s(X75,X79))) = s(fun(X72,X80),'_dst_x0x1x1_3'(s(fun(X81,fun(fun(X73,X74),X80)),X82),s(fun(X72,X81),happ(s(fun(X75,fun(X72,X81)),X83),s(X75,X79))),s(fun(X72,fun(X73,X74)),'_dst_x00x11_2'(s(fun(X76,X74),X77),s(fun(X72,fun(X73,X76)),happ(s(fun(X75,fun(X72,fun(X73,X76))),X78),s(X75,X79)))))))) )),
  inference(superposition,[],[f365,f361])).
fof(f43614,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X62,X60,X71,X69,X67,X65,X63] : (s(fun(X59,X68),happ(s(fun(X61,fun(X59,X68)),'_dst_x00x11x11_3'(s(fun(X69,fun(X60,X68)),X70),s(fun(X61,fun(X59,X69)),X71),s(fun(X61,fun(X59,X60)),'_dst_x00x00x11_3'(s(fun(X62,fun(X63,X60)),X64),s(X62,X65),s(fun(X61,fun(X59,X63)),X66))))),s(X61,X67))) = s(fun(X59,X68),'_dst_x0x1x1_3'(s(fun(X69,fun(X60,X68)),X70),s(fun(X59,X69),happ(s(fun(X61,fun(X59,X69)),X71),s(X61,X67))),s(fun(X59,X60),'_dst_x0x0x1_3'(s(fun(X62,fun(X63,X60)),X64),s(X62,X65),s(fun(X59,X63),happ(s(fun(X61,fun(X59,X63)),X66),s(X61,X67)))))))) )),
  inference(superposition,[],[f365,f363])).
fof(f43613,plain,(
  ( ! [X57,X47,X54,X52,X50,X48,X58,X56,X46,X55,X53,X51,X49] : (s(fun(X46,X55),happ(s(fun(X48,fun(X46,X55)),'_dst_x00x11x11_3'(s(fun(X56,fun(X47,X55)),X57),s(fun(X48,fun(X46,X56)),X58),s(fun(X48,fun(X46,X47)),'_dst_x00x11x11_3'(s(fun(X49,fun(X50,X47)),X51),s(fun(X48,fun(X46,X49)),X52),s(fun(X48,fun(X46,X50)),X53))))),s(X48,X54))) = s(fun(X46,X55),'_dst_x0x1x1_3'(s(fun(X56,fun(X47,X55)),X57),s(fun(X46,X56),happ(s(fun(X48,fun(X46,X56)),X58),s(X48,X54))),s(fun(X46,X47),'_dst_x0x1x1_3'(s(fun(X49,fun(X50,X47)),X51),s(fun(X46,X49),happ(s(fun(X48,fun(X46,X49)),X52),s(X48,X54))),s(fun(X46,X50),happ(s(fun(X48,fun(X46,X50)),X53),s(X48,X54)))))))) )),
  inference(superposition,[],[f365,f365])).
fof(f43612,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X44,X42,X40] : (s(fun(X33,X42),happ(s(fun(X35,fun(X33,X42)),'_dst_x00x11x11_3'(s(fun(X43,fun(X34,X42)),X44),s(fun(X35,fun(X33,X43)),X45),s(fun(X35,fun(X33,X34)),'_dst_x00x01x11_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X35,fun(X33,X37)),X40))))),s(X35,X41))) = s(fun(X33,X42),'_dst_x0x1x1_3'(s(fun(X43,fun(X34,X42)),X44),s(fun(X33,X43),happ(s(fun(X35,fun(X33,X43)),X45),s(X35,X41))),s(fun(X33,X34),'_dst_x0x1x1_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X33,X37),happ(s(fun(X35,fun(X33,X37)),X40),s(X35,X41)))))))) )),
  inference(superposition,[],[f365,f364])).
fof(f43611,plain,(
  ( ! [X30,X28,X26,X24,X23,X31,X29,X27,X25,X32,X22] : (s(fun(X22,X29),happ(s(fun(X24,fun(X22,X29)),'_dst_x00x11x11_3'(s(fun(X30,fun(X23,X29)),X31),s(fun(X24,fun(X22,X30)),X32),s(fun(X24,fun(X22,X23)),'_dst_x00x11_2'(s(fun(X25,X23),X26),s(fun(X24,fun(X22,X25)),X27))))),s(X24,X28))) = s(fun(X22,X29),'_dst_x0x1x1_3'(s(fun(X30,fun(X23,X29)),X31),s(fun(X22,X30),happ(s(fun(X24,fun(X22,X30)),X32),s(X24,X28))),s(fun(X22,X23),'_dst_x0x1_2'(s(fun(X25,X23),X26),s(fun(X22,X25),happ(s(fun(X24,fun(X22,X25)),X27),s(X24,X28)))))))) )),
  inference(superposition,[],[f365,f358])).
fof(f43610,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X9,X20,X18,X16] : (s(fun(X9,X18),happ(s(fun(X11,fun(X9,X18)),'_dst_x00x11x11_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X11,fun(X9,X19)),X21),s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))))),s(X11,X17))) = s(fun(X9,X18),'_dst_x0x1x1_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X9,X19),happ(s(fun(X11,fun(X9,X19)),X21),s(X11,X17))),s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,X17))),s(fun(X9,X13),X16)))))) )),
  inference(superposition,[],[f365,f362])).
fof(f43609,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x11x11_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(X2,fun(fun(X0,X1),X6)),X8),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4))) = s(fun(fun(X0,X1),X5),'_dst_x0x1x1_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(fun(X0,X1),X6),happ(s(fun(X2,fun(fun(X0,X1),X6)),X8),s(X2,X4))),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4)))))))) )),
  inference(superposition,[],[f365,f339])).
fof(f43468,plain,(
  ( ! [X212,X210,X208,X206,X213,X211,X209,X207,X214] : (s(fun(X206,X211),'_dst_x0x1x1_3'(s(fun(X207,fun(X212,X211)),X213),s(fun(X206,X207),'const.ind_type.FCONS_3'(s(fun(X206,X207),X209),s(fun('type.num.num',fun(X206,X207)),X208),s('type.num.num',X210))),s(fun(X206,X212),happ(s(fun('type.num.num',fun(X206,X212)),X214),s('type.num.num',X210))))) = s(fun(X206,X211),happ(s(fun('type.num.num',fun(X206,X211)),'_dst_x00x11x11_3'(s(fun(X207,fun(X212,X211)),X213),s(fun('type.num.num',fun(X206,X207)),happ(s(fun(fun(X206,X207),fun('type.num.num',fun(X206,X207))),'_dst_x1x0_2'(s(fun(fun(X206,X207),fun(fun('type.num.num',fun(X206,X207)),fun('type.num.num',fun(X206,X207)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X206,X207)),X208))),s(fun(X206,X207),X209))),s(fun('type.num.num',fun(X206,X212)),X214))),s('type.num.num',X210)))) )),
  inference(superposition,[],[f365,f377])).
fof(f43467,plain,(
  ( ! [X198,X204,X202,X200,X199,X197,X205,X203,X201] : (s(fun(X197,X202),'_dst_x0x1x1_3'(s(fun(X198,fun(X203,X202)),X204),s(fun(X197,X198),happ(s(fun(X199,fun(X197,X198)),X201),s(X199,X200))),s(fun(X197,X203),happ(s(fun(fun(X199,fun(X197,X198)),fun(X197,X203)),X205),s(fun(X199,fun(X197,X198)),X201))))) = s(fun(X197,X202),happ(s(fun(fun(X199,fun(X197,X198)),fun(X197,X202)),'_dst_x00x11x11_3'(s(fun(X198,fun(X203,X202)),X204),s(fun(fun(X199,fun(X197,X198)),fun(X197,X198)),'_dstsel_0_x0_1'(s(X199,X200))),s(fun(fun(X199,fun(X197,X198)),fun(X197,X203)),X205))),s(fun(X199,fun(X197,X198)),X201)))) )),
  inference(superposition,[],[f365,f333])).
fof(f43466,plain,(
  ( ! [X191,X189,X187,X185,X194,X196,X192,X190,X188,X186,X184,X193,X195] : (s(fun(X184,X193),happ(s(fun(X186,fun(X184,X193)),'_dst_x00x11x11_3'(s(fun(X185,fun(X194,X193)),X195),s(fun(X186,fun(X184,X185)),'_dst_x0x0x1_3'(s(fun(X187,fun(X188,fun(X184,X185))),X189),s(X187,X190),s(fun(X186,X188),X191))),s(fun(X186,fun(X184,X194)),X196))),s(X186,X192))) = s(fun(X184,X193),'_dst_x0x1x1_3'(s(fun(X185,fun(X194,X193)),X195),s(fun(X184,X185),happ(s(fun(X188,fun(X184,X185)),happ(s(fun(X187,fun(X188,fun(X184,X185))),X189),s(X187,X190))),s(X188,happ(s(fun(X186,X188),X191),s(X186,X192))))),s(fun(X184,X194),happ(s(fun(X186,fun(X184,X194)),X196),s(X186,X192)))))) )),
  inference(superposition,[],[f365,f359])).
fof(f43465,plain,(
  ( ! [X177,X175,X173,X182,X180,X178,X176,X174,X183,X181,X179] : (s(fun(X173,X180),happ(s(fun(X175,fun(X173,X180)),'_dst_x00x11x11_3'(s(fun(X174,fun(X181,X180)),X182),s(fun(X175,fun(X173,X174)),'_dst_x1x0_2'(s(fun(X175,fun(X176,fun(X173,X174))),X177),s(X176,X178))),s(fun(X175,fun(X173,X181)),X183))),s(X175,X179))) = s(fun(X173,X180),'_dst_x0x1x1_3'(s(fun(X174,fun(X181,X180)),X182),s(fun(X173,X174),happ(s(fun(X176,fun(X173,X174)),happ(s(fun(X175,fun(X176,fun(X173,X174))),X177),s(X175,X179))),s(X176,X178))),s(fun(X173,X181),happ(s(fun(X175,fun(X173,X181)),X183),s(X175,X179)))))) )),
  inference(superposition,[],[f365,f341])).
fof(f43464,plain,(
  ( ! [X167,X165,X171,X169,X166,X164,X172,X170,X168] : (s(fun(X164,X169),'_dst_x0x1x1_3'(s(fun(X165,fun(X170,X169)),X171),s(fun(X164,X165),X167),s(fun(X164,X170),happ(s(fun(X166,fun(X164,X170)),X172),s(X166,X168))))) = s(fun(X164,X169),happ(s(fun(X166,fun(X164,X169)),'_dst_x00x11x11_3'(s(fun(X165,fun(X170,X169)),X171),s(fun(X166,fun(X164,X165)),'_dst_x0_1'(s(fun(X164,X165),X167))),s(fun(X166,fun(X164,X170)),X172))),s(X166,X168)))) )),
  inference(superposition,[],[f365,f330])).
fof(f43463,plain,(
  ( ! [X158,X156,X154,X163,X161,X159,X157,X155,X153,X162,X160] : (s(fun(X153,X160),happ(s(fun(X155,fun(X153,X160)),'_dst_x00x11x11_3'(s(fun(X154,fun(X161,X160)),X162),s(fun(X155,fun(X153,X154)),'_dst_x0x1_2'(s(fun(X156,fun(X153,X154)),X157),s(fun(X155,X156),X158))),s(fun(X155,fun(X153,X161)),X163))),s(X155,X159))) = s(fun(X153,X160),'_dst_x0x1x1_3'(s(fun(X154,fun(X161,X160)),X162),s(fun(X153,X154),happ(s(fun(X156,fun(X153,X154)),X157),s(X156,happ(s(fun(X155,X156),X158),s(X155,X159))))),s(fun(X153,X161),happ(s(fun(X155,fun(X153,X161)),X163),s(X155,X159)))))) )),
  inference(superposition,[],[f365,f340])).
fof(f43462,plain,(
  ( ! [X146,X144,X152,X142,X140,X151,X149,X147,X145,X143,X141,X150,X148] : (s(fun(X140,X149),happ(s(fun(X142,fun(X140,X149)),'_dst_x00x11x11_3'(s(fun(X141,fun(X150,X149)),X151),s(fun(X142,fun(X140,X141)),happ(s(fun(X143,fun(X142,fun(X140,X141))),X144),s(X143,happ(s(fun(X145,X143),X146),s(X145,X147))))),s(fun(X142,fun(X140,X150)),X152))),s(X142,happ(s(fun(X145,X142),X148),s(X145,X147))))) = s(fun(X140,X149),'_dst_x0x1x1_3'(s(fun(X141,fun(X150,X149)),X151),s(fun(X140,X141),happ(s(fun(X145,fun(X140,X141)),'_dst_x0x1x1_3'(s(fun(X143,fun(X142,fun(X140,X141))),X144),s(fun(X145,X143),X146),s(fun(X145,X142),X148))),s(X145,X147))),s(fun(X140,X150),happ(s(fun(X142,fun(X140,X150)),X152),s(X142,happ(s(fun(X145,X142),X148),s(X145,X147)))))))) )),
  inference(superposition,[],[f365,f360])).
fof(f43461,plain,(
  ( ! [X127,X134,X132,X130,X128,X138,X136,X135,X133,X131,X129,X139,X137] : (s(fun(X127,X136),happ(s(fun(X129,fun(X127,X136)),'_dst_x00x11x11_3'(s(fun(X128,fun(X137,X136)),X138),s(fun(X129,fun(X127,X128)),happ(s(fun(X130,fun(X129,fun(X127,X128))),X131),s(X130,X132))),s(fun(X129,fun(X127,X137)),X139))),s(X129,happ(s(fun(X133,X129),X134),s(X133,X135))))) = s(fun(X127,X136),'_dst_x0x1x1_3'(s(fun(X128,fun(X137,X136)),X138),s(fun(X127,X128),happ(s(fun(X133,fun(X127,X128)),'_dst_x0x0x1_3'(s(fun(X130,fun(X129,fun(X127,X128))),X131),s(X130,X132),s(fun(X133,X129),X134))),s(X133,X135))),s(fun(X127,X137),happ(s(fun(X129,fun(X127,X137)),X139),s(X129,happ(s(fun(X133,X129),X134),s(X133,X135)))))))) )),
  inference(superposition,[],[f365,f359])).
fof(f43460,plain,(
  ( ! [X125,X123,X121,X118,X116,X126,X124,X122,X120,X119,X117] : (s(fun(X116,X123),happ(s(fun(X118,fun(X116,X123)),'_dst_x00x11x11_3'(s(fun(X117,fun(X124,X123)),X125),s(fun(X118,fun(X116,X117)),happ(s(fun(X119,fun(X118,fun(X116,X117))),X120),s(X119,X121))),s(fun(X118,fun(X116,X124)),X126))),s(X118,X122))) = s(fun(X116,X123),'_dst_x0x1x1_3'(s(fun(X117,fun(X124,X123)),X125),s(fun(X116,X117),happ(s(fun(X119,fun(X116,X117)),'_dst_x1x0_2'(s(fun(X119,fun(X118,fun(X116,X117))),X120),s(X118,X122))),s(X119,X121))),s(fun(X116,X124),happ(s(fun(X118,fun(X116,X124)),X126),s(X118,X122)))))) )),
  inference(superposition,[],[f365,f341])).
fof(f43459,plain,(
  ( ! [X111,X109,X107,X105,X114,X112,X110,X108,X106,X115,X113] : (s(fun(X105,X112),happ(s(fun(X107,fun(X105,X112)),'_dst_x00x11x11_3'(s(fun(X106,fun(X113,X112)),X114),s(fun(X107,fun(X105,X106)),X108),s(fun(X107,fun(X105,X113)),X115))),s(X107,happ(s(fun(X109,X107),X110),s(X109,X111))))) = s(fun(X105,X112),'_dst_x0x1x1_3'(s(fun(X106,fun(X113,X112)),X114),s(fun(X105,X106),happ(s(fun(X109,fun(X105,X106)),'_dst_x0x1_2'(s(fun(X107,fun(X105,X106)),X108),s(fun(X109,X107),X110))),s(X109,X111))),s(fun(X105,X113),happ(s(fun(X107,fun(X105,X113)),X115),s(X107,happ(s(fun(X109,X107),X110),s(X109,X111)))))))) )),
  inference(superposition,[],[f365,f340])).
fof(f43458,plain,(
  ( ! [X103,X101,X99,X102,X100,X98,X104] : (s(fun(X98,X101),'_dst_x0x1x1_3'(s(fun(X99,fun(X102,X101)),X103),s(fun(X98,X99),X100),s(fun(X98,X102),happ(s(fun(fun(X98,X99),fun(X98,X102)),X104),s(fun(X98,X99),X100))))) = s(fun(X98,X101),happ(s(fun(fun(X98,X99),fun(X98,X101)),'_dst_x00x11x11_3'(s(fun(X99,fun(X102,X101)),X103),s(fun(fun(X98,X99),fun(X98,X99)),'_i_0_0'),s(fun(fun(X98,X99),fun(X98,X102)),X104))),s(fun(X98,X99),X100)))) )),
  inference(superposition,[],[f365,f290])).
fof(f43457,plain,(
  ( ! [X94,X92,X90,X88,X97,X87,X85,X95,X93,X91,X89,X96,X86,X84] : (s(fun(X84,X94),happ(s(fun(X87,fun(X84,X94)),'_dst_x00x11x11_3'(s(fun(fun(X85,X86),fun(X95,X94)),X96),s(fun(X87,fun(X84,fun(X85,X86))),'_dst_x000x100x011_3'(s(fun(X88,fun(X89,X86)),X90),s(fun(X87,X88),X91),s(fun(X84,fun(X85,X89)),X92))),s(fun(X87,fun(X84,X95)),X97))),s(X87,X93))) = s(fun(X84,X94),'_dst_x0x1x1_3'(s(fun(fun(X85,X86),fun(X95,X94)),X96),s(fun(X84,fun(X85,X86)),'_dst_x00x00x11_3'(s(fun(X88,fun(X89,X86)),X90),s(X88,happ(s(fun(X87,X88),X91),s(X87,X93))),s(fun(X84,fun(X85,X89)),X92))),s(fun(X84,X95),happ(s(fun(X87,fun(X84,X95)),X97),s(X87,X93)))))) )),
  inference(superposition,[],[f365,f366])).
fof(f43456,plain,(
  ( ! [X80,X78,X76,X74,X72,X83,X81,X79,X77,X75,X73,X82] : (s(fun(X72,X80),happ(s(fun(X75,fun(X72,X80)),'_dst_x00x11x11_3'(s(fun(fun(X73,X74),fun(X81,X80)),X82),s(fun(X75,fun(X72,fun(X73,X74))),'_dst_x000x111_2'(s(fun(X76,X74),X77),s(fun(X75,fun(X72,fun(X73,X76))),X78))),s(fun(X75,fun(X72,X81)),X83))),s(X75,X79))) = s(fun(X72,X80),'_dst_x0x1x1_3'(s(fun(fun(X73,X74),fun(X81,X80)),X82),s(fun(X72,fun(X73,X74)),'_dst_x00x11_2'(s(fun(X76,X74),X77),s(fun(X72,fun(X73,X76)),happ(s(fun(X75,fun(X72,fun(X73,X76))),X78),s(X75,X79))))),s(fun(X72,X81),happ(s(fun(X75,fun(X72,X81)),X83),s(X75,X79)))))) )),
  inference(superposition,[],[f365,f361])).
fof(f43455,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X62,X60,X71,X69,X67,X65,X63] : (s(fun(X59,X68),happ(s(fun(X61,fun(X59,X68)),'_dst_x00x11x11_3'(s(fun(X60,fun(X69,X68)),X70),s(fun(X61,fun(X59,X60)),'_dst_x00x00x11_3'(s(fun(X62,fun(X63,X60)),X64),s(X62,X65),s(fun(X61,fun(X59,X63)),X66))),s(fun(X61,fun(X59,X69)),X71))),s(X61,X67))) = s(fun(X59,X68),'_dst_x0x1x1_3'(s(fun(X60,fun(X69,X68)),X70),s(fun(X59,X60),'_dst_x0x0x1_3'(s(fun(X62,fun(X63,X60)),X64),s(X62,X65),s(fun(X59,X63),happ(s(fun(X61,fun(X59,X63)),X66),s(X61,X67))))),s(fun(X59,X69),happ(s(fun(X61,fun(X59,X69)),X71),s(X61,X67)))))) )),
  inference(superposition,[],[f365,f363])).
fof(f43454,plain,(
  ( ! [X57,X47,X54,X52,X50,X48,X58,X56,X46,X55,X53,X51,X49] : (s(fun(X46,X55),happ(s(fun(X48,fun(X46,X55)),'_dst_x00x11x11_3'(s(fun(X47,fun(X56,X55)),X57),s(fun(X48,fun(X46,X47)),'_dst_x00x11x11_3'(s(fun(X49,fun(X50,X47)),X51),s(fun(X48,fun(X46,X49)),X52),s(fun(X48,fun(X46,X50)),X53))),s(fun(X48,fun(X46,X56)),X58))),s(X48,X54))) = s(fun(X46,X55),'_dst_x0x1x1_3'(s(fun(X47,fun(X56,X55)),X57),s(fun(X46,X47),'_dst_x0x1x1_3'(s(fun(X49,fun(X50,X47)),X51),s(fun(X46,X49),happ(s(fun(X48,fun(X46,X49)),X52),s(X48,X54))),s(fun(X46,X50),happ(s(fun(X48,fun(X46,X50)),X53),s(X48,X54))))),s(fun(X46,X56),happ(s(fun(X48,fun(X46,X56)),X58),s(X48,X54)))))) )),
  inference(superposition,[],[f365,f365])).
fof(f43453,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X44,X42,X40] : (s(fun(X33,X42),happ(s(fun(X35,fun(X33,X42)),'_dst_x00x11x11_3'(s(fun(X34,fun(X43,X42)),X44),s(fun(X35,fun(X33,X34)),'_dst_x00x01x11_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X35,fun(X33,X37)),X40))),s(fun(X35,fun(X33,X43)),X45))),s(X35,X41))) = s(fun(X33,X42),'_dst_x0x1x1_3'(s(fun(X34,fun(X43,X42)),X44),s(fun(X33,X34),'_dst_x0x1x1_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X33,X37),happ(s(fun(X35,fun(X33,X37)),X40),s(X35,X41))))),s(fun(X33,X43),happ(s(fun(X35,fun(X33,X43)),X45),s(X35,X41)))))) )),
  inference(superposition,[],[f365,f364])).
fof(f43452,plain,(
  ( ! [X30,X28,X26,X24,X23,X31,X29,X27,X25,X32,X22] : (s(fun(X22,X29),happ(s(fun(X24,fun(X22,X29)),'_dst_x00x11x11_3'(s(fun(X23,fun(X30,X29)),X31),s(fun(X24,fun(X22,X23)),'_dst_x00x11_2'(s(fun(X25,X23),X26),s(fun(X24,fun(X22,X25)),X27))),s(fun(X24,fun(X22,X30)),X32))),s(X24,X28))) = s(fun(X22,X29),'_dst_x0x1x1_3'(s(fun(X23,fun(X30,X29)),X31),s(fun(X22,X23),'_dst_x0x1_2'(s(fun(X25,X23),X26),s(fun(X22,X25),happ(s(fun(X24,fun(X22,X25)),X27),s(X24,X28))))),s(fun(X22,X30),happ(s(fun(X24,fun(X22,X30)),X32),s(X24,X28)))))) )),
  inference(superposition,[],[f365,f358])).
fof(f43451,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X9,X20,X18,X16] : (s(fun(X9,X18),happ(s(fun(X11,fun(X9,X18)),'_dst_x00x11x11_3'(s(fun(X10,fun(X19,X18)),X20),s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))),s(fun(X11,fun(X9,X19)),X21))),s(X11,X17))) = s(fun(X9,X18),'_dst_x0x1x1_3'(s(fun(X10,fun(X19,X18)),X20),s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,X17))),s(fun(X9,X13),X16))),s(fun(X9,X19),happ(s(fun(X11,fun(X9,X19)),X21),s(X11,X17)))))) )),
  inference(superposition,[],[f365,f362])).
fof(f43450,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x11x11_3'(s(fun(X1,fun(X6,X5)),X7),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X2,fun(fun(X0,X1),X6)),X8))),s(X2,X4))) = s(fun(fun(X0,X1),X5),'_dst_x0x1x1_3'(s(fun(X1,fun(X6,X5)),X7),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(fun(X0,X1),X6),happ(s(fun(X2,fun(fun(X0,X1),X6)),X8),s(X2,X4)))))) )),
  inference(superposition,[],[f365,f339])).
fof(f43387,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x11x11_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,fun(X9,X12)),X15),s(fun(X11,fun(X9,X13)),X16))),s(fun(X17,X11),X18))),s(X17,X19))) = s(fun(X9,X10),'_dst_x0x1x1_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X9,X12),happ(s(fun(X11,fun(X9,X12)),X15),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))),s(fun(X9,X13),happ(s(fun(X11,fun(X9,X13)),X16),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19)))))))) )),
  inference(superposition,[],[f365,f340])).
fof(f43383,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,fun(X0,X3)),X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8))))),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),happ(s(fun(X2,fun(X0,X3)),X6),s(X2,X8))),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8))))))))) )),
  inference(unit_resulting_resolution,[],[f365,f338])).
fof(f43385,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(fun(X0,X1),bool),happ(s(fun(fun(X0,X1),fun(fun(X0,X1),bool)),'=_0'),s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),happ(s(fun(X5,fun(X0,X2)),X6),s(X5,X7))),s(fun(X0,X3),happ(s(fun(X5,fun(X0,X3)),X8),s(X5,X7))))))),s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x11x11_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,fun(X0,X2)),X6),s(fun(X5,fun(X0,X3)),X8))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f365,f338])).
fof(f43386,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),happ(s(fun(X2,fun(X0,X1)),'_dst_x00x11x11_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X2,fun(X0,X3)),X6),s(fun(X2,fun(X0,X4)),X7))),s(X2,X8))))) = s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X3,fun(X4,X1)),X5),s(fun(X0,X3),happ(s(fun(X2,fun(X0,X3)),X6),s(X2,X8))),s(fun(X0,X4),happ(s(fun(X2,fun(X0,X4)),X7),s(X2,X8)))))))) )),
  inference(unit_resulting_resolution,[],[f365,f303])).
fof(f43209,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'!_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f246,f5307])).
fof(f43000,plain,(
  ( ! [X656,X658,X652,X654,X650,X657,X659,X653,X655,X649,X651] : (s(fun(X649,fun(X650,X651)),X659) != s(fun(X649,fun(X650,X651)),'_dst_x00x00x11_3'(s(fun(X653,fun(X654,X651)),X655),s(X653,happ(s(fun(X652,X653),X656),s(X652,X658))),s(fun(X649,fun(X650,X654)),X657))) | s('type.benchmark.times'(fun(X649,fun(X650,X651))),'const.benchmark.Once_1'(s(fun(X649,fun(X650,X651)),X659))) = s('type.benchmark.times'(fun(X649,fun(X650,X651))),'const.benchmark.Once_1'(s(fun(X649,fun(X650,X651)),happ(s(fun(X652,fun(X649,fun(X650,X651))),'_dst_x000x100x011_3'(s(fun(X653,fun(X654,X651)),X655),s(fun(X652,X653),X656),s(fun(X649,fun(X650,X654)),X657))),s(X652,X658)))))) )),
  inference(superposition,[],[f303,f366])).
fof(f42998,plain,(
  ( ! [X633,X635,X629,X631,X627,X636,X632,X634,X628,X630,X637] : (s('type.benchmark.times'(fun(X627,fun(X628,X629))),'const.benchmark.Once_1'(s(fun(X627,fun(X628,X629)),X637))) != s('type.benchmark.times'(fun(X627,fun(X628,X629))),'const.benchmark.Once_1'(s(fun(X627,fun(X628,X629)),'_dst_x00x00x11_3'(s(fun(X631,fun(X632,X629)),X633),s(X631,happ(s(fun(X630,X631),X634),s(X630,X636))),s(fun(X627,fun(X628,X632)),X635))))) | s(fun(X627,fun(X628,X629)),X637) = s(fun(X627,fun(X628,X629)),happ(s(fun(X630,fun(X627,fun(X628,X629))),'_dst_x000x100x011_3'(s(fun(X631,fun(X632,X629)),X633),s(fun(X630,X631),X634),s(fun(X627,fun(X628,X632)),X635))),s(X630,X636)))) )),
  inference(superposition,[],[f302,f366])).
fof(f42990,plain,(
  ( ! [X540,X542,X546,X549,X545,X541,X543,X547,X539,X548,X550,X544] : (s(X549,happ(s(fun(fun(X539,fun(X540,X541)),X549),X550),s(fun(X539,fun(X540,X541)),'_dst_x00x00x11_3'(s(fun(X543,fun(X544,X541)),X545),s(X543,happ(s(fun(X542,X543),X546),s(X542,X548))),s(fun(X539,fun(X540,X544)),X547))))) = s(X549,happ(s(fun(X542,X549),'_dst_x0x1_2'(s(fun(fun(X539,fun(X540,X541)),X549),X550),s(fun(X542,fun(X539,fun(X540,X541))),'_dst_x000x100x011_3'(s(fun(X543,fun(X544,X541)),X545),s(fun(X542,X543),X546),s(fun(X539,fun(X540,X544)),X547))))),s(X542,X548)))) )),
  inference(superposition,[],[f340,f366])).
fof(f42989,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X526,X537,X533,X535,X529,X531,X525,X527] : (s(X535,happ(s(fun(X528,X535),'_dst_x0x0x1_3'(s(fun(X536,fun(fun(X525,fun(X526,X527)),X535)),X537),s(X536,X538),s(fun(X528,fun(X525,fun(X526,X527))),'_dst_x000x100x011_3'(s(fun(X529,fun(X530,X527)),X531),s(fun(X528,X529),X532),s(fun(X525,fun(X526,X530)),X533))))),s(X528,X534))) = s(X535,happ(s(fun(fun(X525,fun(X526,X527)),X535),happ(s(fun(X536,fun(fun(X525,fun(X526,X527)),X535)),X537),s(X536,X538))),s(fun(X525,fun(X526,X527)),'_dst_x00x00x11_3'(s(fun(X529,fun(X530,X527)),X531),s(X529,happ(s(fun(X528,X529),X532),s(X528,X534))),s(fun(X525,fun(X526,X530)),X533)))))) )),
  inference(superposition,[],[f359,f366])).
fof(f42988,plain,(
  ( ! [X511,X524,X520,X522,X516,X518,X512,X514,X510,X521,X523,X517,X519,X513,X515] : (s(fun(X520,X521),'_dst_x0x0x1_3'(s(fun(fun(X510,fun(X511,X512)),fun(X522,X521)),X523),s(fun(X510,fun(X511,X512)),'_dst_x00x00x11_3'(s(fun(X514,fun(X515,X512)),X516),s(X514,happ(s(fun(X513,X514),X517),s(X513,X519))),s(fun(X510,fun(X511,X515)),X518))),s(fun(X520,X522),X524))) = s(fun(X520,X521),happ(s(fun(X513,fun(X520,X521)),'_dst_x00x10x01_3'(s(fun(fun(X510,fun(X511,X512)),fun(X522,X521)),X523),s(fun(X513,fun(X510,fun(X511,X512))),'_dst_x000x100x011_3'(s(fun(X514,fun(X515,X512)),X516),s(fun(X513,X514),X517),s(fun(X510,fun(X511,X515)),X518))),s(fun(X520,X522),X524))),s(X513,X519)))) )),
  inference(superposition,[],[f362,f366])).
fof(f42987,plain,(
  ( ! [X499,X509,X505,X507,X500,X502,X496,X498,X508,X504,X506,X501,X503,X497] : (s(X506,happ(s(fun(X499,X506),'_dst_x0x1x1_3'(s(fun(fun(X496,fun(X497,X498)),fun(X507,X506)),X508),s(fun(X499,fun(X496,fun(X497,X498))),'_dst_x000x100x011_3'(s(fun(X500,fun(X501,X498)),X502),s(fun(X499,X500),X503),s(fun(X496,fun(X497,X501)),X504))),s(fun(X499,X507),X509))),s(X499,X505))) = s(X506,happ(s(fun(X507,X506),happ(s(fun(fun(X496,fun(X497,X498)),fun(X507,X506)),X508),s(fun(X496,fun(X497,X498)),'_dst_x00x00x11_3'(s(fun(X500,fun(X501,X498)),X502),s(X500,happ(s(fun(X499,X500),X503),s(X499,X505))),s(fun(X496,fun(X497,X501)),X504))))),s(X507,happ(s(fun(X499,X507),X509),s(X499,X505)))))) )),
  inference(superposition,[],[f360,f366])).
fof(f42986,plain,(
  ( ! [X484,X486,X482,X492,X494,X488,X490,X485,X487,X483,X493,X495,X489,X491] : (s(X492,happ(s(fun(X485,X492),'_dst_x0x1x1_3'(s(fun(X493,fun(fun(X482,fun(X483,X484)),X492)),X494),s(fun(X485,X493),X495),s(fun(X485,fun(X482,fun(X483,X484))),'_dst_x000x100x011_3'(s(fun(X486,fun(X487,X484)),X488),s(fun(X485,X486),X489),s(fun(X482,fun(X483,X487)),X490))))),s(X485,X491))) = s(X492,happ(s(fun(fun(X482,fun(X483,X484)),X492),happ(s(fun(X493,fun(fun(X482,fun(X483,X484)),X492)),X494),s(X493,happ(s(fun(X485,X493),X495),s(X485,X491))))),s(fun(X482,fun(X483,X484)),'_dst_x00x00x11_3'(s(fun(X486,fun(X487,X484)),X488),s(X486,happ(s(fun(X485,X486),X489),s(X485,X491))),s(fun(X482,fun(X483,X487)),X490)))))) )),
  inference(superposition,[],[f360,f366])).
fof(f42971,plain,(
  ( ! [X280,X282,X277,X279,X273,X275,X285,X281,X283,X276,X278,X274,X284] : (s(fun(X274,X275),happ(s(fun(X282,fun(X274,X275)),'_dst_x0x1x1_3'(s(fun(X276,fun(X273,fun(X274,X275))),'_dst_x000x100x011_3'(s(fun(X277,fun(X278,X275)),X279),s(fun(X276,X277),X280),s(fun(X273,fun(X274,X278)),X281))),s(fun(X282,X276),X283),s(fun(X282,X273),X285))),s(X282,X284))) = s(fun(X274,X275),happ(s(fun(X273,fun(X274,X275)),'_dst_x00x00x11_3'(s(fun(X277,fun(X278,X275)),X279),s(X277,happ(s(fun(X276,X277),X280),s(X276,happ(s(fun(X282,X276),X283),s(X282,X284))))),s(fun(X273,fun(X274,X278)),X281))),s(X273,happ(s(fun(X282,X273),X285),s(X282,X284)))))) )),
  inference(superposition,[],[f360,f366])).
fof(f42970,plain,(
  ( ! [X263,X269,X271,X265,X267,X262,X268,X270,X264,X266,X272] : (s(fun(X263,X264),happ(s(fun(X262,fun(X263,X264)),'_dst_x00x00x11_3'(s(fun(X266,fun(X267,X264)),X268),s(X266,happ(s(fun(X265,X266),X269),s(X265,X271))),s(fun(X262,fun(X263,X267)),X270))),s(X262,X272))) = s(fun(X263,X264),happ(s(fun(X265,fun(X263,X264)),'_dst_x1x0_2'(s(fun(X265,fun(X262,fun(X263,X264))),'_dst_x000x100x011_3'(s(fun(X266,fun(X267,X264)),X268),s(fun(X265,X266),X269),s(fun(X262,fun(X263,X267)),X270))),s(X262,X272))),s(X265,X271)))) )),
  inference(superposition,[],[f341,f366])).
fof(f42969,plain,(
  ( ! [X261,X255,X251,X253,X257,X259,X260,X254,X252,X250,X256,X258] : (s(fun(X250,X260),'_dst_x0x1_2'(s(fun(fun(X251,X252),X260),X261),s(fun(X250,fun(X251,X252)),'_dst_x00x00x11_3'(s(fun(X254,fun(X255,X252)),X256),s(X254,happ(s(fun(X253,X254),X257),s(X253,X259))),s(fun(X250,fun(X251,X255)),X258))))) = s(fun(X250,X260),happ(s(fun(X253,fun(X250,X260)),'_dst_x00x11_2'(s(fun(fun(X251,X252),X260),X261),s(fun(X253,fun(X250,fun(X251,X252))),'_dst_x000x100x011_3'(s(fun(X254,fun(X255,X252)),X256),s(fun(X253,X254),X257),s(fun(X250,fun(X251,X255)),X258))))),s(X253,X259)))) )),
  inference(superposition,[],[f358,f366])).
fof(f42968,plain,(
  ( ! [X243,X241,X249,X239,X237,X246,X244,X242,X240,X248,X238,X247,X245] : (s(fun(X238,X239),happ(s(fun(X237,fun(X238,X239)),'_dst_x00x00x11_3'(s(fun(X241,fun(X242,X239)),X243),s(X241,happ(s(fun(X240,X241),X244),s(X240,X246))),s(fun(X237,fun(X238,X242)),X245))),s(X237,happ(s(fun(X247,X237),X248),s(X247,X249))))) = s(fun(X238,X239),happ(s(fun(X247,fun(X238,X239)),'_dst_x0x0x1_3'(s(fun(X240,fun(X237,fun(X238,X239))),'_dst_x000x100x011_3'(s(fun(X241,fun(X242,X239)),X243),s(fun(X240,X241),X244),s(fun(X237,fun(X238,X242)),X245))),s(X240,X246),s(fun(X247,X237),X248))),s(X247,X249)))) )),
  inference(superposition,[],[f359,f366])).
fof(f42967,plain,(
  ( ! [X231,X229,X227,X225,X235,X233,X223,X230,X228,X226,X224,X236,X234,X232] : (s(fun(X223,X233),'_dst_x0x0x1_3'(s(fun(X234,fun(fun(X224,X225),X233)),X235),s(X234,X236),s(fun(X223,fun(X224,X225)),'_dst_x00x00x11_3'(s(fun(X227,fun(X228,X225)),X229),s(X227,happ(s(fun(X226,X227),X230),s(X226,X232))),s(fun(X223,fun(X224,X228)),X231))))) = s(fun(X223,X233),happ(s(fun(X226,fun(X223,X233)),'_dst_x00x00x11_3'(s(fun(X234,fun(fun(X224,X225),X233)),X235),s(X234,X236),s(fun(X226,fun(X223,fun(X224,X225))),'_dst_x000x100x011_3'(s(fun(X227,fun(X228,X225)),X229),s(fun(X226,X227),X230),s(fun(X223,fun(X224,X228)),X231))))),s(X226,X232)))) )),
  inference(superposition,[],[f363,f366])).
fof(f42966,plain,(
  ( ! [X212,X210,X216,X222,X220,X218,X215,X213,X219,X209,X211,X221,X217,X214] : (s(fun(X209,X219),'_dst_x0x1x1_3'(s(fun(X220,fun(fun(X210,X211),X219)),X221),s(fun(X209,X220),X222),s(fun(X209,fun(X210,X211)),'_dst_x00x00x11_3'(s(fun(X213,fun(X214,X211)),X215),s(X213,happ(s(fun(X212,X213),X216),s(X212,X218))),s(fun(X209,fun(X210,X214)),X217))))) = s(fun(X209,X219),happ(s(fun(X212,fun(X209,X219)),'_dst_x00x01x11_3'(s(fun(X220,fun(fun(X210,X211),X219)),X221),s(fun(X209,X220),X222),s(fun(X212,fun(X209,fun(X210,X211))),'_dst_x000x100x011_3'(s(fun(X213,fun(X214,X211)),X215),s(fun(X212,X213),X216),s(fun(X209,fun(X210,X214)),X217))))),s(X212,X218)))) )),
  inference(superposition,[],[f364,f366])).
fof(f42952,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X34,X32] : (s(fun(X23,fun(X24,X33)),'_dst_x00x11_2'(s(fun(X25,X33),X34),s(fun(X23,fun(X24,X25)),'_dst_x00x00x11_3'(s(fun(X27,fun(X28,X25)),X29),s(X27,happ(s(fun(X26,X27),X30),s(X26,X32))),s(fun(X23,fun(X24,X28)),X31))))) = s(fun(X23,fun(X24,X33)),happ(s(fun(X26,fun(X23,fun(X24,X33))),'_dst_x000x111_2'(s(fun(X25,X33),X34),s(fun(X26,fun(X23,fun(X24,X25))),'_dst_x000x100x011_3'(s(fun(X27,fun(X28,X25)),X29),s(fun(X26,X27),X30),s(fun(X23,fun(X24,X28)),X31))))),s(X26,X32)))) )),
  inference(superposition,[],[f361,f366])).
fof(f42919,plain,(
  ( ! [X499,X492,X494,X490,X500,X496,X498,X493,X495,X491,X497] : (s(fun(X490,fun(X491,X492)),X500) != s(fun(X490,fun(X491,X492)),happ(s(fun(X496,fun(X490,fun(X491,X492))),'_dst_x000x100x011_3'(s(fun(X493,fun(X494,X492)),X495),s(fun(X496,X493),X497),s(fun(X490,fun(X491,X494)),X499))),s(X496,X498))) | s('type.benchmark.times'(fun(X490,fun(X491,X492))),'const.benchmark.Once_1'(s(fun(X490,fun(X491,X492)),X500))) = s('type.benchmark.times'(fun(X490,fun(X491,X492))),'const.benchmark.Once_1'(s(fun(X490,fun(X491,X492)),'_dst_x00x00x11_3'(s(fun(X493,fun(X494,X492)),X495),s(X493,happ(s(fun(X496,X493),X497),s(X496,X498))),s(fun(X490,fun(X491,X494)),X499)))))) )),
  inference(superposition,[],[f303,f366])).
fof(f42917,plain,(
  ( ! [X476,X478,X472,X474,X469,X471,X475,X477,X473,X468,X470] : (s('type.benchmark.times'(fun(X468,fun(X469,X470))),'const.benchmark.Once_1'(s(fun(X468,fun(X469,X470)),X478))) != s('type.benchmark.times'(fun(X468,fun(X469,X470))),'const.benchmark.Once_1'(s(fun(X468,fun(X469,X470)),happ(s(fun(X474,fun(X468,fun(X469,X470))),'_dst_x000x100x011_3'(s(fun(X471,fun(X472,X470)),X473),s(fun(X474,X471),X475),s(fun(X468,fun(X469,X472)),X477))),s(X474,X476))))) | s(fun(X468,fun(X469,X470)),X478) = s(fun(X468,fun(X469,X470)),'_dst_x00x00x11_3'(s(fun(X471,fun(X472,X470)),X473),s(X471,happ(s(fun(X474,X471),X475),s(X474,X476))),s(fun(X468,fun(X469,X472)),X477)))) )),
  inference(superposition,[],[f302,f366])).
fof(f42883,plain,(
  ( ! [X30,X28,X26,X24,X33,X23,X31,X29,X27,X25,X32] : (s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X26,fun(X27,X25)),X28),s(X26,happ(s(fun(X29,X26),X30),s(X29,X31))),s(fun(X24,X27),happ(s(fun(X23,fun(X24,X27)),X32),s(X23,X33))))) = s(fun(X24,X25),happ(s(fun(X23,fun(X24,X25)),happ(s(fun(X29,fun(X23,fun(X24,X25))),'_dst_x000x100x011_3'(s(fun(X26,fun(X27,X25)),X28),s(fun(X29,X26),X30),s(fun(X23,fun(X24,X27)),X32))),s(X29,X31))),s(X23,X33)))) )),
  inference(superposition,[],[f363,f366])).
fof(f42880,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X20,X18,X16] : (s(fun(X10,fun(X11,X12)),'_dst_x00x00x11_3'(s(fun(X14,fun(X15,X12)),X16),s(X14,happ(s(fun(X13,X14),X17),s(X13,happ(s(fun(X19,X13),X20),s(X19,X21))))),s(fun(X10,fun(X11,X15)),X18))) = s(fun(X10,fun(X11,X12)),happ(s(fun(X19,fun(X10,fun(X11,X12))),'_dst_x0x1_2'(s(fun(X13,fun(X10,fun(X11,X12))),'_dst_x000x100x011_3'(s(fun(X14,fun(X15,X12)),X16),s(fun(X13,X14),X17),s(fun(X10,fun(X11,X15)),X18))),s(fun(X19,X13),X20))),s(X19,X21)))) )),
  inference(superposition,[],[f366,f340])).
fof(f42685,plain,(
  ( ! [X476,X478,X484,X486,X480,X482,X488,X490,X477,X479,X485,X487,X481,X483,X489,X491] : (s(fun(X486,fun(X487,X488)),'_dst_x00x00x11_3'(s(fun(fun(X476,fun(X477,X478)),fun(X489,X488)),X490),s(fun(X476,fun(X477,X478)),'_dst_x00x00x11_3'(s(fun(X480,fun(X481,X478)),X482),s(X480,happ(s(fun(X479,X480),X483),s(X479,X485))),s(fun(X476,fun(X477,X481)),X484))),s(fun(X486,fun(X487,X489)),X491))) = s(fun(X486,fun(X487,X488)),happ(s(fun(X479,fun(X486,fun(X487,X488))),'_dst_x000x100x011_3'(s(fun(fun(X476,fun(X477,X478)),fun(X489,X488)),X490),s(fun(X479,fun(X476,fun(X477,X478))),'_dst_x000x100x011_3'(s(fun(X480,fun(X481,X478)),X482),s(fun(X479,X480),X483),s(fun(X476,fun(X477,X481)),X484))),s(fun(X486,fun(X487,X489)),X491))),s(X479,X485)))) )),
  inference(superposition,[],[f366,f366])).
fof(f42684,plain,(
  ( ! [X466,X472,X474,X463,X469,X471,X465,X467,X475,X473,X462,X468,X470,X464] : (s(fun(X470,fun(X471,X472)),'_dst_x00x00x11_3'(s(fun(fun(X462,fun(X463,X464)),fun(X473,X472)),X474),s(fun(X462,fun(X463,X464)),'_dst_x00x11_2'(s(fun(X466,X464),X467),s(fun(X462,fun(X463,X466)),happ(s(fun(X465,fun(X462,fun(X463,X466))),X468),s(X465,X469))))),s(fun(X470,fun(X471,X473)),X475))) = s(fun(X470,fun(X471,X472)),happ(s(fun(X465,fun(X470,fun(X471,X472))),'_dst_x000x100x011_3'(s(fun(fun(X462,fun(X463,X464)),fun(X473,X472)),X474),s(fun(X465,fun(X462,fun(X463,X464))),'_dst_x000x111_2'(s(fun(X466,X464),X467),s(fun(X465,fun(X462,fun(X463,X466))),X468))),s(fun(X470,fun(X471,X473)),X475))),s(X465,X469)))) )),
  inference(superposition,[],[f366,f361])).
fof(f42683,plain,(
  ( ! [X447,X453,X455,X449,X451,X461,X457,X459,X452,X454,X448,X450,X460,X456,X458] : (s(fun(X456,fun(X457,X458)),'_dst_x00x00x11_3'(s(fun(fun(X447,X448),fun(X459,X458)),X460),s(fun(X447,X448),'_dst_x0x0x1_3'(s(fun(X450,fun(X451,X448)),X452),s(X450,X453),s(fun(X447,X451),happ(s(fun(X449,fun(X447,X451)),X454),s(X449,X455))))),s(fun(X456,fun(X457,X459)),X461))) = s(fun(X456,fun(X457,X458)),happ(s(fun(X449,fun(X456,fun(X457,X458))),'_dst_x000x100x011_3'(s(fun(fun(X447,X448),fun(X459,X458)),X460),s(fun(X449,fun(X447,X448)),'_dst_x00x00x11_3'(s(fun(X450,fun(X451,X448)),X452),s(X450,X453),s(fun(X449,fun(X447,X451)),X454))),s(fun(X456,fun(X457,X459)),X461))),s(X449,X455)))) )),
  inference(superposition,[],[f366,f363])).
fof(f42682,plain,(
  ( ! [X445,X441,X443,X436,X438,X432,X434,X444,X446,X440,X442,X437,X439,X433,X435] : (s(fun(X441,fun(X442,X443)),'_dst_x00x00x11_3'(s(fun(fun(X432,X433),fun(X444,X443)),X445),s(fun(X432,X433),'_dst_x0x1x1_3'(s(fun(X435,fun(X436,X433)),X437),s(fun(X432,X435),X438),s(fun(X432,X436),happ(s(fun(X434,fun(X432,X436)),X439),s(X434,X440))))),s(fun(X441,fun(X442,X444)),X446))) = s(fun(X441,fun(X442,X443)),happ(s(fun(X434,fun(X441,fun(X442,X443))),'_dst_x000x100x011_3'(s(fun(fun(X432,X433),fun(X444,X443)),X445),s(fun(X434,fun(X432,X433)),'_dst_x00x01x11_3'(s(fun(X435,fun(X436,X433)),X437),s(fun(X432,X435),X438),s(fun(X434,fun(X432,X436)),X439))),s(fun(X441,fun(X442,X444)),X446))),s(X434,X440)))) )),
  inference(superposition,[],[f366,f364])).
fof(f42681,plain,(
  ( ! [X420,X422,X428,X430,X424,X426,X421,X423,X419,X429,X431,X425,X427] : (s(fun(X426,fun(X427,X428)),'_dst_x00x00x11_3'(s(fun(fun(X419,X420),fun(X429,X428)),X430),s(fun(X419,X420),'_dst_x0x1_2'(s(fun(X422,X420),X423),s(fun(X419,X422),happ(s(fun(X421,fun(X419,X422)),X424),s(X421,X425))))),s(fun(X426,fun(X427,X429)),X431))) = s(fun(X426,fun(X427,X428)),happ(s(fun(X421,fun(X426,fun(X427,X428))),'_dst_x000x100x011_3'(s(fun(fun(X419,X420),fun(X429,X428)),X430),s(fun(X421,fun(X419,X420)),'_dst_x00x11_2'(s(fun(X422,X420),X423),s(fun(X421,fun(X419,X422)),X424))),s(fun(X426,fun(X427,X429)),X431))),s(X421,X425)))) )),
  inference(superposition,[],[f366,f358])).
fof(f42680,plain,(
  ( ! [X412,X414,X408,X410,X416,X418,X405,X407,X413,X415,X409,X411,X417,X404,X406] : (s(fun(X413,fun(X414,X415)),'_dst_x00x00x11_3'(s(fun(fun(X404,X405),fun(X416,X415)),X417),s(fun(X404,X405),'_dst_x0x0x1_3'(s(fun(X407,fun(X408,X405)),X409),s(X407,happ(s(fun(X406,X407),X410),s(X406,X412))),s(fun(X404,X408),X411))),s(fun(X413,fun(X414,X416)),X418))) = s(fun(X413,fun(X414,X415)),happ(s(fun(X406,fun(X413,fun(X414,X415))),'_dst_x000x100x011_3'(s(fun(fun(X404,X405),fun(X416,X415)),X417),s(fun(X406,fun(X404,X405)),'_dst_x00x10x01_3'(s(fun(X407,fun(X408,X405)),X409),s(fun(X406,X407),X410),s(fun(X404,X408),X411))),s(fun(X413,fun(X414,X416)),X418))),s(X406,X412)))) )),
  inference(superposition,[],[f366,f362])).
fof(f42679,plain,(
  ( ! [X397,X399,X393,X395,X401,X403,X396,X398,X394,X400,X402] : (s(fun(X398,fun(X399,X400)),'_dst_x00x00x11_3'(s(fun(fun(fun(X393,X394),X394),fun(X401,X400)),X402),s(fun(fun(X393,X394),X394),'_dstsel_0_x0_1'(s(X393,happ(s(fun(X395,X393),X396),s(X395,X397))))),s(fun(X398,fun(X399,X401)),X403))) = s(fun(X398,fun(X399,X400)),happ(s(fun(X395,fun(X398,fun(X399,X400))),'_dst_x000x100x011_3'(s(fun(fun(fun(X393,X394),X394),fun(X401,X400)),X402),s(fun(X395,fun(fun(X393,X394),X394)),'_dstsel_1_x10_1'(s(fun(X395,X393),X396))),s(fun(X398,fun(X399,X401)),X403))),s(X395,X397)))) )),
  inference(superposition,[],[f366,f339])).
fof(f42678,plain,(
  ( ! [X127,X125,X123,X121,X118,X126,X124,X122,X120,X119] : (s(fun(X122,fun(X123,X124)),'_dst_x00x00x11_3'(s(fun(X118,fun(X125,X124)),X126),s(X118,'const.ind_type.FCONS_3'(s(X118,X120),s(fun('type.num.num',X118),X119),s('type.num.num',X121))),s(fun(X122,fun(X123,X125)),X127))) = s(fun(X122,fun(X123,X124)),happ(s(fun('type.num.num',fun(X122,fun(X123,X124))),'_dst_x000x100x011_3'(s(fun(X118,fun(X125,X124)),X126),s(fun('type.num.num',X118),happ(s(fun(X118,fun('type.num.num',X118)),'_dst_x1x0_2'(s(fun(X118,fun(fun('type.num.num',X118),fun('type.num.num',X118))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X118),X119))),s(X118,X120))),s(fun(X122,fun(X123,X125)),X127))),s('type.num.num',X121)))) )),
  inference(superposition,[],[f366,f377])).
fof(f42677,plain,(
  ( ! [X94,X103,X101,X99,X97,X107,X105,X95,X102,X100,X98,X96,X106,X104] : (s(fun(X102,fun(X103,X104)),'_dst_x00x00x11_3'(s(fun(X94,fun(X105,X104)),X106),s(X94,happ(s(fun(X97,X94),happ(s(fun(X96,fun(X97,X94)),X98),s(X96,X99))),s(X97,happ(s(fun(X95,X97),X100),s(X95,X101))))),s(fun(X102,fun(X103,X105)),X107))) = s(fun(X102,fun(X103,X104)),happ(s(fun(X95,fun(X102,fun(X103,X104))),'_dst_x000x100x011_3'(s(fun(X94,fun(X105,X104)),X106),s(fun(X95,X94),'_dst_x0x0x1_3'(s(fun(X96,fun(X97,X94)),X98),s(X96,X99),s(fun(X95,X97),X100))),s(fun(X102,fun(X103,X105)),X107))),s(X95,X101)))) )),
  inference(superposition,[],[f366,f359])).
fof(f42676,plain,(
  ( ! [X92,X90,X88,X87,X85,X83,X93,X91,X89,X86,X84,X82] : (s(fun(X88,fun(X89,X90)),'_dst_x00x00x11_3'(s(fun(X82,fun(X91,X90)),X92),s(X82,happ(s(fun(X84,X82),happ(s(fun(X83,fun(X84,X82)),X85),s(X83,X87))),s(X84,X86))),s(fun(X88,fun(X89,X91)),X93))) = s(fun(X88,fun(X89,X90)),happ(s(fun(X83,fun(X88,fun(X89,X90))),'_dst_x000x100x011_3'(s(fun(X82,fun(X91,X90)),X92),s(fun(X83,X82),'_dst_x1x0_2'(s(fun(X83,fun(X84,X82)),X85),s(X84,X86))),s(fun(X88,fun(X89,X91)),X93))),s(X83,X87)))) )),
  inference(superposition,[],[f366,f341])).
fof(f42675,plain,(
  ( ! [X80,X78,X76,X74,X72,X81,X79,X77,X75,X73] : (s(fun(X76,fun(X77,X78)),'_dst_x00x00x11_3'(s(fun(X72,fun(X79,X78)),X80),s(X72,X74),s(fun(X76,fun(X77,X79)),X81))) = s(fun(X76,fun(X77,X78)),happ(s(fun(X73,fun(X76,fun(X77,X78))),'_dst_x000x100x011_3'(s(fun(X72,fun(X79,X78)),X80),s(fun(X73,X72),'_dst_x0_1'(s(X72,X74))),s(fun(X76,fun(X77,X79)),X81))),s(X73,X75)))) )),
  inference(superposition,[],[f366,f330])).
fof(f42674,plain,(
  ( ! [X61,X70,X68,X66,X64,X62,X60,X71,X69,X67,X65,X63] : (s(fun(X66,fun(X67,X68)),'_dst_x00x00x11_3'(s(fun(X60,fun(X69,X68)),X70),s(X60,happ(s(fun(X62,X60),X63),s(X62,happ(s(fun(X61,X62),X64),s(X61,X65))))),s(fun(X66,fun(X67,X69)),X71))) = s(fun(X66,fun(X67,X68)),happ(s(fun(X61,fun(X66,fun(X67,X68))),'_dst_x000x100x011_3'(s(fun(X60,fun(X69,X68)),X70),s(fun(X61,X60),'_dst_x0x1_2'(s(fun(X62,X60),X63),s(fun(X61,X62),X64))),s(fun(X66,fun(X67,X69)),X71))),s(X61,X65)))) )),
  inference(superposition,[],[f366,f340])).
fof(f42673,plain,(
  ( ! [X59,X57,X47,X54,X52,X50,X48,X58,X56,X46,X55,X53,X51,X49] : (s(fun(X54,fun(X55,X56)),'_dst_x00x00x11_3'(s(fun(X46,fun(X57,X56)),X58),s(X46,happ(s(fun(X50,X46),'_dst_x0x1x1_3'(s(fun(X48,fun(X47,X46)),X49),s(fun(X50,X48),X51),s(fun(X50,X47),X53))),s(X50,X52))),s(fun(X54,fun(X55,X57)),X59))) = s(fun(X54,fun(X55,X56)),happ(s(fun(X47,fun(X54,fun(X55,X56))),'_dst_x000x100x011_3'(s(fun(X46,fun(X57,X56)),X58),s(fun(X47,X46),happ(s(fun(X48,fun(X47,X46)),X49),s(X48,happ(s(fun(X50,X48),X51),s(X50,X52))))),s(fun(X54,fun(X55,X57)),X59))),s(X47,happ(s(fun(X50,X47),X53),s(X50,X52)))))) )),
  inference(superposition,[],[f366,f360])).
fof(f42672,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X32,X44,X42,X40] : (s(fun(X40,fun(X41,X42)),'_dst_x00x00x11_3'(s(fun(X32,fun(X43,X42)),X44),s(X32,happ(s(fun(X37,X32),'_dst_x0x0x1_3'(s(fun(X34,fun(X33,X32)),X35),s(X34,X36),s(fun(X37,X33),X38))),s(X37,X39))),s(fun(X40,fun(X41,X43)),X45))) = s(fun(X40,fun(X41,X42)),happ(s(fun(X33,fun(X40,fun(X41,X42))),'_dst_x000x100x011_3'(s(fun(X32,fun(X43,X42)),X44),s(fun(X33,X32),happ(s(fun(X34,fun(X33,X32)),X35),s(X34,X36))),s(fun(X40,fun(X41,X43)),X45))),s(X33,happ(s(fun(X37,X33),X38),s(X37,X39)))))) )),
  inference(superposition,[],[f366,f359])).
fof(f42671,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X31,X29,X27,X25,X22,X20] : (s(fun(X26,fun(X27,X28)),'_dst_x00x00x11_3'(s(fun(X20,fun(X29,X28)),X30),s(X20,happ(s(fun(X22,X20),'_dst_x1x0_2'(s(fun(X22,fun(X21,X20)),X23),s(X21,X25))),s(X22,X24))),s(fun(X26,fun(X27,X29)),X31))) = s(fun(X26,fun(X27,X28)),happ(s(fun(X21,fun(X26,fun(X27,X28))),'_dst_x000x100x011_3'(s(fun(X20,fun(X29,X28)),X30),s(fun(X21,X20),happ(s(fun(X22,fun(X21,X20)),X23),s(X22,X24))),s(fun(X26,fun(X27,X29)),X31))),s(X21,X25)))) )),
  inference(superposition,[],[f366,f341])).
fof(f42670,plain,(
  ( ! [X14,X12,X10,X8,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X14,fun(X15,X16)),'_dst_x00x00x11_3'(s(fun(X8,fun(X17,X16)),X18),s(X8,happ(s(fun(X11,X8),'_dst_x0x1_2'(s(fun(X9,X8),X10),s(fun(X11,X9),X12))),s(X11,X13))),s(fun(X14,fun(X15,X17)),X19))) = s(fun(X14,fun(X15,X16)),happ(s(fun(X9,fun(X14,fun(X15,X16))),'_dst_x000x100x011_3'(s(fun(X8,fun(X17,X16)),X18),s(fun(X9,X8),X10),s(fun(X14,fun(X15,X17)),X19))),s(X9,happ(s(fun(X11,X9),X12),s(X11,X13)))))) )),
  inference(superposition,[],[f366,f340])).
fof(f42669,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),'_dst_x00x00x11_3'(s(fun(X3,fun(X4,X2)),X5),s(X3,happ(s(fun(X6,X3),X7),s(X6,X8))),s(fun(X0,fun(X1,X4)),X9))))) = s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),happ(s(fun(X6,fun(X0,fun(X1,X2))),'_dst_x000x100x011_3'(s(fun(X3,fun(X4,X2)),X5),s(fun(X6,X3),X7),s(fun(X0,fun(X1,X4)),X9))),s(X6,X8)))))) )),
  inference(unit_resulting_resolution,[],[f366,f303])).
fof(f41839,plain,(
  ( ! [X689,X685,X687,X681,X683,X688,X684,X686,X680,X682] : (s(fun(X680,X681),X689) != s(fun(X680,X681),'_dst_x0x1x1_3'(s(fun(X683,fun(X684,X681)),X685),s(fun(X680,X683),X686),s(fun(X680,X684),happ(s(fun(X682,fun(X680,X684)),X687),s(X682,X688))))) | s('type.benchmark.times'(fun(X680,X681)),'const.benchmark.Once_1'(s(fun(X680,X681),X689))) = s('type.benchmark.times'(fun(X680,X681)),'const.benchmark.Once_1'(s(fun(X680,X681),happ(s(fun(X682,fun(X680,X681)),'_dst_x00x01x11_3'(s(fun(X683,fun(X684,X681)),X685),s(fun(X680,X683),X686),s(fun(X682,fun(X680,X684)),X687))),s(X682,X688)))))) )),
  inference(superposition,[],[f303,f364])).
fof(f41837,plain,(
  ( ! [X666,X660,X662,X664,X668,X667,X661,X669,X663,X665] : (s('type.benchmark.times'(fun(X660,X661)),'const.benchmark.Once_1'(s(fun(X660,X661),X669))) != s('type.benchmark.times'(fun(X660,X661)),'const.benchmark.Once_1'(s(fun(X660,X661),'_dst_x0x1x1_3'(s(fun(X663,fun(X664,X661)),X665),s(fun(X660,X663),X666),s(fun(X660,X664),happ(s(fun(X662,fun(X660,X664)),X667),s(X662,X668))))))) | s(fun(X660,X661),X669) = s(fun(X660,X661),happ(s(fun(X662,fun(X660,X661)),'_dst_x00x01x11_3'(s(fun(X663,fun(X664,X661)),X665),s(fun(X660,X663),X666),s(fun(X662,fun(X660,X664)),X667))),s(X662,X668)))) )),
  inference(superposition,[],[f302,f364])).
fof(f41829,plain,(
  ( ! [X588,X590,X584,X586,X580,X582,X589,X585,X587,X581,X583] : (s(X589,happ(s(fun(fun(X580,X581),X589),X590),s(fun(X580,X581),'_dst_x0x1x1_3'(s(fun(X583,fun(X584,X581)),X585),s(fun(X580,X583),X586),s(fun(X580,X584),happ(s(fun(X582,fun(X580,X584)),X587),s(X582,X588))))))) = s(X589,happ(s(fun(X582,X589),'_dst_x0x1_2'(s(fun(fun(X580,X581),X589),X590),s(fun(X582,fun(X580,X581)),'_dst_x00x01x11_3'(s(fun(X583,fun(X584,X581)),X585),s(fun(X580,X583),X586),s(fun(X582,fun(X580,X584)),X587))))),s(X582,X588)))) )),
  inference(superposition,[],[f340,f364])).
fof(f41828,plain,(
  ( ! [X573,X575,X569,X571,X567,X576,X578,X572,X574,X568,X570,X577,X579] : (s(X576,happ(s(fun(X569,X576),'_dst_x0x0x1_3'(s(fun(X577,fun(fun(X567,X568),X576)),X578),s(X577,X579),s(fun(X569,fun(X567,X568)),'_dst_x00x01x11_3'(s(fun(X570,fun(X571,X568)),X572),s(fun(X567,X570),X573),s(fun(X569,fun(X567,X571)),X574))))),s(X569,X575))) = s(X576,happ(s(fun(fun(X567,X568),X576),happ(s(fun(X577,fun(fun(X567,X568),X576)),X578),s(X577,X579))),s(fun(X567,X568),'_dst_x0x1x1_3'(s(fun(X570,fun(X571,X568)),X572),s(fun(X567,X570),X573),s(fun(X567,X571),happ(s(fun(X569,fun(X567,X571)),X574),s(X569,X575)))))))) )),
  inference(superposition,[],[f359,f364])).
fof(f41827,plain,(
  ( ! [X565,X561,X563,X557,X559,X553,X555,X564,X566,X560,X562,X556,X558,X554] : (s(fun(X562,X563),'_dst_x0x0x1_3'(s(fun(fun(X553,X554),fun(X564,X563)),X565),s(fun(X553,X554),'_dst_x0x1x1_3'(s(fun(X556,fun(X557,X554)),X558),s(fun(X553,X556),X559),s(fun(X553,X557),happ(s(fun(X555,fun(X553,X557)),X560),s(X555,X561))))),s(fun(X562,X564),X566))) = s(fun(X562,X563),happ(s(fun(X555,fun(X562,X563)),'_dst_x00x10x01_3'(s(fun(fun(X553,X554),fun(X564,X563)),X565),s(fun(X555,fun(X553,X554)),'_dst_x00x01x11_3'(s(fun(X556,fun(X557,X554)),X558),s(fun(X553,X556),X559),s(fun(X555,fun(X553,X557)),X560))),s(fun(X562,X564),X566))),s(X555,X561)))) )),
  inference(superposition,[],[f362,f364])).
fof(f41826,plain,(
  ( ! [X540,X542,X546,X549,X551,X545,X541,X543,X547,X552,X548,X550,X544] : (s(X549,happ(s(fun(X542,X549),'_dst_x0x1x1_3'(s(fun(fun(X540,X541),fun(X550,X549)),X551),s(fun(X542,fun(X540,X541)),'_dst_x00x01x11_3'(s(fun(X543,fun(X544,X541)),X545),s(fun(X540,X543),X546),s(fun(X542,fun(X540,X544)),X547))),s(fun(X542,X550),X552))),s(X542,X548))) = s(X549,happ(s(fun(X550,X549),happ(s(fun(fun(X540,X541),fun(X550,X549)),X551),s(fun(X540,X541),'_dst_x0x1x1_3'(s(fun(X543,fun(X544,X541)),X545),s(fun(X540,X543),X546),s(fun(X540,X544),happ(s(fun(X542,fun(X540,X544)),X547),s(X542,X548))))))),s(X550,happ(s(fun(X542,X550),X552),s(X542,X548)))))) )),
  inference(superposition,[],[f360,f364])).
fof(f41825,plain,(
  ( ! [X536,X538,X532,X534,X528,X530,X537,X539,X533,X535,X529,X531,X527] : (s(X536,happ(s(fun(X529,X536),'_dst_x0x1x1_3'(s(fun(X537,fun(fun(X527,X528),X536)),X538),s(fun(X529,X537),X539),s(fun(X529,fun(X527,X528)),'_dst_x00x01x11_3'(s(fun(X530,fun(X531,X528)),X532),s(fun(X527,X530),X533),s(fun(X529,fun(X527,X531)),X534))))),s(X529,X535))) = s(X536,happ(s(fun(fun(X527,X528),X536),happ(s(fun(X537,fun(fun(X527,X528),X536)),X538),s(X537,happ(s(fun(X529,X537),X539),s(X529,X535))))),s(fun(X527,X528),'_dst_x0x1x1_3'(s(fun(X530,fun(X531,X528)),X532),s(fun(X527,X530),X533),s(fun(X527,X531),happ(s(fun(X529,fun(X527,X531)),X534),s(X529,X535)))))))) )),
  inference(superposition,[],[f360,f364])).
fof(f41813,plain,(
  ( ! [X383,X377,X379,X385,X374,X380,X382,X376,X378,X384,X375,X381] : (s(fun(X374,fun(X375,X384)),'_dst_x00x11_2'(s(fun(X376,X384),X385),s(fun(X374,fun(X375,X376)),'_dst_x0x1x1_3'(s(fun(X378,fun(X379,fun(X375,X376))),X380),s(fun(X374,X378),X381),s(fun(X374,X379),happ(s(fun(X377,fun(X374,X379)),X382),s(X377,X383))))))) = s(fun(X374,fun(X375,X384)),happ(s(fun(X377,fun(X374,fun(X375,X384))),'_dst_x000x111_2'(s(fun(X376,X384),X385),s(fun(X377,fun(X374,fun(X375,X376))),'_dst_x00x01x11_3'(s(fun(X378,fun(X379,fun(X375,X376))),X380),s(fun(X374,X378),X381),s(fun(X377,fun(X374,X379)),X382))))),s(X377,X383)))) )),
  inference(superposition,[],[f361,f364])).
fof(f41809,plain,(
  ( ! [X333,X335,X341,X337,X339,X334,X340,X336,X338] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X333,bool),'_dst_x0x1x1_3'(s(fun(X335,fun(X336,bool)),X337),s(fun(X333,X335),X338),s(fun(X333,X336),happ(s(fun(X334,fun(X333,X336)),X339),s(X334,X340))))))) | s(X333,X341) = s(X333,sK4(X341,happ(s(fun(X334,fun(X333,bool)),'_dst_x00x01x11_3'(s(fun(X335,fun(X336,bool)),X337),s(fun(X333,X335),X338),s(fun(X334,fun(X333,X336)),X339))),s(X334,X340)),X333))) )),
  inference(superposition,[],[f562,f364])).
fof(f41786,plain,(
  ( ! [X80,X78,X76,X85,X83,X81,X79,X77,X75,X86,X84,X82] : (s(X76,happ(s(fun(X83,X76),'_dst_x0x1x1_3'(s(fun(X77,fun(X75,X76)),'_dst_x00x01x11_3'(s(fun(X78,fun(X79,X76)),X80),s(fun(X75,X78),X81),s(fun(X77,fun(X75,X79)),X82))),s(fun(X83,X77),X84),s(fun(X83,X75),X86))),s(X83,X85))) = s(X76,happ(s(fun(X75,X76),'_dst_x0x1x1_3'(s(fun(X78,fun(X79,X76)),X80),s(fun(X75,X78),X81),s(fun(X75,X79),happ(s(fun(X77,fun(X75,X79)),X82),s(X77,happ(s(fun(X83,X77),X84),s(X83,X85))))))),s(X75,happ(s(fun(X83,X75),X86),s(X83,X85)))))) )),
  inference(superposition,[],[f360,f364])).
fof(f41785,plain,(
  ( ! [X70,X68,X66,X74,X72,X71,X69,X67,X65,X73] : (s(X66,happ(s(fun(X65,X66),'_dst_x0x1x1_3'(s(fun(X68,fun(X69,X66)),X70),s(fun(X65,X68),X71),s(fun(X65,X69),happ(s(fun(X67,fun(X65,X69)),X72),s(X67,X73))))),s(X65,X74))) = s(X66,happ(s(fun(X67,X66),'_dst_x1x0_2'(s(fun(X67,fun(X65,X66)),'_dst_x00x01x11_3'(s(fun(X68,fun(X69,X66)),X70),s(fun(X65,X68),X71),s(fun(X67,fun(X65,X69)),X72))),s(X65,X74))),s(X67,X73)))) )),
  inference(superposition,[],[f341,f364])).
fof(f41784,plain,(
  ( ! [X61,X59,X57,X64,X54,X62,X60,X58,X56,X55,X63] : (s(fun(X54,X63),'_dst_x0x1_2'(s(fun(X55,X63),X64),s(fun(X54,X55),'_dst_x0x1x1_3'(s(fun(X57,fun(X58,X55)),X59),s(fun(X54,X57),X60),s(fun(X54,X58),happ(s(fun(X56,fun(X54,X58)),X61),s(X56,X62))))))) = s(fun(X54,X63),happ(s(fun(X56,fun(X54,X63)),'_dst_x00x11_2'(s(fun(X55,X63),X64),s(fun(X56,fun(X54,X55)),'_dst_x00x01x11_3'(s(fun(X57,fun(X58,X55)),X59),s(fun(X54,X57),X60),s(fun(X56,fun(X54,X58)),X61))))),s(X56,X62)))) )),
  inference(superposition,[],[f358,f364])).
fof(f41783,plain,(
  ( ! [X47,X45,X43,X52,X50,X48,X46,X44,X42,X53,X51,X49] : (s(X43,happ(s(fun(X51,X43),'_dst_x0x0x1_3'(s(fun(X44,fun(X42,X43)),'_dst_x00x01x11_3'(s(fun(X45,fun(X46,X43)),X47),s(fun(X42,X45),X48),s(fun(X44,fun(X42,X46)),X49))),s(X44,X50),s(fun(X51,X42),X52))),s(X51,X53))) = s(X43,happ(s(fun(X42,X43),'_dst_x0x1x1_3'(s(fun(X45,fun(X46,X43)),X47),s(fun(X42,X45),X48),s(fun(X42,X46),happ(s(fun(X44,fun(X42,X46)),X49),s(X44,X50))))),s(X42,happ(s(fun(X51,X42),X52),s(X51,X53)))))) )),
  inference(superposition,[],[f359,f364])).
fof(f41782,plain,(
  ( ! [X30,X39,X37,X35,X33,X41,X31,X29,X38,X36,X34,X32,X40] : (s(fun(X29,X38),'_dst_x0x0x1_3'(s(fun(X39,fun(X30,X38)),X40),s(X39,X41),s(fun(X29,X30),'_dst_x0x1x1_3'(s(fun(X32,fun(X33,X30)),X34),s(fun(X29,X32),X35),s(fun(X29,X33),happ(s(fun(X31,fun(X29,X33)),X36),s(X31,X37))))))) = s(fun(X29,X38),happ(s(fun(X31,fun(X29,X38)),'_dst_x00x00x11_3'(s(fun(X39,fun(X30,X38)),X40),s(X39,X41),s(fun(X31,fun(X29,X30)),'_dst_x00x01x11_3'(s(fun(X32,fun(X33,X30)),X34),s(fun(X29,X32),X35),s(fun(X31,fun(X29,X33)),X36))))),s(X31,X37)))) )),
  inference(superposition,[],[f363,f364])).
fof(f41749,plain,(
  ( ! [X540,X542,X536,X538,X541,X543,X537,X539,X535,X544] : (s(fun(X535,X536),X544) != s(fun(X535,X536),happ(s(fun(X541,fun(X535,X536)),'_dst_x00x01x11_3'(s(fun(X537,fun(X538,X536)),X539),s(fun(X535,X537),X540),s(fun(X541,fun(X535,X538)),X542))),s(X541,X543))) | s('type.benchmark.times'(fun(X535,X536)),'const.benchmark.Once_1'(s(fun(X535,X536),X544))) = s('type.benchmark.times'(fun(X535,X536)),'const.benchmark.Once_1'(s(fun(X535,X536),'_dst_x0x1x1_3'(s(fun(X537,fun(X538,X536)),X539),s(fun(X535,X537),X540),s(fun(X535,X538),happ(s(fun(X541,fun(X535,X538)),X542),s(X541,X543)))))))) )),
  inference(superposition,[],[f303,f364])).
fof(f41747,plain,(
  ( ! [X524,X520,X522,X516,X518,X521,X523,X517,X519,X515] : (s('type.benchmark.times'(fun(X515,X516)),'const.benchmark.Once_1'(s(fun(X515,X516),X524))) != s('type.benchmark.times'(fun(X515,X516)),'const.benchmark.Once_1'(s(fun(X515,X516),happ(s(fun(X521,fun(X515,X516)),'_dst_x00x01x11_3'(s(fun(X517,fun(X518,X516)),X519),s(fun(X515,X517),X520),s(fun(X521,fun(X515,X518)),X522))),s(X521,X523))))) | s(fun(X515,X516),X524) = s(fun(X515,X516),'_dst_x0x1x1_3'(s(fun(X517,fun(X518,X516)),X519),s(fun(X515,X517),X520),s(fun(X515,X518),happ(s(fun(X521,fun(X515,X518)),X522),s(X521,X523)))))) )),
  inference(superposition,[],[f302,f364])).
fof(f41726,plain,(
  ( ! [X280,X282,X277,X279,X275,X281,X283,X276,X278] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X275,bool),happ(s(fun(X280,fun(X275,bool)),'_dst_x00x01x11_3'(s(fun(X276,fun(X277,bool)),X278),s(fun(X275,X276),X279),s(fun(X280,fun(X275,X277)),X281))),s(X280,X282))))) | s(X275,X283) = s(X275,sK4(X283,'_dst_x0x1x1_3'(s(fun(X276,fun(X277,bool)),X278),s(fun(X275,X276),X279),s(fun(X275,X277),happ(s(fun(X280,fun(X275,X277)),X281),s(X280,X282)))),X275))) )),
  inference(superposition,[],[f562,f364])).
fof(f41700,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),'_dst_x0x1x1_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X9,X12),X15),s(fun(X9,X13),happ(s(fun(X11,fun(X9,X13)),X16),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))))) = s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x01x11_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X9,X12),X15),s(fun(X11,fun(X9,X13)),X16))),s(fun(X17,X11),X18))),s(X17,X19)))) )),
  inference(superposition,[],[f364,f340])).
fof(f41516,plain,(
  ( ! [X187,X185,X182,X180,X186,X184,X183,X181,X179] : (s(fun(X179,X184),'_dst_x0x1x1_3'(s(fun(X185,fun(X180,X184)),X186),s(fun(X179,X185),X187),s(fun(X179,X180),'const.ind_type.FCONS_3'(s(fun(X179,X180),X182),s(fun('type.num.num',fun(X179,X180)),X181),s('type.num.num',X183))))) = s(fun(X179,X184),happ(s(fun('type.num.num',fun(X179,X184)),'_dst_x00x01x11_3'(s(fun(X185,fun(X180,X184)),X186),s(fun(X179,X185),X187),s(fun('type.num.num',fun(X179,X180)),happ(s(fun(fun(X179,X180),fun('type.num.num',fun(X179,X180))),'_dst_x1x0_2'(s(fun(fun(X179,X180),fun(fun('type.num.num',fun(X179,X180)),fun('type.num.num',fun(X179,X180)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X179,X180)),X181))),s(fun(X179,X180),X182))))),s('type.num.num',X183)))) )),
  inference(superposition,[],[f364,f377])).
fof(f41515,plain,(
  ( ! [X158,X167,X165,X163,X161,X169,X159,X157,X166,X164,X162,X160,X168] : (s(fun(X157,X166),happ(s(fun(X159,fun(X157,X166)),'_dst_x00x01x11_3'(s(fun(X167,fun(X158,X166)),X168),s(fun(X157,X167),X169),s(fun(X159,fun(X157,X158)),'_dst_x0x0x1_3'(s(fun(X160,fun(X161,fun(X157,X158))),X162),s(X160,X163),s(fun(X159,X161),X164))))),s(X159,X165))) = s(fun(X157,X166),'_dst_x0x1x1_3'(s(fun(X167,fun(X158,X166)),X168),s(fun(X157,X167),X169),s(fun(X157,X158),happ(s(fun(X161,fun(X157,X158)),happ(s(fun(X160,fun(X161,fun(X157,X158))),X162),s(X160,X163))),s(X161,happ(s(fun(X159,X161),X164),s(X159,X165)))))))) )),
  inference(superposition,[],[f364,f359])).
fof(f41514,plain,(
  ( ! [X146,X156,X154,X152,X151,X149,X147,X155,X153,X150,X148] : (s(fun(X146,X153),'_dst_x0x1x1_3'(s(fun(X154,fun(X147,X153)),X155),s(fun(X146,X154),X156),s(fun(X146,X147),happ(s(fun(X149,fun(X146,X147)),happ(s(fun(X148,fun(X149,fun(X146,X147))),X150),s(X148,X152))),s(X149,X151))))) = s(fun(X146,X153),happ(s(fun(X148,fun(X146,X153)),'_dst_x00x01x11_3'(s(fun(X154,fun(X147,X153)),X155),s(fun(X146,X154),X156),s(fun(X148,fun(X146,X147)),'_dst_x1x0_2'(s(fun(X148,fun(X149,fun(X146,X147))),X150),s(X149,X151))))),s(X148,X152)))) )),
  inference(superposition,[],[f364,f341])).
fof(f41513,plain,(
  ( ! [X144,X142,X140,X138,X145,X143,X141,X139,X137] : (s(fun(X137,X142),'_dst_x0x1x1_3'(s(fun(X143,fun(X138,X142)),X144),s(fun(X137,X143),X145),s(fun(X137,X138),X140))) = s(fun(X137,X142),happ(s(fun(X139,fun(X137,X142)),'_dst_x00x01x11_3'(s(fun(X143,fun(X138,X142)),X144),s(fun(X137,X143),X145),s(fun(X139,fun(X137,X138)),'_dst_x0_1'(s(fun(X137,X138),X140))))),s(X139,X141)))) )),
  inference(superposition,[],[f364,f330])).
fof(f41512,plain,(
  ( ! [X127,X134,X132,X130,X128,X136,X126,X135,X133,X131,X129] : (s(fun(X126,X133),'_dst_x0x1x1_3'(s(fun(X134,fun(X127,X133)),X135),s(fun(X126,X134),X136),s(fun(X126,X127),happ(s(fun(X129,fun(X126,X127)),X130),s(X129,happ(s(fun(X128,X129),X131),s(X128,X132))))))) = s(fun(X126,X133),happ(s(fun(X128,fun(X126,X133)),'_dst_x00x01x11_3'(s(fun(X134,fun(X127,X133)),X135),s(fun(X126,X134),X136),s(fun(X128,fun(X126,X127)),'_dst_x0x1_2'(s(fun(X129,fun(X126,X127)),X130),s(fun(X128,X129),X131))))),s(X128,X132)))) )),
  inference(superposition,[],[f364,f340])).
fof(f41511,plain,(
  ( ! [X125,X123,X121,X118,X116,X114,X124,X122,X120,X119,X117,X115,X113] : (s(fun(X113,X122),'_dst_x0x1x1_3'(s(fun(X123,fun(X114,X122)),X124),s(fun(X113,X123),X125),s(fun(X113,X114),happ(s(fun(X118,fun(X113,X114)),'_dst_x0x1x1_3'(s(fun(X116,fun(X115,fun(X113,X114))),X117),s(fun(X118,X116),X119),s(fun(X118,X115),X121))),s(X118,X120))))) = s(fun(X113,X122),happ(s(fun(X115,fun(X113,X122)),'_dst_x00x01x11_3'(s(fun(X123,fun(X114,X122)),X124),s(fun(X113,X123),X125),s(fun(X115,fun(X113,X114)),happ(s(fun(X116,fun(X115,fun(X113,X114))),X117),s(X116,happ(s(fun(X118,X116),X119),s(X118,X120))))))),s(X115,happ(s(fun(X118,X115),X121),s(X118,X120)))))) )),
  inference(superposition,[],[f364,f360])).
fof(f41510,plain,(
  ( ! [X103,X101,X111,X109,X107,X105,X112,X102,X100,X110,X108,X106,X104] : (s(fun(X100,X109),'_dst_x0x1x1_3'(s(fun(X110,fun(X101,X109)),X111),s(fun(X100,X110),X112),s(fun(X100,X101),happ(s(fun(X106,fun(X100,X101)),'_dst_x0x0x1_3'(s(fun(X103,fun(X102,fun(X100,X101))),X104),s(X103,X105),s(fun(X106,X102),X107))),s(X106,X108))))) = s(fun(X100,X109),happ(s(fun(X102,fun(X100,X109)),'_dst_x00x01x11_3'(s(fun(X110,fun(X101,X109)),X111),s(fun(X100,X110),X112),s(fun(X102,fun(X100,X101)),happ(s(fun(X103,fun(X102,fun(X100,X101))),X104),s(X103,X105))))),s(X102,happ(s(fun(X106,X102),X107),s(X106,X108)))))) )),
  inference(superposition,[],[f364,f359])).
fof(f41509,plain,(
  ( ! [X94,X92,X90,X99,X97,X95,X93,X91,X89,X98,X96] : (s(fun(X89,X96),'_dst_x0x1x1_3'(s(fun(X97,fun(X90,X96)),X98),s(fun(X89,X97),X99),s(fun(X89,X90),happ(s(fun(X92,fun(X89,X90)),'_dst_x1x0_2'(s(fun(X92,fun(X91,fun(X89,X90))),X93),s(X91,X95))),s(X92,X94))))) = s(fun(X89,X96),happ(s(fun(X91,fun(X89,X96)),'_dst_x00x01x11_3'(s(fun(X97,fun(X90,X96)),X98),s(fun(X89,X97),X99),s(fun(X91,fun(X89,X90)),happ(s(fun(X92,fun(X91,fun(X89,X90))),X93),s(X92,X94))))),s(X91,X95)))) )),
  inference(superposition,[],[f364,f341])).
fof(f41508,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X79,X86,X84,X82] : (s(fun(X78,X85),happ(s(fun(X80,fun(X78,X85)),'_dst_x00x01x11_3'(s(fun(X86,fun(X79,X85)),X87),s(fun(X78,X86),X88),s(fun(X80,fun(X78,X79)),X81))),s(X80,happ(s(fun(X82,X80),X83),s(X82,X84))))) = s(fun(X78,X85),'_dst_x0x1x1_3'(s(fun(X86,fun(X79,X85)),X87),s(fun(X78,X86),X88),s(fun(X78,X79),happ(s(fun(X82,fun(X78,X79)),'_dst_x0x1_2'(s(fun(X80,fun(X78,X79)),X81),s(fun(X82,X80),X83))),s(X82,X84)))))) )),
  inference(superposition,[],[f364,f340])).
fof(f41507,plain,(
  ( ! [X61,X59,X70,X68,X66,X64,X62,X60,X69,X67,X65,X63] : (s(fun(X59,X67),'_dst_x0x1x1_3'(s(fun(X68,fun(fun(X60,X61),X67)),X69),s(fun(X59,X68),X70),s(fun(X59,fun(X60,X61)),'_dst_x00x11_2'(s(fun(X63,X61),X64),s(fun(X59,fun(X60,X63)),happ(s(fun(X62,fun(X59,fun(X60,X63))),X65),s(X62,X66))))))) = s(fun(X59,X67),happ(s(fun(X62,fun(X59,X67)),'_dst_x00x01x11_3'(s(fun(X68,fun(fun(X60,X61),X67)),X69),s(fun(X59,X68),X70),s(fun(X62,fun(X59,fun(X60,X61))),'_dst_x000x111_2'(s(fun(X63,X61),X64),s(fun(X62,fun(X59,fun(X60,X63))),X65))))),s(X62,X66)))) )),
  inference(superposition,[],[f364,f361])).
fof(f41506,plain,(
  ( ! [X57,X47,X54,X52,X50,X48,X58,X56,X46,X55,X53,X51,X49] : (s(fun(X46,X55),'_dst_x0x1x1_3'(s(fun(X56,fun(X47,X55)),X57),s(fun(X46,X56),X58),s(fun(X46,X47),'_dst_x0x0x1_3'(s(fun(X49,fun(X50,X47)),X51),s(X49,X52),s(fun(X46,X50),happ(s(fun(X48,fun(X46,X50)),X53),s(X48,X54))))))) = s(fun(X46,X55),happ(s(fun(X48,fun(X46,X55)),'_dst_x00x01x11_3'(s(fun(X56,fun(X47,X55)),X57),s(fun(X46,X56),X58),s(fun(X48,fun(X46,X47)),'_dst_x00x00x11_3'(s(fun(X49,fun(X50,X47)),X51),s(X49,X52),s(fun(X48,fun(X46,X50)),X53))))),s(X48,X54)))) )),
  inference(superposition,[],[f364,f363])).
fof(f41505,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X44,X42,X40] : (s(fun(X33,X42),'_dst_x0x1x1_3'(s(fun(X43,fun(X34,X42)),X44),s(fun(X33,X43),X45),s(fun(X33,X34),'_dst_x0x1x1_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X33,X37),happ(s(fun(X35,fun(X33,X37)),X40),s(X35,X41))))))) = s(fun(X33,X42),happ(s(fun(X35,fun(X33,X42)),'_dst_x00x01x11_3'(s(fun(X43,fun(X34,X42)),X44),s(fun(X33,X43),X45),s(fun(X35,fun(X33,X34)),'_dst_x00x01x11_3'(s(fun(X36,fun(X37,X34)),X38),s(fun(X33,X36),X39),s(fun(X35,fun(X33,X37)),X40))))),s(X35,X41)))) )),
  inference(superposition,[],[f364,f364])).
fof(f41504,plain,(
  ( ! [X30,X28,X26,X24,X23,X31,X29,X27,X25,X32,X22] : (s(fun(X22,X29),'_dst_x0x1x1_3'(s(fun(X30,fun(X23,X29)),X31),s(fun(X22,X30),X32),s(fun(X22,X23),'_dst_x0x1_2'(s(fun(X25,X23),X26),s(fun(X22,X25),happ(s(fun(X24,fun(X22,X25)),X27),s(X24,X28))))))) = s(fun(X22,X29),happ(s(fun(X24,fun(X22,X29)),'_dst_x00x01x11_3'(s(fun(X30,fun(X23,X29)),X31),s(fun(X22,X30),X32),s(fun(X24,fun(X22,X23)),'_dst_x00x11_2'(s(fun(X25,X23),X26),s(fun(X24,fun(X22,X25)),X27))))),s(X24,X28)))) )),
  inference(superposition,[],[f364,f358])).
fof(f41503,plain,(
  ( ! [X14,X12,X10,X21,X19,X17,X15,X13,X11,X9,X20,X18,X16] : (s(fun(X9,X18),'_dst_x0x1x1_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X9,X19),X21),s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,X17))),s(fun(X9,X13),X16))))) = s(fun(X9,X18),happ(s(fun(X11,fun(X9,X18)),'_dst_x00x01x11_3'(s(fun(X19,fun(X10,X18)),X20),s(fun(X9,X19),X21),s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))))),s(X11,X17)))) )),
  inference(superposition,[],[f364,f362])).
fof(f41502,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(fun(X0,X1),X5),'_dst_x0x1x1_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(fun(X0,X1),X6),X8),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x01x11_3'(s(fun(X6,fun(X1,X5)),X7),s(fun(fun(X0,X1),X6),X8),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4)))) )),
  inference(superposition,[],[f364,f339])).
fof(f41501,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))))))) = s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),happ(s(fun(X6,fun(X0,X1)),'_dst_x00x01x11_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X0,X2),X5),s(fun(X6,fun(X0,X3)),X7))),s(X6,X8)))))) )),
  inference(unit_resulting_resolution,[],[f364,f303])).
fof(f40715,plain,(
  ( ! [X1857,X1855,X1853,X1851,X1856,X1854,X1852] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X1854,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1852,fun(X1851,'type.num.num')),X1853),s(fun(X1854,X1852),X1855),s(fun(X1854,X1851),X1857))),s(X1854,X1856))))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X1851,'type.num.num'),happ(s(fun(X1852,fun(X1851,'type.num.num')),X1853),s(X1852,happ(s(fun(X1854,X1852),X1855),s(X1854,X1856))))),s('type.benchmark.times'(X1851),'const.benchmark.Once_1'(s(X1851,happ(s(fun(X1854,X1851),X1857),s(X1854,X1856)))))))) )),
  inference(forward_demodulation,[],[f40451,f17542])).
fof(f40451,plain,(
  ( ! [X1857,X1855,X1853,X1851,X1856,X1854,X1852] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X1854,'type.num.num'),'_dst_x0x1x1_3'(s(fun(X1852,fun(X1851,'type.num.num')),X1853),s(fun(X1854,X1852),X1855),s(fun(X1854,X1851),X1857))),s(X1854,X1856))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X1851,'type.num.num'),happ(s(fun(X1852,fun(X1851,'type.num.num')),X1853),s(X1852,happ(s(fun(X1854,X1852),X1855),s(X1854,X1856))))),s('type.benchmark.times'(X1851),'const.benchmark.Once_1'(s(X1851,happ(s(fun(X1854,X1851),X1857),s(X1854,X1856)))))))) )),
  inference(superposition,[],[f296,f360])).
fof(f40443,plain,(
  ( ! [X1761,X1763,X1765,X1767,X1769,X1771,X1762,X1764,X1766,X1768,X1770] : (s('type.benchmark.times'(X1761),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1761),X1770),s('type.benchmark.times'(X1761),X1771))) != s('type.benchmark.times'(X1761),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1761),X1769),s('type.benchmark.times'(X1761),happ(s(fun(X1765,'type.benchmark.times'(X1761)),'_dst_x0x1x1_3'(s(fun(X1763,fun(X1762,'type.benchmark.times'(X1761))),X1764),s(fun(X1765,X1763),X1766),s(fun(X1765,X1762),X1768))),s(X1765,X1767))))) | s('type.benchmark.times'(X1761),X1771) = s('type.benchmark.times'(X1761),happ(s(fun(X1762,'type.benchmark.times'(X1761)),happ(s(fun(X1763,fun(X1762,'type.benchmark.times'(X1761))),X1764),s(X1763,happ(s(fun(X1765,X1763),X1766),s(X1765,X1767))))),s(X1762,happ(s(fun(X1765,X1762),X1768),s(X1765,X1767)))))) )),
  inference(superposition,[],[f309,f360])).
fof(f40440,plain,(
  ( ! [X1728,X1730,X1732,X1734,X1736,X1738,X1729,X1731,X1733,X1735,X1737] : (s('type.benchmark.times'(X1728),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1728),X1737),s('type.benchmark.times'(X1728),X1738))) != s('type.benchmark.times'(X1728),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1728),happ(s(fun(X1732,'type.benchmark.times'(X1728)),'_dst_x0x1x1_3'(s(fun(X1730,fun(X1729,'type.benchmark.times'(X1728))),X1731),s(fun(X1732,X1730),X1733),s(fun(X1732,X1729),X1735))),s(X1732,X1734))),s('type.benchmark.times'(X1728),X1736))) | s('type.benchmark.times'(X1728),X1737) = s('type.benchmark.times'(X1728),happ(s(fun(X1729,'type.benchmark.times'(X1728)),happ(s(fun(X1730,fun(X1729,'type.benchmark.times'(X1728))),X1731),s(X1730,happ(s(fun(X1732,X1730),X1733),s(X1732,X1734))))),s(X1729,happ(s(fun(X1732,X1729),X1735),s(X1732,X1734)))))) )),
  inference(superposition,[],[f308,f360])).
fof(f40427,plain,(
  ( ! [X1612,X1614,X1619,X1617,X1613,X1615,X1616,X1618] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1619),s('type.benchmark.times'(sK0),happ(s(fun(X1615,'type.benchmark.times'(sK0)),'_dst_x0x1x1_3'(s(fun(X1613,fun(X1612,'type.benchmark.times'(sK0))),X1614),s(fun(X1615,X1613),X1616),s(fun(X1615,X1612),X1618))),s(X1615,X1617))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1612,'type.benchmark.times'(sK0)),happ(s(fun(X1613,fun(X1612,'type.benchmark.times'(sK0))),X1614),s(X1613,happ(s(fun(X1615,X1613),X1616),s(X1615,X1617))))),s(X1612,happ(s(fun(X1615,X1612),X1618),s(X1615,X1617)))))) )),
  inference(superposition,[],[f17086,f360])).
fof(f40418,plain,(
  ( ! [X1538,X1535,X1540,X1536,X1539,X1534,X1541,X1537] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1537,'type.benchmark.times'(sK0)),'_dst_x0x1x1_3'(s(fun(X1535,fun(X1534,'type.benchmark.times'(sK0))),X1536),s(fun(X1537,X1535),X1538),s(fun(X1537,X1534),X1540))),s(X1537,X1539))),s('type.benchmark.times'(sK0),X1541))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1534,'type.benchmark.times'(sK0)),happ(s(fun(X1535,fun(X1534,'type.benchmark.times'(sK0))),X1536),s(X1535,happ(s(fun(X1537,X1535),X1538),s(X1537,X1539))))),s(X1534,happ(s(fun(X1537,X1534),X1540),s(X1537,X1539)))))) )),
  inference(superposition,[],[f16999,f360])).
fof(f40407,plain,(
  ( ! [X1395,X1397,X1399,X1400,X1402,X1404,X1406,X1396,X1398,X1401,X1403,X1405] : (s(fun(X1395,fun(X1396,X1405)),'_dst_x00x11_2'(s(fun(X1397,X1405),X1406),s(fun(X1395,fun(X1396,X1397)),happ(s(fun(X1401,fun(X1395,fun(X1396,X1397))),'_dst_x0x1x1_3'(s(fun(X1399,fun(X1398,fun(X1395,fun(X1396,X1397)))),X1400),s(fun(X1401,X1399),X1402),s(fun(X1401,X1398),X1404))),s(X1401,X1403))))) = s(fun(X1395,fun(X1396,X1405)),happ(s(fun(X1398,fun(X1395,fun(X1396,X1405))),'_dst_x000x111_2'(s(fun(X1397,X1405),X1406),s(fun(X1398,fun(X1395,fun(X1396,X1397))),happ(s(fun(X1399,fun(X1398,fun(X1395,fun(X1396,X1397)))),X1400),s(X1399,happ(s(fun(X1401,X1399),X1402),s(X1401,X1403))))))),s(X1398,happ(s(fun(X1401,X1398),X1404),s(X1401,X1403)))))) )),
  inference(superposition,[],[f361,f360])).
fof(f40382,plain,(
  ( ! [X1130,X1128,X1134,X1132,X1126,X1131,X1129,X1135,X1133,X1127] : (s(X1127,happ(s(fun(X1126,X1127),happ(s(fun(X1131,fun(X1126,X1127)),'_dst_x0x1x1_3'(s(fun(X1129,fun(X1128,fun(X1126,X1127))),X1130),s(fun(X1131,X1129),X1132),s(fun(X1131,X1128),X1134))),s(X1131,X1133))),s(X1126,X1135))) = s(X1127,happ(s(fun(X1128,X1127),'_dst_x1x0_2'(s(fun(X1128,fun(X1126,X1127)),happ(s(fun(X1129,fun(X1128,fun(X1126,X1127))),X1130),s(X1129,happ(s(fun(X1131,X1129),X1132),s(X1131,X1133))))),s(X1126,X1135))),s(X1128,happ(s(fun(X1131,X1128),X1134),s(X1131,X1133)))))) )),
  inference(superposition,[],[f341,f360])).
fof(f40381,plain,(
  ( ! [X1118,X1116,X1122,X1120,X1124,X1115,X1119,X1117,X1123,X1121,X1125] : (s(fun(X1115,X1124),'_dst_x0x1_2'(s(fun(X1116,X1124),X1125),s(fun(X1115,X1116),happ(s(fun(X1120,fun(X1115,X1116)),'_dst_x0x1x1_3'(s(fun(X1118,fun(X1117,fun(X1115,X1116))),X1119),s(fun(X1120,X1118),X1121),s(fun(X1120,X1117),X1123))),s(X1120,X1122))))) = s(fun(X1115,X1124),happ(s(fun(X1117,fun(X1115,X1124)),'_dst_x00x11_2'(s(fun(X1116,X1124),X1125),s(fun(X1117,fun(X1115,X1116)),happ(s(fun(X1118,fun(X1117,fun(X1115,X1116))),X1119),s(X1118,happ(s(fun(X1120,X1118),X1121),s(X1120,X1122))))))),s(X1117,happ(s(fun(X1120,X1117),X1123),s(X1120,X1122)))))) )),
  inference(superposition,[],[f358,f360])).
fof(f40380,plain,(
  ( ! [X1112,X1106,X1104,X1110,X1108,X1103,X1113,X1107,X1105,X1111,X1109,X1114] : (s(X1104,happ(s(fun(X1103,X1104),happ(s(fun(X1108,fun(X1103,X1104)),'_dst_x0x1x1_3'(s(fun(X1106,fun(X1105,fun(X1103,X1104))),X1107),s(fun(X1108,X1106),X1109),s(fun(X1108,X1105),X1111))),s(X1108,X1110))),s(X1103,happ(s(fun(X1112,X1103),X1113),s(X1112,X1114))))) = s(X1104,happ(s(fun(X1112,X1104),'_dst_x0x0x1_3'(s(fun(X1105,fun(X1103,X1104)),happ(s(fun(X1106,fun(X1105,fun(X1103,X1104))),X1107),s(X1106,happ(s(fun(X1108,X1106),X1109),s(X1108,X1110))))),s(X1105,happ(s(fun(X1108,X1105),X1111),s(X1108,X1110))),s(fun(X1112,X1103),X1113))),s(X1112,X1114)))) )),
  inference(superposition,[],[f359,f360])).
fof(f40379,plain,(
  ( ! [X1099,X1097,X1101,X1091,X1095,X1093,X1098,X1096,X1102,X1100,X1090,X1094,X1092] : (s(fun(X1090,X1099),'_dst_x0x0x1_3'(s(fun(X1100,fun(X1091,X1099)),X1101),s(X1100,X1102),s(fun(X1090,X1091),happ(s(fun(X1095,fun(X1090,X1091)),'_dst_x0x1x1_3'(s(fun(X1093,fun(X1092,fun(X1090,X1091))),X1094),s(fun(X1095,X1093),X1096),s(fun(X1095,X1092),X1098))),s(X1095,X1097))))) = s(fun(X1090,X1099),happ(s(fun(X1092,fun(X1090,X1099)),'_dst_x00x00x11_3'(s(fun(X1100,fun(X1091,X1099)),X1101),s(X1100,X1102),s(fun(X1092,fun(X1090,X1091)),happ(s(fun(X1093,fun(X1092,fun(X1090,X1091))),X1094),s(X1093,happ(s(fun(X1095,X1093),X1096),s(X1095,X1097))))))),s(X1092,happ(s(fun(X1095,X1092),X1098),s(X1095,X1097)))))) )),
  inference(superposition,[],[f363,f360])).
fof(f40262,plain,(
  ( ! [X125,X123,X121,X118,X124,X122,X120,X119,X117] : (s('type.benchmark.times'(X117),'const.benchmark.Once_1'(s(X117,X125))) != s('type.benchmark.times'(X117),'const.benchmark.Once_1'(s(X117,happ(s(fun(X121,X117),'_dst_x0x1x1_3'(s(fun(X119,fun(X118,X117)),X120),s(fun(X121,X119),X122),s(fun(X121,X118),X124))),s(X121,X123))))) | s(X117,X125) = s(X117,happ(s(fun(X118,X117),happ(s(fun(X119,fun(X118,X117)),X120),s(X119,happ(s(fun(X121,X119),X122),s(X121,X123))))),s(X118,happ(s(fun(X121,X118),X124),s(X121,X123)))))) )),
  inference(superposition,[],[f302,f360])).
fof(f40253,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X49] : (s(X49,happ(s(fun(X41,X49),X50),s(X41,happ(s(fun(X45,X41),'_dst_x0x1x1_3'(s(fun(X43,fun(X42,X41)),X44),s(fun(X45,X43),X46),s(fun(X45,X42),X48))),s(X45,X47))))) = s(X49,happ(s(fun(X42,X49),'_dst_x0x1_2'(s(fun(X41,X49),X50),s(fun(X42,X41),happ(s(fun(X43,fun(X42,X41)),X44),s(X43,happ(s(fun(X45,X43),X46),s(X45,X47))))))),s(X42,happ(s(fun(X45,X42),X48),s(X45,X47)))))) )),
  inference(superposition,[],[f340,f360])).
fof(f40252,plain,(
  ( ! [X30,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32,X40] : (s(X37,happ(s(fun(X29,X37),happ(s(fun(X38,fun(X29,X37)),X39),s(X38,X40))),s(X29,happ(s(fun(X33,X29),'_dst_x0x1x1_3'(s(fun(X31,fun(X30,X29)),X32),s(fun(X33,X31),X34),s(fun(X33,X30),X36))),s(X33,X35))))) = s(X37,happ(s(fun(X30,X37),'_dst_x0x0x1_3'(s(fun(X38,fun(X29,X37)),X39),s(X38,X40),s(fun(X30,X29),happ(s(fun(X31,fun(X30,X29)),X32),s(X31,happ(s(fun(X33,X31),X34),s(X33,X35))))))),s(X30,happ(s(fun(X33,X30),X36),s(X33,X35)))))) )),
  inference(superposition,[],[f359,f360])).
fof(f40251,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X17,X27,X25,X22,X20,X18,X16] : (s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X16,fun(X26,X25)),X27),s(X16,happ(s(fun(X20,X16),'_dst_x0x1x1_3'(s(fun(X18,fun(X17,X16)),X19),s(fun(X20,X18),X21),s(fun(X20,X17),X23))),s(X20,X22))),s(fun(X24,X26),X28))) = s(fun(X24,X25),happ(s(fun(X17,fun(X24,X25)),'_dst_x00x10x01_3'(s(fun(X16,fun(X26,X25)),X27),s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,happ(s(fun(X20,X18),X21),s(X20,X22))))),s(fun(X24,X26),X28))),s(X17,happ(s(fun(X20,X17),X23),s(X20,X22)))))) )),
  inference(superposition,[],[f362,f360])).
fof(f40248,plain,(
  ( ! [X208,X206,X204,X207,X205,X203] : (s('type.ind_type.recspace'(X203),'const.ind_type.CONSTR_3'(s('type.num.num',X204),s(X203,happ(s(fun(X205,X203),X206),s(X205,X207))),s(fun('type.num.num','type.ind_type.recspace'(X203)),happ(s(fun(X205,fun('type.num.num','type.ind_type.recspace'(X203))),X208),s(X205,X207))))) = s('type.ind_type.recspace'(X203),happ(s(fun(X205,'type.ind_type.recspace'(X203)),'_dst_x0x1x1_3'(s(fun(X203,fun(fun('type.num.num','type.ind_type.recspace'(X203)),'type.ind_type.recspace'(X203))),'const.ind_type.CONSTR_1'(s('type.num.num',X204))),s(fun(X205,X203),X206),s(fun(X205,fun('type.num.num','type.ind_type.recspace'(X203))),X208))),s(X205,X207)))) )),
  inference(superposition,[],[f360,f305])).
fof(f40247,plain,(
  ( ! [X198,X202,X200,X199,X201] : (s('type.benchmark.times'(X198),'const.benchmark.Twice_2'(s('type.benchmark.times'(X198),happ(s(fun(X199,'type.benchmark.times'(X198)),X200),s(X199,X201))),s('type.benchmark.times'(X198),happ(s(fun(X199,'type.benchmark.times'(X198)),X202),s(X199,X201))))) = s('type.benchmark.times'(X198),happ(s(fun(X199,'type.benchmark.times'(X198)),'_dst_x0x1x1_3'(s(fun('type.benchmark.times'(X198),fun('type.benchmark.times'(X198),'type.benchmark.times'(X198))),'const.benchmark.Twice_0'),s(fun(X199,'type.benchmark.times'(X198)),X200),s(fun(X199,'type.benchmark.times'(X198)),X202))),s(X199,X201)))) )),
  inference(superposition,[],[f360,f297])).
fof(f40225,plain,(
  ( ! [X37,X35,X33,X36,X34,X32] : (s(X32,'const.ind_type.FCONS_3'(s(X32,happ(s(fun(X34,X32),X35),s(X34,X36))),s(fun('type.num.num',X32),X33),s('type.num.num',happ(s(fun(X34,'type.num.num'),X37),s(X34,X36))))) = s(X32,happ(s(fun(X34,X32),'_dst_x0x1x1_3'(s(fun(X32,fun('type.num.num',X32)),'_dst_x1x0_2'(s(fun(X32,fun(fun('type.num.num',X32),fun('type.num.num',X32))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X32),X33))),s(fun(X34,X32),X35),s(fun(X34,'type.num.num'),X37))),s(X34,X36)))) )),
  inference(superposition,[],[f360,f377])).
fof(f40224,plain,(
  ( ! [X30,X28,X26,X24,X31,X29,X27,X25] : (s(X24,happ(s(fun(X28,X24),'_dst_x0x1x1_3'(s(fun(X26,fun(X25,X24)),X27),s(fun(X28,X26),X29),s(fun(X28,X25),X31))),s(X28,X30))) = s(X24,happ(s(fun(X28,X24),'_dst_x0x1_2'(s(fun(X25,X24),happ(s(fun(X26,fun(X25,X24)),X27),s(X26,happ(s(fun(X28,X26),X29),s(X28,X30))))),s(fun(X28,X25),X31))),s(X28,X30)))) )),
  inference(superposition,[],[f360,f340])).
fof(f40223,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X20,X16),'_dst_x0x1x1_3'(s(fun(X18,fun(X17,X16)),X19),s(fun(X20,X18),X21),s(fun(X20,X17),X23))),s(X20,X22))) = s(X16,happ(s(fun(X18,X16),'_dst_x1x0_2'(s(fun(X18,fun(X17,X16)),X19),s(X17,happ(s(fun(X20,X17),X23),s(X20,X22))))),s(X18,happ(s(fun(X20,X18),X21),s(X20,X22)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f40222,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(X8,happ(s(fun(X12,X8),'_dst_x0x1x1_3'(s(fun(X10,fun(X9,X8)),X11),s(fun(X12,X10),X13),s(fun(X12,X9),X15))),s(X12,X14))) = s(X8,happ(s(fun(X12,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,happ(s(fun(X12,X10),X13),s(X12,X14))),s(fun(X12,X9),X15))),s(X12,X14)))) )),
  inference(superposition,[],[f360,f359])).
fof(f40221,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X384,X381] : (s(X381,happ(s(fun('type.ind_type.recspace'(X377),X381),happ(s(fun(X382,fun('type.ind_type.recspace'(X377),X381)),X383),s(X382,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X382),X384),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380))))),s('type.ind_type.recspace'(X377),'const.ind_type.CONSTR_3'(s('type.num.num',X378),s(X377,X379),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380))))) = s(X381,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X381),'_dst_x0x1x1_3'(s(fun(X382,fun('type.ind_type.recspace'(X377),X381)),X383),s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X382),X384),s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),'type.ind_type.recspace'(X377)),happ(s(fun(X377,fun(fun('type.num.num','type.ind_type.recspace'(X377)),'type.ind_type.recspace'(X377))),'const.ind_type.CONSTR_1'(s('type.num.num',X378))),s(X377,X379))))),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380)))) )),
  inference(superposition,[],[f360,f305])).
fof(f40220,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X371] : (s(X373,happ(s(fun('type.benchmark.times'(X370),X373),happ(s(fun(X374,fun('type.benchmark.times'(X370),X373)),X375),s(X374,happ(s(fun('type.benchmark.times'(X370),X374),X376),s('type.benchmark.times'(X370),X372))))),s('type.benchmark.times'(X370),'const.benchmark.Twice_2'(s('type.benchmark.times'(X370),X371),s('type.benchmark.times'(X370),X372))))) = s(X373,happ(s(fun('type.benchmark.times'(X370),X373),'_dst_x0x1x1_3'(s(fun(X374,fun('type.benchmark.times'(X370),X373)),X375),s(fun('type.benchmark.times'(X370),X374),X376),s(fun('type.benchmark.times'(X370),'type.benchmark.times'(X370)),happ(s(fun('type.benchmark.times'(X370),fun('type.benchmark.times'(X370),'type.benchmark.times'(X370))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X370),X371))))),s('type.benchmark.times'(X370),X372)))) )),
  inference(superposition,[],[f360,f297])).
fof(f40219,plain,(
  ( ! [X364,X366,X368,X365,X367,X369] : (s(X366,happ(s(fun(X364,X366),'_dst_x0x1x1_3'(s(fun(X367,fun('type.benchmark.times'(X364),X366)),X368),s(fun(X364,X367),X369),s(fun(X364,'type.benchmark.times'(X364)),'const.benchmark.Once_0'))),s(X364,X365))) = s(X366,happ(s(fun('type.benchmark.times'(X364),X366),happ(s(fun(X367,fun('type.benchmark.times'(X364),X366)),X368),s(X367,happ(s(fun(X364,X367),X369),s(X364,X365))))),s('type.benchmark.times'(X364),'const.benchmark.Once_1'(s(X364,X365)))))) )),
  inference(superposition,[],[f360,f291])).
fof(f40218,plain,(
  ( ! [X356,X358,X352,X354,X360,X362,X357,X359,X353,X355,X361,X363] : (s(X360,happ(s(fun(X355,X360),'_dst_x0x1x1_3'(s(fun(X361,fun(fun(X352,fun(X353,X354)),X360)),X362),s(fun(X355,X361),X363),s(fun(X355,fun(X352,fun(X353,X354))),'_dst_x000x111_2'(s(fun(X356,X354),X357),s(fun(X355,fun(X352,fun(X353,X356))),X358))))),s(X355,X359))) = s(X360,happ(s(fun(fun(X352,fun(X353,X354)),X360),happ(s(fun(X361,fun(fun(X352,fun(X353,X354)),X360)),X362),s(X361,happ(s(fun(X355,X361),X363),s(X355,X359))))),s(fun(X352,fun(X353,X354)),'_dst_x00x11_2'(s(fun(X356,X354),X357),s(fun(X352,fun(X353,X356)),happ(s(fun(X355,fun(X352,fun(X353,X356))),X358),s(X355,X359)))))))) )),
  inference(superposition,[],[f360,f361])).
fof(f40217,plain,(
  ( ! [X350,X344,X346,X341,X343,X339,X349,X351,X345,X347,X340,X342,X348] : (s(X348,happ(s(fun(X341,X348),'_dst_x0x1x1_3'(s(fun(X349,fun(fun(X339,X340),X348)),X350),s(fun(X341,X349),X351),s(fun(X341,fun(X339,X340)),'_dst_x00x00x11_3'(s(fun(X342,fun(X343,X340)),X344),s(X342,X345),s(fun(X341,fun(X339,X343)),X346))))),s(X341,X347))) = s(X348,happ(s(fun(fun(X339,X340),X348),happ(s(fun(X349,fun(fun(X339,X340),X348)),X350),s(X349,happ(s(fun(X341,X349),X351),s(X341,X347))))),s(fun(X339,X340),'_dst_x0x0x1_3'(s(fun(X342,fun(X343,X340)),X344),s(X342,X345),s(fun(X339,X343),happ(s(fun(X341,fun(X339,X343)),X346),s(X341,X347)))))))) )),
  inference(superposition,[],[f360,f363])).
fof(f40216,plain,(
  ( ! [X327,X333,X335,X329,X331,X337,X326,X332,X334,X328,X330,X336,X338] : (s(X335,happ(s(fun(X328,X335),'_dst_x0x1x1_3'(s(fun(X336,fun(fun(X326,X327),X335)),X337),s(fun(X328,X336),X338),s(fun(X328,fun(X326,X327)),'_dst_x00x10x01_3'(s(fun(X329,fun(X330,X327)),X331),s(fun(X328,X329),X332),s(fun(X326,X330),X333))))),s(X328,X334))) = s(X335,happ(s(fun(fun(X326,X327),X335),happ(s(fun(X336,fun(fun(X326,X327),X335)),X337),s(X336,happ(s(fun(X328,X336),X338),s(X328,X334))))),s(fun(X326,X327),'_dst_x0x0x1_3'(s(fun(X329,fun(X330,X327)),X331),s(X329,happ(s(fun(X328,X329),X332),s(X328,X334))),s(fun(X326,X330),X333)))))) )),
  inference(superposition,[],[f360,f362])).
fof(f40215,plain,(
  ( ! [X315,X325,X321,X323,X316,X318,X324,X320,X322,X317,X319] : (s(X322,happ(s(fun(X317,X322),'_dst_x0x1x1_3'(s(fun(X323,fun(fun(X315,X316),X322)),X324),s(fun(X317,X323),X325),s(fun(X317,fun(X315,X316)),'_dst_x00x11_2'(s(fun(X318,X316),X319),s(fun(X317,fun(X315,X318)),X320))))),s(X317,X321))) = s(X322,happ(s(fun(fun(X315,X316),X322),happ(s(fun(X323,fun(fun(X315,X316),X322)),X324),s(X323,happ(s(fun(X317,X323),X325),s(X317,X321))))),s(fun(X315,X316),'_dst_x0x1_2'(s(fun(X318,X316),X319),s(fun(X315,X318),happ(s(fun(X317,fun(X315,X318)),X320),s(X317,X321)))))))) )),
  inference(superposition,[],[f360,f358])).
fof(f40214,plain,(
  ( ! [X313,X308,X310,X306,X312,X314,X309,X311,X307] : (s(X311,happ(s(fun(X308,X311),'_dst_x0x1x1_3'(s(fun(X312,fun(fun(fun(X306,X307),X307),X311)),X313),s(fun(X308,X312),X314),s(fun(X308,fun(fun(X306,X307),X307)),'_dstsel_1_x10_1'(s(fun(X308,X306),X309))))),s(X308,X310))) = s(X311,happ(s(fun(fun(fun(X306,X307),X307),X311),happ(s(fun(X312,fun(fun(fun(X306,X307),X307),X311)),X313),s(X312,happ(s(fun(X308,X312),X314),s(X308,X310))))),s(fun(fun(X306,X307),X307),'_dstsel_0_x0_1'(s(X306,happ(s(fun(X308,X306),X309),s(X308,X310)))))))) )),
  inference(superposition,[],[f360,f339])).
fof(f40187,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(X119,happ(s(fun(bool,X119),happ(s(fun(X120,fun(bool,X119)),X121),s(X120,happ(s(fun(fun(X118,bool),X120),X122),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0'))))))),s(bool,'T_0'))) = s(X119,happ(s(fun(fun(X118,bool),X119),'_dst_x0x1x1_3'(s(fun(X120,fun(bool,X119)),X121),s(fun(fun(X118,bool),X120),X122),s(fun(fun(X118,bool),bool),'?_1'))),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f360,f33115])).
fof(f40183,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(X102,happ(s(fun(X98,X102),happ(s(fun(X103,fun(X98,X102)),X104),s(X103,happ(s(fun('type.num.num',X103),X105),s('type.num.num',X101))))),s(X98,'const.ind_type.FCONS_3'(s(X98,X100),s(fun('type.num.num',X98),X99),s('type.num.num',X101))))) = s(X102,happ(s(fun('type.num.num',X102),'_dst_x0x1x1_3'(s(fun(X103,fun(X98,X102)),X104),s(fun('type.num.num',X103),X105),s(fun('type.num.num',X98),happ(s(fun(X98,fun('type.num.num',X98)),'_dst_x1x0_2'(s(fun(X98,fun(fun('type.num.num',X98),fun('type.num.num',X98))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X98),X99))),s(X98,X100))))),s('type.num.num',X101)))) )),
  inference(superposition,[],[f360,f377])).
fof(f40182,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(X94,happ(s(fun(fun(X91,X90),X94),'_dst_x0x1x1_3'(s(fun(X95,fun(X90,X94)),X96),s(fun(fun(X91,X90),X95),X97),s(fun(fun(X91,X90),X90),'_dstsel_0_x0_1'(s(X91,X92))))),s(fun(X91,X90),X93))) = s(X94,happ(s(fun(X90,X94),happ(s(fun(X95,fun(X90,X94)),X96),s(X95,happ(s(fun(fun(X91,X90),X95),X97),s(fun(X91,X90),X93))))),s(X90,happ(s(fun(X91,X90),X93),s(X91,X92)))))) )),
  inference(superposition,[],[f360,f333])).
fof(f40181,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s(X86,happ(s(fun(X79,X86),'_dst_x0x1x1_3'(s(fun(X87,fun(X78,X86)),X88),s(fun(X79,X87),X89),s(fun(X79,X78),'_dst_x0x0x1_3'(s(fun(X80,fun(X81,X78)),X82),s(X80,X83),s(fun(X79,X81),X84))))),s(X79,X85))) = s(X86,happ(s(fun(X78,X86),happ(s(fun(X87,fun(X78,X86)),X88),s(X87,happ(s(fun(X79,X87),X89),s(X79,X85))))),s(X78,happ(s(fun(X81,X78),happ(s(fun(X80,fun(X81,X78)),X82),s(X80,X83))),s(X81,happ(s(fun(X79,X81),X84),s(X79,X85)))))))) )),
  inference(superposition,[],[f360,f359])).
fof(f40180,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(X74,happ(s(fun(X69,X74),'_dst_x0x1x1_3'(s(fun(X75,fun(X68,X74)),X76),s(fun(X69,X75),X77),s(fun(X69,X68),'_dst_x1x0_2'(s(fun(X69,fun(X70,X68)),X71),s(X70,X72))))),s(X69,X73))) = s(X74,happ(s(fun(X68,X74),happ(s(fun(X75,fun(X68,X74)),X76),s(X75,happ(s(fun(X69,X75),X77),s(X69,X73))))),s(X68,happ(s(fun(X70,X68),happ(s(fun(X69,fun(X70,X68)),X71),s(X69,X73))),s(X70,X72)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f40179,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (s(X64,happ(s(fun(X60,X64),happ(s(fun(X65,fun(X60,X64)),X66),s(X65,happ(s(fun(X61,X65),X67),s(X61,X63))))),s(X60,X62))) = s(X64,happ(s(fun(X61,X64),'_dst_x0x1x1_3'(s(fun(X65,fun(X60,X64)),X66),s(fun(X61,X65),X67),s(fun(X61,X60),'_dst_x0_1'(s(X60,X62))))),s(X61,X63)))) )),
  inference(superposition,[],[f360,f330])).
fof(f40178,plain,(
  ( ! [X59,X57,X54,X52,X50,X58,X56,X55,X53,X51] : (s(X56,happ(s(fun(X51,X56),'_dst_x0x1x1_3'(s(fun(X57,fun(X50,X56)),X58),s(fun(X51,X57),X59),s(fun(X51,X50),'_dst_x0x1_2'(s(fun(X52,X50),X53),s(fun(X51,X52),X54))))),s(X51,X55))) = s(X56,happ(s(fun(X50,X56),happ(s(fun(X57,fun(X50,X56)),X58),s(X57,happ(s(fun(X51,X57),X59),s(X51,X55))))),s(X50,happ(s(fun(X52,X50),X53),s(X52,happ(s(fun(X51,X52),X54),s(X51,X55)))))))) )),
  inference(superposition,[],[f360,f340])).
fof(f40177,plain,(
  ( ! [X39,X47,X45,X43,X41,X48,X38,X46,X44,X42,X40,X49] : (s(X46,happ(s(fun(X39,X46),'_dst_x0x1x1_3'(s(fun(X47,fun(X38,X46)),X48),s(fun(X39,X47),X49),s(fun(X39,X38),happ(s(fun(X40,fun(X39,X38)),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44))))))),s(X39,happ(s(fun(X42,X39),X45),s(X42,X44))))) = s(X46,happ(s(fun(X38,X46),happ(s(fun(X47,fun(X38,X46)),X48),s(X47,happ(s(fun(X39,X47),X49),s(X39,happ(s(fun(X42,X39),X45),s(X42,X44))))))),s(X38,happ(s(fun(X42,X38),'_dst_x0x1x1_3'(s(fun(X40,fun(X39,X38)),X41),s(fun(X42,X40),X43),s(fun(X42,X39),X45))),s(X42,X44)))))) )),
  inference(superposition,[],[f360,f360])).
fof(f40176,plain,(
  ( ! [X30,X28,X26,X37,X35,X33,X31,X29,X27,X36,X34,X32] : (s(X34,happ(s(fun(X27,X34),'_dst_x0x1x1_3'(s(fun(X35,fun(X26,X34)),X36),s(fun(X27,X35),X37),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))))),s(X27,happ(s(fun(X31,X27),X32),s(X31,X33))))) = s(X34,happ(s(fun(X26,X34),happ(s(fun(X35,fun(X26,X34)),X36),s(X35,happ(s(fun(X27,X35),X37),s(X27,happ(s(fun(X31,X27),X32),s(X31,X33))))))),s(X26,happ(s(fun(X31,X26),'_dst_x0x0x1_3'(s(fun(X28,fun(X27,X26)),X29),s(X28,X30),s(fun(X31,X27),X32))),s(X31,X33)))))) )),
  inference(superposition,[],[f360,f359])).
fof(f40175,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x1x1_3'(s(fun(X23,fun(X16,X22)),X24),s(fun(X17,X23),X25),s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,X20))))),s(X17,X21))) = s(X22,happ(s(fun(X16,X22),happ(s(fun(X23,fun(X16,X22)),X24),s(X23,happ(s(fun(X17,X23),X25),s(X17,X21))))),s(X16,happ(s(fun(X18,X16),'_dst_x1x0_2'(s(fun(X18,fun(X17,X16)),X19),s(X17,X21))),s(X18,X20)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f40174,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x1x1_3'(s(fun(X13,fun(X6,X12)),X14),s(fun(X7,X13),X15),s(fun(X7,X6),X8))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X6,X12),happ(s(fun(X13,fun(X6,X12)),X14),s(X13,happ(s(fun(X7,X13),X15),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))))),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11)))))) )),
  inference(superposition,[],[f360,f340])).
fof(f40173,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),'_dst_x0x1x1_3'(s(fun(X3,fun(X0,X2)),X4),s(fun(X0,X3),X5),s(fun(X0,X0),'_i_0_0'))),s(X0,X1))) = s(X2,happ(s(fun(X0,X2),happ(s(fun(X3,fun(X0,X2)),X4),s(X3,happ(s(fun(X0,X3),X5),s(X0,X1))))),s(X0,X1)))) )),
  inference(superposition,[],[f360,f290])).
fof(f40046,plain,(
  ( ! [X146,X152,X151,X149,X147,X145,X150,X148] : (s(X146,happ(s(fun(X145,X146),'const.ind_type.FCONS_3'(s(fun(X145,X146),X148),s(fun('type.num.num',fun(X145,X146)),X147),s('type.num.num',happ(s(fun(X149,'type.num.num'),X150),s(X149,X151))))),s(X145,happ(s(fun(X149,X145),X152),s(X149,X151))))) = s(X146,happ(s(fun(X149,X146),'_dst_x0x1x1_3'(s(fun('type.num.num',fun(X145,X146)),happ(s(fun(fun(X145,X146),fun('type.num.num',fun(X145,X146))),'_dst_x1x0_2'(s(fun(fun(X145,X146),fun(fun('type.num.num',fun(X145,X146)),fun('type.num.num',fun(X145,X146)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X145,X146)),X147))),s(fun(X145,X146),X148))),s(fun(X149,'type.num.num'),X150),s(fun(X149,X145),X152))),s(X149,X151)))) )),
  inference(superposition,[],[f360,f377])).
fof(f40045,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139,X137] : (s(X138,happ(s(fun(X141,X138),'_dst_x0x1x1_3'(s(fun(fun(X139,fun(X137,X138)),fun(X137,X138)),'_dstsel_0_x0_1'(s(X139,X140))),s(fun(X141,fun(X139,fun(X137,X138))),X142),s(fun(X141,X137),X144))),s(X141,X143))) = s(X138,happ(s(fun(X137,X138),happ(s(fun(X139,fun(X137,X138)),happ(s(fun(X141,fun(X139,fun(X137,X138))),X142),s(X141,X143))),s(X139,X140))),s(X137,happ(s(fun(X141,X137),X144),s(X141,X143)))))) )),
  inference(superposition,[],[f360,f333])).
fof(f40044,plain,(
  ( ! [X127,X125,X134,X132,X130,X128,X136,X126,X135,X133,X131,X129] : (s(X126,happ(s(fun(X133,X126),'_dst_x0x1x1_3'(s(fun(X127,fun(X125,X126)),'_dst_x0x0x1_3'(s(fun(X128,fun(X129,fun(X125,X126))),X130),s(X128,X131),s(fun(X127,X129),X132))),s(fun(X133,X127),X134),s(fun(X133,X125),X136))),s(X133,X135))) = s(X126,happ(s(fun(X125,X126),happ(s(fun(X129,fun(X125,X126)),happ(s(fun(X128,fun(X129,fun(X125,X126))),X130),s(X128,X131))),s(X129,happ(s(fun(X127,X129),X132),s(X127,happ(s(fun(X133,X127),X134),s(X133,X135))))))),s(X125,happ(s(fun(X133,X125),X136),s(X133,X135)))))) )),
  inference(superposition,[],[f360,f359])).
fof(f40043,plain,(
  ( ! [X123,X121,X118,X116,X124,X122,X120,X119,X117,X115] : (s(X116,happ(s(fun(X121,X116),'_dst_x0x1x1_3'(s(fun(X117,fun(X115,X116)),'_dst_x1x0_2'(s(fun(X117,fun(X118,fun(X115,X116))),X119),s(X118,X120))),s(fun(X121,X117),X122),s(fun(X121,X115),X124))),s(X121,X123))) = s(X116,happ(s(fun(X115,X116),happ(s(fun(X118,fun(X115,X116)),happ(s(fun(X117,fun(X118,fun(X115,X116))),X119),s(X117,happ(s(fun(X121,X117),X122),s(X121,X123))))),s(X118,X120))),s(X115,happ(s(fun(X121,X115),X124),s(X121,X123)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f40042,plain,(
  ( ! [X111,X109,X107,X114,X112,X110,X108,X113] : (s(X108,happ(s(fun(X107,X108),X110),s(X107,happ(s(fun(X111,X107),X114),s(X111,X113))))) = s(X108,happ(s(fun(X111,X108),'_dst_x0x1x1_3'(s(fun(X109,fun(X107,X108)),'_dst_x0_1'(s(fun(X107,X108),X110))),s(fun(X111,X109),X112),s(fun(X111,X107),X114))),s(X111,X113)))) )),
  inference(superposition,[],[f360,f330])).
fof(f40041,plain,(
  ( ! [X103,X101,X99,X97,X105,X102,X100,X98,X106,X104] : (s(X98,happ(s(fun(X103,X98),'_dst_x0x1x1_3'(s(fun(X99,fun(X97,X98)),'_dst_x0x1_2'(s(fun(X100,fun(X97,X98)),X101),s(fun(X99,X100),X102))),s(fun(X103,X99),X104),s(fun(X103,X97),X106))),s(X103,X105))) = s(X98,happ(s(fun(X97,X98),happ(s(fun(X100,fun(X97,X98)),X101),s(X100,happ(s(fun(X99,X100),X102),s(X99,happ(s(fun(X103,X99),X104),s(X103,X105))))))),s(X97,happ(s(fun(X103,X97),X106),s(X103,X105)))))) )),
  inference(superposition,[],[f360,f340])).
fof(f40040,plain,(
  ( ! [X94,X92,X90,X88,X87,X95,X93,X91,X89,X96] : (s(X88,happ(s(fun(X87,X88),happ(s(fun(X92,fun(X87,X88)),'_dst_x0x1x1_3'(s(fun(X90,fun(X89,fun(X87,X88))),X91),s(fun(X92,X90),X93),s(fun(X92,X89),X95))),s(X92,X94))),s(X87,happ(s(fun(X92,X87),X96),s(X92,X94))))) = s(X88,happ(s(fun(X92,X88),'_dst_x0x1x1_3'(s(fun(X89,fun(X87,X88)),happ(s(fun(X90,fun(X89,fun(X87,X88))),X91),s(X90,happ(s(fun(X92,X90),X93),s(X92,X94))))),s(fun(X92,X89),X95),s(fun(X92,X87),X96))),s(X92,X94)))) )),
  inference(superposition,[],[f360,f360])).
fof(f40039,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X77,X86,X84,X82] : (s(X78,happ(s(fun(X83,X78),'_dst_x0x1x1_3'(s(fun(X79,fun(X77,X78)),happ(s(fun(X80,fun(X79,fun(X77,X78))),X81),s(X80,X82))),s(fun(X83,X79),X84),s(fun(X83,X77),X86))),s(X83,X85))) = s(X78,happ(s(fun(X77,X78),happ(s(fun(X80,fun(X77,X78)),'_dst_x1x0_2'(s(fun(X80,fun(X79,fun(X77,X78))),X81),s(X79,happ(s(fun(X83,X79),X84),s(X83,X85))))),s(X80,X82))),s(X77,happ(s(fun(X83,X77),X86),s(X83,X85)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f40038,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X67,X75,X73] : (s(X68,happ(s(fun(X73,X68),'_dst_x0x1x1_3'(s(fun(X69,fun(X67,X68)),happ(s(fun(X70,fun(X69,fun(X67,X68))),X71),s(X70,X72))),s(fun(X73,X69),X74),s(fun(X73,X67),X76))),s(X73,X75))) = s(X68,happ(s(fun(X67,X68),happ(s(fun(X73,fun(X67,X68)),'_dst_x0x0x1_3'(s(fun(X70,fun(X69,fun(X67,X68))),X71),s(X70,X72),s(fun(X73,X69),X74))),s(X73,X75))),s(X67,happ(s(fun(X73,X67),X76),s(X73,X75)))))) )),
  inference(superposition,[],[f360,f359])).
fof(f40037,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X65,X63] : (s(X60,happ(s(fun(X63,X60),'_dst_x0x1x1_3'(s(fun(X61,fun(X59,X60)),X62),s(fun(X63,X61),X64),s(fun(X63,X59),X66))),s(X63,X65))) = s(X60,happ(s(fun(X59,X60),happ(s(fun(X63,fun(X59,X60)),'_dst_x0x1_2'(s(fun(X61,fun(X59,X60)),X62),s(fun(X63,X61),X64))),s(X63,X65))),s(X59,happ(s(fun(X63,X59),X66),s(X63,X65)))))) )),
  inference(superposition,[],[f360,f340])).
fof(f40036,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(X54,happ(s(fun(X53,X54),happ(s(fun(X55,fun(X53,X54)),X56),s(X55,X57))),s(X53,happ(s(fun(X55,X53),X58),s(X55,X57))))) = s(X54,happ(s(fun(X55,X54),'_dst_x0x1x1_3'(s(fun(fun(X53,X54),fun(X53,X54)),'_i_0_0'),s(fun(X55,fun(X53,X54)),X56),s(fun(X55,X53),X58))),s(X55,X57)))) )),
  inference(superposition,[],[f360,f290])).
fof(f40035,plain,(
  ( ! [X47,X45,X43,X52,X50,X48,X46,X44,X42,X51,X49] : (s(fun(X43,X44),happ(s(fun(X49,fun(X43,X44)),'_dst_x0x1x1_3'(s(fun(X45,fun(X42,fun(X43,X44))),'_dst_x000x111_2'(s(fun(X46,X44),X47),s(fun(X45,fun(X42,fun(X43,X46))),X48))),s(fun(X49,X45),X50),s(fun(X49,X42),X52))),s(X49,X51))) = s(fun(X43,X44),happ(s(fun(X42,fun(X43,X44)),'_dst_x00x11_2'(s(fun(X46,X44),X47),s(fun(X42,fun(X43,X46)),happ(s(fun(X45,fun(X42,fun(X43,X46))),X48),s(X45,happ(s(fun(X49,X45),X50),s(X49,X51))))))),s(X42,happ(s(fun(X49,X42),X52),s(X49,X51)))))) )),
  inference(superposition,[],[f360,f361])).
fof(f40034,plain,(
  ( ! [X30,X39,X37,X35,X33,X41,X31,X38,X36,X34,X32,X40] : (s(X31,happ(s(fun(X38,X31),'_dst_x0x1x1_3'(s(fun(X32,fun(X30,X31)),'_dst_x00x00x11_3'(s(fun(X33,fun(X34,X31)),X35),s(X33,X36),s(fun(X32,fun(X30,X34)),X37))),s(fun(X38,X32),X39),s(fun(X38,X30),X41))),s(X38,X40))) = s(X31,happ(s(fun(X30,X31),'_dst_x0x0x1_3'(s(fun(X33,fun(X34,X31)),X35),s(X33,X36),s(fun(X30,X34),happ(s(fun(X32,fun(X30,X34)),X37),s(X32,happ(s(fun(X38,X32),X39),s(X38,X40))))))),s(X30,happ(s(fun(X38,X30),X41),s(X38,X40)))))) )),
  inference(superposition,[],[f360,f363])).
fof(f40033,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X29,X27,X25,X22,X20,X18] : (s(X19,happ(s(fun(X26,X19),'_dst_x0x1x1_3'(s(fun(X20,fun(X18,X19)),'_dst_x00x10x01_3'(s(fun(X21,fun(X22,X19)),X23),s(fun(X20,X21),X24),s(fun(X18,X22),X25))),s(fun(X26,X20),X27),s(fun(X26,X18),X29))),s(X26,X28))) = s(X19,happ(s(fun(X18,X19),'_dst_x0x0x1_3'(s(fun(X21,fun(X22,X19)),X23),s(X21,happ(s(fun(X20,X21),X24),s(X20,happ(s(fun(X26,X20),X27),s(X26,X28))))),s(fun(X18,X22),X25))),s(X18,happ(s(fun(X26,X18),X29),s(X26,X28)))))) )),
  inference(superposition,[],[f360,f362])).
fof(f40032,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X9,happ(s(fun(X14,X9),'_dst_x0x1x1_3'(s(fun(X10,fun(X8,X9)),'_dst_x00x11_2'(s(fun(X11,X9),X12),s(fun(X10,fun(X8,X11)),X13))),s(fun(X14,X10),X15),s(fun(X14,X8),X17))),s(X14,X16))) = s(X9,happ(s(fun(X8,X9),'_dst_x0x1_2'(s(fun(X11,X9),X12),s(fun(X8,X11),happ(s(fun(X10,fun(X8,X11)),X13),s(X10,happ(s(fun(X14,X10),X15),s(X14,X16))))))),s(X8,happ(s(fun(X14,X8),X17),s(X14,X16)))))) )),
  inference(superposition,[],[f360,f358])).
fof(f40031,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X4,X1),'_dst_x0x1x1_3'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X4,X2),X5),s(fun(X4,fun(X0,X1)),X7))),s(X4,X6))) = s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))))),s(fun(X0,X1),happ(s(fun(X4,fun(X0,X1)),X7),s(X4,X6)))))) )),
  inference(superposition,[],[f360,f339])).
fof(f40030,plain,(
  ( ! [X383,X377,X379,X380,X382,X378,X384,X381] : (s(X381,happ(s(fun(X382,X381),happ(s(fun('type.ind_type.recspace'(X377),fun(X382,X381)),X383),s('type.ind_type.recspace'(X377),'const.ind_type.CONSTR_3'(s('type.num.num',X378),s(X377,X379),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380))))),s(X382,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X382),X384),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380))))) = s(X381,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X381),'_dst_x0x1x1_3'(s(fun('type.ind_type.recspace'(X377),fun(X382,X381)),X383),s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),'type.ind_type.recspace'(X377)),happ(s(fun(X377,fun(fun('type.num.num','type.ind_type.recspace'(X377)),'type.ind_type.recspace'(X377))),'const.ind_type.CONSTR_1'(s('type.num.num',X378))),s(X377,X379))),s(fun(fun('type.num.num','type.ind_type.recspace'(X377)),X382),X384))),s(fun('type.num.num','type.ind_type.recspace'(X377)),X380)))) )),
  inference(superposition,[],[f360,f305])).
fof(f40029,plain,(
  ( ! [X372,X374,X370,X376,X373,X375,X371] : (s(X373,happ(s(fun(X374,X373),happ(s(fun('type.benchmark.times'(X370),fun(X374,X373)),X375),s('type.benchmark.times'(X370),'const.benchmark.Twice_2'(s('type.benchmark.times'(X370),X371),s('type.benchmark.times'(X370),X372))))),s(X374,happ(s(fun('type.benchmark.times'(X370),X374),X376),s('type.benchmark.times'(X370),X372))))) = s(X373,happ(s(fun('type.benchmark.times'(X370),X373),'_dst_x0x1x1_3'(s(fun('type.benchmark.times'(X370),fun(X374,X373)),X375),s(fun('type.benchmark.times'(X370),'type.benchmark.times'(X370)),happ(s(fun('type.benchmark.times'(X370),fun('type.benchmark.times'(X370),'type.benchmark.times'(X370))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X370),X371))),s(fun('type.benchmark.times'(X370),X374),X376))),s('type.benchmark.times'(X370),X372)))) )),
  inference(superposition,[],[f360,f297])).
fof(f40028,plain,(
  ( ! [X364,X366,X368,X365,X367,X369] : (s(X366,happ(s(fun(X364,X366),'_dst_x0x1x1_3'(s(fun('type.benchmark.times'(X364),fun(X367,X366)),X368),s(fun(X364,'type.benchmark.times'(X364)),'const.benchmark.Once_0'),s(fun(X364,X367),X369))),s(X364,X365))) = s(X366,happ(s(fun(X367,X366),happ(s(fun('type.benchmark.times'(X364),fun(X367,X366)),X368),s('type.benchmark.times'(X364),'const.benchmark.Once_1'(s(X364,X365))))),s(X367,happ(s(fun(X364,X367),X369),s(X364,X365)))))) )),
  inference(superposition,[],[f360,f291])).
fof(f40027,plain,(
  ( ! [X356,X358,X352,X354,X360,X362,X357,X359,X353,X355,X361,X363] : (s(X360,happ(s(fun(X355,X360),'_dst_x0x1x1_3'(s(fun(fun(X352,fun(X353,X354)),fun(X361,X360)),X362),s(fun(X355,fun(X352,fun(X353,X354))),'_dst_x000x111_2'(s(fun(X356,X354),X357),s(fun(X355,fun(X352,fun(X353,X356))),X358))),s(fun(X355,X361),X363))),s(X355,X359))) = s(X360,happ(s(fun(X361,X360),happ(s(fun(fun(X352,fun(X353,X354)),fun(X361,X360)),X362),s(fun(X352,fun(X353,X354)),'_dst_x00x11_2'(s(fun(X356,X354),X357),s(fun(X352,fun(X353,X356)),happ(s(fun(X355,fun(X352,fun(X353,X356))),X358),s(X355,X359))))))),s(X361,happ(s(fun(X355,X361),X363),s(X355,X359)))))) )),
  inference(superposition,[],[f360,f361])).
fof(f40026,plain,(
  ( ! [X350,X344,X346,X341,X343,X339,X349,X351,X345,X347,X340,X342,X348] : (s(X348,happ(s(fun(X341,X348),'_dst_x0x1x1_3'(s(fun(fun(X339,X340),fun(X349,X348)),X350),s(fun(X341,fun(X339,X340)),'_dst_x00x00x11_3'(s(fun(X342,fun(X343,X340)),X344),s(X342,X345),s(fun(X341,fun(X339,X343)),X346))),s(fun(X341,X349),X351))),s(X341,X347))) = s(X348,happ(s(fun(X349,X348),happ(s(fun(fun(X339,X340),fun(X349,X348)),X350),s(fun(X339,X340),'_dst_x0x0x1_3'(s(fun(X342,fun(X343,X340)),X344),s(X342,X345),s(fun(X339,X343),happ(s(fun(X341,fun(X339,X343)),X346),s(X341,X347))))))),s(X349,happ(s(fun(X341,X349),X351),s(X341,X347)))))) )),
  inference(superposition,[],[f360,f363])).
fof(f40025,plain,(
  ( ! [X327,X333,X335,X329,X331,X337,X326,X332,X334,X328,X330,X336,X338] : (s(X335,happ(s(fun(X328,X335),'_dst_x0x1x1_3'(s(fun(fun(X326,X327),fun(X336,X335)),X337),s(fun(X328,fun(X326,X327)),'_dst_x00x10x01_3'(s(fun(X329,fun(X330,X327)),X331),s(fun(X328,X329),X332),s(fun(X326,X330),X333))),s(fun(X328,X336),X338))),s(X328,X334))) = s(X335,happ(s(fun(X336,X335),happ(s(fun(fun(X326,X327),fun(X336,X335)),X337),s(fun(X326,X327),'_dst_x0x0x1_3'(s(fun(X329,fun(X330,X327)),X331),s(X329,happ(s(fun(X328,X329),X332),s(X328,X334))),s(fun(X326,X330),X333))))),s(X336,happ(s(fun(X328,X336),X338),s(X328,X334)))))) )),
  inference(superposition,[],[f360,f362])).
fof(f40024,plain,(
  ( ! [X315,X325,X321,X323,X316,X318,X324,X320,X322,X317,X319] : (s(X322,happ(s(fun(X317,X322),'_dst_x0x1x1_3'(s(fun(fun(X315,X316),fun(X323,X322)),X324),s(fun(X317,fun(X315,X316)),'_dst_x00x11_2'(s(fun(X318,X316),X319),s(fun(X317,fun(X315,X318)),X320))),s(fun(X317,X323),X325))),s(X317,X321))) = s(X322,happ(s(fun(X323,X322),happ(s(fun(fun(X315,X316),fun(X323,X322)),X324),s(fun(X315,X316),'_dst_x0x1_2'(s(fun(X318,X316),X319),s(fun(X315,X318),happ(s(fun(X317,fun(X315,X318)),X320),s(X317,X321))))))),s(X323,happ(s(fun(X317,X323),X325),s(X317,X321)))))) )),
  inference(superposition,[],[f360,f358])).
fof(f40023,plain,(
  ( ! [X313,X308,X310,X306,X312,X314,X309,X311,X307] : (s(X311,happ(s(fun(X308,X311),'_dst_x0x1x1_3'(s(fun(fun(fun(X306,X307),X307),fun(X312,X311)),X313),s(fun(X308,fun(fun(X306,X307),X307)),'_dstsel_1_x10_1'(s(fun(X308,X306),X309))),s(fun(X308,X312),X314))),s(X308,X310))) = s(X311,happ(s(fun(X312,X311),happ(s(fun(fun(fun(X306,X307),X307),fun(X312,X311)),X313),s(fun(fun(X306,X307),X307),'_dstsel_0_x0_1'(s(X306,happ(s(fun(X308,X306),X309),s(X308,X310))))))),s(X312,happ(s(fun(X308,X312),X314),s(X308,X310)))))) )),
  inference(superposition,[],[f360,f339])).
fof(f39996,plain,(
  ( ! [X121,X118,X122,X120,X119] : (s(X119,happ(s(fun(X120,X119),happ(s(fun(bool,fun(X120,X119)),X121),s(bool,'T_0'))),s(X120,happ(s(fun(fun(X118,bool),X120),X122),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0'))))))) = s(X119,happ(s(fun(fun(X118,bool),X119),'_dst_x0x1x1_3'(s(fun(bool,fun(X120,X119)),X121),s(fun(fun(X118,bool),bool),'?_1'),s(fun(fun(X118,bool),X120),X122))),s(fun(X118,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f360,f33115])).
fof(f39992,plain,(
  ( ! [X103,X101,X99,X105,X102,X100,X98,X104] : (s(X102,happ(s(fun(X103,X102),happ(s(fun(X98,fun(X103,X102)),X104),s(X98,'const.ind_type.FCONS_3'(s(X98,X100),s(fun('type.num.num',X98),X99),s('type.num.num',X101))))),s(X103,happ(s(fun('type.num.num',X103),X105),s('type.num.num',X101))))) = s(X102,happ(s(fun('type.num.num',X102),'_dst_x0x1x1_3'(s(fun(X98,fun(X103,X102)),X104),s(fun('type.num.num',X98),happ(s(fun(X98,fun('type.num.num',X98)),'_dst_x1x0_2'(s(fun(X98,fun(fun('type.num.num',X98),fun('type.num.num',X98))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X98),X99))),s(X98,X100))),s(fun('type.num.num',X103),X105))),s('type.num.num',X101)))) )),
  inference(superposition,[],[f360,f377])).
fof(f39991,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X96] : (s(X94,happ(s(fun(fun(X91,X90),X94),'_dst_x0x1x1_3'(s(fun(X90,fun(X95,X94)),X96),s(fun(fun(X91,X90),X90),'_dstsel_0_x0_1'(s(X91,X92))),s(fun(fun(X91,X90),X95),X97))),s(fun(X91,X90),X93))) = s(X94,happ(s(fun(X95,X94),happ(s(fun(X90,fun(X95,X94)),X96),s(X90,happ(s(fun(X91,X90),X93),s(X91,X92))))),s(X95,happ(s(fun(fun(X91,X90),X95),X97),s(fun(X91,X90),X93)))))) )),
  inference(superposition,[],[f360,f333])).
fof(f39990,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s(X86,happ(s(fun(X79,X86),'_dst_x0x1x1_3'(s(fun(X78,fun(X87,X86)),X88),s(fun(X79,X78),'_dst_x0x0x1_3'(s(fun(X80,fun(X81,X78)),X82),s(X80,X83),s(fun(X79,X81),X84))),s(fun(X79,X87),X89))),s(X79,X85))) = s(X86,happ(s(fun(X87,X86),happ(s(fun(X78,fun(X87,X86)),X88),s(X78,happ(s(fun(X81,X78),happ(s(fun(X80,fun(X81,X78)),X82),s(X80,X83))),s(X81,happ(s(fun(X79,X81),X84),s(X79,X85))))))),s(X87,happ(s(fun(X79,X87),X89),s(X79,X85)))))) )),
  inference(superposition,[],[f360,f359])).
fof(f39989,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(X74,happ(s(fun(X69,X74),'_dst_x0x1x1_3'(s(fun(X68,fun(X75,X74)),X76),s(fun(X69,X68),'_dst_x1x0_2'(s(fun(X69,fun(X70,X68)),X71),s(X70,X72))),s(fun(X69,X75),X77))),s(X69,X73))) = s(X74,happ(s(fun(X75,X74),happ(s(fun(X68,fun(X75,X74)),X76),s(X68,happ(s(fun(X70,X68),happ(s(fun(X69,fun(X70,X68)),X71),s(X69,X73))),s(X70,X72))))),s(X75,happ(s(fun(X69,X75),X77),s(X69,X73)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f39988,plain,(
  ( ! [X61,X66,X64,X62,X60,X67,X65,X63] : (s(X64,happ(s(fun(X65,X64),happ(s(fun(X60,fun(X65,X64)),X66),s(X60,X62))),s(X65,happ(s(fun(X61,X65),X67),s(X61,X63))))) = s(X64,happ(s(fun(X61,X64),'_dst_x0x1x1_3'(s(fun(X60,fun(X65,X64)),X66),s(fun(X61,X60),'_dst_x0_1'(s(X60,X62))),s(fun(X61,X65),X67))),s(X61,X63)))) )),
  inference(superposition,[],[f360,f330])).
fof(f39987,plain,(
  ( ! [X59,X57,X54,X52,X50,X58,X56,X55,X53,X51] : (s(X56,happ(s(fun(X51,X56),'_dst_x0x1x1_3'(s(fun(X50,fun(X57,X56)),X58),s(fun(X51,X50),'_dst_x0x1_2'(s(fun(X52,X50),X53),s(fun(X51,X52),X54))),s(fun(X51,X57),X59))),s(X51,X55))) = s(X56,happ(s(fun(X57,X56),happ(s(fun(X50,fun(X57,X56)),X58),s(X50,happ(s(fun(X52,X50),X53),s(X52,happ(s(fun(X51,X52),X54),s(X51,X55))))))),s(X57,happ(s(fun(X51,X57),X59),s(X51,X55)))))) )),
  inference(superposition,[],[f360,f340])).
fof(f39986,plain,(
  ( ! [X39,X47,X45,X43,X41,X48,X38,X46,X44,X42,X40,X49] : (s(X46,happ(s(fun(X39,X46),'_dst_x0x1x1_3'(s(fun(X38,fun(X47,X46)),X48),s(fun(X39,X38),happ(s(fun(X40,fun(X39,X38)),X41),s(X40,happ(s(fun(X42,X40),X43),s(X42,X44))))),s(fun(X39,X47),X49))),s(X39,happ(s(fun(X42,X39),X45),s(X42,X44))))) = s(X46,happ(s(fun(X47,X46),happ(s(fun(X38,fun(X47,X46)),X48),s(X38,happ(s(fun(X42,X38),'_dst_x0x1x1_3'(s(fun(X40,fun(X39,X38)),X41),s(fun(X42,X40),X43),s(fun(X42,X39),X45))),s(X42,X44))))),s(X47,happ(s(fun(X39,X47),X49),s(X39,happ(s(fun(X42,X39),X45),s(X42,X44)))))))) )),
  inference(superposition,[],[f360,f360])).
fof(f39985,plain,(
  ( ! [X30,X28,X26,X37,X35,X33,X31,X29,X27,X36,X34,X32] : (s(X34,happ(s(fun(X27,X34),'_dst_x0x1x1_3'(s(fun(X26,fun(X35,X34)),X36),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))),s(fun(X27,X35),X37))),s(X27,happ(s(fun(X31,X27),X32),s(X31,X33))))) = s(X34,happ(s(fun(X35,X34),happ(s(fun(X26,fun(X35,X34)),X36),s(X26,happ(s(fun(X31,X26),'_dst_x0x0x1_3'(s(fun(X28,fun(X27,X26)),X29),s(X28,X30),s(fun(X31,X27),X32))),s(X31,X33))))),s(X35,happ(s(fun(X27,X35),X37),s(X27,happ(s(fun(X31,X27),X32),s(X31,X33)))))))) )),
  inference(superposition,[],[f360,f359])).
fof(f39984,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x1x1_3'(s(fun(X16,fun(X23,X22)),X24),s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,X20))),s(fun(X17,X23),X25))),s(X17,X21))) = s(X22,happ(s(fun(X23,X22),happ(s(fun(X16,fun(X23,X22)),X24),s(X16,happ(s(fun(X18,X16),'_dst_x1x0_2'(s(fun(X18,fun(X17,X16)),X19),s(X17,X21))),s(X18,X20))))),s(X23,happ(s(fun(X17,X23),X25),s(X17,X21)))))) )),
  inference(superposition,[],[f360,f341])).
fof(f39983,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x1x1_3'(s(fun(X6,fun(X13,X12)),X14),s(fun(X7,X6),X8),s(fun(X7,X13),X15))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X13,X12),happ(s(fun(X6,fun(X13,X12)),X14),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11))))),s(X13,happ(s(fun(X7,X13),X15),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11)))))))) )),
  inference(superposition,[],[f360,f340])).
fof(f39982,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),'_dst_x0x1x1_3'(s(fun(X0,fun(X3,X2)),X4),s(fun(X0,X0),'_i_0_0'),s(fun(X0,X3),X5))),s(X0,X1))) = s(X2,happ(s(fun(X3,X2),happ(s(fun(X0,fun(X3,X2)),X4),s(X0,X1))),s(X3,happ(s(fun(X0,X3),X5),s(X0,X1)))))) )),
  inference(superposition,[],[f360,f290])).
fof(f39434,plain,(
  ( ! [X389,X391,X397,X393,X395,X390,X396,X392,X394] : (s(fun(X389,fun(X390,X391)),X397) != s(fun(X389,fun(X390,X391)),'_dst_x00x11_2'(s(fun(X393,X391),X394),s(fun(X389,fun(X390,X393)),happ(s(fun(X392,fun(X389,fun(X390,X393))),X395),s(X392,X396))))) | s('type.benchmark.times'(fun(X389,fun(X390,X391))),'const.benchmark.Once_1'(s(fun(X389,fun(X390,X391)),X397))) = s('type.benchmark.times'(fun(X389,fun(X390,X391))),'const.benchmark.Once_1'(s(fun(X389,fun(X390,X391)),happ(s(fun(X392,fun(X389,fun(X390,X391))),'_dst_x000x111_2'(s(fun(X393,X391),X394),s(fun(X392,fun(X389,fun(X390,X393))),X395))),s(X392,X396)))))) )),
  inference(superposition,[],[f303,f361])).
fof(f39432,plain,(
  ( ! [X377,X379,X372,X374,X376,X378,X373,X375,X371] : (s('type.benchmark.times'(fun(X371,fun(X372,X373))),'const.benchmark.Once_1'(s(fun(X371,fun(X372,X373)),X379))) != s('type.benchmark.times'(fun(X371,fun(X372,X373))),'const.benchmark.Once_1'(s(fun(X371,fun(X372,X373)),'_dst_x00x11_2'(s(fun(X375,X373),X376),s(fun(X371,fun(X372,X375)),happ(s(fun(X374,fun(X371,fun(X372,X375))),X377),s(X374,X378))))))) | s(fun(X371,fun(X372,X373)),X379) = s(fun(X371,fun(X372,X373)),happ(s(fun(X374,fun(X371,fun(X372,X373))),'_dst_x000x111_2'(s(fun(X375,X373),X376),s(fun(X374,fun(X371,fun(X372,X375))),X377))),s(X374,X378)))) )),
  inference(superposition,[],[f302,f361])).
fof(f39424,plain,(
  ( ! [X300,X302,X308,X304,X306,X301,X303,X299,X305,X307] : (s(X307,happ(s(fun(X302,X307),'_dst_x0x1_2'(s(fun(fun(X299,fun(X300,X301)),X307),X308),s(fun(X302,fun(X299,fun(X300,X301))),'_dst_x000x111_2'(s(fun(X303,X301),X304),s(fun(X302,fun(X299,fun(X300,X303))),X305))))),s(X302,X306))) = s(X307,happ(s(fun(fun(X299,fun(X300,X301)),X307),X308),s(fun(X299,fun(X300,X301)),'_dst_x00x11_2'(s(fun(X303,X301),X304),s(fun(X299,fun(X300,X303)),happ(s(fun(X302,fun(X299,fun(X300,X303))),X305),s(X302,X306)))))))) )),
  inference(superposition,[],[f340,f361])).
fof(f39423,plain,(
  ( ! [X292,X294,X288,X290,X296,X298,X287,X293,X295,X289,X291,X297] : (s(X295,happ(s(fun(X290,X295),'_dst_x0x0x1_3'(s(fun(X296,fun(fun(X287,fun(X288,X289)),X295)),X297),s(X296,X298),s(fun(X290,fun(X287,fun(X288,X289))),'_dst_x000x111_2'(s(fun(X291,X289),X292),s(fun(X290,fun(X287,fun(X288,X291))),X293))))),s(X290,X294))) = s(X295,happ(s(fun(fun(X287,fun(X288,X289)),X295),happ(s(fun(X296,fun(fun(X287,fun(X288,X289)),X295)),X297),s(X296,X298))),s(fun(X287,fun(X288,X289)),'_dst_x00x11_2'(s(fun(X291,X289),X292),s(fun(X287,fun(X288,X291)),happ(s(fun(X290,fun(X287,fun(X288,X291))),X293),s(X290,X294)))))))) )),
  inference(superposition,[],[f359,f361])).
fof(f39422,plain,(
  ( ! [X280,X282,X277,X279,X275,X285,X281,X283,X276,X278,X274,X284,X286] : (s(fun(X282,X283),'_dst_x0x0x1_3'(s(fun(fun(X274,fun(X275,X276)),fun(X284,X283)),X285),s(fun(X274,fun(X275,X276)),'_dst_x00x11_2'(s(fun(X278,X276),X279),s(fun(X274,fun(X275,X278)),happ(s(fun(X277,fun(X274,fun(X275,X278))),X280),s(X277,X281))))),s(fun(X282,X284),X286))) = s(fun(X282,X283),happ(s(fun(X277,fun(X282,X283)),'_dst_x00x10x01_3'(s(fun(fun(X274,fun(X275,X276)),fun(X284,X283)),X285),s(fun(X277,fun(X274,fun(X275,X276))),'_dst_x000x111_2'(s(fun(X278,X276),X279),s(fun(X277,fun(X274,fun(X275,X278))),X280))),s(fun(X282,X284),X286))),s(X277,X281)))) )),
  inference(superposition,[],[f362,f361])).
fof(f39411,plain,(
  ( ! [X158,X156,X154,X152,X151,X157,X155,X153,X150] : (s(fun(X151,X152),happ(s(fun(X150,fun(X151,X152)),'_dst_x00x11_2'(s(fun(X154,X152),X155),s(fun(X150,fun(X151,X154)),happ(s(fun(X153,fun(X150,fun(X151,X154))),X156),s(X153,X157))))),s(X150,X158))) = s(fun(X151,X152),happ(s(fun(X153,fun(X151,X152)),'_dst_x1x0_2'(s(fun(X153,fun(X150,fun(X151,X152))),'_dst_x000x111_2'(s(fun(X154,X152),X155),s(fun(X153,fun(X150,fun(X151,X154))),X156))),s(X150,X158))),s(X153,X157)))) )),
  inference(superposition,[],[f341,f361])).
fof(f39410,plain,(
  ( ! [X146,X144,X142,X140,X149,X147,X145,X143,X141,X148] : (s(fun(X140,X148),'_dst_x0x1_2'(s(fun(fun(X141,X142),X148),X149),s(fun(X140,fun(X141,X142)),'_dst_x00x11_2'(s(fun(X144,X142),X145),s(fun(X140,fun(X141,X144)),happ(s(fun(X143,fun(X140,fun(X141,X144))),X146),s(X143,X147))))))) = s(fun(X140,X148),happ(s(fun(X143,fun(X140,X148)),'_dst_x00x11_2'(s(fun(fun(X141,X142),X148),X149),s(fun(X143,fun(X140,fun(X141,X142))),'_dst_x000x111_2'(s(fun(X144,X142),X145),s(fun(X143,fun(X140,fun(X141,X144))),X146))))),s(X143,X147)))) )),
  inference(superposition,[],[f358,f361])).
fof(f39409,plain,(
  ( ! [X134,X132,X130,X138,X136,X135,X133,X131,X129,X139,X137] : (s(fun(X130,X131),happ(s(fun(X137,fun(X130,X131)),'_dst_x0x0x1_3'(s(fun(X132,fun(X129,fun(X130,X131))),'_dst_x000x111_2'(s(fun(X133,X131),X134),s(fun(X132,fun(X129,fun(X130,X133))),X135))),s(X132,X136),s(fun(X137,X129),X138))),s(X137,X139))) = s(fun(X130,X131),happ(s(fun(X129,fun(X130,X131)),'_dst_x00x11_2'(s(fun(X133,X131),X134),s(fun(X129,fun(X130,X133)),happ(s(fun(X132,fun(X129,fun(X130,X133))),X135),s(X132,X136))))),s(X129,happ(s(fun(X137,X129),X138),s(X137,X139)))))) )),
  inference(superposition,[],[f359,f361])).
fof(f39408,plain,(
  ( ! [X127,X125,X123,X121,X128,X118,X126,X124,X122,X120,X119,X117] : (s(fun(X117,X125),'_dst_x0x0x1_3'(s(fun(X126,fun(fun(X118,X119),X125)),X127),s(X126,X128),s(fun(X117,fun(X118,X119)),'_dst_x00x11_2'(s(fun(X121,X119),X122),s(fun(X117,fun(X118,X121)),happ(s(fun(X120,fun(X117,fun(X118,X121))),X123),s(X120,X124))))))) = s(fun(X117,X125),happ(s(fun(X120,fun(X117,X125)),'_dst_x00x00x11_3'(s(fun(X126,fun(fun(X118,X119),X125)),X127),s(X126,X128),s(fun(X120,fun(X117,fun(X118,X119))),'_dst_x000x111_2'(s(fun(X121,X119),X122),s(fun(X120,fun(X117,fun(X118,X121))),X123))))),s(X120,X124)))) )),
  inference(superposition,[],[f363,f361])).
fof(f39369,plain,(
  ( ! [X313,X315,X316,X318,X312,X314,X311,X317,X319] : (s(fun(X311,fun(X312,X313)),X319) != s(fun(X311,fun(X312,X313)),happ(s(fun(X316,fun(X311,fun(X312,X313))),'_dst_x000x111_2'(s(fun(X314,X313),X315),s(fun(X316,fun(X311,fun(X312,X314))),X317))),s(X316,X318))) | s('type.benchmark.times'(fun(X311,fun(X312,X313))),'const.benchmark.Once_1'(s(fun(X311,fun(X312,X313)),X319))) = s('type.benchmark.times'(fun(X311,fun(X312,X313))),'const.benchmark.Once_1'(s(fun(X311,fun(X312,X313)),'_dst_x00x11_2'(s(fun(X314,X313),X315),s(fun(X311,fun(X312,X314)),happ(s(fun(X316,fun(X311,fun(X312,X314))),X317),s(X316,X318)))))))) )),
  inference(superposition,[],[f303,f361])).
fof(f39367,plain,(
  ( ! [X294,X300,X296,X298,X293,X295,X301,X297,X299] : (s('type.benchmark.times'(fun(X293,fun(X294,X295))),'const.benchmark.Once_1'(s(fun(X293,fun(X294,X295)),X301))) != s('type.benchmark.times'(fun(X293,fun(X294,X295))),'const.benchmark.Once_1'(s(fun(X293,fun(X294,X295)),happ(s(fun(X298,fun(X293,fun(X294,X295))),'_dst_x000x111_2'(s(fun(X296,X295),X297),s(fun(X298,fun(X293,fun(X294,X296))),X299))),s(X298,X300))))) | s(fun(X293,fun(X294,X295)),X301) = s(fun(X293,fun(X294,X295)),'_dst_x00x11_2'(s(fun(X296,X295),X297),s(fun(X293,fun(X294,X296)),happ(s(fun(X298,fun(X293,fun(X294,X296))),X299),s(X298,X300)))))) )),
  inference(superposition,[],[f302,f361])).
fof(f39341,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20] : (s(fun(X20,X21),'_dst_x0x1_2'(s(fun(X22,X21),X23),s(fun(X20,X22),happ(s(fun(X19,fun(X20,X22)),happ(s(fun(X24,fun(X19,fun(X20,X22))),X25),s(X24,X26))),s(X19,X27))))) = s(fun(X20,X21),happ(s(fun(X19,fun(X20,X21)),happ(s(fun(X24,fun(X19,fun(X20,X21))),'_dst_x000x111_2'(s(fun(X22,X21),X23),s(fun(X24,fun(X19,fun(X20,X22))),X25))),s(X24,X26))),s(X19,X27)))) )),
  inference(superposition,[],[f358,f361])).
fof(f39338,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(fun(X8,fun(X9,X10)),'_dst_x00x11_2'(s(fun(X12,X10),X13),s(fun(X8,fun(X9,X12)),happ(s(fun(X11,fun(X8,fun(X9,X12))),X14),s(X11,happ(s(fun(X15,X11),X16),s(X15,X17))))))) = s(fun(X8,fun(X9,X10)),happ(s(fun(X15,fun(X8,fun(X9,X10))),'_dst_x0x1_2'(s(fun(X11,fun(X8,fun(X9,X10))),'_dst_x000x111_2'(s(fun(X12,X10),X13),s(fun(X11,fun(X8,fun(X9,X12))),X14))),s(fun(X15,X11),X16))),s(X15,X17)))) )),
  inference(superposition,[],[f361,f340])).
fof(f39190,plain,(
  ( ! [X144,X142,X140,X138,X145,X143,X141,X139] : (s(fun(X138,fun(X139,X144)),'_dst_x00x11_2'(s(fun(X140,X144),X145),s(fun(X138,fun(X139,X140)),'const.ind_type.FCONS_3'(s(fun(X138,fun(X139,X140)),X142),s(fun('type.num.num',fun(X138,fun(X139,X140))),X141),s('type.num.num',X143))))) = s(fun(X138,fun(X139,X144)),happ(s(fun('type.num.num',fun(X138,fun(X139,X144))),'_dst_x000x111_2'(s(fun(X140,X144),X145),s(fun('type.num.num',fun(X138,fun(X139,X140))),happ(s(fun(fun(X138,fun(X139,X140)),fun('type.num.num',fun(X138,fun(X139,X140)))),'_dst_x1x0_2'(s(fun(fun(X138,fun(X139,X140)),fun(fun('type.num.num',fun(X138,fun(X139,X140))),fun('type.num.num',fun(X138,fun(X139,X140))))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X138,fun(X139,X140))),X141))),s(fun(X138,fun(X139,X140)),X142))))),s('type.num.num',X143)))) )),
  inference(superposition,[],[f361,f377])).
fof(f39189,plain,(
  ( ! [X127,X125,X123,X121,X128,X118,X126,X124,X122,X120,X129,X119] : (s(fun(X118,fun(X119,X128)),happ(s(fun(X121,fun(X118,fun(X119,X128))),'_dst_x000x111_2'(s(fun(X120,X128),X129),s(fun(X121,fun(X118,fun(X119,X120))),'_dst_x0x0x1_3'(s(fun(X122,fun(X123,fun(X118,fun(X119,X120)))),X124),s(X122,X125),s(fun(X121,X123),X126))))),s(X121,X127))) = s(fun(X118,fun(X119,X128)),'_dst_x00x11_2'(s(fun(X120,X128),X129),s(fun(X118,fun(X119,X120)),happ(s(fun(X123,fun(X118,fun(X119,X120))),happ(s(fun(X122,fun(X123,fun(X118,fun(X119,X120)))),X124),s(X122,X125))),s(X123,happ(s(fun(X121,X123),X126),s(X121,X127)))))))) )),
  inference(superposition,[],[f361,f359])).
fof(f39188,plain,(
  ( ! [X111,X109,X116,X114,X112,X110,X108,X117,X115,X113] : (s(fun(X108,fun(X109,X116)),'_dst_x00x11_2'(s(fun(X110,X116),X117),s(fun(X108,fun(X109,X110)),happ(s(fun(X112,fun(X108,fun(X109,X110))),happ(s(fun(X111,fun(X112,fun(X108,fun(X109,X110)))),X113),s(X111,X115))),s(X112,X114))))) = s(fun(X108,fun(X109,X116)),happ(s(fun(X111,fun(X108,fun(X109,X116))),'_dst_x000x111_2'(s(fun(X110,X116),X117),s(fun(X111,fun(X108,fun(X109,X110))),'_dst_x1x0_2'(s(fun(X111,fun(X112,fun(X108,fun(X109,X110)))),X113),s(X112,X114))))),s(X111,X115)))) )),
  inference(superposition,[],[f361,f341])).
fof(f39187,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106,X104] : (s(fun(X100,fun(X101,X106)),'_dst_x00x11_2'(s(fun(X102,X106),X107),s(fun(X100,fun(X101,X102)),X104))) = s(fun(X100,fun(X101,X106)),happ(s(fun(X103,fun(X100,fun(X101,X106))),'_dst_x000x111_2'(s(fun(X102,X106),X107),s(fun(X103,fun(X100,fun(X101,X102))),'_dst_x0_1'(s(fun(X100,fun(X101,X102)),X104))))),s(X103,X105)))) )),
  inference(superposition,[],[f361,f330])).
fof(f39186,plain,(
  ( ! [X94,X92,X90,X99,X97,X95,X93,X91,X98,X96] : (s(fun(X90,fun(X91,X98)),'_dst_x00x11_2'(s(fun(X92,X98),X99),s(fun(X90,fun(X91,X92)),happ(s(fun(X94,fun(X90,fun(X91,X92))),X95),s(X94,happ(s(fun(X93,X94),X96),s(X93,X97))))))) = s(fun(X90,fun(X91,X98)),happ(s(fun(X93,fun(X90,fun(X91,X98))),'_dst_x000x111_2'(s(fun(X92,X98),X99),s(fun(X93,fun(X90,fun(X91,X92))),'_dst_x0x1_2'(s(fun(X94,fun(X90,fun(X91,X92))),X95),s(fun(X93,X94),X96))))),s(X93,X97)))) )),
  inference(superposition,[],[f361,f340])).
fof(f39185,plain,(
  ( ! [X80,X88,X78,X87,X85,X83,X81,X89,X79,X86,X84,X82] : (s(fun(X78,fun(X79,X88)),'_dst_x00x11_2'(s(fun(X80,X88),X89),s(fun(X78,fun(X79,X80)),happ(s(fun(X85,fun(X78,fun(X79,X80))),'_dst_x0x0x1_3'(s(fun(X82,fun(X81,fun(X78,fun(X79,X80)))),X83),s(X82,X84),s(fun(X85,X81),X86))),s(X85,X87))))) = s(fun(X78,fun(X79,X88)),happ(s(fun(X81,fun(X78,fun(X79,X88))),'_dst_x000x111_2'(s(fun(X80,X88),X89),s(fun(X81,fun(X78,fun(X79,X80))),happ(s(fun(X82,fun(X81,fun(X78,fun(X79,X80)))),X83),s(X82,X84))))),s(X81,happ(s(fun(X85,X81),X86),s(X85,X87)))))) )),
  inference(superposition,[],[f361,f359])).
fof(f39184,plain,(
  ( ! [X70,X68,X76,X74,X72,X71,X69,X77,X75,X73] : (s(fun(X68,fun(X69,X76)),'_dst_x00x11_2'(s(fun(X70,X76),X77),s(fun(X68,fun(X69,X70)),happ(s(fun(X72,fun(X68,fun(X69,X70))),'_dst_x1x0_2'(s(fun(X72,fun(X71,fun(X68,fun(X69,X70)))),X73),s(X71,X75))),s(X72,X74))))) = s(fun(X68,fun(X69,X76)),happ(s(fun(X71,fun(X68,fun(X69,X76))),'_dst_x000x111_2'(s(fun(X70,X76),X77),s(fun(X71,fun(X68,fun(X69,X70))),happ(s(fun(X72,fun(X71,fun(X68,fun(X69,X70)))),X73),s(X72,X74))))),s(X71,X75)))) )),
  inference(superposition,[],[f361,f341])).
fof(f39183,plain,(
  ( ! [X61,X59,X66,X64,X62,X60,X58,X67,X65,X63] : (s(fun(X58,fun(X59,X66)),happ(s(fun(X61,fun(X58,fun(X59,X66))),'_dst_x000x111_2'(s(fun(X60,X66),X67),s(fun(X61,fun(X58,fun(X59,X60))),X62))),s(X61,happ(s(fun(X63,X61),X64),s(X63,X65))))) = s(fun(X58,fun(X59,X66)),'_dst_x00x11_2'(s(fun(X60,X66),X67),s(fun(X58,fun(X59,X60)),happ(s(fun(X63,fun(X58,fun(X59,X60))),'_dst_x0x1_2'(s(fun(X61,fun(X58,fun(X59,X60))),X62),s(fun(X63,X61),X64))),s(X63,X65)))))) )),
  inference(superposition,[],[f361,f340])).
fof(f39182,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X40,X51,X49] : (s(fun(X40,fun(X41,X50)),'_dst_x00x11_2'(s(fun(X42,X50),X51),s(fun(X40,fun(X41,X42)),'_dst_x0x0x1_3'(s(fun(X44,fun(X45,fun(X41,X42))),X46),s(X44,X47),s(fun(X40,X45),happ(s(fun(X43,fun(X40,X45)),X48),s(X43,X49))))))) = s(fun(X40,fun(X41,X50)),happ(s(fun(X43,fun(X40,fun(X41,X50))),'_dst_x000x111_2'(s(fun(X42,X50),X51),s(fun(X43,fun(X40,fun(X41,X42))),'_dst_x00x00x11_3'(s(fun(X44,fun(X45,fun(X41,X42))),X46),s(X44,X47),s(fun(X43,fun(X40,X45)),X48))))),s(X43,X49)))) )),
  inference(superposition,[],[f361,f363])).
fof(f39181,plain,(
  ( ! [X30,X28,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s(fun(X28,fun(X29,X38)),'_dst_x00x11_2'(s(fun(X30,X38),X39),s(fun(X28,fun(X29,X30)),'_dst_x0x0x1_3'(s(fun(X32,fun(X33,fun(X29,X30))),X34),s(X32,happ(s(fun(X31,X32),X35),s(X31,X37))),s(fun(X28,X33),X36))))) = s(fun(X28,fun(X29,X38)),happ(s(fun(X31,fun(X28,fun(X29,X38))),'_dst_x000x111_2'(s(fun(X30,X38),X39),s(fun(X31,fun(X28,fun(X29,X30))),'_dst_x00x10x01_3'(s(fun(X32,fun(X33,fun(X29,X30))),X34),s(fun(X31,X32),X35),s(fun(X28,X33),X36))))),s(X31,X37)))) )),
  inference(superposition,[],[f361,f362])).
fof(f39180,plain,(
  ( ! [X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s(fun(X18,fun(X19,X26)),'_dst_x00x11_2'(s(fun(X20,X26),X27),s(fun(X18,fun(X19,X20)),'_dst_x0x1_2'(s(fun(X22,fun(X19,X20)),X23),s(fun(X18,X22),happ(s(fun(X21,fun(X18,X22)),X24),s(X21,X25))))))) = s(fun(X18,fun(X19,X26)),happ(s(fun(X21,fun(X18,fun(X19,X26))),'_dst_x000x111_2'(s(fun(X20,X26),X27),s(fun(X21,fun(X18,fun(X19,X20))),'_dst_x00x11_2'(s(fun(X22,fun(X19,X20)),X23),s(fun(X21,fun(X18,X22)),X24))))),s(X21,X25)))) )),
  inference(superposition,[],[f361,f358])).
fof(f39179,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(fun(fun(X10,fun(X11,X12)),fun(X11,X16)),'_dst_x00x11_2'(s(fun(X12,X16),X17),s(fun(fun(X10,fun(X11,X12)),fun(X11,X12)),'_dstsel_0_x0_1'(s(X10,happ(s(fun(X13,X10),X14),s(X13,X15))))))) = s(fun(fun(X10,fun(X11,X12)),fun(X11,X16)),happ(s(fun(X13,fun(fun(X10,fun(X11,X12)),fun(X11,X16))),'_dst_x000x111_2'(s(fun(X12,X16),X17),s(fun(X13,fun(fun(X10,fun(X11,X12)),fun(X11,X12))),'_dstsel_1_x10_1'(s(fun(X13,X10),X14))))),s(X13,X15)))) )),
  inference(superposition,[],[f361,f339])).
fof(f39178,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(X0,fun(X1,X8)),'_dst_x00x11_2'(s(fun(X2,X8),X9),s(fun(X0,fun(X1,X2)),'_dst_x00x11_2'(s(fun(X4,X2),X5),s(fun(X0,fun(X1,X4)),happ(s(fun(X3,fun(X0,fun(X1,X4))),X6),s(X3,X7))))))) = s(fun(X0,fun(X1,X8)),happ(s(fun(X3,fun(X0,fun(X1,X8))),'_dst_x000x111_2'(s(fun(X2,X8),X9),s(fun(X3,fun(X0,fun(X1,X2))),'_dst_x000x111_2'(s(fun(X4,X2),X5),s(fun(X3,fun(X0,fun(X1,X4))),X6))))),s(X3,X7)))) )),
  inference(superposition,[],[f361,f361])).
fof(f39177,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),'_dst_x00x11_2'(s(fun(X3,X2),X4),s(fun(X0,fun(X1,X3)),happ(s(fun(X5,fun(X0,fun(X1,X3))),X6),s(X5,X7))))))) = s('type.benchmark.times'(fun(X0,fun(X1,X2))),'const.benchmark.Once_1'(s(fun(X0,fun(X1,X2)),happ(s(fun(X5,fun(X0,fun(X1,X2))),'_dst_x000x111_2'(s(fun(X3,X2),X4),s(fun(X5,fun(X0,fun(X1,X3))),X6))),s(X5,X7)))))) )),
  inference(unit_resulting_resolution,[],[f361,f303])).
fof(f38307,plain,(
  ( ! [X524,X526,X520,X522,X518,X525,X521,X523,X517,X519] : (s(fun(X517,X518),X526) != s(fun(X517,X518),'_dst_x0x0x1_3'(s(fun(X520,fun(X521,X518)),X522),s(X520,X523),s(fun(X517,X521),happ(s(fun(X519,fun(X517,X521)),X524),s(X519,X525))))) | s('type.benchmark.times'(fun(X517,X518)),'const.benchmark.Once_1'(s(fun(X517,X518),X526))) = s('type.benchmark.times'(fun(X517,X518)),'const.benchmark.Once_1'(s(fun(X517,X518),happ(s(fun(X519,fun(X517,X518)),'_dst_x00x00x11_3'(s(fun(X520,fun(X521,X518)),X522),s(X520,X523),s(fun(X519,fun(X517,X521)),X524))),s(X519,X525)))))) )),
  inference(superposition,[],[f303,f363])).
fof(f38305,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X501,X503,X497] : (s('type.benchmark.times'(fun(X497,X498)),'const.benchmark.Once_1'(s(fun(X497,X498),X506))) != s('type.benchmark.times'(fun(X497,X498)),'const.benchmark.Once_1'(s(fun(X497,X498),'_dst_x0x0x1_3'(s(fun(X500,fun(X501,X498)),X502),s(X500,X503),s(fun(X497,X501),happ(s(fun(X499,fun(X497,X501)),X504),s(X499,X505))))))) | s(fun(X497,X498),X506) = s(fun(X497,X498),happ(s(fun(X499,fun(X497,X498)),'_dst_x00x00x11_3'(s(fun(X500,fun(X501,X498)),X502),s(X500,X503),s(fun(X499,fun(X497,X501)),X504))),s(X499,X505)))) )),
  inference(superposition,[],[f302,f363])).
fof(f38297,plain,(
  ( ! [X420,X422,X418,X424,X426,X421,X423,X417,X419,X425,X427] : (s(X426,happ(s(fun(fun(X417,X418),X426),X427),s(fun(X417,X418),'_dst_x0x0x1_3'(s(fun(X420,fun(X421,X418)),X422),s(X420,X423),s(fun(X417,X421),happ(s(fun(X419,fun(X417,X421)),X424),s(X419,X425))))))) = s(X426,happ(s(fun(X419,X426),'_dst_x0x1_2'(s(fun(fun(X417,X418),X426),X427),s(fun(X419,fun(X417,X418)),'_dst_x00x00x11_3'(s(fun(X420,fun(X421,X418)),X422),s(X420,X423),s(fun(X419,fun(X417,X421)),X424))))),s(X419,X425)))) )),
  inference(superposition,[],[f340,f363])).
fof(f38296,plain,(
  ( ! [X412,X414,X408,X410,X416,X405,X407,X413,X415,X409,X411,X404,X406] : (s(X413,happ(s(fun(X406,X413),'_dst_x0x0x1_3'(s(fun(X414,fun(fun(X404,X405),X413)),X415),s(X414,X416),s(fun(X406,fun(X404,X405)),'_dst_x00x00x11_3'(s(fun(X407,fun(X408,X405)),X409),s(X407,X410),s(fun(X406,fun(X404,X408)),X411))))),s(X406,X412))) = s(X413,happ(s(fun(fun(X404,X405),X413),happ(s(fun(X414,fun(fun(X404,X405),X413)),X415),s(X414,X416))),s(fun(X404,X405),'_dst_x0x0x1_3'(s(fun(X407,fun(X408,X405)),X409),s(X407,X410),s(fun(X404,X408),happ(s(fun(X406,fun(X404,X408)),X411),s(X406,X412)))))))) )),
  inference(superposition,[],[f359,f363])).
fof(f38295,plain,(
  ( ! [X391,X397,X399,X393,X395,X401,X403,X390,X396,X398,X392,X394,X400,X402] : (s(fun(X399,X400),'_dst_x0x0x1_3'(s(fun(fun(X390,X391),fun(X401,X400)),X402),s(fun(X390,X391),'_dst_x0x0x1_3'(s(fun(X393,fun(X394,X391)),X395),s(X393,X396),s(fun(X390,X394),happ(s(fun(X392,fun(X390,X394)),X397),s(X392,X398))))),s(fun(X399,X401),X403))) = s(fun(X399,X400),happ(s(fun(X392,fun(X399,X400)),'_dst_x00x10x01_3'(s(fun(fun(X390,X391),fun(X401,X400)),X402),s(fun(X392,fun(X390,X391)),'_dst_x00x00x11_3'(s(fun(X393,fun(X394,X391)),X395),s(X393,X396),s(fun(X392,fun(X390,X394)),X397))),s(fun(X399,X401),X403))),s(X392,X398)))) )),
  inference(superposition,[],[f362,f363])).
fof(f38284,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X266,X272,X274] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X266,bool),'_dst_x0x0x1_3'(s(fun(X268,fun(X269,bool)),X270),s(X268,X271),s(fun(X266,X269),happ(s(fun(X267,fun(X266,X269)),X272),s(X267,X273))))))) | s(X266,X274) = s(X266,sK4(X274,happ(s(fun(X267,fun(X266,bool)),'_dst_x00x00x11_3'(s(fun(X268,fun(X269,bool)),X270),s(X268,X271),s(fun(X267,fun(X266,X269)),X272))),s(X267,X273)),X266))) )),
  inference(superposition,[],[f562,f363])).
fof(f38264,plain,(
  ( ! [X61,X59,X57,X54,X52,X60,X58,X56,X55,X53] : (s(X53,happ(s(fun(X52,X53),'_dst_x0x0x1_3'(s(fun(X55,fun(X56,X53)),X57),s(X55,X58),s(fun(X52,X56),happ(s(fun(X54,fun(X52,X56)),X59),s(X54,X60))))),s(X52,X61))) = s(X53,happ(s(fun(X54,X53),'_dst_x1x0_2'(s(fun(X54,fun(X52,X53)),'_dst_x00x00x11_3'(s(fun(X55,fun(X56,X53)),X57),s(X55,X58),s(fun(X54,fun(X52,X56)),X59))),s(X52,X61))),s(X54,X60)))) )),
  inference(superposition,[],[f341,f363])).
fof(f38263,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X51,X49] : (s(fun(X41,X50),'_dst_x0x1_2'(s(fun(X42,X50),X51),s(fun(X41,X42),'_dst_x0x0x1_3'(s(fun(X44,fun(X45,X42)),X46),s(X44,X47),s(fun(X41,X45),happ(s(fun(X43,fun(X41,X45)),X48),s(X43,X49))))))) = s(fun(X41,X50),happ(s(fun(X43,fun(X41,X50)),'_dst_x00x11_2'(s(fun(X42,X50),X51),s(fun(X43,fun(X41,X42)),'_dst_x00x00x11_3'(s(fun(X44,fun(X45,X42)),X46),s(X44,X47),s(fun(X43,fun(X41,X45)),X48))))),s(X43,X49)))) )),
  inference(superposition,[],[f358,f363])).
fof(f38262,plain,(
  ( ! [X30,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32,X40] : (s(X30,happ(s(fun(X38,X30),'_dst_x0x0x1_3'(s(fun(X31,fun(X29,X30)),'_dst_x00x00x11_3'(s(fun(X32,fun(X33,X30)),X34),s(X32,X35),s(fun(X31,fun(X29,X33)),X36))),s(X31,X37),s(fun(X38,X29),X39))),s(X38,X40))) = s(X30,happ(s(fun(X29,X30),'_dst_x0x0x1_3'(s(fun(X32,fun(X33,X30)),X34),s(X32,X35),s(fun(X29,X33),happ(s(fun(X31,fun(X29,X33)),X36),s(X31,X37))))),s(X29,happ(s(fun(X38,X29),X39),s(X38,X40)))))) )),
  inference(superposition,[],[f359,f363])).
fof(f38233,plain,(
  ( ! [X461,X463,X457,X459,X465,X460,X462,X456,X458,X464] : (s(fun(X456,X457),X465) != s(fun(X456,X457),happ(s(fun(X462,fun(X456,X457)),'_dst_x00x00x11_3'(s(fun(X458,fun(X459,X457)),X460),s(X458,X461),s(fun(X462,fun(X456,X459)),X463))),s(X462,X464))) | s('type.benchmark.times'(fun(X456,X457)),'const.benchmark.Once_1'(s(fun(X456,X457),X465))) = s('type.benchmark.times'(fun(X456,X457)),'const.benchmark.Once_1'(s(fun(X456,X457),'_dst_x0x0x1_3'(s(fun(X458,fun(X459,X457)),X460),s(X458,X461),s(fun(X456,X459),happ(s(fun(X462,fun(X456,X459)),X463),s(X462,X464)))))))) )),
  inference(superposition,[],[f303,f363])).
fof(f38231,plain,(
  ( ! [X445,X441,X443,X436,X438,X444,X440,X442,X437,X439] : (s('type.benchmark.times'(fun(X436,X437)),'const.benchmark.Once_1'(s(fun(X436,X437),X445))) != s('type.benchmark.times'(fun(X436,X437)),'const.benchmark.Once_1'(s(fun(X436,X437),happ(s(fun(X442,fun(X436,X437)),'_dst_x00x00x11_3'(s(fun(X438,fun(X439,X437)),X440),s(X438,X441),s(fun(X442,fun(X436,X439)),X443))),s(X442,X444))))) | s(fun(X436,X437),X445) = s(fun(X436,X437),'_dst_x0x0x1_3'(s(fun(X438,fun(X439,X437)),X440),s(X438,X441),s(fun(X436,X439),happ(s(fun(X442,fun(X436,X439)),X443),s(X442,X444)))))) )),
  inference(superposition,[],[f302,f363])).
fof(f38214,plain,(
  ( ! [X255,X261,X257,X259,X260,X254,X256,X258,X262] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X254,bool),happ(s(fun(X259,fun(X254,bool)),'_dst_x00x00x11_3'(s(fun(X255,fun(X256,bool)),X257),s(X255,X258),s(fun(X259,fun(X254,X256)),X260))),s(X259,X261))))) | s(X254,X262) = s(X254,sK4(X262,'_dst_x0x0x1_3'(s(fun(X255,fun(X256,bool)),X257),s(X255,X258),s(fun(X254,X256),happ(s(fun(X259,fun(X254,X256)),X260),s(X259,X261)))),X254))) )),
  inference(superposition,[],[f562,f363])).
fof(f38193,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s(X30,happ(s(fun(X29,X30),happ(s(fun(X35,fun(X29,X30)),'_dst_x00x00x11_3'(s(fun(X31,fun(X32,X30)),X33),s(X31,X34),s(fun(X35,fun(X29,X32)),X36))),s(X35,X37))),s(X29,X38))) = s(X30,happ(s(fun(X32,X30),happ(s(fun(X31,fun(X32,X30)),X33),s(X31,X34))),s(X32,happ(s(fun(X29,X32),happ(s(fun(X35,fun(X29,X32)),X36),s(X35,X37))),s(X29,X38)))))) )),
  inference(superposition,[],[f359,f363])).
fof(f38189,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,X15),s(fun(X9,X13),happ(s(fun(X11,fun(X9,X13)),X16),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))))) = s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x00x11_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,X15),s(fun(X11,fun(X9,X13)),X16))),s(fun(X17,X11),X18))),s(X17,X19)))) )),
  inference(superposition,[],[f363,f340])).
fof(f37952,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s(fun(X0,X1),happ(s(fun(X8,fun(X0,X1)),'_dst_x00x00x11_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,happ(s(fun(X5,X2),X6),s(X5,X7))),s(fun(X8,fun(X0,X3)),X9))),s(X8,X10))) = s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,X2),X6),s(fun(X0,X3),happ(s(fun(X8,fun(X0,X3)),X9),s(X8,X10))))),s(X5,X7)))) )),
  inference(superposition,[],[f363,f362])).
fof(f37951,plain,(
  ( ! [X146,X144,X142,X149,X147,X145,X143,X141,X148] : (s(fun(X141,X146),'_dst_x0x0x1_3'(s(fun(X147,fun(X142,X146)),X148),s(X147,X149),s(fun(X141,X142),'const.ind_type.FCONS_3'(s(fun(X141,X142),X144),s(fun('type.num.num',fun(X141,X142)),X143),s('type.num.num',X145))))) = s(fun(X141,X146),happ(s(fun('type.num.num',fun(X141,X146)),'_dst_x00x00x11_3'(s(fun(X147,fun(X142,X146)),X148),s(X147,X149),s(fun('type.num.num',fun(X141,X142)),happ(s(fun(fun(X141,X142),fun('type.num.num',fun(X141,X142))),'_dst_x1x0_2'(s(fun(fun(X141,X142),fun(fun('type.num.num',fun(X141,X142)),fun('type.num.num',fun(X141,X142)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X141,X142)),X143))),s(fun(X141,X142),X144))))),s('type.num.num',X145)))) )),
  inference(superposition,[],[f363,f377])).
fof(f37950,plain,(
  ( ! [X127,X125,X123,X121,X130,X128,X126,X124,X122,X120,X131,X129,X119] : (s(fun(X119,X128),happ(s(fun(X121,fun(X119,X128)),'_dst_x00x00x11_3'(s(fun(X129,fun(X120,X128)),X130),s(X129,X131),s(fun(X121,fun(X119,X120)),'_dst_x0x0x1_3'(s(fun(X122,fun(X123,fun(X119,X120))),X124),s(X122,X125),s(fun(X121,X123),X126))))),s(X121,X127))) = s(fun(X119,X128),'_dst_x0x0x1_3'(s(fun(X129,fun(X120,X128)),X130),s(X129,X131),s(fun(X119,X120),happ(s(fun(X123,fun(X119,X120)),happ(s(fun(X122,fun(X123,fun(X119,X120))),X124),s(X122,X125))),s(X123,happ(s(fun(X121,X123),X126),s(X121,X127)))))))) )),
  inference(superposition,[],[f363,f359])).
fof(f37949,plain,(
  ( ! [X111,X109,X118,X116,X114,X112,X110,X108,X117,X115,X113] : (s(fun(X108,X115),'_dst_x0x0x1_3'(s(fun(X116,fun(X109,X115)),X117),s(X116,X118),s(fun(X108,X109),happ(s(fun(X111,fun(X108,X109)),happ(s(fun(X110,fun(X111,fun(X108,X109))),X112),s(X110,X114))),s(X111,X113))))) = s(fun(X108,X115),happ(s(fun(X110,fun(X108,X115)),'_dst_x00x00x11_3'(s(fun(X116,fun(X109,X115)),X117),s(X116,X118),s(fun(X110,fun(X108,X109)),'_dst_x1x0_2'(s(fun(X110,fun(X111,fun(X108,X109))),X112),s(X111,X113))))),s(X110,X114)))) )),
  inference(superposition,[],[f363,f341])).
fof(f37948,plain,(
  ( ! [X103,X101,X99,X107,X105,X102,X100,X106,X104] : (s(fun(X99,X104),'_dst_x0x0x1_3'(s(fun(X105,fun(X100,X104)),X106),s(X105,X107),s(fun(X99,X100),X102))) = s(fun(X99,X104),happ(s(fun(X101,fun(X99,X104)),'_dst_x00x00x11_3'(s(fun(X105,fun(X100,X104)),X106),s(X105,X107),s(fun(X101,fun(X99,X100)),'_dst_x0_1'(s(fun(X99,X100),X102))))),s(X101,X103)))) )),
  inference(superposition,[],[f363,f330])).
fof(f37947,plain,(
  ( ! [X94,X92,X90,X88,X97,X95,X93,X91,X89,X98,X96] : (s(fun(X88,X95),'_dst_x0x0x1_3'(s(fun(X96,fun(X89,X95)),X97),s(X96,X98),s(fun(X88,X89),happ(s(fun(X91,fun(X88,X89)),X92),s(X91,happ(s(fun(X90,X91),X93),s(X90,X94))))))) = s(fun(X88,X95),happ(s(fun(X90,fun(X88,X95)),'_dst_x00x00x11_3'(s(fun(X96,fun(X89,X95)),X97),s(X96,X98),s(fun(X90,fun(X88,X89)),'_dst_x0x1_2'(s(fun(X91,fun(X88,X89)),X92),s(fun(X90,X91),X93))))),s(X90,X94)))) )),
  inference(superposition,[],[f363,f340])).
fof(f37946,plain,(
  ( ! [X80,X78,X76,X87,X85,X83,X81,X79,X77,X75,X86,X84,X82] : (s(fun(X75,X84),'_dst_x0x0x1_3'(s(fun(X85,fun(X76,X84)),X86),s(X85,X87),s(fun(X75,X76),happ(s(fun(X81,fun(X75,X76)),'_dst_x0x0x1_3'(s(fun(X78,fun(X77,fun(X75,X76))),X79),s(X78,X80),s(fun(X81,X77),X82))),s(X81,X83))))) = s(fun(X75,X84),happ(s(fun(X77,fun(X75,X84)),'_dst_x00x00x11_3'(s(fun(X85,fun(X76,X84)),X86),s(X85,X87),s(fun(X77,fun(X75,X76)),happ(s(fun(X78,fun(X77,fun(X75,X76))),X79),s(X78,X80))))),s(X77,happ(s(fun(X81,X77),X82),s(X81,X83)))))) )),
  inference(superposition,[],[f363,f359])).
fof(f37945,plain,(
  ( ! [X70,X68,X66,X64,X74,X72,X71,X69,X67,X65,X73] : (s(fun(X64,X71),'_dst_x0x0x1_3'(s(fun(X72,fun(X65,X71)),X73),s(X72,X74),s(fun(X64,X65),happ(s(fun(X67,fun(X64,X65)),'_dst_x1x0_2'(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(X66,X70))),s(X67,X69))))) = s(fun(X64,X71),happ(s(fun(X66,fun(X64,X71)),'_dst_x00x00x11_3'(s(fun(X72,fun(X65,X71)),X73),s(X72,X74),s(fun(X66,fun(X64,X65)),happ(s(fun(X67,fun(X66,fun(X64,X65))),X68),s(X67,X69))))),s(X66,X70)))) )),
  inference(superposition,[],[f363,f341])).
fof(f37944,plain,(
  ( ! [X61,X59,X57,X54,X62,X60,X58,X56,X55,X53,X63] : (s(fun(X53,X60),happ(s(fun(X55,fun(X53,X60)),'_dst_x00x00x11_3'(s(fun(X61,fun(X54,X60)),X62),s(X61,X63),s(fun(X55,fun(X53,X54)),X56))),s(X55,happ(s(fun(X57,X55),X58),s(X57,X59))))) = s(fun(X53,X60),'_dst_x0x0x1_3'(s(fun(X61,fun(X54,X60)),X62),s(X61,X63),s(fun(X53,X54),happ(s(fun(X57,fun(X53,X54)),'_dst_x0x1_2'(s(fun(X55,fun(X53,X54)),X56),s(fun(X57,X55),X58))),s(X57,X59)))))) )),
  inference(superposition,[],[f363,f340])).
fof(f37943,plain,(
  ( ! [X39,X37,X35,X33,X45,X43,X41,X38,X36,X34,X44,X42,X40] : (s(fun(X33,X42),'_dst_x0x0x1_3'(s(fun(X43,fun(X34,X42)),X44),s(X43,X45),s(fun(X33,X34),'_dst_x0x0x1_3'(s(fun(X36,fun(X37,X34)),X38),s(X36,X39),s(fun(X33,X37),happ(s(fun(X35,fun(X33,X37)),X40),s(X35,X41))))))) = s(fun(X33,X42),happ(s(fun(X35,fun(X33,X42)),'_dst_x00x00x11_3'(s(fun(X43,fun(X34,X42)),X44),s(X43,X45),s(fun(X35,fun(X33,X34)),'_dst_x00x00x11_3'(s(fun(X36,fun(X37,X34)),X38),s(X36,X39),s(fun(X35,fun(X33,X37)),X40))))),s(X35,X41)))) )),
  inference(superposition,[],[f363,f363])).
fof(f37942,plain,(
  ( ! [X30,X28,X26,X24,X23,X21,X31,X29,X27,X25,X32,X22,X20] : (s(fun(X20,X29),'_dst_x0x0x1_3'(s(fun(X30,fun(X21,X29)),X31),s(X30,X32),s(fun(X20,X21),'_dst_x0x0x1_3'(s(fun(X23,fun(X24,X21)),X25),s(X23,happ(s(fun(X22,X23),X26),s(X22,X28))),s(fun(X20,X24),X27))))) = s(fun(X20,X29),happ(s(fun(X22,fun(X20,X29)),'_dst_x00x00x11_3'(s(fun(X30,fun(X21,X29)),X31),s(X30,X32),s(fun(X22,fun(X20,X21)),'_dst_x00x10x01_3'(s(fun(X23,fun(X24,X21)),X25),s(fun(X22,X23),X26),s(fun(X20,X24),X27))))),s(X22,X28)))) )),
  inference(superposition,[],[f363,f362])).
fof(f37941,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X16),'_dst_x0x0x1_3'(s(fun(X17,fun(X10,X16)),X18),s(X17,X19),s(fun(X9,X10),'_dst_x0x1_2'(s(fun(X12,X10),X13),s(fun(X9,X12),happ(s(fun(X11,fun(X9,X12)),X14),s(X11,X15))))))) = s(fun(X9,X16),happ(s(fun(X11,fun(X9,X16)),'_dst_x00x00x11_3'(s(fun(X17,fun(X10,X16)),X18),s(X17,X19),s(fun(X11,fun(X9,X10)),'_dst_x00x11_2'(s(fun(X12,X10),X13),s(fun(X11,fun(X9,X12)),X14))))),s(X11,X15)))) )),
  inference(superposition,[],[f363,f358])).
fof(f37940,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(fun(X0,X1),X5),'_dst_x0x0x1_3'(s(fun(X6,fun(X1,X5)),X7),s(X6,X8),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x00x11_3'(s(fun(X6,fun(X1,X5)),X7),s(X6,X8),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4)))) )),
  inference(superposition,[],[f363,f339])).
fof(f37939,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,X5),s(fun(X0,X3),happ(s(fun(X6,fun(X0,X3)),X7),s(X6,X8))))))) = s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),happ(s(fun(X6,fun(X0,X1)),'_dst_x00x00x11_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,X5),s(fun(X6,fun(X0,X3)),X7))),s(X6,X8)))))) )),
  inference(unit_resulting_resolution,[],[f363,f303])).
fof(f37847,plain,(
  ( ! [X130,X129] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X130))) | s(bool,X130) = s(bool,'|dollar|exists_1'(s(fun(X129,bool),sK9('?_1',fun(X129,bool)))))) )),
  inference(superposition,[],[f302,f36815])).
fof(f37919,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(X46,bool),sK9('?_1',fun(X46,bool))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f37792,f246])).
fof(f37792,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(X46,bool),sK9('?_1',fun(X46,bool))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f399,f36815])).
fof(f37588,plain,(
  ( ! [X466,X461,X463,X459,X465,X467,X460,X462,X458,X464] : (s(fun(X458,X459),X467) != s(fun(X458,X459),'_dst_x0x0x1_3'(s(fun(X461,fun(X462,X459)),X463),s(X461,happ(s(fun(X460,X461),X464),s(X460,X466))),s(fun(X458,X462),X465))) | s('type.benchmark.times'(fun(X458,X459)),'const.benchmark.Once_1'(s(fun(X458,X459),X467))) = s('type.benchmark.times'(fun(X458,X459)),'const.benchmark.Once_1'(s(fun(X458,X459),happ(s(fun(X460,fun(X458,X459)),'_dst_x00x10x01_3'(s(fun(X461,fun(X462,X459)),X463),s(fun(X460,X461),X464),s(fun(X458,X462),X465))),s(X460,X466)))))) )),
  inference(superposition,[],[f303,f362])).
fof(f37586,plain,(
  ( ! [X445,X447,X441,X443,X438,X444,X446,X440,X442,X439] : (s('type.benchmark.times'(fun(X438,X439)),'const.benchmark.Once_1'(s(fun(X438,X439),X447))) != s('type.benchmark.times'(fun(X438,X439)),'const.benchmark.Once_1'(s(fun(X438,X439),'_dst_x0x0x1_3'(s(fun(X441,fun(X442,X439)),X443),s(X441,happ(s(fun(X440,X441),X444),s(X440,X446))),s(fun(X438,X442),X445))))) | s(fun(X438,X439),X447) = s(fun(X438,X439),happ(s(fun(X440,fun(X438,X439)),'_dst_x00x10x01_3'(s(fun(X441,fun(X442,X439)),X443),s(fun(X440,X441),X444),s(fun(X438,X442),X445))),s(X440,X446)))) )),
  inference(superposition,[],[f302,f362])).
fof(f37578,plain,(
  ( ! [X358,X364,X366,X360,X362,X368,X359,X365,X367,X361,X363] : (s(X367,happ(s(fun(fun(X358,X359),X367),X368),s(fun(X358,X359),'_dst_x0x0x1_3'(s(fun(X361,fun(X362,X359)),X363),s(X361,happ(s(fun(X360,X361),X364),s(X360,X366))),s(fun(X358,X362),X365))))) = s(X367,happ(s(fun(X360,X367),'_dst_x0x1_2'(s(fun(fun(X358,X359),X367),X368),s(fun(X360,fun(X358,X359)),'_dst_x00x10x01_3'(s(fun(X361,fun(X362,X359)),X363),s(fun(X360,X361),X364),s(fun(X358,X362),X365))))),s(X360,X366)))) )),
  inference(superposition,[],[f340,f362])).
fof(f37577,plain,(
  ( ! [X350,X346,X356,X352,X354,X349,X351,X345,X347,X357,X353,X355,X348] : (s(X354,happ(s(fun(X347,X354),'_dst_x0x0x1_3'(s(fun(X355,fun(fun(X345,X346),X354)),X356),s(X355,X357),s(fun(X347,fun(X345,X346)),'_dst_x00x10x01_3'(s(fun(X348,fun(X349,X346)),X350),s(fun(X347,X348),X351),s(fun(X345,X349),X352))))),s(X347,X353))) = s(X354,happ(s(fun(fun(X345,X346),X354),happ(s(fun(X355,fun(fun(X345,X346),X354)),X356),s(X355,X357))),s(fun(X345,X346),'_dst_x0x0x1_3'(s(fun(X348,fun(X349,X346)),X350),s(X348,happ(s(fun(X347,X348),X351),s(X347,X353))),s(fun(X345,X349),X352)))))) )),
  inference(superposition,[],[f359,f362])).
fof(f37567,plain,(
  ( ! [X243,X241,X239,X237,X244,X242,X240,X238,X236] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X236,bool),'_dst_x0x0x1_3'(s(fun(X238,fun(X239,bool)),X240),s(X238,happ(s(fun(X237,X238),X241),s(X237,X243))),s(fun(X236,X239),X242))))) | s(X236,X244) = s(X236,sK4(X244,happ(s(fun(X237,fun(X236,bool)),'_dst_x00x10x01_3'(s(fun(X238,fun(X239,bool)),X240),s(fun(X237,X238),X241),s(fun(X236,X239),X242))),s(X237,X243)),X236))) )),
  inference(superposition,[],[f562,f362])).
fof(f37549,plain,(
  ( ! [X61,X59,X57,X54,X52,X60,X58,X56,X55,X53] : (s(X53,happ(s(fun(X52,X53),'_dst_x0x0x1_3'(s(fun(X55,fun(X56,X53)),X57),s(X55,happ(s(fun(X54,X55),X58),s(X54,X60))),s(fun(X52,X56),X59))),s(X52,X61))) = s(X53,happ(s(fun(X54,X53),'_dst_x1x0_2'(s(fun(X54,fun(X52,X53)),'_dst_x00x10x01_3'(s(fun(X55,fun(X56,X53)),X57),s(fun(X54,X55),X58),s(fun(X52,X56),X59))),s(X52,X61))),s(X54,X60)))) )),
  inference(superposition,[],[f341,f362])).
fof(f37548,plain,(
  ( ! [X47,X45,X43,X41,X50,X48,X46,X44,X42,X51,X49] : (s(fun(X41,X50),'_dst_x0x1_2'(s(fun(X42,X50),X51),s(fun(X41,X42),'_dst_x0x0x1_3'(s(fun(X44,fun(X45,X42)),X46),s(X44,happ(s(fun(X43,X44),X47),s(X43,X49))),s(fun(X41,X45),X48))))) = s(fun(X41,X50),happ(s(fun(X43,fun(X41,X50)),'_dst_x00x11_2'(s(fun(X42,X50),X51),s(fun(X43,fun(X41,X42)),'_dst_x00x10x01_3'(s(fun(X44,fun(X45,X42)),X46),s(fun(X43,X44),X47),s(fun(X41,X45),X48))))),s(X43,X49)))) )),
  inference(superposition,[],[f358,f362])).
fof(f37547,plain,(
  ( ! [X30,X39,X37,X35,X33,X31,X29,X38,X36,X34,X32,X40] : (s(X30,happ(s(fun(X29,X30),'_dst_x0x0x1_3'(s(fun(X32,fun(X33,X30)),X34),s(X32,happ(s(fun(X31,X32),X35),s(X31,X37))),s(fun(X29,X33),X36))),s(X29,happ(s(fun(X38,X29),X39),s(X38,X40))))) = s(X30,happ(s(fun(X38,X30),'_dst_x0x0x1_3'(s(fun(X31,fun(X29,X30)),'_dst_x00x10x01_3'(s(fun(X32,fun(X33,X30)),X34),s(fun(X31,X32),X35),s(fun(X29,X33),X36))),s(X31,X37),s(fun(X38,X29),X39))),s(X38,X40)))) )),
  inference(superposition,[],[f359,f362])).
fof(f37519,plain,(
  ( ! [X408,X405,X407,X401,X403,X409,X404,X406,X400,X402] : (s(fun(X400,X401),X409) != s(fun(X400,X401),happ(s(fun(X405,fun(X400,X401)),'_dst_x00x10x01_3'(s(fun(X402,fun(X403,X401)),X404),s(fun(X405,X402),X406),s(fun(X400,X403),X408))),s(X405,X407))) | s('type.benchmark.times'(fun(X400,X401)),'const.benchmark.Once_1'(s(fun(X400,X401),X409))) = s('type.benchmark.times'(fun(X400,X401)),'const.benchmark.Once_1'(s(fun(X400,X401),'_dst_x0x0x1_3'(s(fun(X402,fun(X403,X401)),X404),s(X402,happ(s(fun(X405,X402),X406),s(X405,X407))),s(fun(X400,X403),X408)))))) )),
  inference(superposition,[],[f303,f362])).
fof(f37517,plain,(
  ( ! [X383,X389,X385,X387,X380,X382,X388,X384,X386,X381] : (s('type.benchmark.times'(fun(X380,X381)),'const.benchmark.Once_1'(s(fun(X380,X381),X389))) != s('type.benchmark.times'(fun(X380,X381)),'const.benchmark.Once_1'(s(fun(X380,X381),happ(s(fun(X385,fun(X380,X381)),'_dst_x00x10x01_3'(s(fun(X382,fun(X383,X381)),X384),s(fun(X385,X382),X386),s(fun(X380,X383),X388))),s(X385,X387))))) | s(fun(X380,X381),X389) = s(fun(X380,X381),'_dst_x0x0x1_3'(s(fun(X382,fun(X383,X381)),X384),s(X382,happ(s(fun(X385,X382),X386),s(X385,X387))),s(fun(X380,X383),X388)))) )),
  inference(superposition,[],[f302,f362])).
fof(f37501,plain,(
  ( ! [X218,X216,X220,X215,X213,X219,X217,X221,X214] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X213,bool),happ(s(fun(X217,fun(X213,bool)),'_dst_x00x10x01_3'(s(fun(X214,fun(X215,bool)),X216),s(fun(X217,X214),X218),s(fun(X213,X215),X220))),s(X217,X219))))) | s(X213,X221) = s(X213,sK4(X221,'_dst_x0x0x1_3'(s(fun(X214,fun(X215,bool)),X216),s(X214,happ(s(fun(X217,X214),X218),s(X217,X219))),s(fun(X213,X215),X220)),X213))) )),
  inference(superposition,[],[f562,f362])).
fof(f37483,plain,(
  ( ! [X30,X37,X35,X33,X31,X29,X38,X36,X34,X32] : (s(X30,happ(s(fun(X32,X30),happ(s(fun(X31,fun(X32,X30)),X33),s(X31,happ(s(fun(X34,X31),X35),s(X34,X36))))),s(X32,happ(s(fun(X29,X32),X37),s(X29,X38))))) = s(X30,happ(s(fun(X29,X30),happ(s(fun(X34,fun(X29,X30)),'_dst_x00x10x01_3'(s(fun(X31,fun(X32,X30)),X33),s(fun(X34,X31),X35),s(fun(X29,X32),X37))),s(X34,X36))),s(X29,X38)))) )),
  inference(superposition,[],[f359,f362])).
fof(f37479,plain,(
  ( ! [X14,X12,X10,X19,X17,X15,X13,X11,X9,X18,X16] : (s(fun(X9,X10),'_dst_x0x0x1_3'(s(fun(X12,fun(X13,X10)),X14),s(X12,happ(s(fun(X11,X12),X15),s(X11,happ(s(fun(X17,X11),X18),s(X17,X19))))),s(fun(X9,X13),X16))) = s(fun(X9,X10),happ(s(fun(X17,fun(X9,X10)),'_dst_x0x1_2'(s(fun(X11,fun(X9,X10)),'_dst_x00x10x01_3'(s(fun(X12,fun(X13,X10)),X14),s(fun(X11,X12),X15),s(fun(X9,X13),X16))),s(fun(X17,X11),X18))),s(X17,X19)))) )),
  inference(superposition,[],[f362,f340])).
fof(f37325,plain,(
  ( ! [X350,X344,X346,X352,X354,X343,X349,X351,X345,X347,X353,X355,X342,X348] : (s(fun(X351,X352),'_dst_x0x0x1_3'(s(fun(fun(X342,X343),fun(X353,X352)),X354),s(fun(X342,X343),'_dst_x0x0x1_3'(s(fun(X345,fun(X346,X343)),X347),s(X345,happ(s(fun(X344,X345),X348),s(X344,X350))),s(fun(X342,X346),X349))),s(fun(X351,X353),X355))) = s(fun(X351,X352),happ(s(fun(X344,fun(X351,X352)),'_dst_x00x10x01_3'(s(fun(fun(X342,X343),fun(X353,X352)),X354),s(fun(X344,fun(X342,X343)),'_dst_x00x10x01_3'(s(fun(X345,fun(X346,X343)),X347),s(fun(X344,X345),X348),s(fun(X342,X346),X349))),s(fun(X351,X353),X355))),s(X344,X350)))) )),
  inference(superposition,[],[f362,f362])).
fof(f37324,plain,(
  ( ! [X333,X335,X331,X341,X337,X339,X332,X334,X330,X340,X336,X338] : (s(fun(X337,X338),'_dst_x0x0x1_3'(s(fun(fun(X330,X331),fun(X339,X338)),X340),s(fun(X330,X331),'_dst_x0x1_2'(s(fun(X333,X331),X334),s(fun(X330,X333),happ(s(fun(X332,fun(X330,X333)),X335),s(X332,X336))))),s(fun(X337,X339),X341))) = s(fun(X337,X338),happ(s(fun(X332,fun(X337,X338)),'_dst_x00x10x01_3'(s(fun(fun(X330,X331),fun(X339,X338)),X340),s(fun(X332,fun(X330,X331)),'_dst_x00x11_2'(s(fun(X333,X331),X334),s(fun(X332,fun(X330,X333)),X335))),s(fun(X337,X339),X341))),s(X332,X336)))) )),
  inference(superposition,[],[f362,f358])).
fof(f37323,plain,(
  ( ! [X325,X327,X321,X323,X329,X324,X326,X320,X322,X328] : (s(fun(X325,X326),'_dst_x0x0x1_3'(s(fun(fun(fun(X320,X321),X321),fun(X327,X326)),X328),s(fun(fun(X320,X321),X321),'_dstsel_0_x0_1'(s(X320,happ(s(fun(X322,X320),X323),s(X322,X324))))),s(fun(X325,X327),X329))) = s(fun(X325,X326),happ(s(fun(X322,fun(X325,X326)),'_dst_x00x10x01_3'(s(fun(fun(fun(X320,X321),X321),fun(X327,X326)),X328),s(fun(X322,fun(fun(X320,X321),X321)),'_dstsel_1_x10_1'(s(fun(X322,X320),X323))),s(fun(X325,X327),X329))),s(X322,X324)))) )),
  inference(superposition,[],[f362,f339])).
fof(f37322,plain,(
  ( ! [X103,X101,X99,X97,X95,X102,X100,X98,X96] : (s(fun(X99,X100),'_dst_x0x0x1_3'(s(fun(X95,fun(X101,X100)),X102),s(X95,'const.ind_type.FCONS_3'(s(X95,X97),s(fun('type.num.num',X95),X96),s('type.num.num',X98))),s(fun(X99,X101),X103))) = s(fun(X99,X100),happ(s(fun('type.num.num',fun(X99,X100)),'_dst_x00x10x01_3'(s(fun(X95,fun(X101,X100)),X102),s(fun('type.num.num',X95),happ(s(fun(X95,fun('type.num.num',X95)),'_dst_x1x0_2'(s(fun(X95,fun(fun('type.num.num',X95),fun('type.num.num',X95))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X95),X96))),s(X95,X97))),s(fun(X99,X101),X103))),s('type.num.num',X98)))) )),
  inference(superposition,[],[f362,f377])).
fof(f37321,plain,(
  ( ! [X80,X78,X76,X74,X85,X83,X81,X79,X77,X75,X73,X84,X82] : (s(fun(X81,X82),'_dst_x0x0x1_3'(s(fun(X73,fun(X83,X82)),X84),s(X73,happ(s(fun(X76,X73),happ(s(fun(X75,fun(X76,X73)),X77),s(X75,X78))),s(X76,happ(s(fun(X74,X76),X79),s(X74,X80))))),s(fun(X81,X83),X85))) = s(fun(X81,X82),happ(s(fun(X74,fun(X81,X82)),'_dst_x00x10x01_3'(s(fun(X73,fun(X83,X82)),X84),s(fun(X74,X73),'_dst_x0x0x1_3'(s(fun(X75,fun(X76,X73)),X77),s(X75,X78),s(fun(X74,X76),X79))),s(fun(X81,X83),X85))),s(X74,X80)))) )),
  inference(superposition,[],[f362,f359])).
fof(f37320,plain,(
  ( ! [X70,X68,X66,X64,X72,X62,X71,X69,X67,X65,X63] : (s(fun(X68,X69),'_dst_x0x0x1_3'(s(fun(X62,fun(X70,X69)),X71),s(X62,happ(s(fun(X64,X62),happ(s(fun(X63,fun(X64,X62)),X65),s(X63,X67))),s(X64,X66))),s(fun(X68,X70),X72))) = s(fun(X68,X69),happ(s(fun(X63,fun(X68,X69)),'_dst_x00x10x01_3'(s(fun(X62,fun(X70,X69)),X71),s(fun(X63,X62),'_dst_x1x0_2'(s(fun(X63,fun(X64,X62)),X65),s(X64,X66))),s(fun(X68,X70),X72))),s(X63,X67)))) )),
  inference(superposition,[],[f362,f341])).
fof(f37319,plain,(
  ( ! [X61,X59,X57,X54,X60,X58,X56,X55,X53] : (s(fun(X57,X58),'_dst_x0x0x1_3'(s(fun(X53,fun(X59,X58)),X60),s(X53,X55),s(fun(X57,X59),X61))) = s(fun(X57,X58),happ(s(fun(X54,fun(X57,X58)),'_dst_x00x10x01_3'(s(fun(X53,fun(X59,X58)),X60),s(fun(X54,X53),'_dst_x0_1'(s(X53,X55))),s(fun(X57,X59),X61))),s(X54,X56)))) )),
  inference(superposition,[],[f362,f330])).
fof(f37318,plain,(
  ( ! [X47,X45,X43,X52,X50,X48,X46,X44,X42,X51,X49] : (s(fun(X48,X49),'_dst_x0x0x1_3'(s(fun(X42,fun(X50,X49)),X51),s(X42,happ(s(fun(X44,X42),X45),s(X44,happ(s(fun(X43,X44),X46),s(X43,X47))))),s(fun(X48,X50),X52))) = s(fun(X48,X49),happ(s(fun(X43,fun(X48,X49)),'_dst_x00x10x01_3'(s(fun(X42,fun(X50,X49)),X51),s(fun(X43,X42),'_dst_x0x1_2'(s(fun(X44,X42),X45),s(fun(X43,X44),X46))),s(fun(X48,X50),X52))),s(X43,X47)))) )),
  inference(superposition,[],[f362,f340])).
fof(f37317,plain,(
  ( ! [X30,X39,X37,X35,X33,X41,X31,X29,X38,X36,X34,X32,X40] : (s(fun(X37,X38),'_dst_x0x0x1_3'(s(fun(X29,fun(X39,X38)),X40),s(X29,happ(s(fun(X34,X29),'_dst_x0x0x1_3'(s(fun(X31,fun(X30,X29)),X32),s(X31,X33),s(fun(X34,X30),X35))),s(X34,X36))),s(fun(X37,X39),X41))) = s(fun(X37,X38),happ(s(fun(X30,fun(X37,X38)),'_dst_x00x10x01_3'(s(fun(X29,fun(X39,X38)),X40),s(fun(X30,X29),happ(s(fun(X31,fun(X30,X29)),X32),s(X31,X33))),s(fun(X37,X39),X41))),s(X30,happ(s(fun(X34,X30),X35),s(X34,X36)))))) )),
  inference(superposition,[],[f362,f359])).
fof(f37316,plain,(
  ( ! [X28,X26,X24,X23,X21,X19,X27,X25,X22,X20,X18] : (s(fun(X24,X25),'_dst_x0x0x1_3'(s(fun(X18,fun(X26,X25)),X27),s(X18,happ(s(fun(X20,X18),'_dst_x1x0_2'(s(fun(X20,fun(X19,X18)),X21),s(X19,X23))),s(X20,X22))),s(fun(X24,X26),X28))) = s(fun(X24,X25),happ(s(fun(X19,fun(X24,X25)),'_dst_x00x10x01_3'(s(fun(X18,fun(X26,X25)),X27),s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),X21),s(X20,X22))),s(fun(X24,X26),X28))),s(X19,X23)))) )),
  inference(superposition,[],[f362,f341])).
fof(f37315,plain,(
  ( ! [X14,X12,X10,X8,X17,X7,X15,X13,X11,X9,X16] : (s(fun(X13,X14),'_dst_x0x0x1_3'(s(fun(X7,fun(X15,X14)),X16),s(X7,happ(s(fun(X10,X7),'_dst_x0x1_2'(s(fun(X8,X7),X9),s(fun(X10,X8),X11))),s(X10,X12))),s(fun(X13,X15),X17))) = s(fun(X13,X14),happ(s(fun(X8,fun(X13,X14)),'_dst_x00x10x01_3'(s(fun(X7,fun(X15,X14)),X16),s(fun(X8,X7),X9),s(fun(X13,X15),X17))),s(X8,happ(s(fun(X10,X8),X11),s(X10,X12)))))) )),
  inference(superposition,[],[f362,f340])).
fof(f37314,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X1)),X4),s(X2,happ(s(fun(X5,X2),X6),s(X5,X7))),s(fun(X0,X3),X8))))) = s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),'_dst_x00x10x01_3'(s(fun(X2,fun(X3,X1)),X4),s(fun(X5,X2),X6),s(fun(X0,X3),X8))),s(X5,X7)))))) )),
  inference(unit_resulting_resolution,[],[f362,f303])).
fof(f36966,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X53))) != s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X49,'type.num.num'),X50),s('type.benchmark.times'(X49),'const.benchmark.Twice_2'(s('type.benchmark.times'(X49),X51),s('type.benchmark.times'(X49),X52))))))) | s('type.num.num',X53) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X49,'type.num.num'),X50),s('type.benchmark.times'(X49),X51))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X49,'type.num.num'),X50),s('type.benchmark.times'(X49),X52)))))))) )),
  inference(superposition,[],[f302,f307])).
fof(f37000,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3))),s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))))))))) )),
  inference(forward_demodulation,[],[f36956,f17542])).
fof(f36956,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))))))) )),
  inference(superposition,[],[f307,f296])).
fof(f36999,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))),s('type.benchmark.times'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3)))))))) )),
  inference(forward_demodulation,[],[f36919,f17542])).
fof(f36919,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))),s('type.benchmark.times'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3)))))))) )),
  inference(superposition,[],[f307,f296])).
fof(f36815,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK9('?_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f381,f36646,f1150])).
fof(f36816,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK9('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f36646,f1169])).
fof(f36817,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),sK9('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f36646,f4018])).
fof(f36646,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),sK9('?_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f34030,f3449])).
fof(f36667,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),sK9('?_1',fun('type.num.num',bool))),s('type.num.num','const.num.SUC_1'(s('type.num.num',sK9(sK9('?_1',fun('type.num.num',bool)),'type.num.num'))))))) )),
  inference(unit_resulting_resolution,[],[f304,f34030,f399])).
fof(f36668,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'_dstsel_0_x0_1'(s(X0,sK9(sK9('?_1',fun(X0,bool)),X0)))),s(fun(X0,bool),sK9('?_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f333,f34030,f399])).
fof(f36669,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,sK9(sK9('?_1',fun(X0,bool)),X0)))),s(fun(X0,bool),sK9('?_1',fun(X0,bool))),s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f34030,f399])).
fof(f36673,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),sK9('?_1',fun(X0,bool))),s(X0,sK9(sK9('?_1',fun(X0,bool)),X0))))) )),
  inference(unit_resulting_resolution,[],[f381,f34030,f1150])).
fof(f36674,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK9('?_1',fun(X1,bool))),s(X1,sK9(sK9('?_1',fun(X1,bool)),X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f34030,f1169])).
fof(f36675,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),sK9('?_1',fun(X1,bool))),s(X1,sK9(sK9('?_1',fun(X1,bool)),X1)))))))))) )),
  inference(unit_resulting_resolution,[],[f34030,f4018])).
fof(f36411,plain,(
  ( ! [X1533,X1535,X1538,X1536,X1539,X1534,X1537] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X1533,'type.num.num'),happ(s(fun(X1534,fun(X1533,'type.num.num')),X1535),s(X1534,X1536))),s('type.benchmark.times'(X1533),'const.benchmark.Once_1'(s(X1533,happ(s(fun(X1537,X1533),X1538),s(X1537,X1539))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X1537,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1534,fun(X1533,'type.num.num')),X1535),s(X1534,X1536),s(fun(X1537,X1533),X1538))),s(X1537,X1539)))))) )),
  inference(superposition,[],[f296,f359])).
fof(f36407,plain,(
  ( ! [X1488,X1490,X1492,X1494,X1497,X1489,X1491,X1493,X1495,X1487,X1496] : (s('type.benchmark.times'(X1487),X1495) != s('type.benchmark.times'(X1487),happ(s(fun(X1492,'type.benchmark.times'(X1487)),'_dst_x0x0x1_3'(s(fun(X1489,fun(X1488,'type.benchmark.times'(X1487))),X1490),s(X1489,X1491),s(fun(X1492,X1488),X1493))),s(X1492,X1494))) | s('type.benchmark.times'(X1487),X1496) != s('type.benchmark.times'(X1487),X1497) | s('type.benchmark.times'(X1487),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1487),X1495),s('type.benchmark.times'(X1487),X1497))) = s('type.benchmark.times'(X1487),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1487),happ(s(fun(X1488,'type.benchmark.times'(X1487)),happ(s(fun(X1489,fun(X1488,'type.benchmark.times'(X1487))),X1490),s(X1489,X1491))),s(X1488,happ(s(fun(X1492,X1488),X1493),s(X1492,X1494))))),s('type.benchmark.times'(X1487),X1496)))) )),
  inference(superposition,[],[f310,f359])).
fof(f36403,plain,(
  ( ! [X1449,X1451,X1453,X1443,X1445,X1447,X1448,X1450,X1452,X1444,X1446] : (s('type.benchmark.times'(X1443),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1443),X1452),s('type.benchmark.times'(X1443),X1453))) != s('type.benchmark.times'(X1443),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1443),X1451),s('type.benchmark.times'(X1443),happ(s(fun(X1448,'type.benchmark.times'(X1443)),'_dst_x0x0x1_3'(s(fun(X1445,fun(X1444,'type.benchmark.times'(X1443))),X1446),s(X1445,X1447),s(fun(X1448,X1444),X1449))),s(X1448,X1450))))) | s('type.benchmark.times'(X1443),X1453) = s('type.benchmark.times'(X1443),happ(s(fun(X1444,'type.benchmark.times'(X1443)),happ(s(fun(X1445,fun(X1444,'type.benchmark.times'(X1443))),X1446),s(X1445,X1447))),s(X1444,happ(s(fun(X1448,X1444),X1449),s(X1448,X1450)))))) )),
  inference(superposition,[],[f309,f359])).
fof(f36400,plain,(
  ( ! [X1416,X1418,X1420,X1410,X1412,X1414,X1417,X1419,X1411,X1413,X1415] : (s('type.benchmark.times'(X1410),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1410),X1419),s('type.benchmark.times'(X1410),X1420))) != s('type.benchmark.times'(X1410),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1410),happ(s(fun(X1415,'type.benchmark.times'(X1410)),'_dst_x0x0x1_3'(s(fun(X1412,fun(X1411,'type.benchmark.times'(X1410))),X1413),s(X1412,X1414),s(fun(X1415,X1411),X1416))),s(X1415,X1417))),s('type.benchmark.times'(X1410),X1418))) | s('type.benchmark.times'(X1410),X1419) = s('type.benchmark.times'(X1410),happ(s(fun(X1411,'type.benchmark.times'(X1410)),happ(s(fun(X1412,fun(X1411,'type.benchmark.times'(X1410))),X1413),s(X1412,X1414))),s(X1411,happ(s(fun(X1415,X1411),X1416),s(X1415,X1417)))))) )),
  inference(superposition,[],[f308,f359])).
fof(f36394,plain,(
  ( ! [X1360,X1362,X1364,X1366,X1358,X1361,X1363,X1365,X1359] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1365),s('type.benchmark.times'(sK0),happ(s(fun(X1362,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1359,fun(X1358,'type.benchmark.times'(sK0))),X1360),s(X1359,X1361),s(fun(X1362,X1358),X1363))),s(X1362,X1364))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X1358,'type.benchmark.times'(sK0)),happ(s(fun(X1359,fun(X1358,'type.benchmark.times'(sK0))),X1360),s(X1359,X1361))),s(X1358,happ(s(fun(X1362,X1358),X1363),s(X1362,X1364))))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1366),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f359])).
fof(f36392,plain,(
  ( ! [X1341,X1343,X1344,X1346,X1338,X1340,X1342,X1345,X1347,X1339] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1345),s('type.benchmark.times'(sK0),happ(s(fun(X1342,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1339,fun(X1338,'type.benchmark.times'(sK0))),X1340),s(X1339,X1341),s(fun(X1342,X1338),X1343))),s(X1342,X1344))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1346,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X1338,'type.benchmark.times'(sK0)),happ(s(fun(X1339,fun(X1338,'type.benchmark.times'(sK0))),X1340),s(X1339,X1341))),s(X1338,happ(s(fun(X1342,X1338),X1343),s(X1342,X1344))))))),s(X1346,X1347)))) )),
  inference(superposition,[],[f17121,f359])).
fof(f36390,plain,(
  ( ! [X1329,X1323,X1325,X1327,X1328,X1322,X1324,X1326] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1329),s('type.benchmark.times'(sK0),happ(s(fun(X1326,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1323,fun(X1322,'type.benchmark.times'(sK0))),X1324),s(X1323,X1325),s(fun(X1326,X1322),X1327))),s(X1326,X1328))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X1322,'type.benchmark.times'(sK0)),happ(s(fun(X1323,fun(X1322,'type.benchmark.times'(sK0))),X1324),s(X1323,X1325))),s(X1322,happ(s(fun(X1326,X1322),X1327),s(X1326,X1328)))))))) )),
  inference(superposition,[],[f17120,f359])).
fof(f36389,plain,(
  ( ! [X1321,X1315,X1317,X1319,X1320,X1314,X1316,X1318] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1321),s('type.benchmark.times'(sK0),happ(s(fun(X1318,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1315,fun(X1314,'type.benchmark.times'(sK0))),X1316),s(X1315,X1317),s(fun(X1318,X1314),X1319))),s(X1318,X1320))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1314,'type.benchmark.times'(sK0)),happ(s(fun(X1315,fun(X1314,'type.benchmark.times'(sK0))),X1316),s(X1315,X1317))),s(X1314,happ(s(fun(X1318,X1314),X1319),s(X1318,X1320)))))) )),
  inference(superposition,[],[f17086,f359])).
fof(f36386,plain,(
  ( ! [X1296,X1288,X1290,X1292,X1294,X1289,X1291,X1293,X1295] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1292,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1289,fun(X1288,'type.benchmark.times'(sK0))),X1290),s(X1289,X1291),s(fun(X1292,X1288),X1293))),s(X1292,X1294))),s('type.benchmark.times'(sK0),X1295))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X1288,'type.benchmark.times'(sK0)),happ(s(fun(X1289,fun(X1288,'type.benchmark.times'(sK0))),X1290),s(X1289,X1291))),s(X1288,happ(s(fun(X1292,X1288),X1293),s(X1292,X1294))))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1296),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f359])).
fof(f36384,plain,(
  ( ! [X1275,X1273,X1277,X1271,X1269,X1274,X1272,X1276,X1270,X1268] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1272,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1269,fun(X1268,'type.benchmark.times'(sK0))),X1270),s(X1269,X1271),s(fun(X1272,X1268),X1273))),s(X1272,X1274))),s('type.benchmark.times'(sK0),X1275))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1276,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X1268,'type.benchmark.times'(sK0)),happ(s(fun(X1269,fun(X1268,'type.benchmark.times'(sK0))),X1270),s(X1269,X1271))),s(X1268,happ(s(fun(X1272,X1268),X1273),s(X1272,X1274))))))),s(X1276,X1277)))) )),
  inference(superposition,[],[f17026,f359])).
fof(f36382,plain,(
  ( ! [X1258,X1256,X1254,X1252,X1259,X1257,X1255,X1253] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1256,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1253,fun(X1252,'type.benchmark.times'(sK0))),X1254),s(X1253,X1255),s(fun(X1256,X1252),X1257))),s(X1256,X1258))),s('type.benchmark.times'(sK0),X1259))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X1252,'type.benchmark.times'(sK0)),happ(s(fun(X1253,fun(X1252,'type.benchmark.times'(sK0))),X1254),s(X1253,X1255))),s(X1252,happ(s(fun(X1256,X1252),X1257),s(X1256,X1258)))))))) )),
  inference(superposition,[],[f17025,f359])).
fof(f36380,plain,(
  ( ! [X1242,X1240,X1238,X1236,X1243,X1241,X1239,X1237] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1240,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1237,fun(X1236,'type.benchmark.times'(sK0))),X1238),s(X1237,X1239),s(fun(X1240,X1236),X1241))),s(X1240,X1242))),s('type.benchmark.times'(sK0),X1243))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1236,'type.benchmark.times'(sK0)),happ(s(fun(X1237,fun(X1236,'type.benchmark.times'(sK0))),X1238),s(X1237,X1239))),s(X1236,happ(s(fun(X1240,X1236),X1241),s(X1240,X1242)))))) )),
  inference(superposition,[],[f16999,f359])).
fof(f36372,plain,(
  ( ! [X1151,X1155,X1153,X1159,X1157,X1154,X1152,X1158,X1156] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1151,bool),happ(s(fun(X1156,fun(X1151,bool)),'_dst_x0x0x1_3'(s(fun(X1153,fun(X1152,fun(X1151,bool))),X1154),s(X1153,X1155),s(fun(X1156,X1152),X1157))),s(X1156,X1158))))) | s(X1151,X1159) = s(X1151,sK4(X1159,happ(s(fun(X1152,fun(X1151,bool)),happ(s(fun(X1153,fun(X1152,fun(X1151,bool))),X1154),s(X1153,X1155))),s(X1152,happ(s(fun(X1156,X1152),X1157),s(X1156,X1158)))),X1151))) )),
  inference(superposition,[],[f562,f359])).
fof(f36355,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X981,X986] : (s(X982,happ(s(fun(X981,X982),happ(s(fun(X987,fun(X981,X982)),'_dst_x0x0x1_3'(s(fun(X984,fun(X983,fun(X981,X982))),X985),s(X984,X986),s(fun(X987,X983),X988))),s(X987,X989))),s(X981,X990))) = s(X982,happ(s(fun(X983,X982),'_dst_x1x0_2'(s(fun(X983,fun(X981,X982)),happ(s(fun(X984,fun(X983,fun(X981,X982))),X985),s(X984,X986))),s(X981,X990))),s(X983,happ(s(fun(X987,X983),X988),s(X987,X989)))))) )),
  inference(superposition,[],[f341,f359])).
fof(f36354,plain,(
  ( ! [X978,X976,X980,X971,X975,X973,X979,X977,X970,X974,X972] : (s(fun(X970,X979),'_dst_x0x1_2'(s(fun(X971,X979),X980),s(fun(X970,X971),happ(s(fun(X976,fun(X970,X971)),'_dst_x0x0x1_3'(s(fun(X973,fun(X972,fun(X970,X971))),X974),s(X973,X975),s(fun(X976,X972),X977))),s(X976,X978))))) = s(fun(X970,X979),happ(s(fun(X972,fun(X970,X979)),'_dst_x00x11_2'(s(fun(X971,X979),X980),s(fun(X972,fun(X970,X971)),happ(s(fun(X973,fun(X972,fun(X970,X971))),X974),s(X973,X975))))),s(X972,happ(s(fun(X976,X972),X977),s(X976,X978)))))) )),
  inference(superposition,[],[f358,f359])).
fof(f36621,plain,(
  ( ! [X600,X602,X598,X601,X603,X597,X599] : (s(bool,'T_0') != s(bool,happ(s(fun(X601,bool),'_dst_x0x0x1_3'(s(fun(X598,fun(X597,bool)),X599),s(X598,X600),s(fun(X601,X597),X602))),s(X601,X603))) | s(bool,'T_0') = s(bool,happ(s(fun(X597,bool),happ(s(fun(X598,fun(X597,bool)),X599),s(X598,X600))),s(X597,happ(s(fun(X601,X597),X602),s(X601,X603)))))) )),
  inference(forward_demodulation,[],[f36305,f289])).
fof(f36305,plain,(
  ( ! [X600,X602,X598,X605,X601,X603,X597,X599,X604] : (s(bool,'const.bool.DATATYPE_1'(s(X604,X605))) != s(bool,happ(s(fun(X601,bool),'_dst_x0x0x1_3'(s(fun(X598,fun(X597,bool)),X599),s(X598,X600),s(fun(X601,X597),X602))),s(X601,X603))) | s(bool,'T_0') = s(bool,happ(s(fun(X597,bool),happ(s(fun(X598,fun(X597,bool)),X599),s(X598,X600))),s(X597,happ(s(fun(X601,X597),X602),s(X601,X603)))))) )),
  inference(superposition,[],[f554,f359])).
fof(f36245,plain,(
  ( ! [X103,X109,X107,X105,X102,X110,X108,X106,X104] : (s(X102,X110) != s(X102,happ(s(fun(X107,X102),'_dst_x0x0x1_3'(s(fun(X104,fun(X103,X102)),X105),s(X104,X106),s(fun(X107,X103),X108))),s(X107,X109))) | s('type.benchmark.times'(X102),'const.benchmark.Once_1'(s(X102,X110))) = s('type.benchmark.times'(X102),'const.benchmark.Once_1'(s(X102,happ(s(fun(X103,X102),happ(s(fun(X104,fun(X103,X102)),X105),s(X104,X106))),s(X103,happ(s(fun(X107,X103),X108),s(X107,X109)))))))) )),
  inference(superposition,[],[f303,f359])).
fof(f36243,plain,(
  ( ! [X92,X90,X88,X87,X85,X91,X89,X86,X84] : (s('type.benchmark.times'(X84),'const.benchmark.Once_1'(s(X84,X92))) != s('type.benchmark.times'(X84),'const.benchmark.Once_1'(s(X84,happ(s(fun(X89,X84),'_dst_x0x0x1_3'(s(fun(X86,fun(X85,X84)),X87),s(X86,X88),s(fun(X89,X85),X90))),s(X89,X91))))) | s(X84,X92) = s(X84,happ(s(fun(X85,X84),happ(s(fun(X86,fun(X85,X84)),X87),s(X86,X88))),s(X85,happ(s(fun(X89,X85),X90),s(X89,X91)))))) )),
  inference(superposition,[],[f302,f359])).
fof(f36234,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X16,happ(s(fun(X8,X16),X17),s(X8,happ(s(fun(X13,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,X12),s(fun(X13,X9),X14))),s(X13,X15))))) = s(X16,happ(s(fun(X9,X16),'_dst_x0x1_2'(s(fun(X8,X16),X17),s(fun(X9,X8),happ(s(fun(X10,fun(X9,X8)),X11),s(X10,X12))))),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15)))))) )),
  inference(superposition,[],[f340,f359])).
fof(f36229,plain,(
  ( ! [X1521,X1517,X1519,X1520,X1522,X1516,X1518] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X1516,'type.num.num'),'_dst_x0x0x1_3'(s(fun(X1517,fun(X1518,'type.num.num')),X1519),s(X1517,X1520),s(fun(X1516,X1518),X1521))),s('type.benchmark.times'(X1516),'const.benchmark.Once_1'(s(X1516,X1522))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X1518,'type.num.num'),happ(s(fun(X1517,fun(X1518,'type.num.num')),X1519),s(X1517,X1520))),s(X1518,happ(s(fun(X1516,X1518),X1521),s(X1516,X1522)))))))) )),
  inference(superposition,[],[f296,f359])).
fof(f36225,plain,(
  ( ! [X1480,X1472,X1474,X1476,X1478,X1470,X1473,X1475,X1477,X1479,X1471] : (s('type.benchmark.times'(X1470),X1478) != s('type.benchmark.times'(X1470),happ(s(fun(X1473,'type.benchmark.times'(X1470)),happ(s(fun(X1472,fun(X1473,'type.benchmark.times'(X1470))),X1474),s(X1472,X1475))),s(X1473,happ(s(fun(X1471,X1473),X1476),s(X1471,X1477))))) | s('type.benchmark.times'(X1470),X1479) != s('type.benchmark.times'(X1470),X1480) | s('type.benchmark.times'(X1470),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1470),X1478),s('type.benchmark.times'(X1470),X1480))) = s('type.benchmark.times'(X1470),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1470),happ(s(fun(X1471,'type.benchmark.times'(X1470)),'_dst_x0x0x1_3'(s(fun(X1472,fun(X1473,'type.benchmark.times'(X1470))),X1474),s(X1472,X1475),s(fun(X1471,X1473),X1476))),s(X1471,X1477))),s('type.benchmark.times'(X1470),X1479)))) )),
  inference(superposition,[],[f310,f359])).
fof(f36221,plain,(
  ( ! [X1434,X1436,X1428,X1430,X1426,X1433,X1435,X1429,X1431,X1427,X1432] : (s('type.benchmark.times'(X1426),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1426),X1435),s('type.benchmark.times'(X1426),X1436))) != s('type.benchmark.times'(X1426),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1426),X1434),s('type.benchmark.times'(X1426),happ(s(fun(X1429,'type.benchmark.times'(X1426)),happ(s(fun(X1428,fun(X1429,'type.benchmark.times'(X1426))),X1430),s(X1428,X1431))),s(X1429,happ(s(fun(X1427,X1429),X1432),s(X1427,X1433))))))) | s('type.benchmark.times'(X1426),X1436) = s('type.benchmark.times'(X1426),happ(s(fun(X1427,'type.benchmark.times'(X1426)),'_dst_x0x0x1_3'(s(fun(X1428,fun(X1429,'type.benchmark.times'(X1426))),X1430),s(X1428,X1431),s(fun(X1427,X1429),X1432))),s(X1427,X1433)))) )),
  inference(superposition,[],[f309,f359])).
fof(f36218,plain,(
  ( ! [X1393,X1395,X1397,X1399,X1400,X1402,X1394,X1396,X1398,X1401,X1403] : (s('type.benchmark.times'(X1393),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1393),X1402),s('type.benchmark.times'(X1393),X1403))) != s('type.benchmark.times'(X1393),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1393),happ(s(fun(X1396,'type.benchmark.times'(X1393)),happ(s(fun(X1395,fun(X1396,'type.benchmark.times'(X1393))),X1397),s(X1395,X1398))),s(X1396,happ(s(fun(X1394,X1396),X1399),s(X1394,X1400))))),s('type.benchmark.times'(X1393),X1401))) | s('type.benchmark.times'(X1393),X1402) = s('type.benchmark.times'(X1393),happ(s(fun(X1394,'type.benchmark.times'(X1393)),'_dst_x0x0x1_3'(s(fun(X1395,fun(X1396,'type.benchmark.times'(X1393))),X1397),s(X1395,X1398),s(fun(X1394,X1396),X1399))),s(X1394,X1400)))) )),
  inference(superposition,[],[f308,f359])).
fof(f36213,plain,(
  ( ! [X1352,X1354,X1346,X1348,X1350,X1353,X1347,X1349,X1351] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1353),s('type.benchmark.times'(sK0),happ(s(fun(X1348,'type.benchmark.times'(sK0)),happ(s(fun(X1347,fun(X1348,'type.benchmark.times'(sK0))),X1349),s(X1347,X1350))),s(X1348,happ(s(fun(X1346,X1348),X1351),s(X1346,X1352))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X1346,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1347,fun(X1348,'type.benchmark.times'(sK0))),X1349),s(X1347,X1350),s(fun(X1346,X1348),X1351))),s(X1346,X1352))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1354),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f359])).
fof(f36211,plain,(
  ( ! [X1329,X1331,X1333,X1335,X1327,X1328,X1330,X1332,X1334,X1326] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1333),s('type.benchmark.times'(sK0),happ(s(fun(X1328,'type.benchmark.times'(sK0)),happ(s(fun(X1327,fun(X1328,'type.benchmark.times'(sK0))),X1329),s(X1327,X1330))),s(X1328,happ(s(fun(X1326,X1328),X1331),s(X1326,X1332))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1334,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X1326,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1327,fun(X1328,'type.benchmark.times'(sK0))),X1329),s(X1327,X1330),s(fun(X1326,X1328),X1331))),s(X1326,X1332))))),s(X1334,X1335)))) )),
  inference(superposition,[],[f17121,f359])).
fof(f36209,plain,(
  ( ! [X1310,X1313,X1315,X1317,X1311,X1312,X1314,X1316] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1317),s('type.benchmark.times'(sK0),happ(s(fun(X1312,'type.benchmark.times'(sK0)),happ(s(fun(X1311,fun(X1312,'type.benchmark.times'(sK0))),X1313),s(X1311,X1314))),s(X1312,happ(s(fun(X1310,X1312),X1315),s(X1310,X1316))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X1310,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1311,fun(X1312,'type.benchmark.times'(sK0))),X1313),s(X1311,X1314),s(fun(X1310,X1312),X1315))),s(X1310,X1316)))))) )),
  inference(superposition,[],[f17120,f359])).
fof(f36208,plain,(
  ( ! [X1302,X1305,X1307,X1309,X1303,X1304,X1306,X1308] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1309),s('type.benchmark.times'(sK0),happ(s(fun(X1304,'type.benchmark.times'(sK0)),happ(s(fun(X1303,fun(X1304,'type.benchmark.times'(sK0))),X1305),s(X1303,X1306))),s(X1304,happ(s(fun(X1302,X1304),X1307),s(X1302,X1308))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1302,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1303,fun(X1304,'type.benchmark.times'(sK0))),X1305),s(X1303,X1306),s(fun(X1302,X1304),X1307))),s(X1302,X1308)))) )),
  inference(superposition,[],[f17086,f359])).
fof(f36205,plain,(
  ( ! [X1279,X1277,X1280,X1282,X1284,X1278,X1276,X1281,X1283] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1278,'type.benchmark.times'(sK0)),happ(s(fun(X1277,fun(X1278,'type.benchmark.times'(sK0))),X1279),s(X1277,X1280))),s(X1278,happ(s(fun(X1276,X1278),X1281),s(X1276,X1282))))),s('type.benchmark.times'(sK0),X1283))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X1276,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1277,fun(X1278,'type.benchmark.times'(sK0))),X1279),s(X1277,X1280),s(fun(X1276,X1278),X1281))),s(X1276,X1282))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1284),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f359])).
fof(f36203,plain,(
  ( ! [X1265,X1258,X1256,X1262,X1260,X1264,X1259,X1257,X1263,X1261] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1258,'type.benchmark.times'(sK0)),happ(s(fun(X1257,fun(X1258,'type.benchmark.times'(sK0))),X1259),s(X1257,X1260))),s(X1258,happ(s(fun(X1256,X1258),X1261),s(X1256,X1262))))),s('type.benchmark.times'(sK0),X1263))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1264,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X1256,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1257,fun(X1258,'type.benchmark.times'(sK0))),X1259),s(X1257,X1260),s(fun(X1256,X1258),X1261))),s(X1256,X1262))))),s(X1264,X1265)))) )),
  inference(superposition,[],[f17026,f359])).
fof(f36201,plain,(
  ( ! [X1242,X1240,X1246,X1244,X1243,X1241,X1247,X1245] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1242,'type.benchmark.times'(sK0)),happ(s(fun(X1241,fun(X1242,'type.benchmark.times'(sK0))),X1243),s(X1241,X1244))),s(X1242,happ(s(fun(X1240,X1242),X1245),s(X1240,X1246))))),s('type.benchmark.times'(sK0),X1247))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X1240,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1241,fun(X1242,'type.benchmark.times'(sK0))),X1243),s(X1241,X1244),s(fun(X1240,X1242),X1245))),s(X1240,X1246)))))) )),
  inference(superposition,[],[f17025,f359])).
fof(f36199,plain,(
  ( ! [X1227,X1225,X1231,X1229,X1226,X1224,X1230,X1228] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X1226,'type.benchmark.times'(sK0)),happ(s(fun(X1225,fun(X1226,'type.benchmark.times'(sK0))),X1227),s(X1225,X1228))),s(X1226,happ(s(fun(X1224,X1226),X1229),s(X1224,X1230))))),s('type.benchmark.times'(sK0),X1231))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1224,'type.benchmark.times'(sK0)),'_dst_x0x0x1_3'(s(fun(X1225,fun(X1226,'type.benchmark.times'(sK0))),X1227),s(X1225,X1228),s(fun(X1224,X1226),X1229))),s(X1224,X1230)))) )),
  inference(superposition,[],[f16999,f359])).
fof(f36191,plain,(
  ( ! [X1139,X1143,X1141,X1146,X1144,X1142,X1140,X1147,X1145] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X1139,bool),happ(s(fun(X1142,fun(X1139,bool)),happ(s(fun(X1141,fun(X1142,fun(X1139,bool))),X1143),s(X1141,X1144))),s(X1142,happ(s(fun(X1140,X1142),X1145),s(X1140,X1146))))))) | s(X1139,X1147) = s(X1139,sK4(X1147,happ(s(fun(X1140,fun(X1139,bool)),'_dst_x0x0x1_3'(s(fun(X1141,fun(X1142,fun(X1139,bool))),X1143),s(X1141,X1144),s(fun(X1140,X1142),X1145))),s(X1140,X1146)),X1139))) )),
  inference(superposition,[],[f562,f359])).
fof(f36174,plain,(
  ( ! [X978,X976,X971,X969,X975,X973,X977,X970,X974,X972] : (s(X970,happ(s(fun(X971,X970),'_dst_x1x0_2'(s(fun(X971,fun(X969,X970)),'_dst_x0x0x1_3'(s(fun(X972,fun(X973,fun(X969,X970))),X974),s(X972,X975),s(fun(X971,X973),X976))),s(X969,X978))),s(X971,X977))) = s(X970,happ(s(fun(X969,X970),happ(s(fun(X973,fun(X969,X970)),happ(s(fun(X972,fun(X973,fun(X969,X970))),X974),s(X972,X975))),s(X973,happ(s(fun(X971,X973),X976),s(X971,X977))))),s(X969,X978)))) )),
  inference(superposition,[],[f341,f359])).
fof(f36173,plain,(
  ( ! [X963,X961,X967,X958,X965,X968,X962,X960,X966,X964,X959] : (s(fun(X958,X967),happ(s(fun(X960,fun(X958,X967)),'_dst_x00x11_2'(s(fun(X959,X967),X968),s(fun(X960,fun(X958,X959)),'_dst_x0x0x1_3'(s(fun(X961,fun(X962,fun(X958,X959))),X963),s(X961,X964),s(fun(X960,X962),X965))))),s(X960,X966))) = s(fun(X958,X967),'_dst_x0x1_2'(s(fun(X959,X967),X968),s(fun(X958,X959),happ(s(fun(X962,fun(X958,X959)),happ(s(fun(X961,fun(X962,fun(X958,X959))),X963),s(X961,X964))),s(X962,happ(s(fun(X960,X962),X965),s(X960,X966)))))))) )),
  inference(superposition,[],[f358,f359])).
fof(f36597,plain,(
  ( ! [X588,X590,X586,X589,X591,X585,X587] : (s(bool,'T_0') != s(bool,happ(s(fun(X587,bool),happ(s(fun(X586,fun(X587,bool)),X588),s(X586,X589))),s(X587,happ(s(fun(X585,X587),X590),s(X585,X591))))) | s(bool,'T_0') = s(bool,happ(s(fun(X585,bool),'_dst_x0x0x1_3'(s(fun(X586,fun(X587,bool)),X588),s(X586,X589),s(fun(X585,X587),X590))),s(X585,X591)))) )),
  inference(forward_demodulation,[],[f36124,f289])).
fof(f36124,plain,(
  ( ! [X592,X588,X590,X586,X593,X589,X591,X585,X587] : (s(bool,'const.bool.DATATYPE_1'(s(X592,X593))) != s(bool,happ(s(fun(X587,bool),happ(s(fun(X586,fun(X587,bool)),X588),s(X586,X589))),s(X587,happ(s(fun(X585,X587),X590),s(X585,X591))))) | s(bool,'T_0') = s(bool,happ(s(fun(X585,bool),'_dst_x0x0x1_3'(s(fun(X586,fun(X587,bool)),X588),s(X586,X589),s(fun(X585,X587),X590))),s(X585,X591)))) )),
  inference(superposition,[],[f554,f359])).
fof(f36067,plain,(
  ( ! [X94,X92,X90,X97,X95,X93,X91,X98,X96] : (s(X90,X98) != s(X90,happ(s(fun(X93,X90),happ(s(fun(X92,fun(X93,X90)),X94),s(X92,X95))),s(X93,happ(s(fun(X91,X93),X96),s(X91,X97))))) | s('type.benchmark.times'(X90),'const.benchmark.Once_1'(s(X90,X98))) = s('type.benchmark.times'(X90),'const.benchmark.Once_1'(s(X90,happ(s(fun(X91,X90),'_dst_x0x0x1_3'(s(fun(X92,fun(X93,X90)),X94),s(X92,X95),s(fun(X91,X93),X96))),s(X91,X97)))))) )),
  inference(superposition,[],[f303,f359])).
fof(f36065,plain,(
  ( ! [X80,X78,X76,X74,X72,X79,X77,X75,X73] : (s('type.benchmark.times'(X72),'const.benchmark.Once_1'(s(X72,X80))) != s('type.benchmark.times'(X72),'const.benchmark.Once_1'(s(X72,happ(s(fun(X75,X72),happ(s(fun(X74,fun(X75,X72)),X76),s(X74,X77))),s(X75,happ(s(fun(X73,X75),X78),s(X73,X79))))))) | s(X72,X80) = s(X72,happ(s(fun(X73,X72),'_dst_x0x0x1_3'(s(fun(X74,fun(X75,X72)),X76),s(X74,X77),s(fun(X73,X75),X78))),s(X73,X79)))) )),
  inference(superposition,[],[f302,f359])).
fof(f36057,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(X8,happ(s(fun(X1,X8),'_dst_x0x1_2'(s(fun(X0,X8),X9),s(fun(X1,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X0)),X4),s(X2,X5),s(fun(X1,X3),X6))))),s(X1,X7))) = s(X8,happ(s(fun(X0,X8),X9),s(X0,happ(s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(superposition,[],[f340,f359])).
fof(f36056,plain,(
  ( ! [X198,X196,X200,X199,X197,X195] : (s('type.ind_type.recspace'(X195),'const.ind_type.CONSTR_3'(s('type.num.num',X196),s(X195,X197),s(fun('type.num.num','type.ind_type.recspace'(X195)),happ(s(fun(X198,fun('type.num.num','type.ind_type.recspace'(X195))),X199),s(X198,X200))))) = s('type.ind_type.recspace'(X195),happ(s(fun(X198,'type.ind_type.recspace'(X195)),'_dst_x0x0x1_3'(s(fun(X195,fun(fun('type.num.num','type.ind_type.recspace'(X195)),'type.ind_type.recspace'(X195))),'const.ind_type.CONSTR_1'(s('type.num.num',X196))),s(X195,X197),s(fun(X198,fun('type.num.num','type.ind_type.recspace'(X195))),X199))),s(X198,X200)))) )),
  inference(superposition,[],[f359,f305])).
fof(f36055,plain,(
  ( ! [X191,X194,X192,X190,X193] : (s('type.benchmark.times'(X190),'const.benchmark.Twice_2'(s('type.benchmark.times'(X190),X191),s('type.benchmark.times'(X190),happ(s(fun(X192,'type.benchmark.times'(X190)),X193),s(X192,X194))))) = s('type.benchmark.times'(X190),happ(s(fun(X192,'type.benchmark.times'(X190)),'_dst_x0x0x1_3'(s(fun('type.benchmark.times'(X190),fun('type.benchmark.times'(X190),'type.benchmark.times'(X190))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X190),X191),s(fun(X192,'type.benchmark.times'(X190)),X193))),s(X192,X194)))) )),
  inference(superposition,[],[f359,f297])).
fof(f36033,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(X24,'const.ind_type.FCONS_3'(s(X24,X26),s(fun('type.num.num',X24),X25),s('type.num.num',happ(s(fun(X27,'type.num.num'),X28),s(X27,X29))))) = s(X24,happ(s(fun(X27,X24),'_dst_x0x0x1_3'(s(fun(X24,fun('type.num.num',X24)),'_dst_x1x0_2'(s(fun(X24,fun(fun('type.num.num',X24),fun('type.num.num',X24))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X24),X25))),s(X24,X26),s(fun(X27,'type.num.num'),X28))),s(X27,X29)))) )),
  inference(superposition,[],[f359,f377])).
fof(f36032,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X21,X16),'_dst_x0x0x1_3'(s(fun(X18,fun(X17,X16)),X19),s(X18,X20),s(fun(X21,X17),X22))),s(X21,X23))) = s(X16,happ(s(fun(X21,X16),'_dst_x0x1_2'(s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,X20))),s(fun(X21,X17),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f359,f340])).
fof(f36031,plain,(
  ( ! [X14,X12,X10,X8,X15,X13,X11,X9] : (s(X8,happ(s(fun(X13,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X9,X8)),X11),s(X10,X12),s(fun(X13,X9),X14))),s(X13,X15))) = s(X8,happ(s(fun(X10,X8),'_dst_x1x0_2'(s(fun(X10,fun(X9,X8)),X11),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15))))),s(X10,X12)))) )),
  inference(superposition,[],[f359,f341])).
fof(f36030,plain,(
  ( ! [X325,X321,X323,X324,X326,X320,X322,X319] : (s(X323,happ(s(fun('type.ind_type.recspace'(X319),X323),happ(s(fun(X324,fun('type.ind_type.recspace'(X319),X323)),X325),s(X324,X326))),s('type.ind_type.recspace'(X319),'const.ind_type.CONSTR_3'(s('type.num.num',X320),s(X319,X321),s(fun('type.num.num','type.ind_type.recspace'(X319)),X322))))) = s(X323,happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X319)),X323),'_dst_x0x0x1_3'(s(fun(X324,fun('type.ind_type.recspace'(X319),X323)),X325),s(X324,X326),s(fun(fun('type.num.num','type.ind_type.recspace'(X319)),'type.ind_type.recspace'(X319)),happ(s(fun(X319,fun(fun('type.num.num','type.ind_type.recspace'(X319)),'type.ind_type.recspace'(X319))),'const.ind_type.CONSTR_1'(s('type.num.num',X320))),s(X319,X321))))),s(fun('type.num.num','type.ind_type.recspace'(X319)),X322)))) )),
  inference(superposition,[],[f359,f305])).
fof(f36029,plain,(
  ( ! [X313,X315,X316,X318,X312,X314,X317] : (s(X315,happ(s(fun('type.benchmark.times'(X312),X315),happ(s(fun(X316,fun('type.benchmark.times'(X312),X315)),X317),s(X316,X318))),s('type.benchmark.times'(X312),'const.benchmark.Twice_2'(s('type.benchmark.times'(X312),X313),s('type.benchmark.times'(X312),X314))))) = s(X315,happ(s(fun('type.benchmark.times'(X312),X315),'_dst_x0x0x1_3'(s(fun(X316,fun('type.benchmark.times'(X312),X315)),X317),s(X316,X318),s(fun('type.benchmark.times'(X312),'type.benchmark.times'(X312)),happ(s(fun('type.benchmark.times'(X312),fun('type.benchmark.times'(X312),'type.benchmark.times'(X312))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X312),X313))))),s('type.benchmark.times'(X312),X314)))) )),
  inference(superposition,[],[f359,f297])).
fof(f36028,plain,(
  ( ! [X308,X310,X306,X309,X311,X307] : (s(X308,happ(s(fun('type.benchmark.times'(X306),X308),happ(s(fun(X309,fun('type.benchmark.times'(X306),X308)),X310),s(X309,X311))),s('type.benchmark.times'(X306),'const.benchmark.Once_1'(s(X306,X307))))) = s(X308,happ(s(fun(X306,X308),'_dst_x0x0x1_3'(s(fun(X309,fun('type.benchmark.times'(X306),X308)),X310),s(X309,X311),s(fun(X306,'type.benchmark.times'(X306)),'const.benchmark.Once_0'))),s(X306,X307)))) )),
  inference(superposition,[],[f359,f291])).
fof(f36027,plain,(
  ( ! [X300,X302,X296,X298,X304,X295,X301,X303,X297,X299,X305] : (s(X302,happ(s(fun(X297,X302),'_dst_x0x0x1_3'(s(fun(X303,fun(fun(X295,X296),X302)),X304),s(X303,X305),s(fun(X297,fun(X295,X296)),'_dst_x00x11_2'(s(fun(X298,X296),X299),s(fun(X297,fun(X295,X298)),X300))))),s(X297,X301))) = s(X302,happ(s(fun(fun(X295,X296),X302),happ(s(fun(X303,fun(fun(X295,X296),X302)),X304),s(X303,X305))),s(fun(X295,X296),'_dst_x0x1_2'(s(fun(X298,X296),X299),s(fun(X295,X298),happ(s(fun(X297,fun(X295,X298)),X300),s(X297,X301)))))))) )),
  inference(superposition,[],[f359,f358])).
fof(f36026,plain,(
  ( ! [X292,X294,X288,X290,X287,X293,X289,X291,X286] : (s(X291,happ(s(fun(X288,X291),'_dst_x0x0x1_3'(s(fun(X292,fun(fun(fun(X286,X287),X287),X291)),X293),s(X292,X294),s(fun(X288,fun(fun(X286,X287),X287)),'_dstsel_1_x10_1'(s(fun(X288,X286),X289))))),s(X288,X290))) = s(X291,happ(s(fun(fun(fun(X286,X287),X287),X291),happ(s(fun(X292,fun(fun(fun(X286,X287),X287),X291)),X293),s(X292,X294))),s(fun(fun(X286,X287),X287),'_dstsel_0_x0_1'(s(X286,happ(s(fun(X288,X286),X289),s(X288,X290)))))))) )),
  inference(superposition,[],[f359,f339])).
fof(f36001,plain,(
  ( ! [X109,X107,X110,X108,X106] : (s(X107,happ(s(fun(bool,X107),happ(s(fun(X108,fun(bool,X107)),X109),s(X108,X110))),s(bool,'T_0'))) = s(X107,happ(s(fun(fun(X106,bool),X107),'_dst_x0x0x1_3'(s(fun(X108,fun(bool,X107)),X109),s(X108,X110),s(fun(fun(X106,bool),bool),'?_1'))),s(fun(X106,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f359,f33115])).
fof(f35997,plain,(
  ( ! [X92,X90,X88,X87,X93,X91,X89,X86] : (s(X90,happ(s(fun(X86,X90),happ(s(fun(X91,fun(X86,X90)),X92),s(X91,X93))),s(X86,'const.ind_type.FCONS_3'(s(X86,X88),s(fun('type.num.num',X86),X87),s('type.num.num',X89))))) = s(X90,happ(s(fun('type.num.num',X90),'_dst_x0x0x1_3'(s(fun(X91,fun(X86,X90)),X92),s(X91,X93),s(fun('type.num.num',X86),happ(s(fun(X86,fun('type.num.num',X86)),'_dst_x1x0_2'(s(fun(X86,fun(fun('type.num.num',X86),fun('type.num.num',X86))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X86),X87))),s(X86,X88))))),s('type.num.num',X89)))) )),
  inference(superposition,[],[f359,f377])).
fof(f35996,plain,(
  ( ! [X80,X78,X85,X83,X81,X79,X84,X82] : (s(X82,happ(s(fun(X78,X82),happ(s(fun(X83,fun(X78,X82)),X84),s(X83,X85))),s(X78,happ(s(fun(X79,X78),X81),s(X79,X80))))) = s(X82,happ(s(fun(fun(X79,X78),X82),'_dst_x0x0x1_3'(s(fun(X83,fun(X78,X82)),X84),s(X83,X85),s(fun(fun(X79,X78),X78),'_dstsel_0_x0_1'(s(X79,X80))))),s(fun(X79,X78),X81)))) )),
  inference(superposition,[],[f359,f333])).
fof(f35995,plain,(
  ( ! [X70,X68,X66,X76,X74,X72,X71,X69,X67,X77,X75,X73] : (s(X74,happ(s(fun(X67,X74),'_dst_x0x0x1_3'(s(fun(X75,fun(X66,X74)),X76),s(X75,X77),s(fun(X67,X66),'_dst_x0x0x1_3'(s(fun(X68,fun(X69,X66)),X70),s(X68,X71),s(fun(X67,X69),X72))))),s(X67,X73))) = s(X74,happ(s(fun(X66,X74),happ(s(fun(X75,fun(X66,X74)),X76),s(X75,X77))),s(X66,happ(s(fun(X69,X66),happ(s(fun(X68,fun(X69,X66)),X70),s(X68,X71))),s(X69,happ(s(fun(X67,X69),X72),s(X67,X73)))))))) )),
  inference(superposition,[],[f359,f359])).
fof(f35994,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X56,X65,X63] : (s(X62,happ(s(fun(X57,X62),'_dst_x0x0x1_3'(s(fun(X63,fun(X56,X62)),X64),s(X63,X65),s(fun(X57,X56),'_dst_x1x0_2'(s(fun(X57,fun(X58,X56)),X59),s(X58,X60))))),s(X57,X61))) = s(X62,happ(s(fun(X56,X62),happ(s(fun(X63,fun(X56,X62)),X64),s(X63,X65))),s(X56,happ(s(fun(X58,X56),happ(s(fun(X57,fun(X58,X56)),X59),s(X57,X61))),s(X58,X60)))))) )),
  inference(superposition,[],[f359,f341])).
fof(f35993,plain,(
  ( ! [X54,X52,X50,X48,X55,X53,X51,X49] : (s(X52,happ(s(fun(X48,X52),happ(s(fun(X53,fun(X48,X52)),X54),s(X53,X55))),s(X48,X50))) = s(X52,happ(s(fun(X49,X52),'_dst_x0x0x1_3'(s(fun(X53,fun(X48,X52)),X54),s(X53,X55),s(fun(X49,X48),'_dst_x0_1'(s(X48,X50))))),s(X49,X51)))) )),
  inference(superposition,[],[f359,f330])).
fof(f35992,plain,(
  ( ! [X39,X47,X45,X43,X41,X38,X46,X44,X42,X40] : (s(X44,happ(s(fun(X39,X44),'_dst_x0x0x1_3'(s(fun(X45,fun(X38,X44)),X46),s(X45,X47),s(fun(X39,X38),'_dst_x0x1_2'(s(fun(X40,X38),X41),s(fun(X39,X40),X42))))),s(X39,X43))) = s(X44,happ(s(fun(X38,X44),happ(s(fun(X45,fun(X38,X44)),X46),s(X45,X47))),s(X38,happ(s(fun(X40,X38),X41),s(X40,happ(s(fun(X39,X40),X42),s(X39,X43)))))))) )),
  inference(superposition,[],[f359,f340])).
fof(f35991,plain,(
  ( ! [X30,X28,X26,X37,X35,X33,X31,X29,X27,X36,X34,X32] : (s(X34,happ(s(fun(X26,X34),happ(s(fun(X35,fun(X26,X34)),X36),s(X35,X37))),s(X26,happ(s(fun(X31,X26),'_dst_x0x0x1_3'(s(fun(X28,fun(X27,X26)),X29),s(X28,X30),s(fun(X31,X27),X32))),s(X31,X33))))) = s(X34,happ(s(fun(X27,X34),'_dst_x0x0x1_3'(s(fun(X35,fun(X26,X34)),X36),s(X35,X37),s(fun(X27,X26),happ(s(fun(X28,fun(X27,X26)),X29),s(X28,X30))))),s(X27,happ(s(fun(X31,X27),X32),s(X31,X33)))))) )),
  inference(superposition,[],[f359,f359])).
fof(f35990,plain,(
  ( ! [X24,X23,X21,X19,X17,X25,X22,X20,X18,X16] : (s(X22,happ(s(fun(X17,X22),'_dst_x0x0x1_3'(s(fun(X23,fun(X16,X22)),X24),s(X23,X25),s(fun(X17,X16),happ(s(fun(X18,fun(X17,X16)),X19),s(X18,X20))))),s(X17,X21))) = s(X22,happ(s(fun(X16,X22),happ(s(fun(X23,fun(X16,X22)),X24),s(X23,X25))),s(X16,happ(s(fun(X18,X16),'_dst_x1x0_2'(s(fun(X18,fun(X17,X16)),X19),s(X17,X21))),s(X18,X20)))))) )),
  inference(superposition,[],[f359,f341])).
fof(f35989,plain,(
  ( ! [X6,X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(X12,happ(s(fun(X7,X12),'_dst_x0x0x1_3'(s(fun(X13,fun(X6,X12)),X14),s(X13,X15),s(fun(X7,X6),X8))),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))) = s(X12,happ(s(fun(X6,X12),happ(s(fun(X13,fun(X6,X12)),X14),s(X13,X15))),s(X6,happ(s(fun(X9,X6),'_dst_x0x1_2'(s(fun(X7,X6),X8),s(fun(X9,X7),X10))),s(X9,X11)))))) )),
  inference(superposition,[],[f359,f340])).
fof(f35988,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X2,happ(s(fun(X0,X2),happ(s(fun(X3,fun(X0,X2)),X4),s(X3,X5))),s(X0,X1))) = s(X2,happ(s(fun(X0,X2),'_dst_x0x0x1_3'(s(fun(X3,fun(X0,X2)),X4),s(X3,X5),s(fun(X0,X0),'_i_0_0'))),s(X0,X1)))) )),
  inference(superposition,[],[f359,f290])).
fof(f35880,plain,(
  ( ! [X111,X109,X107,X105,X110,X108,X106,X104] : (s(X105,happ(s(fun(X104,X105),'const.ind_type.FCONS_3'(s(fun(X104,X105),X107),s(fun('type.num.num',fun(X104,X105)),X106),s('type.num.num',X108))),s(X104,happ(s(fun(X109,X104),X110),s(X109,X111))))) = s(X105,happ(s(fun(X109,X105),'_dst_x0x0x1_3'(s(fun('type.num.num',fun(X104,X105)),happ(s(fun(fun(X104,X105),fun('type.num.num',fun(X104,X105))),'_dst_x1x0_2'(s(fun(fun(X104,X105),fun(fun('type.num.num',fun(X104,X105)),fun('type.num.num',fun(X104,X105)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X104,X105)),X106))),s(fun(X104,X105),X107))),s('type.num.num',X108),s(fun(X109,X104),X110))),s(X109,X111)))) )),
  inference(superposition,[],[f359,f377])).
fof(f35879,plain,(
  ( ! [X103,X101,X99,X97,X102,X100,X98,X96] : (s(X97,happ(s(fun(X96,X97),happ(s(fun(X98,fun(X96,X97)),X100),s(X98,X99))),s(X96,happ(s(fun(X101,X96),X102),s(X101,X103))))) = s(X97,happ(s(fun(X101,X97),'_dst_x0x0x1_3'(s(fun(fun(X98,fun(X96,X97)),fun(X96,X97)),'_dstsel_0_x0_1'(s(X98,X99))),s(fun(X98,fun(X96,X97)),X100),s(fun(X101,X96),X102))),s(X101,X103)))) )),
  inference(superposition,[],[f359,f333])).
fof(f35878,plain,(
  ( ! [X94,X92,X90,X88,X87,X85,X95,X93,X91,X89,X86,X84] : (s(X85,happ(s(fun(X93,X85),'_dst_x0x0x1_3'(s(fun(X86,fun(X84,X85)),'_dst_x0x0x1_3'(s(fun(X87,fun(X88,fun(X84,X85))),X89),s(X87,X90),s(fun(X86,X88),X91))),s(X86,X92),s(fun(X93,X84),X94))),s(X93,X95))) = s(X85,happ(s(fun(X84,X85),happ(s(fun(X88,fun(X84,X85)),happ(s(fun(X87,fun(X88,fun(X84,X85))),X89),s(X87,X90))),s(X88,happ(s(fun(X86,X88),X91),s(X86,X92))))),s(X84,happ(s(fun(X93,X84),X94),s(X93,X95)))))) )),
  inference(superposition,[],[f359,f359])).
fof(f35877,plain,(
  ( ! [X80,X78,X76,X74,X83,X81,X79,X77,X75,X82] : (s(X75,happ(s(fun(X81,X75),'_dst_x0x0x1_3'(s(fun(X76,fun(X74,X75)),'_dst_x1x0_2'(s(fun(X76,fun(X77,fun(X74,X75))),X78),s(X77,X79))),s(X76,X80),s(fun(X81,X74),X82))),s(X81,X83))) = s(X75,happ(s(fun(X74,X75),happ(s(fun(X77,fun(X74,X75)),happ(s(fun(X76,fun(X77,fun(X74,X75))),X78),s(X76,X80))),s(X77,X79))),s(X74,happ(s(fun(X81,X74),X82),s(X81,X83)))))) )),
  inference(superposition,[],[f359,f341])).
fof(f35876,plain,(
  ( ! [X70,X68,X66,X72,X71,X69,X67,X73] : (s(X67,happ(s(fun(X66,X67),X69),s(X66,happ(s(fun(X71,X66),X72),s(X71,X73))))) = s(X67,happ(s(fun(X71,X67),'_dst_x0x0x1_3'(s(fun(X68,fun(X66,X67)),'_dst_x0_1'(s(fun(X66,X67),X69))),s(X68,X70),s(fun(X71,X66),X72))),s(X71,X73)))) )),
  inference(superposition,[],[f359,f330])).
fof(f35875,plain,(
  ( ! [X61,X59,X57,X64,X62,X60,X58,X56,X65,X63] : (s(X57,happ(s(fun(X56,X57),happ(s(fun(X59,fun(X56,X57)),X60),s(X59,happ(s(fun(X58,X59),X61),s(X58,X62))))),s(X56,happ(s(fun(X63,X56),X64),s(X63,X65))))) = s(X57,happ(s(fun(X63,X57),'_dst_x0x0x1_3'(s(fun(X58,fun(X56,X57)),'_dst_x0x1_2'(s(fun(X59,fun(X56,X57)),X60),s(fun(X58,X59),X61))),s(X58,X62),s(fun(X63,X56),X64))),s(X63,X65)))) )),
  inference(superposition,[],[f359,f340])).
fof(f35874,plain,(
  ( ! [X47,X45,X54,X52,X50,X48,X46,X44,X55,X53,X51,X49] : (s(X45,happ(s(fun(X44,X45),happ(s(fun(X50,fun(X44,X45)),'_dst_x0x0x1_3'(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49),s(fun(X50,X46),X51))),s(X50,X52))),s(X44,happ(s(fun(X53,X44),X54),s(X53,X55))))) = s(X45,happ(s(fun(X53,X45),'_dst_x0x0x1_3'(s(fun(X46,fun(X44,X45)),happ(s(fun(X47,fun(X46,fun(X44,X45))),X48),s(X47,X49))),s(X46,happ(s(fun(X50,X46),X51),s(X50,X52))),s(fun(X53,X44),X54))),s(X53,X55)))) )),
  inference(superposition,[],[f359,f359])).
fof(f35873,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X34,X42,X40] : (s(X35,happ(s(fun(X41,X35),'_dst_x0x0x1_3'(s(fun(X36,fun(X34,X35)),happ(s(fun(X37,fun(X36,fun(X34,X35))),X38),s(X37,X39))),s(X36,X40),s(fun(X41,X34),X42))),s(X41,X43))) = s(X35,happ(s(fun(X34,X35),happ(s(fun(X37,fun(X34,X35)),'_dst_x1x0_2'(s(fun(X37,fun(X36,fun(X34,X35))),X38),s(X36,X40))),s(X37,X39))),s(X34,happ(s(fun(X41,X34),X42),s(X41,X43)))))) )),
  inference(superposition,[],[f359,f341])).
fof(f35872,plain,(
  ( ! [X30,X28,X26,X24,X33,X31,X29,X27,X25,X32] : (s(X25,happ(s(fun(X31,X25),'_dst_x0x0x1_3'(s(fun(X26,fun(X24,X25)),X27),s(X26,happ(s(fun(X28,X26),X29),s(X28,X30))),s(fun(X31,X24),X32))),s(X31,X33))) = s(X25,happ(s(fun(X24,X25),happ(s(fun(X28,fun(X24,X25)),'_dst_x0x1_2'(s(fun(X26,fun(X24,X25)),X27),s(fun(X28,X26),X29))),s(X28,X30))),s(X24,happ(s(fun(X31,X24),X32),s(X31,X33)))))) )),
  inference(superposition,[],[f359,f340])).
fof(f35871,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s(X19,happ(s(fun(X18,X19),X20),s(X18,happ(s(fun(X21,X18),X22),s(X21,X23))))) = s(X19,happ(s(fun(X21,X19),'_dst_x0x0x1_3'(s(fun(fun(X18,X19),fun(X18,X19)),'_i_0_0'),s(fun(X18,X19),X20),s(fun(X21,X18),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f359,f290])).
fof(f35870,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X9,happ(s(fun(X15,X9),'_dst_x0x0x1_3'(s(fun(X10,fun(X8,X9)),'_dst_x00x11_2'(s(fun(X11,X9),X12),s(fun(X10,fun(X8,X11)),X13))),s(X10,X14),s(fun(X15,X8),X16))),s(X15,X17))) = s(X9,happ(s(fun(X8,X9),'_dst_x0x1_2'(s(fun(X11,X9),X12),s(fun(X8,X11),happ(s(fun(X10,fun(X8,X11)),X13),s(X10,X14))))),s(X8,happ(s(fun(X15,X8),X16),s(X15,X17)))))) )),
  inference(superposition,[],[f359,f358])).
fof(f35869,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,happ(s(fun(X5,X1),'_dst_x0x0x1_3'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(X2,X4),s(fun(X5,fun(X0,X1)),X6))),s(X5,X7))) = s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(X0,X1),happ(s(fun(X5,fun(X0,X1)),X6),s(X5,X7)))))) )),
  inference(superposition,[],[f359,f339])).
fof(f35743,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34,X40] : (s(bool,X40) = s(bool,happ(s(fun(X35,bool),happ(s(fun(X34,fun(X35,bool)),X36),s(X34,X37))),s(X35,happ(s(fun(X33,X35),X38),s(X33,X39))))) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,happ(s(fun(X33,bool),'_dst_x0x0x1_3'(s(fun(X34,fun(X35,bool)),X36),s(X34,X37),s(fun(X33,X35),X38))),s(X33,X39)))) )),
  inference(superposition,[],[f359,f396])).
fof(f35742,plain,(
  ( ! [X30,X28,X26,X31,X29,X27,X25,X32] : (s(bool,'T_0') = s(bool,happ(s(fun(X27,bool),happ(s(fun(X26,fun(X27,bool)),X28),s(X26,X29))),s(X27,happ(s(fun(X25,X27),X30),s(X25,X31))))) | s(bool,X32) = s(bool,happ(s(fun(X25,bool),'_dst_x0x0x1_3'(s(fun(X26,fun(X27,bool)),X28),s(X26,X29),s(fun(X25,X27),X30))),s(X25,X31))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f359,f396])).
fof(f35740,plain,(
  ( ! [X14,X12,X10,X8,X17,X15,X13,X11,X9,X16] : (s(X8,happ(s(fun(X15,X8),'_dst_x0x1_2'(s(fun(X9,X8),'_dst_x0x0x1_3'(s(fun(X10,fun(X11,X8)),X12),s(X10,X13),s(fun(X9,X11),X14))),s(fun(X15,X9),X16))),s(X15,X17))) = s(X8,happ(s(fun(X11,X8),happ(s(fun(X10,fun(X11,X8)),X12),s(X10,X13))),s(X11,happ(s(fun(X9,X11),X14),s(X9,happ(s(fun(X15,X9),X16),s(X15,X17)))))))) )),
  inference(superposition,[],[f359,f340])).
fof(f35690,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X1,X2),X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10),s(fun(X6,X8),X11))),s(X6,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10))),s(X8,happ(s(fun(X6,X8),X11),s(X6,X12)))))))) )),
  inference(unit_resulting_resolution,[],[f340,f359,f310])).
fof(f35691,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10),s(fun(X6,X8),X11))),s(X6,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10))),s(X8,happ(s(fun(X6,X8),X11),s(X6,X12)))))))) )),
  inference(unit_resulting_resolution,[],[f341,f359,f310])).
fof(f36459,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6),s(fun(X2,X4),X7))),s(X2,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6))),s(X4,happ(s(fun(X2,X4),X7),s(X2,X8)))))))) )),
  inference(forward_demodulation,[],[f35701,f295])).
fof(f35701,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6),s(fun(X2,X4),X7))),s(X2,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X9),s('type.num.num','const.num.|48|_0'))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),happ(s(fun(X3,fun(X4,'type.benchmark.times'(X0))),X5),s(X3,X6))),s(X4,happ(s(fun(X2,X4),X7),s(X2,X8)))))))) )),
  inference(unit_resulting_resolution,[],[f295,f359,f310])).
fof(f35704,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10),s(fun(X6,X8),X11))),s(X6,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10))),s(X8,happ(s(fun(X6,X8),X11),s(X6,X12)))))))) )),
  inference(unit_resulting_resolution,[],[f340,f359,f310])).
fof(f35705,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10),s(fun(X6,X8),X11))),s(X6,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X8,'type.benchmark.times'(X0))),X9),s(X7,X10))),s(X8,happ(s(fun(X6,X8),X11),s(X6,X12)))))))) )),
  inference(unit_resulting_resolution,[],[f341,f359,f310])).
fof(f36456,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8),s(fun(X4,X6),X9))),s(X4,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8))),s(X6,happ(s(fun(X4,X6),X9),s(X4,X10)))))))) )),
  inference(forward_demodulation,[],[f35707,f335])).
fof(f35707,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8),s(fun(X4,X6),X9))),s(X4,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3))),s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X11))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8))),s(X6,happ(s(fun(X4,X6),X9),s(X4,X10)))))))) )),
  inference(unit_resulting_resolution,[],[f335,f359,f310])).
fof(f36455,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X9),s(fun(X5,X7),X10))),s(X5,X11))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),happ(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X9))),s(X7,happ(s(fun(X5,X7),X10),s(X5,X11)))))))) )),
  inference(forward_demodulation,[],[f35708,f336])).
fof(f35708,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X1),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2),s('type.benchmark.times'(X1),X3))),s('type.benchmark.times'(X1),X4))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X9),s(fun(X5,X7),X10))),s(X5,X11))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1),X3),s('type.benchmark.times'(X1),X4))),s(fun(X1,'type.benchmark.times'(X0)),X12),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X2))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),happ(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X9))),s(X7,happ(s(fun(X5,X7),X10),s(X5,X11)))))))) )),
  inference(unit_resulting_resolution,[],[f336,f359,f310])).
fof(f36454,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8),s(fun(X4,X6),X9))),s(X4,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8))),s(X6,happ(s(fun(X4,X6),X9),s(X4,X10)))))))) )),
  inference(forward_demodulation,[],[f35709,f377])).
fof(f35709,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X2),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8),s(fun(X4,X6),X9))),s(X4,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun('type.num.num','type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.num.num','type.benchmark.times'(X0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X0),fun(fun('type.num.num','type.benchmark.times'(X0)),fun('type.num.num','type.benchmark.times'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X0)),X2))),s('type.benchmark.times'(X0),X1))),s('type.num.num',X3))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X5,fun(X6,'type.benchmark.times'(X0))),X7),s(X5,X8))),s(X6,happ(s(fun(X4,X6),X9),s(X4,X10)))))))) )),
  inference(unit_resulting_resolution,[],[f377,f359,f310])).
fof(f35718,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X9,'type.benchmark.times'(X0)),X10),s(fun(X8,X9),X11))),s(X8,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X9,'type.benchmark.times'(X0)),X10),s(X9,happ(s(fun(X8,X9),X11),s(X8,X12)))))))) )),
  inference(unit_resulting_resolution,[],[f340,f359,f310])).
fof(f35719,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X9,fun(X8,'type.benchmark.times'(X0))),X10),s(X9,X11))),s(X8,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X9,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X9,fun(X8,'type.benchmark.times'(X0))),X10),s(X8,X12))),s(X9,X11)))))) )),
  inference(unit_resulting_resolution,[],[f341,f359,f310])).
fof(f35720,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),happ(s(fun(X9,fun(X8,'type.benchmark.times'(X0))),X10),s(X9,X11))),s(X8,happ(s(fun(X12,X8),X13),s(X12,X14))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X12,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X9,fun(X8,'type.benchmark.times'(X0))),X10),s(X9,X11),s(fun(X12,X8),X13))),s(X12,X14)))))) )),
  inference(unit_resulting_resolution,[],[f359,f359,f310])).
fof(f36437,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),X8))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),X8)))) )),
  inference(forward_demodulation,[],[f35729,f295])).
fof(f35729,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),X8))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X8),s(fun('type.num.num','type.benchmark.times'(X0)),X9),s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f295,f359,f310])).
fof(f35732,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),X9),s(X8,happ(s(fun(X10,X8),X11),s(X10,X12))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X10,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X8,'type.benchmark.times'(X0)),X9),s(fun(X10,X8),X11))),s(X10,X12)))))) )),
  inference(unit_resulting_resolution,[],[f340,f359,f310])).
fof(f35733,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X8,fun(X9,'type.benchmark.times'(X0))),X10),s(X9,X11))),s(X8,X12))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X9,'type.benchmark.times'(X0)),happ(s(fun(X8,fun(X9,'type.benchmark.times'(X0))),X10),s(X8,X12))),s(X9,X11)))))) )),
  inference(unit_resulting_resolution,[],[f341,f359,f310])).
fof(f35734,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X7,X5,X3,X1,X13,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X9,fun(X10,'type.benchmark.times'(X0))),X11),s(X9,X12),s(fun(X8,X10),X13))),s(X8,X14))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X10,'type.benchmark.times'(X0)),happ(s(fun(X9,fun(X10,'type.benchmark.times'(X0))),X11),s(X9,X12))),s(X10,happ(s(fun(X8,X10),X13),s(X8,X14)))))))) )),
  inference(unit_resulting_resolution,[],[f359,f359,f310])).
fof(f36434,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),X9),s(X8,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),X9),s(X8,X10)))))) )),
  inference(forward_demodulation,[],[f35735,f335])).
fof(f35735,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),X9),s(X8,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X8),'const.benchmark.Once_1'(s(X8,X10))),s(fun(X8,'type.benchmark.times'(X0)),X9),s(fun('type.benchmark.times'(X8),fun('type.benchmark.times'(X8),'type.benchmark.times'(X0))),X11)))))) )),
  inference(unit_resulting_resolution,[],[f335,f359,f310])).
fof(f36433,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X8),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X8),fun('type.benchmark.times'(X8),'type.benchmark.times'(X0))),X9),s('type.benchmark.times'(X8),X10))),s('type.benchmark.times'(X8),X11))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X8),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X8),fun('type.benchmark.times'(X8),'type.benchmark.times'(X0))),X9),s('type.benchmark.times'(X8),X10))),s('type.benchmark.times'(X8),X11)))))) )),
  inference(forward_demodulation,[],[f35736,f336])).
fof(f35736,plain,(
  ( ! [X6,X4,X2,X0,X12,X10,X8,X7,X5,X3,X1,X11,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X8),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X8),fun('type.benchmark.times'(X8),'type.benchmark.times'(X0))),X9),s('type.benchmark.times'(X8),X10))),s('type.benchmark.times'(X8),X11))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X8),'const.benchmark.Twice_2'(s('type.benchmark.times'(X8),X10),s('type.benchmark.times'(X8),X11))),s(fun(X8,'type.benchmark.times'(X0)),X12),s(fun('type.benchmark.times'(X8),fun('type.benchmark.times'(X8),'type.benchmark.times'(X0))),X9)))))) )),
  inference(unit_resulting_resolution,[],[f336,f359,f310])).
fof(f36432,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X8),s(fun('type.num.num','type.benchmark.times'(X0)),X9),s('type.num.num',X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X8),s(fun('type.num.num','type.benchmark.times'(X0)),X9),s('type.num.num',X10)))))) )),
  inference(forward_demodulation,[],[f35737,f377])).
fof(f35737,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X8),s(fun('type.num.num','type.benchmark.times'(X0)),X9),s('type.num.num',X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7))))),s('type.benchmark.times'(X0),happ(s(fun('type.num.num','type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.num.num','type.benchmark.times'(X0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X0),fun(fun('type.num.num','type.benchmark.times'(X0)),fun('type.num.num','type.benchmark.times'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X0)),X9))),s('type.benchmark.times'(X0),X8))),s('type.num.num',X10)))))) )),
  inference(unit_resulting_resolution,[],[f377,f359,f310])).
fof(f35738,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))),s(X1,happ(s(fun(X5,X1),X6),s(X5,X7))))))),s(X0,happ(s(fun(X5,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X1,X0)),X3),s(X2,X4),s(fun(X5,X1),X6))),s(X5,X7))))))) )),
  inference(unit_resulting_resolution,[],[f359,f338])).
fof(f35739,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X1,X0),'_dst_x0x0x1_3'(s(fun(X2,fun(X3,X0)),X4),s(X2,X5),s(fun(X1,X3),X6))),s(X1,X7))))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),X4),s(X2,X5))),s(X3,happ(s(fun(X1,X3),X6),s(X1,X7)))))))) )),
  inference(unit_resulting_resolution,[],[f359,f303])).
fof(f35531,plain,(
  ( ! [X134,X135] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X135))) | s(bool,X135) = s(bool,happ(s(fun(fun(X134,bool),bool),'?_1'),s(fun(X134,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f302,f33115])).
fof(f35607,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,happ(s(fun(fun(X48,bool),bool),'?_1'),s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f35476,f246])).
fof(f35476,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | s(bool,X49) != s(bool,happ(s(fun(fun(X48,bool),bool),'?_1'),s(fun(X48,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f399,f33115])).
fof(f35422,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f33115,f396])).
fof(f35322,plain,(
  ( ! [X194,X195,X193] : (s(bool,X193) != s(bool,'|dollar|exists_1'(s(fun(fun(X195,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,sK4(X193,X194,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X194)))) )),
  inference(superposition,[],[f33661,f562])).
fof(f35320,plain,(
  ( ! [X187,X188,X186] : (s(bool,X186) != s(bool,'|dollar|exists_1'(s(fun(fun(X188,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X186),s(fun('type.num.num',bool),X187),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f33661,f295])).
fof(f35314,plain,(
  ( ! [X158,X159,X157,X160] : (s(bool,X158) != s(bool,'|dollar|exists_1'(s(fun(fun(X160,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(X157,bool),'_dst_x0_1'(s(bool,X158))),s(X157,X159)))) )),
  inference(superposition,[],[f33661,f330])).
fof(f35310,plain,(
  ( ! [X138,X137] : (s(bool,X137) != s(bool,'|dollar|exists_1'(s(fun(fun(X138,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X137)))) )),
  inference(superposition,[],[f33661,f290])).
fof(f35047,plain,(
  ( ! [X1011,X1009,X1006,X1004,X1010,X1008,X1003,X1007,X1005] : (s('type.benchmark.times'(X1003),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1003),X1010),s('type.benchmark.times'(X1003),X1011))) != s('type.benchmark.times'(X1003),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1003),X1009),s('type.benchmark.times'(X1003),happ(s(fun('type.benchmark.times'(X1004),'type.benchmark.times'(X1003)),happ(s(fun('type.benchmark.times'(X1004),fun('type.benchmark.times'(X1004),'type.benchmark.times'(X1003))),X1008),s('type.benchmark.times'(X1004),X1005))),s('type.benchmark.times'(X1004),X1006))))) | s('type.benchmark.times'(X1003),X1011) = s('type.benchmark.times'(X1003),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1004),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1004),X1005),s('type.benchmark.times'(X1004),X1006))),s(fun(X1004,'type.benchmark.times'(X1003)),X1007),s(fun('type.benchmark.times'(X1004),fun('type.benchmark.times'(X1004),'type.benchmark.times'(X1003))),X1008)))) )),
  inference(superposition,[],[f309,f336])).
fof(f35044,plain,(
  ( ! [X984,X978,X976,X982,X980,X979,X977,X983,X981] : (s('type.benchmark.times'(X976),'const.benchmark.Twice_2'(s('type.benchmark.times'(X976),X983),s('type.benchmark.times'(X976),X984))) != s('type.benchmark.times'(X976),'const.benchmark.Twice_2'(s('type.benchmark.times'(X976),happ(s(fun('type.benchmark.times'(X977),'type.benchmark.times'(X976)),happ(s(fun('type.benchmark.times'(X977),fun('type.benchmark.times'(X977),'type.benchmark.times'(X976))),X981),s('type.benchmark.times'(X977),X978))),s('type.benchmark.times'(X977),X979))),s('type.benchmark.times'(X976),X982))) | s('type.benchmark.times'(X976),X983) = s('type.benchmark.times'(X976),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X977),'const.benchmark.Twice_2'(s('type.benchmark.times'(X977),X978),s('type.benchmark.times'(X977),X979))),s(fun(X977,'type.benchmark.times'(X976)),X980),s(fun('type.benchmark.times'(X977),fun('type.benchmark.times'(X977),'type.benchmark.times'(X976))),X981)))) )),
  inference(superposition,[],[f308,f336])).
fof(f35034,plain,(
  ( ! [X907,X905,X909,X906,X910,X908] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X910),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(X905),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(X905),fun('type.benchmark.times'(X905),'type.benchmark.times'(sK0))),X909),s('type.benchmark.times'(X905),X906))),s('type.benchmark.times'(X905),X907))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X905),'const.benchmark.Twice_2'(s('type.benchmark.times'(X905),X906),s('type.benchmark.times'(X905),X907))),s(fun(X905,'type.benchmark.times'(sK0)),X908),s(fun('type.benchmark.times'(X905),fun('type.benchmark.times'(X905),'type.benchmark.times'(sK0))),X909)))) )),
  inference(superposition,[],[f17086,f336])).
fof(f35025,plain,(
  ( ! [X850,X848,X847,X845,X849,X846] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(X845),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(X845),fun('type.benchmark.times'(X845),'type.benchmark.times'(sK0))),X849),s('type.benchmark.times'(X845),X846))),s('type.benchmark.times'(X845),X847))),s('type.benchmark.times'(sK0),X850))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X845),'const.benchmark.Twice_2'(s('type.benchmark.times'(X845),X846),s('type.benchmark.times'(X845),X847))),s(fun(X845,'type.benchmark.times'(sK0)),X848),s(fun('type.benchmark.times'(X845),fun('type.benchmark.times'(X845),'type.benchmark.times'(sK0))),X849)))) )),
  inference(superposition,[],[f16999,f336])).
fof(f34902,plain,(
  ( ! [X45,X43,X41,X46,X44,X42,X40] : (s('type.benchmark.times'(X40),'const.benchmark.Once_1'(s(X40,X46))) != s('type.benchmark.times'(X40),'const.benchmark.Once_1'(s(X40,happ(s(fun('type.benchmark.times'(X41),X40),happ(s(fun('type.benchmark.times'(X41),fun('type.benchmark.times'(X41),X40)),X45),s('type.benchmark.times'(X41),X42))),s('type.benchmark.times'(X41),X43))))) | s(X40,X46) = s(X40,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X41),'const.benchmark.Twice_2'(s('type.benchmark.times'(X41),X42),s('type.benchmark.times'(X41),X43))),s(fun(X41,X40),X44),s(fun('type.benchmark.times'(X41),fun('type.benchmark.times'(X41),X40)),X45)))) )),
  inference(superposition,[],[f302,f336])).
fof(f34843,plain,(
  ( ! [X2,X0,X1] : (s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,X0),X2),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1))) = s(X0,happ(s(fun('type.benchmark.times'(sK0),X0),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X0)),X1),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f336,f245])).
fof(f34030,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(X0,bool),sK9('?_1',fun(X0,bool))),s(X0,sK9(sK9('?_1',fun(X0,bool)),X0)))))) )),
  inference(unit_resulting_resolution,[],[f33678,f318])).
fof(f34053,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),sK9('?_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f33678,f399])).
fof(f34054,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(X0,bool)),'const.benchmark.Once_1'(s(fun(X0,bool),sK9('?_1',fun(X0,bool))))),s(fun(fun(X0,bool),bool),'?_1'),s(fun('type.benchmark.times'(fun(X0,bool)),fun('type.benchmark.times'(fun(X0,bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f33678,f399])).
fof(f34058,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK9('?_1',fun(X0,bool)))))) )),
  inference(unit_resulting_resolution,[],[f381,f33678,f1150])).
fof(f34059,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK9('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33678,f1169])).
fof(f34060,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),sK9('?_1',fun(X1,bool))))))))))) )),
  inference(unit_resulting_resolution,[],[f33678,f4018])).
fof(f34000,plain,(
  ( ! [X269,X271,X267,X273,X268,X270,X266,X272] : (s(fun(X266,X267),X273) != s(fun(X266,X267),'_dst_x0x1_2'(s(fun(X269,X267),X270),s(fun(X266,X269),happ(s(fun(X268,fun(X266,X269)),X271),s(X268,X272))))) | s('type.benchmark.times'(fun(X266,X267)),'const.benchmark.Once_1'(s(fun(X266,X267),X273))) = s('type.benchmark.times'(fun(X266,X267)),'const.benchmark.Once_1'(s(fun(X266,X267),happ(s(fun(X268,fun(X266,X267)),'_dst_x00x11_2'(s(fun(X269,X267),X270),s(fun(X268,fun(X266,X269)),X271))),s(X268,X272)))))) )),
  inference(superposition,[],[f303,f358])).
fof(f33998,plain,(
  ( ! [X255,X253,X251,X257,X254,X252,X250,X256] : (s('type.benchmark.times'(fun(X250,X251)),'const.benchmark.Once_1'(s(fun(X250,X251),X257))) != s('type.benchmark.times'(fun(X250,X251)),'const.benchmark.Once_1'(s(fun(X250,X251),'_dst_x0x1_2'(s(fun(X253,X251),X254),s(fun(X250,X253),happ(s(fun(X252,fun(X250,X253)),X255),s(X252,X256))))))) | s(fun(X250,X251),X257) = s(fun(X250,X251),happ(s(fun(X252,fun(X250,X251)),'_dst_x00x11_2'(s(fun(X253,X251),X254),s(fun(X252,fun(X250,X253)),X255))),s(X252,X256)))) )),
  inference(superposition,[],[f302,f358])).
fof(f33990,plain,(
  ( ! [X191,X189,X187,X194,X192,X190,X188,X186,X193] : (s(X193,happ(s(fun(fun(X186,X187),X193),X194),s(fun(X186,X187),'_dst_x0x1_2'(s(fun(X189,X187),X190),s(fun(X186,X189),happ(s(fun(X188,fun(X186,X189)),X191),s(X188,X192))))))) = s(X193,happ(s(fun(X188,X193),'_dst_x0x1_2'(s(fun(fun(X186,X187),X193),X194),s(fun(X188,fun(X186,X187)),'_dst_x00x11_2'(s(fun(X189,X187),X190),s(fun(X188,fun(X186,X189)),X191))))),s(X188,X192)))) )),
  inference(superposition,[],[f340,f358])).
fof(f33984,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X138,bool),'_dst_x0x1_2'(s(fun(X140,bool),X141),s(fun(X138,X140),happ(s(fun(X139,fun(X138,X140)),X142),s(X139,X143))))))) | s(X138,X144) = s(X138,sK4(X144,happ(s(fun(X139,fun(X138,bool)),'_dst_x00x11_2'(s(fun(X140,bool),X141),s(fun(X139,fun(X138,X140)),X142))),s(X139,X143)),X138))) )),
  inference(superposition,[],[f562,f358])).
fof(f33969,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(X24,happ(s(fun(X23,X24),'_dst_x0x1_2'(s(fun(X26,X24),X27),s(fun(X23,X26),happ(s(fun(X25,fun(X23,X26)),X28),s(X25,X29))))),s(X23,X30))) = s(X24,happ(s(fun(X25,X24),'_dst_x1x0_2'(s(fun(X25,fun(X23,X24)),'_dst_x00x11_2'(s(fun(X26,X24),X27),s(fun(X25,fun(X23,X26)),X28))),s(X23,X30))),s(X25,X29)))) )),
  inference(superposition,[],[f341,f358])).
fof(f33944,plain,(
  ( ! [X255,X253,X251,X249,X254,X252,X250,X248] : (s(fun(X248,X249),X255) != s(fun(X248,X249),happ(s(fun(X252,fun(X248,X249)),'_dst_x00x11_2'(s(fun(X250,X249),X251),s(fun(X252,fun(X248,X250)),X253))),s(X252,X254))) | s('type.benchmark.times'(fun(X248,X249)),'const.benchmark.Once_1'(s(fun(X248,X249),X255))) = s('type.benchmark.times'(fun(X248,X249)),'const.benchmark.Once_1'(s(fun(X248,X249),'_dst_x0x1_2'(s(fun(X250,X249),X251),s(fun(X248,X250),happ(s(fun(X252,fun(X248,X250)),X253),s(X252,X254)))))))) )),
  inference(superposition,[],[f303,f358])).
fof(f33942,plain,(
  ( ! [X239,X237,X235,X233,X238,X236,X234,X232] : (s('type.benchmark.times'(fun(X232,X233)),'const.benchmark.Once_1'(s(fun(X232,X233),X239))) != s('type.benchmark.times'(fun(X232,X233)),'const.benchmark.Once_1'(s(fun(X232,X233),happ(s(fun(X236,fun(X232,X233)),'_dst_x00x11_2'(s(fun(X234,X233),X235),s(fun(X236,fun(X232,X234)),X237))),s(X236,X238))))) | s(fun(X232,X233),X239) = s(fun(X232,X233),'_dst_x0x1_2'(s(fun(X234,X233),X235),s(fun(X232,X234),happ(s(fun(X236,fun(X232,X234)),X237),s(X236,X238)))))) )),
  inference(superposition,[],[f302,f358])).
fof(f33930,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X138,bool),happ(s(fun(X141,fun(X138,bool)),'_dst_x00x11_2'(s(fun(X139,bool),X140),s(fun(X141,fun(X138,X139)),X142))),s(X141,X143))))) | s(X138,X144) = s(X138,sK4(X144,'_dst_x0x1_2'(s(fun(X139,bool),X140),s(fun(X138,X139),happ(s(fun(X141,fun(X138,X139)),X142),s(X141,X143)))),X138))) )),
  inference(superposition,[],[f562,f358])).
fof(f33915,plain,(
  ( ! [X30,X28,X26,X24,X23,X29,X27,X25] : (s(X24,happ(s(fun(X25,X24),X26),s(X25,happ(s(fun(X23,X25),happ(s(fun(X27,fun(X23,X25)),X28),s(X27,X29))),s(X23,X30))))) = s(X24,happ(s(fun(X23,X24),happ(s(fun(X27,fun(X23,X24)),'_dst_x00x11_2'(s(fun(X25,X24),X26),s(fun(X27,fun(X23,X25)),X28))),s(X27,X29))),s(X23,X30)))) )),
  inference(superposition,[],[f340,f358])).
fof(f33911,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(fun(X7,X8),'_dst_x0x1_2'(s(fun(X10,X8),X11),s(fun(X7,X10),happ(s(fun(X9,fun(X7,X10)),X12),s(X9,happ(s(fun(X13,X9),X14),s(X13,X15))))))) = s(fun(X7,X8),happ(s(fun(X13,fun(X7,X8)),'_dst_x0x1_2'(s(fun(X9,fun(X7,X8)),'_dst_x00x11_2'(s(fun(X10,X8),X11),s(fun(X9,fun(X7,X10)),X12))),s(fun(X13,X9),X14))),s(X13,X15)))) )),
  inference(superposition,[],[f358,f340])).
fof(f33797,plain,(
  ( ! [X76,X74,X72,X71,X77,X75,X73] : (s(fun(X71,X76),'_dst_x0x1_2'(s(fun(X72,X76),X77),s(fun(X71,X72),'const.ind_type.FCONS_3'(s(fun(X71,X72),X74),s(fun('type.num.num',fun(X71,X72)),X73),s('type.num.num',X75))))) = s(fun(X71,X76),happ(s(fun('type.num.num',fun(X71,X76)),'_dst_x00x11_2'(s(fun(X72,X76),X77),s(fun('type.num.num',fun(X71,X72)),happ(s(fun(fun(X71,X72),fun('type.num.num',fun(X71,X72))),'_dst_x1x0_2'(s(fun(fun(X71,X72),fun(fun('type.num.num',fun(X71,X72)),fun('type.num.num',fun(X71,X72)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X71,X72)),X73))),s(fun(X71,X72),X74))))),s('type.num.num',X75)))) )),
  inference(superposition,[],[f358,f377])).
fof(f33796,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56,X55,X63] : (s(fun(X55,X62),'_dst_x0x1_2'(s(fun(X56,X62),X63),s(fun(X55,X56),happ(s(fun(X58,fun(X55,X56)),happ(s(fun(X57,fun(X58,fun(X55,X56))),X59),s(X57,X61))),s(X58,X60))))) = s(fun(X55,X62),happ(s(fun(X57,fun(X55,X62)),'_dst_x00x11_2'(s(fun(X56,X62),X63),s(fun(X57,fun(X55,X56)),'_dst_x1x0_2'(s(fun(X57,fun(X58,fun(X55,X56))),X59),s(X58,X60))))),s(X57,X61)))) )),
  inference(superposition,[],[f358,f341])).
fof(f33795,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s(fun(X48,X53),'_dst_x0x1_2'(s(fun(X49,X53),X54),s(fun(X48,X49),X51))) = s(fun(X48,X53),happ(s(fun(X50,fun(X48,X53)),'_dst_x00x11_2'(s(fun(X49,X53),X54),s(fun(X50,fun(X48,X49)),'_dst_x0_1'(s(fun(X48,X49),X51))))),s(X50,X52)))) )),
  inference(superposition,[],[f358,f330])).
fof(f33794,plain,(
  ( ! [X39,X47,X45,X43,X41,X46,X44,X42,X40] : (s(fun(X39,X46),'_dst_x0x1_2'(s(fun(X40,X46),X47),s(fun(X39,X40),happ(s(fun(X42,fun(X39,X40)),X43),s(X42,happ(s(fun(X41,X42),X44),s(X41,X45))))))) = s(fun(X39,X46),happ(s(fun(X41,fun(X39,X46)),'_dst_x00x11_2'(s(fun(X40,X46),X47),s(fun(X41,fun(X39,X40)),'_dst_x0x1_2'(s(fun(X42,fun(X39,X40)),X43),s(fun(X41,X42),X44))))),s(X41,X45)))) )),
  inference(superposition,[],[f358,f340])).
fof(f33793,plain,(
  ( ! [X30,X37,X35,X33,X31,X38,X36,X34,X32] : (s(fun(X30,X37),'_dst_x0x1_2'(s(fun(X31,X37),X38),s(fun(X30,X31),happ(s(fun(X33,fun(X30,X31)),'_dst_x1x0_2'(s(fun(X33,fun(X32,fun(X30,X31))),X34),s(X32,X36))),s(X33,X35))))) = s(fun(X30,X37),happ(s(fun(X32,fun(X30,X37)),'_dst_x00x11_2'(s(fun(X31,X37),X38),s(fun(X32,fun(X30,X31)),happ(s(fun(X33,fun(X32,fun(X30,X31))),X34),s(X33,X35))))),s(X32,X36)))) )),
  inference(superposition,[],[f358,f341])).
fof(f33792,plain,(
  ( ! [X28,X26,X24,X23,X21,X29,X27,X25,X22] : (s(fun(X21,X28),happ(s(fun(X23,fun(X21,X28)),'_dst_x00x11_2'(s(fun(X22,X28),X29),s(fun(X23,fun(X21,X22)),X24))),s(X23,happ(s(fun(X25,X23),X26),s(X25,X27))))) = s(fun(X21,X28),'_dst_x0x1_2'(s(fun(X22,X28),X29),s(fun(X21,X22),happ(s(fun(X25,fun(X21,X22)),'_dst_x0x1_2'(s(fun(X23,fun(X21,X22)),X24),s(fun(X25,X23),X26))),s(X25,X27)))))) )),
  inference(superposition,[],[f358,f340])).
fof(f33791,plain,(
  ( ! [X14,X12,X10,X8,X7,X15,X13,X11,X9] : (s(fun(X7,X14),'_dst_x0x1_2'(s(fun(X8,X14),X15),s(fun(X7,X8),'_dst_x0x1_2'(s(fun(X10,X8),X11),s(fun(X7,X10),happ(s(fun(X9,fun(X7,X10)),X12),s(X9,X13))))))) = s(fun(X7,X14),happ(s(fun(X9,fun(X7,X14)),'_dst_x00x11_2'(s(fun(X8,X14),X15),s(fun(X9,fun(X7,X8)),'_dst_x00x11_2'(s(fun(X10,X8),X11),s(fun(X9,fun(X7,X10)),X12))))),s(X9,X13)))) )),
  inference(superposition,[],[f358,f358])).
fof(f33790,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(fun(X0,X1),X5),'_dst_x0x1_2'(s(fun(X1,X5),X6),s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))))) = s(fun(fun(X0,X1),X5),happ(s(fun(X2,fun(fun(X0,X1),X5)),'_dst_x00x11_2'(s(fun(X1,X5),X6),s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))))),s(X2,X4)))) )),
  inference(superposition,[],[f358,f339])).
fof(f33789,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),'_dst_x0x1_2'(s(fun(X2,X1),X3),s(fun(X0,X2),happ(s(fun(X4,fun(X0,X2)),X5),s(X4,X6))))))) = s('type.benchmark.times'(fun(X0,X1)),'const.benchmark.Once_1'(s(fun(X0,X1),happ(s(fun(X4,fun(X0,X1)),'_dst_x00x11_2'(s(fun(X2,X1),X3),s(fun(X4,fun(X0,X2)),X5))),s(X4,X6)))))) )),
  inference(unit_resulting_resolution,[],[f358,f303])).
fof(f33678,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),sK9('?_1',fun(X0,bool))))))) )),
  inference(unit_resulting_resolution,[],[f33088,f318])).
fof(f33701,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(fun(X0,bool),bool),bool),bool),'_dstsel_0_x0_1'(s(fun(fun(X0,bool),bool),'?_1'))),s(fun(fun(fun(X0,bool),bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f33088,f399])).
fof(f33702,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(fun(X0,bool),bool)),'const.benchmark.Once_1'(s(fun(fun(X0,bool),bool),'?_1'))),s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun('type.benchmark.times'(fun(fun(X0,bool),bool)),fun('type.benchmark.times'(fun(fun(X0,bool),bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f33088,f399])).
fof(f33706,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f381,f33088,f1150])).
fof(f33707,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f33088,f1169])).
fof(f33708,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(fun(X1,bool),bool),bool),'?_1'),s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f33088,f4018])).
fof(f33593,plain,(
  ( ! [X127,X128] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X128))) | s(bool,X128) = s(bool,'|dollar|exists_1'(s(fun(fun(X127,bool),bool),'?_1')))) )),
  inference(superposition,[],[f302,f33229])).
fof(f33661,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,'|dollar|exists_1'(s(fun(fun(X48,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(subsumption_resolution,[],[f33540,f246])).
fof(f33540,plain,(
  ( ! [X48,X49] : (~p(s(bool,'T_0')) | s(bool,X49) != s(bool,'|dollar|exists_1'(s(fun(fun(X48,bool),bool),'?_1'))) | s(bool,'T_0') = s(bool,X49)) )),
  inference(superposition,[],[f399,f33229])).
fof(f33431,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s('type.benchmark.times'('type.ind_type.recspace'(X44)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X44),X48))) != s('type.benchmark.times'('type.ind_type.recspace'(X44)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X44),'const.ind_type.CONSTR_3'(s('type.num.num',X45),s(X44,X46),s(fun('type.num.num','type.ind_type.recspace'(X44)),X47))))) | s('type.ind_type.recspace'(X44),X48) = s('type.ind_type.recspace'(X44),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X44)),'type.ind_type.recspace'(X44)),happ(s(fun(X44,fun(fun('type.num.num','type.ind_type.recspace'(X44)),'type.ind_type.recspace'(X44))),'const.ind_type.CONSTR_1'(s('type.num.num',X45))),s(X44,X46))),s(fun('type.num.num','type.ind_type.recspace'(X44)),X47)))) )),
  inference(superposition,[],[f302,f305])).
fof(f33423,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.ind_type.recspace'(X4),'const.ind_type.CONSTR_3'(s('type.num.num',X5),s(X4,X6),s(fun('type.num.num','type.ind_type.recspace'(X4)),X7))) = s('type.ind_type.recspace'(X4),happ(s(fun(X4,'type.ind_type.recspace'(X4)),'_dst_x1x0_2'(s(fun(X4,fun(fun('type.num.num','type.ind_type.recspace'(X4)),'type.ind_type.recspace'(X4))),'const.ind_type.CONSTR_1'(s('type.num.num',X5))),s(fun('type.num.num','type.ind_type.recspace'(X4)),X7))),s(X4,X6)))) )),
  inference(superposition,[],[f305,f341])).
fof(f33465,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(X0,X2))))))) )),
  inference(forward_demodulation,[],[f33464,f340])).
fof(f33464,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s(X0,X2))))) )),
  inference(forward_demodulation,[],[f33463,f31738])).
fof(f33463,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(forward_demodulation,[],[f33315,f341])).
fof(f33315,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.ind_type.recspace'(X0),bool),happ(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))),s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))))) )),
  inference(unit_resulting_resolution,[],[f305,f338])).
fof(f33462,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'('type.ind_type.recspace'(X0)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))) = s('type.benchmark.times'('type.ind_type.recspace'(X0)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X0),happ(s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))),s(X0,X2)))))) )),
  inference(forward_demodulation,[],[f33316,f341])).
fof(f33316,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'('type.ind_type.recspace'(X0)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))))) = s('type.benchmark.times'('type.ind_type.recspace'(X0)),'const.benchmark.Once_1'(s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))))) )),
  inference(unit_resulting_resolution,[],[f305,f303])).
fof(f33229,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f381,f33089,f1150])).
fof(f33230,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f33089,f1169])).
fof(f33231,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(fun(X1,bool),bool),'?_1'))))))))) )),
  inference(unit_resulting_resolution,[],[f33089,f4018])).
fof(f33088,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'?_1'),s(fun(fun(X0,bool),bool),'?_1'))))) )),
  inference(unit_resulting_resolution,[],[f32363,f319])).
fof(f33089,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(fun(X0,bool),bool),'?_1'))))) )),
  inference(unit_resulting_resolution,[],[f32363,f3449])).
fof(f33110,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(fun(X0,bool),bool),bool),'_dstsel_0_x0_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))),s(fun(fun(X0,bool),bool),'?_1')))) )),
  inference(unit_resulting_resolution,[],[f333,f32363,f399])).
fof(f33111,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(fun(X0,bool)),'const.benchmark.Once_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))),s(fun(fun(X0,bool),bool),'?_1'),s(fun('type.benchmark.times'(fun(X0,bool)),fun('type.benchmark.times'(fun(X0,bool)),bool)),X1)))) )),
  inference(unit_resulting_resolution,[],[f335,f32363,f399])).
fof(f33115,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f381,f32363,f1150])).
fof(f33116,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f32363,f1169])).
fof(f33117,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(X1,bool),bool),'?_1'),s(fun(X1,bool),'_dst_x0_1'(s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f32363,f4018])).
fof(f33086,plain,(
  ( ! [X730,X729,X731] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',X730),s(fun('type.num.num','type.num.num'),X729),s('type.num.num',X731))))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X729))),s('type.num.num',X730))),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X731)))))) )),
  inference(forward_demodulation,[],[f32887,f17542])).
fof(f32887,plain,(
  ( ! [X730,X729,X731] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.ind_type.FCONS_3'(s('type.num.num',X730),s(fun('type.num.num','type.num.num'),X729),s('type.num.num',X731))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'_dst_x1x0_2'(s(fun('type.num.num',fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.num.num'),X729))),s('type.num.num',X730))),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X731)))))) )),
  inference(superposition,[],[f296,f377])).
fof(f32881,plain,(
  ( ! [X693,X689,X691,X687,X692,X688,X690] : (s('type.benchmark.times'(X687),'const.benchmark.Twice_2'(s('type.benchmark.times'(X687),X692),s('type.benchmark.times'(X687),X693))) != s('type.benchmark.times'(X687),'const.benchmark.Twice_2'(s('type.benchmark.times'(X687),X691),s('type.benchmark.times'(X687),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X687),X689),s(fun('type.num.num','type.benchmark.times'(X687)),X688),s('type.num.num',X690))))) | s('type.benchmark.times'(X687),X693) = s('type.benchmark.times'(X687),happ(s(fun('type.num.num','type.benchmark.times'(X687)),happ(s(fun('type.benchmark.times'(X687),fun('type.num.num','type.benchmark.times'(X687))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X687),fun(fun('type.num.num','type.benchmark.times'(X687)),fun('type.num.num','type.benchmark.times'(X687)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X687)),X688))),s('type.benchmark.times'(X687),X689))),s('type.num.num',X690)))) )),
  inference(superposition,[],[f309,f377])).
fof(f32878,plain,(
  ( ! [X666,X668,X670,X667,X669,X671,X672] : (s('type.benchmark.times'(X666),'const.benchmark.Twice_2'(s('type.benchmark.times'(X666),X671),s('type.benchmark.times'(X666),X672))) != s('type.benchmark.times'(X666),'const.benchmark.Twice_2'(s('type.benchmark.times'(X666),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X666),X668),s(fun('type.num.num','type.benchmark.times'(X666)),X667),s('type.num.num',X669))),s('type.benchmark.times'(X666),X670))) | s('type.benchmark.times'(X666),X671) = s('type.benchmark.times'(X666),happ(s(fun('type.num.num','type.benchmark.times'(X666)),happ(s(fun('type.benchmark.times'(X666),fun('type.num.num','type.benchmark.times'(X666))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X666),fun(fun('type.num.num','type.benchmark.times'(X666)),fun('type.num.num','type.benchmark.times'(X666)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(X666)),X667))),s('type.benchmark.times'(X666),X668))),s('type.num.num',X669)))) )),
  inference(superposition,[],[f308,f377])).
fof(f32868,plain,(
  ( ! [X617,X615,X616,X618] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X618),s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X616),s(fun('type.num.num','type.benchmark.times'(sK0)),X615),s('type.num.num',X617))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.num.num','type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num','type.benchmark.times'(sK0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(sK0),fun(fun('type.num.num','type.benchmark.times'(sK0)),fun('type.num.num','type.benchmark.times'(sK0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(sK0)),X615))),s('type.benchmark.times'(sK0),X616))),s('type.num.num',X617)))) )),
  inference(superposition,[],[f17086,f377])).
fof(f32859,plain,(
  ( ! [X573,X575,X576,X574] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X574),s(fun('type.num.num','type.benchmark.times'(sK0)),X573),s('type.num.num',X575))),s('type.benchmark.times'(sK0),X576))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.num.num','type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.num.num','type.benchmark.times'(sK0))),'_dst_x1x0_2'(s(fun('type.benchmark.times'(sK0),fun(fun('type.num.num','type.benchmark.times'(sK0)),fun('type.num.num','type.benchmark.times'(sK0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.benchmark.times'(sK0)),X573))),s('type.benchmark.times'(sK0),X574))),s('type.num.num',X575)))) )),
  inference(superposition,[],[f16999,f377])).
fof(f32839,plain,(
  ( ! [X461,X463,X459,X460,X462,X458] : (s(X459,happ(s(fun(X458,X459),'const.ind_type.FCONS_3'(s(fun(X458,X459),X461),s(fun('type.num.num',fun(X458,X459)),X460),s('type.num.num',X462))),s(X458,X463))) = s(X459,happ(s(fun('type.num.num',X459),'_dst_x1x0_2'(s(fun('type.num.num',fun(X458,X459)),happ(s(fun(fun(X458,X459),fun('type.num.num',fun(X458,X459))),'_dst_x1x0_2'(s(fun(fun(X458,X459),fun(fun('type.num.num',fun(X458,X459)),fun('type.num.num',fun(X458,X459)))),'const.ind_type.FCONS_0'),s(fun('type.num.num',fun(X458,X459)),X460))),s(fun(X458,X459),X461))),s(X458,X463))),s('type.num.num',X462)))) )),
  inference(superposition,[],[f341,f377])).
fof(f33033,plain,(
  ( ! [X265,X267,X264,X266] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X267),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X264))),s(bool,X265))))),s('type.num.num',X266)))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X265),s(fun('type.num.num',bool),X264),s('type.num.num',X266))))) )),
  inference(forward_demodulation,[],[f32785,f359])).
fof(f32785,plain,(
  ( ! [X265,X267,X264,X266] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X265),s(fun('type.num.num',bool),X264),s('type.num.num',X266)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X267))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X264))),s(bool,X265))),s('type.num.num',X266))))))) )),
  inference(superposition,[],[f328,f377])).
fof(f33030,plain,(
  ( ! [X251,X249,X250,X248] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X251),s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X248))),s(bool,X249))))),s('type.num.num',X250)))) | ~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X249),s(fun('type.num.num',bool),X248),s('type.num.num',X250))))) )),
  inference(forward_demodulation,[],[f32781,f359])).
fof(f32781,plain,(
  ( ! [X251,X249,X250,X248] : (~p(s(bool,'const.ind_type.FCONS_3'(s(bool,X249),s(fun('type.num.num',bool),X248),s('type.num.num',X250)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X251))),s(bool,happ(s(fun('type.num.num',bool),happ(s(fun(bool,fun('type.num.num',bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num',bool),fun('type.num.num',bool))),'const.ind_type.FCONS_0'),s(fun('type.num.num',bool),X248))),s(bool,X249))),s('type.num.num',X250))))))) )),
  inference(superposition,[],[f325,f377])).
fof(f32737,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s('type.benchmark.times'(X44),'const.benchmark.Once_1'(s(X44,X48))) != s('type.benchmark.times'(X44),'const.benchmark.Once_1'(s(X44,'const.ind_type.FCONS_3'(s(X44,X46),s(fun('type.num.num',X44),X45),s('type.num.num',X47))))) | s(X44,X48) = s(X44,happ(s(fun('type.num.num',X44),happ(s(fun(X44,fun('type.num.num',X44)),'_dst_x1x0_2'(s(fun(X44,fun(fun('type.num.num',X44),fun('type.num.num',X44))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X44),X45))),s(X44,X46))),s('type.num.num',X47)))) )),
  inference(superposition,[],[f302,f377])).
fof(f32729,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X4,happ(s(fun(X0,X4),X5),s(X0,'const.ind_type.FCONS_3'(s(X0,X2),s(fun('type.num.num',X0),X1),s('type.num.num',X3))))) = s(X4,happ(s(fun('type.num.num',X4),'_dst_x0x1_2'(s(fun(X0,X4),X5),s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X1))),s(X0,X2))))),s('type.num.num',X3)))) )),
  inference(superposition,[],[f340,f377])).
fof(f32708,plain,(
  ( ! [X6,X4,X7,X5] : (s(X4,'const.ind_type.FCONS_3'(s(X4,X6),s(fun('type.num.num',X4),X5),s('type.num.num',X7))) = s(X4,happ(s(fun(X4,X4),'_dst_x1x0_2'(s(fun(X4,fun('type.num.num',X4)),'_dst_x1x0_2'(s(fun(X4,fun(fun('type.num.num',X4),fun('type.num.num',X4))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X4),X5))),s('type.num.num',X7))),s(X4,X6)))) )),
  inference(superposition,[],[f377,f341])).
fof(f32949,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))),s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))))),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f32551,f359])).
fof(f32551,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))),s('type.num.num',X3))))))) )),
  inference(unit_resulting_resolution,[],[f377,f338])).
fof(f32363,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(X0,bool),bool),'?_1'),s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f246,f4018])).
fof(f32053,plain,(
  ( ! [X1019,X1017,X1021,X1018,X1020] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X1017,'type.num.num'),happ(s(fun(X1018,fun(X1017,'type.num.num')),X1019),s(X1018,X1020))),s('type.benchmark.times'(X1017),'const.benchmark.Once_1'(s(X1017,X1021))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X1018,'type.num.num'),'_dst_x1x0_2'(s(fun(X1018,fun(X1017,'type.num.num')),X1019),s(X1017,X1021))),s(X1018,X1020)))))) )),
  inference(superposition,[],[f296,f341])).
fof(f32051,plain,(
  ( ! [X1002,X1000,X1006,X1004,X1003,X1001,X1007,X1005,X999] : (s('type.benchmark.times'(X999),X1005) != s('type.benchmark.times'(X999),happ(s(fun(X1001,'type.benchmark.times'(X999)),'_dst_x1x0_2'(s(fun(X1001,fun(X1000,'type.benchmark.times'(X999))),X1002),s(X1000,X1004))),s(X1001,X1003))) | s('type.benchmark.times'(X999),X1006) != s('type.benchmark.times'(X999),X1007) | s('type.benchmark.times'(X999),'const.benchmark.Twice_2'(s('type.benchmark.times'(X999),X1005),s('type.benchmark.times'(X999),X1007))) = s('type.benchmark.times'(X999),'const.benchmark.Twice_2'(s('type.benchmark.times'(X999),happ(s(fun(X1000,'type.benchmark.times'(X999)),happ(s(fun(X1001,fun(X1000,'type.benchmark.times'(X999))),X1002),s(X1001,X1003))),s(X1000,X1004))),s('type.benchmark.times'(X999),X1006)))) )),
  inference(superposition,[],[f310,f341])).
fof(f32047,plain,(
  ( ! [X971,X969,X963,X967,X965,X970,X968,X966,X964] : (s('type.benchmark.times'(X963),'const.benchmark.Twice_2'(s('type.benchmark.times'(X963),X970),s('type.benchmark.times'(X963),X971))) != s('type.benchmark.times'(X963),'const.benchmark.Twice_2'(s('type.benchmark.times'(X963),X969),s('type.benchmark.times'(X963),happ(s(fun(X965,'type.benchmark.times'(X963)),'_dst_x1x0_2'(s(fun(X965,fun(X964,'type.benchmark.times'(X963))),X966),s(X964,X968))),s(X965,X967))))) | s('type.benchmark.times'(X963),X971) = s('type.benchmark.times'(X963),happ(s(fun(X964,'type.benchmark.times'(X963)),happ(s(fun(X965,fun(X964,'type.benchmark.times'(X963))),X966),s(X965,X967))),s(X964,X968)))) )),
  inference(superposition,[],[f309,f341])).
fof(f32044,plain,(
  ( ! [X938,X936,X942,X940,X944,X939,X937,X943,X941] : (s('type.benchmark.times'(X936),'const.benchmark.Twice_2'(s('type.benchmark.times'(X936),X943),s('type.benchmark.times'(X936),X944))) != s('type.benchmark.times'(X936),'const.benchmark.Twice_2'(s('type.benchmark.times'(X936),happ(s(fun(X938,'type.benchmark.times'(X936)),'_dst_x1x0_2'(s(fun(X938,fun(X937,'type.benchmark.times'(X936))),X939),s(X937,X941))),s(X938,X940))),s('type.benchmark.times'(X936),X942))) | s('type.benchmark.times'(X936),X943) = s('type.benchmark.times'(X936),happ(s(fun(X937,'type.benchmark.times'(X936)),happ(s(fun(X938,fun(X937,'type.benchmark.times'(X936))),X939),s(X938,X940))),s(X937,X941)))) )),
  inference(superposition,[],[f308,f341])).
fof(f32038,plain,(
  ( ! [X899,X897,X901,X898,X896,X902,X900] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X901),s('type.benchmark.times'(sK0),happ(s(fun(X897,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X897,fun(X896,'type.benchmark.times'(sK0))),X898),s(X896,X900))),s(X897,X899))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X896,'type.benchmark.times'(sK0)),happ(s(fun(X897,fun(X896,'type.benchmark.times'(sK0))),X898),s(X897,X899))),s(X896,X900))),s(fun('type.num.num','type.benchmark.times'(sK0)),X902),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f341])).
fof(f32036,plain,(
  ( ! [X883,X881,X887,X885,X882,X880,X886,X884] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X885),s('type.benchmark.times'(sK0),happ(s(fun(X881,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X881,fun(X880,'type.benchmark.times'(sK0))),X882),s(X880,X884))),s(X881,X883))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X886,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X880,'type.benchmark.times'(sK0)),happ(s(fun(X881,fun(X880,'type.benchmark.times'(sK0))),X882),s(X881,X883))),s(X880,X884))))),s(X886,X887)))) )),
  inference(superposition,[],[f17121,f341])).
fof(f32034,plain,(
  ( ! [X872,X870,X868,X873,X871,X869] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X873),s('type.benchmark.times'(sK0),happ(s(fun(X869,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X869,fun(X868,'type.benchmark.times'(sK0))),X870),s(X868,X872))),s(X869,X871))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X868,'type.benchmark.times'(sK0)),happ(s(fun(X869,fun(X868,'type.benchmark.times'(sK0))),X870),s(X869,X871))),s(X868,X872)))))) )),
  inference(superposition,[],[f17120,f341])).
fof(f32033,plain,(
  ( ! [X866,X864,X863,X867,X865,X862] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X867),s('type.benchmark.times'(sK0),happ(s(fun(X863,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X863,fun(X862,'type.benchmark.times'(sK0))),X864),s(X862,X866))),s(X863,X865))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X862,'type.benchmark.times'(sK0)),happ(s(fun(X863,fun(X862,'type.benchmark.times'(sK0))),X864),s(X863,X865))),s(X862,X866)))) )),
  inference(superposition,[],[f17086,f341])).
fof(f32030,plain,(
  ( ! [X848,X843,X847,X845,X842,X846,X844] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X843,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X843,fun(X842,'type.benchmark.times'(sK0))),X844),s(X842,X846))),s(X843,X845))),s('type.benchmark.times'(sK0),X847))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X842,'type.benchmark.times'(sK0)),happ(s(fun(X843,fun(X842,'type.benchmark.times'(sK0))),X844),s(X843,X845))),s(X842,X846))),s(fun('type.num.num','type.benchmark.times'(sK0)),X848),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f341])).
fof(f32028,plain,(
  ( ! [X831,X829,X833,X826,X830,X828,X832,X827] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X827,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X827,fun(X826,'type.benchmark.times'(sK0))),X828),s(X826,X830))),s(X827,X829))),s('type.benchmark.times'(sK0),X831))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X832,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X826,'type.benchmark.times'(sK0)),happ(s(fun(X827,fun(X826,'type.benchmark.times'(sK0))),X828),s(X827,X829))),s(X826,X830))))),s(X832,X833)))) )),
  inference(superposition,[],[f17026,f341])).
fof(f32026,plain,(
  ( ! [X819,X817,X814,X818,X816,X815] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X815,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X815,fun(X814,'type.benchmark.times'(sK0))),X816),s(X814,X818))),s(X815,X817))),s('type.benchmark.times'(sK0),X819))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X814,'type.benchmark.times'(sK0)),happ(s(fun(X815,fun(X814,'type.benchmark.times'(sK0))),X816),s(X815,X817))),s(X814,X818)))))) )),
  inference(superposition,[],[f17025,f341])).
fof(f32024,plain,(
  ( ! [X802,X806,X804,X803,X807,X805] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X803,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X803,fun(X802,'type.benchmark.times'(sK0))),X804),s(X802,X806))),s(X803,X805))),s('type.benchmark.times'(sK0),X807))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X802,'type.benchmark.times'(sK0)),happ(s(fun(X803,fun(X802,'type.benchmark.times'(sK0))),X804),s(X803,X805))),s(X802,X806)))) )),
  inference(superposition,[],[f16999,f341])).
fof(f32020,plain,(
  ( ! [X777,X775,X773,X778,X776,X774,X772] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X772,bool),happ(s(fun(X774,fun(X772,bool)),'_dst_x1x0_2'(s(fun(X774,fun(X773,fun(X772,bool))),X775),s(X773,X777))),s(X774,X776))))) | s(X772,X778) = s(X772,sK4(X778,happ(s(fun(X773,fun(X772,bool)),happ(s(fun(X774,fun(X773,fun(X772,bool))),X775),s(X774,X776))),s(X773,X777)),X772))) )),
  inference(superposition,[],[f562,f341])).
fof(f32188,plain,(
  ( ! [X420,X416,X418,X417,X419] : (s(bool,'T_0') != s(bool,happ(s(fun(X417,bool),'_dst_x1x0_2'(s(fun(X417,fun(X416,bool)),X418),s(X416,X420))),s(X417,X419))) | s(bool,'T_0') = s(bool,happ(s(fun(X416,bool),happ(s(fun(X417,fun(X416,bool)),X418),s(X417,X419))),s(X416,X420)))) )),
  inference(forward_demodulation,[],[f31961,f289])).
fof(f31961,plain,(
  ( ! [X420,X422,X416,X418,X421,X417,X419] : (s(bool,'const.bool.DATATYPE_1'(s(X421,X422))) != s(bool,happ(s(fun(X417,bool),'_dst_x1x0_2'(s(fun(X417,fun(X416,bool)),X418),s(X416,X420))),s(X417,X419))) | s(bool,'T_0') = s(bool,happ(s(fun(X416,bool),happ(s(fun(X417,fun(X416,bool)),X418),s(X417,X419))),s(X416,X420)))) )),
  inference(superposition,[],[f554,f341])).
fof(f31903,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s(X70,X76) != s(X70,happ(s(fun(X72,X70),'_dst_x1x0_2'(s(fun(X72,fun(X71,X70)),X73),s(X71,X75))),s(X72,X74))) | s('type.benchmark.times'(X70),'const.benchmark.Once_1'(s(X70,X76))) = s('type.benchmark.times'(X70),'const.benchmark.Once_1'(s(X70,happ(s(fun(X71,X70),happ(s(fun(X72,fun(X71,X70)),X73),s(X72,X74))),s(X71,X75)))))) )),
  inference(superposition,[],[f303,f341])).
fof(f31901,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56] : (s('type.benchmark.times'(X56),'const.benchmark.Once_1'(s(X56,X62))) != s('type.benchmark.times'(X56),'const.benchmark.Once_1'(s(X56,happ(s(fun(X58,X56),'_dst_x1x0_2'(s(fun(X58,fun(X57,X56)),X59),s(X57,X61))),s(X58,X60))))) | s(X56,X62) = s(X56,happ(s(fun(X57,X56),happ(s(fun(X58,fun(X57,X56)),X59),s(X58,X60))),s(X57,X61)))) )),
  inference(superposition,[],[f302,f341])).
fof(f31893,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X6,happ(s(fun(X0,X6),X7),s(X0,happ(s(fun(X2,X0),'_dst_x1x0_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X5))),s(X2,X4))))) = s(X6,happ(s(fun(X1,X6),'_dst_x0x1_2'(s(fun(X0,X6),X7),s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))))),s(X1,X5)))) )),
  inference(superposition,[],[f340,f341])).
fof(f31891,plain,(
  ( ! [X1002,X1000,X1004,X1003,X1001] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X1000,'type.num.num'),'_dst_x1x0_2'(s(fun(X1000,fun(X1001,'type.num.num')),X1002),s(X1001,X1003))),s('type.benchmark.times'(X1000),'const.benchmark.Once_1'(s(X1000,X1004))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X1001,'type.num.num'),happ(s(fun(X1000,fun(X1001,'type.num.num')),X1002),s(X1000,X1004))),s(X1001,X1003)))))) )),
  inference(superposition,[],[f296,f341])).
fof(f31889,plain,(
  ( ! [X984,X990,X988,X982,X987,X985,X989,X983,X986] : (s('type.benchmark.times'(X982),X988) != s('type.benchmark.times'(X982),happ(s(fun(X984,'type.benchmark.times'(X982)),happ(s(fun(X983,fun(X984,'type.benchmark.times'(X982))),X985),s(X983,X987))),s(X984,X986))) | s('type.benchmark.times'(X982),X989) != s('type.benchmark.times'(X982),X990) | s('type.benchmark.times'(X982),'const.benchmark.Twice_2'(s('type.benchmark.times'(X982),X988),s('type.benchmark.times'(X982),X990))) = s('type.benchmark.times'(X982),'const.benchmark.Twice_2'(s('type.benchmark.times'(X982),happ(s(fun(X983,'type.benchmark.times'(X982)),'_dst_x1x0_2'(s(fun(X983,fun(X984,'type.benchmark.times'(X982))),X985),s(X984,X986))),s(X983,X987))),s('type.benchmark.times'(X982),X989)))) )),
  inference(superposition,[],[f310,f341])).
fof(f31885,plain,(
  ( ! [X947,X951,X949,X954,X952,X946,X950,X948,X953] : (s('type.benchmark.times'(X946),'const.benchmark.Twice_2'(s('type.benchmark.times'(X946),X953),s('type.benchmark.times'(X946),X954))) != s('type.benchmark.times'(X946),'const.benchmark.Twice_2'(s('type.benchmark.times'(X946),X952),s('type.benchmark.times'(X946),happ(s(fun(X948,'type.benchmark.times'(X946)),happ(s(fun(X947,fun(X948,'type.benchmark.times'(X946))),X949),s(X947,X951))),s(X948,X950))))) | s('type.benchmark.times'(X946),X954) = s('type.benchmark.times'(X946),happ(s(fun(X947,'type.benchmark.times'(X946)),'_dst_x1x0_2'(s(fun(X947,fun(X948,'type.benchmark.times'(X946))),X949),s(X948,X950))),s(X947,X951)))) )),
  inference(superposition,[],[f309,f341])).
fof(f31882,plain,(
  ( ! [X922,X920,X926,X924,X923,X921,X919,X927,X925] : (s('type.benchmark.times'(X919),'const.benchmark.Twice_2'(s('type.benchmark.times'(X919),X926),s('type.benchmark.times'(X919),X927))) != s('type.benchmark.times'(X919),'const.benchmark.Twice_2'(s('type.benchmark.times'(X919),happ(s(fun(X921,'type.benchmark.times'(X919)),happ(s(fun(X920,fun(X921,'type.benchmark.times'(X919))),X922),s(X920,X924))),s(X921,X923))),s('type.benchmark.times'(X919),X925))) | s('type.benchmark.times'(X919),X926) = s('type.benchmark.times'(X919),happ(s(fun(X920,'type.benchmark.times'(X919)),'_dst_x1x0_2'(s(fun(X920,fun(X921,'type.benchmark.times'(X919))),X922),s(X921,X923))),s(X920,X924)))) )),
  inference(superposition,[],[f308,f341])).
fof(f31877,plain,(
  ( ! [X883,X887,X885,X888,X882,X886,X884] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X887),s('type.benchmark.times'(sK0),happ(s(fun(X883,'type.benchmark.times'(sK0)),happ(s(fun(X882,fun(X883,'type.benchmark.times'(sK0))),X884),s(X882,X886))),s(X883,X885))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X882,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X882,fun(X883,'type.benchmark.times'(sK0))),X884),s(X883,X885))),s(X882,X886))),s(fun('type.num.num','type.benchmark.times'(sK0)),X888),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f341])).
fof(f31875,plain,(
  ( ! [X872,X866,X870,X868,X873,X867,X871,X869] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X871),s('type.benchmark.times'(sK0),happ(s(fun(X867,'type.benchmark.times'(sK0)),happ(s(fun(X866,fun(X867,'type.benchmark.times'(sK0))),X868),s(X866,X870))),s(X867,X869))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X872,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X866,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X866,fun(X867,'type.benchmark.times'(sK0))),X868),s(X867,X869))),s(X866,X870))))),s(X872,X873)))) )),
  inference(superposition,[],[f17121,f341])).
fof(f31873,plain,(
  ( ! [X854,X859,X857,X855,X858,X856] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X859),s('type.benchmark.times'(sK0),happ(s(fun(X855,'type.benchmark.times'(sK0)),happ(s(fun(X854,fun(X855,'type.benchmark.times'(sK0))),X856),s(X854,X858))),s(X855,X857))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X854,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X854,fun(X855,'type.benchmark.times'(sK0))),X856),s(X855,X857))),s(X854,X858)))))) )),
  inference(superposition,[],[f17120,f341])).
fof(f31872,plain,(
  ( ! [X850,X848,X852,X851,X849,X853] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X853),s('type.benchmark.times'(sK0),happ(s(fun(X849,'type.benchmark.times'(sK0)),happ(s(fun(X848,fun(X849,'type.benchmark.times'(sK0))),X850),s(X848,X852))),s(X849,X851))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X848,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X848,fun(X849,'type.benchmark.times'(sK0))),X850),s(X849,X851))),s(X848,X852)))) )),
  inference(superposition,[],[f17086,f341])).
fof(f31869,plain,(
  ( ! [X831,X829,X833,X830,X828,X834,X832] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X829,'type.benchmark.times'(sK0)),happ(s(fun(X828,fun(X829,'type.benchmark.times'(sK0))),X830),s(X828,X832))),s(X829,X831))),s('type.benchmark.times'(sK0),X833))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X828,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X828,fun(X829,'type.benchmark.times'(sK0))),X830),s(X829,X831))),s(X828,X832))),s(fun('type.num.num','type.benchmark.times'(sK0)),X834),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f341])).
fof(f31867,plain,(
  ( ! [X819,X817,X814,X812,X818,X816,X815,X813] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X813,'type.benchmark.times'(sK0)),happ(s(fun(X812,fun(X813,'type.benchmark.times'(sK0))),X814),s(X812,X816))),s(X813,X815))),s('type.benchmark.times'(sK0),X817))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X818,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X812,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X812,fun(X813,'type.benchmark.times'(sK0))),X814),s(X813,X815))),s(X812,X816))))),s(X818,X819)))) )),
  inference(superposition,[],[f17026,f341])).
fof(f31865,plain,(
  ( ! [X802,X800,X804,X803,X801,X805] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X801,'type.benchmark.times'(sK0)),happ(s(fun(X800,fun(X801,'type.benchmark.times'(sK0))),X802),s(X800,X804))),s(X801,X803))),s('type.benchmark.times'(sK0),X805))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X800,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X800,fun(X801,'type.benchmark.times'(sK0))),X802),s(X801,X803))),s(X800,X804)))))) )),
  inference(superposition,[],[f17025,f341])).
fof(f31863,plain,(
  ( ! [X790,X788,X793,X791,X789,X792] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X789,'type.benchmark.times'(sK0)),happ(s(fun(X788,fun(X789,'type.benchmark.times'(sK0))),X790),s(X788,X792))),s(X789,X791))),s('type.benchmark.times'(sK0),X793))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X788,'type.benchmark.times'(sK0)),'_dst_x1x0_2'(s(fun(X788,fun(X789,'type.benchmark.times'(sK0))),X790),s(X789,X791))),s(X788,X792)))) )),
  inference(superposition,[],[f16999,f341])).
fof(f31859,plain,(
  ( ! [X761,X763,X759,X764,X760,X762,X758] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X758,bool),happ(s(fun(X760,fun(X758,bool)),happ(s(fun(X759,fun(X760,fun(X758,bool))),X761),s(X759,X763))),s(X760,X762))))) | s(X758,X764) = s(X758,sK4(X764,happ(s(fun(X759,fun(X758,bool)),'_dst_x1x0_2'(s(fun(X759,fun(X760,fun(X758,bool))),X761),s(X760,X762))),s(X759,X763)),X758))) )),
  inference(superposition,[],[f562,f341])).
fof(f32166,plain,(
  ( ! [X405,X403,X404,X406,X402] : (s(bool,'T_0') != s(bool,happ(s(fun(X403,bool),happ(s(fun(X402,fun(X403,bool)),X404),s(X402,X406))),s(X403,X405))) | s(bool,'T_0') = s(bool,happ(s(fun(X402,bool),'_dst_x1x0_2'(s(fun(X402,fun(X403,bool)),X404),s(X403,X405))),s(X402,X406)))) )),
  inference(forward_demodulation,[],[f31800,f289])).
fof(f31800,plain,(
  ( ! [X408,X405,X407,X403,X404,X406,X402] : (s(bool,'const.bool.DATATYPE_1'(s(X407,X408))) != s(bool,happ(s(fun(X403,bool),happ(s(fun(X402,fun(X403,bool)),X404),s(X402,X406))),s(X403,X405))) | s(bool,'T_0') = s(bool,happ(s(fun(X402,bool),'_dst_x1x0_2'(s(fun(X402,fun(X403,bool)),X404),s(X403,X405))),s(X402,X406)))) )),
  inference(superposition,[],[f554,f341])).
fof(f31748,plain,(
  ( ! [X70,X76,X74,X72,X71,X75,X73] : (s(X70,X76) != s(X70,happ(s(fun(X72,X70),happ(s(fun(X71,fun(X72,X70)),X73),s(X71,X75))),s(X72,X74))) | s('type.benchmark.times'(X70),'const.benchmark.Once_1'(s(X70,X76))) = s('type.benchmark.times'(X70),'const.benchmark.Once_1'(s(X70,happ(s(fun(X71,X70),'_dst_x1x0_2'(s(fun(X71,fun(X72,X70)),X73),s(X72,X74))),s(X71,X75)))))) )),
  inference(superposition,[],[f303,f341])).
fof(f31746,plain,(
  ( ! [X61,X59,X57,X62,X60,X58,X56] : (s('type.benchmark.times'(X56),'const.benchmark.Once_1'(s(X56,X62))) != s('type.benchmark.times'(X56),'const.benchmark.Once_1'(s(X56,happ(s(fun(X58,X56),happ(s(fun(X57,fun(X58,X56)),X59),s(X57,X61))),s(X58,X60))))) | s(X56,X62) = s(X56,happ(s(fun(X57,X56),'_dst_x1x0_2'(s(fun(X57,fun(X58,X56)),X59),s(X58,X60))),s(X57,X61)))) )),
  inference(superposition,[],[f302,f341])).
fof(f31738,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X6,happ(s(fun(X0,X6),X7),s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4))))) = s(X6,happ(s(fun(X1,X6),'_dst_x0x1_2'(s(fun(X0,X6),X7),s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))))),s(X1,X5)))) )),
  inference(superposition,[],[f340,f341])).
fof(f31737,plain,(
  ( ! [X127,X128,X126] : (s('type.benchmark.times'(X126),'const.benchmark.Twice_2'(s('type.benchmark.times'(X126),X127),s('type.benchmark.times'(X126),X128))) = s('type.benchmark.times'(X126),happ(s(fun('type.benchmark.times'(X126),'type.benchmark.times'(X126)),'_dst_x1x0_2'(s(fun('type.benchmark.times'(X126),fun('type.benchmark.times'(X126),'type.benchmark.times'(X126))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X126),X128))),s('type.benchmark.times'(X126),X127)))) )),
  inference(superposition,[],[f341,f297])).
fof(f31716,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun(X8,X6),'_dst_x1x0_2'(s(fun(X8,fun(X7,X6)),X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))))),s(X8,X10))) = s(X6,happ(s(fun(X11,X6),'_dst_x0x1_2'(s(fun(X7,X6),happ(s(fun(X8,fun(X7,X6)),X9),s(X8,X10))),s(fun(X11,X7),X12))),s(X11,X13)))) )),
  inference(superposition,[],[f341,f340])).
fof(f31637,plain,(
  ( ! [X47,X45,X43,X41,X46,X44,X42,X40] : (s(X41,happ(s(fun(X40,X41),happ(s(fun(X43,fun(X40,X41)),happ(s(fun(X42,fun(X43,fun(X40,X41))),X44),s(X42,X46))),s(X43,X45))),s(X40,X47))) = s(X41,happ(s(fun(X42,X41),'_dst_x1x0_2'(s(fun(X42,fun(X40,X41)),'_dst_x1x0_2'(s(fun(X42,fun(X43,fun(X40,X41))),X44),s(X43,X45))),s(X40,X47))),s(X42,X46)))) )),
  inference(superposition,[],[f341,f341])).
fof(f31636,plain,(
  ( ! [X39,X37,X35,X38,X36,X34] : (s(X35,happ(s(fun(X34,X35),X37),s(X34,X39))) = s(X35,happ(s(fun(X36,X35),'_dst_x1x0_2'(s(fun(X36,fun(X34,X35)),'_dst_x0_1'(s(fun(X34,X35),X37))),s(X34,X39))),s(X36,X38)))) )),
  inference(superposition,[],[f341,f330])).
fof(f31635,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X32] : (s(X27,happ(s(fun(X26,X27),happ(s(fun(X29,fun(X26,X27)),X30),s(X29,happ(s(fun(X28,X29),X31),s(X28,X32))))),s(X26,X33))) = s(X27,happ(s(fun(X28,X27),'_dst_x1x0_2'(s(fun(X28,fun(X26,X27)),'_dst_x0x1_2'(s(fun(X29,fun(X26,X27)),X30),s(fun(X28,X29),X31))),s(X26,X33))),s(X28,X32)))) )),
  inference(superposition,[],[f341,f340])).
fof(f31634,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X19,happ(s(fun(X18,X19),happ(s(fun(X21,fun(X18,X19)),'_dst_x1x0_2'(s(fun(X21,fun(X20,fun(X18,X19))),X22),s(X20,X24))),s(X21,X23))),s(X18,X25))) = s(X19,happ(s(fun(X20,X19),'_dst_x1x0_2'(s(fun(X20,fun(X18,X19)),happ(s(fun(X21,fun(X20,fun(X18,X19))),X22),s(X21,X23))),s(X18,X25))),s(X20,X24)))) )),
  inference(superposition,[],[f341,f341])).
fof(f31633,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X11,happ(s(fun(X12,X11),'_dst_x1x0_2'(s(fun(X12,fun(X10,X11)),X13),s(X10,X17))),s(X12,happ(s(fun(X14,X12),X15),s(X14,X16))))) = s(X11,happ(s(fun(X10,X11),happ(s(fun(X14,fun(X10,X11)),'_dst_x0x1_2'(s(fun(X12,fun(X10,X11)),X13),s(fun(X14,X12),X15))),s(X14,X16))),s(X10,X17)))) )),
  inference(superposition,[],[f341,f340])).
fof(f32154,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(X0,X1),X5),s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))) = s(X1,happ(s(fun(X2,X1),'_dst_x1x0_2'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X0,X1),X5))),s(X2,X4)))) )),
  inference(forward_demodulation,[],[f31632,f333])).
fof(f31632,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X1,happ(s(fun(fun(X0,X1),X1),'_dstsel_0_x0_1'(s(X0,happ(s(fun(X2,X0),X3),s(X2,X4))))),s(fun(X0,X1),X5))) = s(X1,happ(s(fun(X2,X1),'_dst_x1x0_2'(s(fun(X2,fun(fun(X0,X1),X1)),'_dstsel_1_x10_1'(s(fun(X2,X0),X3))),s(fun(X0,X1),X5))),s(X2,X4)))) )),
  inference(superposition,[],[f341,f339])).
fof(f31524,plain,(
  ( ! [X30,X28,X26,X29,X27,X25] : (s(bool,X30) = s(bool,happ(s(fun(X26,bool),happ(s(fun(X25,fun(X26,bool)),X27),s(X25,X29))),s(X26,X28))) | s(bool,'T_0') = s(bool,X30) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),'_dst_x1x0_2'(s(fun(X25,fun(X26,bool)),X27),s(X26,X28))),s(X25,X29)))) )),
  inference(superposition,[],[f341,f396])).
fof(f31523,plain,(
  ( ! [X24,X23,X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,happ(s(fun(X20,bool),happ(s(fun(X19,fun(X20,bool)),X21),s(X19,X23))),s(X20,X22))) | s(bool,X24) = s(bool,happ(s(fun(X19,bool),'_dst_x1x0_2'(s(fun(X19,fun(X20,bool)),X21),s(X20,X22))),s(X19,X23))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f341,f396])).
fof(f31521,plain,(
  ( ! [X6,X12,X10,X8,X7,X13,X11,X9] : (s(X6,happ(s(fun(X8,X6),happ(s(fun(X7,fun(X8,X6)),X9),s(X7,happ(s(fun(X11,X7),X12),s(X11,X13))))),s(X8,X10))) = s(X6,happ(s(fun(X11,X6),'_dst_x0x1_2'(s(fun(X7,X6),'_dst_x1x0_2'(s(fun(X7,fun(X8,X6)),X9),s(X8,X10))),s(fun(X11,X7),X12))),s(X11,X13)))) )),
  inference(superposition,[],[f341,f340])).
fof(f31483,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X6,'type.benchmark.times'(X0))),X8),s(X7,X9))),s(X6,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X7,fun(X6,'type.benchmark.times'(X0))),X8),s(X6,X10))),s(X7,X9)))))) )),
  inference(unit_resulting_resolution,[],[f340,f341,f310])).
fof(f32092,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X3,X5))),s(X2,X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X6))),s(X3,X5)))))) )),
  inference(forward_demodulation,[],[f31491,f295])).
fof(f31491,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X3,X5))),s(X2,X6))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X7),s('type.num.num','const.num.|48|_0'))),s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X3,'type.benchmark.times'(X0))),X4),s(X2,X6))),s(X3,X5)))))) )),
  inference(unit_resulting_resolution,[],[f295,f341,f310])).
fof(f31494,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X7,X9))),s(X6,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),happ(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X10))),s(X7,X9)))))) )),
  inference(unit_resulting_resolution,[],[f340,f341,f310])).
fof(f32089,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X5,X7))),s(X4,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X8))),s(X5,X7)))))) )),
  inference(forward_demodulation,[],[f31496,f335])).
fof(f31496,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X5,X7))),s(X4,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3))),s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X9))),s('type.benchmark.times'(X0),happ(s(fun(X5,'type.benchmark.times'(X0)),happ(s(fun(X4,fun(X5,'type.benchmark.times'(X0))),X6),s(X4,X8))),s(X5,X7)))))) )),
  inference(unit_resulting_resolution,[],[f335,f341,f310])).
fof(f31505,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun(X8,X6),X9))),s(X8,X10)))))) )),
  inference(unit_resulting_resolution,[],[f340,f341,f310])).
fof(f31506,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X7,X9))),s(X6,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),happ(s(fun(X6,fun(X7,'type.benchmark.times'(X0))),X8),s(X6,X10))),s(X7,X9)))))) )),
  inference(unit_resulting_resolution,[],[f341,f341,f310])).
fof(f32074,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),X6))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),X6)))) )),
  inference(forward_demodulation,[],[f31513,f295])).
fof(f31513,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),X6))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X6),s(fun('type.num.num','type.benchmark.times'(X0)),X7),s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f295,f341,f310])).
fof(f31516,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun(X8,X6),X9))),s(X8,X10)))))) )),
  inference(unit_resulting_resolution,[],[f340,f341,f310])).
fof(f31517,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),happ(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),happ(s(fun(X7,fun(X6,'type.benchmark.times'(X0))),X8),s(X7,X9))),s(X6,X10))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X2,fun(X1,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X7,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X7,fun(X6,'type.benchmark.times'(X0))),X8),s(X6,X10))),s(X7,X9)))))) )),
  inference(unit_resulting_resolution,[],[f341,f341,f310])).
fof(f32071,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8)))))) )),
  inference(forward_demodulation,[],[f31518,f335])).
fof(f31518,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x1x0_2'(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X2,X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),happ(s(fun(X1,fun(X2,'type.benchmark.times'(X0))),X3),s(X1,X5))),s(X2,X4))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X8))),s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),'type.benchmark.times'(X0))),X9)))))) )),
  inference(unit_resulting_resolution,[],[f335,f341,f310])).
fof(f31520,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X1,X0),happ(s(fun(X2,fun(X1,X0)),X3),s(X2,X4))),s(X1,X5))))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X2,X0),'_dst_x1x0_2'(s(fun(X2,fun(X1,X0)),X3),s(X1,X5))),s(X2,X4)))))) )),
  inference(unit_resulting_resolution,[],[f341,f303])).
fof(f30633,plain,(
  ( ! [X134,X132,X136,X135,X133,X137] : (s('type.benchmark.times'(fun(fun(X132,X133),X133)),'const.benchmark.Once_1'(s(fun(fun(X132,X133),X133),X137))) != s('type.benchmark.times'(fun(fun(X132,X133),X133)),'const.benchmark.Once_1'(s(fun(fun(X132,X133),X133),'_dstsel_0_x0_1'(s(X132,happ(s(fun(X134,X132),X135),s(X134,X136))))))) | s(fun(fun(X132,X133),X133),X137) = s(fun(fun(X132,X133),X133),happ(s(fun(X134,fun(fun(X132,X133),X133)),'_dstsel_1_x10_1'(s(fun(X134,X132),X135))),s(X134,X136)))) )),
  inference(superposition,[],[f302,f339])).
fof(f30625,plain,(
  ( ! [X90,X88,X87,X85,X89,X86,X84] : (s(X89,happ(s(fun(fun(fun(X84,X85),X85),X89),X90),s(fun(fun(X84,X85),X85),'_dstsel_0_x0_1'(s(X84,happ(s(fun(X86,X84),X87),s(X86,X88))))))) = s(X89,happ(s(fun(X86,X89),'_dst_x0x1_2'(s(fun(fun(fun(X84,X85),X85),X89),X90),s(fun(X86,fun(fun(X84,X85),X85)),'_dstsel_1_x10_1'(s(fun(X86,X84),X87))))),s(X86,X88)))) )),
  inference(superposition,[],[f340,f339])).
fof(f30609,plain,(
  ( ! [X6,X10,X8,X7,X5,X11,X9] : (s(fun(fun(X5,X6),X6),'_dstsel_0_x0_1'(s(X5,happ(s(fun(X7,X5),X8),s(X7,happ(s(fun(X9,X7),X10),s(X9,X11))))))) = s(fun(fun(X5,X6),X6),happ(s(fun(X9,fun(fun(X5,X6),X6)),'_dst_x0x1_2'(s(fun(X7,fun(fun(X5,X6),X6)),'_dstsel_1_x10_1'(s(fun(X7,X5),X8))),s(fun(X9,X7),X10))),s(X9,X11)))) )),
  inference(superposition,[],[f339,f340])).
fof(f29460,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.benchmark.times'(X0),X1) != s('type.benchmark.times'(X0),X2) | s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X1))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X2)))) )),
  inference(equality_resolution,[],[f310])).
fof(f29442,plain,(
  ( ! [X39,X37,X35,X43,X41,X38,X36,X42,X40] : (s('type.benchmark.times'(X35),X41) != s('type.benchmark.times'(X35),happ(s(fun(X37,'type.benchmark.times'(X35)),X38),s(X37,happ(s(fun(X36,X37),X39),s(X36,X40))))) | s('type.benchmark.times'(X35),X42) != s('type.benchmark.times'(X35),X43) | s('type.benchmark.times'(X35),'const.benchmark.Twice_2'(s('type.benchmark.times'(X35),X41),s('type.benchmark.times'(X35),X43))) = s('type.benchmark.times'(X35),'const.benchmark.Twice_2'(s('type.benchmark.times'(X35),happ(s(fun(X36,'type.benchmark.times'(X35)),'_dst_x0x1_2'(s(fun(X37,'type.benchmark.times'(X35)),X38),s(fun(X36,X37),X39))),s(X36,X40))),s('type.benchmark.times'(X35),X42)))) )),
  inference(superposition,[],[f310,f340])).
fof(f29441,plain,(
  ( ! [X30,X28,X26,X33,X31,X29,X27,X34,X32] : (s('type.benchmark.times'(X26),X32) != s('type.benchmark.times'(X26),happ(s(fun(X29,'type.benchmark.times'(X26)),'_dst_x0x1_2'(s(fun(X27,'type.benchmark.times'(X26)),X28),s(fun(X29,X27),X30))),s(X29,X31))) | s('type.benchmark.times'(X26),X33) != s('type.benchmark.times'(X26),X34) | s('type.benchmark.times'(X26),'const.benchmark.Twice_2'(s('type.benchmark.times'(X26),X32),s('type.benchmark.times'(X26),X34))) = s('type.benchmark.times'(X26),'const.benchmark.Twice_2'(s('type.benchmark.times'(X26),happ(s(fun(X27,'type.benchmark.times'(X26)),X28),s(X27,happ(s(fun(X29,X27),X30),s(X29,X31))))),s('type.benchmark.times'(X26),X33)))) )),
  inference(superposition,[],[f310,f340])).
fof(f29540,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),X6))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),X6)))) )),
  inference(forward_demodulation,[],[f29354,f295])).
fof(f29354,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),X6))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X6),s(fun('type.num.num','type.benchmark.times'(X0)),X7),s('type.num.num','const.num.|48|_0')))))) )),
  inference(unit_resulting_resolution,[],[f340,f295,f310])).
fof(f29404,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X1,X2),X4))),s(X1,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun(X8,X6),X9))),s(X8,X10)))))) )),
  inference(unit_resulting_resolution,[],[f340,f340,f310])).
fof(f29484,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X4,X2),X5))),s(X4,X6)))))) )),
  inference(forward_demodulation,[],[f29411,f295])).
fof(f29411,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),happ(s(fun(X2,'type.benchmark.times'(X0)),X3),s(X2,happ(s(fun(X4,X2),X5),s(X4,X6))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X0),X1),s(fun('type.num.num','type.benchmark.times'(X0)),X7),s('type.num.num','const.num.|48|_0'))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X2,'type.benchmark.times'(X0)),X3),s(fun(X4,X2),X5))),s(X4,X6)))))) )),
  inference(unit_resulting_resolution,[],[f295,f340,f310])).
fof(f29414,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,happ(s(fun(X8,X6),X9),s(X8,X10))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(X8,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun(X8,X6),X9))),s(X8,X10)))))) )),
  inference(unit_resulting_resolution,[],[f340,f340,f310])).
fof(f29481,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),X5),s(X4,happ(s(fun(X6,X4),X7),s(X6,X8))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X4,'type.benchmark.times'(X0)),X5),s(fun(X6,X4),X7))),s(X6,X8)))))) )),
  inference(forward_demodulation,[],[f29415,f335])).
fof(f29415,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,X3))),s('type.benchmark.times'(X0),happ(s(fun(X4,'type.benchmark.times'(X0)),X5),s(X4,happ(s(fun(X6,X4),X7),s(X6,X8))))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3))),s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),'type.benchmark.times'(X0))),X9))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X4,'type.benchmark.times'(X0)),X5),s(fun(X6,X4),X7))),s(X6,X8)))))) )),
  inference(unit_resulting_resolution,[],[f335,f340,f310])).
fof(f29462,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8)))))) )),
  inference(forward_demodulation,[],[f29434,f335])).
fof(f29434,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X1,'type.benchmark.times'(X0)),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))),s('type.benchmark.times'(X0),happ(s(fun(X6,'type.benchmark.times'(X0)),X7),s(X6,X8))))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),happ(s(fun(X3,'type.benchmark.times'(X0)),'_dst_x0x1_2'(s(fun(X1,'type.benchmark.times'(X0)),X2),s(fun(X3,X1),X4))),s(X3,X5))),s('type.benchmark.times'(X0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X8))),s(fun(X6,'type.benchmark.times'(X0)),X7),s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),'type.benchmark.times'(X0))),X9)))))) )),
  inference(unit_resulting_resolution,[],[f340,f335,f310])).
fof(f4825,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1),s(fun(X0,X0),'_i_0_0'))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f4698,f359])).
fof(f4698,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f290,f338])).
fof(f4831,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x0x0x1_3'(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),'=_0'),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))),s(fun(X0,'type.benchmark.times'(X0)),'const.benchmark.Once_0'))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f4692,f359])).
fof(f4692,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.benchmark.times'(X0),bool),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),'=_0'),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))))),s('type.benchmark.times'(X0),happ(s(fun(X0,'type.benchmark.times'(X0)),'const.benchmark.Once_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f291,f338])).
fof(f17820,plain,(
  ( ! [X206,X204,X207,X205,X203] : (~p(s(bool,happ(s(fun(X205,bool),'_dst_x0x1_2'(s(fun(X203,bool),happ(s(fun(X203,fun(X203,bool)),'=_0'),s(X203,X204))),s(fun(X205,X203),X206))),s(X205,X207)))) | s(X203,X204) = s(X203,happ(s(fun(X205,X203),X206),s(X205,X207)))) )),
  inference(superposition,[],[f337,f340])).
fof(f17819,plain,(
  ( ! [X198,X202,X200,X199,X201] : (p(s(bool,happ(s(fun(X200,bool),'_dst_x0x1_2'(s(fun(X198,bool),happ(s(fun(X198,fun(X198,bool)),'=_0'),s(X198,X199))),s(fun(X200,X198),X201))),s(X200,X202)))) | s(X198,X199) != s(X198,happ(s(fun(X200,X198),X201),s(X200,X202)))) )),
  inference(superposition,[],[f338,f340])).
fof(f17676,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X3),s(fun(X1,X2),X4))),s(X1,X5))))),s(X0,happ(s(fun(X2,X0),X3),s(X2,happ(s(fun(X1,X2),X4),s(X1,X5))))))))) )),
  inference(unit_resulting_resolution,[],[f340,f338])).
fof(f17674,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))),s(X0,happ(s(fun(X3,X0),'_dst_x0x1_2'(s(fun(X1,X0),X2),s(fun(X3,X1),X4))),s(X3,X5))))))) )),
  inference(unit_resulting_resolution,[],[f340,f338])).
fof(f3212,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X23),s(fun(bool,bool),'_i_0_0'))),s(bool,X22)))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(forward_demodulation,[],[f3211,f359])).
fof(f3211,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X23))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22)))))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(subsumption_resolution,[],[f3147,f246])).
fof(f3147,plain,(
  ( ! [X23,X22] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X23))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X22)))))) | s(bool,'F_0') = s(bool,X22)) )),
  inference(superposition,[],[f325,f429])).
fof(f3030,plain,(
  ( ! [X59,X58] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X59),s(fun(bool,bool),'_i_0_0'))),s(bool,X58)))) | ~p(s(bool,X58))) )),
  inference(forward_demodulation,[],[f3012,f359])).
fof(f3012,plain,(
  ( ! [X59,X58] : (~p(s(bool,X58)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X59))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X58))))))) )),
  inference(superposition,[],[f325,f290])).
fof(f3557,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47),s(fun(bool,bool),'_i_0_0'))),s(bool,X46)))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(forward_demodulation,[],[f3556,f359])).
fof(f3556,plain,(
  ( ! [X47,X46] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f3540,f246])).
fof(f3540,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X47))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X46)))))) | s(bool,'F_0') = s(bool,X46)) )),
  inference(superposition,[],[f328,f429])).
fof(f3569,plain,(
  ( ! [X64,X65] : (p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X65),s(fun(bool,bool),'_i_0_0'))),s(bool,X64)))) | ~p(s(bool,X64))) )),
  inference(forward_demodulation,[],[f3547,f359])).
fof(f3547,plain,(
  ( ! [X64,X65] : (~p(s(bool,X64)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X65))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X64))))))) )),
  inference(superposition,[],[f328,f290])).
fof(f18468,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.benchmark.times'(X0),bool),'_dst_x0x0x1_3'(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),'=_0'),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))),s(fun('type.benchmark.times'(X0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),'type.benchmark.times'(X0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X0),X1))))),s('type.benchmark.times'(X0),X2))))) )),
  inference(forward_demodulation,[],[f18388,f359])).
fof(f18388,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.benchmark.times'(X0),bool),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),bool)),'=_0'),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))))),s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),'type.benchmark.times'(X0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X0),X1))),s('type.benchmark.times'(X0),X2))))))) )),
  inference(unit_resulting_resolution,[],[f297,f338])).
fof(f4791,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun('type.num.num',bool),'_dst_x0x0x1_3'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3))))) )),
  inference(forward_demodulation,[],[f4790,f359])).
fof(f4790,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f4789,f341])).
fof(f4789,plain,(
  ( ! [X2,X0,X3] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(forward_demodulation,[],[f4788,f304])).
fof(f4788,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))))) )),
  inference(forward_demodulation,[],[f4712,f341])).
fof(f4712,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3))))))),s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))))))) )),
  inference(unit_resulting_resolution,[],[f304,f338])).
fof(f311,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X0),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(X0,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X0),fun(X0,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X0,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X0),'type.ind_type.recspace'(X0)),sK7(X0)))))) )),
  inference(cnf_transformation,[],[f229])).
fof(f229,plain,(
  ! [X0] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X0),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(X0,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X0),fun(X0,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X0,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X0),'type.ind_type.recspace'(X0)),sK7(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK7])],[f124])).
fof(f124,plain,(
  ! [X0] : ? [X1] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X0),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X0),bool),'_dst_x0x1_2'(s(fun(fun(X0,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X0),fun(X0,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun(X0,'type.ind_type.recspace'(X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X0),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool)),'=_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X0,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'),s(fun('type.ind_type.recspace'(X0),fun('type.num.num','type.ind_type.recspace'(X0))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X0),fun(fun('type.num.num','type.ind_type.recspace'(X0)),fun('type.num.num','type.ind_type.recspace'(X0)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X0)),'_dst_x0_1'(s('type.ind_type.recspace'(X0),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),fun('type.ind_type.recspace'(X0),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X0),bool),fun('type.ind_type.recspace'(X0),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X0),fun(fun('type.ind_type.recspace'(X0),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X0),'type.ind_type.recspace'(X0)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X0),'type.ind_type.recspace'(X0)),X1))))),
  inference(rectify,[],[f45])).
fof(f45,axiom,(
  ! [X6] : ? [X40] : p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(X6),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(X6),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(X6),fun(fun('type.ind_type.recspace'(X6),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(X6),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(X6),bool),'_dst_x0x1_2'(s(fun(fun(X6,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(X6),fun(X6,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool)),'=_0'),s(fun('type.ind_type.recspace'(X6),'type.ind_type.recspace'(X6)),'_i_0_0'),s(fun(X6,'type.ind_type.recspace'(X6)),'_dst_x1x0_2'(s(fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),'type.ind_type.recspace'(X6))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(X6)),'_dst_x0_1'(s('type.ind_type.recspace'(X6),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(X6),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(X6),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool)),'=_0'),s(fun('type.ind_type.recspace'(X6),'type.ind_type.recspace'(X6)),'_i_0_0'),s(fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),'type.ind_type.recspace'(X6))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(X6)),'type.ind_type.recspace'(X6)),happ(s(fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),'type.ind_type.recspace'(X6))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(X6,'const.bool.ARB_0'))),s(fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),fun('type.num.num','type.ind_type.recspace'(X6)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(X6),fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun('type.num.num','type.ind_type.recspace'(X6)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(X6),'type.ind_type.recspace'(X6)),'_i_0_0'),s(fun('type.ind_type.recspace'(X6),fun('type.num.num','type.ind_type.recspace'(X6))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(X6),fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun('type.num.num','type.ind_type.recspace'(X6)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(X6)),'_dst_x0_1'(s('type.ind_type.recspace'(X6),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),fun('type.ind_type.recspace'(X6),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(X6),bool),fun('type.ind_type.recspace'(X6),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(X6),fun(fun('type.ind_type.recspace'(X6),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(X6),'type.ind_type.recspace'(X6)),'_i_0_0'))))))),s(fun('type.benchmark.times'(X6),'type.ind_type.recspace'(X6)),X40))))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_TY_DEF')).
fof(f18445,plain,(
  ( ! [X138,X136,X135,X137] : (s('type.benchmark.times'('type.benchmark.times'(X135)),'const.benchmark.Once_1'(s('type.benchmark.times'(X135),X138))) != s('type.benchmark.times'('type.benchmark.times'(X135)),'const.benchmark.Once_1'(s('type.benchmark.times'(X135),'const.benchmark.Twice_2'(s('type.benchmark.times'(X135),X136),s('type.benchmark.times'(X135),X137))))) | s('type.benchmark.times'(X135),X138) = s('type.benchmark.times'(X135),happ(s(fun('type.benchmark.times'(X135),'type.benchmark.times'(X135)),happ(s(fun('type.benchmark.times'(X135),fun('type.benchmark.times'(X135),'type.benchmark.times'(X135))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X135),X136))),s('type.benchmark.times'(X135),X137)))) )),
  inference(superposition,[],[f302,f297])).
fof(f18436,plain,(
  ( ! [X88,X87,X85,X89,X86,X84] : (s('type.benchmark.times'(X84),'const.benchmark.Twice_2'(s('type.benchmark.times'(X84),X88),s('type.benchmark.times'(X84),X89))) != s('type.benchmark.times'(X84),'const.benchmark.Twice_2'(s('type.benchmark.times'(X84),X87),s('type.benchmark.times'(X84),'const.benchmark.Twice_2'(s('type.benchmark.times'(X84),X85),s('type.benchmark.times'(X84),X86))))) | s('type.benchmark.times'(X84),X89) = s('type.benchmark.times'(X84),happ(s(fun('type.benchmark.times'(X84),'type.benchmark.times'(X84)),happ(s(fun('type.benchmark.times'(X84),fun('type.benchmark.times'(X84),'type.benchmark.times'(X84))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X84),X85))),s('type.benchmark.times'(X84),X86)))) )),
  inference(superposition,[],[f309,f297])).
fof(f18433,plain,(
  ( ! [X70,X68,X66,X71,X69,X67] : (s('type.benchmark.times'(X66),'const.benchmark.Twice_2'(s('type.benchmark.times'(X66),X70),s('type.benchmark.times'(X66),X71))) != s('type.benchmark.times'(X66),'const.benchmark.Twice_2'(s('type.benchmark.times'(X66),'const.benchmark.Twice_2'(s('type.benchmark.times'(X66),X67),s('type.benchmark.times'(X66),X68))),s('type.benchmark.times'(X66),X69))) | s('type.benchmark.times'(X66),X70) = s('type.benchmark.times'(X66),happ(s(fun('type.benchmark.times'(X66),'type.benchmark.times'(X66)),happ(s(fun('type.benchmark.times'(X66),fun('type.benchmark.times'(X66),'type.benchmark.times'(X66))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X66),X67))),s('type.benchmark.times'(X66),X68)))) )),
  inference(superposition,[],[f308,f297])).
fof(f18425,plain,(
  ( ! [X35,X33,X34] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X35),s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X33),s('type.benchmark.times'(sK0),X34))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(sK0),X33))),s('type.benchmark.times'(sK0),X34)))) )),
  inference(superposition,[],[f17086,f297])).
fof(f18416,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X0),s('type.benchmark.times'(sK0),X1))),s('type.benchmark.times'(sK0),X2))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(sK0),X0))),s('type.benchmark.times'(sK0),X1)))) )),
  inference(superposition,[],[f16999,f297])).
fof(f18034,plain,(
  ( ! [X775,X773,X776,X774,X772] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X772,'type.num.num'),'_dst_x0x1_2'(s(fun(X773,'type.num.num'),X774),s(fun(X772,X773),X775))),s('type.benchmark.times'(X772),'const.benchmark.Once_1'(s(X772,X776))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X773,'type.num.num'),X774),s(X773,happ(s(fun(X772,X773),X775),s(X772,X776)))))))) )),
  inference(superposition,[],[f296,f340])).
fof(f18030,plain,(
  ( ! [X736,X738,X741,X743,X737,X739,X744,X740,X742] : (s('type.benchmark.times'(X736),'const.benchmark.Twice_2'(s('type.benchmark.times'(X736),X743),s('type.benchmark.times'(X736),X744))) != s('type.benchmark.times'(X736),'const.benchmark.Twice_2'(s('type.benchmark.times'(X736),X742),s('type.benchmark.times'(X736),happ(s(fun(X738,'type.benchmark.times'(X736)),X739),s(X738,happ(s(fun(X737,X738),X740),s(X737,X741))))))) | s('type.benchmark.times'(X736),X744) = s('type.benchmark.times'(X736),happ(s(fun(X737,'type.benchmark.times'(X736)),'_dst_x0x1_2'(s(fun(X738,'type.benchmark.times'(X736)),X739),s(fun(X737,X738),X740))),s(X737,X741)))) )),
  inference(superposition,[],[f309,f340])).
fof(f18027,plain,(
  ( ! [X716,X712,X714,X710,X717,X713,X715,X709,X711] : (s('type.benchmark.times'(X709),'const.benchmark.Twice_2'(s('type.benchmark.times'(X709),X716),s('type.benchmark.times'(X709),X717))) != s('type.benchmark.times'(X709),'const.benchmark.Twice_2'(s('type.benchmark.times'(X709),happ(s(fun(X711,'type.benchmark.times'(X709)),X712),s(X711,happ(s(fun(X710,X711),X713),s(X710,X714))))),s('type.benchmark.times'(X709),X715))) | s('type.benchmark.times'(X709),X716) = s('type.benchmark.times'(X709),happ(s(fun(X710,'type.benchmark.times'(X709)),'_dst_x0x1_2'(s(fun(X711,'type.benchmark.times'(X709)),X712),s(fun(X710,X711),X713))),s(X710,X714)))) )),
  inference(superposition,[],[f308,f340])).
fof(f18024,plain,(
  ( ! [X689,X691,X687,X692,X688,X690,X686] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X691),s('type.benchmark.times'(sK0),happ(s(fun(X687,'type.benchmark.times'(sK0)),X688),s(X687,happ(s(fun(X686,X687),X689),s(X686,X690))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X686,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X687,'type.benchmark.times'(sK0)),X688),s(fun(X686,X687),X689))),s(X686,X690))),s(fun('type.num.num','type.benchmark.times'(sK0)),X692),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f340])).
fof(f18022,plain,(
  ( ! [X670,X677,X673,X675,X671,X676,X672,X674] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X675),s('type.benchmark.times'(sK0),happ(s(fun(X671,'type.benchmark.times'(sK0)),X672),s(X671,happ(s(fun(X670,X671),X673),s(X670,X674))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X676,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X670,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X671,'type.benchmark.times'(sK0)),X672),s(fun(X670,X671),X673))),s(X670,X674))))),s(X676,X677)))) )),
  inference(superposition,[],[f17121,f340])).
fof(f18020,plain,(
  ( ! [X660,X662,X658,X661,X663,X659] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X663),s('type.benchmark.times'(sK0),happ(s(fun(X659,'type.benchmark.times'(sK0)),X660),s(X659,happ(s(fun(X658,X659),X661),s(X658,X662))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X658,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X659,'type.benchmark.times'(sK0)),X660),s(fun(X658,X659),X661))),s(X658,X662)))))) )),
  inference(superposition,[],[f17120,f340])).
fof(f18019,plain,(
  ( ! [X656,X652,X654,X657,X653,X655] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X657),s('type.benchmark.times'(sK0),happ(s(fun(X653,'type.benchmark.times'(sK0)),X654),s(X653,happ(s(fun(X652,X653),X655),s(X652,X656))))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X652,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X653,'type.benchmark.times'(sK0)),X654),s(fun(X652,X653),X655))),s(X652,X656)))) )),
  inference(superposition,[],[f17086,f340])).
fof(f18016,plain,(
  ( ! [X633,X635,X636,X638,X632,X634,X637] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X633,'type.benchmark.times'(sK0)),X634),s(X633,happ(s(fun(X632,X633),X635),s(X632,X636))))),s('type.benchmark.times'(sK0),X637))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X632,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X633,'type.benchmark.times'(sK0)),X634),s(fun(X632,X633),X635))),s(X632,X636))),s(fun('type.num.num','type.benchmark.times'(sK0)),X638),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f340])).
fof(f18014,plain,(
  ( ! [X621,X623,X617,X619,X620,X622,X616,X618] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X617,'type.benchmark.times'(sK0)),X618),s(X617,happ(s(fun(X616,X617),X619),s(X616,X620))))),s('type.benchmark.times'(sK0),X621))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X622,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X616,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X617,'type.benchmark.times'(sK0)),X618),s(fun(X616,X617),X619))),s(X616,X620))))),s(X622,X623)))) )),
  inference(superposition,[],[f17026,f340])).
fof(f18012,plain,(
  ( ! [X606,X609,X605,X607,X608,X604] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X605,'type.benchmark.times'(sK0)),X606),s(X605,happ(s(fun(X604,X605),X607),s(X604,X608))))),s('type.benchmark.times'(sK0),X609))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X604,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X605,'type.benchmark.times'(sK0)),X606),s(fun(X604,X605),X607))),s(X604,X608)))))) )),
  inference(superposition,[],[f17025,f340])).
fof(f18010,plain,(
  ( ! [X596,X592,X594,X597,X593,X595] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X593,'type.benchmark.times'(sK0)),X594),s(X593,happ(s(fun(X592,X593),X595),s(X592,X596))))),s('type.benchmark.times'(sK0),X597))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X592,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X593,'type.benchmark.times'(sK0)),X594),s(fun(X592,X593),X595))),s(X592,X596)))) )),
  inference(superposition,[],[f16999,f340])).
fof(f18006,plain,(
  ( ! [X565,X567,X563,X568,X564,X566,X562] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X562,bool),happ(s(fun(X564,fun(X562,bool)),X565),s(X564,happ(s(fun(X563,X564),X566),s(X563,X567))))))) | s(X562,X568) = s(X562,sK4(X568,happ(s(fun(X563,fun(X562,bool)),'_dst_x0x1_2'(s(fun(X564,fun(X562,bool)),X565),s(fun(X563,X564),X566))),s(X563,X567)),X562))) )),
  inference(superposition,[],[f562,f340])).
fof(f18068,plain,(
  ( ! [X344,X346,X345,X347,X348] : (s(bool,'T_0') != s(bool,happ(s(fun(X345,bool),X346),s(X345,happ(s(fun(X344,X345),X347),s(X344,X348))))) | s(bool,'T_0') = s(bool,happ(s(fun(X344,bool),'_dst_x0x1_2'(s(fun(X345,bool),X346),s(fun(X344,X345),X347))),s(X344,X348)))) )),
  inference(forward_demodulation,[],[f17970,f289])).
fof(f17970,plain,(
  ( ! [X350,X344,X346,X349,X345,X347,X348] : (s(bool,'const.bool.DATATYPE_1'(s(X349,X350))) != s(bool,happ(s(fun(X345,bool),X346),s(X345,happ(s(fun(X344,X345),X347),s(X344,X348))))) | s(bool,'T_0') = s(bool,happ(s(fun(X344,bool),'_dst_x0x1_2'(s(fun(X345,bool),X346),s(fun(X344,X345),X347))),s(X344,X348)))) )),
  inference(superposition,[],[f554,f340])).
fof(f17922,plain,(
  ( ! [X47,X52,X50,X48,X46,X51,X49] : (s(X46,X52) != s(X46,happ(s(fun(X48,X46),X49),s(X48,happ(s(fun(X47,X48),X50),s(X47,X51))))) | s('type.benchmark.times'(X46),'const.benchmark.Once_1'(s(X46,X52))) = s('type.benchmark.times'(X46),'const.benchmark.Once_1'(s(X46,happ(s(fun(X47,X46),'_dst_x0x1_2'(s(fun(X48,X46),X49),s(fun(X47,X48),X50))),s(X47,X51)))))) )),
  inference(superposition,[],[f303,f340])).
fof(f17920,plain,(
  ( ! [X37,X35,X33,X38,X36,X34,X32] : (s('type.benchmark.times'(X32),'const.benchmark.Once_1'(s(X32,X38))) != s('type.benchmark.times'(X32),'const.benchmark.Once_1'(s(X32,happ(s(fun(X34,X32),X35),s(X34,happ(s(fun(X33,X34),X36),s(X33,X37))))))) | s(X32,X38) = s(X32,happ(s(fun(X33,X32),'_dst_x0x1_2'(s(fun(X34,X32),X35),s(fun(X33,X34),X36))),s(X33,X37)))) )),
  inference(superposition,[],[f302,f340])).
fof(f17913,plain,(
  ( ! [X854,X857,X855,X858,X856] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X854,'type.num.num'),X855),s('type.benchmark.times'(X854),'const.benchmark.Once_1'(s(X854,happ(s(fun(X856,X854),X857),s(X856,X858))))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X856,'type.num.num'),'_dst_x0x1_2'(s(fun(X854,'type.num.num'),X855),s(fun(X856,X854),X857))),s(X856,X858)))))) )),
  inference(superposition,[],[f296,f340])).
fof(f17909,plain,(
  ( ! [X825,X819,X823,X821,X826,X824,X818,X822,X820] : (s('type.benchmark.times'(X818),'const.benchmark.Twice_2'(s('type.benchmark.times'(X818),X825),s('type.benchmark.times'(X818),X826))) != s('type.benchmark.times'(X818),'const.benchmark.Twice_2'(s('type.benchmark.times'(X818),X824),s('type.benchmark.times'(X818),happ(s(fun(X821,'type.benchmark.times'(X818)),'_dst_x0x1_2'(s(fun(X819,'type.benchmark.times'(X818)),X820),s(fun(X821,X819),X822))),s(X821,X823))))) | s('type.benchmark.times'(X818),X826) = s('type.benchmark.times'(X818),happ(s(fun(X819,'type.benchmark.times'(X818)),X820),s(X819,happ(s(fun(X821,X819),X822),s(X821,X823)))))) )),
  inference(superposition,[],[f309,f340])).
fof(f17906,plain,(
  ( ! [X798,X796,X795,X793,X799,X797,X791,X794,X792] : (s('type.benchmark.times'(X791),'const.benchmark.Twice_2'(s('type.benchmark.times'(X791),X798),s('type.benchmark.times'(X791),X799))) != s('type.benchmark.times'(X791),'const.benchmark.Twice_2'(s('type.benchmark.times'(X791),happ(s(fun(X794,'type.benchmark.times'(X791)),'_dst_x0x1_2'(s(fun(X792,'type.benchmark.times'(X791)),X793),s(fun(X794,X792),X795))),s(X794,X796))),s('type.benchmark.times'(X791),X797))) | s('type.benchmark.times'(X791),X798) = s('type.benchmark.times'(X791),happ(s(fun(X792,'type.benchmark.times'(X791)),X793),s(X792,happ(s(fun(X794,X792),X795),s(X794,X796)))))) )),
  inference(superposition,[],[f308,f340])).
fof(f17903,plain,(
  ( ! [X765,X767,X769,X764,X766,X770,X768] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X769),s('type.benchmark.times'(sK0),happ(s(fun(X766,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X764,'type.benchmark.times'(sK0)),X765),s(fun(X766,X764),X767))),s(X766,X768))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X764,'type.benchmark.times'(sK0)),X765),s(X764,happ(s(fun(X766,X764),X767),s(X766,X768))))),s(fun('type.num.num','type.benchmark.times'(sK0)),X770),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f340])).
fof(f17901,plain,(
  ( ! [X753,X755,X749,X751,X752,X754,X748,X750] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X753),s('type.benchmark.times'(sK0),happ(s(fun(X750,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X748,'type.benchmark.times'(sK0)),X749),s(fun(X750,X748),X751))),s(X750,X752))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X754,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X748,'type.benchmark.times'(sK0)),X749),s(X748,happ(s(fun(X750,X748),X751),s(X750,X752))))))),s(X754,X755)))) )),
  inference(superposition,[],[f17121,f340])).
fof(f17899,plain,(
  ( ! [X736,X738,X741,X737,X739,X740] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X741),s('type.benchmark.times'(sK0),happ(s(fun(X738,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X736,'type.benchmark.times'(sK0)),X737),s(fun(X738,X736),X739))),s(X738,X740))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X736,'type.benchmark.times'(sK0)),X737),s(X736,happ(s(fun(X738,X736),X739),s(X738,X740)))))))) )),
  inference(superposition,[],[f17120,f340])).
fof(f17898,plain,(
  ( ! [X732,X734,X730,X733,X735,X731] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X735),s('type.benchmark.times'(sK0),happ(s(fun(X732,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X730,'type.benchmark.times'(sK0)),X731),s(fun(X732,X730),X733))),s(X732,X734))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X730,'type.benchmark.times'(sK0)),X731),s(X730,happ(s(fun(X732,X730),X733),s(X732,X734)))))) )),
  inference(superposition,[],[f17086,f340])).
fof(f17895,plain,(
  ( ! [X716,X712,X714,X710,X713,X715,X711] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X712,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X710,'type.benchmark.times'(sK0)),X711),s(fun(X712,X710),X713))),s(X712,X714))),s('type.benchmark.times'(sK0),X715))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(X710,'type.benchmark.times'(sK0)),X711),s(X710,happ(s(fun(X712,X710),X713),s(X712,X714))))),s(fun('type.num.num','type.benchmark.times'(sK0)),X716),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f340])).
fof(f17893,plain,(
  ( ! [X697,X699,X695,X700,X696,X698,X694,X701] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X696,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X694,'type.benchmark.times'(sK0)),X695),s(fun(X696,X694),X697))),s(X696,X698))),s('type.benchmark.times'(sK0),X699))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X700,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(X694,'type.benchmark.times'(sK0)),X695),s(X694,happ(s(fun(X696,X694),X697),s(X696,X698))))))),s(X700,X701)))) )),
  inference(superposition,[],[f17026,f340])).
fof(f17891,plain,(
  ( ! [X685,X687,X683,X684,X686,X682] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X684,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X682,'type.benchmark.times'(sK0)),X683),s(fun(X684,X682),X685))),s(X684,X686))),s('type.benchmark.times'(sK0),X687))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(X682,'type.benchmark.times'(sK0)),X683),s(X682,happ(s(fun(X684,X682),X685),s(X684,X686)))))))) )),
  inference(superposition,[],[f17025,f340])).
fof(f17889,plain,(
  ( ! [X670,X673,X675,X671,X672,X674] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X672,'type.benchmark.times'(sK0)),'_dst_x0x1_2'(s(fun(X670,'type.benchmark.times'(sK0)),X671),s(fun(X672,X670),X673))),s(X672,X674))),s('type.benchmark.times'(sK0),X675))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X670,'type.benchmark.times'(sK0)),X671),s(X670,happ(s(fun(X672,X670),X673),s(X672,X674)))))) )),
  inference(superposition,[],[f16999,f340])).
fof(f17885,plain,(
  ( ! [X644,X646,X640,X642,X645,X641,X643] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X640,bool),happ(s(fun(X643,fun(X640,bool)),'_dst_x0x1_2'(s(fun(X641,fun(X640,bool)),X642),s(fun(X643,X641),X644))),s(X643,X645))))) | s(X640,X646) = s(X640,sK4(X646,happ(s(fun(X641,fun(X640,bool)),X642),s(X641,happ(s(fun(X643,X641),X644),s(X643,X645)))),X640))) )),
  inference(superposition,[],[f562,f340])).
fof(f18056,plain,(
  ( ! [X393,X395,X396,X392,X394] : (s(bool,'T_0') != s(bool,happ(s(fun(X394,bool),'_dst_x0x1_2'(s(fun(X392,bool),X393),s(fun(X394,X392),X395))),s(X394,X396))) | s(bool,'T_0') = s(bool,happ(s(fun(X392,bool),X393),s(X392,happ(s(fun(X394,X392),X395),s(X394,X396)))))) )),
  inference(forward_demodulation,[],[f17849,f289])).
fof(f17849,plain,(
  ( ! [X397,X393,X395,X396,X398,X392,X394] : (s(bool,'const.bool.DATATYPE_1'(s(X397,X398))) != s(bool,happ(s(fun(X394,bool),'_dst_x0x1_2'(s(fun(X392,bool),X393),s(fun(X394,X392),X395))),s(X394,X396))) | s(bool,'T_0') = s(bool,happ(s(fun(X392,bool),X393),s(X392,happ(s(fun(X394,X392),X395),s(X394,X396)))))) )),
  inference(superposition,[],[f554,f340])).
fof(f17799,plain,(
  ( ! [X68,X66,X64,X62,X67,X65,X63] : (s(X62,X68) != s(X62,happ(s(fun(X65,X62),'_dst_x0x1_2'(s(fun(X63,X62),X64),s(fun(X65,X63),X66))),s(X65,X67))) | s('type.benchmark.times'(X62),'const.benchmark.Once_1'(s(X62,X68))) = s('type.benchmark.times'(X62),'const.benchmark.Once_1'(s(X62,happ(s(fun(X63,X62),X64),s(X63,happ(s(fun(X65,X63),X66),s(X65,X67)))))))) )),
  inference(superposition,[],[f303,f340])).
fof(f17797,plain,(
  ( ! [X54,X52,X50,X48,X53,X51,X49] : (s('type.benchmark.times'(X48),'const.benchmark.Once_1'(s(X48,X54))) != s('type.benchmark.times'(X48),'const.benchmark.Once_1'(s(X48,happ(s(fun(X51,X48),'_dst_x0x1_2'(s(fun(X49,X48),X50),s(fun(X51,X49),X52))),s(X51,X53))))) | s(X48,X54) = s(X48,happ(s(fun(X49,X48),X50),s(X49,happ(s(fun(X51,X49),X52),s(X51,X53)))))) )),
  inference(superposition,[],[f302,f340])).
fof(f17686,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X52) = s(bool,happ(s(fun(X49,bool),'_dst_x0x1_2'(s(fun(X47,bool),X48),s(fun(X49,X47),X50))),s(X49,X51))) | s(bool,'T_0') = s(bool,X52) | s(bool,'T_0') = s(bool,happ(s(fun(X47,bool),X48),s(X47,happ(s(fun(X49,X47),X50),s(X49,X51)))))) )),
  inference(superposition,[],[f340,f396])).
fof(f17685,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(X43,bool),'_dst_x0x1_2'(s(fun(X41,bool),X42),s(fun(X43,X41),X44))),s(X43,X45))) | s(bool,X46) = s(bool,happ(s(fun(X41,bool),X42),s(X41,happ(s(fun(X43,X41),X44),s(X43,X45))))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f340,f396])).
fof(f17683,plain,(
  ( ! [X28,X26,X24,X29,X27,X25] : (s(X24,happ(s(fun(X25,X24),happ(s(fun(X27,fun(X25,X24)),X28),s(X27,X29))),s(X25,X26))) = s(X24,happ(s(fun(X27,X24),'_dst_x0x1_2'(s(fun(fun(X25,X24),X24),'_dstsel_0_x0_1'(s(X25,X26))),s(fun(X27,fun(X25,X24)),X28))),s(X27,X29)))) )),
  inference(superposition,[],[f340,f333])).
fof(f17682,plain,(
  ( ! [X23,X21,X19,X17,X22,X20,X18,X16] : (s(X16,happ(s(fun(X18,X16),X19),s(X18,happ(s(fun(X17,X18),X20),s(X17,happ(s(fun(X21,X17),X22),s(X21,X23))))))) = s(X16,happ(s(fun(X21,X16),'_dst_x0x1_2'(s(fun(X17,X16),'_dst_x0x1_2'(s(fun(X18,X16),X19),s(fun(X17,X18),X20))),s(fun(X21,X17),X22))),s(X21,X23)))) )),
  inference(superposition,[],[f340,f340])).
fof(f17681,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(X4,X6) = s(X4,happ(s(fun(X7,X4),'_dst_x0x1_2'(s(fun(X5,X4),'_dst_x0_1'(s(X4,X6))),s(fun(X7,X5),X8))),s(X7,X9)))) )),
  inference(superposition,[],[f340,f330])).
fof(f17680,plain,(
  ( ! [X24,X23,X21,X19,X25,X22,X20,X18] : (s(X24,happ(s(fun(X18,X24),X25),s(X18,happ(s(fun(X20,X18),X21),s(X20,happ(s(fun(X19,X20),X22),s(X19,X23))))))) = s(X24,happ(s(fun(X19,X24),'_dst_x0x1_2'(s(fun(X18,X24),X25),s(fun(X19,X18),'_dst_x0x1_2'(s(fun(X20,X18),X21),s(fun(X19,X20),X22))))),s(X19,X23)))) )),
  inference(superposition,[],[f340,f340])).
fof(f17679,plain,(
  ( ! [X14,X12,X10,X17,X15,X13,X11,X16] : (s(X16,happ(s(fun(X10,X16),X17),s(X10,happ(s(fun(X13,X10),'_dst_x0x1_2'(s(fun(X11,X10),X12),s(fun(X13,X11),X14))),s(X13,X15))))) = s(X16,happ(s(fun(X11,X16),'_dst_x0x1_2'(s(fun(X10,X16),X17),s(fun(X11,X10),X12))),s(X11,happ(s(fun(X13,X11),X14),s(X13,X15)))))) )),
  inference(superposition,[],[f340,f340])).
fof(f17678,plain,(
  ( ! [X6,X4,X8,X7,X5,X9] : (s(X8,happ(s(fun(X4,X8),X9),s(X4,X6))) = s(X8,happ(s(fun(X5,X8),'_dst_x0x1_2'(s(fun(X4,X8),X9),s(fun(X5,X4),'_dst_x0_1'(s(X4,X6))))),s(X5,X7)))) )),
  inference(superposition,[],[f340,f330])).
fof(f17677,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X1,X0),X2),s(X1,happ(s(fun(X3,X1),X4),s(X3,X5))))))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,happ(s(fun(X3,X0),'_dst_x0x1_2'(s(fun(X1,X0),X2),s(fun(X3,X1),X4))),s(X3,X5)))))) )),
  inference(unit_resulting_resolution,[],[f340,f303])).
fof(f17610,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X30))) = s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X27,'type.num.num'),X28),s(X27,X29))))))))) | s('type.num.num',X30) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X27,'type.num.num'),X28),s('type.benchmark.times'(X27),'const.benchmark.Once_1'(s(X27,X29)))))) )),
  inference(forward_demodulation,[],[f17575,f17542])).
fof(f17575,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.num.num',X30) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X27,'type.num.num'),X28),s('type.benchmark.times'(X27),'const.benchmark.Once_1'(s(X27,X29))))) | s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X30))) = s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X27,'type.num.num'),X28),s(X27,X29)))))))) )),
  inference(superposition,[],[f303,f296])).
fof(f17573,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X22))) != s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X19,'type.num.num'),X20),s('type.benchmark.times'(X19),'const.benchmark.Once_1'(s(X19,X21))))))) | s('type.num.num',X22) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X19,'type.num.num'),X20),s(X19,X21)))))) )),
  inference(superposition,[],[f302,f296])).
fof(f17552,plain,(
  ( ! [X30,X28,X29,X27] : (s('type.num.num',X30) != s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X27,'type.num.num'),X28),s(X27,X29))))) | s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X30))) = s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X27,'type.num.num'),X28),s('type.benchmark.times'(X27),'const.benchmark.Once_1'(s(X27,X29)))))))) )),
  inference(superposition,[],[f303,f296])).
fof(f17604,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X22))) != s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X19,'type.num.num'),X20),s(X19,X21))))))))) | s('type.num.num',X22) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X19,'type.num.num'),X20),s('type.benchmark.times'(X19),'const.benchmark.Once_1'(s(X19,X21)))))) )),
  inference(forward_demodulation,[],[f17550,f17542])).
fof(f17550,plain,(
  ( ! [X21,X19,X22,X20] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X22))) != s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X19,'type.num.num'),X20),s(X19,X21))))))) | s('type.num.num',X22) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X19,'type.num.num'),X20),s('type.benchmark.times'(X19),'const.benchmark.Once_1'(s(X19,X21)))))) )),
  inference(superposition,[],[f302,f296])).
fof(f17603,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X4,'type.num.num'),X6),s(X4,X5))))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(fun(X4,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X4,X5))),s('type.benchmark.times'(fun(X4,'type.num.num')),'const.benchmark.Once_1'(s(fun(X4,'type.num.num'),X6)))))) )),
  inference(forward_demodulation,[],[f17544,f17542])).
fof(f17544,plain,(
  ( ! [X6,X4,X5] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X4,'type.num.num'),X6),s(X4,X5))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(fun(X4,'type.num.num'),'type.num.num'),'_dstsel_0_x0_1'(s(X4,X5))),s('type.benchmark.times'(fun(X4,'type.num.num')),'const.benchmark.Once_1'(s(fun(X4,'type.num.num'),X6)))))) )),
  inference(superposition,[],[f296,f333])).
fof(f17602,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X2))))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X1,'type.num.num'),'_dst_x0_1'(s('type.num.num',X2))),s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3)))))) )),
  inference(forward_demodulation,[],[f17543,f17542])).
fof(f17543,plain,(
  ( ! [X2,X3,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X2))) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X1,'type.num.num'),'_dst_x0_1'(s('type.num.num',X2))),s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X3)))))) )),
  inference(superposition,[],[f296,f330])).
fof(f17601,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))) = s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))))))) )),
  inference(backward_demodulation,[],[f17542,f17479])).
fof(f17542,plain,(
  ( ! [X0] : (s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',X0)))) )),
  inference(superposition,[],[f296,f290])).
fof(f17476,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f296,f338])).
fof(f17478,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2))))))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f296,f338])).
fof(f17479,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))))) = s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))))) )),
  inference(unit_resulting_resolution,[],[f296,f303])).
fof(f17341,plain,(
  ( ! [X524,X520,X522,X518,X525,X521,X523,X519] : (s('type.benchmark.times'(X518),'const.benchmark.Twice_2'(s('type.benchmark.times'(X518),X524),s('type.benchmark.times'(X518),X525))) != s('type.benchmark.times'(X518),'const.benchmark.Twice_2'(s('type.benchmark.times'(X518),X523),s('type.benchmark.times'(X518),happ(s(fun(X519,'type.benchmark.times'(X518)),X521),s(X519,X520))))) | s('type.benchmark.times'(X518),X525) = s('type.benchmark.times'(X518),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X519),'const.benchmark.Once_1'(s(X519,X520))),s(fun(X519,'type.benchmark.times'(X518)),X521),s(fun('type.benchmark.times'(X519),fun('type.benchmark.times'(X519),'type.benchmark.times'(X518))),X522)))) )),
  inference(superposition,[],[f309,f335])).
fof(f17338,plain,(
  ( ! [X499,X494,X500,X496,X498,X495,X501,X497] : (s('type.benchmark.times'(X494),'const.benchmark.Twice_2'(s('type.benchmark.times'(X494),X500),s('type.benchmark.times'(X494),X501))) != s('type.benchmark.times'(X494),'const.benchmark.Twice_2'(s('type.benchmark.times'(X494),happ(s(fun(X495,'type.benchmark.times'(X494)),X497),s(X495,X496))),s('type.benchmark.times'(X494),X499))) | s('type.benchmark.times'(X494),X500) = s('type.benchmark.times'(X494),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X495),'const.benchmark.Once_1'(s(X495,X496))),s(fun(X495,'type.benchmark.times'(X494)),X497),s(fun('type.benchmark.times'(X495),fun('type.benchmark.times'(X495),'type.benchmark.times'(X494))),X498)))) )),
  inference(superposition,[],[f308,f335])).
fof(f17334,plain,(
  ( ! [X472,X474,X471,X475,X473] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X475),s('type.benchmark.times'(sK0),happ(s(fun(X471,'type.benchmark.times'(sK0)),X473),s(X471,X472))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X471),'const.benchmark.Once_1'(s(X471,X472))),s(fun(X471,'type.benchmark.times'(sK0)),X473),s(fun('type.benchmark.times'(X471),fun('type.benchmark.times'(X471),'type.benchmark.times'(sK0))),X474)))) )),
  inference(superposition,[],[f17086,f335])).
fof(f17329,plain,(
  ( ! [X447,X449,X446,X448,X450] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X446,'type.benchmark.times'(sK0)),X448),s(X446,X447))),s('type.benchmark.times'(sK0),X450))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X446),'const.benchmark.Once_1'(s(X446,X447))),s(fun(X446,'type.benchmark.times'(sK0)),X448),s(fun('type.benchmark.times'(X446),fun('type.benchmark.times'(X446),'type.benchmark.times'(sK0))),X449)))) )),
  inference(superposition,[],[f16999,f335])).
fof(f17247,plain,(
  ( ! [X26,X24,X23,X21,X25,X22] : (s('type.benchmark.times'(X21),'const.benchmark.Once_1'(s(X21,X26))) != s('type.benchmark.times'(X21),'const.benchmark.Once_1'(s(X21,happ(s(fun(X22,X21),X24),s(X22,X23))))) | s(X21,X26) = s(X21,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X22),'const.benchmark.Once_1'(s(X22,X23))),s(fun(X22,X21),X24),s(fun('type.benchmark.times'(X22),fun('type.benchmark.times'(X22),X21)),X25)))) )),
  inference(superposition,[],[f302,f335])).
fof(f17125,plain,(
  ( ! [X21,X22,X20] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X22),s('type.benchmark.times'(sK0),X20))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),sK4(X20,X21,'type.benchmark.times'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X21)))) )),
  inference(superposition,[],[f17086,f562])).
fof(f17124,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X19),s('type.benchmark.times'(sK0),happ(s(fun('type.num.num','type.benchmark.times'(sK0)),X17),s('type.num.num',X18))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X16),s(fun('type.num.num','type.benchmark.times'(sK0)),X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(superposition,[],[f17086,f304])).
fof(f17123,plain,(
  ( ! [X14,X15,X13] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X15),s('type.benchmark.times'(sK0),X13))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X13),s(fun('type.num.num','type.benchmark.times'(sK0)),X14),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17086,f295])).
fof(f17122,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X12),s('type.benchmark.times'(sK0),happ(s(fun(X9,'type.benchmark.times'(sK0)),X11),s(X9,X10))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(fun(X9,'type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)),'_dstsel_0_x0_1'(s(X9,X10))),s(fun(X9,'type.benchmark.times'(sK0)),X11)))) )),
  inference(superposition,[],[f17086,f333])).
fof(f17121,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X8),s('type.benchmark.times'(sK0),X6))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X5,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),X6))),s(X5,X7)))) )),
  inference(superposition,[],[f17086,f330])).
fof(f17120,plain,(
  ( ! [X4,X3] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X4),s('type.benchmark.times'(sK0),X3))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),X3)))) )),
  inference(superposition,[],[f17086,f290])).
fof(f17086,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X0),s('type.benchmark.times'(sK0),X1))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),X1)) )),
  inference(superposition,[],[f309,f245])).
fof(f17085,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s('type.benchmark.times'(X40),'const.benchmark.Twice_2'(s('type.benchmark.times'(X40),X43),s('type.benchmark.times'(X40),X41))) != s('type.benchmark.times'(X40),'const.benchmark.Twice_2'(s('type.benchmark.times'(X40),X44),s('type.benchmark.times'(X40),X45))) | s('type.benchmark.times'(X40),X45) = s('type.benchmark.times'(X40),sK4(X41,X42,'type.benchmark.times'(X40))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(X40),bool),X42)))) )),
  inference(superposition,[],[f309,f562])).
fof(f17084,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34] : (s('type.benchmark.times'(X33),'const.benchmark.Twice_2'(s('type.benchmark.times'(X33),X38),s('type.benchmark.times'(X33),X39))) != s('type.benchmark.times'(X33),'const.benchmark.Twice_2'(s('type.benchmark.times'(X33),X37),s('type.benchmark.times'(X33),happ(s(fun('type.num.num','type.benchmark.times'(X33)),X35),s('type.num.num',X36))))) | s('type.benchmark.times'(X33),X39) = s('type.benchmark.times'(X33),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X33),X34),s(fun('type.num.num','type.benchmark.times'(X33)),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36)))))) )),
  inference(superposition,[],[f309,f304])).
fof(f17083,plain,(
  ( ! [X30,X28,X31,X29,X27,X32] : (s('type.benchmark.times'(X27),'const.benchmark.Twice_2'(s('type.benchmark.times'(X27),X30),s('type.benchmark.times'(X27),X28))) != s('type.benchmark.times'(X27),'const.benchmark.Twice_2'(s('type.benchmark.times'(X27),X31),s('type.benchmark.times'(X27),X32))) | s('type.benchmark.times'(X27),X32) = s('type.benchmark.times'(X27),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X27),X28),s(fun('type.num.num','type.benchmark.times'(X27)),X29),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f309,f295])).
fof(f17082,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (s('type.benchmark.times'(X20),'const.benchmark.Twice_2'(s('type.benchmark.times'(X20),X25),s('type.benchmark.times'(X20),X26))) != s('type.benchmark.times'(X20),'const.benchmark.Twice_2'(s('type.benchmark.times'(X20),X24),s('type.benchmark.times'(X20),happ(s(fun(X21,'type.benchmark.times'(X20)),X23),s(X21,X22))))) | s('type.benchmark.times'(X20),X26) = s('type.benchmark.times'(X20),happ(s(fun(fun(X21,'type.benchmark.times'(X20)),'type.benchmark.times'(X20)),'_dstsel_0_x0_1'(s(X21,X22))),s(fun(X21,'type.benchmark.times'(X20)),X23)))) )),
  inference(superposition,[],[f309,f333])).
fof(f17081,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s('type.benchmark.times'(X13),'const.benchmark.Twice_2'(s('type.benchmark.times'(X13),X17),s('type.benchmark.times'(X13),X15))) != s('type.benchmark.times'(X13),'const.benchmark.Twice_2'(s('type.benchmark.times'(X13),X18),s('type.benchmark.times'(X13),X19))) | s('type.benchmark.times'(X13),X19) = s('type.benchmark.times'(X13),happ(s(fun(X14,'type.benchmark.times'(X13)),'_dst_x0_1'(s('type.benchmark.times'(X13),X15))),s(X14,X16)))) )),
  inference(superposition,[],[f309,f330])).
fof(f17080,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.benchmark.times'(X8),'const.benchmark.Twice_2'(s('type.benchmark.times'(X8),X10),s('type.benchmark.times'(X8),X9))) != s('type.benchmark.times'(X8),'const.benchmark.Twice_2'(s('type.benchmark.times'(X8),X11),s('type.benchmark.times'(X8),X12))) | s('type.benchmark.times'(X8),X12) = s('type.benchmark.times'(X8),happ(s(fun('type.benchmark.times'(X8),'type.benchmark.times'(X8)),'_i_0_0'),s('type.benchmark.times'(X8),X9)))) )),
  inference(superposition,[],[f309,f290])).
fof(f17030,plain,(
  ( ! [X21,X22,X20] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X20),s('type.benchmark.times'(sK0),X22))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),sK4(X20,X21,'type.benchmark.times'(sK0))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),X21)))) )),
  inference(superposition,[],[f16999,f562])).
fof(f17029,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.num.num','type.benchmark.times'(sK0)),X17),s('type.num.num',X18))),s('type.benchmark.times'(sK0),X19))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X16),s(fun('type.num.num','type.benchmark.times'(sK0)),X17),s('type.num.num','const.num.SUC_1'(s('type.num.num',X18)))))) )),
  inference(superposition,[],[f16999,f304])).
fof(f17028,plain,(
  ( ! [X14,X15,X13] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X13),s('type.benchmark.times'(sK0),X15))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),X13),s(fun('type.num.num','type.benchmark.times'(sK0)),X14),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f16999,f295])).
fof(f17027,plain,(
  ( ! [X12,X10,X11,X9] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(X9,'type.benchmark.times'(sK0)),X11),s(X9,X10))),s('type.benchmark.times'(sK0),X12))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(fun(X9,'type.benchmark.times'(sK0)),'type.benchmark.times'(sK0)),'_dstsel_0_x0_1'(s(X9,X10))),s(fun(X9,'type.benchmark.times'(sK0)),X11)))) )),
  inference(superposition,[],[f16999,f333])).
fof(f17026,plain,(
  ( ! [X6,X8,X7,X5] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X6),s('type.benchmark.times'(sK0),X8))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X5,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),X6))),s(X5,X7)))) )),
  inference(superposition,[],[f16999,f330])).
fof(f17025,plain,(
  ( ! [X4,X3] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X3),s('type.benchmark.times'(sK0),X4))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),X3)))) )),
  inference(superposition,[],[f16999,f290])).
fof(f16999,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X0),s('type.benchmark.times'(sK0),X1))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),X0)) )),
  inference(superposition,[],[f308,f245])).
fof(f16990,plain,(
  ( ! [X45,X43,X41,X44,X42,X40] : (s('type.benchmark.times'(X40),'const.benchmark.Twice_2'(s('type.benchmark.times'(X40),X41),s('type.benchmark.times'(X40),X43))) != s('type.benchmark.times'(X40),'const.benchmark.Twice_2'(s('type.benchmark.times'(X40),X44),s('type.benchmark.times'(X40),X45))) | s('type.benchmark.times'(X40),X44) = s('type.benchmark.times'(X40),sK4(X41,X42,'type.benchmark.times'(X40))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(X40),bool),X42)))) )),
  inference(superposition,[],[f308,f562])).
fof(f16989,plain,(
  ( ! [X39,X37,X35,X33,X38,X36,X34] : (s('type.benchmark.times'(X33),'const.benchmark.Twice_2'(s('type.benchmark.times'(X33),X38),s('type.benchmark.times'(X33),X39))) != s('type.benchmark.times'(X33),'const.benchmark.Twice_2'(s('type.benchmark.times'(X33),happ(s(fun('type.num.num','type.benchmark.times'(X33)),X35),s('type.num.num',X36))),s('type.benchmark.times'(X33),X37))) | s('type.benchmark.times'(X33),X38) = s('type.benchmark.times'(X33),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X33),X34),s(fun('type.num.num','type.benchmark.times'(X33)),X35),s('type.num.num','const.num.SUC_1'(s('type.num.num',X36)))))) )),
  inference(superposition,[],[f308,f304])).
fof(f16988,plain,(
  ( ! [X30,X28,X31,X29,X27,X32] : (s('type.benchmark.times'(X27),'const.benchmark.Twice_2'(s('type.benchmark.times'(X27),X28),s('type.benchmark.times'(X27),X30))) != s('type.benchmark.times'(X27),'const.benchmark.Twice_2'(s('type.benchmark.times'(X27),X31),s('type.benchmark.times'(X27),X32))) | s('type.benchmark.times'(X27),X31) = s('type.benchmark.times'(X27),'const.ind_type.FCONS_3'(s('type.benchmark.times'(X27),X28),s(fun('type.num.num','type.benchmark.times'(X27)),X29),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f308,f295])).
fof(f16987,plain,(
  ( ! [X26,X24,X23,X21,X25,X22,X20] : (s('type.benchmark.times'(X20),'const.benchmark.Twice_2'(s('type.benchmark.times'(X20),X25),s('type.benchmark.times'(X20),X26))) != s('type.benchmark.times'(X20),'const.benchmark.Twice_2'(s('type.benchmark.times'(X20),happ(s(fun(X21,'type.benchmark.times'(X20)),X23),s(X21,X22))),s('type.benchmark.times'(X20),X24))) | s('type.benchmark.times'(X20),X25) = s('type.benchmark.times'(X20),happ(s(fun(fun(X21,'type.benchmark.times'(X20)),'type.benchmark.times'(X20)),'_dstsel_0_x0_1'(s(X21,X22))),s(fun(X21,'type.benchmark.times'(X20)),X23)))) )),
  inference(superposition,[],[f308,f333])).
fof(f16986,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s('type.benchmark.times'(X13),'const.benchmark.Twice_2'(s('type.benchmark.times'(X13),X15),s('type.benchmark.times'(X13),X17))) != s('type.benchmark.times'(X13),'const.benchmark.Twice_2'(s('type.benchmark.times'(X13),X18),s('type.benchmark.times'(X13),X19))) | s('type.benchmark.times'(X13),X18) = s('type.benchmark.times'(X13),happ(s(fun(X14,'type.benchmark.times'(X13)),'_dst_x0_1'(s('type.benchmark.times'(X13),X15))),s(X14,X16)))) )),
  inference(superposition,[],[f308,f330])).
fof(f16985,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s('type.benchmark.times'(X8),'const.benchmark.Twice_2'(s('type.benchmark.times'(X8),X9),s('type.benchmark.times'(X8),X10))) != s('type.benchmark.times'(X8),'const.benchmark.Twice_2'(s('type.benchmark.times'(X8),X11),s('type.benchmark.times'(X8),X12))) | s('type.benchmark.times'(X8),X11) = s('type.benchmark.times'(X8),happ(s(fun('type.benchmark.times'(X8),'type.benchmark.times'(X8)),'_i_0_0'),s('type.benchmark.times'(X8),X9)))) )),
  inference(superposition,[],[f308,f290])).
fof(f16591,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK11(X7,X8,X9,bool))) )),
  inference(superposition,[],[f334,f396])).
fof(f16590,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK11(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f334,f396])).
fof(f16515,plain,(
  ( ! [X38] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X38))) | s(bool,X38) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0')))))) )),
  inference(superposition,[],[f302,f14012])).
fof(f16577,plain,(
  ( ! [X19] : (s(bool,X19) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(subsumption_resolution,[],[f16484,f246])).
fof(f16484,plain,(
  ( ! [X19] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X19)) )),
  inference(superposition,[],[f399,f14012])).
fof(f16439,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f14012,f396])).
fof(f16348,plain,(
  ( ! [X156,X154,X155] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X156))) | s(bool,X156) = s(bool,'|dollar|exists_1'(s(fun(X154,bool),happ(s(fun(X154,fun(X154,bool)),'=_0'),s(X154,X155)))))) )),
  inference(superposition,[],[f302,f13512])).
fof(f16419,plain,(
  ( ! [X74,X75,X73] : (s(bool,X75) != s(bool,'|dollar|exists_1'(s(fun(X73,bool),happ(s(fun(X73,fun(X73,bool)),'=_0'),s(X73,X74))))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(subsumption_resolution,[],[f16317,f246])).
fof(f16317,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,'T_0')) | s(bool,X75) != s(bool,'|dollar|exists_1'(s(fun(X73,bool),happ(s(fun(X73,fun(X73,bool)),'=_0'),s(X73,X74))))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f399,f13512])).
fof(f16247,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X28))))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f13512,f396])).
fof(f16073,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.benchmark.times'(X17),'const.benchmark.Once_1'(s(X17,X21))) != s('type.benchmark.times'(X17),'const.benchmark.Once_1'(s(X17,happ(s(fun(X18,X17),X20),s(X18,X19))))) | s(X17,X21) = s(X17,happ(s(fun(fun(X18,X17),X17),'_dstsel_0_x0_1'(s(X18,X19))),s(fun(X18,X17),X20)))) )),
  inference(superposition,[],[f302,f333])).
fof(f15911,plain,(
  ( ! [X95,X96] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X96))) | s(bool,X96) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X95)))))) )),
  inference(superposition,[],[f302,f13033])).
fof(f15981,plain,(
  ( ! [X47,X46] : (s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X46))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(subsumption_resolution,[],[f15881,f246])).
fof(f15881,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s(bool,X47) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X46))))) | s(bool,'T_0') = s(bool,X47)) )),
  inference(superposition,[],[f399,f13033])).
fof(f15813,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X26))))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f13033,f396])).
fof(f15604,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f246,f248,f326])).
fof(f15535,plain,(
  ( ! [X37] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X37))) | s(bool,X37) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0')))))) )),
  inference(superposition,[],[f302,f12727])).
fof(f15592,plain,(
  ( ! [X18] : (s(bool,X18) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f15505,f246])).
fof(f15505,plain,(
  ( ! [X18] : (~p(s(bool,'T_0')) | s(bool,X18) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f399,f12727])).
fof(f15138,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f248,f248,f323])).
fof(f15066,plain,(
  ( ! [X88,X89] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X89))) | s(bool,X89) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X88)))))) )),
  inference(superposition,[],[f302,f12413])).
fof(f15126,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X40))))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f15037,f246])).
fof(f15037,plain,(
  ( ! [X41,X40] : (~p(s(bool,'T_0')) | s(bool,X41) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X40))))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f399,f12413])).
fof(f14888,plain,(
  ( ! [X35] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X35))) | s(bool,X35) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))) )),
  inference(superposition,[],[f302,f3927])).
fof(f14939,plain,(
  ( ! [X16] : (s(bool,X16) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f14859,f246])).
fof(f14859,plain,(
  ( ! [X16] : (~p(s(bool,'T_0')) | s(bool,X16) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f399,f3927])).
fof(f14817,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f3927,f396])).
fof(f14319,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X1) != s(bool,'|dollar|exists_1'(s(fun(X2,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1646,f396])).
fof(f14318,plain,(
  ( ! [X92,X93,X91] : (s(bool,X91) != s(bool,'|dollar|exists_1'(s(fun(X93,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,sK4(X91,X92,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X92)))) )),
  inference(superposition,[],[f1646,f562])).
fof(f14316,plain,(
  ( ! [X85,X86,X84] : (s(bool,X84) != s(bool,'|dollar|exists_1'(s(fun(X86,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X84),s(fun('type.num.num',bool),X85),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f1646,f295])).
fof(f14315,plain,(
  ( ! [X80,X83,X81,X82] : (s(bool,X81) != s(bool,'|dollar|exists_1'(s(fun(X83,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(X80,bool),'_dst_x0_1'(s(bool,X81))),s(X80,X82)))) )),
  inference(superposition,[],[f1646,f330])).
fof(f14314,plain,(
  ( ! [X78,X79] : (s(bool,X78) != s(bool,'|dollar|exists_1'(s(fun(X79,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X78)))) )),
  inference(superposition,[],[f1646,f290])).
fof(f14012,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0')))))),
  inference(unit_resulting_resolution,[],[f381,f13930,f1150])).
fof(f14013,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f13930,f1169])).
fof(f13930,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f5672,f3449])).
fof(f13946,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0')))),
  inference(unit_resulting_resolution,[],[f381,f5672,f1150])).
fof(f13947,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f5672,f1169])).
fof(f13512,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f381,f13343,f1150])).
fof(f13513,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(X1,bool),happ(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,X2))))))))))) )),
  inference(unit_resulting_resolution,[],[f13343,f1169])).
fof(f13343,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))))))) )),
  inference(unit_resulting_resolution,[],[f4794,f3449])).
fof(f13356,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X0),s(fun('type.num.num',bool),happ(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s('type.num.num',X1))),s('type.num.num','const.num.SUC_1'(s('type.num.num',X1)))))) )),
  inference(unit_resulting_resolution,[],[f304,f4794,f399])).
fof(f13360,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1)))) )),
  inference(unit_resulting_resolution,[],[f381,f4794,f1150])).
fof(f13361,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(X1,bool),happ(s(fun(X1,fun(X1,bool)),'=_0'),s(X1,X2))),s(X1,X2))))))))) )),
  inference(unit_resulting_resolution,[],[f4794,f1169])).
fof(f13033,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0)))))) )),
  inference(unit_resulting_resolution,[],[f381,f12871,f1150])).
fof(f13034,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f12871,f1169])).
fof(f12871,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))))))) )),
  inference(unit_resulting_resolution,[],[f3523,f3449])).
fof(f12887,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f381,f3523,f1150])).
fof(f12888,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X1))),s(bool,'T_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f3523,f1169])).
fof(f12781,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f12749,f248])).
fof(f12749,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f12576,f1759])).
fof(f12731,plain,(
  ( ! [X4] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X4)))))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f12576,f250])).
fof(f12729,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0)))))) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f12576,f1759])).
fof(f12727,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f381,f12576,f1150])).
fof(f12728,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f12576,f1169])).
fof(f12576,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f3220,f3449])).
fof(f12593,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X1))))))))) )),
  inference(unit_resulting_resolution,[],[f3220,f1169])).
fof(f12413,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0)))))) )),
  inference(unit_resulting_resolution,[],[f381,f12249,f1150])).
fof(f12414,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))))))))))) )),
  inference(unit_resulting_resolution,[],[f12249,f1169])).
fof(f12249,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))))))) )),
  inference(unit_resulting_resolution,[],[f2990,f3449])).
fof(f12265,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f381,f2990,f1150])).
fof(f12266,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X1))),s(bool,'T_0'))))))))) )),
  inference(unit_resulting_resolution,[],[f2990,f1169])).
fof(f3220,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X0))))) )),
  inference(unit_resulting_resolution,[],[f248,f327])).
fof(f3971,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f3945,f248])).
fof(f3945,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f3805,f1759])).
fof(f4481,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'F_0'))))),
  inference(unit_resulting_resolution,[],[f381,f337])).
fof(f4483,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,'T_0'))))),
  inference(unit_resulting_resolution,[],[f381,f337])).
fof(f4794,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f4793,f341])).
fof(f4793,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X1))))) )),
  inference(forward_demodulation,[],[f4792,f295])).
fof(f4792,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),'_dst_x1x0_2'(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0'))))))) )),
  inference(forward_demodulation,[],[f4711,f341])).
fof(f4711,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0'))))),s(X0,X1))))) )),
  inference(unit_resulting_resolution,[],[f295,f338])).
fof(f3523,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f246,f328])).
fof(f2990,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0'))))) )),
  inference(unit_resulting_resolution,[],[f246,f325])).
fof(f5672,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,'T_0'))))),
  inference(unit_resulting_resolution,[],[f246,f246,f322])).
fof(f3929,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0)))))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f3805,f396])).
fof(f4866,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(subsumption_resolution,[],[f4777,f248])).
fof(f4777,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X1) != s(X0,X2) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) )),
  inference(superposition,[],[f338,f250])).
fof(f4593,plain,(
  ( ! [X6,X4,X5,X3] : (s(X3,X4) = s(X3,X5) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),'=_0'),s(X3,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f4550,f246])).
fof(f4550,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(X3,X4) = s(X3,X5) | s(bool,X6) = s(bool,happ(s(fun(X3,bool),happ(s(fun(X3,fun(X3,bool)),'=_0'),s(X3,X4))),s(X3,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f337,f396])).
fof(f4190,plain,(
  ( ! [X21,X19,X17,X20,X18] : (s('type.benchmark.times'(X17),'const.benchmark.Once_1'(s(X17,X21))) != s('type.benchmark.times'(X17),'const.benchmark.Once_1'(s(X17,happ(s(fun('type.num.num',X17),X19),s('type.num.num',X20))))) | s(X17,X21) = s(X17,'const.ind_type.FCONS_3'(s(X17,X18),s(fun('type.num.num',X17),X19),s('type.num.num','const.num.SUC_1'(s('type.num.num',X20)))))) )),
  inference(superposition,[],[f302,f304])).
fof(f3927,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))),
  inference(unit_resulting_resolution,[],[f381,f3805,f1150])).
fof(f3928,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))))))))) )),
  inference(unit_resulting_resolution,[],[f3805,f1169])).
fof(f3805,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))))),
  inference(unit_resulting_resolution,[],[f2221,f3449])).
fof(f3819,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f381,f2221,f1150])).
fof(f3820,plain,(
  ( ! [X0,X1] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X1))))))))) )),
  inference(unit_resulting_resolution,[],[f2221,f1169])).
fof(f3431,plain,(
  ( ! [X165,X163,X166,X164] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X165))) | s(bool,X165) = s(bool,'|dollar|exists_1'(s(fun(X163,bool),X164))) | s(X163,X166) = s(X163,sK4(X166,X164,X163))) )),
  inference(superposition,[],[f302,f562])).
fof(f3453,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,X85) != s(bool,'|dollar|exists_1'(s(fun(X83,bool),X84))) | s(bool,'T_0') = s(bool,X85) | s(X83,X86) = s(X83,sK4(X86,X84,X83))) )),
  inference(subsumption_resolution,[],[f3410,f246])).
fof(f3410,plain,(
  ( ! [X85,X83,X86,X84] : (~p(s(bool,'T_0')) | s(bool,X85) != s(bool,'|dollar|exists_1'(s(fun(X83,bool),X84))) | s(bool,'T_0') = s(bool,X85) | s(X83,X86) = s(X83,sK4(X86,X84,X83))) )),
  inference(superposition,[],[f399,f562])).
fof(f3371,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X113) != s(bool,'const.bool.DATATYPE_1'(s(X115,X116))) | s(bool,'T_0') = s(bool,sK4(X113,X114,bool)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X114)))) )),
  inference(superposition,[],[f554,f562])).
fof(f3340,plain,(
  ( ! [X19,X17,X18,X16] : (s('type.benchmark.times'(X16),'const.benchmark.Once_1'(s(X16,X17))) != s('type.benchmark.times'(X16),'const.benchmark.Once_1'(s(X16,X19))) | s(X16,X19) = s(X16,sK4(X17,X18,X16)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X16,bool),X18)))) )),
  inference(superposition,[],[f302,f562])).
fof(f3312,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) = s(bool,X7) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X6))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,sK4(X5,X6,bool))) )),
  inference(superposition,[],[f562,f396])).
fof(f3311,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X3))) | s(bool,X4) = s(bool,sK4(X2,X3,bool)) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f562,f396])).
fof(f3040,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f2492,f396])).
fof(f2986,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) != s(bool,X37) | s(bool,'F_0') = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) )),
  inference(subsumption_resolution,[],[f2955,f381])).
fof(f2955,plain,(
  ( ! [X37,X38,X36] : (s(bool,X36) != s(bool,X37) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) )),
  inference(superposition,[],[f1864,f1759])).
fof(f2584,plain,(
  ( ! [X158,X159,X160] : (~p(s(bool,happ(s(fun(bool,bool),X159),s(bool,'F_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X159)))) | s(bool,X160) = s(bool,sK4(X158,X159,bool)) | s(bool,'F_0') = s(bool,X160)) )),
  inference(superposition,[],[f299,f1759])).
fof(f2492,plain,(
  ( ! [X8,X9] : (s(bool,'T_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f381,f1759])).
fof(f2425,plain,(
  ( ! [X171,X172,X170] : (~p(s(bool,happ(s(fun(bool,bool),X171),s(bool,X172)))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X171)))) | s(bool,'F_0') = s(bool,X172) | s(bool,'F_0') = s(bool,sK4(X170,X171,bool))) )),
  inference(superposition,[],[f299,f1759])).
fof(f2307,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) )),
  inference(superposition,[],[f1759,f1759])).
fof(f2221,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0))))) )),
  inference(unit_resulting_resolution,[],[f246,f324])).
fof(f1942,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'F_0'))))) )),
  inference(unit_resulting_resolution,[],[f248,f321])).
fof(f1876,plain,(
  ( ! [X177,X178] : (~p(s(bool,happ(s(fun(bool,bool),X178),s(bool,'T_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X178)))) | s(bool,'F_0') = s(bool,sK4(X177,X178,bool))) )),
  inference(forward_demodulation,[],[f1807,f289])).
fof(f1807,plain,(
  ( ! [X177,X180,X178,X179] : (~p(s(bool,happ(s(fun(bool,bool),X178),s(bool,'const.bool.DATATYPE_1'(s(X179,X180)))))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X178)))) | s(bool,'F_0') = s(bool,sK4(X177,X178,bool))) )),
  inference(superposition,[],[f299,f1677])).
fof(f1870,plain,(
  ( ! [X94,X95,X96] : (p(s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun(X94,bool),X95),s(X94,sK4(X96,X95,X94))))) )),
  inference(subsumption_resolution,[],[f1869,f246])).
fof(f1869,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun(X94,bool),X95),s(X94,sK4(X96,X95,X94))))) )),
  inference(forward_demodulation,[],[f1786,f289])).
fof(f1786,plain,(
  ( ! [X94,X97,X95,X98,X96] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X97,X98)))) | p(s(bool,'|dollar|exists_1'(s(fun(X94,bool),X95)))) | s(bool,'F_0') = s(bool,happ(s(fun(X94,bool),X95),s(X94,sK4(X96,X95,X94))))) )),
  inference(superposition,[],[f299,f1677])).
fof(f1864,plain,(
  ( ! [X54,X51] : (s(bool,X51) != s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X51)) )),
  inference(subsumption_resolution,[],[f1863,f246])).
fof(f1863,plain,(
  ( ! [X54,X51] : (~p(s(bool,'T_0')) | s(bool,X51) != s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X51)) )),
  inference(forward_demodulation,[],[f1781,f289])).
fof(f1781,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,'const.bool.DATATYPE_1'(s(X52,X53)))) | s(bool,X51) != s(bool,X54) | s(bool,'T_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X51)) )),
  inference(superposition,[],[f399,f1677])).
fof(f1759,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,'F_0') = s(bool,X2)) )),
  inference(superposition,[],[f1677,f1677])).
fof(f1670,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f1655,f246])).
fof(f1655,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1150,f396])).
fof(f1624,plain,(
  ( ! [X33,X34] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X34))) | s(bool,X34) = s(bool,'|dollar|exists_1'(s(fun(X33,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(superposition,[],[f302,f1545])).
fof(f1646,plain,(
  ( ! [X19,X20] : (s(bool,X20) != s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f1616,f246])).
fof(f1616,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | s(bool,X20) != s(bool,'|dollar|exists_1'(s(fun(X19,bool),'_dst_x0_1'(s(bool,'T_0'))))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f399,f1545])).
fof(f1596,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,'|dollar|exists_1'(s(fun(X1,bool),'_dst_x0_1'(s(bool,X0))))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f1545,f396])).
fof(f1545,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0')))))) )),
  inference(unit_resulting_resolution,[],[f1513,f252])).
fof(f1513,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,'T_0'))))))) )),
  inference(unit_resulting_resolution,[],[f246,f1169])).
fof(f1161,plain,(
  ( ! [X12,X13] : (~p(s(bool,happ(s(fun(bool,bool),X13),s(bool,'F_0')))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),X13)))) | s(bool,'T_0') = s(bool,sK4(X12,X13,bool))) )),
  inference(superposition,[],[f299,f250])).
fof(f1251,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'F_0'))),s(bool,X0))))) )),
  inference(unit_resulting_resolution,[],[f248,f320])).
fof(f1050,plain,(
  ( ! [X19,X20,X18] : (s(bool,X18) != s(bool,X19) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X19))) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f303,f396])).
fof(f1047,plain,(
  ( ! [X12,X10,X11] : (s(bool,X11) != s(bool,X12) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X10))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X12))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f303,f396])).
fof(f1045,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') != s(bool,X5) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X4))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X5))) | s(bool,X4) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f303,f396])).
fof(f1013,plain,(
  ( ! [X39,X37,X38,X40] : (s('type.benchmark.times'(X37),'const.benchmark.Once_1'(s(X37,X38))) != s('type.benchmark.times'(X37),'const.benchmark.Once_1'(s(X37,X40))) | s(X37,X40) = s(X37,'const.ind_type.FCONS_3'(s(X37,X38),s(fun('type.num.num',X37),X39),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f302,f295])).
fof(f1012,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.benchmark.times'(X32),'const.benchmark.Once_1'(s(X32,X34))) != s('type.benchmark.times'(X32),'const.benchmark.Once_1'(s(X32,X36))) | s(X32,X36) = s(X32,happ(s(fun(X33,X32),'_dst_x0_1'(s(X32,X34))),s(X33,X35)))) )),
  inference(superposition,[],[f302,f330])).
fof(f1011,plain,(
  ( ! [X30,X31,X29] : (s('type.benchmark.times'(X29),'const.benchmark.Once_1'(s(X29,X30))) != s('type.benchmark.times'(X29),'const.benchmark.Once_1'(s(X29,X31))) | s(X29,X31) = s(X29,happ(s(fun(X29,X29),'_i_0_0'),s(X29,X30)))) )),
  inference(superposition,[],[f302,f290])).
fof(f1010,plain,(
  ( ! [X28,X26,X27] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X28))) | s(bool,X28) = s(bool,'const.bool.DATATYPE_1'(s(X26,X27)))) )),
  inference(superposition,[],[f302,f289])).
fof(f1004,plain,(
  ( ! [X12,X10,X11] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X11))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X12))) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f302,f396])).
fof(f1002,plain,(
  ( ! [X6,X4,X5] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X5))) | s(bool,X4) = s(bool,X5) | s(bool,X4) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f302,f396])).
fof(f1001,plain,(
  ( ! [X2,X3,X1] : (s('type.benchmark.times'('type.benchmark.times'(X1)),'const.benchmark.Once_1'(s('type.benchmark.times'(X1),X3))) != s('type.benchmark.times'('type.benchmark.times'(X1)),'const.benchmark.Once_1'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X2))))) | s('type.benchmark.times'(X1),X3) = s('type.benchmark.times'(X1),happ(s(fun(X1,'type.benchmark.times'(X1)),'const.benchmark.Once_0'),s(X1,X2)))) )),
  inference(superposition,[],[f302,f291])).
fof(f991,plain,(
  ( ! [X21,X19,X20] : (s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(subsumption_resolution,[],[f754,f246])).
fof(f754,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,'T_0')) | s(bool,X19) != s(bool,X20) | s(bool,'T_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f399,f396])).
fof(f990,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f753,f246])).
fof(f753,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f315,f396])).
fof(f739,plain,(
  ( ! [X28,X29] : (s(bool,X28) = s(bool,'const.bool.DATATYPE_1'(s(bool,X28))) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f289,f396])).
fof(f658,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X24) = s(bool,'const.ind_type.FCONS_3'(s(bool,X22),s(fun('type.num.num',bool),X23),s('type.num.num','const.num.|48|_0'))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f396,f295])).
fof(f657,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,'T_0') = s(bool,X19) | s(bool,X21) = s(bool,happ(s(fun(X18,bool),'_dst_x0_1'(s(bool,X19))),s(X18,X20))) | s(bool,'T_0') = s(bool,X21)) )),
  inference(superposition,[],[f396,f330])).
fof(f656,plain,(
  ( ! [X17,X16] : (s(bool,'T_0') = s(bool,X16) | s(bool,X17) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X16))) | s(bool,'T_0') = s(bool,X17)) )),
  inference(superposition,[],[f396,f290])).
fof(f646,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f396,f396])).
fof(f633,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) = s(bool,X31) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X29),s(fun('type.num.num',bool),X30),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f396,f295])).
fof(f632,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) = s(bool,X28) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),'_dst_x0_1'(s(bool,X26))),s(X25,X27)))) )),
  inference(superposition,[],[f396,f330])).
fof(f631,plain,(
  ( ! [X24,X23] : (s(bool,X23) = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X23)))) )),
  inference(superposition,[],[f396,f290])).
fof(f572,plain,(
  ( ! [X21,X19,X20,X18] : (s(bool,X18) != s(bool,'const.bool.DATATYPE_1'(s(X20,X21))) | s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,X18),s(fun('type.num.num',bool),X19),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f554,f295])).
fof(f571,plain,(
  ( ! [X14,X17,X15,X13,X16] : (s(bool,X14) != s(bool,'const.bool.DATATYPE_1'(s(X16,X17))) | s(bool,'T_0') = s(bool,happ(s(fun(X13,bool),'_dst_x0_1'(s(bool,X14))),s(X13,X15)))) )),
  inference(superposition,[],[f554,f330])).
fof(f570,plain,(
  ( ! [X12,X10,X11] : (s(bool,X10) != s(bool,'const.bool.DATATYPE_1'(s(X11,X12))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X10)))) )),
  inference(superposition,[],[f554,f290])).
fof(f562,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(subsumption_resolution,[],[f561,f248])).
fof(f561,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK4(X2,X1,X0)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X0,bool),X1)))) )),
  inference(superposition,[],[f298,f250])).
fof(f554,plain,(
  ( ! [X2,X0,X1] : (s(bool,X2) != s(bool,'const.bool.DATATYPE_1'(s(X0,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(subsumption_resolution,[],[f545,f246])).
fof(f545,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X2) != s(bool,'const.bool.DATATYPE_1'(s(X0,X1))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f399,f289])).
fof(f454,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(subsumption_resolution,[],[f448,f248])).
fof(f448,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,X5) = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f312,f250])).
fof(f399,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f255,f250])).
fof(f396,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f250,f250])).
fof(f381,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f248,f251])).
fof(f369,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (s(fun(X1,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X3,fun(X4,X5)),happ(s(fun(X6,fun(X3,fun(X4,X5))),X9),s(X6,X10))))) = s(fun(X1,fun(X3,fun(X4,X0))),happ(s(fun(X6,fun(X1,fun(X3,fun(X4,X0)))),'_dst_x0000x0111x1011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X6,fun(X3,fun(X4,X5))),X9))),s(X6,X10)))) )),
  inference(cnf_transformation,[],[f179])).
fof(f179,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : s(fun(X1,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X3,fun(X4,X5)),happ(s(fun(X6,fun(X3,fun(X4,X5))),X9),s(X6,X10))))) = s(fun(X1,fun(X3,fun(X4,X0))),happ(s(fun(X6,fun(X1,fun(X3,fun(X4,X0)))),'_dst_x0000x0111x1011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X6,fun(X3,fun(X4,X5))),X9))),s(X6,X10)))),
  inference(flattening,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : ! [X7,X8,X9,X10] : s(fun(X1,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X3,fun(X4,X5)),happ(s(fun(X6,fun(X3,fun(X4,X5))),X9),s(X6,X10))))) = s(fun(X1,fun(X3,fun(X4,X0))),happ(s(fun(X6,fun(X1,fun(X3,fun(X4,X0)))),'_dst_x0000x0111x1011_3'(s(fun(X2,fun(X5,X0)),X7),s(fun(X1,fun(X3,fun(X4,X2))),X8),s(fun(X6,fun(X3,fun(X4,X5))),X9))),s(X6,X10)))),
  inference(rectify,[],[f50])).
fof(f50,axiom,(
  ! [X18,X19,X44,X41,X43,X45,X20] : ! [X21,X22,X42,X23] : s(fun(X19,fun(X41,fun(X43,X18))),'_dst_x000x111x011_3'(s(fun(X44,fun(X45,X18)),X21),s(fun(X19,fun(X41,fun(X43,X44))),X22),s(fun(X41,fun(X43,X45)),happ(s(fun(X20,fun(X41,fun(X43,X45))),X42),s(X20,X23))))) = s(fun(X19,fun(X41,fun(X43,X18))),happ(s(fun(X20,fun(X19,fun(X41,fun(X43,X18)))),'_dst_x0000x0111x1011_3'(s(fun(X44,fun(X45,X18)),X21),s(fun(X19,fun(X41,fun(X43,X44))),X22),s(fun(X20,fun(X41,fun(X43,X45))),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x0000x0111x1011_ax')).
fof(f368,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(X1,fun(X3,X0)),happ(s(fun(X5,fun(X1,fun(X3,X0))),'_dst_x000x110x101_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X5,fun(X1,X2)),X7),s(fun(X5,fun(X3,X4)),X8))),s(X5,X9))) = s(fun(X1,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X1,X2),happ(s(fun(X5,fun(X1,X2)),X7),s(X5,X9))),s(fun(X3,X4),happ(s(fun(X5,fun(X3,X4)),X8),s(X5,X9)))))) )),
  inference(cnf_transformation,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s(fun(X1,fun(X3,X0)),happ(s(fun(X5,fun(X1,fun(X3,X0))),'_dst_x000x110x101_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X5,fun(X1,X2)),X7),s(fun(X5,fun(X3,X4)),X8))),s(X5,X9))) = s(fun(X1,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X1,X2),happ(s(fun(X5,fun(X1,X2)),X7),s(X5,X9))),s(fun(X3,X4),happ(s(fun(X5,fun(X3,X4)),X8),s(X5,X9)))))),
  inference(flattening,[],[f176])).
fof(f176,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ! [X6,X7,X8,X9] : s(fun(X1,fun(X3,X0)),happ(s(fun(X5,fun(X1,fun(X3,X0))),'_dst_x000x110x101_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X5,fun(X1,X2)),X7),s(fun(X5,fun(X3,X4)),X8))),s(X5,X9))) = s(fun(X1,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X2,fun(X4,X0)),X6),s(fun(X1,X2),happ(s(fun(X5,fun(X1,X2)),X7),s(X5,X9))),s(fun(X3,X4),happ(s(fun(X5,fun(X3,X4)),X8),s(X5,X9)))))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X18,X19,X43,X41,X44,X20] : ! [X21,X22,X42,X23] : s(fun(X19,fun(X41,X18)),happ(s(fun(X20,fun(X19,fun(X41,X18))),'_dst_x000x110x101_3'(s(fun(X43,fun(X44,X18)),X21),s(fun(X20,fun(X19,X43)),X22),s(fun(X20,fun(X41,X44)),X42))),s(X20,X23))) = s(fun(X19,fun(X41,X18)),'_dst_x00x10x01_3'(s(fun(X43,fun(X44,X18)),X21),s(fun(X19,X43),happ(s(fun(X20,fun(X19,X43)),X22),s(X20,X23))),s(fun(X41,X44),happ(s(fun(X20,fun(X41,X44)),X42),s(X20,X23)))))),
  file('thm.benchmark.times_distinct','_dst_x000x110x101_ax')).
fof(f367,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(X3,fun(X4,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X3,fun(X4,X1)),happ(s(fun(X2,fun(X3,fun(X4,X1))),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,fun(X3,fun(X4,X1))),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))) )),
  inference(cnf_transformation,[],[f175])).
fof(f175,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s(fun(X3,fun(X4,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X3,fun(X4,X1)),happ(s(fun(X2,fun(X3,fun(X4,X1))),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,fun(X3,fun(X4,X1))),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))),
  inference(flattening,[],[f174])).
fof(f174,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ! [X6,X7,X8,X9] : s(fun(X3,fun(X4,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X3,fun(X4,X1)),happ(s(fun(X2,fun(X3,fun(X4,X1))),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x111x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,fun(X3,fun(X4,X1))),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))),
  inference(rectify,[],[f54])).
fof(f54,axiom,(
  ! [X18,X43,X20,X19,X41,X44] : ! [X21,X22,X42,X23] : s(fun(X19,fun(X41,X18)),'_dst_x00x11x11_3'(s(fun(X43,fun(X44,X18)),X21),s(fun(X19,fun(X41,X43)),happ(s(fun(X20,fun(X19,fun(X41,X43))),X22),s(X20,X23))),s(fun(X19,fun(X41,X44)),X42))) = s(fun(X19,fun(X41,X18)),happ(s(fun(X20,fun(X19,fun(X41,X18))),'_dst_x000x111x011_3'(s(fun(X43,fun(X44,X18)),X21),s(fun(X20,fun(X19,fun(X41,X43))),X22),s(fun(X19,fun(X41,X44)),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x000x111x011_ax')).
fof(f366,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (s(fun(X3,fun(X4,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X5,X0)),X6),s(X1,happ(s(fun(X2,X1),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x100x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,X1),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))) )),
  inference(cnf_transformation,[],[f173])).
fof(f173,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9] : s(fun(X3,fun(X4,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X5,X0)),X6),s(X1,happ(s(fun(X2,X1),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x100x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,X1),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))),
  inference(flattening,[],[f172])).
fof(f172,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ! [X6,X7,X8,X9] : s(fun(X3,fun(X4,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X5,X0)),X6),s(X1,happ(s(fun(X2,X1),X7),s(X2,X9))),s(fun(X3,fun(X4,X5)),X8))) = s(fun(X3,fun(X4,X0)),happ(s(fun(X2,fun(X3,fun(X4,X0))),'_dst_x000x100x011_3'(s(fun(X1,fun(X5,X0)),X6),s(fun(X2,X1),X7),s(fun(X3,fun(X4,X5)),X8))),s(X2,X9)))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X18,X43,X20,X19,X41,X44] : ! [X21,X22,X42,X23] : s(fun(X19,fun(X41,X18)),'_dst_x00x00x11_3'(s(fun(X43,fun(X44,X18)),X21),s(X43,happ(s(fun(X20,X43),X22),s(X20,X23))),s(fun(X19,fun(X41,X44)),X42))) = s(fun(X19,fun(X41,X18)),happ(s(fun(X20,fun(X19,fun(X41,X18))),'_dst_x000x100x011_3'(s(fun(X43,fun(X44,X18)),X21),s(fun(X20,X43),X22),s(fun(X19,fun(X41,X44)),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x000x100x011_ax')).
fof(f365,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X4,fun(X2,X1)),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8))) = s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),happ(s(fun(X4,fun(X2,X1)),X6),s(X4,X8))),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8)))))) )),
  inference(cnf_transformation,[],[f171])).
fof(f171,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X4,fun(X2,X1)),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8))) = s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),happ(s(fun(X4,fun(X2,X1)),X6),s(X4,X8))),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8)))))),
  inference(flattening,[],[f170])).
fof(f170,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x11x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X4,fun(X2,X1)),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8))) = s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),happ(s(fun(X4,fun(X2,X1)),X6),s(X4,X8))),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8)))))),
  inference(rectify,[],[f48])).
fof(f48,axiom,(
  ! [X18,X41,X19,X43,X20] : ! [X21,X22,X42,X23] : s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),'_dst_x00x11x11_3'(s(fun(X41,fun(X43,X18)),X21),s(fun(X20,fun(X19,X41)),X22),s(fun(X20,fun(X19,X43)),X42))),s(X20,X23))) = s(fun(X19,X18),'_dst_x0x1x1_3'(s(fun(X41,fun(X43,X18)),X21),s(fun(X19,X41),happ(s(fun(X20,fun(X19,X41)),X22),s(X20,X23))),s(fun(X19,X43),happ(s(fun(X20,fun(X19,X43)),X42),s(X20,X23)))))),
  file('thm.benchmark.times_distinct','_dst_x00x11x11_ax')).
fof(f364,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))) )),
  inference(cnf_transformation,[],[f169])).
fof(f169,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(flattening,[],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x01x11_3'(s(fun(X1,fun(X3,X0)),X5),s(fun(X2,X1),X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(rectify,[],[f57])).
fof(f57,axiom,(
  ! [X18,X41,X19,X43,X20] : ! [X21,X22,X42,X23] : s(fun(X19,X18),'_dst_x0x1x1_3'(s(fun(X41,fun(X43,X18)),X21),s(fun(X19,X41),X22),s(fun(X19,X43),happ(s(fun(X20,fun(X19,X43)),X42),s(X20,X23))))) = s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),'_dst_x00x01x11_3'(s(fun(X41,fun(X43,X18)),X21),s(fun(X19,X41),X22),s(fun(X20,fun(X19,X43)),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x00x01x11_ax')).
fof(f363,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X2,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(flattening,[],[f166])).
fof(f166,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X2,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X2,X3),happ(s(fun(X4,fun(X2,X3)),X7),s(X4,X8))))) = s(fun(X2,X0),happ(s(fun(X4,fun(X2,X0)),'_dst_x00x00x11_3'(s(fun(X1,fun(X3,X0)),X5),s(X1,X6),s(fun(X4,fun(X2,X3)),X7))),s(X4,X8)))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X18,X41,X19,X43,X20] : ! [X21,X22,X42,X23] : s(fun(X19,X18),'_dst_x0x0x1_3'(s(fun(X41,fun(X43,X18)),X21),s(X41,X22),s(fun(X19,X43),happ(s(fun(X20,fun(X19,X43)),X42),s(X20,X23))))) = s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),'_dst_x00x00x11_3'(s(fun(X41,fun(X43,X18)),X21),s(X41,X22),s(fun(X20,fun(X19,X43)),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x00x00x11_ax')).
fof(f362,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))) )),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7,X8] : s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X4,X0)),X5),s(X1,happ(s(fun(X2,X1),X6),s(X2,X8))),s(fun(X3,X4),X7))) = s(fun(X3,X0),happ(s(fun(X2,fun(X3,X0)),'_dst_x00x10x01_3'(s(fun(X1,fun(X4,X0)),X5),s(fun(X2,X1),X6),s(fun(X3,X4),X7))),s(X2,X8)))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X18,X41,X20,X19,X43] : ! [X21,X22,X42,X23] : s(fun(X19,X18),'_dst_x0x0x1_3'(s(fun(X41,fun(X43,X18)),X21),s(X41,happ(s(fun(X20,X41),X22),s(X20,X23))),s(fun(X19,X43),X42))) = s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),'_dst_x00x10x01_3'(s(fun(X41,fun(X43,X18)),X21),s(fun(X20,X41),X22),s(fun(X19,X43),X42))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x00x10x01_ax')).
fof(f361,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(fun(X1,fun(X2,X0)),'_dst_x00x11_2'(s(fun(X3,X0),X5),s(fun(X1,fun(X2,X3)),happ(s(fun(X4,fun(X1,fun(X2,X3))),X6),s(X4,X7))))) = s(fun(X1,fun(X2,X0)),happ(s(fun(X4,fun(X1,fun(X2,X0))),'_dst_x000x111_2'(s(fun(X3,X0),X5),s(fun(X4,fun(X1,fun(X2,X3))),X6))),s(X4,X7)))) )),
  inference(cnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(fun(X1,fun(X2,X0)),'_dst_x00x11_2'(s(fun(X3,X0),X5),s(fun(X1,fun(X2,X3)),happ(s(fun(X4,fun(X1,fun(X2,X3))),X6),s(X4,X7))))) = s(fun(X1,fun(X2,X0)),happ(s(fun(X4,fun(X1,fun(X2,X0))),'_dst_x000x111_2'(s(fun(X3,X0),X5),s(fun(X4,fun(X1,fun(X2,X3))),X6))),s(X4,X7)))),
  inference(flattening,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : s(fun(X1,fun(X2,X0)),'_dst_x00x11_2'(s(fun(X3,X0),X5),s(fun(X1,fun(X2,X3)),happ(s(fun(X4,fun(X1,fun(X2,X3))),X6),s(X4,X7))))) = s(fun(X1,fun(X2,X0)),happ(s(fun(X4,fun(X1,fun(X2,X0))),'_dst_x000x111_2'(s(fun(X3,X0),X5),s(fun(X4,fun(X1,fun(X2,X3))),X6))),s(X4,X7)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X18,X19,X41,X43,X20] : ! [X21,X22,X23] : s(fun(X19,fun(X41,X18)),'_dst_x00x11_2'(s(fun(X43,X18),X21),s(fun(X19,fun(X41,X43)),happ(s(fun(X20,fun(X19,fun(X41,X43))),X22),s(X20,X23))))) = s(fun(X19,fun(X41,X18)),happ(s(fun(X20,fun(X19,fun(X41,X18))),'_dst_x000x111_2'(s(fun(X43,X18),X21),s(fun(X20,fun(X19,fun(X41,X43))),X22))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x000x111_ax')).
fof(f360,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))) )),
  inference(cnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(flattening,[],[f160])).
fof(f160,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x1x1_3'(s(fun(X1,fun(X2,X0)),X4),s(fun(X3,X1),X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,happ(s(fun(X3,X1),X5),s(X3,X7))))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X18,X19,X41,X20] : ! [X21,X22,X42,X23] : s(X18,happ(s(fun(X20,X18),'_dst_x0x1x1_3'(s(fun(X19,fun(X41,X18)),X21),s(fun(X20,X19),X22),s(fun(X20,X41),X42))),s(X20,X23))) = s(X18,happ(s(fun(X41,X18),happ(s(fun(X19,fun(X41,X18)),X21),s(X19,happ(s(fun(X20,X19),X22),s(X20,X23))))),s(X41,happ(s(fun(X20,X41),X42),s(X20,X23)))))),
  file('thm.benchmark.times_distinct','_dst_x0x1x1_ax')).
fof(f359,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s(X0,happ(s(fun(X3,X0),'_dst_x0x0x1_3'(s(fun(X1,fun(X2,X0)),X4),s(X1,X5),s(fun(X3,X2),X6))),s(X3,X7))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X4),s(X1,X5))),s(X2,happ(s(fun(X3,X2),X6),s(X3,X7)))))),
  inference(rectify,[],[f47])).
fof(f47,axiom,(
  ! [X18,X19,X41,X20] : ! [X21,X22,X42,X23] : s(X18,happ(s(fun(X20,X18),'_dst_x0x0x1_3'(s(fun(X19,fun(X41,X18)),X21),s(X19,X22),s(fun(X20,X41),X42))),s(X20,X23))) = s(X18,happ(s(fun(X41,X18),happ(s(fun(X19,fun(X41,X18)),X21),s(X19,X22))),s(X41,happ(s(fun(X20,X41),X42),s(X20,X23)))))),
  file('thm.benchmark.times_distinct','_dst_x0x0x1_ax')).
fof(f358,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))) )),
  inference(cnf_transformation,[],[f157])).
fof(f157,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))),
  inference(flattening,[],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X1,X0),'_dst_x0x1_2'(s(fun(X2,X0),X4),s(fun(X1,X2),happ(s(fun(X3,fun(X1,X2)),X5),s(X3,X6))))) = s(fun(X1,X0),happ(s(fun(X3,fun(X1,X0)),'_dst_x00x11_2'(s(fun(X2,X0),X4),s(fun(X3,fun(X1,X2)),X5))),s(X3,X6)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X18,X19,X41,X20] : ! [X21,X22,X23] : s(fun(X19,X18),'_dst_x0x1_2'(s(fun(X41,X18),X21),s(fun(X19,X41),happ(s(fun(X20,fun(X19,X41)),X22),s(X20,X23))))) = s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),'_dst_x00x11_2'(s(fun(X41,X18),X21),s(fun(X20,fun(X19,X41)),X22))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x00x11_ax')).
fof(f378,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(X1,fun(fun('type.num.num',X0),X0)),'_dst_x1x0_2'(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(X1,X5))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))) )),
  inference(backward_demodulation,[],[f341,f329])).
fof(f377,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(X0,fun('type.num.num',X0)),'_dst_x1x0_2'(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(fun('type.num.num',X0),X2))),s(X0,X1))),s('type.num.num',X3)))) )),
  inference(backward_demodulation,[],[f341,f306])).
fof(f341,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(flattening,[],[f152])).
fof(f152,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),'_dst_x1x0_2'(s(fun(X1,fun(X2,X0)),X3),s(X2,X4))),s(X1,X5))) = s(X0,happ(s(fun(X2,X0),happ(s(fun(X1,fun(X2,X0)),X3),s(X1,X5))),s(X2,X4)))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X18,X20,X19] : ! [X21,X22,X23] : s(X18,happ(s(fun(X19,X18),happ(s(fun(X20,fun(X19,X18)),X21),s(X20,X23))),s(X19,X22))) = s(X18,happ(s(fun(X20,X18),'_dst_x1x0_2'(s(fun(X20,fun(X19,X18)),X21),s(X19,X22))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x1x0_ax')).
fof(f340,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))) )),
  inference(cnf_transformation,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(flattening,[],[f150])).
fof(f150,plain,(
  ! [X0,X1,X2] : ! [X3,X4,X5] : s(X0,happ(s(fun(X1,X0),X3),s(X1,happ(s(fun(X2,X1),X4),s(X2,X5))))) = s(X0,happ(s(fun(X2,X0),'_dst_x0x1_2'(s(fun(X1,X0),X3),s(fun(X2,X1),X4))),s(X2,X5)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X18,X19,X20] : ! [X21,X22,X23] : s(X18,happ(s(fun(X19,X18),X21),s(X19,happ(s(fun(X20,X19),X22),s(X20,X23))))) = s(X18,happ(s(fun(X20,X18),'_dst_x0x1_2'(s(fun(X19,X18),X21),s(fun(X20,X19),X22))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x0x1_ax')).
fof(f339,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))) )),
  inference(cnf_transformation,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2,X3,X4] : s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))),
  inference(flattening,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2] : ! [X3,X4] : s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,happ(s(fun(X2,X1),X3),s(X2,X4))))) = s(fun(fun(X1,X0),X0),happ(s(fun(X2,fun(fun(X1,X0),X0)),'_dstsel_1_x10_1'(s(fun(X2,X1),X3))),s(X2,X4)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X18,X19,X20] : ! [X22,X23] : s(fun(fun(X19,X18),X18),'_dstsel_0_x0_1'(s(X19,happ(s(fun(X20,X19),X22),s(X20,X23))))) = s(fun(fun(X19,X18),X18),happ(s(fun(X20,fun(fun(X19,X18),X18)),'_dstsel_1_x10_1'(s(fun(X20,X19),X22))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dstsel_1_x10_ax')).
fof(f336,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,happ(s(fun('type.benchmark.times'(X1),X0),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5),s('type.benchmark.times'(X1),X2))),s('type.benchmark.times'(X1),X3))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1),X2),s('type.benchmark.times'(X1),X3))),s(fun(X1,X0),X4),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5)))) )),
  inference(cnf_transformation,[],[f146])).
fof(f146,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,happ(s(fun('type.benchmark.times'(X1),X0),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5),s('type.benchmark.times'(X1),X2))),s('type.benchmark.times'(X1),X3))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1),X2),s('type.benchmark.times'(X1),X3))),s(fun(X1,X0),X4),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5)))),
  inference(flattening,[],[f145])).
fof(f145,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,happ(s(fun('type.benchmark.times'(X1),X0),happ(s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5),s('type.benchmark.times'(X1),X2))),s('type.benchmark.times'(X1),X3))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Twice_2'(s('type.benchmark.times'(X1),X2),s('type.benchmark.times'(X1),X3))),s(fun(X1,X0),X4),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X5)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X16,X6] : ! [X8,X7,X15,X17] : s(X16,happ(s(fun('type.benchmark.times'(X6),X16),happ(s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),X16)),X17),s('type.benchmark.times'(X6),X8))),s('type.benchmark.times'(X6),X7))) = s(X16,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X7))),s(fun(X6,X16),X15),s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),X16)),X17)))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_case_def|split|1')).
fof(f335,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X4)))) )),
  inference(cnf_transformation,[],[f144])).
fof(f144,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X4)))),
  inference(flattening,[],[f143])).
fof(f143,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X1),'const.benchmark.Once_1'(s(X1,X2))),s(fun(X1,X0),X3),s(fun('type.benchmark.times'(X1),fun('type.benchmark.times'(X1),X0)),X4)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X16,X6] : ! [X9,X15,X17] : s(X16,happ(s(fun(X6,X16),X15),s(X6,X9))) = s(X16,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X9))),s(fun(X6,X16),X15),s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),X16)),X17)))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_case_def|split|0')).
fof(f334,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK11(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK11(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK11(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK11(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK11])],[f192])).
fof(f192,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f141])).
fof(f141,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.benchmark.times_distinct',aHL_EXT)).
fof(f333,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))),
  inference(flattening,[],[f139])).
fof(f139,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,happ(s(fun(X1,X0),X3),s(X1,X2))) = s(X0,happ(s(fun(fun(X1,X0),X0),'_dstsel_0_x0_1'(s(X1,X2))),s(fun(X1,X0),X3)))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X18,X20] : ! [X22,X23] : s(X18,happ(s(fun(X20,X18),X23),s(X20,X22))) = s(X18,happ(s(fun(fun(X20,X18),X18),'_dstsel_0_x0_1'(s(X20,X22))),s(fun(X20,X18),X23)))),
  file('thm.benchmark.times_distinct','_dstsel_0_x0_ax')).
fof(f330,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(flattening,[],[f133])).
fof(f133,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,happ(s(fun(X0,X1),'_dst_x0_1'(s(X1,X2))),s(X0,X3)))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X20,X18] : ! [X21,X23] : s(X18,X21) = s(X18,happ(s(fun(X20,X18),'_dst_x0_1'(s(X18,X21))),s(X20,X23)))),
  file('thm.benchmark.times_distinct','_dst_x0_ax')).
fof(f329,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))) )),
  inference(cnf_transformation,[],[f242])).
fof(f242,plain,(
  ! [X0,X1,X2] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),sK10(X2,X1,X0)),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10])],[f132])).
fof(f132,plain,(
  ! [X0,X1,X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(flattening,[],[f131])).
fof(f131,plain,(
  ! [X0,X1] : ! [X2] : ? [X3] : ! [X4,X5,X6] : s(X0,happ(s(fun('type.ind_type.recspace'(X1),X0),X3),s('type.ind_type.recspace'(X1),'const.ind_type.CONSTR_3'(s('type.num.num',X4),s(X1,X5),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))))) = s(X0,happ(s(fun(fun('type.num.num',X0),X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)),happ(s(fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0))),happ(s(fun('type.num.num',fun(X1,fun(fun('type.num.num','type.ind_type.recspace'(X1)),fun(fun('type.num.num',X0),X0)))),X2),s('type.num.num',X4))),s(X1,X5))),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6))),s(fun('type.num.num',X0),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X1),X0),X3),s(fun('type.num.num','type.ind_type.recspace'(X1)),X6)))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X16,X6] : ! [X35] : ? [X15] : ! [X36,X37,X38] : s(X16,happ(s(fun('type.ind_type.recspace'(X6),X16),X15),s('type.ind_type.recspace'(X6),'const.ind_type.CONSTR_3'(s('type.num.num',X36),s(X6,X37),s(fun('type.num.num','type.ind_type.recspace'(X6)),X38))))) = s(X16,happ(s(fun(fun('type.num.num',X16),X16),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',X16),X16)),happ(s(fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',X16),X16))),happ(s(fun('type.num.num',fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),fun(fun('type.num.num',X16),X16)))),X35),s('type.num.num',X36))),s(X6,X37))),s(fun('type.num.num','type.ind_type.recspace'(X6)),X38))),s(fun('type.num.num',X16),'_dst_x0x1_2'(s(fun('type.ind_type.recspace'(X6),X16),X15),s(fun('type.num.num','type.ind_type.recspace'(X6)),X38)))))),
  file('thm.benchmark.times_distinct','thm.ind_type.CONSTR_REC')).
fof(f312,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f190])).
fof(f190,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f189])).
fof(f189,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X24,X25] : ((p(s(bool,X24)) => p(s(bool,X25))) => ((p(s(bool,X25)) => p(s(bool,X24))) => s(bool,X24) = s(bool,X25)))),
  file('thm.benchmark.times_distinct','thm.bool.IMP_ANTISYM_AX')).
fof(f315,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f190])).
fof(f308,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) != s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) | s('type.benchmark.times'(X0),X1) = s('type.benchmark.times'(X0),X3)) )),
  inference(cnf_transformation,[],[f228])).
fof(f228,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) != s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) | (s('type.benchmark.times'(X0),X1) = s('type.benchmark.times'(X0),X3) & s('type.benchmark.times'(X0),X2) = s('type.benchmark.times'(X0),X4))) & (s('type.benchmark.times'(X0),X1) != s('type.benchmark.times'(X0),X3) | s('type.benchmark.times'(X0),X2) != s('type.benchmark.times'(X0),X4) | s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4)))))),
  inference(flattening,[],[f227])).
fof(f227,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) != s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) | (s('type.benchmark.times'(X0),X1) = s('type.benchmark.times'(X0),X3) & s('type.benchmark.times'(X0),X2) = s('type.benchmark.times'(X0),X4))) & ((s('type.benchmark.times'(X0),X1) != s('type.benchmark.times'(X0),X3) | s('type.benchmark.times'(X0),X2) != s('type.benchmark.times'(X0),X4)) | s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4)))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) <=> (s('type.benchmark.times'(X0),X1) = s('type.benchmark.times'(X0),X3) & s('type.benchmark.times'(X0),X2) = s('type.benchmark.times'(X0),X4)))),
  inference(flattening,[],[f122])).
fof(f122,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) <=> (s('type.benchmark.times'(X0),X1) = s('type.benchmark.times'(X0),X3) & s('type.benchmark.times'(X0),X2) = s('type.benchmark.times'(X0),X4)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : ! [X8,X7,X12,X13] : (s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X7))) = s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X12),s('type.benchmark.times'(X6),X13))) <=> (s('type.benchmark.times'(X6),X8) = s('type.benchmark.times'(X6),X12) & s('type.benchmark.times'(X6),X7) = s('type.benchmark.times'(X6),X13)))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_|49||49||split|1')).
fof(f309,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) != s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4))) | s('type.benchmark.times'(X0),X2) = s('type.benchmark.times'(X0),X4)) )),
  inference(cnf_transformation,[],[f228])).
fof(f310,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.benchmark.times'(X0),X1) != s('type.benchmark.times'(X0),X3) | s('type.benchmark.times'(X0),X2) != s('type.benchmark.times'(X0),X4) | s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X3),s('type.benchmark.times'(X0),X4)))) )),
  inference(cnf_transformation,[],[f228])).
fof(f307,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X2))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3)))))))) )),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1,X2,X3] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X2))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3)))))))),
  inference(flattening,[],[f120])).
fof(f120,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X3))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X2))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),X3)))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6] : ! [X15,X8,X7] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X6,'type.num.num'),X15),s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X7))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.benchmark.times_size_2'(s(fun(X6,'type.num.num'),X15),s('type.benchmark.times'(X6),X8))),s('type.num.num','const.benchmark.times_size_2'(s(fun(X6,'type.num.num'),X15),s('type.benchmark.times'(X6),X7)))))))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_size_def|split|1')).
fof(f306,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f119])).
fof(f119,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f118])).
fof(f118,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6] : ! [X10,X11,X34] : s(X6,'const.ind_type.FCONS_3'(s(X6,X10),s(fun('type.num.num',X6),X11),s('type.num.num',X34))) = s(X6,happ(s(fun('type.num.num',X6),happ(s(fun(fun('type.num.num',X6),fun('type.num.num',X6)),happ(s(fun(X6,fun(fun('type.num.num',X6),fun('type.num.num',X6))),'const.ind_type.FCONS_0'),s(X6,X10))),s(fun('type.num.num',X6),X11))),s('type.num.num',X34)))),
  file('thm.benchmark.times_distinct','ARITY_0_3_const.ind_type.FCONS')).
fof(f305,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))) )),
  inference(cnf_transformation,[],[f117])).
fof(f117,plain,(
  ! [X0,X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(flattening,[],[f116])).
fof(f116,plain,(
  ! [X0] : ! [X1,X2,X3] : s('type.ind_type.recspace'(X0),'const.ind_type.CONSTR_3'(s('type.num.num',X1),s(X0,X2),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3))) = s('type.ind_type.recspace'(X0),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0)),happ(s(fun(X0,fun(fun('type.num.num','type.ind_type.recspace'(X0)),'type.ind_type.recspace'(X0))),'const.ind_type.CONSTR_1'(s('type.num.num',X1))),s(X0,X2))),s(fun('type.num.num','type.ind_type.recspace'(X0)),X3)))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X10,X11,X34] : s('type.ind_type.recspace'(X6),'const.ind_type.CONSTR_3'(s('type.num.num',X10),s(X6,X11),s(fun('type.num.num','type.ind_type.recspace'(X6)),X34))) = s('type.ind_type.recspace'(X6),happ(s(fun(fun('type.num.num','type.ind_type.recspace'(X6)),'type.ind_type.recspace'(X6)),happ(s(fun(X6,fun(fun('type.num.num','type.ind_type.recspace'(X6)),'type.ind_type.recspace'(X6))),'const.ind_type.CONSTR_1'(s('type.num.num',X10))),s(X6,X11))),s(fun('type.num.num','type.ind_type.recspace'(X6)),X34)))),
  file('thm.benchmark.times_distinct','ARITY_1_3_const.ind_type.CONSTR')).
fof(f304,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))) )),
  inference(cnf_transformation,[],[f115])).
fof(f115,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(flattening,[],[f114])).
fof(f114,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,happ(s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.SUC_1'(s('type.num.num',X3)))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6] : ! [X9,X15,X33] : s(X6,happ(s(fun('type.num.num',X6),X15),s('type.num.num',X33))) = s(X6,'const.ind_type.FCONS_3'(s(X6,X9),s(fun('type.num.num',X6),X15),s('type.num.num','const.num.SUC_1'(s('type.num.num',X33)))))),
  file('thm.benchmark.times_distinct','thm.ind_type.FCONS|split|1')).
fof(f302,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) != s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1,X2] : ((s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) != s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f113])).
fof(f113,plain,(
  ! [X0,X1,X2] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f112])).
fof(f112,plain,(
  ! [X0] : ! [X1,X2] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : ! [X9,X14] : (s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X9))) = s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X14))) <=> s(X6,X9) = s(X6,X14))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_|49||49||split|0')).
fof(f303,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f226])).
fof(f297,plain,(
  ( ! [X2,X0,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),'type.benchmark.times'(X0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X0),X1))),s('type.benchmark.times'(X0),X2)))) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),'type.benchmark.times'(X0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X0),X1))),s('type.benchmark.times'(X0),X2)))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0] : ! [X1,X2] : s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X1),s('type.benchmark.times'(X0),X2))) = s('type.benchmark.times'(X0),happ(s(fun('type.benchmark.times'(X0),'type.benchmark.times'(X0)),happ(s(fun('type.benchmark.times'(X0),fun('type.benchmark.times'(X0),'type.benchmark.times'(X0))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X0),X1))),s('type.benchmark.times'(X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X10,X11] : s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X10),s('type.benchmark.times'(X6),X11))) = s('type.benchmark.times'(X6),happ(s(fun('type.benchmark.times'(X6),'type.benchmark.times'(X6)),happ(s(fun('type.benchmark.times'(X6),fun('type.benchmark.times'(X6),'type.benchmark.times'(X6))),'const.benchmark.Twice_0'),s('type.benchmark.times'(X6),X10))),s('type.benchmark.times'(X6),X11)))),
  file('thm.benchmark.times_distinct','ARITY_0_2_const.benchmark.Twice')).
fof(f296,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X0,'type.num.num'),X1),s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X2))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X0,'type.num.num'),X1),s(X0,X2)))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X15,X9] : s('type.num.num','const.benchmark.times_size_2'(s(fun(X6,'type.num.num'),X15),s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun(X6,'type.num.num'),X15),s(X6,X9)))))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_size_def|split|0')).
fof(f295,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6] : ! [X9,X15] : s(X6,X9) = s(X6,'const.ind_type.FCONS_3'(s(X6,X9),s(fun('type.num.num',X6),X15),s('type.num.num','const.num.|48|_0')))),
  file('thm.benchmark.times_distinct','thm.ind_type.FCONS|split|0')).
fof(f291,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),happ(s(fun(X0,'type.benchmark.times'(X0)),'const.benchmark.Once_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1] : s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),happ(s(fun(X0,'type.benchmark.times'(X0)),'const.benchmark.Once_0'),s(X0,X1)))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0] : ! [X1] : s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X1))) = s('type.benchmark.times'(X0),happ(s(fun(X0,'type.benchmark.times'(X0)),'const.benchmark.Once_0'),s(X0,X1)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6] : ! [X10] : s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X10))) = s('type.benchmark.times'(X6),happ(s(fun(X6,'type.benchmark.times'(X6)),'const.benchmark.Once_0'),s(X6,X10)))),
  file('thm.benchmark.times_distinct','ARITY_0_1_const.benchmark.Once')).
fof(f290,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f95])).
fof(f95,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f62])).
fof(f62,axiom,(
  ! [X20] : ! [X22] : s(X20,X22) = s(X20,happ(s(fun(X20,X20),'_i_0_0'),s(X20,X22)))),
  file('thm.benchmark.times_distinct','_i0_ax')).
fof(f289,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f93])).
fof(f93,plain,(
  ! [X0,X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0] : ! [X1] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X0,X1)))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X6] : ! [X28] : s(bool,'T_0') = s(bool,'const.bool.DATATYPE_1'(s(X6,X28)))),
  file('thm.benchmark.times_distinct','thm.bool.DATATYPE_TAG_THM')).
fof(f251,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f198])).
fof(f198,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f75])).
fof(f75,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f37])).
fof(f37,axiom,(
  ! [X29] : (s(bool,'T_0') = s(bool,X29) <=> p(s(bool,X29)))),
  file('thm.benchmark.times_distinct','thm.bool.EQ_CLAUSES|split|1')).
fof(f252,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f198])).
fof(f250,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.benchmark.times_distinct',aHL_BOOL_CASES)).
fof(f249,plain,(
  ( ! [X0] : (s('type.num.num','const.ast.spec_size_1'(s('type.ast.spec','const.ast.Stype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.list.list'('type.string.char')),'type.num.num'),'const.list.list_size_1'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))))),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.ast.t'),'type.num.num'),'const.list.list_size_1'(s(fun('type.ast.t','type.num.num'),'const.ast.t_size_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X0)))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : s('type.num.num','const.ast.spec_size_1'(s('type.ast.spec','const.ast.Stype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X0))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.list.list'('type.string.char')),'type.num.num'),'const.list.list_size_1'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))))),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.ast.t'),'type.num.num'),'const.list.list_size_1'(s(fun('type.ast.t','type.num.num'),'const.ast.t_size_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X0)))))),
  inference(rectify,[],[f70])).
fof(f70,axiom,(
  ! [X9] : s('type.num.num','const.ast.spec_size_1'(s('type.ast.spec','const.ast.Stype_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9))))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))),s('type.num.num',happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.list.list'('type.string.char')),'type.num.num'),'const.list.list_size_1'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))))),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t'))),'type.num.num'),'const.list.list_size_1'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')),'type.num.num'),'const.basicSize.pair_size_2'(s(fun('type.list.list'('type.string.char'),'type.num.num'),'const.list.list_size_1'(s(fun('type.string.char','type.num.num'),'const.string.char_size_0'))),s(fun('type.list.list'('type.ast.t'),'type.num.num'),'const.list.list_size_1'(s(fun('type.ast.t','type.num.num'),'const.ast.t_size_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.ast.t')))))),X9)))))),
  file('thm.benchmark.times_distinct','thm.ast.spec_size_def|split|1')).
fof(f246,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f15])).
fof(f15,axiom,(
  p(s(bool,'T_0'))),
  file('thm.benchmark.times_distinct','thm.bool.TRUTH')).
fof(f245,plain,(
  s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) = s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),sK2),s('type.benchmark.times'(sK0),sK1)))),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) = s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),sK2),s('type.benchmark.times'(sK0),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f180])).
fof(f180,plain,(
  ? [X0,X1,X2,X3] : s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X3))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X1)))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1,X2,X3] : s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X3))) != s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X1)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1,X2,X3] : ~s('type.benchmark.times'(X0),'const.benchmark.Once_1'(s(X0,X3))) = s('type.benchmark.times'(X0),'const.benchmark.Twice_2'(s('type.benchmark.times'(X0),X2),s('type.benchmark.times'(X0),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ~s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X9))) = s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ~s('type.benchmark.times'(X6),'const.benchmark.Once_1'(s(X6,X9))) = s('type.benchmark.times'(X6),'const.benchmark.Twice_2'(s('type.benchmark.times'(X6),X8),s('type.benchmark.times'(X6),X7)))),
  file('thm.benchmark.times_distinct','thm.benchmark.times_distinct')).
fof(f56501,plain,(
  $false | ($spl82 | $spl174)),
  inference(subsumption_resolution,[],[f56500,f248])).
fof(f56500,plain,(
  p(s(bool,'F_0')) | ($spl82 | $spl174)),
  inference(forward_demodulation,[],[f53859,f56495])).
fof(f56494,plain,(
  $false | ($spl86 | $spl102)),
  inference(subsumption_resolution,[],[f56493,f246])).
fof(f56493,plain,(
  ~p(s(bool,'T_0')) | ($spl86 | $spl102)),
  inference(forward_demodulation,[],[f53862,f56459])).
fof(f56459,plain,(
  ( ! [X468] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X468),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl102),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f3372,f3352,f3351,f18267,f18260,f18212,f3383,f1868,f4791,f18133,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f18468,f4482,f4484,f15381,f14187,f18265,f18263,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f18223,f18221,f18264,f18261,f18262,f12680,f12679,f3644,f3569,f3557,f3030,f3212,f2884,f2883,f1997,f1872,f4762,f4760,f4756,f4730,f4728,f4724,f4502,f4500,f4496,f15314,f15251,f3309,f3296,f5290,f4722,f4715,f4494,f4487,f18222,f18220,f15398,f15243,f15734,f18129,f17968,f17674,f17676,f17819,f17820,f18128,f17984,f17971,f17946,f17945,f17863,f17850,f17847,f17825,f17824,f18131,f18130,f17309,f17305,f17304,f17238,f17236,f17228,f16135,f16133,f16132,f16118,f16064,f16062,f16054,f4831,f4825,f16604,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28708,f28767,f28715,f28717,f28777,f28780,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29460,f30609,f30625,f30633,f31520,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31775,f31776,f31798,f32166,f31801,f31810,f31811,f31812,f31813,f31814,f31859,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31936,f31937,f31959,f32188,f31962,f31971,f31972,f31973,f31974,f31975,f32020,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32438,f32466,f32949,f32708,f32709,f32998,f32716,f32718,f32729,f32737,f33030,f33033,f32803,f32804,f32806,f32807,f32839,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33930,f33942,f33944,f33969,f33984,f33990,f33998,f34000,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f35166,f34882,f34884,f34902,f34953,f34965,f34966,f34968,f34969,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36033,f36055,f36056,f36057,f36065,f36067,f36099,f36100,f36122,f36597,f36125,f36134,f36135,f36136,f36137,f36138,f36173,f36174,f36191,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36280,f36281,f36303,f36621,f36306,f36315,f36316,f36317,f36318,f36319,f36354,f36355,f36372,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37501,f37517,f37519,f37547,f37548,f37549,f37567,f37577,f37578,f37586,f37588,f37919,f37847,f37939,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38214,f38231,f38233,f38262,f38263,f38264,f38284,f38295,f38296,f38297,f38305,f38307,f39177,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39982,f39983,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40223,f40224,f40225,f40226,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41726,f41747,f41749,f41782,f41783,f41784,f41785,f41786,f41809,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f42669,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43209,f43299,f43336,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43671,f43672,f43673,f43674,f43682,f43684,f43769,f43771,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45108,f45109,f45110,f45111,f45119,f45121,f45157,f45200,f45202,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53901,f53903,f53905,f53907,f53170,f53171,f53912,f53174,f53914,f53918,f53241,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53988,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f54056,f54057,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54116,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f53876,f53155,f53157,f53158,f53173,f17663,f17634,f17456,f17427,f17145,f17050,f29447,f46662,f30614,f30622,f3370,f3368,f3355,f3353,f3350,f3349,f14014,f41801,f37559,f38276,f3373,f1527,f1169,f32846,f32854,f33976,f54108,f47022,f47030,f4242,f4244,f53233,f35010,f35018,f38206,f40395,f40403,f36364,f43736,f43744,f41718,f33922,f37493,f32012,f17879,f36183,f31851,f16146,f16152,f17321,f17327,f18000,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f33037,f32761,f32711,f32710,f47281,f46920,f46850,f46849,f40625,f4592,f4865,f17606,f17608,f17612,f17614,f17599,f17600,f17607,f17609,f17613,f17615,f33015,f33016,f15372,f4273,f4266,f4177,f4176,f53854,f53857,f53694,f35203,f34877,f34876,f46137,f46139,f46034,f46036,f46035,f46037,f45723,f46138,f46140,f45725,f43010,f43012,f42668,f44436,f44438,f44059,f39444,f39446,f39176,f45131,f45133,f44344,f44346,f44057,f39379,f39381,f39174,f45212,f45214,f42929,f42931,f42666,f43009,f43011,f44435,f44437,f45130,f45132,f45211,f45213,f44343,f44345,f42928,f42930,f39443,f39445,f39378,f39380,f46918,f32764,f32760,f46919,f12870,f13929,f14120,f15708,f35580,f43296,f32435,f43329,f32467,f4018,f32436,f5307,f43297,f13342,f43694,f43696,f41849,f41851,f41500,f38317,f38319,f37938,f37598,f37600,f37313,f34010,f34012,f33788,f38243,f38245,f37936,f43781,f43783,f41759,f41761,f41498,f33954,f33956,f33786,f37529,f37531,f37311,f43693,f43695,f41848,f41850,f38316,f38318,f37597,f37599,f38242,f38244,f43780,f43782,f41758,f41760,f37528,f37530,f34009,f34011,f33953,f33955,f3361,f3550,f3452,f3564,f12348,f12970,f13981,f12349,f12971,f13982,f4768,f4748,f4540,f4520,f5282,f1157,f3360,f3451,f5728,f5707,f15684,f15649,f3884,f3885,f31924,f31923,f31921,f31922,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f15373,f15308,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3306,f3293,f328,f327,f326,f28787,f28710,f28709,f5283,f1159,f13948,f4736,f4716,f4508,f4488,f15400,f15736,f5498,f41724,f38212,f37499,f33075,f33928,f53959,f47324,f5515,f54114,f35240,f43818,f40704,f16219,f38282,f36189,f41807,f33982,f37565,f31857,f18004,f36370,f32018,f17883,f17413,f318,f5518,f5512,f5513,f5514,f41806,f38281,f37564,f33074,f33981,f54113,f47323,f5311,f53958,f35239,f43817,f41723,f38211,f37498,f33927,f17412,f40703,f36369,f32017,f17882,f36188,f31856,f16218,f18003,f5280,f5310,f5308,f5309,f317,f5320,f41802,f38277,f37560,f33977,f54109,f53954,f41719,f38207,f37494,f36365,f36184,f33923,f32013,f31852,f17880,f18001,f3386,f1172,f1171,f1170,f299,f1177,f36095,f36092,f36091,f36090,f40590,f35680,f36255,f36257,f31912,f31914,f31519,f17808,f17810,f36077,f36079,f31757,f31759,f31473,f30673,f17931,f17933,f17941,f17938,f18795,f17940,f17939,f30678,f30676,f30670,f45244,f43811,f41722,f41803,f41808,f41810,f38210,f38278,f38283,f38285,f37497,f37561,f37566,f37568,f38208,f38213,f38215,f38280,f40700,f36187,f36366,f36371,f36373,f43814,f41720,f41725,f41727,f41805,f37495,f37500,f37502,f37563,f36185,f36190,f36192,f36368,f36254,f36256,f36076,f36078,f40611,f40664,f40301,f40300,f40299,f40228,f40227,f43289,f43284,f36320,f36307,f36304,f36302,f36297,f36295,f36294,f36293,f36292,f36291,f36290,f36289,f36288,f36285,f36284,f36282,f36279,f36278,f36276,f36275,f36274,f36139,f36126,f36123,f36121,f36116,f36114,f36113,f36112,f36111,f36110,f36109,f36108,f36107,f36104,f36103,f36101,f36098,f36097,f33926,f33978,f33983,f33985,f47320,f31911,f31913,f17807,f17809,f31756,f31758,f17930,f17932,f33924,f33929,f33931,f33980,f31855,f32014,f32019,f32021,f17884,f17886,f18002,f18707,f31853,f31858,f31860,f32016,f17881,f18005,f18007,f18708,f40610,f35236,f40297,f40298,f36583,f36584,f31929,f31928,f31927,f33071,f43286,f43282,f32428,f32426,f18794,f17972,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17944,f17943,f17851,f17848,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17823,f17822,f17818,f17817,f43288,f43283,f32430,f32427,f31963,f31960,f31958,f31953,f31951,f31950,f31949,f31948,f31947,f31946,f31945,f31944,f31941,f31940,f31938,f31935,f31934,f31802,f31799,f31797,f31792,f31790,f31789,f31788,f31787,f31786,f31785,f31784,f31783,f31780,f31779,f31777,f31774,f31773,f31768,f31767,f31766,f18808,f18807,f3784,f36270,f36269,f31932,f17815,f17816,f31771,f18810,f28789,f16088,f33469,f31925,f31926,f53957,f54110,f54115,f54117,f53955,f53960,f53961,f54112,f53986,f53989,f53852,f53855,f4776,f4744,f4548,f4516,f338,f337,f54111,f53956,f47321,f43815,f41804,f41721,f40701,f40296,f40295,f40294,f40293,f40195,f40194,f40004,f40003,f38279,f38209,f37562,f37496,f36367,f36271,f36268,f36186,f36094,f36007,f36006,f35237,f33979,f33925,f33072,f32015,f31931,f31854,f31770,f28778,f28757,f28756,f28755,f28754,f28753,f28752,f28748,f28702,f28697,f28696,f18815,f18809,f18806,f18805,f18713,f17393,f17230,f17229,f16201,f16090,f16089,f16056,f16055,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f16605,f16606,f53414,f53411])).
fof(f56492,plain,(
  $false | ($spl136 | $spl144)),
  inference(subsumption_resolution,[],[f56491,f381])).
fof(f56491,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl136 | $spl144)),
  inference(forward_demodulation,[],[f53925,f53937])).
fof(f56488,plain,(
  $false | ($spl144 | $spl220)),
  inference(subsumption_resolution,[],[f54086,f53937])).
fof(f56476,plain,(
  $false | ($spl92 | $spl102)),
  inference(subsumption_resolution,[],[f53866,f53876])).
fof(f56469,plain,(
  ( ! [X463,X462] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X462),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X463)))) ) | $spl242),
  inference(cnf_transformation,[],[f56469_D])).
fof(f56469_D,plain,(
  ( ! [X463,X462] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X462),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X463)))) ) <=> ~$spl242),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl242])])).
fof(f56471,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'T_0')),bool)) | $spl244),
  inference(cnf_transformation,[],[f56471_D])).
fof(f56471_D,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'T_0')),bool)) <=> ~$spl244),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl244])])).
fof(f56464,plain,(
  ( ! [X463,X462] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X462),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X463)))) ) | ($spl32 | $spl102)),
  inference(backward_demodulation,[],[f56459,f53191])).
fof(f53191,plain,(
  ( ! [X463,X462] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X463),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool)) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X462),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X463)))) ) | $spl32),
  inference(superposition,[],[f21026,f34843])).
fof(f21026,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X4)),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl32),
  inference(superposition,[],[f20964,f250])).
fof(f20964,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | $spl32),
  inference(unit_resulting_resolution,[],[f381,f20707,f1150])).
fof(f20707,plain,(
  p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool))) | $spl32),
  inference(unit_resulting_resolution,[],[f248,f20353])).
fof(f20353,plain,(
  ( ! [X26] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X26)),bool))) | p(s(bool,X26))) ) | $spl32),
  inference(superposition,[],[f18814,f330])).
fof(f56453,plain,(
  $false | ($spl88 | $spl116 | $spl170)),
  inference(global_subsumption,[],[f56452,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428,f56430,f56432,f56434,f56436])).
fof(f56436,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55478,f246])).
fof(f55478,plain,(
  ( ! [X85,X86,X84,X82] : (~p(s(bool,'T_0')) | s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4592])).
fof(f56434,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55476,f246])).
fof(f55476,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X65,'type.num.num'),X66),s('type.benchmark.times'(X65),'const.benchmark.Once_1'(s(X65,X67)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17606])).
fof(f56432,plain,(
  ( ! [X68,X66,X67,X65] : (s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67)))))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55474,f246])).
fof(f55474,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | s('type.num.num',X68) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X65,'type.num.num'),X66),s(X65,X67)))))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17612])).
fof(f56430,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55470,f246])).
fof(f55470,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun(X69,'type.num.num'),X70),s('type.benchmark.times'(X69),'const.benchmark.Once_1'(s(X69,X71)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17607])).
fof(f56428,plain,(
  ( ! [X70,X72,X71,X69] : (s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71)))))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55468,f246])).
fof(f55468,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | s('type.num.num',X72) = s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X69,'type.num.num'),X70),s(X69,X71)))))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17613])).
fof(f56424,plain,(
  ( ! [X80,X83,X81] : (s(X80,X83) = s(X80,happ(s(fun(sK0,X80),X81),s(sK0,sK3)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55458,f246])).
fof(f55458,plain,(
  ( ! [X80,X83,X81] : (~p(s(bool,'T_0')) | s(X80,X83) = s(X80,happ(s(fun(sK0,X80),X81),s(sK0,sK3)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f53854])).
fof(f56422,plain,(
  ( ! [X1112,X1118,X1116,X1110,X1108,X1115,X1113,X1119,X1117,X1111,X1109,X1114] : (s(fun(X1108,fun(X1109,fun(X1110,X1111))),X1119) = s(fun(X1108,fun(X1109,fun(X1110,X1111))),happ(s(fun(X1112,fun(X1108,fun(X1109,fun(X1110,X1111)))),'_dst_x0000x0111x1011_3'(s(fun(X1113,fun(X1114,X1111)),X1115),s(fun(X1108,fun(X1109,fun(X1110,X1113))),X1116),s(fun(X1112,fun(X1109,fun(X1110,X1114))),X1117))),s(X1112,X1118)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55451,f246])).
fof(f55451,plain,(
  ( ! [X1112,X1118,X1116,X1110,X1108,X1115,X1113,X1119,X1117,X1111,X1109,X1114] : (~p(s(bool,'T_0')) | s(fun(X1108,fun(X1109,fun(X1110,X1111))),X1119) = s(fun(X1108,fun(X1109,fun(X1110,X1111))),happ(s(fun(X1112,fun(X1108,fun(X1109,fun(X1110,X1111)))),'_dst_x0000x0111x1011_3'(s(fun(X1113,fun(X1114,X1111)),X1115),s(fun(X1108,fun(X1109,fun(X1110,X1113))),X1116),s(fun(X1112,fun(X1109,fun(X1110,X1114))),X1117))),s(X1112,X1118)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f46137])).
fof(f56420,plain,(
  ( ! [X850,X848,X854,X852,X843,X847,X845,X851,X849,X853,X846,X844] : (s(fun(X843,fun(X844,fun(X845,X846))),X854) = s(fun(X843,fun(X844,fun(X845,X846))),'_dst_x000x111x011_3'(s(fun(X847,fun(X848,X846)),X849),s(fun(X843,fun(X844,fun(X845,X847))),X850),s(fun(X844,fun(X845,X848)),happ(s(fun(X851,fun(X844,fun(X845,X848))),X852),s(X851,X853)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55449,f246])).
fof(f55449,plain,(
  ( ! [X850,X848,X854,X852,X843,X847,X845,X851,X849,X853,X846,X844] : (~p(s(bool,'T_0')) | s(fun(X843,fun(X844,fun(X845,X846))),X854) = s(fun(X843,fun(X844,fun(X845,X846))),'_dst_x000x111x011_3'(s(fun(X847,fun(X848,X846)),X849),s(fun(X843,fun(X844,fun(X845,X847))),X850),s(fun(X844,fun(X845,X848)),happ(s(fun(X851,fun(X844,fun(X845,X848))),X852),s(X851,X853)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f46034])).
fof(f56418,plain,(
  ( ! [X860,X866,X864,X859,X857,X863,X861,X855,X865,X858,X856,X862] : (s(fun(X855,fun(X856,fun(X857,X858))),X866) = s(fun(X855,fun(X856,fun(X857,X858))),'_dst_x000x111x011_3'(s(fun(X859,fun(X860,X858)),X861),s(fun(X855,fun(X856,fun(X857,X859))),X862),s(fun(X856,fun(X857,X860)),happ(s(fun(X863,fun(X856,fun(X857,X860))),X864),s(X863,X865)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55447,f246])).
fof(f55447,plain,(
  ( ! [X860,X866,X864,X859,X857,X863,X861,X855,X865,X858,X856,X862] : (~p(s(bool,'T_0')) | s(fun(X855,fun(X856,fun(X857,X858))),X866) = s(fun(X855,fun(X856,fun(X857,X858))),'_dst_x000x111x011_3'(s(fun(X859,fun(X860,X858)),X861),s(fun(X855,fun(X856,fun(X857,X859))),X862),s(fun(X856,fun(X857,X860)),happ(s(fun(X863,fun(X856,fun(X857,X860))),X864),s(X863,X865)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f46035])).
fof(f56416,plain,(
  ( ! [X1130,X1128,X1122,X1120,X1126,X1124,X1131,X1129,X1123,X1121,X1127,X1125] : (s(fun(X1120,fun(X1121,fun(X1122,X1123))),X1131) = s(fun(X1120,fun(X1121,fun(X1122,X1123))),happ(s(fun(X1124,fun(X1120,fun(X1121,fun(X1122,X1123)))),'_dst_x0000x0111x1011_3'(s(fun(X1125,fun(X1126,X1123)),X1127),s(fun(X1120,fun(X1121,fun(X1122,X1125))),X1128),s(fun(X1124,fun(X1121,fun(X1122,X1126))),X1129))),s(X1124,X1130)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55444,f246])).
fof(f55444,plain,(
  ( ! [X1130,X1128,X1122,X1120,X1126,X1124,X1131,X1129,X1123,X1121,X1127,X1125] : (~p(s(bool,'T_0')) | s(fun(X1120,fun(X1121,fun(X1122,X1123))),X1131) = s(fun(X1120,fun(X1121,fun(X1122,X1123))),happ(s(fun(X1124,fun(X1120,fun(X1121,fun(X1122,X1123)))),'_dst_x0000x0111x1011_3'(s(fun(X1125,fun(X1126,X1123)),X1127),s(fun(X1120,fun(X1121,fun(X1122,X1125))),X1128),s(fun(X1124,fun(X1121,fun(X1122,X1126))),X1129))),s(X1124,X1130)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f46138])).
fof(f56414,plain,(
  ( ! [X767,X771,X769,X775,X773,X766,X776,X770,X768,X774,X772] : (s(fun(X766,fun(X767,X768)),X776) = s(fun(X766,fun(X767,X768)),happ(s(fun(X769,fun(X766,fun(X767,X768))),'_dst_x000x100x011_3'(s(fun(X770,fun(X771,X768)),X772),s(fun(X769,X770),X773),s(fun(X766,fun(X767,X771)),X774))),s(X769,X775)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55441,f246])).
fof(f55441,plain,(
  ( ! [X767,X771,X769,X775,X773,X766,X776,X770,X768,X774,X772] : (~p(s(bool,'T_0')) | s(fun(X766,fun(X767,X768)),X776) = s(fun(X766,fun(X767,X768)),happ(s(fun(X769,fun(X766,fun(X767,X768))),'_dst_x000x100x011_3'(s(fun(X770,fun(X771,X768)),X772),s(fun(X769,X770),X773),s(fun(X766,fun(X767,X771)),X774))),s(X769,X775)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43010])).
fof(f56412,plain,(
  ( ! [X912,X914,X907,X905,X911,X909,X913,X906,X904,X910,X908] : (s(fun(X904,fun(X905,X906)),X914) = s(fun(X904,fun(X905,X906)),happ(s(fun(X907,fun(X904,fun(X905,X906))),'_dst_x000x111x011_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X907,fun(X904,fun(X905,X908))),X911),s(fun(X904,fun(X905,X909)),X912))),s(X907,X913)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55438,f246])).
fof(f55438,plain,(
  ( ! [X912,X914,X907,X905,X911,X909,X913,X906,X904,X910,X908] : (~p(s(bool,'T_0')) | s(fun(X904,fun(X905,X906)),X914) = s(fun(X904,fun(X905,X906)),happ(s(fun(X907,fun(X904,fun(X905,X906))),'_dst_x000x111x011_3'(s(fun(X908,fun(X909,X906)),X910),s(fun(X907,fun(X904,fun(X905,X908))),X911),s(fun(X904,fun(X905,X909)),X912))),s(X907,X913)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f44436])).
fof(f56410,plain,(
  ( ! [X486,X492,X494,X488,X490,X487,X493,X489,X491] : (s(fun(X486,fun(X487,X488)),X494) = s(fun(X486,fun(X487,X488)),happ(s(fun(X489,fun(X486,fun(X487,X488))),'_dst_x000x111_2'(s(fun(X490,X488),X491),s(fun(X489,fun(X486,fun(X487,X490))),X492))),s(X489,X493)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55435,f246])).
fof(f55435,plain,(
  ( ! [X486,X492,X494,X488,X490,X487,X493,X489,X491] : (~p(s(bool,'T_0')) | s(fun(X486,fun(X487,X488)),X494) = s(fun(X486,fun(X487,X488)),happ(s(fun(X489,fun(X486,fun(X487,X488))),'_dst_x000x111_2'(s(fun(X490,X488),X491),s(fun(X489,fun(X486,fun(X487,X490))),X492))),s(X489,X493)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f39444])).
fof(f56408,plain,(
  ( ! [X976,X971,X969,X975,X973,X967,X970,X968,X974,X972,X966] : (s(fun(X966,fun(X967,X968)),X976) = s(fun(X966,fun(X967,X968)),happ(s(fun(X969,fun(X966,fun(X967,X968))),'_dst_x000x110x101_3'(s(fun(X970,fun(X971,X968)),X972),s(fun(X969,fun(X966,X970)),X973),s(fun(X969,fun(X967,X971)),X974))),s(X969,X975)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55432,f246])).
fof(f55432,plain,(
  ( ! [X976,X971,X969,X975,X973,X967,X970,X968,X974,X972,X966] : (~p(s(bool,'T_0')) | s(fun(X966,fun(X967,X968)),X976) = s(fun(X966,fun(X967,X968)),happ(s(fun(X969,fun(X966,fun(X967,X968))),'_dst_x000x110x101_3'(s(fun(X970,fun(X971,X968)),X972),s(fun(X969,fun(X966,X970)),X973),s(fun(X969,fun(X967,X971)),X974))),s(X969,X975)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f45131])).
fof(f56406,plain,(
  ( ! [X711,X705,X707,X708,X710,X702,X704,X706,X709,X701,X703] : (s(fun(X701,fun(X702,X703)),X711) = s(fun(X701,fun(X702,X703)),'_dst_x00x11x11_3'(s(fun(X704,fun(X705,X703)),X706),s(fun(X701,fun(X702,X704)),happ(s(fun(X707,fun(X701,fun(X702,X704))),X708),s(X707,X709))),s(fun(X701,fun(X702,X705)),X710)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55430,f246])).
fof(f55430,plain,(
  ( ! [X711,X705,X707,X708,X710,X702,X704,X706,X709,X701,X703] : (~p(s(bool,'T_0')) | s(fun(X701,fun(X702,X703)),X711) = s(fun(X701,fun(X702,X703)),'_dst_x00x11x11_3'(s(fun(X704,fun(X705,X703)),X706),s(fun(X701,fun(X702,X704)),happ(s(fun(X707,fun(X701,fun(X702,X704))),X708),s(X707,X709))),s(fun(X701,fun(X702,X705)),X710)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f44344])).
fof(f56404,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (s(fun(X408,fun(X409,X410)),X416) = s(fun(X408,fun(X409,X410)),'_dst_x00x11_2'(s(fun(X411,X410),X412),s(fun(X408,fun(X409,X411)),happ(s(fun(X413,fun(X408,fun(X409,X411))),X414),s(X413,X415)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55427,f246])).
fof(f55427,plain,(
  ( ! [X412,X414,X408,X410,X416,X413,X415,X409,X411] : (~p(s(bool,'T_0')) | s(fun(X408,fun(X409,X410)),X416) = s(fun(X408,fun(X409,X410)),'_dst_x00x11_2'(s(fun(X411,X410),X412),s(fun(X408,fun(X409,X411)),happ(s(fun(X413,fun(X408,fun(X409,X411))),X414),s(X413,X415)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f39379])).
fof(f56402,plain,(
  ( ! [X757,X759,X753,X755,X749,X751,X756,X758,X752,X754,X750] : (s(fun(X749,fun(X750,X751)),X759) = s(fun(X749,fun(X750,X751)),'_dst_x00x10x01_3'(s(fun(X752,fun(X753,X751)),X754),s(fun(X749,X752),happ(s(fun(X755,fun(X749,X752)),X756),s(X755,X757))),s(fun(X750,X753),happ(s(fun(X755,fun(X750,X753)),X758),s(X755,X757)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55424,f246])).
fof(f55424,plain,(
  ( ! [X757,X759,X753,X755,X749,X751,X756,X758,X752,X754,X750] : (~p(s(bool,'T_0')) | s(fun(X749,fun(X750,X751)),X759) = s(fun(X749,fun(X750,X751)),'_dst_x00x10x01_3'(s(fun(X752,fun(X753,X751)),X754),s(fun(X749,X752),happ(s(fun(X755,fun(X749,X752)),X756),s(X755,X757))),s(fun(X750,X753),happ(s(fun(X755,fun(X750,X753)),X758),s(X755,X757)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f45212])).
fof(f56400,plain,(
  ( ! [X617,X613,X615,X609,X611,X607,X616,X612,X614,X608,X610] : (s(fun(X607,fun(X608,X609)),X617) = s(fun(X607,fun(X608,X609)),'_dst_x00x00x11_3'(s(fun(X610,fun(X611,X609)),X612),s(X610,happ(s(fun(X613,X610),X614),s(X613,X615))),s(fun(X607,fun(X608,X611)),X616)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55422,f246])).
fof(f55422,plain,(
  ( ! [X617,X613,X615,X609,X611,X607,X616,X612,X614,X608,X610] : (~p(s(bool,'T_0')) | s(fun(X607,fun(X608,X609)),X617) = s(fun(X607,fun(X608,X609)),'_dst_x00x00x11_3'(s(fun(X610,fun(X611,X609)),X612),s(X610,happ(s(fun(X613,X610),X614),s(X613,X615))),s(fun(X607,fun(X608,X611)),X616)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f42929])).
fof(f56398,plain,(
  ( ! [X765,X761,X763,X757,X759,X755,X764,X760,X762,X756,X758] : (s(fun(X755,fun(X756,X757)),X765) = s(fun(X755,fun(X756,X757)),happ(s(fun(X758,fun(X755,fun(X756,X757))),'_dst_x000x100x011_3'(s(fun(X759,fun(X760,X757)),X761),s(fun(X758,X759),X762),s(fun(X755,fun(X756,X760)),X763))),s(X758,X764)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55419,f246])).
fof(f55419,plain,(
  ( ! [X765,X761,X763,X757,X759,X755,X764,X760,X762,X756,X758] : (~p(s(bool,'T_0')) | s(fun(X755,fun(X756,X757)),X765) = s(fun(X755,fun(X756,X757)),happ(s(fun(X758,fun(X755,fun(X756,X757))),'_dst_x000x100x011_3'(s(fun(X759,fun(X760,X757)),X761),s(fun(X758,X759),X762),s(fun(X755,fun(X756,X760)),X763))),s(X758,X764)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43009])).
fof(f56396,plain,(
  ( ! [X895,X893,X899,X897,X903,X894,X901,X898,X896,X902,X900] : (s(fun(X893,fun(X894,X895)),X903) = s(fun(X893,fun(X894,X895)),happ(s(fun(X896,fun(X893,fun(X894,X895))),'_dst_x000x111x011_3'(s(fun(X897,fun(X898,X895)),X899),s(fun(X896,fun(X893,fun(X894,X897))),X900),s(fun(X893,fun(X894,X898)),X901))),s(X896,X902)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55417,f246])).
fof(f55417,plain,(
  ( ! [X895,X893,X899,X897,X903,X894,X901,X898,X896,X902,X900] : (~p(s(bool,'T_0')) | s(fun(X893,fun(X894,X895)),X903) = s(fun(X893,fun(X894,X895)),happ(s(fun(X896,fun(X893,fun(X894,X895))),'_dst_x000x111x011_3'(s(fun(X897,fun(X898,X895)),X899),s(fun(X896,fun(X893,fun(X894,X897))),X900),s(fun(X893,fun(X894,X898)),X901))),s(X896,X902)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f44435])).
fof(f56394,plain,(
  ( ! [X957,X963,X961,X965,X956,X958,X962,X960,X955,X964,X959] : (s(fun(X955,fun(X956,X957)),X965) = s(fun(X955,fun(X956,X957)),happ(s(fun(X958,fun(X955,fun(X956,X957))),'_dst_x000x110x101_3'(s(fun(X959,fun(X960,X957)),X961),s(fun(X958,fun(X955,X959)),X962),s(fun(X958,fun(X956,X960)),X963))),s(X958,X964)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55415,f246])).
fof(f55415,plain,(
  ( ! [X957,X963,X961,X965,X956,X958,X962,X960,X955,X964,X959] : (~p(s(bool,'T_0')) | s(fun(X955,fun(X956,X957)),X965) = s(fun(X955,fun(X956,X957)),happ(s(fun(X958,fun(X955,fun(X956,X957))),'_dst_x000x110x101_3'(s(fun(X959,fun(X960,X957)),X961),s(fun(X958,fun(X955,X959)),X962),s(fun(X958,fun(X956,X960)),X963))),s(X958,X964)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f45130])).
fof(f56392,plain,(
  ( ! [X738,X745,X747,X741,X743,X739,X748,X744,X746,X740,X742] : (s(fun(X738,fun(X739,X740)),X748) = s(fun(X738,fun(X739,X740)),'_dst_x00x10x01_3'(s(fun(X741,fun(X742,X740)),X743),s(fun(X738,X741),happ(s(fun(X744,fun(X738,X741)),X745),s(X744,X746))),s(fun(X739,X742),happ(s(fun(X744,fun(X739,X742)),X747),s(X744,X746)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55413,f246])).
fof(f55413,plain,(
  ( ! [X738,X745,X747,X741,X743,X739,X748,X744,X746,X740,X742] : (~p(s(bool,'T_0')) | s(fun(X738,fun(X739,X740)),X748) = s(fun(X738,fun(X739,X740)),'_dst_x00x10x01_3'(s(fun(X741,fun(X742,X740)),X743),s(fun(X738,X741),happ(s(fun(X744,fun(X738,X741)),X745),s(X744,X746))),s(fun(X739,X742),happ(s(fun(X744,fun(X739,X742)),X747),s(X744,X746)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f45211])).
fof(f56390,plain,(
  ( ! [X697,X699,X693,X695,X691,X700,X696,X698,X692,X694,X690] : (s(fun(X690,fun(X691,X692)),X700) = s(fun(X690,fun(X691,X692)),'_dst_x00x11x11_3'(s(fun(X693,fun(X694,X692)),X695),s(fun(X690,fun(X691,X693)),happ(s(fun(X696,fun(X690,fun(X691,X693))),X697),s(X696,X698))),s(fun(X690,fun(X691,X694)),X699)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55411,f246])).
fof(f55411,plain,(
  ( ! [X697,X699,X693,X695,X691,X700,X696,X698,X692,X694,X690] : (~p(s(bool,'T_0')) | s(fun(X690,fun(X691,X692)),X700) = s(fun(X690,fun(X691,X692)),'_dst_x00x11x11_3'(s(fun(X693,fun(X694,X692)),X695),s(fun(X690,fun(X691,X693)),happ(s(fun(X696,fun(X690,fun(X691,X693))),X697),s(X696,X698))),s(fun(X690,fun(X691,X694)),X699)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f44343])).
fof(f56388,plain,(
  ( ! [X606,X600,X602,X596,X598,X605,X601,X603,X597,X599,X604] : (s(fun(X596,fun(X597,X598)),X606) = s(fun(X596,fun(X597,X598)),'_dst_x00x00x11_3'(s(fun(X599,fun(X600,X598)),X601),s(X599,happ(s(fun(X602,X599),X603),s(X602,X604))),s(fun(X596,fun(X597,X600)),X605)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55409,f246])).
fof(f55409,plain,(
  ( ! [X606,X600,X602,X596,X598,X605,X601,X603,X597,X599,X604] : (~p(s(bool,'T_0')) | s(fun(X596,fun(X597,X598)),X606) = s(fun(X596,fun(X597,X598)),'_dst_x00x00x11_3'(s(fun(X599,fun(X600,X598)),X601),s(X599,happ(s(fun(X602,X599),X603),s(X602,X604))),s(fun(X596,fun(X597,X600)),X605)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f42928])).
fof(f56386,plain,(
  ( ! [X478,X484,X480,X482,X477,X479,X485,X481,X483] : (s(fun(X477,fun(X478,X479)),X485) = s(fun(X477,fun(X478,X479)),happ(s(fun(X480,fun(X477,fun(X478,X479))),'_dst_x000x111_2'(s(fun(X481,X479),X482),s(fun(X480,fun(X477,fun(X478,X481))),X483))),s(X480,X484)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55407,f246])).
fof(f55407,plain,(
  ( ! [X478,X484,X480,X482,X477,X479,X485,X481,X483] : (~p(s(bool,'T_0')) | s(fun(X477,fun(X478,X479)),X485) = s(fun(X477,fun(X478,X479)),happ(s(fun(X480,fun(X477,fun(X478,X479))),'_dst_x000x111_2'(s(fun(X481,X479),X482),s(fun(X480,fun(X477,fun(X478,X481))),X483))),s(X480,X484)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f39443])).
fof(f56384,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (s(fun(X399,fun(X400,X401)),X407) = s(fun(X399,fun(X400,X401)),'_dst_x00x11_2'(s(fun(X402,X401),X403),s(fun(X399,fun(X400,X402)),happ(s(fun(X404,fun(X399,fun(X400,X402))),X405),s(X404,X406)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55405,f246])).
fof(f55405,plain,(
  ( ! [X399,X405,X407,X401,X403,X404,X406,X400,X402] : (~p(s(bool,'T_0')) | s(fun(X399,fun(X400,X401)),X407) = s(fun(X399,fun(X400,X401)),'_dst_x00x11_2'(s(fun(X402,X401),X403),s(fun(X399,fun(X400,X402)),happ(s(fun(X404,fun(X399,fun(X400,X402))),X405),s(X404,X406)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f39378])).
fof(f56380,plain,(
  ( ! [X895,X899,X897,X903,X901,X904,X898,X896,X902,X900] : (s(fun(X895,X896),X904) = s(fun(X895,X896),happ(s(fun(X897,fun(X895,X896)),'_dst_x00x11x11_3'(s(fun(X898,fun(X899,X896)),X900),s(fun(X897,fun(X895,X898)),X901),s(fun(X897,fun(X895,X899)),X902))),s(X897,X903)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55382,f246])).
fof(f55382,plain,(
  ( ! [X895,X899,X897,X903,X901,X904,X898,X896,X902,X900] : (~p(s(bool,'T_0')) | s(fun(X895,X896),X904) = s(fun(X895,X896),happ(s(fun(X897,fun(X895,X896)),'_dst_x00x11x11_3'(s(fun(X898,fun(X899,X896)),X900),s(fun(X897,fun(X895,X898)),X901),s(fun(X897,fun(X895,X899)),X902))),s(X897,X903)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43694])).
fof(f56378,plain,(
  ( ! [X796,X790,X788,X795,X793,X787,X791,X789,X794,X792] : (s(fun(X787,X788),X796) = s(fun(X787,X788),happ(s(fun(X789,fun(X787,X788)),'_dst_x00x01x11_3'(s(fun(X790,fun(X791,X788)),X792),s(fun(X787,X790),X793),s(fun(X789,fun(X787,X791)),X794))),s(X789,X795)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55380,f246])).
fof(f55380,plain,(
  ( ! [X796,X790,X788,X795,X793,X787,X791,X789,X794,X792] : (~p(s(bool,'T_0')) | s(fun(X787,X788),X796) = s(fun(X787,X788),happ(s(fun(X789,fun(X787,X788)),'_dst_x00x01x11_3'(s(fun(X790,fun(X791,X788)),X792),s(fun(X787,X790),X793),s(fun(X789,fun(X787,X791)),X794))),s(X789,X795)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f41849])).
fof(f56376,plain,(
  ( ! [X633,X629,X631,X625,X627,X632,X628,X630,X624,X626] : (s(fun(X624,X625),X633) = s(fun(X624,X625),happ(s(fun(X626,fun(X624,X625)),'_dst_x00x00x11_3'(s(fun(X627,fun(X628,X625)),X629),s(X627,X630),s(fun(X626,fun(X624,X628)),X631))),s(X626,X632)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55377,f246])).
fof(f55377,plain,(
  ( ! [X633,X629,X631,X625,X627,X632,X628,X630,X624,X626] : (~p(s(bool,'T_0')) | s(fun(X624,X625),X633) = s(fun(X624,X625),happ(s(fun(X626,fun(X624,X625)),'_dst_x00x00x11_3'(s(fun(X627,fun(X628,X625)),X629),s(X627,X630),s(fun(X626,fun(X624,X628)),X631))),s(X626,X632)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f38317])).
fof(f56374,plain,(
  ( ! [X573,X569,X571,X565,X567,X572,X574,X568,X570,X566] : (s(fun(X565,X566),X574) = s(fun(X565,X566),happ(s(fun(X567,fun(X565,X566)),'_dst_x00x10x01_3'(s(fun(X568,fun(X569,X566)),X570),s(fun(X567,X568),X571),s(fun(X565,X569),X572))),s(X567,X573)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55374,f246])).
fof(f55374,plain,(
  ( ! [X573,X569,X571,X565,X567,X572,X574,X568,X570,X566] : (~p(s(bool,'T_0')) | s(fun(X565,X566),X574) = s(fun(X565,X566),happ(s(fun(X567,fun(X565,X566)),'_dst_x00x10x01_3'(s(fun(X568,fun(X569,X566)),X570),s(fun(X567,X568),X571),s(fun(X565,X569),X572))),s(X567,X573)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f37598])).
fof(f56372,plain,(
  ( ! [X356,X358,X354,X360,X357,X359,X353,X355] : (s(fun(X353,X354),X360) = s(fun(X353,X354),happ(s(fun(X355,fun(X353,X354)),'_dst_x00x11_2'(s(fun(X356,X354),X357),s(fun(X355,fun(X353,X356)),X358))),s(X355,X359)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55371,f246])).
fof(f55371,plain,(
  ( ! [X356,X358,X354,X360,X357,X359,X353,X355] : (~p(s(bool,'T_0')) | s(fun(X353,X354),X360) = s(fun(X353,X354),happ(s(fun(X355,fun(X353,X354)),'_dst_x00x11_2'(s(fun(X356,X354),X357),s(fun(X355,fun(X353,X356)),X358))),s(X355,X359)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f34010])).
fof(f56370,plain,(
  ( ! [X569,X571,X565,X567,X563,X572,X568,X570,X564,X566] : (s(fun(X563,X564),X572) = s(fun(X563,X564),'_dst_x0x0x1_3'(s(fun(X565,fun(X566,X564)),X567),s(X565,X568),s(fun(X563,X566),happ(s(fun(X569,fun(X563,X566)),X570),s(X569,X571)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55368,f246])).
fof(f55368,plain,(
  ( ! [X569,X571,X565,X567,X563,X572,X568,X570,X564,X566] : (~p(s(bool,'T_0')) | s(fun(X563,X564),X572) = s(fun(X563,X564),'_dst_x0x0x1_3'(s(fun(X565,fun(X566,X564)),X567),s(X565,X568),s(fun(X563,X566),happ(s(fun(X569,fun(X563,X566)),X570),s(X569,X571)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f38243])).
fof(f56368,plain,(
  ( ! [X753,X749,X751,X745,X747,X752,X748,X750,X744,X746] : (s(fun(X744,X745),X753) = s(fun(X744,X745),'_dst_x0x1x1_3'(s(fun(X746,fun(X747,X745)),X748),s(fun(X744,X746),happ(s(fun(X749,fun(X744,X746)),X750),s(X749,X751))),s(fun(X744,X747),happ(s(fun(X749,fun(X744,X747)),X752),s(X749,X751)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55365,f246])).
fof(f55365,plain,(
  ( ! [X753,X749,X751,X745,X747,X752,X748,X750,X744,X746] : (~p(s(bool,'T_0')) | s(fun(X744,X745),X753) = s(fun(X744,X745),'_dst_x0x1x1_3'(s(fun(X746,fun(X747,X745)),X748),s(fun(X744,X746),happ(s(fun(X749,fun(X744,X746)),X750),s(X749,X751))),s(fun(X744,X747),happ(s(fun(X749,fun(X744,X747)),X752),s(X749,X751)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43781])).
fof(f56366,plain,(
  ( ! [X648,X650,X644,X646,X642,X649,X651,X645,X647,X643] : (s(fun(X642,X643),X651) = s(fun(X642,X643),'_dst_x0x1x1_3'(s(fun(X644,fun(X645,X643)),X646),s(fun(X642,X644),X647),s(fun(X642,X645),happ(s(fun(X648,fun(X642,X645)),X649),s(X648,X650)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55363,f246])).
fof(f55363,plain,(
  ( ! [X648,X650,X644,X646,X642,X649,X651,X645,X647,X643] : (~p(s(bool,'T_0')) | s(fun(X642,X643),X651) = s(fun(X642,X643),'_dst_x0x1x1_3'(s(fun(X644,fun(X645,X643)),X646),s(fun(X642,X644),X647),s(fun(X642,X645),happ(s(fun(X648,fun(X642,X645)),X649),s(X648,X650)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f41759])).
fof(f56364,plain,(
  ( ! [X335,X341,X337,X339,X340,X342,X336,X338] : (s(fun(X335,X336),X342) = s(fun(X335,X336),'_dst_x0x1_2'(s(fun(X337,X336),X338),s(fun(X335,X337),happ(s(fun(X339,fun(X335,X337)),X340),s(X339,X341)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55360,f246])).
fof(f55360,plain,(
  ( ! [X335,X341,X337,X339,X340,X342,X336,X338] : (~p(s(bool,'T_0')) | s(fun(X335,X336),X342) = s(fun(X335,X336),'_dst_x0x1_2'(s(fun(X337,X336),X338),s(fun(X335,X337),happ(s(fun(X339,fun(X335,X337)),X340),s(X339,X341)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f33954])).
fof(f56362,plain,(
  ( ! [X509,X511,X507,X516,X512,X514,X508,X510,X513,X515] : (s(fun(X507,X508),X516) = s(fun(X507,X508),'_dst_x0x0x1_3'(s(fun(X509,fun(X510,X508)),X511),s(X509,happ(s(fun(X512,X509),X513),s(X512,X514))),s(fun(X507,X510),X515)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55357,f246])).
fof(f55357,plain,(
  ( ! [X509,X511,X507,X516,X512,X514,X508,X510,X513,X515] : (~p(s(bool,'T_0')) | s(fun(X507,X508),X516) = s(fun(X507,X508),'_dst_x0x0x1_3'(s(fun(X509,fun(X510,X508)),X511),s(X509,happ(s(fun(X512,X509),X513),s(X512,X514))),s(fun(X507,X510),X515)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f37529])).
fof(f56360,plain,(
  ( ! [X893,X887,X885,X890,X888,X894,X892,X886,X891,X889] : (s(fun(X885,X886),X894) = s(fun(X885,X886),happ(s(fun(X887,fun(X885,X886)),'_dst_x00x11x11_3'(s(fun(X888,fun(X889,X886)),X890),s(fun(X887,fun(X885,X888)),X891),s(fun(X887,fun(X885,X889)),X892))),s(X887,X893)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55354,f246])).
fof(f55354,plain,(
  ( ! [X893,X887,X885,X890,X888,X894,X892,X886,X891,X889] : (~p(s(bool,'T_0')) | s(fun(X885,X886),X894) = s(fun(X885,X886),happ(s(fun(X887,fun(X885,X886)),'_dst_x00x11x11_3'(s(fun(X888,fun(X889,X886)),X890),s(fun(X887,fun(X885,X888)),X891),s(fun(X887,fun(X885,X889)),X892))),s(X887,X893)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43693])).
fof(f56358,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X785,X778,X782,X780] : (s(fun(X777,X778),X786) = s(fun(X777,X778),happ(s(fun(X779,fun(X777,X778)),'_dst_x00x01x11_3'(s(fun(X780,fun(X781,X778)),X782),s(fun(X777,X780),X783),s(fun(X779,fun(X777,X781)),X784))),s(X779,X785)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55352,f246])).
fof(f55352,plain,(
  ( ! [X786,X784,X779,X777,X783,X781,X785,X778,X782,X780] : (~p(s(bool,'T_0')) | s(fun(X777,X778),X786) = s(fun(X777,X778),happ(s(fun(X779,fun(X777,X778)),'_dst_x00x01x11_3'(s(fun(X780,fun(X781,X778)),X782),s(fun(X777,X780),X783),s(fun(X779,fun(X777,X781)),X784))),s(X779,X785)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f41848])).
fof(f56356,plain,(
  ( ! [X621,X623,X617,X619,X615,X620,X622,X616,X618,X614] : (s(fun(X614,X615),X623) = s(fun(X614,X615),happ(s(fun(X616,fun(X614,X615)),'_dst_x00x00x11_3'(s(fun(X617,fun(X618,X615)),X619),s(X617,X620),s(fun(X616,fun(X614,X618)),X621))),s(X616,X622)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55350,f246])).
fof(f55350,plain,(
  ( ! [X621,X623,X617,X619,X615,X620,X622,X616,X618,X614] : (~p(s(bool,'T_0')) | s(fun(X614,X615),X623) = s(fun(X614,X615),happ(s(fun(X616,fun(X614,X615)),'_dst_x00x00x11_3'(s(fun(X617,fun(X618,X615)),X619),s(X617,X620),s(fun(X616,fun(X614,X618)),X621))),s(X616,X622)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f38316])).
fof(f56354,plain,(
  ( ! [X561,X563,X557,X559,X555,X564,X560,X562,X556,X558] : (s(fun(X555,X556),X564) = s(fun(X555,X556),happ(s(fun(X557,fun(X555,X556)),'_dst_x00x10x01_3'(s(fun(X558,fun(X559,X556)),X560),s(fun(X557,X558),X561),s(fun(X555,X559),X562))),s(X557,X563)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55348,f246])).
fof(f55348,plain,(
  ( ! [X561,X563,X557,X559,X555,X564,X560,X562,X556,X558] : (~p(s(bool,'T_0')) | s(fun(X555,X556),X564) = s(fun(X555,X556),happ(s(fun(X557,fun(X555,X556)),'_dst_x00x10x01_3'(s(fun(X558,fun(X559,X556)),X560),s(fun(X557,X558),X561),s(fun(X555,X559),X562))),s(X557,X563)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f37597])).
fof(f56352,plain,(
  ( ! [X561,X557,X559,X553,X555,X560,X562,X556,X558,X554] : (s(fun(X553,X554),X562) = s(fun(X553,X554),'_dst_x0x0x1_3'(s(fun(X555,fun(X556,X554)),X557),s(X555,X558),s(fun(X553,X556),happ(s(fun(X559,fun(X553,X556)),X560),s(X559,X561)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55346,f246])).
fof(f55346,plain,(
  ( ! [X561,X557,X559,X553,X555,X560,X562,X556,X558,X554] : (~p(s(bool,'T_0')) | s(fun(X553,X554),X562) = s(fun(X553,X554),'_dst_x0x0x1_3'(s(fun(X555,fun(X556,X554)),X557),s(X555,X558),s(fun(X553,X556),happ(s(fun(X559,fun(X553,X556)),X560),s(X559,X561)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f38242])).
fof(f56350,plain,(
  ( ! [X736,X738,X734,X741,X743,X737,X739,X735,X740,X742] : (s(fun(X734,X735),X743) = s(fun(X734,X735),'_dst_x0x1x1_3'(s(fun(X736,fun(X737,X735)),X738),s(fun(X734,X736),happ(s(fun(X739,fun(X734,X736)),X740),s(X739,X741))),s(fun(X734,X737),happ(s(fun(X739,fun(X734,X737)),X742),s(X739,X741)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55344,f246])).
fof(f55344,plain,(
  ( ! [X736,X738,X734,X741,X743,X737,X739,X735,X740,X742] : (~p(s(bool,'T_0')) | s(fun(X734,X735),X743) = s(fun(X734,X735),'_dst_x0x1x1_3'(s(fun(X736,fun(X737,X735)),X738),s(fun(X734,X736),happ(s(fun(X739,fun(X734,X736)),X740),s(X739,X741))),s(fun(X734,X737),happ(s(fun(X739,fun(X734,X737)),X742),s(X739,X741)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f43780])).
fof(f56348,plain,(
  ( ! [X639,X633,X635,X640,X636,X638,X632,X634,X641,X637] : (s(fun(X632,X633),X641) = s(fun(X632,X633),'_dst_x0x1x1_3'(s(fun(X634,fun(X635,X633)),X636),s(fun(X632,X634),X637),s(fun(X632,X635),happ(s(fun(X638,fun(X632,X635)),X639),s(X638,X640)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55342,f246])).
fof(f55342,plain,(
  ( ! [X639,X633,X635,X640,X636,X638,X632,X634,X641,X637] : (~p(s(bool,'T_0')) | s(fun(X632,X633),X641) = s(fun(X632,X633),'_dst_x0x1x1_3'(s(fun(X634,fun(X635,X633)),X636),s(fun(X632,X634),X637),s(fun(X632,X635),happ(s(fun(X638,fun(X632,X635)),X639),s(X638,X640)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f41758])).
fof(f56346,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X501,X503,X497] : (s(fun(X497,X498),X506) = s(fun(X497,X498),'_dst_x0x0x1_3'(s(fun(X499,fun(X500,X498)),X501),s(X499,happ(s(fun(X502,X499),X503),s(X502,X504))),s(fun(X497,X500),X505)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55340,f246])).
fof(f55340,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X506,X501,X503,X497] : (~p(s(bool,'T_0')) | s(fun(X497,X498),X506) = s(fun(X497,X498),'_dst_x0x0x1_3'(s(fun(X499,fun(X500,X498)),X501),s(X499,happ(s(fun(X502,X499),X503),s(X502,X504))),s(fun(X497,X500),X505)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f37528])).
fof(f56344,plain,(
  ( ! [X350,X346,X352,X349,X351,X345,X347,X348] : (s(fun(X345,X346),X352) = s(fun(X345,X346),happ(s(fun(X347,fun(X345,X346)),'_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350))),s(X347,X351)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55338,f246])).
fof(f55338,plain,(
  ( ! [X350,X346,X352,X349,X351,X345,X347,X348] : (~p(s(bool,'T_0')) | s(fun(X345,X346),X352) = s(fun(X345,X346),happ(s(fun(X347,fun(X345,X346)),'_dst_x00x11_2'(s(fun(X348,X346),X349),s(fun(X347,fun(X345,X348)),X350))),s(X347,X351)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f34009])).
fof(f56342,plain,(
  ( ! [X327,X333,X329,X331,X332,X334,X328,X330] : (s(fun(X327,X328),X334) = s(fun(X327,X328),'_dst_x0x1_2'(s(fun(X329,X328),X330),s(fun(X327,X329),happ(s(fun(X331,fun(X327,X329)),X332),s(X331,X333)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55336,f246])).
fof(f55336,plain,(
  ( ! [X327,X333,X329,X331,X332,X334,X328,X330] : (~p(s(bool,'T_0')) | s(fun(X327,X328),X334) = s(fun(X327,X328),'_dst_x0x1_2'(s(fun(X329,X328),X330),s(fun(X327,X329),happ(s(fun(X331,fun(X327,X329)),X332),s(X331,X333)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f33953])).
fof(f56340,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55288,f246])).
fof(f55288,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4540])).
fof(f56338,plain,(
  ( ! [X74,X72,X71,X73] : (p(s(bool,X73)) | s(X71,X74) = s(X71,sK4(X74,X72,X71))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55279,f246])).
fof(f55279,plain,(
  ( ! [X74,X72,X71,X73] : (~p(s(bool,'T_0')) | p(s(bool,X73)) | s(X71,X74) = s(X71,sK4(X74,X72,X71))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15684])).
fof(f56336,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55557,f246])).
fof(f55557,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55275])).
fof(f55275,plain,(
  ( ! [X212,X213] : (~p(s(bool,'T_0')) | p(s(bool,X212)) | p(s(bool,X213))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31924])).
fof(f56334,plain,(
  ( ! [X207] : (p(s(bool,X207))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55273,f246])).
fof(f55273,plain,(
  ( ! [X207] : (~p(s(bool,'T_0')) | p(s(bool,X207))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31921])).
fof(f56332,plain,(
  ( ! [X208] : (p(s(bool,X208))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55272,f246])).
fof(f55272,plain,(
  ( ! [X208] : (~p(s(bool,'T_0')) | p(s(bool,X208))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31922])).
fof(f56330,plain,(
  ( ! [X1] : (p(s(bool,X1))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55260,f246])).
fof(f55260,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,X1))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f321])).
fof(f56328,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55259,f246])).
fof(f55259,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f320])).
fof(f56326,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55577,f246])).
fof(f55577,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55243])).
fof(f55243,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X0)) | p(s(bool,X1))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f323])).
fof(f56324,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55581,f246])).
fof(f55581,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55236])).
fof(f55236,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X0)) | p(s(bool,X1))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f326])).
fof(f56320,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55221,f246])).
fof(f55221,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4508])).
fof(f56212,plain,(
  ( ! [X206,X204,X202,X200,X199,X207,X205,X203,X201] : (s(X199,X207) = s(X199,happ(s(fun(X200,X199),happ(s(fun(X201,fun(X200,X199)),X202),s(X201,X203))),s(X200,happ(s(fun(X204,X200),X205),s(X204,X206)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55124,f246])).
fof(f55124,plain,(
  ( ! [X206,X204,X202,X200,X199,X207,X205,X203,X201] : (~p(s(bool,'T_0')) | s(X199,X207) = s(X199,happ(s(fun(X200,X199),happ(s(fun(X201,fun(X200,X199)),X202),s(X201,X203))),s(X200,happ(s(fun(X204,X200),X205),s(X204,X206)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36255])).
fof(f56210,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (s(X139,X145) = s(X139,happ(s(fun(X140,X139),happ(s(fun(X141,fun(X140,X139)),X142),s(X141,X143))),s(X140,X144)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55122,f246])).
fof(f55122,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (~p(s(bool,'T_0')) | s(X139,X145) = s(X139,happ(s(fun(X140,X139),happ(s(fun(X141,fun(X140,X139)),X142),s(X141,X143))),s(X140,X144)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31912])).
fof(f56208,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (s(X131,X137) = s(X131,happ(s(fun(X132,X131),X133),s(X132,happ(s(fun(X134,X132),X135),s(X134,X136)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55119,f246])).
fof(f55119,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (~p(s(bool,'T_0')) | s(X131,X137) = s(X131,happ(s(fun(X132,X131),X133),s(X132,happ(s(fun(X134,X132),X135),s(X134,X136)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17808])).
fof(f56206,plain,(
  ( ! [X191,X189,X187,X194,X192,X190,X188,X195,X193] : (s(X187,X195) = s(X187,happ(s(fun(X188,X187),'_dst_x0x0x1_3'(s(fun(X189,fun(X190,X187)),X191),s(X189,X192),s(fun(X188,X190),X193))),s(X188,X194)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55117,f246])).
fof(f55117,plain,(
  ( ! [X191,X189,X187,X194,X192,X190,X188,X195,X193] : (~p(s(bool,'T_0')) | s(X187,X195) = s(X187,happ(s(fun(X188,X187),'_dst_x0x0x1_3'(s(fun(X189,fun(X190,X187)),X191),s(X189,X192),s(fun(X188,X190),X193))),s(X188,X194)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36077])).
fof(f56204,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (s(X139,X145) = s(X139,happ(s(fun(X140,X139),'_dst_x1x0_2'(s(fun(X140,fun(X141,X139)),X142),s(X141,X143))),s(X140,X144)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55115,f246])).
fof(f55115,plain,(
  ( ! [X144,X142,X140,X145,X143,X141,X139] : (~p(s(bool,'T_0')) | s(X139,X145) = s(X139,happ(s(fun(X140,X139),'_dst_x1x0_2'(s(fun(X140,fun(X141,X139)),X142),s(X141,X143))),s(X140,X144)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31757])).
fof(f56200,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (s(X115,X121) = s(X115,happ(s(fun(X116,X115),'_dst_x0x1_2'(s(fun(X117,X115),X118),s(fun(X116,X117),X119))),s(X116,X120)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55111,f246])).
fof(f55111,plain,(
  ( ! [X121,X118,X116,X120,X119,X117,X115] : (~p(s(bool,'T_0')) | s(X115,X121) = s(X115,happ(s(fun(X116,X115),'_dst_x0x1_2'(s(fun(X117,X115),X118),s(fun(X116,X117),X119))),s(X116,X120)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17931])).
fof(f56134,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X197,X195,X193] : (s(X190,X198) = s(X190,happ(s(fun(X191,X190),happ(s(fun(X192,fun(X191,X190)),X193),s(X192,X194))),s(X191,happ(s(fun(X195,X191),X196),s(X195,X197)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55062,f246])).
fof(f55062,plain,(
  ( ! [X191,X198,X196,X194,X192,X190,X197,X195,X193] : (~p(s(bool,'T_0')) | s(X190,X198) = s(X190,happ(s(fun(X191,X190),happ(s(fun(X192,fun(X191,X190)),X193),s(X192,X194))),s(X191,happ(s(fun(X195,X191),X196),s(X195,X197)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36254])).
fof(f56132,plain,(
  ( ! [X185,X182,X180,X178,X186,X184,X183,X181,X179] : (s(X178,X186) = s(X178,happ(s(fun(X179,X178),'_dst_x0x0x1_3'(s(fun(X180,fun(X181,X178)),X182),s(X180,X183),s(fun(X179,X181),X184))),s(X179,X185)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55060,f246])).
fof(f55060,plain,(
  ( ! [X185,X182,X180,X178,X186,X184,X183,X181,X179] : (~p(s(bool,'T_0')) | s(X178,X186) = s(X178,happ(s(fun(X179,X178),'_dst_x0x0x1_3'(s(fun(X180,fun(X181,X178)),X182),s(X180,X183),s(fun(X179,X181),X184))),s(X179,X185)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36076])).
fof(f56113,plain,(
  ( ! [X517] : (p(s(bool,X517))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f56112,f246])).
fof(f56112,plain,(
  ( ! [X517] : (~p(s(bool,'T_0')) | p(s(bool,X517))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f56111,f54194])).
fof(f56111,plain,(
  ( ! [X511,X516,X512,X514,X510,X517,X513,X515] : (p(s(bool,X517)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X510,bool),happ(s(fun(X511,fun(X510,bool)),X512),s(X511,X513))),s(X510,happ(s(fun(X514,X510),X515),s(X514,X516))))))),s(bool,X517))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55038,f246])).
fof(f55038,plain,(
  ( ! [X511,X516,X512,X514,X510,X517,X513,X515] : (~p(s(bool,'T_0')) | p(s(bool,X517)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X510,bool),happ(s(fun(X511,fun(X510,bool)),X512),s(X511,X513))),s(X510,happ(s(fun(X514,X510),X515),s(X514,X516))))))),s(bool,X517))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36294])).
fof(f56078,plain,(
  ( ! [X505] : (p(s(bool,X505))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f56077,f246])).
fof(f56077,plain,(
  ( ! [X505] : (~p(s(bool,'T_0')) | p(s(bool,X505))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f56076,f54194])).
fof(f56076,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X501,X503] : (~p(s(bool,happ(s(fun(X500,bool),happ(s(fun(X499,fun(X500,bool)),X501),s(X499,X502))),s(X500,happ(s(fun(X498,X500),X503),s(X498,X504)))))) | p(s(bool,X505))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f56075,f246])).
fof(f56075,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X501,X503] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X500,bool),happ(s(fun(X499,fun(X500,bool)),X501),s(X499,X502))),s(X500,happ(s(fun(X498,X500),X503),s(X498,X504)))))) | p(s(bool,X505))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55014,f54194])).
fof(f55014,plain,(
  ( ! [X499,X505,X500,X502,X498,X504,X501,X503] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X505)))) | ~p(s(bool,happ(s(fun(X500,bool),happ(s(fun(X499,fun(X500,bool)),X501),s(X499,X502))),s(X500,happ(s(fun(X498,X500),X503),s(X498,X504)))))) | p(s(bool,X505))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36113])).
fof(f56060,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (s(X132,X138) = s(X132,happ(s(fun(X133,X132),happ(s(fun(X134,fun(X133,X132)),X135),s(X134,X136))),s(X133,X137)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54998,f246])).
fof(f54998,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (~p(s(bool,'T_0')) | s(X132,X138) = s(X132,happ(s(fun(X133,X132),happ(s(fun(X134,fun(X133,X132)),X135),s(X134,X136))),s(X133,X137)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31911])).
fof(f56058,plain,(
  ( ! [X127,X125,X130,X128,X126,X124,X129] : (s(X124,X130) = s(X124,happ(s(fun(X125,X124),X126),s(X125,happ(s(fun(X127,X125),X128),s(X127,X129)))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54996,f246])).
fof(f54996,plain,(
  ( ! [X127,X125,X130,X128,X126,X124,X129] : (~p(s(bool,'T_0')) | s(X124,X130) = s(X124,happ(s(fun(X125,X124),X126),s(X125,happ(s(fun(X127,X125),X128),s(X127,X129)))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17807])).
fof(f56056,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (s(X132,X138) = s(X132,happ(s(fun(X133,X132),'_dst_x1x0_2'(s(fun(X133,fun(X134,X132)),X135),s(X134,X136))),s(X133,X137)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54994,f246])).
fof(f54994,plain,(
  ( ! [X134,X132,X138,X136,X135,X133,X137] : (~p(s(bool,'T_0')) | s(X132,X138) = s(X132,happ(s(fun(X133,X132),'_dst_x1x0_2'(s(fun(X133,fun(X134,X132)),X135),s(X134,X136))),s(X133,X137)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31756])).
fof(f56054,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (s(X108,X114) = s(X108,happ(s(fun(X109,X108),'_dst_x0x1_2'(s(fun(X110,X108),X111),s(fun(X109,X110),X112))),s(X109,X113)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54992,f246])).
fof(f54992,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X113] : (~p(s(bool,'T_0')) | s(X108,X114) = s(X108,happ(s(fun(X109,X108),'_dst_x0x1_2'(s(fun(X110,X108),X111),s(fun(X109,X110),X112))),s(X109,X113)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17930])).
fof(f56020,plain,(
  ( ! [X476,X472,X474,X475,X473] : (s(X472,happ(s(fun(X473,X472),X474),s(X473,X475))) = s(X472,happ(s(fun(X473,X472),X476),s(X473,X475)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54967,f246])).
fof(f54967,plain,(
  ( ! [X476,X472,X474,X475,X473] : (~p(s(bool,'T_0')) | s(X472,happ(s(fun(X473,X472),X474),s(X473,X475))) = s(X472,happ(s(fun(X473,X472),X476),s(X473,X475)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f40298])).
fof(f56018,plain,(
  ( ! [X206,X204,X207,X205,X203] : (s(X203,X204) = s(X203,happ(s(fun(X205,X203),X206),s(X205,X207)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54966,f246])).
fof(f54966,plain,(
  ( ! [X206,X204,X207,X205,X203] : (~p(s(bool,'T_0')) | s(X203,X204) = s(X203,happ(s(fun(X205,X203),X206),s(X205,X207)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36583])).
fof(f55997,plain,(
  ( ! [X284] : (p(s(bool,X284))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55996,f246])).
fof(f55996,plain,(
  ( ! [X284] : (~p(s(bool,'T_0')) | p(s(bool,X284))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55995,f54194])).
fof(f55995,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (~p(s(bool,happ(s(fun(X280,bool),X281),s(X280,happ(s(fun(X279,X280),X282),s(X279,X283)))))) | p(s(bool,X284))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55994,f246])).
fof(f55994,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X280,bool),X281),s(X280,happ(s(fun(X279,X280),X282),s(X279,X283)))))) | p(s(bool,X284))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54939,f54194])).
fof(f54939,plain,(
  ( ! [X280,X282,X279,X281,X283,X284] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X284)))) | ~p(s(bool,happ(s(fun(X280,bool),X281),s(X280,happ(s(fun(X279,X280),X282),s(X279,X283)))))) | p(s(bool,X284))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17959])).
fof(f55982,plain,(
  ( ! [X332] : (p(s(bool,X332))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55981,f246])).
fof(f55981,plain,(
  ( ! [X332] : (~p(s(bool,'T_0')) | p(s(bool,X332))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55980,f54194])).
fof(f55980,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (p(s(bool,X332)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X327,bool),X328),s(X327,happ(s(fun(X329,X327),X330),s(X329,X331))))))),s(bool,X332))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54923,f246])).
fof(f54923,plain,(
  ( ! [X327,X329,X331,X332,X328,X330] : (~p(s(bool,'T_0')) | p(s(bool,X332)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X327,bool),X328),s(X327,happ(s(fun(X329,X327),X330),s(X329,X331))))))),s(bool,X332))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17838])).
fof(f55944,plain,(
  ( ! [X356] : (p(s(bool,X356))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55943,f246])).
fof(f55943,plain,(
  ( ! [X356] : (~p(s(bool,'T_0')) | p(s(bool,X356))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55942,f54194])).
fof(f55942,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (~p(s(bool,happ(s(fun(X352,bool),'_dst_x1x0_2'(s(fun(X352,fun(X351,bool)),X353),s(X351,X355))),s(X352,X354)))) | p(s(bool,X356))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55941,f246])).
fof(f55941,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X352,bool),'_dst_x1x0_2'(s(fun(X352,fun(X351,bool)),X353),s(X351,X355))),s(X352,X354)))) | p(s(bool,X356))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54897,f54194])).
fof(f54897,plain,(
  ( ! [X356,X352,X354,X351,X353,X355] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X356)))) | ~p(s(bool,happ(s(fun(X352,bool),'_dst_x1x0_2'(s(fun(X352,fun(X351,bool)),X353),s(X351,X355))),s(X352,X354)))) | p(s(bool,X356))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31950])).
fof(f55928,plain,(
  ( ! [X342] : (p(s(bool,X342))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55927,f246])).
fof(f55927,plain,(
  ( ! [X342] : (~p(s(bool,'T_0')) | p(s(bool,X342))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55926,f54194])).
fof(f55926,plain,(
  ( ! [X341,X337,X339,X340,X342,X338] : (p(s(bool,X342)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X337,bool),'_dst_x1x0_2'(s(fun(X337,fun(X338,bool)),X339),s(X338,X340))),s(X337,X341))))),s(bool,X342))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54876,f246])).
fof(f54876,plain,(
  ( ! [X341,X337,X339,X340,X342,X338] : (~p(s(bool,'T_0')) | p(s(bool,X342)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X337,bool),'_dst_x1x0_2'(s(fun(X337,fun(X338,bool)),X339),s(X338,X340))),s(X337,X341))))),s(bool,X342))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31789])).
fof(f55892,plain,(
  ( ! [X335] : (p(s(bool,X335))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54857,f246])).
fof(f54857,plain,(
  ( ! [X335] : (~p(s(bool,'T_0')) | p(s(bool,X335))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36269])).
fof(f55876,plain,(
  ( ! [X222,X220,X221] : (s(X220,X221) = s(X220,X222)) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54847,f246])).
fof(f54847,plain,(
  ( ! [X222,X220,X221] : (~p(s(bool,'T_0')) | s(X220,X221) = s(X220,X222)) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31926])).
fof(f55862,plain,(
  ( ! [X76,X79,X77] : (s(X76,X79) = s(X76,happ(s(fun(sK0,X76),X77),s(sK0,sK3)))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54836,f246])).
fof(f54836,plain,(
  ( ! [X76,X79,X77] : (~p(s(bool,'T_0')) | s(X76,X79) = s(X76,happ(s(fun(sK0,X76),X77),s(sK0,sK3)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f53852])).
fof(f55860,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54829,f246])).
fof(f54829,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f337])).
fof(f54400,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),X0),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),X1),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17069])).
fof(f54399,plain,(
  ( ! [X0,X1] : (s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))),s('type.benchmark.times'(bool),X0))) != s('type.benchmark.times'(bool),'const.benchmark.Twice_2'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))),s('type.benchmark.times'(bool),X1)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f16982])).
fof(f55667,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55666,f246])).
fof(f55666,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54364,f12265])).
fof(f54364,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,'T_0')))) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15306])).
fof(f55664,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55663,f246])).
fof(f55663,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54362,f3819])).
fof(f54362,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15243])).
fof(f55644,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55643,f246])).
fof(f55643,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55642])).
fof(f55642,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55641])).
fof(f55641,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54293,f54194])).
fof(f54293,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,'T_0')))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4526])).
fof(f55639,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55638,f246])).
fof(f55638,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55637])).
fof(f55637,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | ($spl88 | $spl170)),
  inference(condensation,[],[f55636])).
fof(f55636,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54288,f54194])).
fof(f54288,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X25)))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4494])).
fof(f55620,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54196,f54194])).
fof(f54196,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f255])).
fof(f54194,plain,(
  ( ! [X415] : (s(bool,'T_0') = s(bool,X415)) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54193,f54186])).
fof(f54193,plain,(
  ( ! [X414,X415] : (s(bool,X415) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X415)) ) | $spl170),
  inference(subsumption_resolution,[],[f54191,f381])).
fof(f54191,plain,(
  ( ! [X414,X415] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X415) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X415)) ) | $spl170),
  inference(backward_demodulation,[],[f54163,f53170])).
fof(f54163,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X7)))) ) | $spl170),
  inference(subsumption_resolution,[],[f54157,f381])).
fof(f54157,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X6),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X7)))) ) | $spl170),
  inference(backward_demodulation,[],[f54004,f52978])).
fof(f54186,plain,(
  ( ! [X123,X126,X124] : (s(X123,X126) = s(X123,happ(s(fun('type.benchmark.times'(sK0),X123),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl88),
  inference(subsumption_resolution,[],[f54185,f246])).
fof(f54185,plain,(
  ( ! [X123,X126,X124] : (~p(s(bool,'T_0')) | s(X123,X126) = s(X123,happ(s(fun('type.benchmark.times'(sK0),X123),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X123)),X124),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl88),
  inference(forward_demodulation,[],[f53988,f53863])).
fof(f54166,plain,(
  ( ! [X466,X465,X467] : (s(bool,X467) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X466),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X465))) | s(bool,'T_0') = s(bool,X467)) ) | $spl170),
  inference(subsumption_resolution,[],[f54159,f381])).
fof(f54159,plain,(
  ( ! [X466,X465,X467] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X467) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X466),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X465))) | s(bool,'T_0') = s(bool,X467)) ) | $spl170),
  inference(backward_demodulation,[],[f54004,f53410])).
fof(f54165,plain,(
  ( ! [X28,X29,X27] : (s(bool,X29) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X27),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X28))) | s(bool,'F_0') = s(bool,X29)) ) | $spl170),
  inference(subsumption_resolution,[],[f54158,f381])).
fof(f54158,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X29) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X27),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X28))) | s(bool,'F_0') = s(bool,X29)) ) | $spl170),
  inference(backward_demodulation,[],[f54004,f52985])).
fof(f56452,plain,(
  ( ! [X340] : (p(s(bool,X340))) ) | ($spl88 | $spl116 | $spl170)),
  inference(subsumption_resolution,[],[f56451,f246])).
fof(f56451,plain,(
  ( ! [X340] : (~p(s(bool,'T_0')) | p(s(bool,X340))) ) | ($spl88 | $spl116 | $spl170)),
  inference(forward_demodulation,[],[f53893,f54194])).
fof(f56437,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428,f56430,f56432,f56434,f56436])).
fof(f56435,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428,f56430,f56432,f56434])).
fof(f56433,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428,f56430,f56432])).
fof(f56431,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428,f56430])).
fof(f56429,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424,f56428])).
fof(f56425,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422,f56424])).
fof(f56423,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420,f56422])).
fof(f56421,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418,f56420])).
fof(f56419,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416,f56418])).
fof(f56417,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414,f56416])).
fof(f56415,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412,f56414])).
fof(f56413,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410,f56412])).
fof(f56411,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408,f56410])).
fof(f56409,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406,f56408])).
fof(f56407,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404,f56406])).
fof(f56405,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402,f56404])).
fof(f56403,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400,f56402])).
fof(f56401,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398,f56400])).
fof(f56399,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396,f56398])).
fof(f56397,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394,f56396])).
fof(f56395,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392,f56394])).
fof(f56393,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390,f56392])).
fof(f56391,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388,f56390])).
fof(f56389,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386,f56388])).
fof(f56387,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384,f56386])).
fof(f56385,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380,f56384])).
fof(f56383,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55396,f246])).
fof(f55396,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14120])).
fof(f56382,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55395,f246])).
fof(f55395,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15708])).
fof(f56381,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378,f56380])).
fof(f56379,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376,f56378])).
fof(f56377,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374,f56376])).
fof(f56375,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372,f56374])).
fof(f56373,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370,f56372])).
fof(f56371,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368,f56370])).
fof(f56369,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366,f56368])).
fof(f56367,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364,f56366])).
fof(f56365,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362,f56364])).
fof(f56363,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360,f56362])).
fof(f56361,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358,f56360])).
fof(f56359,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356,f56358])).
fof(f56357,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354,f56356])).
fof(f56355,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352,f56354])).
fof(f56353,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350,f56352])).
fof(f56351,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348,f56350])).
fof(f56349,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346,f56348])).
fof(f56347,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344,f56346])).
fof(f56345,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342,f56344])).
fof(f56343,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340,f56342])).
fof(f56341,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338,f56340])).
fof(f56339,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336,f56338])).
fof(f56337,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334,f56336])).
fof(f56335,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332,f56334])).
fof(f56333,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330,f56332])).
fof(f56331,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328,f56330])).
fof(f56329,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326,f56328])).
fof(f56327,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324,f56326])).
fof(f56325,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320,f56324])).
fof(f56321,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212,f56320])).
fof(f56319,plain,(
  $false | ($spl14 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f56318,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212])).
fof(f56318,plain,(
  ( ! [X55] : (p(s(bool,X55))) ) | ($spl14 | $spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55218,f246])).
fof(f55218,plain,(
  ( ! [X55] : (~p(s(bool,'T_0')) | p(s(bool,X55))) ) | ($spl14 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15665])).
fof(f15665,plain,(
  ( ! [X55] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X55)))) | p(s(bool,X55))) ) | $spl14),
  inference(forward_demodulation,[],[f15664,f4055])).
fof(f4055,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))) | $spl14),
  inference(unit_resulting_resolution,[],[f381,f4033,f1150])).
fof(f15664,plain,(
  ( ! [X55] : (p(s(bool,X55)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X55))))) ) | $spl14),
  inference(subsumption_resolution,[],[f15625,f246])).
fof(f15625,plain,(
  ( ! [X55] : (~p(s(bool,'T_0')) | p(s(bool,X55)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X55))))) ) | $spl14),
  inference(superposition,[],[f326,f4055])).
fof(f56213,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210,f56212])).
fof(f56211,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208,f56210])).
fof(f56209,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206,f56208])).
fof(f56207,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204,f56206])).
fof(f56205,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200,f56204])).
fof(f56201,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134,f56200])).
fof(f56135,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132,f56134])).
fof(f56133,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113,f56132])).
fof(f56114,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078,f56113])).
fof(f56079,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060,f56078])).
fof(f56061,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058,f56060])).
fof(f56059,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056,f56058])).
fof(f56057,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054,f56056])).
fof(f56055,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020,f56054])).
fof(f56021,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018,f56020])).
fof(f56019,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997,f56018])).
fof(f55998,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982,f55997])).
fof(f55983,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944,f55982])).
fof(f55945,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928,f55944])).
fof(f55929,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892,f55928])).
fof(f55893,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876,f55892])).
fof(f55877,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862,f55876])).
fof(f55863,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860,f55862])).
fof(f55861,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400,f55860])).
fof(f55736,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54673,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54673,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x0x1_3'(s(fun(bool,fun(X115,X114)),X116),s(bool,'T_0'),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f40593])).
fof(f40593,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x0x1_3'(s(fun(bool,fun(X115,X114)),X116),s(bool,'F_0'),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32)),
  inference(forward_demodulation,[],[f39995,f359])).
fof(f39995,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(X115,X114),happ(s(fun(bool,fun(X115,X114)),X116),s(bool,'F_0'))),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(bool,fun(X115,X114)),X116),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(fun(bool,bool),X115),X117))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32)),
  inference(superposition,[],[f360,f28432])).
fof(f28432,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl32)),
  inference(unit_resulting_resolution,[],[f333,f28258,f1864])).
fof(f28258,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | ($spl18 | $spl32)),
  inference(forward_demodulation,[],[f28160,f5317])).
fof(f28160,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK8('_i_0_0',bool)))) | ($spl18 | $spl32)),
  inference(unit_resulting_resolution,[],[f9457,f27804])).
fof(f27804,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl32),
  inference(subsumption_resolution,[],[f27683,f248])).
fof(f27683,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl32),
  inference(superposition,[],[f251,f22908])).
fof(f22908,plain,(
  ( ! [X192] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X192))) | s(bool,'T_0') = s(bool,X192)) ) | $spl32),
  inference(forward_demodulation,[],[f22713,f20964])).
fof(f22713,plain,(
  ( ! [X192] : (s(bool,X192) = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X192)))) ) | $spl32),
  inference(superposition,[],[f290,f21125])).
fof(f21125,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X5)) ) | $spl32),
  inference(subsumption_resolution,[],[f21041,f381])).
fof(f21041,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X5) = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X5)) ) | $spl32),
  inference(superposition,[],[f20964,f1759])).
fof(f9457,plain,(
  s(bool,'T_0') != s(bool,sK8('_i_0_0',bool)) | $spl18),
  inference(subsumption_resolution,[],[f9416,f248])).
fof(f9416,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK8('_i_0_0',bool)) | $spl18),
  inference(superposition,[],[f251,f5317])).
fof(f55735,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54672,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54672,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x0x1_3'(s(fun(bool,fun(X111,X110)),X112),s(bool,'T_0'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f40592])).
fof(f40592,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x0x1_3'(s(fun(bool,fun(X111,X110)),X112),s(bool,'F_0'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f39994,f359])).
fof(f39994,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(X111,X110),happ(s(fun(bool,fun(X111,X110)),X112),s(bool,'F_0'))),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(bool,fun(X111,X110)),X112),s(fun(fun(bool,bool),bool),'!_1'),s(fun(fun(bool,bool),X111),X113))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21)),
  inference(superposition,[],[f360,f9689])).
fof(f9689,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f9679,f5317])).
fof(f9679,plain,(
  s(bool,sK8('_i_0_0',bool)) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl21)),
  inference(unit_resulting_resolution,[],[f9457,f5318,f454])).
fof(f5318,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | $spl21),
  inference(cnf_transformation,[],[f5318_D])).
fof(f5318_D,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl21),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl21])])).
fof(f55732,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54657,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54657,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(bool,X114),happ(s(fun(X115,fun(bool,X114)),X116),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))),s(bool,'T_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(X115,fun(bool,X114)),X116),s(fun(fun(bool,bool),X115),X117),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f40186])).
fof(f40186,plain,(
  ( ! [X116,X114,X117,X115] : (s(X114,happ(s(fun(bool,X114),happ(s(fun(X115,fun(bool,X114)),X116),s(X115,happ(s(fun(fun(bool,bool),X115),X117),s(fun(bool,bool),'_i_0_0'))))),s(bool,'F_0'))) = s(X114,happ(s(fun(fun(bool,bool),X114),'_dst_x0x1x1_3'(s(fun(X115,fun(bool,X114)),X116),s(fun(fun(bool,bool),X115),X117),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32)),
  inference(superposition,[],[f360,f28432])).
fof(f55731,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54656,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54656,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(bool,X110),happ(s(fun(X111,fun(bool,X110)),X112),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))),s(bool,'T_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(X111,fun(bool,X110)),X112),s(fun(fun(bool,bool),X111),X113),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f40185])).
fof(f40185,plain,(
  ( ! [X111,X112,X110,X113] : (s(X110,happ(s(fun(bool,X110),happ(s(fun(X111,fun(bool,X110)),X112),s(X111,happ(s(fun(fun(bool,bool),X111),X113),s(fun(bool,bool),'_i_0_0'))))),s(bool,'F_0'))) = s(X110,happ(s(fun(fun(bool,bool),X110),'_dst_x0x1x1_3'(s(fun(X111,fun(bool,X110)),X112),s(fun(fun(bool,bool),X111),X113),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21)),
  inference(superposition,[],[f360,f9689])).
fof(f55726,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55725,f246])).
fof(f55725,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55724,f54194])).
fof(f55724,plain,(
  ( ! [X405,X401,X403,X404,X406,X400,X402] : (~p(s(bool,happ(s(fun(X400,bool),happ(s(fun(X401,fun(X400,bool)),X402),s(X401,X403))),s(X400,happ(s(fun(X404,X400),X405),s(X404,X406))))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54624,f54194])).
fof(f54624,plain,(
  ( ! [X405,X401,X403,X404,X406,X400,X402] : (s(bool,'T_0') != s(bool,happ(s(fun(X404,bool),'_dst_x0x0x1_3'(s(fun(X401,fun(X400,bool)),X402),s(X401,X403),s(fun(X404,X400),X405))),s(X404,X406))) | ~p(s(bool,happ(s(fun(X400,bool),happ(s(fun(X401,fun(X400,bool)),X402),s(X401,X403))),s(X400,happ(s(fun(X404,X400),X405),s(X404,X406))))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36280])).
fof(f55723,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55722,f246])).
fof(f55722,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55721,f54194])).
fof(f55721,plain,(
  ( ! [X389,X391,X393,X388,X390,X392,X394] : (~p(s(bool,happ(s(fun(X388,bool),'_dst_x0x0x1_3'(s(fun(X389,fun(X390,bool)),X391),s(X389,X392),s(fun(X388,X390),X393))),s(X388,X394))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54613,f54194])).
fof(f54613,plain,(
  ( ! [X389,X391,X393,X388,X390,X392,X394] : (s(bool,'T_0') != s(bool,happ(s(fun(X390,bool),happ(s(fun(X389,fun(X390,bool)),X391),s(X389,X392))),s(X390,happ(s(fun(X388,X390),X393),s(X388,X394))))) | ~p(s(bool,happ(s(fun(X388,bool),'_dst_x0x0x1_3'(s(fun(X389,fun(X390,bool)),X391),s(X389,X392),s(fun(X388,X390),X393))),s(X388,X394))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36099])).
fof(f55719,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54606,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54606,plain,(
  ( ! [X103,X105,X102,X104] : (s(X102,happ(s(fun(bool,X102),happ(s(fun(X103,fun(bool,X102)),X104),s(X103,X105))),s(bool,'T_0'))) = s(X102,happ(s(fun(fun(bool,bool),X102),'_dst_x0x0x1_3'(s(fun(X103,fun(bool,X102)),X104),s(X103,X105),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f36000])).
fof(f36000,plain,(
  ( ! [X103,X105,X102,X104] : (s(X102,happ(s(fun(bool,X102),happ(s(fun(X103,fun(bool,X102)),X104),s(X103,X105))),s(bool,'F_0'))) = s(X102,happ(s(fun(fun(bool,bool),X102),'_dst_x0x0x1_3'(s(fun(X103,fun(bool,X102)),X104),s(X103,X105),s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32)),
  inference(superposition,[],[f359,f28432])).
fof(f55718,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54605,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54605,plain,(
  ( ! [X101,X99,X100,X98] : (s(X98,happ(s(fun(bool,X98),happ(s(fun(X99,fun(bool,X98)),X100),s(X99,X101))),s(bool,'T_0'))) = s(X98,happ(s(fun(fun(bool,bool),X98),'_dst_x0x0x1_3'(s(fun(X99,fun(bool,X98)),X100),s(X99,X101),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f35999])).
fof(f35999,plain,(
  ( ! [X101,X99,X100,X98] : (s(X98,happ(s(fun(bool,X98),happ(s(fun(X99,fun(bool,X98)),X100),s(X99,X101))),s(bool,'F_0'))) = s(X98,happ(s(fun(fun(bool,bool),X98),'_dst_x0x0x1_3'(s(fun(X99,fun(bool,X98)),X100),s(X99,X101),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21)),
  inference(superposition,[],[f359,f9689])).
fof(f55717,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55716,f246])).
fof(f55716,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55715,f54194])).
fof(f55715,plain,(
  ( ! [X269,X271,X273,X270,X272] : (~p(s(bool,happ(s(fun(X269,bool),happ(s(fun(X270,fun(X269,bool)),X271),s(X270,X272))),s(X269,X273))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54553,f54194])).
fof(f54553,plain,(
  ( ! [X269,X271,X273,X270,X272] : (s(bool,'T_0') != s(bool,happ(s(fun(X270,bool),'_dst_x1x0_2'(s(fun(X270,fun(X269,bool)),X271),s(X269,X273))),s(X270,X272))) | ~p(s(bool,happ(s(fun(X269,bool),happ(s(fun(X270,fun(X269,bool)),X271),s(X270,X272))),s(X269,X273))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31936])).
fof(f55714,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55713,f246])).
fof(f55713,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55712,f54194])).
fof(f55712,plain,(
  ( ! [X255,X257,X259,X256,X258] : (~p(s(bool,happ(s(fun(X255,bool),'_dst_x1x0_2'(s(fun(X255,fun(X256,bool)),X257),s(X256,X258))),s(X255,X259))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54542,f54194])).
fof(f54542,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s(bool,'T_0') != s(bool,happ(s(fun(X256,bool),happ(s(fun(X255,fun(X256,bool)),X257),s(X255,X259))),s(X256,X258))) | ~p(s(bool,happ(s(fun(X255,bool),'_dst_x1x0_2'(s(fun(X255,fun(X256,bool)),X257),s(X256,X258))),s(X255,X259))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f31775])).
fof(f55711,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54533,f54194])).
fof(f54533,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f30846])).
fof(f30846,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl32)),
  inference(subsumption_resolution,[],[f30729,f248])).
fof(f30729,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0'))) | ($spl18 | $spl32)),
  inference(superposition,[],[f251,f28432])).
fof(f55710,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f55709,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f55709,plain,(
  ( ! [X46] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X46))) | s(bool,X46) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(forward_demodulation,[],[f54531,f54194])).
fof(f54531,plain,(
  ( ! [X46] : (s(bool,X46) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'T_0'))),s(fun(bool,bool),'_i_0_0'))) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X46)))) ) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f30803])).
fof(f30803,plain,(
  ( ! [X46] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X46))) | s(bool,X46) = s(bool,happ(s(fun(fun(bool,bool),bool),'_dstsel_0_x0_1'(s(bool,'F_0'))),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl32)),
  inference(superposition,[],[f302,f28432])).
fof(f55703,plain,(
  $false | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54514,f54194])).
fof(f54514,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0'))) | ($spl18 | $spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f28258])).
fof(f55702,plain,(
  $false | ($spl4 | $spl18 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54499,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54499,plain,(
  ( ! [X99,X100] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X100))) | s(bool,X100) = s(bool,sK4(X99,'_i_0_0',bool))) ) | ($spl4 | $spl18 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f25875])).
fof(f25875,plain,(
  ( ! [X99,X100] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X100))) | s(bool,X100) = s(bool,sK4(X99,'_i_0_0',bool))) ) | ($spl4 | $spl18)),
  inference(superposition,[],[f302,f25628])).
fof(f25628,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) ) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f25607,f5317])).
fof(f25607,plain,(
  ( ! [X0] : (s(bool,sK8('_i_0_0',bool)) = s(bool,sK4(X0,'_i_0_0',bool))) ) | ($spl4 | $spl18)),
  inference(unit_resulting_resolution,[],[f9457,f1178,f454])).
fof(f55697,plain,(
  $false | ($spl32 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54465,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f54465,plain,(
  ( ! [X31] : (s(bool,X31) = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'T_0')),bool)) | s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X31)))) ) | ($spl32 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f21097])).
fof(f21097,plain,(
  ( ! [X31] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X31))) | s(bool,X31) = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool))) ) | $spl32),
  inference(superposition,[],[f302,f20964])).
fof(f55693,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55692,f246])).
fof(f55692,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55691,f54194])).
fof(f55691,plain,(
  ( ! [X198,X200,X199,X197,X201] : (~p(s(bool,happ(s(fun(X197,bool),'_dst_x0x1_2'(s(fun(X198,bool),X199),s(fun(X197,X198),X200))),s(X197,X201))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54420,f54194])).
fof(f54420,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,'T_0') != s(bool,happ(s(fun(X198,bool),X199),s(X198,happ(s(fun(X197,X198),X200),s(X197,X201))))) | ~p(s(bool,happ(s(fun(X197,bool),'_dst_x0x1_2'(s(fun(X198,bool),X199),s(fun(X197,X198),X200))),s(X197,X201))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17945])).
fof(f55690,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55689,f246])).
fof(f55689,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f55688,f54194])).
fof(f55688,plain,(
  ( ! [X249,X246,X248,X247,X245] : (~p(s(bool,happ(s(fun(X245,bool),X246),s(X245,happ(s(fun(X247,X245),X248),s(X247,X249))))))) ) | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54412,f54194])).
fof(f54412,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s(bool,'T_0') != s(bool,happ(s(fun(X247,bool),'_dst_x0x1_2'(s(fun(X245,bool),X246),s(fun(X247,X245),X248))),s(X247,X249))) | ~p(s(bool,happ(s(fun(X245,bool),X246),s(X245,happ(s(fun(X247,X245),X248),s(X247,X249))))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f17824])).
fof(f55687,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399,f54400])).
fof(f55686,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667,f54399])).
fof(f55682,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55681,f246])).
fof(f55681,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54382,f54194])).
fof(f54382,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15780])).
fof(f55680,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55679,f246])).
fof(f55679,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(forward_demodulation,[],[f54381,f54194])).
fof(f54381,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'T_0')))) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15772])).
fof(f15772,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'F_0')))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f15771,f15765])).
fof(f15765,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f15725,f9689])).
fof(f15725,plain,(
  s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))) | $spl21),
  inference(unit_resulting_resolution,[],[f9672,f15604,f454])).
fof(f9672,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl21),
  inference(unit_resulting_resolution,[],[f5318,f251])).
fof(f15771,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'F_0'))))),
  inference(forward_demodulation,[],[f15720,f359])).
fof(f15720,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f15604,f15604,f323])).
fof(f55678,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55677,f246])).
fof(f55677,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54380,f54194])).
fof(f54380,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))))),s(bool,'T_0')))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15770])).
fof(f55676,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54376,f54194])).
fof(f54376,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15709])).
fof(f55675,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55674,f246])).
fof(f55674,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54371,f54194])).
fof(f54371,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15441])).
fof(f55673,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55672,f246])).
fof(f55672,plain,(
  ~p(s(bool,'T_0')) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(forward_demodulation,[],[f54370,f54194])).
fof(f54370,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))))),s(bool,'T_0')))) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15433])).
fof(f15433,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))))),s(bool,'F_0')))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f15432,f15427])).
fof(f15427,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f15397,f9689])).
fof(f15397,plain,(
  s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) = s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))) | $spl21),
  inference(unit_resulting_resolution,[],[f9672,f15138,f454])).
fof(f15432,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))))),s(bool,'F_0'))))),
  inference(forward_demodulation,[],[f15393,f359])).
fof(f15393,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))))),s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'F_0'))),s(bool,'F_0'))))))),
  inference(unit_resulting_resolution,[],[f15138,f15138,f323])).
fof(f55671,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54367,f54194])).
fof(f54367,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15382])).
fof(f55670,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55669,f246])).
fof(f55669,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54366,f54194])).
fof(f54366,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'T_0')))))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f15381])).
fof(f55668,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664,f55667])).
fof(f55665,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644,f55664])).
fof(f55662,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55661,f246])).
fof(f55661,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54344,f54194])).
fof(f54344,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14243])).
fof(f55660,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54342,f54194])).
fof(f54342,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14188])).
fof(f55659,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55658,f246])).
fof(f55658,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54341,f54194])).
fof(f54341,plain,(
  ~p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0')))))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14187])).
fof(f55657,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55656,f246])).
fof(f55656,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54339,f54194])).
fof(f54339,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))))),s(bool,'T_0'))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14176])).
fof(f55655,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54337,f54194])).
fof(f54337,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0'))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f14121])).
fof(f55651,plain,(
  $false | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(global_subsumption,[],[f54323,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644])).
fof(f54323,plain,(
  ( ! [X27] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X27))) | s(bool,X27) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21 | $spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f11344])).
fof(f11344,plain,(
  ( ! [X27] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X27))) | s(bool,X27) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) ) | ($spl18 | $spl21)),
  inference(superposition,[],[f302,f9689])).
fof(f55645,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639,f55644])).
fof(f55640,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620,f55639])).
fof(f55635,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55634,f246])).
fof(f55634,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54286,f13360])).
fof(f54286,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4484])).
fof(f55633,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55632,f246])).
fof(f55632,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54285,f13360])).
fof(f54285,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f4482])).
fof(f55631,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55630,f246])).
fof(f55630,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54272,f54194])).
fof(f54272,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))))),s(bool,'T_0'))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f3747])).
fof(f55629,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54270,f54194])).
fof(f54270,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'T_0')))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f3675])).
fof(f55628,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f55627,f246])).
fof(f55627,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(forward_demodulation,[],[f54268,f54194])).
fof(f54268,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))),s(bool,X1))))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f3644])).
fof(f55626,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54266,f54194])).
fof(f54266,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0)))) ) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f3572])).
fof(f55621,plain,(
  $false | ($spl88 | $spl170)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f54004,f54165,f54166,f53863,f54186,f54163,f54194,f55620])).
fof(f55619,plain,(
  $false | ($spl88 | $spl170)),
  inference(subsumption_resolution,[],[f54195,f246])).
fof(f54195,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f248])).
fof(f55618,plain,(
  $false | ($spl88 | $spl170)),
  inference(trivial_inequality_removal,[],[f54201])).
fof(f54201,plain,(
  s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f999])).
fof(f55617,plain,(
  $false | ($spl88 | $spl170)),
  inference(trivial_inequality_removal,[],[f54206])).
fof(f54206,plain,(
  s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) | ($spl88 | $spl170)),
  inference(backward_demodulation,[],[f54194,f1087])).
fof(f54183,plain,(
  $false | ($spl88 | $spl92)),
  inference(subsumption_resolution,[],[f54182,f246])).
fof(f54182,plain,(
  ~p(s(bool,'T_0')) | ($spl88 | $spl92)),
  inference(forward_demodulation,[],[f53866,f53863])).
fof(f54179,plain,(
  $false | ($spl86 | $spl170)),
  inference(subsumption_resolution,[],[f54178,f246])).
fof(f54178,plain,(
  ~p(s(bool,'T_0')) | ($spl86 | $spl170)),
  inference(forward_demodulation,[],[f53862,f54004])).
fof(f54177,plain,(
  $false | ($spl88 | $spl94)),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f3929,f5672,f2990,f3523,f4794,f4873,f4483,f4481,f3971,f3913,f3778,f3684,f3675,f3672,f3581,f3572,f3384,f3382,f3381,f3369,f3319,f3317,f3316,f3310,f3220,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1891,f1874,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12871,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13494,f13513,f13512,f13647,f13947,f13946,f13930,f13994,f14013,f14012,f14063,f14121,f14183,f14188,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15382,f15446,f15592,f15535,f15604,f15660,f15663,f15709,f15787,f15813,f15981,f15911,f16073,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17247,f17329,f17334,f17338,f17341,f17479,f17478,f17476,f17542,f17601,f17602,f17603,f17604,f17552,f17573,f17610,f17677,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f18056,f17861,f17862,f17866,f17885,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f18068,f17982,f17983,f17987,f18006,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18132,f18134,f18266,f18210,f18416,f18425,f18433,f18436,f18445,f18813,f18821,f311,f17663,f17634,f17456,f17427,f17145,f17050,f14014,f3372,f3370,f3368,f3355,f3353,f3352,f3351,f3350,f3349,f3373,f18267,f18260,f18212,f3383,f1868,f1527,f1169,f17879,f18000,f16146,f16152,f17321,f17327,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f17613,f17615,f17607,f17609,f17600,f17599,f17612,f17614,f17606,f17608,f4592,f4865,f4791,f18133,f15372,f4273,f4266,f4237,f4235,f4234,f4222,f4184,f4182,f4177,f4176,f4175,f18468,f4482,f4484,f5307,f4018,f13342,f15708,f15381,f14187,f14120,f13929,f12870,f3550,f3361,f18265,f18263,f3564,f3452,f15770,f3747,f14176,f15441,f15780,f4754,f4747,f4526,f4519,f15306,f15726,f5288,f5281,f14243,f13982,f13981,f12971,f12970,f12349,f12348,f18223,f18221,f4768,f4748,f4540,f4520,f1157,f5282,f15649,f18264,f15684,f5707,f18261,f5728,f18262,f3451,f3360,f12680,f12679,f3644,f3885,f3884,f3569,f3557,f3030,f3212,f5708,f3359,f3356,f2884,f2883,f1998,f1997,f1988,f1872,f1300,f1293,f322,f321,f320,f4762,f4760,f4758,f4756,f4749,f4730,f4728,f4726,f4724,f4717,f4502,f4500,f4498,f4496,f4489,f15373,f15314,f15308,f15251,f15245,f15226,f15182,f3015,f2240,f325,f324,f323,f15650,f3551,f3362,f3309,f3306,f3296,f3293,f328,f327,f326,f1159,f5283,f5290,f13948,f4722,f4715,f4494,f4487,f18222,f18220,f4736,f4716,f4508,f4488,f15398,f15400,f15243,f15734,f15736,f5498,f17413,f18004,f17883,f16219,f5515,f5514,f5513,f5512,f318,f5518,f17412,f17882,f18003,f16218,f5311,f5280,f5310,f5309,f5308,f317,f5320,f18001,f17880,f3386,f1172,f1170,f1171,f299,f1177,f17941,f17938,f18795,f18129,f17968,f17940,f17939,f17931,f17933,f17808,f17810,f17674,f17676,f17884,f17886,f18002,f18707,f17930,f17932,f17881,f18005,f18007,f18708,f17807,f17809,f18807,f18808,f17819,f17820,f18794,f18128,f17984,f17972,f17971,f17969,f17967,f17962,f17960,f17959,f17958,f17957,f17956,f17955,f17954,f17953,f17950,f17949,f17947,f17946,f17945,f17944,f17943,f17863,f17851,f17850,f17848,f17847,f17846,f17841,f17839,f17838,f17837,f17836,f17835,f17834,f17833,f17832,f17829,f17828,f17826,f17825,f17824,f17823,f17822,f17818,f17817,f18810,f17816,f17815,f3784,f16088,f4776,f4744,f4548,f4516,f338,f337,f18815,f18809,f18806,f18805,f18713,f18131,f18130,f17393,f17309,f17305,f17304,f17238,f17236,f17230,f17229,f17228,f16201,f16135,f16133,f16132,f16118,f16090,f16089,f16064,f16062,f16056,f16055,f16054,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f16091,f18823,f4831,f4825,f16604,f16605,f16606,f16612,f16614,f20108,f20129,f19876,f19886,f15667,f14777,f14725,f14724,f14722,f14693,f14691,f14690,f14689,f14688,f23899,f23903,f23905,f12158,f12156,f11503,f9932,f8822,f6649,f3502,f3515,f3203,f1586,f28752,f28753,f28696,f28697,f28754,f28755,f28756,f28757,f28702,f28708,f28709,f28710,f28767,f28715,f28717,f28777,f28778,f28780,f28787,f28748,f28789,f29462,f29481,f29414,f29484,f29404,f29540,f29441,f29442,f29447,f29460,f30609,f30614,f30670,f30673,f30676,f30678,f30622,f30625,f30633,f31520,f31519,f32071,f31517,f31516,f32074,f31506,f31505,f32089,f31494,f32092,f31483,f31473,f31521,f31522,f31523,f31524,f32143,f31529,f31531,f32154,f31633,f31634,f31635,f31636,f31637,f31716,f31737,f31738,f31746,f31748,f31756,f31757,f31758,f31759,f31766,f31767,f31768,f31770,f31771,f31773,f31774,f31775,f31776,f31777,f31779,f31780,f31783,f31784,f31785,f31786,f31787,f31788,f31789,f31790,f31792,f31797,f31798,f31799,f32166,f31801,f31802,f31810,f31811,f31812,f31813,f31814,f31851,f31852,f31853,f31854,f31855,f31856,f31857,f31858,f31859,f31860,f31863,f31865,f31867,f31869,f31872,f31873,f31875,f31877,f31882,f31885,f31889,f31891,f31893,f31901,f31903,f31911,f31912,f31913,f31914,f31921,f31922,f31923,f31924,f31925,f31926,f31927,f31928,f31929,f31931,f31932,f31934,f31935,f31936,f31937,f31938,f31940,f31941,f31944,f31945,f31946,f31947,f31948,f31949,f31950,f31951,f31953,f31958,f31959,f31960,f32188,f31962,f31963,f31971,f31972,f31973,f31974,f31975,f32012,f32013,f32014,f32015,f32016,f32017,f32018,f32019,f32020,f32021,f32024,f32026,f32028,f32030,f32033,f32034,f32036,f32038,f32044,f32047,f32051,f32053,f32363,f32436,f32438,f32466,f32467,f32426,f32427,f32428,f32430,f32435,f32949,f32708,f32709,f32710,f32711,f32998,f32716,f32718,f32729,f32737,f33015,f32760,f32761,f33016,f32764,f33030,f33033,f33037,f32803,f32804,f32806,f32807,f32839,f32846,f33071,f33072,f33074,f33075,f32854,f32859,f32868,f32878,f32881,f33086,f33117,f33116,f33115,f33111,f33110,f33089,f33088,f33198,f33231,f33230,f33229,f33306,f33462,f33465,f33469,f33423,f33431,f33661,f33593,f33708,f33707,f33706,f33702,f33701,f33678,f33779,f33789,f33788,f33786,f33790,f33791,f33792,f33793,f33794,f33795,f33796,f33797,f33911,f33915,f33922,f33923,f33924,f33925,f33926,f33927,f33928,f33929,f33930,f33931,f33942,f33944,f33953,f33954,f33955,f33956,f33969,f33976,f33977,f33978,f33979,f33980,f33981,f33982,f33983,f33984,f33985,f33990,f33998,f34000,f34009,f34010,f34011,f34012,f34060,f34059,f34058,f34054,f34053,f34030,f34130,f34185,f34189,f34194,f34196,f34359,f34484,f34843,f34875,f34876,f34877,f35166,f34882,f34884,f34902,f34953,f35203,f34965,f34966,f34968,f34969,f35010,f35236,f35237,f35239,f35240,f35018,f35025,f35034,f35044,f35047,f35310,f35314,f35320,f35322,f35422,f35580,f35607,f35531,f35739,f35738,f36432,f36433,f36434,f35734,f35733,f35732,f36437,f35720,f35719,f35718,f36454,f36455,f36456,f35705,f35704,f36459,f35691,f35690,f35680,f35740,f35741,f35742,f35743,f36520,f35748,f35750,f35869,f35870,f35871,f35872,f35873,f35874,f35875,f35876,f35877,f35878,f35879,f35880,f35988,f35989,f35990,f35991,f35992,f35993,f35994,f35995,f35996,f35997,f36001,f36003,f36005,f36006,f36007,f36567,f36012,f36014,f36026,f36027,f36028,f36029,f36030,f36031,f36032,f36583,f36584,f36033,f36055,f36056,f36057,f36065,f36067,f36076,f36077,f36078,f36079,f36090,f36091,f36092,f36094,f36095,f36097,f36098,f36099,f36100,f36101,f36103,f36104,f36107,f36108,f36109,f36110,f36111,f36112,f36113,f36114,f36116,f36121,f36122,f36123,f36597,f36125,f36126,f36134,f36135,f36136,f36137,f36138,f36139,f36173,f36174,f36183,f36184,f36185,f36186,f36187,f36188,f36189,f36190,f36191,f36192,f36199,f36201,f36203,f36205,f36208,f36209,f36211,f36213,f36218,f36221,f36225,f36229,f36234,f36243,f36245,f36254,f36255,f36256,f36257,f36268,f36269,f36270,f36271,f36274,f36275,f36276,f36278,f36279,f36280,f36281,f36282,f36284,f36285,f36288,f36289,f36290,f36291,f36292,f36293,f36294,f36295,f36297,f36302,f36303,f36304,f36621,f36306,f36307,f36315,f36316,f36317,f36318,f36319,f36320,f36354,f36355,f36364,f36365,f36366,f36367,f36368,f36369,f36370,f36371,f36372,f36373,f36380,f36382,f36384,f36386,f36389,f36390,f36392,f36394,f36400,f36403,f36407,f36411,f36675,f36674,f36673,f36669,f36668,f36667,f36646,f36676,f36677,f36678,f36679,f36680,f36766,f36682,f36683,f36684,f36685,f36782,f36817,f36816,f36815,f36889,f36999,f37000,f36966,f37314,f37313,f37311,f37315,f37316,f37317,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37479,f37483,f37493,f37494,f37495,f37496,f37497,f37498,f37499,f37500,f37501,f37502,f37517,f37519,f37528,f37529,f37530,f37531,f37547,f37548,f37549,f37559,f37560,f37561,f37562,f37563,f37564,f37565,f37566,f37567,f37568,f37577,f37578,f37586,f37588,f37597,f37598,f37599,f37600,f37919,f37847,f37939,f37938,f37936,f37940,f37941,f37942,f37943,f37944,f37945,f37946,f37947,f37948,f37949,f37950,f37951,f37952,f38189,f38193,f38206,f38207,f38208,f38209,f38210,f38211,f38212,f38213,f38214,f38215,f38231,f38233,f38242,f38243,f38244,f38245,f38262,f38263,f38264,f38276,f38277,f38278,f38279,f38280,f38281,f38282,f38283,f38284,f38285,f38295,f38296,f38297,f38305,f38307,f38316,f38317,f38318,f38319,f39177,f39176,f39174,f39178,f39179,f39180,f39181,f39182,f39183,f39184,f39185,f39186,f39187,f39188,f39189,f39190,f39338,f39341,f39367,f39369,f39378,f39379,f39380,f39381,f39408,f39409,f39410,f39411,f39422,f39423,f39424,f39432,f39434,f39443,f39444,f39445,f39446,f39982,f39983,f40590,f39984,f39985,f39986,f39987,f39988,f39989,f39990,f39991,f39992,f39996,f40595,f40002,f40003,f40004,f40598,f40009,f40011,f40023,f40024,f40025,f40026,f40027,f40028,f40029,f40030,f40031,f40032,f40033,f40034,f40035,f40036,f40037,f40038,f40039,f40040,f40041,f40610,f40611,f40042,f40043,f40044,f40045,f40046,f40173,f40174,f40175,f40176,f40177,f40178,f40179,f40180,f40181,f40182,f40183,f40187,f40189,f40193,f40194,f40195,f40613,f40200,f40202,f40214,f40215,f40216,f40217,f40218,f40219,f40220,f40221,f40222,f40625,f40223,f40224,f40225,f40226,f40227,f40228,f40626,f40233,f40235,f40247,f40248,f40251,f40252,f40253,f40262,f40293,f40294,f40295,f40296,f40297,f40298,f40299,f40300,f40301,f40664,f40340,f40341,f40343,f40344,f40379,f40380,f40381,f40382,f40395,f40700,f40701,f40703,f40704,f40403,f40407,f40418,f40427,f40440,f40443,f40715,f41501,f41500,f41498,f41502,f41503,f41504,f41505,f41506,f41507,f41508,f41509,f41510,f41511,f41512,f41513,f41514,f41515,f41516,f41700,f41718,f41719,f41720,f41721,f41722,f41723,f41724,f41725,f41726,f41727,f41747,f41749,f41758,f41759,f41760,f41761,f41782,f41783,f41784,f41785,f41786,f41801,f41802,f41803,f41804,f41805,f41806,f41807,f41808,f41809,f41810,f41813,f41825,f41826,f41827,f41828,f41829,f41837,f41839,f41848,f41849,f41850,f41851,f42669,f42668,f42666,f42670,f42671,f42672,f42673,f42674,f42675,f42676,f42677,f42678,f42679,f42680,f42681,f42682,f42683,f42684,f42685,f42880,f42883,f42917,f42919,f42928,f42929,f42930,f42931,f42952,f42966,f42967,f42968,f42969,f42970,f42971,f42986,f42987,f42988,f42989,f42990,f42998,f43000,f43009,f43010,f43011,f43012,f43209,f43297,f43299,f43329,f43336,f43282,f43283,f43284,f43286,f43288,f43289,f43296,f43386,f43385,f43383,f43387,f43450,f43451,f43452,f43453,f43454,f43455,f43456,f43457,f43458,f43459,f43460,f43461,f43462,f43463,f43464,f43465,f43466,f43467,f43468,f43609,f43610,f43611,f43612,f43613,f43614,f43615,f43616,f43617,f43618,f43619,f43620,f43621,f43622,f43623,f43624,f43625,f43626,f43627,f43628,f43632,f43633,f43634,f43635,f43636,f43637,f43655,f43669,f43670,f43811,f43671,f43672,f43673,f43674,f43682,f43684,f43693,f43694,f43695,f43696,f43736,f43814,f43815,f43817,f43818,f43744,f43769,f43771,f43780,f43781,f43782,f43783,f43852,f43851,f43850,f43849,f43845,f43844,f43823,f43822,f43937,f43972,f43971,f43970,f43969,f44048,f44060,f44059,f44057,f44061,f44062,f44063,f44064,f44065,f44066,f44067,f44068,f44069,f44070,f44071,f44072,f44073,f44074,f44075,f44076,f44077,f44078,f44289,f44292,f44332,f44334,f44343,f44344,f44345,f44346,f44369,f44388,f44389,f44390,f44391,f44392,f44393,f44394,f44395,f44411,f44412,f44413,f44414,f44415,f44416,f44424,f44426,f44435,f44436,f44437,f44438,f44658,f44578,f44709,f44708,f44707,f44706,f44702,f44701,f44678,f44783,f44795,f44794,f44792,f44796,f44867,f44868,f44869,f44870,f44871,f44872,f44873,f44874,f44875,f44876,f44877,f44878,f44879,f44880,f44881,f44882,f44883,f44884,f44885,f44886,f44887,f45037,f45038,f45039,f45040,f45041,f45042,f45043,f45044,f45045,f45046,f45047,f45048,f45049,f45050,f45051,f45052,f45053,f45054,f45055,f45056,f45057,f45060,f45061,f45083,f45084,f45085,f45086,f45087,f45088,f45089,f45090,f45106,f45107,f45244,f45108,f45109,f45110,f45111,f45119,f45121,f45130,f45131,f45132,f45133,f45157,f45200,f45202,f45211,f45212,f45213,f45214,f45277,f45276,f45275,f45274,f45270,f45269,f45246,f45351,f45396,f45395,f45394,f45393,f45389,f45388,f45387,f45386,f45363,f45361,f45713,f45726,f45725,f45723,f45727,f45728,f45729,f45730,f45731,f45732,f45733,f45734,f45735,f45736,f45737,f45738,f45739,f45740,f45741,f45742,f45743,f45744,f45745,f45746,f45974,f45975,f46023,f46025,f46034,f46035,f46036,f46037,f46064,f46065,f46088,f46089,f46090,f46091,f46092,f46093,f46094,f46095,f46096,f46097,f46113,f46114,f46115,f46116,f46117,f46118,f46126,f46128,f46137,f46138,f46139,f46140,f46197,f46196,f46195,f46194,f46272,f46474,f46392,f47173,f46626,f46627,f46628,f46629,f46630,f46631,f46632,f46633,f46634,f46635,f46636,f46637,f46638,f46639,f46640,f46641,f46642,f46643,f46644,f46645,f46646,f46647,f46648,f46649,f46650,f46651,f46652,f46653,f46654,f46655,f46656,f46657,f46658,f46659,f46660,f46661,f46662,f46683,f46684,f46685,f46686,f46687,f46688,f46689,f46690,f46691,f46692,f46693,f46694,f46695,f46696,f46697,f46698,f46699,f46818,f46846,f46847,f46848,f46849,f46850,f47238,f46855,f46857,f46870,f46871,f46872,f46880,f46918,f46919,f46920,f47281,f46959,f46960,f46962,f46963,f47001,f47002,f47003,f47004,f47005,f47022,f47320,f47321,f47323,f47324,f47030,f47061,f47070,f47082,f47085,f47335,f47384,f47686,f47567,f47568,f47569,f47577,f47737,f47736,f47735,f47734,f47730,f47729,f47812,f47842,f47853,f47963,f47969,f47977,f47979,f48155,f48304,f48629,f48635,f48643,f48645,f48765,f48764,f48763,f48762,f48766,f48767,f48768,f48769,f48770,f48771,f48772,f48773,f48774,f48859,f49221,f49222,f49223,f49224,f49225,f49226,f49227,f49228,f49229,f49230,f49231,f49232,f49233,f49234,f49235,f49236,f49475,f49369,f50939,f50940,f50941,f50942,f50943,f50944,f50945,f50946,f50947,f50948,f50949,f50950,f50951,f50952,f50953,f50954,f50995,f51101,f51341,f51188,f51189,f51190,f51198,f51711,f51855,f53565,f53567,f53569,f53571,f53573,f53575,f53580,f53581,f53582,f53588,f53602,f53611,f53612,f53613,f53631,f53635,f53637,f53642,f53643,f53644,f53650,f53673,f53674,f53675,f53694,f52977,f52978,f52979,f52980,f53819,f52985,f52987,f53041,f53042,f53043,f53044,f53045,f53046,f53047,f53048,f53049,f53050,f53051,f53052,f53053,f53054,f53055,f53849,f53088,f53850,f53852,f53854,f53855,f53857,f53858,f53861,f53864,f53867,f53869,f53871,f53872,f53874,f53878,f53880,f53882,f53885,f53887,f53890,f53892,f53894,f53897,f53899,f53155,f53901,f53157,f53158,f53903,f53905,f53907,f53170,f53171,f53912,f53173,f53174,f53914,f53918,f53233,f53954,f53955,f53956,f53957,f53958,f53959,f53960,f53241,f53961,f53269,f53274,f53962,f53965,f53967,f53283,f53969,f53972,f53974,f53295,f53298,f53976,f53978,f53979,f53980,f53981,f53982,f53983,f53984,f53325,f53986,f53988,f53989,f53991,f53992,f53995,f53996,f53998,f54000,f54002,f54003,f54005,f54007,f54009,f54011,f54012,f54014,f54017,f54019,f54021,f54024,f54026,f54029,f54031,f54033,f54036,f54038,f54040,f54041,f54043,f54045,f54047,f54050,f54052,f53410,f53411,f54056,f54057,f53414,f54059,f54063,f54098,f54099,f54100,f54101,f54102,f54103,f54104,f54105,f54106,f54108,f54109,f54110,f54111,f54112,f54113,f54114,f54115,f54116,f54117,f54118,f54119,f54120,f54121,f54122,f54125,f54127,f54129,f54131,f54134,f54136,f54138,f54141,f54143,f53555,f54145,f53868,f54174,f53863])).
fof(f54174,plain,(
  ( ! [X134,X132,X131] : (s(X131,X134) != s(X131,happ(s(fun('type.benchmark.times'(sK0),X131),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl94),
  inference(subsumption_resolution,[],[f54170,f248])).
fof(f54170,plain,(
  ( ! [X134,X132,X131] : (p(s(bool,'F_0')) | s(X131,X134) != s(X131,happ(s(fun('type.benchmark.times'(sK0),X131),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),X131)),X132),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl94),
  inference(backward_demodulation,[],[f53868,f53991])).
fof(f54175,plain,(
  $false | ($spl94 | $spl102)),
  inference(subsumption_resolution,[],[f54172,f248])).
fof(f54172,plain,(
  p(s(bool,'F_0')) | ($spl94 | $spl102)),
  inference(backward_demodulation,[],[f53868,f53876])).
fof(f54173,plain,(
  $false | $spl94),
  inference(subsumption_resolution,[],[f54169,f248])).
fof(f54169,plain,(
  p(s(bool,'F_0')) | $spl94),
  inference(backward_demodulation,[],[f53868,f53567])).
fof(f54168,plain,(
  $false | ($spl142 | $spl170)),
  inference(subsumption_resolution,[],[f53936,f54004])).
fof(f54167,plain,(
  $false | ($spl170 | $spl174)),
  inference(subsumption_resolution,[],[f54161,f381])).
fof(f54161,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl170 | $spl174)),
  inference(backward_demodulation,[],[f54004,f54008])).
fof(f54164,plain,(
  $false | ($spl18 | $spl32 | $spl170 | $spl174)),
  inference(subsumption_resolution,[],[f54163,f54156])).
fof(f54156,plain,(
  ( ! [X522,X523] : (s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X523),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X522)))) ) | ($spl18 | $spl32 | $spl174)),
  inference(subsumption_resolution,[],[f54154,f28258])).
fof(f54154,plain,(
  ( ! [X522,X523] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X523),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X522)))) ) | ($spl32 | $spl174)),
  inference(backward_demodulation,[],[f54008,f53435])).
fof(f53435,plain,(
  ( ! [X522,X523] : (s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X523),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X522))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X522),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) | $spl32),
  inference(superposition,[],[f23106,f34843])).
fof(f23106,plain,(
  ( ! [X61] : (s(bool,'T_0') != s(bool,X61) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X61)))) ) | $spl32),
  inference(forward_demodulation,[],[f23035,f20964])).
fof(f23035,plain,(
  ( ! [X61] : (s(bool,X61) != s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X61)))) ) | $spl32),
  inference(superposition,[],[f21133,f290])).
fof(f21133,plain,(
  ( ! [X10] : (s(bool,X10) != s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl32),
  inference(subsumption_resolution,[],[f21063,f246])).
fof(f21063,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s(bool,X10) != s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl32),
  inference(superposition,[],[f399,f20964])).
fof(f54139,plain,(
  ( ! [X1182,X1179] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1179),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1182),s('type.num.num','const.num.|48|_0')))) ) | $spl240),
  inference(cnf_transformation,[],[f54139_D])).
fof(f54139_D,plain,(
  ( ! [X1182,X1179] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1179),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1182),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl240),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl240])])).
fof(f54133,plain,(
  ( ! [X1161,X1162] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1162),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1161),s(sK0,sK3)))))) ) | $spl234),
  inference(cnf_transformation,[],[f54133_D])).
fof(f54133_D,plain,(
  ( ! [X1161,X1162] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1162),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1161),s(sK0,sK3)))))) ) <=> ~$spl234),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl234])])).
fof(f54138,plain,(
  ( ! [X1182,X1180,X1179,X1181] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1181),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1180),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1179),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1182),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f53540,f335])).
fof(f53540,plain,(
  ( ! [X1182,X1180,X1179,X1181] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1181),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1180),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1179))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1179),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1182),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f34843])).
fof(f54137,plain,(
  ( ! [X1172,X1169,X1173] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1172,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1169),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1172,X1173)))) ) | $spl238),
  inference(cnf_transformation,[],[f54137_D])).
fof(f54137_D,plain,(
  ( ! [X1172,X1169,X1173] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1172,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1169),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1172,X1173)))) ) <=> ~$spl238),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl238])])).
fof(f54136,plain,(
  ( ! [X1170,X1172,X1171,X1169,X1173] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1171),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1170),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1172,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1169),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1172,X1173)))) )),
  inference(forward_demodulation,[],[f53538,f335])).
fof(f53538,plain,(
  ( ! [X1170,X1172,X1171,X1169,X1173] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1171),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1170),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1169))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1172,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1169),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1172,X1173)))) )),
  inference(superposition,[],[f17121,f34843])).
fof(f54135,plain,(
  ( ! [X1163] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1163),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) | $spl236),
  inference(cnf_transformation,[],[f54135_D])).
fof(f54135_D,plain,(
  ( ! [X1163] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1163),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) <=> ~$spl236),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl236])])).
fof(f54134,plain,(
  ( ! [X1163,X1165,X1164] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1165),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1164),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1163),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53536,f335])).
fof(f53536,plain,(
  ( ! [X1163,X1165,X1164] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1165),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1164),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1163))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1163),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f17120,f34843])).
fof(f54132,plain,(
  ( ! [X1160] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1160),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl232),
  inference(cnf_transformation,[],[f54132_D])).
fof(f54132_D,plain,(
  ( ! [X1160] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1160),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl232),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl232])])).
fof(f54131,plain,(
  ( ! [X1161,X1162,X1160] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1162),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1161),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1160),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53535,f335])).
fof(f53535,plain,(
  ( ! [X1161,X1162,X1160] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1162),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1161),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1160))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1160),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f17086,f34843])).
fof(f54130,plain,(
  ( ! [X1149,X1152] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1149),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1152),s('type.num.num','const.num.|48|_0')))) ) | $spl230),
  inference(cnf_transformation,[],[f54130_D])).
fof(f54130_D,plain,(
  ( ! [X1149,X1152] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1149),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1152),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl230),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl230])])).
fof(f54124,plain,(
  ( ! [X1128,X1129] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1128),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1129)))) ) | $spl224),
  inference(cnf_transformation,[],[f54124_D])).
fof(f54124_D,plain,(
  ( ! [X1128,X1129] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1128),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1129)))) ) <=> ~$spl224),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl224])])).
fof(f54129,plain,(
  ( ! [X1151,X1149,X1150,X1152] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1150),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1151))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1149),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1152),s('type.num.num','const.num.|48|_0')))) )),
  inference(forward_demodulation,[],[f53532,f335])).
fof(f53532,plain,(
  ( ! [X1151,X1149,X1150,X1152] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1150),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1149))),s('type.benchmark.times'(sK0),X1151))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1149),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1152),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f34843])).
fof(f54128,plain,(
  ( ! [X1139,X1143,X1142] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1142,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1139),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1142,X1143)))) ) | $spl228),
  inference(cnf_transformation,[],[f54128_D])).
fof(f54128_D,plain,(
  ( ! [X1139,X1143,X1142] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1142,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1139),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1142,X1143)))) ) <=> ~$spl228),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl228])])).
fof(f54127,plain,(
  ( ! [X1139,X1143,X1141,X1142,X1140] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1140),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1141))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1142,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1139),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1142,X1143)))) )),
  inference(forward_demodulation,[],[f53530,f335])).
fof(f53530,plain,(
  ( ! [X1139,X1143,X1141,X1142,X1140] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1140),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1139))),s('type.benchmark.times'(sK0),X1141))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X1142,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1139),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(X1142,X1143)))) )),
  inference(superposition,[],[f17026,f34843])).
fof(f54126,plain,(
  ( ! [X1133] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1133),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) | $spl226),
  inference(cnf_transformation,[],[f54126_D])).
fof(f54126_D,plain,(
  ( ! [X1133] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1133),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) <=> ~$spl226),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl226])])).
fof(f54125,plain,(
  ( ! [X1134,X1135,X1133] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1134),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1135))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1133),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53528,f335])).
fof(f53528,plain,(
  ( ! [X1134,X1135,X1133] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1134),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1133))),s('type.benchmark.times'(sK0),X1135))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1133),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(superposition,[],[f17025,f34843])).
fof(f54123,plain,(
  ( ! [X1127] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1127),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl222),
  inference(cnf_transformation,[],[f54123_D])).
fof(f54123_D,plain,(
  ( ! [X1127] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1127),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl222),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl222])])).
fof(f54122,plain,(
  ( ! [X1128,X1129,X1127] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1128),s(sK0,sK3))),s('type.benchmark.times'(sK0),X1129))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1127),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53526,f335])).
fof(f53526,plain,(
  ( ! [X1128,X1129,X1127] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1128),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1127))),s('type.benchmark.times'(sK0),X1129))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1127),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f16999,f34843])).
fof(f54004,plain,(
  ( ! [X348] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl170),
  inference(cnf_transformation,[],[f54004_D])).
fof(f54004_D,plain,(
  ( ! [X348] : (s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f54086,plain,(
  ( ! [X537] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X537),s(sK0,sK3)))))) ) | $spl220),
  inference(cnf_transformation,[],[f54086_D])).
fof(f54086_D,plain,(
  ( ! [X537] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X537),s(sK0,sK3)))))) ) <=> ~$spl220),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl220])])).
fof(f54085,plain,(
  ( ! [X536,X537] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X537),s(sK0,sK3))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X536),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(forward_demodulation,[],[f53441,f335])).
fof(f53441,plain,(
  ( ! [X536,X537] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X537),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X536))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X536),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(superposition,[],[f27804,f34843])).
fof(f53925,plain,(
  ( ! [X446] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X446),s(sK0,sK3)))))) ) | $spl136),
  inference(cnf_transformation,[],[f53925_D])).
fof(f53925_D,plain,(
  ( ! [X446] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X446),s(sK0,sK3)))))) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f54079,plain,(
  ( ! [X520,X521] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X521),s(sK0,sK3))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X520),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(forward_demodulation,[],[f53434,f335])).
fof(f53434,plain,(
  ( ! [X520,X521] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X521),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X520))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X520),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(superposition,[],[f22908,f34843])).
fof(f53932,plain,(
  ( ! [X460] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X460),s(sK0,sK3)))),bool))) ) | $spl140),
  inference(cnf_transformation,[],[f53932_D])).
fof(f53932_D,plain,(
  ( ! [X460] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X460),s(sK0,sK3)))),bool))) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f54076,plain,(
  ( ! [X514,X515] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X515),s(sK0,sK3)))),bool)) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X514),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(forward_demodulation,[],[f53431,f335])).
fof(f53431,plain,(
  ( ! [X514,X515] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X515),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X514)))),bool)) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X514),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(superposition,[],[f21026,f34843])).
fof(f54075,plain,(
  ( ! [X512] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X512),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) ) | $spl218),
  inference(cnf_transformation,[],[f54075_D])).
fof(f54075_D,plain,(
  ( ! [X512] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X512),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) ) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f53876,plain,(
  ( ! [X311] : (p(s(bool,happ(s(fun(sK0,bool),X311),s(sK0,sK3))))) ) | $spl102),
  inference(cnf_transformation,[],[f53876_D])).
fof(f53876_D,plain,(
  ( ! [X311] : (p(s(bool,happ(s(fun(sK0,bool),X311),s(sK0,sK3))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f54074,plain,(
  ( ! [X512,X513] : (p(s(bool,happ(s(fun(sK0,bool),X513),s(sK0,sK3)))) | s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X512),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) ) | $spl32),
  inference(forward_demodulation,[],[f53430,f335])).
fof(f53430,plain,(
  ( ! [X512,X513] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X513),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X512)))) | s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X512),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) ) | $spl32),
  inference(superposition,[],[f20814,f34843])).
fof(f20814,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X0)),bool))) ) | $spl32),
  inference(subsumption_resolution,[],[f20763,f248])).
fof(f20763,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X0)),bool))) ) | $spl32),
  inference(superposition,[],[f20353,f250])).
fof(f54070,plain,(
  ( ! [X505] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X505),s(sK0,sK3)))),bool)))) ) | $spl216),
  inference(cnf_transformation,[],[f54070_D])).
fof(f54070_D,plain,(
  ( ! [X505] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X505),s(sK0,sK3)))),bool)))) ) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f54073,plain,(
  ( ! [X511,X510] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X511),s(sK0,sK3)))),bool))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X510),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(forward_demodulation,[],[f53429,f335])).
fof(f53429,plain,(
  ( ! [X511,X510] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X511),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X510)))),bool))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X510),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(superposition,[],[f20781,f34843])).
fof(f20781,plain,(
  ( ! [X0] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X0)),bool))) | s(bool,'T_0') = s(bool,X0)) ) | $spl32),
  inference(condensation,[],[f20780])).
fof(f20780,plain,(
  ( ! [X4,X3] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X4)),bool))) | p(s(bool,X3)) | s(bool,'T_0') = s(bool,X4)) ) | $spl32),
  inference(subsumption_resolution,[],[f20710,f251])).
fof(f20710,plain,(
  ( ! [X4,X3] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,X4)),bool))) | p(s(bool,X3)) | s(bool,'T_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) ) | $spl32),
  inference(superposition,[],[f20353,f396])).
fof(f53859,plain,(
  ( ! [X295] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X295),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl82),
  inference(cnf_transformation,[],[f53859_D])).
fof(f53859_D,plain,(
  ( ! [X295] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X295),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f54069,plain,(
  ( ! [X505,X504] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X505),s(sK0,sK3)))),bool))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X504),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl32),
  inference(forward_demodulation,[],[f53426,f335])).
fof(f53426,plain,(
  ( ! [X505,X504] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X505),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X504)))),bool))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X504),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl32),
  inference(superposition,[],[f20353,f34843])).
fof(f54064,plain,(
  ( ! [X487,X489] : (p(s(bool,happ(s(fun(fun(X489,bool),bool),'!_1'),s(fun(X489,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X487),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) | $spl214),
  inference(cnf_transformation,[],[f54064_D])).
fof(f54064_D,plain,(
  ( ! [X487,X489] : (p(s(bool,happ(s(fun(fun(X489,bool),bool),'!_1'),s(fun(X489,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X487),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) <=> ~$spl214),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl214])])).
fof(f53866,plain,(
  ( ! [X298] : (~p(s(bool,happ(s(fun(sK0,bool),X298),s(sK0,sK3))))) ) | $spl92),
  inference(cnf_transformation,[],[f53866_D])).
fof(f53866_D,plain,(
  ( ! [X298] : (~p(s(bool,happ(s(fun(sK0,bool),X298),s(sK0,sK3))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f54063,plain,(
  ( ! [X488,X487,X489] : (~p(s(bool,happ(s(fun(sK0,bool),X488),s(sK0,sK3)))) | p(s(bool,happ(s(fun(fun(X489,bool),bool),'!_1'),s(fun(X489,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X487),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(forward_demodulation,[],[f53418,f335])).
fof(f53418,plain,(
  ( ! [X488,X487,X489] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X488),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X487)))) | p(s(bool,happ(s(fun(fun(X489,bool),bool),'!_1'),s(fun(X489,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X487),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(superposition,[],[f5307,f34843])).
fof(f54060,plain,(
  ( ! [X480,X482] : (p(s(bool,happ(s(fun(fun(X482,bool),bool),'?_1'),s(fun(X482,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X480),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) | $spl212),
  inference(cnf_transformation,[],[f54060_D])).
fof(f54060_D,plain,(
  ( ! [X480,X482] : (p(s(bool,happ(s(fun(fun(X482,bool),bool),'?_1'),s(fun(X482,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X480),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) <=> ~$spl212),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl212])])).
fof(f54059,plain,(
  ( ! [X480,X482,X481] : (~p(s(bool,happ(s(fun(sK0,bool),X481),s(sK0,sK3)))) | p(s(bool,happ(s(fun(fun(X482,bool),bool),'?_1'),s(fun(X482,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X480),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(forward_demodulation,[],[f53415,f335])).
fof(f53415,plain,(
  ( ! [X480,X482,X481] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X481),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X480)))) | p(s(bool,happ(s(fun(fun(X482,bool),bool),'?_1'),s(fun(X482,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X480),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(superposition,[],[f4018,f34843])).
fof(f54008,plain,(
  ( ! [X352] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X352),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl174),
  inference(cnf_transformation,[],[f54008_D])).
fof(f54008_D,plain,(
  ( ! [X352] : (s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X352),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f54058,plain,(
  ( ! [X476,X475] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X476,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X475),s(sK0,sK3)))))))) ) | $spl210),
  inference(cnf_transformation,[],[f54058_D])).
fof(f54058_D,plain,(
  ( ! [X476,X475] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X476,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X475),s(sK0,sK3)))))))) ) <=> ~$spl210),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl210])])).
fof(f54057,plain,(
  ( ! [X476,X474,X475] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X476,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X475),s(sK0,sK3))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X474),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53413,f335])).
fof(f53413,plain,(
  ( ! [X476,X474,X475] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X476,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X475),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X474))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X474),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f2216,f34843])).
fof(f53908,plain,(
  ( ! [X388,X390] : (p(s(bool,'|dollar|exists_1'(s(fun(X390,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X388),s(sK0,sK3))))))))) ) | $spl128),
  inference(cnf_transformation,[],[f53908_D])).
fof(f53908_D,plain,(
  ( ! [X388,X390] : (p(s(bool,'|dollar|exists_1'(s(fun(X390,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X388),s(sK0,sK3))))))))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f54056,plain,(
  ( ! [X472,X471,X473] : (p(s(bool,'|dollar|exists_1'(s(fun(X473,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X472),s(sK0,sK3)))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53412,f335])).
fof(f53412,plain,(
  ( ! [X472,X471,X473] : (p(s(bool,'|dollar|exists_1'(s(fun(X473,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X472),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471)))))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f1868,f34843])).
fof(f53913,plain,(
  ( ! [X420,X421] : (p(s(bool,'|dollar|exists_1'(s(fun(X421,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X420),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) | $spl130),
  inference(cnf_transformation,[],[f53913_D])).
fof(f53913_D,plain,(
  ( ! [X420,X421] : (p(s(bool,'|dollar|exists_1'(s(fun(X421,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X420),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f54052,plain,(
  ( ! [X441,X440,X442] : (~p(s(bool,happ(s(fun(sK0,bool),X441),s(sK0,sK3)))) | p(s(bool,'|dollar|exists_1'(s(fun(X442,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X440),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(forward_demodulation,[],[f53402,f335])).
fof(f53402,plain,(
  ( ! [X441,X440,X442] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X441),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X440)))) | p(s(bool,'|dollar|exists_1'(s(fun(X442,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X440),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(superposition,[],[f1169,f34843])).
fof(f54051,plain,(
  ( ! [X437,X439] : (s(bool,X439) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X437),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X439)) ) | $spl208),
  inference(cnf_transformation,[],[f54051_D])).
fof(f54051_D,plain,(
  ( ! [X437,X439] : (s(bool,X439) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X437),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X439)) ) <=> ~$spl208),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl208])])).
fof(f54050,plain,(
  ( ! [X438,X437,X439] : (~p(s(bool,happ(s(fun(sK0,bool),X438),s(sK0,sK3)))) | s(bool,X439) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X437),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X439)) )),
  inference(forward_demodulation,[],[f53401,f335])).
fof(f53401,plain,(
  ( ! [X438,X437,X439] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X438),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X437)))) | s(bool,X439) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X437),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,X439)) )),
  inference(superposition,[],[f1150,f34843])).
fof(f54046,plain,(
  ( ! [X428,X426,X427] : (s(bool,'T_0') = s(bool,happ(s(fun(X427,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X426),s(sK0,sK3))))),s(X427,X428)))) ) | $spl206),
  inference(cnf_transformation,[],[f54046_D])).
fof(f54046_D,plain,(
  ( ! [X428,X426,X427] : (s(bool,'T_0') = s(bool,happ(s(fun(X427,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X426),s(sK0,sK3))))),s(X427,X428)))) ) <=> ~$spl206),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl206])])).
fof(f54045,plain,(
  ( ! [X428,X426,X425,X427] : (s(bool,'T_0') = s(bool,happ(s(fun(X427,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X426),s(sK0,sK3))))),s(X427,X428))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X425),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53398,f335])).
fof(f53398,plain,(
  ( ! [X428,X426,X425,X427] : (s(bool,'T_0') = s(bool,happ(s(fun(X427,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X426),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X425))))),s(X427,X428))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X425),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f515,f34843])).
fof(f54044,plain,(
  ( ! [X424,X423] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(sK0,bool),X423),s(sK0,sK3))),s(fun('type.num.num',bool),X424),s('type.num.num','const.num.|48|_0')))) ) | $spl204),
  inference(cnf_transformation,[],[f54044_D])).
fof(f54044_D,plain,(
  ( ! [X424,X423] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(sK0,bool),X423),s(sK0,sK3))),s(fun('type.num.num',bool),X424),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl204),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl204])])).
fof(f54043,plain,(
  ( ! [X422,X424,X423] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(sK0,bool),X423),s(sK0,sK3))),s(fun('type.num.num',bool),X424),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X422),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53397,f335])).
fof(f53397,plain,(
  ( ! [X422,X424,X423] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X423),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X422))),s(fun('type.num.num',bool),X424),s('type.num.num','const.num.|48|_0'))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X422),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f479,f34843])).
fof(f54042,plain,(
  ( ! [X421,X419] : (s(bool,X421) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X419),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X421)) ) | $spl202),
  inference(cnf_transformation,[],[f54042_D])).
fof(f54042_D,plain,(
  ( ! [X421,X419] : (s(bool,X421) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X419),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X421)) ) <=> ~$spl202),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl202])])).
fof(f54041,plain,(
  ( ! [X420,X421,X419] : (p(s(bool,happ(s(fun(sK0,bool),X420),s(sK0,sK3)))) | s(bool,X421) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X419),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(forward_demodulation,[],[f53396,f335])).
fof(f53396,plain,(
  ( ! [X420,X421,X419] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X420),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X419)))) | s(bool,X421) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X419),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X421)) )),
  inference(superposition,[],[f454,f34843])).
fof(f53937,plain,(
  ( ! [X470] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X470),s(sK0,sK3)))))) ) | $spl144),
  inference(cnf_transformation,[],[f53937_D])).
fof(f53937_D,plain,(
  ( ! [X470] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X470),s(sK0,sK3)))))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f54040,plain,(
  ( ! [X418,X417] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X418),s(sK0,sK3))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X417),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53395,f335])).
fof(f53395,plain,(
  ( ! [X418,X417] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X418),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X417))))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X417),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f429,f34843])).
fof(f54039,plain,(
  ( ! [X414,X416] : (s(bool,X416) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X416)) ) | $spl200),
  inference(cnf_transformation,[],[f54039_D])).
fof(f54039_D,plain,(
  ( ! [X414,X416] : (s(bool,X416) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X416)) ) <=> ~$spl200),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl200])])).
fof(f54038,plain,(
  ( ! [X414,X416,X415] : (~p(s(bool,happ(s(fun(sK0,bool),X415),s(sK0,sK3)))) | s(bool,X416) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(forward_demodulation,[],[f53394,f335])).
fof(f53394,plain,(
  ( ! [X414,X416,X415] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X415),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414)))) | s(bool,X416) != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X414),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(superposition,[],[f399,f34843])).
fof(f54037,plain,(
  ( ! [X399,X401] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X401),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl198),
  inference(cnf_transformation,[],[f54037_D])).
fof(f54037_D,plain,(
  ( ! [X399,X401] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X401),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) <=> ~$spl198),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl198])])).
fof(f54036,plain,(
  ( ! [X399,X401,X400] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X401),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,happ(s(fun(sK0,bool),X400),s(sK0,sK3))))) )),
  inference(forward_demodulation,[],[f54035,f359])).
fof(f54035,plain,(
  ( ! [X399,X401,X400] : (~p(s(bool,happ(s(fun(sK0,bool),X400),s(sK0,sK3)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X401))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53389,f335])).
fof(f53389,plain,(
  ( ! [X399,X401,X400] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X400),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X401))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X399),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f328,f34843])).
fof(f54034,plain,(
  ( ! [X395,X394] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X394),s(sK0,sK3))))),s(bool,X395))))) ) | $spl196),
  inference(cnf_transformation,[],[f54034_D])).
fof(f54034_D,plain,(
  ( ! [X395,X394] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X394),s(sK0,sK3))))),s(bool,X395))))) ) <=> ~$spl196),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl196])])).
fof(f54033,plain,(
  ( ! [X393,X395,X394] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X394),s(sK0,sK3))))),s(bool,X395)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X393),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53387,f335])).
fof(f53387,plain,(
  ( ! [X393,X395,X394] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X394),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X393))))),s(bool,X395)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X393),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(superposition,[],[f327,f34843])).
fof(f54032,plain,(
  ( ! [X390,X392] : (p(s(bool,X392)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X390),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X392))))) ) | $spl194),
  inference(cnf_transformation,[],[f54032_D])).
fof(f54032_D,plain,(
  ( ! [X390,X392] : (p(s(bool,X392)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X390),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X392))))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f54031,plain,(
  ( ! [X391,X390,X392] : (~p(s(bool,happ(s(fun(sK0,bool),X391),s(sK0,sK3)))) | p(s(bool,X392)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X390),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X392))))) )),
  inference(forward_demodulation,[],[f53386,f335])).
fof(f53386,plain,(
  ( ! [X391,X390,X392] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X391),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X390)))) | p(s(bool,X392)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X390),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X392))))) )),
  inference(superposition,[],[f326,f34843])).
fof(f54030,plain,(
  ( ! [X389,X387] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X389),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl192),
  inference(cnf_transformation,[],[f54030_D])).
fof(f54030_D,plain,(
  ( ! [X389,X387] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X389),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f54029,plain,(
  ( ! [X389,X387,X388] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X389),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,happ(s(fun(sK0,bool),X388),s(sK0,sK3))))) )),
  inference(forward_demodulation,[],[f54028,f359])).
fof(f54028,plain,(
  ( ! [X389,X387,X388] : (~p(s(bool,happ(s(fun(sK0,bool),X388),s(sK0,sK3)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X389))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(forward_demodulation,[],[f53385,f335])).
fof(f53385,plain,(
  ( ! [X389,X387,X388] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X388),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X389))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X387),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))) )),
  inference(superposition,[],[f325,f34843])).
fof(f54027,plain,(
  ( ! [X384,X386] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X384),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X386))))) ) | $spl190),
  inference(cnf_transformation,[],[f54027_D])).
fof(f54027_D,plain,(
  ( ! [X384,X386] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X384),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X386))))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f54026,plain,(
  ( ! [X385,X384,X386] : (~p(s(bool,happ(s(fun(sK0,bool),X385),s(sK0,sK3)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X384),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X386))))) )),
  inference(forward_demodulation,[],[f53384,f335])).
fof(f53384,plain,(
  ( ! [X385,X384,X386] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X385),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X384)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X384),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X386))))) )),
  inference(superposition,[],[f324,f34843])).
fof(f54025,plain,(
  ( ! [X383,X382] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X383),s(fun(sK0,bool),X382))),s(sK0,sK3)))) | p(s(bool,X383))) ) | $spl188),
  inference(cnf_transformation,[],[f54025_D])).
fof(f54025_D,plain,(
  ( ! [X383,X382] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X383),s(fun(sK0,bool),X382))),s(sK0,sK3)))) | p(s(bool,X383))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f54024,plain,(
  ( ! [X383,X382,X381] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X383),s(fun(sK0,bool),X382))),s(sK0,sK3)))) | p(s(bool,X383)) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X381),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f54023,f359])).
fof(f54023,plain,(
  ( ! [X383,X382,X381] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X383))),s(bool,happ(s(fun(sK0,bool),X382),s(sK0,sK3)))))) | p(s(bool,X383)) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X381),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53383,f335])).
fof(f53383,plain,(
  ( ! [X383,X382,X381] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X383))),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X382),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X381)))))) | p(s(bool,X383)) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X381),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(superposition,[],[f323,f34843])).
fof(f54022,plain,(
  ( ! [X379,X380] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X379),s(sK0,sK3))))),s(bool,X380)))) | p(s(bool,X380))) ) | $spl186),
  inference(cnf_transformation,[],[f54022_D])).
fof(f54022_D,plain,(
  ( ! [X379,X380] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X379),s(sK0,sK3))))),s(bool,X380)))) | p(s(bool,X380))) ) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f54021,plain,(
  ( ! [X379,X380,X378] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X379),s(sK0,sK3))))),s(bool,X380)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X380))) )),
  inference(forward_demodulation,[],[f53382,f335])).
fof(f53382,plain,(
  ( ! [X379,X380,X378] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X379),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378))))),s(bool,X380)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X378),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X380))) )),
  inference(superposition,[],[f323,f34843])).
fof(f54020,plain,(
  ( ! [X377,X375] : (~p(s(bool,X377)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X375),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X377))))) ) | $spl184),
  inference(cnf_transformation,[],[f54020_D])).
fof(f54020_D,plain,(
  ( ! [X377,X375] : (~p(s(bool,X377)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X375),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X377))))) ) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f54019,plain,(
  ( ! [X377,X376,X375] : (~p(s(bool,happ(s(fun(sK0,bool),X376),s(sK0,sK3)))) | ~p(s(bool,X377)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X375),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X377))))) )),
  inference(forward_demodulation,[],[f53381,f335])).
fof(f53381,plain,(
  ( ! [X377,X376,X375] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X376),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X375)))) | ~p(s(bool,X377)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X375),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X377))))) )),
  inference(superposition,[],[f322,f34843])).
fof(f54018,plain,(
  ( ! [X374,X373] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X374),s(fun(sK0,bool),X373))),s(sK0,sK3))))) ) | $spl182),
  inference(cnf_transformation,[],[f54018_D])).
fof(f54018_D,plain,(
  ( ! [X374,X373] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X374),s(fun(sK0,bool),X373))),s(sK0,sK3))))) ) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f54017,plain,(
  ( ! [X372,X374,X373] : (~p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X374),s(fun(sK0,bool),X373))),s(sK0,sK3)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X372),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f54016,f359])).
fof(f54016,plain,(
  ( ! [X372,X374,X373] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X374))),s(bool,happ(s(fun(sK0,bool),X373),s(sK0,sK3)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X372),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53380,f335])).
fof(f53380,plain,(
  ( ! [X372,X374,X373] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X374))),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X373),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X372)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X372),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(superposition,[],[f321,f34843])).
fof(f54015,plain,(
  ( ! [X364,X365] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X364),s(sK0,sK3))))),s(bool,X365))))) ) | $spl180),
  inference(cnf_transformation,[],[f54015_D])).
fof(f54015_D,plain,(
  ( ! [X364,X365] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X364),s(sK0,sK3))))),s(bool,X365))))) ) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f54014,plain,(
  ( ! [X364,X365,X363] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X364),s(sK0,sK3))))),s(bool,X365)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53377,f335])).
fof(f53377,plain,(
  ( ! [X364,X365,X363] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X364),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363))))),s(bool,X365)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(superposition,[],[f320,f34843])).
fof(f54013,plain,(
  ( ! [X360,X362] : (~p(s(bool,X362)) | s(bool,X362) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X360),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl178),
  inference(cnf_transformation,[],[f54013_D])).
fof(f54013_D,plain,(
  ( ! [X360,X362] : (~p(s(bool,X362)) | s(bool,X362) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X360),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f54012,plain,(
  ( ! [X360,X362,X361] : (~p(s(bool,happ(s(fun(sK0,bool),X361),s(sK0,sK3)))) | ~p(s(bool,X362)) | s(bool,X362) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X360),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53376,f335])).
fof(f53376,plain,(
  ( ! [X360,X362,X361] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X361),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X360)))) | ~p(s(bool,X362)) | s(bool,X362) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X360),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f315,f34843])).
fof(f54010,plain,(
  ( ! [X356,X354] : (p(s(bool,X356)) | s(bool,X356) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X354),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl176),
  inference(cnf_transformation,[],[f54010_D])).
fof(f54010_D,plain,(
  ( ! [X356,X354] : (p(s(bool,X356)) | s(bool,X356) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X354),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f54011,plain,(
  ( ! [X358,X357,X359] : (p(s(bool,happ(s(fun(sK0,bool),X358),s(sK0,sK3)))) | p(s(bool,X359)) | s(bool,X359) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X357),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53375,f335])).
fof(f53375,plain,(
  ( ! [X358,X357,X359] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X358),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X357)))) | p(s(bool,X359)) | s(bool,X359) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X357),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f312,f34843])).
fof(f54009,plain,(
  ( ! [X356,X354,X355] : (p(s(bool,happ(s(fun(sK0,bool),X355),s(sK0,sK3)))) | p(s(bool,X356)) | s(bool,X356) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X354),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53374,f335])).
fof(f53374,plain,(
  ( ! [X356,X354,X355] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X355),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X354)))) | p(s(bool,X356)) | s(bool,X356) = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X354),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f312,f34843])).
fof(f54007,plain,(
  ( ! [X352,X353] : (p(s(bool,happ(s(fun(sK0,bool),X353),s(sK0,sK3)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X352),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53373,f335])).
fof(f53373,plain,(
  ( ! [X352,X353] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X353),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X352)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X352),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f256,f34843])).
fof(f53862,plain,(
  ( ! [X297] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X297),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl86),
  inference(cnf_transformation,[],[f53862_D])).
fof(f53862_D,plain,(
  ( ! [X297] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X297),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f54006,plain,(
  ( ! [X351] : (s(bool,'F_0') != s(bool,happ(s(fun(sK0,bool),X351),s(sK0,sK3)))) ) | $spl172),
  inference(cnf_transformation,[],[f54006_D])).
fof(f54006_D,plain,(
  ( ! [X351] : (s(bool,'F_0') != s(bool,happ(s(fun(sK0,bool),X351),s(sK0,sK3)))) ) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f54005,plain,(
  ( ! [X350,X351] : (s(bool,'F_0') != s(bool,happ(s(fun(sK0,bool),X351),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X350),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53372,f335])).
fof(f53372,plain,(
  ( ! [X350,X351] : (s(bool,'F_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X351),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X350))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X350),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(superposition,[],[f255,f34843])).
fof(f54003,plain,(
  ( ! [X349,X348] : (~p(s(bool,happ(s(fun(sK0,bool),X349),s(sK0,sK3)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53371,f335])).
fof(f53371,plain,(
  ( ! [X349,X348] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X349),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f252,f34843])).
fof(f53936,plain,(
  ( ! [X471] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl142),
  inference(cnf_transformation,[],[f53936_D])).
fof(f53936_D,plain,(
  ( ! [X471] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f54002,plain,(
  ( ! [X346,X347] : (p(s(bool,happ(s(fun(sK0,bool),X347),s(sK0,sK3)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X346),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53370,f335])).
fof(f53370,plain,(
  ( ! [X346,X347] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X347),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X346)))) | s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X346),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(superposition,[],[f251,f34843])).
fof(f54001,plain,(
  ( ! [X342] : (p(s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))))))) ) | $spl168),
  inference(cnf_transformation,[],[f54001_D])).
fof(f54001_D,plain,(
  ( ! [X342] : (p(s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f54000,plain,(
  ( ! [X343,X342] : (~p(s(bool,happ(s(fun(sK0,bool),X343),s(sK0,sK3)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f53368,f335])).
fof(f53368,plain,(
  ( ! [X343,X342] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X343),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342)))) | p(s(bool,'|dollar|exists_1'(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))))))) )),
  inference(superposition,[],[f3449,f34843])).
fof(f53999,plain,(
  ( ! [X340] : (p(s(bool,happ(s(fun(fun('type.benchmark.times'(sK0),bool),bool),'?_1'),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X340),s('type.benchmark.times'(sK0),sK2))))))) ) | $spl166),
  inference(cnf_transformation,[],[f53999_D])).
fof(f53999_D,plain,(
  ( ! [X340] : (p(s(bool,happ(s(fun(fun('type.benchmark.times'(sK0),bool),bool),'?_1'),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X340),s('type.benchmark.times'(sK0),sK2))))))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f53998,plain,(
  ( ! [X341,X340] : (~p(s(bool,happ(s(fun(sK0,bool),X341),s(sK0,sK3)))) | p(s(bool,happ(s(fun(fun('type.benchmark.times'(sK0),bool),bool),'?_1'),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X340),s('type.benchmark.times'(sK0),sK2))))))) )),
  inference(forward_demodulation,[],[f53367,f335])).
fof(f53367,plain,(
  ( ! [X341,X340] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X341),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X340)))) | p(s(bool,happ(s(fun(fun('type.benchmark.times'(sK0),bool),bool),'?_1'),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X340),s('type.benchmark.times'(sK0),sK2))))))) )),
  inference(superposition,[],[f319,f34843])).
fof(f53997,plain,(
  ( ! [X337,X339] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),X339),s('type.benchmark.times'(sK0),sK6(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK5(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0))))))) ) | $spl164),
  inference(cnf_transformation,[],[f53997_D])).
fof(f53997_D,plain,(
  ( ! [X337,X339] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),X339),s('type.benchmark.times'(sK0),sK6(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK5(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0))))))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f53996,plain,(
  ( ! [X337,X339,X338] : (~p(s(bool,happ(s(fun(sK0,bool),X338),s(sK0,sK3)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),X339),s('type.benchmark.times'(sK0),sK6(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK5(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0))))))) )),
  inference(forward_demodulation,[],[f53366,f335])).
fof(f53366,plain,(
  ( ! [X337,X339,X338] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X338),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337)))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),X339),s('type.benchmark.times'(sK0),sK6(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0)))))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK5(happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X337),s('type.benchmark.times'(sK0),sK2)),X339,'type.benchmark.times'(sK0))))))) )),
  inference(superposition,[],[f300,f34843])).
fof(f53993,plain,(
  s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),sK2) | $spl162),
  inference(cnf_transformation,[],[f53993_D])).
fof(f53993_D,plain,(
  s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),sK2) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f53995,plain,(
  ( ! [X336] : (~p(s(bool,happ(s(fun(sK0,bool),X336),s(sK0,sK3)))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),sK2)) )),
  inference(forward_demodulation,[],[f53365,f335])).
fof(f53365,plain,(
  ( ! [X336] : (~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X336),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),'=_0')))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),sK2)) )),
  inference(superposition,[],[f337,f34843])).
fof(f53994,plain,(
  s('type.benchmark.times'(sK0),sK1) != s('type.benchmark.times'(sK0),sK2) | $spl163),
  inference(cnf_transformation,[],[f53994_D])).
fof(f53994_D,plain,(
  s('type.benchmark.times'(sK0),sK1) != s('type.benchmark.times'(sK0),sK2) <=> ~$spl163),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl163])])).
fof(f53992,plain,(
  ( ! [X335] : (p(s(bool,happ(s(fun(sK0,bool),X335),s(sK0,sK3)))) | s('type.benchmark.times'(sK0),sK1) != s('type.benchmark.times'(sK0),sK2)) )),
  inference(forward_demodulation,[],[f53364,f335])).
fof(f53364,plain,(
  ( ! [X335] : (p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X335),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),'=_0')))) | s('type.benchmark.times'(sK0),sK1) != s('type.benchmark.times'(sK0),sK2)) )),
  inference(superposition,[],[f338,f34843])).
fof(f53970,plain,(
  ( ! [X1019,X1018] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1019),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1018),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) | $spl154),
  inference(cnf_transformation,[],[f53970_D])).
fof(f53970_D,plain,(
  ( ! [X1019,X1018] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1019),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1018),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f53975,plain,(
  ( ! [X1033,X1036] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1033),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1036),s('type.num.num','const.num.|48|_0')))) ) | $spl160),
  inference(cnf_transformation,[],[f53975_D])).
fof(f53975_D,plain,(
  ( ! [X1033,X1036] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1033),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1036),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f53974,plain,(
  ( ! [X1035,X1033,X1034,X1036] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1033),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1036),s('type.num.num','const.num.|48|_0'))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1035),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1034),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53288,f335])).
fof(f53288,plain,(
  ( ! [X1035,X1033,X1034,X1036] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1035),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1034),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1033),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1034))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1036),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17123,f34843])).
fof(f53973,plain,(
  ( ! [X1023,X1027,X1026] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1026,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1023),s(sK0,sK3))))),s(X1026,X1027)))) ) | $spl158),
  inference(cnf_transformation,[],[f53973_D])).
fof(f53973_D,plain,(
  ( ! [X1023,X1027,X1026] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1026,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1023),s(sK0,sK3))))),s(X1026,X1027)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f53972,plain,(
  ( ! [X1023,X1027,X1025,X1026,X1024] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1026,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1023),s(sK0,sK3))))),s(X1026,X1027))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1025),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1024),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53286,f335])).
fof(f53286,plain,(
  ( ! [X1023,X1027,X1025,X1026,X1024] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1025),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1024),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun(X1026,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1023),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1024))))),s(X1026,X1027)))) )),
  inference(superposition,[],[f17121,f34843])).
fof(f53971,plain,(
  ( ! [X1017] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1017),s(sK0,sK3)))))) ) | $spl156),
  inference(cnf_transformation,[],[f53971_D])).
fof(f53971_D,plain,(
  ( ! [X1017] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1017),s(sK0,sK3)))))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f53969,plain,(
  ( ! [X1019,X1017,X1018] : (s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1017),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1019),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1018),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) )),
  inference(forward_demodulation,[],[f53284,f335])).
fof(f53284,plain,(
  ( ! [X1019,X1017,X1018] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),X1019),s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1018),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) | s('type.benchmark.times'(sK0),sK1) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1017),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1018)))))) )),
  inference(superposition,[],[f17120,f34843])).
fof(f53963,plain,(
  ( ! [X988,X989] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X988),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X989)))) ) | $spl146),
  inference(cnf_transformation,[],[f53963_D])).
fof(f53963_D,plain,(
  ( ! [X988,X989] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X988),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X989)))) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f53968,plain,(
  ( ! [X1006,X1003] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1003),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1006),s('type.num.num','const.num.|48|_0')))) ) | $spl152),
  inference(cnf_transformation,[],[f53968_D])).
fof(f53968_D,plain,(
  ( ! [X1006,X1003] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1003),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1006),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f53967,plain,(
  ( ! [X1006,X1004,X1003,X1005] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X1003),s(sK0,sK3))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1006),s('type.num.num','const.num.|48|_0'))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1004),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X1005)))) )),
  inference(forward_demodulation,[],[f53280,f335])).
fof(f53280,plain,(
  ( ! [X1006,X1004,X1003,X1005] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1004),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X1005))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),'const.ind_type.FCONS_3'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X1003),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X1004))),s(fun('type.num.num','type.benchmark.times'(sK0)),X1006),s('type.num.num','const.num.|48|_0')))) )),
  inference(superposition,[],[f17028,f34843])).
fof(f53966,plain,(
  ( ! [X996,X993,X997] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X996,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X993),s(sK0,sK3))))),s(X996,X997)))) ) | $spl150),
  inference(cnf_transformation,[],[f53966_D])).
fof(f53966_D,plain,(
  ( ! [X996,X993,X997] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X996,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X993),s(sK0,sK3))))),s(X996,X997)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f53965,plain,(
  ( ! [X994,X996,X995,X993,X997] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X996,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X993),s(sK0,sK3))))),s(X996,X997))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X994),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X995)))) )),
  inference(forward_demodulation,[],[f53278,f335])).
fof(f53278,plain,(
  ( ! [X994,X996,X995,X993,X997] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X994),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X995))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun(X996,'type.benchmark.times'(sK0)),'_dst_x0_1'(s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X993),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X994))))),s(X996,X997)))) )),
  inference(superposition,[],[f17026,f34843])).
fof(f53964,plain,(
  ( ! [X987] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X987),s(sK0,sK3)))))) ) | $spl148),
  inference(cnf_transformation,[],[f53964_D])).
fof(f53964_D,plain,(
  ( ! [X987] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X987),s(sK0,sK3)))))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f53962,plain,(
  ( ! [X988,X987,X989] : (s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),happ(s(fun(sK0,'type.benchmark.times'(sK0)),X987),s(sK0,sK3))))) | s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X988),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X989)))) )),
  inference(forward_demodulation,[],[f53276,f335])).
fof(f53276,plain,(
  ( ! [X988,X987,X989] : (s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))) != s('type.benchmark.times'(sK0),'const.benchmark.Twice_2'(s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X988),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))),s('type.benchmark.times'(sK0),X989))) | s('type.benchmark.times'(sK0),sK2) = s('type.benchmark.times'(sK0),happ(s(fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0)),'_i_0_0'),s('type.benchmark.times'(sK0),'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,'type.benchmark.times'(sK0)),X987),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),'type.benchmark.times'(sK0))),X988)))))) )),
  inference(superposition,[],[f17025,f34843])).
fof(f53935,plain,(
  ( ! [X471,X470] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X470),s(sK0,sK3))))) | s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl32),
  inference(forward_demodulation,[],[f53195,f335])).
fof(f53195,plain,(
  ( ! [X471,X470] : (s(bool,'T_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X470),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X471)))))) ) | $spl32),
  inference(superposition,[],[f23106,f34843])).
fof(f53931,plain,(
  ( ! [X461,X460] : (s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X460),s(sK0,sK3)))),bool)) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X461),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl32),
  inference(forward_demodulation,[],[f53190,f335])).
fof(f53190,plain,(
  ( ! [X461,X460] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X461),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'T_0') = s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X460),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X461)))),bool))) ) | $spl32),
  inference(superposition,[],[f20814,f34843])).
fof(f53927,plain,(
  ( ! [X453] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X453),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool)))) ) | $spl138),
  inference(cnf_transformation,[],[f53927_D])).
fof(f53927_D,plain,(
  ( ! [X453] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X453),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool)))) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f53863,plain,(
  ( ! [X296] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),X296),s(sK0,sK3)))) ) | $spl88),
  inference(cnf_transformation,[],[f53863_D])).
fof(f53863_D,plain,(
  ( ! [X296] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),X296),s(sK0,sK3)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f53930,plain,(
  ( ! [X459,X458] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),X458),s(sK0,sK3))) | p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X459),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool)))) ) | $spl32),
  inference(forward_demodulation,[],[f53189,f335])).
fof(f53189,plain,(
  ( ! [X459,X458] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X459),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X458),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X459)))) ) | $spl32),
  inference(superposition,[],[f20781,f34843])).
fof(f53926,plain,(
  ( ! [X453,X452] : (p(s(bool,happ(s(fun(sK0,bool),X452),s(sK0,sK3)))) | p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X453),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool)))) ) | $spl32),
  inference(forward_demodulation,[],[f53186,f335])).
fof(f53186,plain,(
  ( ! [X453,X452] : (p(s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X453),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))),bool))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X452),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X453))))) ) | $spl32),
  inference(superposition,[],[f20353,f34843])).
fof(f53865,plain,(
  ( ! [X299] : (s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X299),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | $spl90),
  inference(cnf_transformation,[],[f53865_D])).
fof(f53865_D,plain,(
  ( ! [X299] : (s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X299),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f53924,plain,(
  ( ! [X447,X446] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(sK0,bool),X446),s(sK0,sK3))))) | s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X447),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) ) | ($spl18 | $spl28)),
  inference(forward_demodulation,[],[f53183,f335])).
fof(f53183,plain,(
  ( ! [X447,X446] : (s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X447),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X446),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X447)))))) ) | ($spl18 | $spl28)),
  inference(superposition,[],[f10215,f34843])).
fof(f10215,plain,(
  ( ! [X32] : (s(bool,'F_0') != s(bool,X32) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X32)))) ) | ($spl18 | $spl28)),
  inference(forward_demodulation,[],[f10181,f5317])).
fof(f10181,plain,(
  ( ! [X32] : (s(bool,X32) != s(bool,sK8('_i_0_0',bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X32)))) ) | $spl28),
  inference(superposition,[],[f6596,f290])).
fof(f53919,plain,(
  ( ! [X437,X435] : (p(s(bool,happ(s(fun(fun(X437,bool),bool),'!_1'),s(fun(X437,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X435),s(sK0,sK3))))))))) ) | $spl134),
  inference(cnf_transformation,[],[f53919_D])).
fof(f53919_D,plain,(
  ( ! [X437,X435] : (p(s(bool,happ(s(fun(fun(X437,bool),bool),'!_1'),s(fun(X437,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X435),s(sK0,sK3))))))))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f53918,plain,(
  ( ! [X436,X437,X435] : (p(s(bool,happ(s(fun(fun(X437,bool),bool),'!_1'),s(fun(X437,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X435),s(sK0,sK3)))))))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X436),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53178,f335])).
fof(f53178,plain,(
  ( ! [X436,X437,X435] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X436),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,happ(s(fun(fun(X437,bool),bool),'!_1'),s(fun(X437,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X435),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X436))))))))) )),
  inference(superposition,[],[f5307,f34843])).
fof(f53915,plain,(
  ( ! [X428,X430] : (p(s(bool,happ(s(fun(fun(X430,bool),bool),'?_1'),s(fun(X430,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X428),s(sK0,sK3))))))))) ) | $spl132),
  inference(cnf_transformation,[],[f53915_D])).
fof(f53915_D,plain,(
  ( ! [X428,X430] : (p(s(bool,happ(s(fun(fun(X430,bool),bool),'?_1'),s(fun(X430,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X428),s(sK0,sK3))))))))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f53914,plain,(
  ( ! [X428,X430,X429] : (p(s(bool,happ(s(fun(fun(X430,bool),bool),'?_1'),s(fun(X430,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X428),s(sK0,sK3)))))))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53175,f335])).
fof(f53175,plain,(
  ( ! [X428,X430,X429] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,happ(s(fun(fun(X430,bool),bool),'?_1'),s(fun(X430,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X428),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X429))))))))) )),
  inference(superposition,[],[f4018,f34843])).
fof(f53868,plain,(
  ( ! [X300] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),X300),s(sK0,sK3)))) ) | $spl94),
  inference(cnf_transformation,[],[f53868_D])).
fof(f53868_D,plain,(
  ( ! [X300] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),X300),s(sK0,sK3)))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f53912,plain,(
  ( ! [X420,X421,X419] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),X419),s(sK0,sK3))) | p(s(bool,'|dollar|exists_1'(s(fun(X421,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X420),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))))))) )),
  inference(forward_demodulation,[],[f53172,f335])).
fof(f53172,plain,(
  ( ! [X420,X421,X419] : (p(s(bool,'|dollar|exists_1'(s(fun(X421,bool),'_dst_x0_1'(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X420),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X419),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X420)))) )),
  inference(superposition,[],[f1868,f34843])).
fof(f53907,plain,(
  ( ! [X389,X388,X390] : (p(s(bool,'|dollar|exists_1'(s(fun(X390,bool),'_dst_x0_1'(s(bool,happ(s(fun(sK0,bool),X388),s(sK0,sK3)))))))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X389),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53162,f335])).
fof(f53162,plain,(
  ( ! [X389,X388,X390] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X389),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,'|dollar|exists_1'(s(fun(X390,bool),'_dst_x0_1'(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X388),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X389))))))))) )),
  inference(superposition,[],[f1169,f34843])).
fof(f53906,plain,(
  ( ! [X385,X387] : (s(bool,X387) = s(bool,happ(s(fun(sK0,bool),X385),s(sK0,sK3))) | s(bool,'F_0') = s(bool,X387)) ) | $spl126),
  inference(cnf_transformation,[],[f53906_D])).
fof(f53906_D,plain,(
  ( ! [X385,X387] : (s(bool,X387) = s(bool,happ(s(fun(sK0,bool),X385),s(sK0,sK3))) | s(bool,'F_0') = s(bool,X387)) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f53905,plain,(
  ( ! [X385,X387,X386] : (s(bool,X387) = s(bool,happ(s(fun(sK0,bool),X385),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X386),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'F_0') = s(bool,X387)) )),
  inference(forward_demodulation,[],[f53161,f335])).
fof(f53161,plain,(
  ( ! [X385,X387,X386] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X386),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,X387) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X385),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X386))) | s(bool,'F_0') = s(bool,X387)) )),
  inference(superposition,[],[f1150,f34843])).
fof(f53902,plain,(
  ( ! [X367,X369] : (s(bool,X369) = s(bool,happ(s(fun(sK0,bool),X367),s(sK0,sK3))) | s(bool,'T_0') = s(bool,X369)) ) | $spl124),
  inference(cnf_transformation,[],[f53902_D])).
fof(f53902_D,plain,(
  ( ! [X367,X369] : (s(bool,X369) = s(bool,happ(s(fun(sK0,bool),X367),s(sK0,sK3))) | s(bool,'T_0') = s(bool,X369)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f53901,plain,(
  ( ! [X368,X367,X369] : (s(bool,X369) = s(bool,happ(s(fun(sK0,bool),X367),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X368),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X369)) )),
  inference(forward_demodulation,[],[f53156,f335])).
fof(f53156,plain,(
  ( ! [X368,X367,X369] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X368),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,X369) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X367),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X368))) | s(bool,'T_0') = s(bool,X369)) )),
  inference(superposition,[],[f454,f34843])).
fof(f53900,plain,(
  ( ! [X364,X362] : (s(bool,X364) != s(bool,happ(s(fun(sK0,bool),X362),s(sK0,sK3))) | s(bool,'T_0') = s(bool,X364)) ) | $spl122),
  inference(cnf_transformation,[],[f53900_D])).
fof(f53900_D,plain,(
  ( ! [X364,X362] : (s(bool,X364) != s(bool,happ(s(fun(sK0,bool),X362),s(sK0,sK3))) | s(bool,'T_0') = s(bool,X364)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f53899,plain,(
  ( ! [X364,X362,X363] : (s(bool,X364) != s(bool,happ(s(fun(sK0,bool),X362),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'T_0') = s(bool,X364)) )),
  inference(forward_demodulation,[],[f53154,f335])).
fof(f53154,plain,(
  ( ! [X364,X362,X363] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,X364) != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X362),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X363))) | s(bool,'T_0') = s(bool,X364)) )),
  inference(superposition,[],[f399,f34843])).
fof(f53898,plain,(
  ( ! [X349,X347] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X349),s(fun(sK0,bool),X347))),s(sK0,sK3))))) ) | $spl120),
  inference(cnf_transformation,[],[f53898_D])).
fof(f53898_D,plain,(
  ( ! [X349,X347] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X349),s(fun(sK0,bool),X347))),s(sK0,sK3))))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f53897,plain,(
  ( ! [X349,X347,X348] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X349),s(fun(sK0,bool),X347))),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53896,f359])).
fof(f53896,plain,(
  ( ! [X349,X347,X348] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X349))),s(bool,happ(s(fun(sK0,bool),X347),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53149,f335])).
fof(f53149,plain,(
  ( ! [X349,X347,X348] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X349))),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X347),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X348))))))) )),
  inference(superposition,[],[f328,f34843])).
fof(f53895,plain,(
  ( ! [X343,X342] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X343))))) ) | $spl118),
  inference(cnf_transformation,[],[f53895_D])).
fof(f53895_D,plain,(
  ( ! [X343,X342] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X343))))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f53894,plain,(
  ( ! [X341,X343,X342] : (p(s(bool,happ(s(fun(sK0,bool),X341),s(sK0,sK3)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X343))))) )),
  inference(forward_demodulation,[],[f53147,f335])).
fof(f53147,plain,(
  ( ! [X341,X343,X342] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X343)))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X341),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X342))))) )),
  inference(superposition,[],[f327,f34843])).
fof(f53893,plain,(
  ( ! [X340,X338] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X338),s(sK0,sK3))))),s(bool,X340)))) | p(s(bool,X340))) ) | $spl116),
  inference(cnf_transformation,[],[f53893_D])).
fof(f53893_D,plain,(
  ( ! [X340,X338] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X338),s(sK0,sK3))))),s(bool,X340)))) | p(s(bool,X340))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f53892,plain,(
  ( ! [X339,X340,X338] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(sK0,bool),X338),s(sK0,sK3))))),s(bool,X340)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X339),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X340))) )),
  inference(forward_demodulation,[],[f53146,f335])).
fof(f53146,plain,(
  ( ! [X339,X340,X338] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X339),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X340)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X338),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X339))))),s(bool,X340))))) )),
  inference(superposition,[],[f326,f34843])).
fof(f53891,plain,(
  ( ! [X335,X337] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X337),s(fun(sK0,bool),X335))),s(sK0,sK3))))) ) | $spl114),
  inference(cnf_transformation,[],[f53891_D])).
fof(f53891_D,plain,(
  ( ! [X335,X337] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X337),s(fun(sK0,bool),X335))),s(sK0,sK3))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f53890,plain,(
  ( ! [X335,X337,X336] : (p(s(bool,happ(s(fun(sK0,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X337),s(fun(sK0,bool),X335))),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X336),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53889,f359])).
fof(f53889,plain,(
  ( ! [X335,X337,X336] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X337))),s(bool,happ(s(fun(sK0,bool),X335),s(sK0,sK3)))))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X336),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53145,f335])).
fof(f53145,plain,(
  ( ! [X335,X337,X336] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X336),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X337))),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X335),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X336))))))) )),
  inference(superposition,[],[f325,f34843])).
fof(f53888,plain,(
  ( ! [X332,X334] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X332),s(sK0,sK3))))),s(bool,X334))))) ) | $spl112),
  inference(cnf_transformation,[],[f53888_D])).
fof(f53888_D,plain,(
  ( ! [X332,X334] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X332),s(sK0,sK3))))),s(bool,X334))))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f53887,plain,(
  ( ! [X333,X332,X334] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun(sK0,bool),X332),s(sK0,sK3))))),s(bool,X334)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X333),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53144,f335])).
fof(f53144,plain,(
  ( ! [X333,X332,X334] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X333),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X332),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X333))))),s(bool,X334))))) )),
  inference(superposition,[],[f324,f34843])).
fof(f53886,plain,(
  ( ! [X331,X330] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X331),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X331))) ) | $spl110),
  inference(cnf_transformation,[],[f53886_D])).
fof(f53886_D,plain,(
  ( ! [X331,X330] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X331),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X331))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f53885,plain,(
  ( ! [X329,X331,X330] : (p(s(bool,happ(s(fun(sK0,bool),X329),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X331),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X331))) )),
  inference(forward_demodulation,[],[f53884,f335])).
fof(f53884,plain,(
  ( ! [X329,X331,X330] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X331),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X331)) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X329),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330))))) )),
  inference(forward_demodulation,[],[f53143,f359])).
fof(f53143,plain,(
  ( ! [X329,X331,X330] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X331))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | p(s(bool,X331)) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X329),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X330))))) )),
  inference(superposition,[],[f323,f34843])).
fof(f53883,plain,(
  ( ! [X327,X328] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X327),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X328)))) | p(s(bool,X328))) ) | $spl108),
  inference(cnf_transformation,[],[f53883_D])).
fof(f53883_D,plain,(
  ( ! [X327,X328] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X327),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X328)))) | p(s(bool,X328))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f53882,plain,(
  ( ! [X327,X326,X328] : (p(s(bool,happ(s(fun(sK0,bool),X326),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X327),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X328)))) | p(s(bool,X328))) )),
  inference(forward_demodulation,[],[f53142,f335])).
fof(f53142,plain,(
  ( ! [X327,X326,X328] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X327),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X328)))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X326),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X327)))) | p(s(bool,X328))) )),
  inference(superposition,[],[f323,f34843])).
fof(f53881,plain,(
  ( ! [X325,X323] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X323),s(sK0,sK3))))),s(bool,X325)))) | ~p(s(bool,X325))) ) | $spl106),
  inference(cnf_transformation,[],[f53881_D])).
fof(f53881_D,plain,(
  ( ! [X325,X323] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X323),s(sK0,sK3))))),s(bool,X325)))) | ~p(s(bool,X325))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f53880,plain,(
  ( ! [X325,X323,X324] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(sK0,bool),X323),s(sK0,sK3))))),s(bool,X325)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X324),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,X325))) )),
  inference(forward_demodulation,[],[f53141,f335])).
fof(f53141,plain,(
  ( ! [X325,X323,X324] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X324),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,X325)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X323),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X324))))),s(bool,X325))))) )),
  inference(superposition,[],[f322,f34843])).
fof(f53879,plain,(
  ( ! [X321,X322] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X322),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) | $spl104),
  inference(cnf_transformation,[],[f53879_D])).
fof(f53879_D,plain,(
  ( ! [X321,X322] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X322),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f53878,plain,(
  ( ! [X321,X320,X322] : (p(s(bool,happ(s(fun(sK0,bool),X320),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X322),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53877,f335])).
fof(f53877,plain,(
  ( ! [X321,X320,X322] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X322),s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321),s('type.benchmark.times'(sK0),sK2))))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X320),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321))))) )),
  inference(forward_demodulation,[],[f53140,f359])).
fof(f53140,plain,(
  ( ! [X321,X320,X322] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X322))),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X320),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X321))))) )),
  inference(superposition,[],[f321,f34843])).
fof(f53875,plain,(
  ( ! [X313,X312] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X312),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X313))))) ) | $spl100),
  inference(cnf_transformation,[],[f53875_D])).
fof(f53875_D,plain,(
  ( ! [X313,X312] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X312),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X313))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f53874,plain,(
  ( ! [X313,X312,X311] : (p(s(bool,happ(s(fun(sK0,bool),X311),s(sK0,sK3)))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X312),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X313))))) )),
  inference(forward_demodulation,[],[f53137,f335])).
fof(f53137,plain,(
  ( ! [X313,X312,X311] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X312),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))),s(bool,X313)))) | p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X311),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X312))))) )),
  inference(superposition,[],[f320,f34843])).
fof(f53873,plain,(
  ( ! [X308,X310] : (s(bool,X310) = s(bool,happ(s(fun(sK0,bool),X308),s(sK0,sK3))) | ~p(s(bool,X310))) ) | $spl98),
  inference(cnf_transformation,[],[f53873_D])).
fof(f53873_D,plain,(
  ( ! [X308,X310] : (s(bool,X310) = s(bool,happ(s(fun(sK0,bool),X308),s(sK0,sK3))) | ~p(s(bool,X310))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f53872,plain,(
  ( ! [X308,X310,X309] : (s(bool,X310) = s(bool,happ(s(fun(sK0,bool),X308),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X309),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,X310))) )),
  inference(forward_demodulation,[],[f53136,f335])).
fof(f53136,plain,(
  ( ! [X308,X310,X309] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X309),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | ~p(s(bool,X310)) | s(bool,X310) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X308),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X309)))) )),
  inference(superposition,[],[f315,f34843])).
fof(f53870,plain,(
  ( ! [X302,X304] : (s(bool,X304) = s(bool,happ(s(fun(sK0,bool),X302),s(sK0,sK3))) | p(s(bool,X304))) ) | $spl96),
  inference(cnf_transformation,[],[f53870_D])).
fof(f53870_D,plain,(
  ( ! [X302,X304] : (s(bool,X304) = s(bool,happ(s(fun(sK0,bool),X302),s(sK0,sK3))) | p(s(bool,X304))) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f53871,plain,(
  ( ! [X306,X305,X307] : (s(bool,X307) = s(bool,happ(s(fun(sK0,bool),X305),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X306),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X307))) )),
  inference(forward_demodulation,[],[f53135,f335])).
fof(f53135,plain,(
  ( ! [X306,X305,X307] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X306),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X307)) | s(bool,X307) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X305),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X306)))) )),
  inference(superposition,[],[f312,f34843])).
fof(f53869,plain,(
  ( ! [X302,X304,X303] : (s(bool,X304) = s(bool,happ(s(fun(sK0,bool),X302),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X303),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X304))) )),
  inference(forward_demodulation,[],[f53134,f335])).
fof(f53134,plain,(
  ( ! [X302,X304,X303] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X303),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | p(s(bool,X304)) | s(bool,X304) = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X302),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X303)))) )),
  inference(superposition,[],[f312,f34843])).
fof(f53867,plain,(
  ( ! [X300,X301] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),X300),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X301),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53133,f335])).
fof(f53133,plain,(
  ( ! [X300,X301] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X301),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'F_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X300),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X301)))) )),
  inference(superposition,[],[f256,f34843])).
fof(f53864,plain,(
  ( ! [X298,X299] : (~p(s(bool,happ(s(fun(sK0,bool),X298),s(sK0,sK3)))) | s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X299),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) )),
  inference(forward_demodulation,[],[f53132,f335])).
fof(f53132,plain,(
  ( ! [X298,X299] : (s(bool,'F_0') != s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X299),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))) | ~p(s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X298),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X299))))) )),
  inference(superposition,[],[f255,f34843])).
fof(f53861,plain,(
  ( ! [X296,X297] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),X296),s(sK0,sK3))) | ~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X297),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53131,f335])).
fof(f53131,plain,(
  ( ! [X296,X297] : (~p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X297),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'T_0') = s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X296),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X297)))) )),
  inference(superposition,[],[f252,f34843])).
fof(f53860,plain,(
  ( ! [X294] : (s(bool,'T_0') != s(bool,happ(s(fun(sK0,bool),X294),s(sK0,sK3)))) ) | $spl84),
  inference(cnf_transformation,[],[f53860_D])).
fof(f53860_D,plain,(
  ( ! [X294] : (s(bool,'T_0') != s(bool,happ(s(fun(sK0,bool),X294),s(sK0,sK3)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f53858,plain,(
  ( ! [X294,X295] : (s(bool,'T_0') != s(bool,happ(s(fun(sK0,bool),X294),s(sK0,sK3))) | p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X295),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1))))) )),
  inference(forward_demodulation,[],[f53130,f335])).
fof(f53130,plain,(
  ( ! [X294,X295] : (p(s(bool,happ(s(fun('type.benchmark.times'(sK0),bool),happ(s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X295),s('type.benchmark.times'(sK0),sK2))),s('type.benchmark.times'(sK0),sK1)))) | s(bool,'T_0') != s(bool,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(sK0),'const.benchmark.Once_1'(s(sK0,sK3))),s(fun(sK0,bool),X294),s(fun('type.benchmark.times'(sK0),fun('type.benchmark.times'(sK0),bool)),X295)))) )),
  inference(superposition,[],[f251,f34843])).
fof(f5713,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | $spl24),
  inference(cnf_transformation,[],[f5713_D])).
fof(f5713_D,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f50078,plain,(
  ( ! [X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'F_0') = s(bool,X77)) ) | $spl80),
  inference(cnf_transformation,[],[f50078_D])).
fof(f50078_D,plain,(
  ( ! [X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'F_0') = s(bool,X77)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f50653,plain,(
  ( ! [X76,X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'T_0') = s(bool,X76) | s(bool,'F_0') = s(bool,X77)) ) | $spl76),
  inference(duplicate_literal_removal,[],[f50426])).
fof(f50426,plain,(
  ( ! [X76,X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'T_0') = s(bool,X76) | s(bool,'F_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X76)) ) | $spl76),
  inference(superposition,[],[f1864,f49091])).
fof(f49091,plain,(
  ( ! [X3] : (s(bool,'const.bool.ARB_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl76),
  inference(trivial_inequality_removal,[],[f49086])).
fof(f49086,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'const.bool.ARB_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl76),
  inference(superposition,[],[f48996,f396])).
fof(f48996,plain,(
  s(bool,'T_0') != s(bool,'const.bool.ARB_0') | $spl76),
  inference(subsumption_resolution,[],[f48885,f248])).
fof(f48885,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.bool.ARB_0') | $spl76),
  inference(superposition,[],[f251,f48853])).
fof(f49970,plain,(
  ( ! [X76,X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'T_0') = s(bool,X76) | s(bool,'F_0') = s(bool,X77)) ) | $spl68),
  inference(duplicate_literal_removal,[],[f49743])).
fof(f49743,plain,(
  ( ! [X76,X77] : (s(bool,'const.bool.ARB_0') != s(bool,X77) | s(bool,'T_0') = s(bool,X76) | s(bool,'F_0') = s(bool,X77) | s(bool,'T_0') = s(bool,X76)) ) | $spl68),
  inference(superposition,[],[f1864,f48847])).
fof(f48870,plain,(
  $false | ($spl64 | $spl76)),
  inference(subsumption_resolution,[],[f48869,f381])).
fof(f48869,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl64 | $spl76)),
  inference(backward_demodulation,[],[f48844,f48853])).
fof(f48853,plain,(
  s(bool,'F_0') = s(bool,'const.bool.ARB_0') | $spl76),
  inference(cnf_transformation,[],[f48853_D])).
fof(f48853_D,plain,(
  s(bool,'F_0') = s(bool,'const.bool.ARB_0') <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f48854,plain,(
  ( ! [X9] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X9))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'F_0') = s(bool,X9)) ) | $spl78),
  inference(cnf_transformation,[],[f48854_D])).
fof(f48854_D,plain,(
  ( ! [X9] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X9))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'F_0') = s(bool,X9)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f48774,plain,(
  ( ! [X10] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X10))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'F_0') = s(bool,X10) | s(bool,'F_0') = s(bool,'const.bool.ARB_0')) )),
  inference(superposition,[],[f311,f1759])).
fof(f48773,plain,(
  ( ! [X9] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X9))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'F_0') = s(bool,'const.bool.ARB_0') | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f311,f1759])).
fof(f48851,plain,(
  ( ! [X7] : (s(bool,'const.bool.ARB_0') = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl74),
  inference(cnf_transformation,[],[f48851_D])).
fof(f48851_D,plain,(
  ( ! [X7] : (s(bool,'const.bool.ARB_0') = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f48846,plain,(
  p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'F_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | $spl66),
  inference(cnf_transformation,[],[f48846_D])).
fof(f48846_D,plain,(
  p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'F_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f48772,plain,(
  ( ! [X8] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'F_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'const.bool.ARB_0') = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f311,f1759])).
fof(f48771,plain,(
  ( ! [X7] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'F_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'const.bool.ARB_0') = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f311,f1759])).
fof(f48847,plain,(
  ( ! [X0] : (s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl68),
  inference(cnf_transformation,[],[f48847_D])).
fof(f48847_D,plain,(
  ( ! [X0] : (s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f48849,plain,(
  p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'T_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | $spl70),
  inference(cnf_transformation,[],[f48849_D])).
fof(f48849_D,plain,(
  p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'T_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f48770,plain,(
  ( ! [X3] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'T_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'const.bool.ARB_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f311,f396])).
fof(f48844,plain,(
  s(bool,'T_0') = s(bool,'const.bool.ARB_0') | $spl64),
  inference(cnf_transformation,[],[f48844_D])).
fof(f48844_D,plain,(
  s(bool,'T_0') = s(bool,'const.bool.ARB_0') <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f48850,plain,(
  ( ! [X1] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X1))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'T_0') = s(bool,X1)) ) | $spl72),
  inference(cnf_transformation,[],[f48850_D])).
fof(f48850_D,plain,(
  ( ! [X1] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X1))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f48769,plain,(
  ( ! [X2] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X2))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'T_0') = s(bool,'const.bool.ARB_0') | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f311,f396])).
fof(f48768,plain,(
  ( ! [X1] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,X1))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,'const.bool.ARB_0')) )),
  inference(superposition,[],[f311,f396])).
fof(f48767,plain,(
  ( ! [X0] : (p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'T_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'const.bool.ARB_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f311,f396])).
fof(f48766,plain,(
  p(s(bool,'const.bool.TYPE_DEFINITION_2'(s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(fun('type.ind_type.recspace'(bool),bool),bool),bool),'!_0'),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'_dst_x0x1_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'!_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11x11_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x01x11_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(fun('type.ind_type.recspace'(bool),bool),'_dst_x0x1_2'(s(fun(fun(bool,bool),bool),'?_0'),s(fun('type.ind_type.recspace'(bool),fun(bool,bool)),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun(bool,'type.ind_type.recspace'(bool)),'_dst_x1x0_2'(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.|48|_0'))),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_dst_x00x11_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x111_2'(s(fun(fun('type.ind_type.recspace'(bool),bool),bool),'?_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)))),'_dst_x0000x0111x1011_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x100x011_3'(s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool)),'=_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool)),happ(s(fun(bool,fun(fun('type.num.num','type.ind_type.recspace'(bool)),'type.ind_type.recspace'(bool))),'const.ind_type.CONSTR_1'(s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))))),s(bool,'F_0'))),s(fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool)))),'_dst_x00x10x01_3'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'),s(fun('type.ind_type.recspace'(bool),fun('type.num.num','type.ind_type.recspace'(bool))),'_dst_x1x0_2'(s(fun('type.ind_type.recspace'(bool),fun(fun('type.num.num','type.ind_type.recspace'(bool)),fun('type.num.num','type.ind_type.recspace'(bool)))),'const.ind_type.FCONS_0'),s(fun('type.num.num','type.ind_type.recspace'(bool)),'_dst_x0_1'(s('type.ind_type.recspace'(bool),'const.ind_type.BOTTOM_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),fun('type.ind_type.recspace'(bool),bool))),'_dst_x000x110x101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))))))))),s(fun(fun('type.ind_type.recspace'(bool),bool),fun('type.ind_type.recspace'(bool),bool)),'_i_0_0'))))),s(fun('type.ind_type.recspace'(bool),fun(fun('type.ind_type.recspace'(bool),bool),bool)),'_dstsel_1_x10_1'(s(fun('type.ind_type.recspace'(bool),'type.ind_type.recspace'(bool)),'_i_0_0'))))))),s(fun('type.benchmark.times'(bool),'type.ind_type.recspace'(bool)),sK7(bool))))) | s(bool,'T_0') = s(bool,'const.bool.ARB_0')),
  inference(superposition,[],[f311,f250])).
fof(f39070,plain,(
  ( ! [X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X75)) ) | $spl62),
  inference(cnf_transformation,[],[f39070_D])).
fof(f39070_D,plain,(
  ( ! [X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X75)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f41142,plain,(
  ( ! [X74,X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,X75)) ) | $spl56),
  inference(duplicate_literal_removal,[],[f40850])).
fof(f40850,plain,(
  ( ! [X74,X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X74)) ) | $spl56),
  inference(superposition,[],[f1864,f37255])).
fof(f37255,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl56),
  inference(trivial_inequality_removal,[],[f37242])).
fof(f37242,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X3) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl56),
  inference(superposition,[],[f37144,f396])).
fof(f37144,plain,(
  s(bool,'T_0') != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl56),
  inference(subsumption_resolution,[],[f37029,f248])).
fof(f37029,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl56),
  inference(superposition,[],[f251,f36768])).
fof(f38990,plain,(
  ( ! [X74,X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,X75)) ) | $spl50),
  inference(duplicate_literal_removal,[],[f38706])).
fof(f38706,plain,(
  ( ! [X74,X75] : (s(bool,X75) != s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X74) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X74)) ) | $spl50),
  inference(superposition,[],[f1864,f36762])).
fof(f36791,plain,(
  $false | ($spl46 | $spl56)),
  inference(subsumption_resolution,[],[f36790,f381])).
fof(f36790,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl46 | $spl56)),
  inference(backward_demodulation,[],[f36759,f36768])).
fof(f36768,plain,(
  s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl56),
  inference(cnf_transformation,[],[f36768_D])).
fof(f36768_D,plain,(
  s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f36764,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | $spl52),
  inference(cnf_transformation,[],[f36764_D])).
fof(f36764_D,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f36777,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl36),
  inference(forward_demodulation,[],[f36692,f28812])).
fof(f28812,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | $spl36),
  inference(unit_resulting_resolution,[],[f381,f28763,f1150])).
fof(f28763,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl36),
  inference(forward_demodulation,[],[f28762,f290])).
fof(f28762,plain,(
  p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl36),
  inference(subsumption_resolution,[],[f28761,f246])).
fof(f28761,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl36),
  inference(forward_demodulation,[],[f28750,f290])).
fof(f28750,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | $spl36),
  inference(condensation,[],[f28704])).
fof(f28704,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool)))))) ) | $spl36),
  inference(superposition,[],[f301,f20392])).
fof(f20392,plain,(
  s(bool,'T_0') = s(bool,sK5('_i_0_0','_i_0_0',bool)) | $spl36),
  inference(unit_resulting_resolution,[],[f381,f20365,f1150])).
fof(f36692,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl36),
  inference(superposition,[],[f34030,f28868])).
fof(f28868,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X7)) ) | $spl36),
  inference(subsumption_resolution,[],[f28820,f248])).
fof(f28820,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,sK6('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X7)) ) | $spl36),
  inference(superposition,[],[f28763,f1759])).
fof(f36759,plain,(
  s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl46),
  inference(cnf_transformation,[],[f36759_D])).
fof(f36759_D,plain,(
  s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f36761,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | $spl48),
  inference(cnf_transformation,[],[f36761_D])).
fof(f36761_D,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f36776,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | ($spl4 | $spl18)),
  inference(forward_demodulation,[],[f36691,f25628])).
fof(f36691,plain,(
  ( ! [X11] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK4(X11,'_i_0_0',bool))))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))) ) | $spl4),
  inference(superposition,[],[f34030,f25640])).
fof(f25640,plain,(
  ( ! [X2,X1] : (s(bool,X2) = s(bool,sK4(X1,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(subsumption_resolution,[],[f25611,f246])).
fof(f25611,plain,(
  ( ! [X2,X1] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,sK4(X1,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X2)) ) | $spl4),
  inference(superposition,[],[f1178,f396])).
fof(f36775,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl2),
  inference(forward_demodulation,[],[f36690,f23936])).
fof(f23936,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f381,f1176,f1150])).
fof(f36690,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl2),
  inference(superposition,[],[f34030,f23974])).
fof(f23974,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X8)) ) | $spl2),
  inference(subsumption_resolution,[],[f23945,f248])).
fof(f23945,plain,(
  ( ! [X8] : (p(s(bool,'F_0')) | s(bool,X8) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X8)) ) | $spl2),
  inference(superposition,[],[f1176,f1759])).
fof(f36774,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl32),
  inference(forward_demodulation,[],[f36689,f20964])).
fof(f36689,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK5('_i_0_0','_dst_x0_1'(s(bool,'F_0')),bool))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl32),
  inference(superposition,[],[f34030,f21125])).
fof(f36773,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl36),
  inference(forward_demodulation,[],[f36688,f20392])).
fof(f36688,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK5('_i_0_0','_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl36),
  inference(superposition,[],[f34030,f20424])).
fof(f20424,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X7)) ) | $spl36),
  inference(subsumption_resolution,[],[f20400,f248])).
fof(f20400,plain,(
  ( ! [X7] : (p(s(bool,'F_0')) | s(bool,X7) = s(bool,sK5('_i_0_0','_i_0_0',bool)) | s(bool,'F_0') = s(bool,X7)) ) | $spl36),
  inference(superposition,[],[f20365,f1759])).
fof(f36772,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl18),
  inference(forward_demodulation,[],[f36687,f5317])).
fof(f36687,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK8('_i_0_0',bool))))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl18),
  inference(superposition,[],[f34030,f9456])).
fof(f9456,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(subsumption_resolution,[],[f9410,f381])).
fof(f9410,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f5317,f396])).
fof(f36771,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl14),
  inference(forward_demodulation,[],[f36686,f5537])).
fof(f5537,plain,(
  s(bool,'T_0') = s(bool,sK9('_i_0_0',bool)) | $spl14),
  inference(unit_resulting_resolution,[],[f381,f5517,f1150])).
fof(f5517,plain,(
  p(s(bool,sK9('_i_0_0',bool))) | $spl14),
  inference(forward_demodulation,[],[f5516,f290])).
fof(f5516,plain,(
  p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK9('_i_0_0',bool))))) | $spl14),
  inference(subsumption_resolution,[],[f5499,f246])).
fof(f5499,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK9('_i_0_0',bool))))) | $spl14),
  inference(superposition,[],[f318,f4055])).
fof(f36686,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,sK9('_i_0_0',bool))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | $spl14),
  inference(superposition,[],[f34030,f5565])).
fof(f5565,plain,(
  ( ! [X6] : (s(bool,X6) = s(bool,sK9('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl14),
  inference(subsumption_resolution,[],[f5544,f248])).
fof(f5544,plain,(
  ( ! [X6] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,sK9('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl14),
  inference(superposition,[],[f5517,f1759])).
fof(f36770,plain,(
  ( ! [X9] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X9)))) | s(bool,'F_0') = s(bool,X9)) ) | $spl60),
  inference(cnf_transformation,[],[f36770_D])).
fof(f36770_D,plain,(
  ( ! [X9] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X9)))) | s(bool,'F_0') = s(bool,X9)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f36685,plain,(
  ( ! [X10] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X10)))) | s(bool,'F_0') = s(bool,X10) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f34030,f1759])).
fof(f36684,plain,(
  ( ! [X9] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X9)))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X9)) )),
  inference(superposition,[],[f34030,f1759])).
fof(f36769,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X7)) ) | $spl58),
  inference(cnf_transformation,[],[f36769_D])).
fof(f36769_D,plain,(
  ( ! [X7] : (s(bool,X7) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X7)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f36683,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X8)) )),
  inference(superposition,[],[f34030,f1759])).
fof(f36682,plain,(
  ( ! [X7] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,X7) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'F_0') = s(bool,X7)) )),
  inference(superposition,[],[f34030,f1759])).
fof(f36766,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))),
  inference(forward_demodulation,[],[f36681,f289])).
fof(f36681,plain,(
  ( ! [X6,X5] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'const.bool.DATATYPE_1'(s(X5,X6)))))) | s(bool,'F_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f34030,f1677])).
fof(f36762,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl50),
  inference(cnf_transformation,[],[f36762_D])).
fof(f36762_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f36680,plain,(
  ( ! [X3] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,X3) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f34030,f396])).
fof(f36765,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) | $spl54),
  inference(cnf_transformation,[],[f36765_D])).
fof(f36765_D,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f36679,plain,(
  ( ! [X2] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f34030,f396])).
fof(f36678,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,X1)))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))) )),
  inference(superposition,[],[f34030,f396])).
fof(f36677,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'T_0')))) | s(bool,X0) = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f34030,f396])).
fof(f36676,plain,(
  p(s(bool,happ(s(fun(bool,bool),sK9('?_1',fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK9(sK9('?_1',fun(bool,bool)),bool))),
  inference(superposition,[],[f34030,f250])).
fof(f4039,plain,(
  ( ! [X44] : (~p(s(bool,X44))) ) | $spl16),
  inference(cnf_transformation,[],[f4039_D])).
fof(f4039_D,plain,(
  ( ! [X44] : (~p(s(bool,X44))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f20378,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | $spl38),
  inference(cnf_transformation,[],[f20378_D])).
fof(f20378_D,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f28760,plain,(
  ( ! [X0] : (p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | ~p(s(bool,X0))) ) | $spl36),
  inference(forward_demodulation,[],[f28759,f290])).
fof(f28759,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool)))))) ) | $spl36),
  inference(subsumption_resolution,[],[f28758,f255])).
fof(f28758,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl36),
  inference(forward_demodulation,[],[f28751,f290])).
fof(f28751,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl36),
  inference(condensation,[],[f28703])).
fof(f28703,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0)))) | ~p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X1)))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK6('_i_0_0','_i_0_0',bool))))) | s(bool,'F_0') = s(bool,X0)) ) | $spl36),
  inference(superposition,[],[f301,f20424])).
fof(f25456,plain,(
  ( ! [X103,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'F_0') = s(bool,X103)) ) | $spl44),
  inference(cnf_transformation,[],[f25456_D])).
fof(f25456_D,plain,(
  ( ! [X103,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'F_0') = s(bool,X103)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f26270,plain,(
  ( ! [X103,X101,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,X103)) ) | $spl4),
  inference(duplicate_literal_removal,[],[f26058])).
fof(f26058,plain,(
  ( ! [X103,X101,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,X103) | s(bool,'T_0') = s(bool,X101)) ) | $spl4),
  inference(superposition,[],[f1864,f25640])).
fof(f25389,plain,(
  ( ! [X103,X101,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,X103)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f25180])).
fof(f25180,plain,(
  ( ! [X103,X101,X102] : (s(bool,X103) != s(bool,sK4(X102,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X101) | s(bool,'F_0') = s(bool,X103) | s(bool,'T_0') = s(bool,X101)) ) | $spl0),
  inference(superposition,[],[f1864,f24338])).
fof(f24338,plain,(
  ( ! [X2,X3] : (s(bool,X3) = s(bool,sK4(X2,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(subsumption_resolution,[],[f24234,f381])).
fof(f24234,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X3) = s(bool,sK4(X2,'_i_0_0',bool)) | s(bool,'T_0') = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1174,f396])).
fof(f1176,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | $spl2),
  inference(cnf_transformation,[],[f1176_D])).
fof(f1176_D,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f1178,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool)))) ) | $spl4),
  inference(cnf_transformation,[],[f1178_D])).
fof(f1178_D,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1586,plain,(
  ( ! [X19] : (~p(s(bool,sK4(X19,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f299,f290])).
fof(f1174,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) ) | $spl0),
  inference(cnf_transformation,[],[f1174_D])).
fof(f1174_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f3203,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f3133,f246])).
fof(f3133,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f299,f429])).
fof(f4031,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f4031_D])).
fof(f4031_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f3515,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f3490,f246])).
fof(f3490,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f3449,f429])).
fof(f3502,plain,(
  ( ! [X44] : (~p(s(bool,X44)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f3449,f290])).
fof(f6649,plain,(
  ( ! [X35] : (~p(s(bool,sK4(X35,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f299,f290])).
fof(f8822,plain,(
  ( ! [X49] : (~p(s(bool,X49)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f3449,f290])).
fof(f9932,plain,(
  ( ! [X38] : (~p(s(bool,sK4(X38,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f299,f290])).
fof(f11503,plain,(
  ( ! [X49] : (~p(s(bool,X49)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f3449,f290])).
fof(f12156,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f12071,f246])).
fof(f12071,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f299,f429])).
fof(f12158,plain,(
  ( ! [X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f12072,f246])).
fof(f12072,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f3449,f429])).
fof(f19886,plain,(
  ( ! [X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X1,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f19860,f246])).
fof(f19860,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X1,'_i_0_0',bool))) )),
  inference(superposition,[],[f299,f429])).
fof(f19876,plain,(
  ( ! [X58] : (~p(s(bool,sK4(X58,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f299,f290])).
fof(f20129,plain,(
  ( ! [X1] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(subsumption_resolution,[],[f20092,f246])).
fof(f20092,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f3449,f429])).
fof(f20108,plain,(
  ( ! [X58] : (~p(s(bool,X58)) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f3449,f290])).
fof(f23795,plain,(
  ( ! [X69] : (s(bool,X69) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X69)) ) | $spl42),
  inference(cnf_transformation,[],[f23795_D])).
fof(f23795_D,plain,(
  ( ! [X69] : (s(bool,X69) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X69)) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f23735,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,X69)) ) | ($spl2 | $spl18 | $spl21)),
  inference(duplicate_literal_removal,[],[f23535])).
fof(f23535,plain,(
  ( ! [X68,X69] : (s(bool,X69) != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X68) | s(bool,'F_0') = s(bool,X69) | s(bool,'T_0') = s(bool,X68)) ) | ($spl2 | $spl18 | $spl21)),
  inference(superposition,[],[f1864,f18664])).
fof(f18664,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl18 | $spl21)),
  inference(trivial_inequality_removal,[],[f18649])).
fof(f18649,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X0) = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl2 | $spl18 | $spl21)),
  inference(superposition,[],[f18567,f396])).
fof(f18567,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | ($spl2 | $spl18 | $spl21)),
  inference(forward_demodulation,[],[f18483,f9689])).
fof(f18483,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))) | ($spl2 | $spl21)),
  inference(unit_resulting_resolution,[],[f9672,f16954])).
fof(f16954,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(subsumption_resolution,[],[f16853,f248])).
fof(f16853,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X5))) | s(bool,'T_0') = s(bool,X5)) ) | $spl2),
  inference(superposition,[],[f251,f2123])).
fof(f2123,plain,(
  ( ! [X23] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X23))) | s(bool,'T_0') = s(bool,X23)) ) | $spl2),
  inference(forward_demodulation,[],[f2009,f1188])).
fof(f1188,plain,(
  s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | $spl2),
  inference(unit_resulting_resolution,[],[f1176,f252])).
fof(f2009,plain,(
  ( ! [X23] : (s(bool,X23) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X23)))) ) | $spl2),
  inference(superposition,[],[f1675,f290])).
fof(f1675,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X22)) ) | $spl2),
  inference(subsumption_resolution,[],[f1663,f246])).
fof(f1663,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | s(bool,X22) = s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X22)) ) | $spl2),
  inference(superposition,[],[f1150,f1188])).
fof(f1290,plain,(
  ( ! [X6] : (p(s(bool,X6))) ) | $spl6),
  inference(cnf_transformation,[],[f1290_D])).
fof(f1290_D,plain,(
  ( ! [X6] : (p(s(bool,X6))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f23776,plain,(
  ( ! [X18] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X18),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0'))))) ) | $spl40),
  inference(cnf_transformation,[],[f23776_D])).
fof(f23776_D,plain,(
  ( ! [X18] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X18),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0'))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f23775,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X18),s(fun(bool,bool),'_i_0_0'))),s(bool,'F_0')))) | p(s(bool,X17))) ) | ($spl2 | $spl18 | $spl21)),
  inference(forward_demodulation,[],[f23774,f359])).
fof(f23774,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X18))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | p(s(bool,X17))) ) | ($spl2 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f23509,f251])).
fof(f23509,plain,(
  ( ! [X17,X18] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X18))),s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0')))))) | p(s(bool,X17)) | s(bool,'T_0') = s(bool,X17)) ) | ($spl2 | $spl18 | $spl21)),
  inference(superposition,[],[f321,f18664])).
fof(f20365,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | $spl36),
  inference(cnf_transformation,[],[f20365_D])).
fof(f20365_D,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f20352,plain,(
  p(s(bool,sK6('_i_0_0','_i_0_0',bool))) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | $spl32),
  inference(superposition,[],[f18814,f290])).
fof(f20363,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | $spl34),
  inference(cnf_transformation,[],[f20363_D])).
fof(f20363_D,plain,(
  s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f20361,plain,(
  p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl2 | $spl32)),
  inference(subsumption_resolution,[],[f20335,f248])).
fof(f20335,plain,(
  p(s(bool,'F_0')) | p(s(bool,sK5('_i_0_0','_i_0_0',bool))) | s(bool,'T_0') = s(bool,sK6('_i_0_0','_i_0_0',bool)) | ($spl2 | $spl32)),
  inference(superposition,[],[f18814,f2123])).
fof(f19661,plain,(
  $false | ($spl12 | $spl32)),
  inference(subsumption_resolution,[],[f19660,f248])).
fof(f19660,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl32)),
  inference(forward_demodulation,[],[f19659,f4031])).
fof(f19659,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool)))))) ) | ($spl12 | $spl32)),
  inference(subsumption_resolution,[],[f19658,f248])).
fof(f19658,plain,(
  ( ! [X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool)))))) ) | ($spl12 | $spl32)),
  inference(forward_demodulation,[],[f18814,f4031])).
fof(f19657,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f18830,f248])).
fof(f18830,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f4825])).
fof(f19656,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f18831,f248])).
fof(f18831,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f4831])).
fof(f19651,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628,f19640,f19644,f19646,f19648,f19650])).
fof(f19650,plain,(
  ( ! [X6,X4,X3] : (s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) ) | $spl12),
  inference(subsumption_resolution,[],[f18841,f248])).
fof(f18841,plain,(
  ( ! [X6,X4,X3] : (p(s(bool,'F_0')) | s(bool,X6) = s(bool,happ(s(fun(fun(X3,bool),bool),'!_1'),s(fun(X3,bool),X4))) | s(bool,'T_0') = s(bool,X6)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3799])).
fof(f19648,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2)) ) | $spl12),
  inference(subsumption_resolution,[],[f18876,f248])).
fof(f18876,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X1) != s(X0,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f338])).
fof(f19646,plain,(
  ( ! [X90,X88,X87,X89] : (s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) ) | $spl12),
  inference(subsumption_resolution,[],[f18879,f248])).
fof(f18879,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,'F_0')) | s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4744])).
fof(f19644,plain,(
  ( ! [X90,X88,X87,X89] : (s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) ) | $spl12),
  inference(subsumption_resolution,[],[f18880,f248])).
fof(f18880,plain,(
  ( ! [X90,X88,X87,X89] : (p(s(bool,'F_0')) | s(X87,X90) != s(X87,sK4(X88,X89,X87)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(X87,bool),X89)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4776])).
fof(f19640,plain,(
  ( ! [X239,X237,X235,X238,X236] : (s(bool,'T_0') != s(bool,happ(s(fun(X235,bool),X236),s(X235,happ(s(fun(X237,X235),X238),s(X237,X239)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f18888,f248])).
fof(f18888,plain,(
  ( ! [X239,X237,X235,X238,X236] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,happ(s(fun(X235,bool),X236),s(X235,happ(s(fun(X237,X235),X238),s(X237,X239)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17822])).
fof(f19628,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (s(bool,X391) = s(bool,happ(s(fun(X386,bool),X387),s(X386,happ(s(fun(X388,X386),X389),s(X388,X390))))) | s(bool,'T_0') = s(bool,X391)) ) | $spl12),
  inference(subsumption_resolution,[],[f18906,f248])).
fof(f18906,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (p(s(bool,'F_0')) | s(bool,X391) = s(bool,happ(s(fun(X386,bool),X387),s(X386,happ(s(fun(X388,X386),X389),s(X388,X390))))) | s(bool,'T_0') = s(bool,X391)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17848])).
fof(f19592,plain,(
  ( ! [X198,X202,X200,X199,X201] : (s(X198,X199) != s(X198,happ(s(fun(X200,X198),X201),s(X200,X202)))) ) | $spl12),
  inference(subsumption_resolution,[],[f18936,f248])).
fof(f18936,plain,(
  ( ! [X198,X202,X200,X199,X201] : (p(s(bool,'F_0')) | s(X198,X199) != s(X198,happ(s(fun(X200,X198),X201),s(X200,X202)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17819])).
fof(f19590,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (s(X138,X144) != s(X138,happ(s(fun(X139,X138),X140),s(X139,happ(s(fun(X141,X139),X142),s(X141,X143)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f18939,f248])).
fof(f18939,plain,(
  ( ! [X144,X142,X140,X138,X143,X141,X139] : (p(s(bool,'F_0')) | s(X138,X144) != s(X138,happ(s(fun(X139,X138),X140),s(X139,happ(s(fun(X141,X139),X142),s(X141,X143)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17809])).
fof(f19586,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (s(X122,X128) != s(X122,happ(s(fun(X123,X122),'_dst_x0x1_2'(s(fun(X124,X122),X125),s(fun(X123,X124),X126))),s(X123,X127)))) ) | $spl12),
  inference(subsumption_resolution,[],[f18945,f248])).
fof(f18945,plain,(
  ( ! [X127,X125,X123,X128,X126,X124,X122] : (p(s(bool,'F_0')) | s(X122,X128) != s(X122,happ(s(fun(X123,X122),'_dst_x0x1_2'(s(fun(X124,X122),X125),s(fun(X123,X124),X126))),s(X123,X127)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17932])).
fof(f19580,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (s(X145,X151) != s(X145,happ(s(fun(X146,X145),X147),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f18953,f248])).
fof(f18953,plain,(
  ( ! [X146,X151,X149,X147,X145,X150,X148] : (p(s(bool,'F_0')) | s(X145,X151) != s(X145,happ(s(fun(X146,X145),X147),s(X146,happ(s(fun(X148,X146),X149),s(X148,X150)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17810])).
fof(f19578,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (s(X129,X135) != s(X129,happ(s(fun(X130,X129),'_dst_x0x1_2'(s(fun(X131,X129),X132),s(fun(X130,X131),X133))),s(X130,X134)))) ) | $spl12),
  inference(subsumption_resolution,[],[f18955,f248])).
fof(f18955,plain,(
  ( ! [X134,X132,X130,X135,X133,X131,X129] : (p(s(bool,'F_0')) | s(X129,X135) != s(X129,happ(s(fun(X130,X129),'_dst_x0x1_2'(s(fun(X131,X129),X132),s(fun(X130,X131),X133))),s(X130,X134)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17933])).
fof(f19574,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f18988,f248])).
fof(f18988,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f5518])).
fof(f19552,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl12),
  inference(subsumption_resolution,[],[f19008,f248])).
fof(f19008,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'F_0')) | s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4716])).
fof(f19550,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl12),
  inference(subsumption_resolution,[],[f19009,f248])).
fof(f19009,plain,(
  ( ! [X61,X59,X60,X58] : (p(s(bool,'F_0')) | s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4736])).
fof(f19548,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f19015,f248])).
fof(f19015,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4715])).
fof(f19544,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19286,f248])).
fof(f19286,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19018])).
fof(f19018,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f13948])).
fof(f19541,plain,(
  ( ! [X1] : (~p(s(bool,X1))) ) | $spl12),
  inference(subsumption_resolution,[],[f19024,f248])).
fof(f19024,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | ~p(s(bool,X1))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f328])).
fof(f19539,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19025,f248])).
fof(f19025,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3293])).
fof(f19537,plain,(
  ( ! [X88] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | $spl12),
  inference(subsumption_resolution,[],[f19536,f248])).
fof(f19536,plain,(
  ( ! [X88] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | $spl12),
  inference(forward_demodulation,[],[f19535,f4031])).
fof(f19535,plain,(
  ( ! [X88,X87] : (p(s(bool,sK4(X87,X88,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | $spl12),
  inference(subsumption_resolution,[],[f19029,f248])).
fof(f19029,plain,(
  ( ! [X88,X87] : (p(s(bool,'F_0')) | p(s(bool,sK4(X87,X88,bool))) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3362])).
fof(f19533,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19278,f248])).
fof(f19278,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19030])).
fof(f19030,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3551])).
fof(f19531,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f19035,f248])).
fof(f19035,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | ~p(s(bool,X0))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f324])).
fof(f19529,plain,(
  ( ! [X1] : (~p(s(bool,X1))) ) | $spl12),
  inference(subsumption_resolution,[],[f19036,f248])).
fof(f19036,plain,(
  ( ! [X1] : (p(s(bool,'F_0')) | ~p(s(bool,X1))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f325])).
fof(f19527,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19275,f248])).
fof(f19275,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19037])).
fof(f19037,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f2240])).
fof(f19525,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19274,f248])).
fof(f19274,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19039])).
fof(f19039,plain,(
  ( ! [X4,X2] : (p(s(bool,'F_0')) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3015])).
fof(f19523,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f19260,f248])).
fof(f19260,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0')) | s(bool,X0) != s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19054])).
fof(f19054,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4717])).
fof(f19521,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f19258,f248])).
fof(f19258,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19056])).
fof(f19056,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4726])).
fof(f19519,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(subsumption_resolution,[],[f19518,f4031])).
fof(f19518,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(subsumption_resolution,[],[f19058,f248])).
fof(f19058,plain,(
  ( ! [X48,X49] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4730])).
fof(f19516,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f19256,f248])).
fof(f19256,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0')) | s(bool,X0) != s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19059])).
fof(f19059,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | s(bool,X9) != s(bool,X11) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4749])).
fof(f19514,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1)) ) | $spl12),
  inference(subsumption_resolution,[],[f19254,f248])).
fof(f19254,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X1)) ) | $spl12),
  inference(condensation,[],[f19061])).
fof(f19061,plain,(
  ( ! [X37,X38,X36] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,X37) | s(bool,X36) = s(bool,X38) | s(bool,'T_0') = s(bool,X38)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4758])).
fof(f19512,plain,(
  ( ! [X48] : (s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(subsumption_resolution,[],[f19511,f4031])).
fof(f19511,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(subsumption_resolution,[],[f19063,f248])).
fof(f19063,plain,(
  ( ! [X48,X49] : (p(s(bool,'F_0')) | s(bool,'F_0') != s(bool,X49) | s(bool,'T_0') = s(bool,X48)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4762])).
fof(f19509,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f19252,f248])).
fof(f19252,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19068])).
fof(f19068,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,X0)) | ~p(s(bool,X1))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f322])).
fof(f19507,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1))) ) | $spl12),
  inference(subsumption_resolution,[],[f19249,f248])).
fof(f19249,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0')) | ~p(s(bool,X1))) ) | $spl12),
  inference(condensation,[],[f19077])).
fof(f19077,plain,(
  ( ! [X4,X2,X3] : (p(s(bool,'F_0')) | ~p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f5708])).
fof(f19505,plain,(
  ( ! [X58] : (~p(s(bool,X58))) ) | $spl12),
  inference(subsumption_resolution,[],[f19080,f248])).
fof(f19080,plain,(
  ( ! [X58] : (p(s(bool,'F_0')) | ~p(s(bool,X58))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3030])).
fof(f19503,plain,(
  ( ! [X64] : (~p(s(bool,X64))) ) | $spl12),
  inference(subsumption_resolution,[],[f19082,f248])).
fof(f19082,plain,(
  ( ! [X64] : (p(s(bool,'F_0')) | ~p(s(bool,X64))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3569])).
fof(f19495,plain,(
  ( ! [X58,X56,X55] : (s(X55,X58) = s(X55,sK4(X58,X56,X55))) ) | $spl12),
  inference(subsumption_resolution,[],[f19089,f248])).
fof(f19089,plain,(
  ( ! [X58,X56,X55] : (p(s(bool,'F_0')) | s(X55,X58) = s(X55,sK4(X58,X56,X55))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3451])).
fof(f19493,plain,(
  ( ! [X59,X57,X58,X56] : (~p(s(bool,X58)) | s(X56,X59) = s(X56,sK4(X59,X57,X56))) ) | $spl12),
  inference(subsumption_resolution,[],[f19091,f248])).
fof(f19091,plain,(
  ( ! [X59,X57,X58,X56] : (p(s(bool,'F_0')) | ~p(s(bool,X58)) | s(X56,X59) = s(X56,sK4(X59,X57,X56))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f5728])).
fof(f19489,plain,(
  ( ! [X6,X8,X7] : (s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl12),
  inference(subsumption_resolution,[],[f19103,f248])).
fof(f19103,plain,(
  ( ! [X6,X8,X7] : (p(s(bool,'F_0')) | s(bool,X6) != s(bool,X7) | s(bool,X6) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4748])).
fof(f19487,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl12),
  inference(subsumption_resolution,[],[f19104,f248])).
fof(f19104,plain,(
  ( ! [X61,X59,X60,X58] : (p(s(bool,'F_0')) | s(bool,X60) != s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4768])).
fof(f19479,plain,(
  ( ! [X4,X5] : (s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(subsumption_resolution,[],[f19121,f248])).
fof(f19121,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | s(bool,X4) != s(bool,X5) | s(bool,'T_0') = s(bool,X4)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4747])).
fof(f19477,plain,(
  ( ! [X59,X62,X60] : (s(X59,X62) = s(X59,sK4(X62,X60,X59))) ) | $spl12),
  inference(subsumption_resolution,[],[f19131,f248])).
fof(f19131,plain,(
  ( ! [X59,X62,X60] : (p(s(bool,'F_0')) | s(X59,X62) = s(X59,sK4(X62,X60,X59))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3452])).
fof(f19475,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK4(X56,X54,X53))) ) | $spl12),
  inference(subsumption_resolution,[],[f19132,f248])).
fof(f19132,plain,(
  ( ! [X54,X56,X53] : (p(s(bool,'F_0')) | s(X53,X56) = s(X53,sK4(X56,X54,X53))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3564])).
fof(f19458,plain,(
  ( ! [X46] : (~p(s(bool,X46))) ) | $spl12),
  inference(subsumption_resolution,[],[f19151,f248])).
fof(f19151,plain,(
  ( ! [X46] : (p(s(bool,'F_0')) | ~p(s(bool,X46))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4018])).
fof(f19456,plain,(
  ( ! [X35] : (~p(s(bool,X35))) ) | $spl12),
  inference(subsumption_resolution,[],[f19152,f248])).
fof(f19152,plain,(
  ( ! [X35] : (p(s(bool,'F_0')) | ~p(s(bool,X35))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f5307])).
fof(f19447,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) != s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl12),
  inference(subsumption_resolution,[],[f19172,f248])).
fof(f19172,plain,(
  ( ! [X85,X86,X84,X82] : (p(s(bool,'F_0')) | s(X82,X86) != s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4865])).
fof(f19445,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f19174,f248])).
fof(f19174,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,'F_0')) | s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X73,'type.num.num'),X74),s('type.benchmark.times'(X73),'const.benchmark.Once_1'(s(X73,X75)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17608])).
fof(f19443,plain,(
  ( ! [X76,X74,X75,X73] : (s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f19176,f248])).
fof(f19176,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,'F_0')) | s('type.num.num',X76) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X73,'type.num.num'),X74),s(X73,X75)))))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17614])).
fof(f19439,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79)))))) ) | $spl12),
  inference(subsumption_resolution,[],[f19180,f248])).
fof(f19180,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,'F_0')) | s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun(X77,'type.num.num'),X78),s('type.benchmark.times'(X77),'const.benchmark.Once_1'(s(X77,X79)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17609])).
fof(f19437,plain,(
  ( ! [X80,X78,X79,X77] : (s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79)))))))) ) | $spl12),
  inference(subsumption_resolution,[],[f19182,f248])).
fof(f19182,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,'F_0')) | s('type.num.num',X80) != s('type.num.num','const.benchmark.times_size_2'(s(fun('type.num.num','type.num.num'),'_i_0_0'),s('type.benchmark.times'('type.num.num'),'const.benchmark.Once_1'(s('type.num.num',happ(s(fun(X77,'type.num.num'),X78),s(X77,X79)))))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17615])).
fof(f19435,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,X1,X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f19184,f248])).
fof(f19184,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK4(X2,X1,X0))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f298])).
fof(f19433,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | $spl12),
  inference(subsumption_resolution,[],[f19185,f248])).
fof(f19185,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f558])).
fof(f19431,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X3,X7) = s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | $spl12),
  inference(subsumption_resolution,[],[f19186,f248])).
fof(f19186,plain,(
  ( ! [X6,X4,X7,X5,X3] : (p(s(bool,'F_0')) | s(X3,X7) = s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f559])).
fof(f19429,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X11) = s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | $spl12),
  inference(subsumption_resolution,[],[f19187,f248])).
fof(f19187,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,'F_0')) | s(X8,X11) = s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f560])).
fof(f19194,plain,(
  ( ! [X173,X171,X174,X172] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'F_0'))) = s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X173))) | s(bool,'T_0') != s(bool,X173) | s(X171,X174) = s(X171,sK4(X174,X172,X171))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3433])).
fof(f19424,plain,(
  ( ! [X103,X106,X104] : (s(X103,X106) = s(X103,sK4(X106,X104,X103))) ) | $spl12),
  inference(subsumption_resolution,[],[f19423,f248])).
fof(f19423,plain,(
  ( ! [X103,X106,X104] : (p(s(bool,'F_0')) | s(X103,X106) = s(X103,sK4(X106,X104,X103))) ) | $spl12),
  inference(forward_demodulation,[],[f19196,f4031])).
fof(f19196,plain,(
  ( ! [X103,X105,X106,X104] : (p(s(bool,'|dollar|exists_1'(s(fun(X105,bool),'_dst_x0_1'(s(bool,'F_0')))))) | s(X103,X106) = s(X103,sK4(X106,X104,X103))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3454])).
fof(f19420,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s(X245,X249) = s(X245,sK4(X249,'const.ind_type.FCONS_3'(s(fun(X245,bool),X246),s(fun('type.num.num',fun(X245,bool)),X247),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248)))),X245))) ) | $spl12),
  inference(subsumption_resolution,[],[f19198,f248])).
fof(f19198,plain,(
  ( ! [X249,X246,X248,X247,X245] : (p(s(bool,'F_0')) | s(X245,X249) = s(X245,sK4(X249,'const.ind_type.FCONS_3'(s(fun(X245,bool),X246),s(fun('type.num.num',fun(X245,bool)),X247),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248)))),X245))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f4244])).
fof(f19418,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (s(X400,X405) = s(X400,sK4(X405,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X401),'const.benchmark.Once_1'(s(X401,X402))),s(fun(X401,fun(X400,bool)),X403),s(fun('type.benchmark.times'(X401),fun('type.benchmark.times'(X401),fun(X400,bool))),X404)),X400))) ) | $spl12),
  inference(subsumption_resolution,[],[f19201,f248])).
fof(f19201,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (p(s(bool,'F_0')) | s(X400,X405) = s(X400,sK4(X405,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X401),'const.benchmark.Once_1'(s(X401,X402))),s(fun(X401,fun(X400,bool)),X403),s(fun('type.benchmark.times'(X401),fun('type.benchmark.times'(X401),fun(X400,bool))),X404)),X400))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17321])).
fof(f19416,plain,(
  ( ! [X313,X315,X312,X314,X311] : (s(X311,X315) = s(X311,sK4(X315,happ(s(fun(fun(X312,fun(X311,bool)),fun(X311,bool)),'_dstsel_0_x0_1'(s(X312,X313))),s(fun(X312,fun(X311,bool)),X314)),X311))) ) | $spl12),
  inference(subsumption_resolution,[],[f19203,f248])).
fof(f19203,plain,(
  ( ! [X313,X315,X312,X314,X311] : (p(s(bool,'F_0')) | s(X311,X315) = s(X311,sK4(X315,happ(s(fun(fun(X312,fun(X311,bool)),fun(X311,bool)),'_dstsel_0_x0_1'(s(X312,X313))),s(fun(X312,fun(X311,bool)),X314)),X311))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f16146])).
fof(f19414,plain,(
  ( ! [X528,X524,X526,X522,X525,X527,X523] : (s(X522,X528) = s(X522,sK4(X528,happ(s(fun(X523,fun(X522,bool)),'_dst_x0x1_2'(s(fun(X524,fun(X522,bool)),X525),s(fun(X523,X524),X526))),s(X523,X527)),X522))) ) | $spl12),
  inference(subsumption_resolution,[],[f19204,f248])).
fof(f19204,plain,(
  ( ! [X528,X524,X526,X522,X525,X527,X523] : (p(s(bool,'F_0')) | s(X522,X528) = s(X522,sK4(X528,happ(s(fun(X523,fun(X522,bool)),'_dst_x0x1_2'(s(fun(X524,fun(X522,bool)),X525),s(fun(X523,X524),X526))),s(X523,X527)),X522))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f18000])).
fof(f19412,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (s(X600,X606) = s(X600,sK4(X606,happ(s(fun(X601,fun(X600,bool)),X602),s(X601,happ(s(fun(X603,X601),X604),s(X603,X605)))),X600))) ) | $spl12),
  inference(subsumption_resolution,[],[f19205,f248])).
fof(f19205,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (p(s(bool,'F_0')) | s(X600,X606) = s(X600,sK4(X606,happ(s(fun(X601,fun(X600,bool)),X602),s(X601,happ(s(fun(X603,X601),X604),s(X603,X605)))),X600))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17879])).
fof(f19410,plain,(
  ( ! [X22] : (~p(s(bool,X22))) ) | $spl12),
  inference(subsumption_resolution,[],[f19206,f248])).
fof(f19206,plain,(
  ( ! [X22] : (p(s(bool,'F_0')) | ~p(s(bool,X22))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f1169])).
fof(f19408,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19236,f248])).
fof(f19236,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19207])).
fof(f19207,plain,(
  ( ! [X2,X0] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f1527])).
fof(f19404,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(subsumption_resolution,[],[f19234,f248])).
fof(f19234,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,'F_0'))) ) | $spl12),
  inference(condensation,[],[f19226])).
fof(f19226,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f14014])).
fof(f19306,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,g(s(X0,sK11(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | $spl12),
  inference(condensation,[],[f19305])).
fof(f19305,plain,(
  ( ! [X10,X8,X7,X9] : (s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK11(X8,X9,bool,X7))))) ) | $spl12),
  inference(subsumption_resolution,[],[f18827,f250])).
fof(f18827,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'F_0') != s(bool,X10) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK11(X8,X9,bool,X7))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f16606])).
fof(f19649,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628,f19640,f19644,f19646,f19648])).
fof(f19647,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628,f19640,f19644,f19646])).
fof(f19645,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628,f19640,f19644])).
fof(f19641,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628,f19640])).
fof(f19629,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592,f19628])).
fof(f19606,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19605,f248])).
fof(f19605,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(forward_demodulation,[],[f19604,f4031])).
fof(f19604,plain,(
  ( ! [X288,X290,X285,X287,X289,X286] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X286,bool),X287),s(X286,happ(s(fun(X285,X286),X288),s(X285,X289))))))),s(bool,X290))))) ) | $spl12),
  inference(subsumption_resolution,[],[f18924,f248])).
fof(f18924,plain,(
  ( ! [X288,X290,X285,X287,X289,X286] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X286,bool),X287),s(X286,happ(s(fun(X285,X286),X288),s(X285,X289))))))),s(bool,X290))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17960])).
fof(f19595,plain,(
  $false | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(global_subsumption,[],[f19594,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592])).
fof(f19594,plain,(
  ( ! [X436,X438,X434,X437,X435] : (s(bool,'T_0') != s(bool,happ(s(fun(X435,bool),X436),s(X435,happ(s(fun(X434,X435),X437),s(X434,X438)))))) ) | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f18930,f18567])).
fof(f18930,plain,(
  ( ! [X436,X438,X434,X437,X435] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') != s(bool,happ(s(fun(X435,bool),X436),s(X435,happ(s(fun(X434,X435),X437),s(X434,X438)))))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f4031,f17985])).
fof(f17985,plain,(
  ( ! [X436,X438,X434,X437,X435] : (s(bool,'T_0') != s(bool,happ(s(fun(X435,bool),X436),s(X435,happ(s(fun(X434,X435),X437),s(X434,X438))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X434,bool),'_dst_x0x1_2'(s(fun(X435,bool),X436),s(fun(X434,X435),X437))),s(X434,X438)))))) ) | $spl2),
  inference(superposition,[],[f1931,f340])).
fof(f1931,plain,(
  ( ! [X21] : (s(bool,'T_0') != s(bool,X21) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X21)))) ) | $spl2),
  inference(forward_demodulation,[],[f1909,f1188])).
fof(f1909,plain,(
  ( ! [X21] : (s(bool,X21) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X21)))) ) | $spl2),
  inference(superposition,[],[f1248,f290])).
fof(f1248,plain,(
  ( ! [X6] : (s(bool,X6) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl2),
  inference(subsumption_resolution,[],[f1222,f246])).
fof(f1222,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | s(bool,X6) != s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X6)) ) | $spl2),
  inference(superposition,[],[f399,f1188])).
fof(f19593,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590,f19592])).
fof(f19591,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586,f19590])).
fof(f19587,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580,f19586])).
fof(f19583,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f18951,f248])).
fof(f18951,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f17676])).
fof(f19582,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f18952,f248])).
fof(f18952,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f17674])).
fof(f19581,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578,f19580])).
fof(f19579,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574,f19578])).
fof(f19577,plain,(
  $false | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(global_subsumption,[],[f19576,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574])).
fof(f19576,plain,(
  ( ! [X484,X486,X482,X485,X483] : (s(bool,'T_0') != s(bool,happ(s(fun(X484,bool),'_dst_x0x1_2'(s(fun(X482,bool),X483),s(fun(X484,X482),X485))),s(X484,X486)))) ) | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f18957,f18567])).
fof(f18957,plain,(
  ( ! [X484,X486,X482,X485,X483] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(bool,'T_0') != s(bool,happ(s(fun(X484,bool),'_dst_x0x1_2'(s(fun(X482,bool),X483),s(fun(X484,X482),X485))),s(X484,X486)))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f4031,f17864])).
fof(f17864,plain,(
  ( ! [X484,X486,X482,X485,X483] : (s(bool,'T_0') != s(bool,happ(s(fun(X484,bool),'_dst_x0x1_2'(s(fun(X482,bool),X483),s(fun(X484,X482),X485))),s(X484,X486))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(X482,bool),X483),s(X482,happ(s(fun(X484,X482),X485),s(X484,X486)))))))) ) | $spl2),
  inference(superposition,[],[f1931,f340])).
fof(f19575,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552,f19574])).
fof(f19553,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550,f19552])).
fof(f19551,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548,f19550])).
fof(f19549,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544,f19548])).
fof(f19547,plain,(
  $false | ($spl12 | $spl14)),
  inference(global_subsumption,[],[f19546,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544])).
fof(f19546,plain,(
  ( ! [X50] : (~p(s(bool,X50))) ) | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19017,f248])).
fof(f19017,plain,(
  ( ! [X50] : (p(s(bool,'F_0')) | ~p(s(bool,X50))) ) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f5720])).
fof(f5720,plain,(
  ( ! [X50] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X50)))) | ~p(s(bool,X50))) ) | $spl14),
  inference(forward_demodulation,[],[f5719,f4055])).
fof(f5719,plain,(
  ( ! [X50] : (~p(s(bool,X50)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X50))))) ) | $spl14),
  inference(subsumption_resolution,[],[f5691,f246])).
fof(f5691,plain,(
  ( ! [X50] : (~p(s(bool,'T_0')) | ~p(s(bool,X50)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))),s(bool,X50))))) ) | $spl14),
  inference(superposition,[],[f322,f4055])).
fof(f19545,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541,f19544])).
fof(f19543,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19281,f248])).
fof(f19281,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(condensation,[],[f19023])).
fof(f19023,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,X0))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f327])).
fof(f19542,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539,f19541])).
fof(f19540,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537,f19539])).
fof(f19538,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533,f19537])).
fof(f19534,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531,f19533])).
fof(f19532,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529,f19531])).
fof(f19530,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527,f19529])).
fof(f19528,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525,f19527])).
fof(f19526,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523,f19525])).
fof(f19524,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521,f19523])).
fof(f19522,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519,f19521])).
fof(f19520,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516,f19519])).
fof(f19517,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514,f19516])).
fof(f19515,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512,f19514])).
fof(f19513,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509,f19512])).
fof(f19510,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507,f19509])).
fof(f19508,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505,f19507])).
fof(f19506,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503,f19505])).
fof(f19504,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495,f19503])).
fof(f19502,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19083,f248])).
fof(f19083,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f3884])).
fof(f19501,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19084,f248])).
fof(f19084,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f3885])).
fof(f19500,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19086,f248])).
fof(f19086,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12679])).
fof(f19499,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19087,f248])).
fof(f19087,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12680])).
fof(f19496,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493,f19495])).
fof(f19494,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489,f19493])).
fof(f19490,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487,f19489])).
fof(f19488,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479,f19487])).
fof(f19486,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19108,f248])).
fof(f19108,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12348])).
fof(f19485,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19109,f248])).
fof(f19109,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12349])).
fof(f19484,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19110,f248])).
fof(f19110,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12970])).
fof(f19483,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19111,f248])).
fof(f19111,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12971])).
fof(f19482,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19112,f248])).
fof(f19112,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f13981])).
fof(f19481,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19113,f248])).
fof(f19113,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f13982])).
fof(f19480,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477,f19479])).
fof(f19478,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475,f19477])).
fof(f19476,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458,f19475])).
fof(f19470,plain,(
  $false | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19137,f248])).
fof(f19137,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f4598])).
fof(f4598,plain,(
  p(s(bool,happ(s(fun(fun(fun(fun(bool,bool),bool),bool),bool),'?_1'),s(fun(fun(fun(bool,bool),bool),bool),'?_1')))) | $spl14),
  inference(unit_resulting_resolution,[],[f4040,f319])).
fof(f4040,plain,(
  p(s(bool,happ(s(fun(fun(fun(bool,bool),bool),bool),'?_1'),s(fun(fun(bool,bool),bool),'?_1')))) | $spl14),
  inference(unit_resulting_resolution,[],[f4033,f319])).
fof(f19469,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19138,f248])).
fof(f19138,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f12870])).
fof(f19468,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19139,f248])).
fof(f19139,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f13929])).
fof(f19467,plain,(
  $false | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19144,f248])).
fof(f19144,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f4075])).
fof(f4075,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f4050,f359])).
fof(f4050,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X0))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f4033,f328])).
fof(f19466,plain,(
  $false | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19145,f248])).
fof(f19145,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f4076])).
fof(f4076,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl14),
  inference(forward_demodulation,[],[f4049,f359])).
fof(f4049,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X0))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl14),
  inference(unit_resulting_resolution,[],[f4033,f325])).
fof(f19465,plain,(
  $false | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19146,f248])).
fof(f19146,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f4826])).
fof(f4826,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'),s(fun(fun(bool,bool),bool),'?_1'))),s(fun(bool,bool),'_i_0_0')))) | $spl14),
  inference(forward_demodulation,[],[f4697,f359])).
fof(f4697,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))))) | $spl14),
  inference(unit_resulting_resolution,[],[f4055,f338])).
fof(f19464,plain,(
  $false | ($spl12 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f19148,f248])).
fof(f19148,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl18 | $spl21)),
  inference(backward_demodulation,[],[f4031,f13845])).
fof(f13845,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0')))) | ($spl18 | $spl21)),
  inference(forward_demodulation,[],[f13660,f359])).
fof(f13660,plain,(
  p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'F_0'))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))))) | ($spl18 | $spl21)),
  inference(unit_resulting_resolution,[],[f9689,f338])).
fof(f19463,plain,(
  $false | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19462,f248])).
fof(f19462,plain,(
  p(s(bool,'F_0')) | ($spl12 | $spl14)),
  inference(forward_demodulation,[],[f19461,f4031])).
fof(f19461,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),X0),s(fun(bool,bool),sK6('?_1',X0,fun(bool,bool))))))) ) | ($spl12 | $spl14)),
  inference(subsumption_resolution,[],[f19149,f248])).
fof(f19149,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),X0),s(fun(bool,bool),sK6('?_1',X0,fun(bool,bool))))))) ) | ($spl12 | $spl14)),
  inference(backward_demodulation,[],[f4031,f18811])).
fof(f18811,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),X0),s(fun(bool,bool),sK6('?_1',X0,fun(bool,bool)))))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),sK5('?_1',X0,fun(bool,bool))))))) ) | $spl14),
  inference(subsumption_resolution,[],[f18773,f246])).
fof(f18773,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),X0),s(fun(bool,bool),sK6('?_1',X0,fun(bool,bool)))))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),sK5('?_1',X0,fun(bool,bool))))))) ) | $spl14),
  inference(superposition,[],[f300,f4055])).
fof(f19460,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19150,f248])).
fof(f19150,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f13342])).
fof(f19459,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456,f19458])).
fof(f19457,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447,f19456])).
fof(f19455,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19155,f248])).
fof(f19155,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f18468])).
fof(f19449,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19171,f248])).
fof(f19171,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f4791])).
fof(f19448,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445,f19447])).
fof(f19446,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443,f19445])).
fof(f19444,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439,f19443])).
fof(f19442,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19178,f248])).
fof(f19178,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f17599])).
fof(f19441,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19179,f248])).
fof(f19179,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f17600])).
fof(f19440,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437,f19439])).
fof(f19438,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435,f19437])).
fof(f19436,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433,f19435])).
fof(f19434,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431,f19433])).
fof(f19432,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429,f19431])).
fof(f19430,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194,f19429])).
fof(f19426,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424,f19194])).
fof(f19425,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420,f19424])).
fof(f19422,plain,(
  $false | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(global_subsumption,[],[f19386,f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420])).
fof(f19386,plain,(
  ( ! [X43,X44,X42] : (s(X42,X44) = s(X42,sK4(X44,X43,X42))) ) | ($spl2 | $spl12 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f19197,f18567])).
fof(f19197,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'F_0'))) | s(X42,X44) = s(X42,sK4(X44,X43,X42))) ) | ($spl2 | $spl12)),
  inference(backward_demodulation,[],[f4031,f16710])).
fof(f16710,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'|dollar|exists_1'(s(fun(X42,bool),X43))))) | s(X42,X44) = s(X42,sK4(X44,X43,X42))) ) | $spl2),
  inference(trivial_inequality_removal,[],[f16687])).
fof(f16687,plain,(
  ( ! [X43,X44,X42] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,'|dollar|exists_1'(s(fun(X42,bool),X43))))) | s(X42,X44) = s(X42,sK4(X44,X43,X42))) ) | $spl2),
  inference(superposition,[],[f1931,f562])).
fof(f19421,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418,f19420])).
fof(f19419,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416,f19418])).
fof(f19417,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414,f19416])).
fof(f19415,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412,f19414])).
fof(f19413,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410,f19412])).
fof(f19411,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408,f19410])).
fof(f19409,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404,f19408])).
fof(f19405,plain,(
  $false | $spl12),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4273,f4177,f4176,f4266,f4791,f4592,f4865,f4018,f5307,f3361,f3550,f3452,f3564,f1157,f5282,f5672,f4520,f4540,f4748,f4768,f2990,f3523,f3360,f3451,f5728,f5707,f1159,f5283,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f3030,f3569,f3884,f3885,f4488,f4508,f4716,f4736,f318,f5518,f5512,f5513,f5514,f5515,f5498,f5280,f5310,f5308,f5309,f317,f5320,f5311,f3386,f1172,f1171,f1170,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4794,f4825,f4831,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f12266,f12265,f12348,f12349,f12249,f12395,f12414,f12413,f12545,f12593,f12592,f12679,f12680,f12576,f12728,f12727,f12729,f12731,f12781,f12888,f12887,f12970,f12971,f12871,f12870,f13015,f13034,f13033,f13167,f13361,f13360,f13356,f13343,f13342,f13494,f13513,f13512,f13647,f13947,f13946,f13981,f13982,f13930,f13929,f13948,f13994,f14013,f14012,f14014,f14063,f14176,f14121,f14120,f14183,f14243,f14188,f14187,f14250,f14314,f14315,f14316,f14318,f14319,f14409,f14410,f14411,f14413,f14414,f14515,f14589,f14817,f14939,f14888,f15126,f15066,f15138,f15243,f15245,f15251,f15182,f15306,f15308,f15314,f15372,f15226,f15373,f15441,f15382,f15381,f15398,f15400,f15446,f15592,f15535,f15604,f15650,f15660,f15663,f15684,f15649,f15770,f15780,f15709,f15708,f15726,f15734,f15736,f15787,f15813,f15981,f15911,f16054,f16055,f16056,f16062,f16064,f16073,f16088,f16089,f16090,f16091,f16118,f16201,f16132,f16133,f16135,f16146,f16218,f16219,f16152,f16247,f16419,f16348,f16439,f16577,f16515,f16589,f16590,f16591,f16597,f16599,f16604,f16605,f16606,f16612,f16614,f16982,f16985,f16986,f16987,f16988,f16989,f16990,f16999,f17025,f17026,f17027,f17028,f17029,f17030,f17050,f17069,f17080,f17081,f17082,f17083,f17084,f17085,f17086,f17120,f17121,f17122,f17123,f17124,f17125,f17145,f17228,f17229,f17230,f17236,f17238,f17247,f17393,f17304,f17305,f17309,f17321,f17412,f17413,f17327,f17329,f17334,f17338,f17341,f17427,f17456,f17479,f17478,f17476,f17542,f17599,f17600,f17601,f17602,f17603,f17604,f17552,f17606,f17607,f17608,f17609,f17573,f17610,f17612,f17613,f17614,f17615,f17634,f17663,f17677,f17676,f17674,f17678,f17679,f17680,f17681,f17682,f17683,f17684,f17685,f17686,f17692,f17694,f17797,f17799,f17807,f17808,f17809,f17810,f17815,f17816,f17817,f17818,f17819,f17820,f17822,f17823,f17824,f17825,f17826,f17828,f17829,f17832,f17833,f17834,f17835,f17836,f17837,f17838,f17839,f17841,f17846,f17847,f17848,f18056,f17850,f17851,f17861,f17862,f17863,f17866,f17879,f17880,f17881,f17882,f17883,f17884,f17885,f17886,f17889,f17891,f17893,f17895,f17898,f17899,f17901,f17903,f17906,f17909,f17913,f17920,f17922,f17930,f17931,f17932,f17933,f17938,f17939,f17940,f17941,f17943,f17944,f17945,f17946,f17947,f17949,f17950,f17953,f17954,f17955,f17956,f17957,f17958,f17959,f17960,f17962,f17967,f17968,f17969,f18068,f17971,f17972,f17982,f17983,f17984,f17987,f18000,f18001,f18002,f18003,f18004,f18005,f18006,f18007,f18010,f18012,f18014,f18016,f18019,f18020,f18022,f18024,f18027,f18030,f18034,f18127,f18128,f18129,f18130,f18131,f18132,f18133,f18134,f18260,f18261,f18262,f18263,f18264,f18265,f18266,f18267,f18210,f18212,f18220,f18221,f18222,f18223,f18468,f18416,f18425,f18433,f18436,f18445,f18805,f18806,f18707,f18708,f18807,f18808,f18809,f18810,f18713,f18813,f18815,f18821,f18794,f18795,f18823,f4031,f19306,f19404])).
fof(f19403,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f19233,f248])).
fof(f19233,plain,(
  p(s(bool,'F_0')) | $spl12),
  inference(backward_demodulation,[],[f4031,f311])).
fof(f19402,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19233,f4039])).
fof(f19401,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19400,f19313])).
fof(f19313,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18876,f4039])).
fof(f19400,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19234,f4039])).
fof(f19399,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19398,f19313])).
fof(f19398,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19236,f4039])).
fof(f19397,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19396,f19313])).
fof(f19396,plain,(
  ( ! [X606,X600,X602,X605,X601,X603,X604] : (s(X600,X606) = s(X600,sK4(X606,happ(s(fun(X601,fun(X600,bool)),X602),s(X601,happ(s(fun(X603,X601),X604),s(X603,X605)))),X600))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19205,f4039])).
fof(f19395,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19394,f19313])).
fof(f19394,plain,(
  ( ! [X528,X524,X526,X522,X525,X527,X523] : (s(X522,X528) = s(X522,sK4(X528,happ(s(fun(X523,fun(X522,bool)),'_dst_x0x1_2'(s(fun(X524,fun(X522,bool)),X525),s(fun(X523,X524),X526))),s(X523,X527)),X522))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19204,f4039])).
fof(f19393,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19392,f19313])).
fof(f19392,plain,(
  ( ! [X313,X315,X312,X314,X311] : (s(X311,X315) = s(X311,sK4(X315,happ(s(fun(fun(X312,fun(X311,bool)),fun(X311,bool)),'_dstsel_0_x0_1'(s(X312,X313))),s(fun(X312,fun(X311,bool)),X314)),X311))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19203,f4039])).
fof(f19391,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19390,f19313])).
fof(f19390,plain,(
  ( ! [X405,X401,X403,X404,X400,X402] : (s(X400,X405) = s(X400,sK4(X405,'const.benchmark.times_CASE_3'(s('type.benchmark.times'(X401),'const.benchmark.Once_1'(s(X401,X402))),s(fun(X401,fun(X400,bool)),X403),s(fun('type.benchmark.times'(X401),fun('type.benchmark.times'(X401),fun(X400,bool))),X404)),X400))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19201,f4039])).
fof(f19389,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19388,f19313])).
fof(f19388,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s(X245,X249) = s(X245,sK4(X249,'const.ind_type.FCONS_3'(s(fun(X245,bool),X246),s(fun('type.num.num',fun(X245,bool)),X247),s('type.num.num','const.num.SUC_1'(s('type.num.num',X248)))),X245))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19198,f4039])).
fof(f19387,plain,(
  $false | ($spl2 | $spl12 | $spl16 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f19386,f19313])).
fof(f19385,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19384,f19313])).
fof(f19384,plain,(
  ( ! [X103,X106,X104] : (s(X103,X106) = s(X103,sK4(X106,X104,X103))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19196,f4039])).
fof(f19383,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19382,f19313])).
fof(f19382,plain,(
  ( ! [X165,X163,X166,X164] : (s(X163,X166) = s(X163,sK4(X166,sK4(X164,X165,fun(X163,bool)),X163))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19381,f19313])).
fof(f19381,plain,(
  ( ! [X165,X163,X166,X164] : (s(X163,X166) = s(X163,sK4(X166,sK4(X164,X165,fun(X163,bool)),X163)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X163,bool),bool),X165)))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19193,f4039])).
fof(f19193,plain,(
  ( ! [X165,X163,X166,X164] : (p(s(bool,'F_0')) | s(X163,X166) = s(X163,sK4(X166,sK4(X164,X165,fun(X163,bool)),X163)) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(fun(X163,bool),bool),X165)))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f3387])).
fof(f19380,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19379,f19313])).
fof(f19379,plain,(
  ( ! [X10,X8,X11,X9] : (s(X8,X11) = s(X8,sK4(X11,'const.ind_type.FCONS_3'(s(fun(X8,bool),X9),s(fun('type.num.num',fun(X8,bool)),X10),s('type.num.num','const.num.|48|_0')),X8))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19187,f4039])).
fof(f19378,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19377,f19313])).
fof(f19377,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X3,X7) = s(X3,sK4(X7,happ(s(fun(X4,fun(X3,bool)),'_dst_x0_1'(s(fun(X3,bool),X5))),s(X4,X6)),X3))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19186,f4039])).
fof(f19376,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19375,f19313])).
fof(f19375,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,happ(s(fun(fun(X0,bool),fun(X0,bool)),'_i_0_0'),s(fun(X0,bool),X1)),X0))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19185,f4039])).
fof(f19374,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19373,f19313])).
fof(f19373,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK4(X2,X1,X0))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19184,f4039])).
fof(f19372,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19179,f4039])).
fof(f19371,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19178,f4039])).
fof(f19370,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19171,f4039])).
fof(f19369,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19155,f4039])).
fof(f19368,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19150,f4039])).
fof(f19367,plain,(
  $false | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19366,f4039])).
fof(f19366,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),X0),s(fun(bool,bool),sK6('?_1',X0,fun(bool,bool))))))) ) | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19149,f4039])).
fof(f19365,plain,(
  $false | ($spl12 | $spl16 | $spl18 | $spl21)),
  inference(subsumption_resolution,[],[f19148,f4039])).
fof(f19364,plain,(
  $false | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19146,f4039])).
fof(f19363,plain,(
  $false | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19145,f4039])).
fof(f19362,plain,(
  $false | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19144,f4039])).
fof(f19361,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19139,f4039])).
fof(f19360,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19138,f4039])).
fof(f19359,plain,(
  $false | ($spl12 | $spl14 | $spl16)),
  inference(subsumption_resolution,[],[f19137,f4039])).
fof(f19358,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19357,f19313])).
fof(f19357,plain,(
  ( ! [X54,X56,X53] : (s(X53,X56) = s(X53,sK4(X56,X54,X53))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19132,f4039])).
fof(f19356,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19355,f19313])).
fof(f19355,plain,(
  ( ! [X59,X62,X60] : (s(X59,X62) = s(X59,sK4(X62,X60,X59))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19131,f4039])).
fof(f19354,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19113,f4039])).
fof(f19353,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19112,f4039])).
fof(f19352,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19111,f4039])).
fof(f19351,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19110,f4039])).
fof(f19350,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19109,f4039])).
fof(f19349,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19108,f4039])).
fof(f19348,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19347,f19313])).
fof(f19347,plain,(
  ( ! [X58,X56,X55] : (s(X55,X58) = s(X55,sK4(X58,X56,X55))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19089,f4039])).
fof(f19346,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19087,f4039])).
fof(f19345,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19086,f4039])).
fof(f19344,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19084,f4039])).
fof(f19343,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19083,f4039])).
fof(f19342,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19341,f19313])).
fof(f19341,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19274,f4039])).
fof(f19340,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19339,f19313])).
fof(f19339,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19275,f4039])).
fof(f19338,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19337,f19313])).
fof(f19337,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19278,f4039])).
fof(f19336,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19335,f19313])).
fof(f19335,plain,(
  ( ! [X88] : (s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19334,f4039])).
fof(f19334,plain,(
  ( ! [X88] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'|dollar|exists_1'(s(fun(bool,bool),X88)))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19029,f4039])).
fof(f19333,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19332,f19313])).
fof(f19332,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19025,f4039])).
fof(f19331,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19281,f4039])).
fof(f19330,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19329,f19313])).
fof(f19329,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19286,f4039])).
fof(f19328,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19327,f19313])).
fof(f19327,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3)))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19326,f19313])).
fof(f19326,plain,(
  ( ! [X4,X2,X3] : (s(bool,X4) = s(bool,happ(s(fun(fun(X2,bool),bool),'?_1'),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X4)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18988,f4039])).
fof(f19325,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18952,f4039])).
fof(f19324,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18951,f4039])).
fof(f19323,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19322,f4039])).
fof(f19322,plain,(
  ( ! [X288,X290,X285,X287,X289,X286] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,happ(s(fun(X286,bool),X287),s(X286,happ(s(fun(X285,X286),X288),s(X285,X289))))))),s(bool,X290))))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18924,f4039])).
fof(f19321,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19320,f19313])).
fof(f19320,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (s(bool,X391) = s(bool,happ(s(fun(X386,bool),X387),s(X386,happ(s(fun(X388,X386),X389),s(X388,X390)))))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19319,f19313])).
fof(f19319,plain,(
  ( ! [X389,X391,X387,X388,X390,X386] : (s(bool,X391) = s(bool,happ(s(fun(X386,bool),X387),s(X386,happ(s(fun(X388,X386),X389),s(X388,X390))))) | s(bool,'T_0') = s(bool,X391)) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18906,f4039])).
fof(f19318,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19317,f4039])).
fof(f19317,plain,(
  ( ! [X333,X335,X337,X334,X336] : (p(s(bool,happ(s(fun(X333,bool),X334),s(X333,happ(s(fun(X335,X333),X336),s(X335,X337))))))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18902,f4039])).
fof(f18902,plain,(
  ( ! [X333,X335,X337,X334,X336,X338] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'F_0'))),s(bool,X338)))) | p(s(bool,happ(s(fun(X333,bool),X334),s(X333,happ(s(fun(X335,X333),X336),s(X335,X337))))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17839])).
fof(f19316,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19315,f19313])).
fof(f19315,plain,(
  ( ! [X255,X257,X259,X260,X256,X258] : (s(bool,X260) = s(bool,happ(s(fun(X255,bool),X256),s(X255,happ(s(fun(X257,X255),X258),s(X257,X259)))))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f19314,f4039])).
fof(f19314,plain,(
  ( ! [X255,X257,X259,X260,X256,X258] : (p(s(bool,'F_0')) | s(bool,X260) = s(bool,happ(s(fun(X255,bool),X256),s(X255,happ(s(fun(X257,X255),X258),s(X257,X259)))))) ) | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18892,f4039])).
fof(f18892,plain,(
  ( ! [X255,X257,X259,X260,X256,X258] : (p(s(bool,'F_0')) | p(s(bool,X260)) | s(bool,X260) = s(bool,happ(s(fun(X255,bool),X256),s(X255,happ(s(fun(X257,X255),X258),s(X257,X259)))))) ) | $spl12),
  inference(backward_demodulation,[],[f4031,f17826])).
fof(f19308,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18831,f4039])).
fof(f19307,plain,(
  $false | ($spl12 | $spl16)),
  inference(subsumption_resolution,[],[f18830,f4039])).
fof(f18814,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool))))) | p(s(bool,sK5('_i_0_0',X5,bool)))) ) | $spl32),
  inference(cnf_transformation,[],[f18814_D])).
fof(f18814_D,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool))))) | p(s(bool,sK5('_i_0_0',X5,bool)))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f18821,plain,(
  ( ! [X78,X77] : (p(s(bool,sK5('_i_0_0',X78,bool))) | ~p(s(bool,X77)) | p(s(bool,happ(s(fun(bool,bool),X78),s(bool,sK6('_i_0_0',X78,bool)))))) )),
  inference(forward_demodulation,[],[f18792,f290])).
fof(f18792,plain,(
  ( ! [X78,X77] : (~p(s(bool,X77)) | p(s(bool,happ(s(fun(bool,bool),X78),s(bool,sK6('_i_0_0',X78,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X78,bool)))))) )),
  inference(superposition,[],[f300,f290])).
fof(f18813,plain,(
  ( ! [X4,X5] : (p(s(bool,sK5('_i_0_0',X5,bool))) | p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool))))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(forward_demodulation,[],[f18812,f290])).
fof(f18812,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X5,bool))))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f18776,f246])).
fof(f18776,plain,(
  ( ! [X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X5),s(bool,sK6('_i_0_0',X5,bool))))) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,sK5('_i_0_0',X5,bool))))) | s(bool,'F_0') = s(bool,X4)) )),
  inference(superposition,[],[f300,f429])).
fof(f15661,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) | $spl30),
  inference(cnf_transformation,[],[f15661_D])).
fof(f15661_D,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f15663,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f15662])).
fof(f15662,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,X44)) | p(s(bool,X45)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X45)))) | s(bool,'T_0') = s(bool,X46)) )),
  inference(subsumption_resolution,[],[f15621,f399])).
fof(f15621,plain,(
  ( ! [X45,X46,X44] : (~p(s(bool,X44)) | p(s(bool,X45)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X45)))) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) )),
  inference(superposition,[],[f326,f396])).
fof(f15660,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X0)))) | p(s(bool,X0)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f15659])).
fof(f15659,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,X41)) | p(s(bool,X42)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X42)))) | s(bool,'T_0') = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f15620,f399])).
fof(f15620,plain,(
  ( ! [X43,X41,X42] : (~p(s(bool,X41)) | p(s(bool,X42)) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,'T_0'))),s(bool,X42)))) | s(bool,X41) = s(bool,X43) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f326,f396])).
fof(f9323,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312,f9314,f8915,f8881,f8875,f8872])).
fof(f8872,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl20),
  inference(unit_resulting_resolution,[],[f8866,f255])).
fof(f8875,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(unit_resulting_resolution,[],[f8866,f8866,f315])).
fof(f8881,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl20),
  inference(unit_resulting_resolution,[],[f8866,f8866,f315])).
fof(f8915,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f399])).
fof(f9314,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl20),
  inference(subsumption_resolution,[],[f9229,f246])).
fof(f9229,plain,(
  ( ! [X85,X86,X84,X82] : (~p(s(bool,'T_0')) | s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f4592])).
fof(f9312,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl20),
  inference(subsumption_resolution,[],[f9211,f246])).
fof(f9211,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f4540])).
fof(f9310,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl20),
  inference(subsumption_resolution,[],[f9167,f246])).
fof(f9167,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f4508])).
fof(f9308,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl20),
  inference(subsumption_resolution,[],[f9128,f246])).
fof(f9128,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f337])).
fof(f9306,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(condensation,[],[f9305])).
fof(f9305,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | $spl20),
  inference(condensation,[],[f9304])).
fof(f9304,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl20),
  inference(subsumption_resolution,[],[f9089,f8866])).
fof(f9089,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,'T_0')))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f4526])).
fof(f9302,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl20),
  inference(condensation,[],[f9301])).
fof(f9301,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | $spl20),
  inference(condensation,[],[f9300])).
fof(f9300,plain,(
  ( ! [X26,X24,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl20),
  inference(subsumption_resolution,[],[f9084,f8866])).
fof(f9084,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X25)))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f4494])).
fof(f8919,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f1150])).
fof(f8866,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl20),
  inference(forward_demodulation,[],[f8865,f290])).
fof(f8865,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))))) ) | $spl20),
  inference(subsumption_resolution,[],[f8847,f246])).
fof(f8847,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,X0))))) ) | $spl20),
  inference(superposition,[],[f316,f6925])).
fof(f8838,plain,(
  p(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1')))) | $spl20),
  inference(subsumption_resolution,[],[f8808,f246])).
fof(f8808,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(fun(bool,bool),bool),'!_1')))) | $spl20),
  inference(superposition,[],[f3449,f6925])).
fof(f8642,plain,(
  ( ! [X51] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X51),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl20),
  inference(forward_demodulation,[],[f8641,f359])).
fof(f8641,plain,(
  ( ! [X51] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X51))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl20),
  inference(subsumption_resolution,[],[f8619,f246])).
fof(f8619,plain,(
  ( ! [X51] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'==>_0'),s(bool,X51))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl20),
  inference(superposition,[],[f328,f6925])).
fof(f8295,plain,(
  ( ! [X29] : (s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,X29))) | s(bool,X29) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) ) | $spl20),
  inference(superposition,[],[f302,f6925])).
fof(f8324,plain,(
  ( ! [X13] : (s(bool,X13) != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl20),
  inference(subsumption_resolution,[],[f8273,f246])).
fof(f8273,plain,(
  ( ! [X13] : (~p(s(bool,'T_0')) | s(bool,X13) != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'T_0') = s(bool,X13)) ) | $spl20),
  inference(superposition,[],[f399,f6925])).
fof(f8322,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X8),s(fun(fun(bool,bool),bool),'!_1'))),s(fun(bool,bool),'_i_0_0'))))) ) | $spl20),
  inference(forward_demodulation,[],[f8321,f359])).
fof(f8321,plain,(
  ( ! [X8] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X8))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl20),
  inference(subsumption_resolution,[],[f8268,f246])).
fof(f8268,plain,(
  ( ! [X8] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|bslash||slash|_0'),s(bool,X8))),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))) ) | $spl20),
  inference(superposition,[],[f325,f6925])).
fof(f6953,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X4)) ) | $spl20),
  inference(subsumption_resolution,[],[f6937,f248])).
fof(f6937,plain,(
  ( ! [X4] : (p(s(bool,'F_0')) | s(bool,X4) = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | s(bool,'F_0') = s(bool,X4)) ) | $spl20),
  inference(superposition,[],[f5319,f1759])).
fof(f6925,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl20),
  inference(unit_resulting_resolution,[],[f246,f5319,f315])).
fof(f6927,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f5319,f399])).
fof(f6928,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),'_i_0_0'),s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))) | $spl20),
  inference(unit_resulting_resolution,[],[f290,f5319,f399])).
fof(f6929,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))),s(X0,X1)))) ) | $spl20),
  inference(unit_resulting_resolution,[],[f330,f5319,f399])).
fof(f6930,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.ind_type.FCONS_3'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))),s(fun('type.num.num',bool),X0),s('type.num.num','const.num.|48|_0')))) ) | $spl20),
  inference(unit_resulting_resolution,[],[f295,f5319,f399])).
fof(f6931,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(X0,bool),'_dst_x0_1'(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))))))) ) | $spl20),
  inference(unit_resulting_resolution,[],[f5319,f1169])).
fof(f9322,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312,f9314,f8915,f8881,f8875])).
fof(f9321,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f8876,f246])).
fof(f8876,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f315])).
fof(f9320,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f8878,f8866])).
fof(f8878,plain,(
  ~p(s(bool,'F_0')) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f315])).
fof(f9319,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312,f9314,f8915,f8881])).
fof(f9318,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f8882,f246])).
fof(f8882,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f315])).
fof(f9317,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f8884,f8866])).
fof(f8884,plain,(
  ~p(s(bool,'F_0')) | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f315])).
fof(f9316,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312,f9314,f8915])).
fof(f9315,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312,f9314])).
fof(f9313,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310,f9312])).
fof(f9311,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308,f9310])).
fof(f9309,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306,f9308])).
fof(f9307,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302,f9306])).
fof(f9303,plain,(
  $false | $spl20),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f1251,f1161,f1513,f1545,f1596,f1646,f1624,f1670,f1759,f1864,f1870,f1876,f1942,f1985,f1987,f2221,f2307,f2425,f2492,f2584,f2986,f3040,f3311,f3312,f3340,f3371,f3453,f3431,f3820,f3819,f3805,f3928,f3927,f4030,f4017,f4190,f4593,f4866,f5315,f5306,f5712,f5716,f311,f3929,f3370,f3368,f3355,f3353,f3350,f3349,f3373,f1527,f1169,f4242,f4244,f3454,f3450,f3433,f3387,f3342,f3324,f3323,f3322,f3321,f560,f559,f558,f298,f4592,f4865,f4791,f4273,f4266,f4177,f4176,f5307,f4018,f3550,f3361,f3564,f3452,f5672,f4520,f4540,f4748,f4768,f3523,f2990,f1157,f5282,f5707,f5728,f3451,f3360,f3885,f3884,f3569,f3030,f5708,f3359,f3356,f1998,f1988,f1300,f1293,f322,f321,f320,f4758,f4749,f4726,f4717,f4498,f4489,f3015,f2240,f325,f324,f323,f3551,f3362,f3306,f3293,f328,f327,f326,f1159,f5283,f4488,f4508,f4716,f4736,f5498,f5515,f5514,f5513,f5512,f318,f5518,f5311,f5280,f5310,f5309,f5308,f317,f5320,f3386,f1172,f1170,f1171,f299,f1177,f3784,f4034,f3975,f3799,f3517,f3460,f3449,f319,f316,f301,f300,f4776,f4744,f4548,f4516,f338,f337,f4831,f4825,f4794,f5290,f5288,f5281,f4873,f4762,f4760,f4756,f4754,f4747,f4730,f4728,f4724,f4722,f4715,f4526,f4519,f4502,f4500,f4496,f4494,f4487,f4484,f4483,f4482,f4481,f4237,f4235,f4234,f4222,f4184,f4182,f4175,f3971,f3913,f3778,f3747,f3684,f3675,f3672,f3644,f3581,f3572,f3557,f3384,f3383,f3382,f3381,f3372,f3369,f3352,f3351,f3319,f3317,f3316,f3310,f3309,f3296,f3220,f3212,f3071,f3070,f3069,f2965,f2964,f2963,f2941,f2940,f2939,f2896,f2895,f2885,f2884,f2883,f2575,f2573,f2521,f2491,f2416,f2414,f2334,f2333,f2332,f2282,f2281,f2280,f2216,f1997,f1891,f1874,f1872,f1868,f1833,f1799,f1740,f1739,f1738,f1677,f1676,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f5319,f6931,f6930,f6929,f6928,f6927,f6925,f6953,f8322,f8324,f8295,f8642,f8838,f8866,f8919,f9302])).
fof(f9299,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9082,f8866])).
fof(f9082,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | $spl20),
  inference(backward_demodulation,[],[f8919,f4484])).
fof(f9298,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9081,f8866])).
fof(f9081,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl20),
  inference(backward_demodulation,[],[f8919,f4483])).
fof(f9297,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9080,f8866])).
fof(f9080,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | $spl20),
  inference(backward_demodulation,[],[f8919,f4482])).
fof(f9296,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9079,f8866])).
fof(f9079,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl20),
  inference(backward_demodulation,[],[f8919,f4481])).
fof(f9295,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9063,f8866])).
fof(f9063,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))))),s(bool,'T_0'))))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f3747])).
fof(f9294,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9061,f8919])).
fof(f9061,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'T_0')))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f3675])).
fof(f9293,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9059,f8866])).
fof(f9059,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))),s(bool,X1))))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f3644])).
fof(f9292,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9057,f8919])).
fof(f9057,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0)))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f3572])).
fof(f9287,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f9286,f8866])).
fof(f9286,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl20),
  inference(subsumption_resolution,[],[f8975,f8919])).
fof(f8975,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl20),
  inference(backward_demodulation,[],[f8919,f255])).
fof(f9285,plain,(
  $false | $spl20),
  inference(subsumption_resolution,[],[f8974,f246])).
fof(f8974,plain,(
  ~p(s(bool,'T_0')) | $spl20),
  inference(backward_demodulation,[],[f8919,f248])).
fof(f9284,plain,(
  $false | $spl20),
  inference(trivial_inequality_removal,[],[f8980])).
fof(f8980,plain,(
  s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) | $spl20),
  inference(backward_demodulation,[],[f8919,f999])).
fof(f9283,plain,(
  $false | $spl20),
  inference(trivial_inequality_removal,[],[f8985])).
fof(f8985,plain,(
  s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) | $spl20),
  inference(backward_demodulation,[],[f8919,f1087])).
fof(f8927,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f248,f8866,f320])).
fof(f8925,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f248,f8866,f321])).
fof(f8920,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f381,f381,f8866,f1150])).
fof(f8916,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f290,f381,f8866,f399])).
fof(f8885,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f8866,f381,f8866,f315])).
fof(f8883,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f246,f381,f8866,f315])).
fof(f8879,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f8866,f381,f8866,f315])).
fof(f8877,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f246,f381,f8866,f315])).
fof(f8873,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f290,f8866,f255])).
fof(f8871,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f381,f8866,f252])).
fof(f8869,plain,(
  $false | $spl20),
  inference(unit_resulting_resolution,[],[f248,f8866])).
fof(f6684,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6683,f5316])).
fof(f5316,plain,(
  s(bool,'F_0') != s(bool,sK8('_i_0_0',bool)) | $spl19),
  inference(cnf_transformation,[],[f5316_D])).
fof(f5316_D,plain,(
  s(bool,'F_0') != s(bool,sK8('_i_0_0',bool)) <=> ~$spl19),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl19])])).
fof(f6683,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(condensation,[],[f6682])).
fof(f6682,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,'F_0') = s(bool,sK8('_i_0_0',bool))) ) | $spl23),
  inference(subsumption_resolution,[],[f6673,f256])).
fof(f6673,plain,(
  ( ! [X7] : (~p(s(bool,X7)) | s(bool,'F_0') = s(bool,X7) | s(bool,'F_0') = s(bool,sK8('_i_0_0',bool))) ) | $spl23),
  inference(superposition,[],[f5326,f1759])).
fof(f6681,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6680,f5316])).
fof(f6680,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(condensation,[],[f6679])).
fof(f6679,plain,(
  ( ! [X6] : (s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl23),
  inference(subsumption_resolution,[],[f6672,f256])).
fof(f6672,plain,(
  ( ! [X6] : (~p(s(bool,X6)) | s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X6)) ) | $spl23),
  inference(superposition,[],[f5326,f1759])).
fof(f6677,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6659,f5316])).
fof(f6659,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(unit_resulting_resolution,[],[f5326,f256])).
fof(f6676,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6660,f5316])).
fof(f6660,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(unit_resulting_resolution,[],[f248,f5326,f312])).
fof(f6675,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6662,f5316])).
fof(f6662,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(unit_resulting_resolution,[],[f248,f5326,f312])).
fof(f6674,plain,(
  $false | ($spl19 | $spl23)),
  inference(subsumption_resolution,[],[f6664,f5316])).
fof(f6664,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl23),
  inference(unit_resulting_resolution,[],[f381,f5326,f454])).
fof(f6596,plain,(
  ( ! [X40] : (s(bool,X40) != s(bool,sK8('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X40)) ) | $spl28),
  inference(cnf_transformation,[],[f6596_D])).
fof(f6596_D,plain,(
  ( ! [X40] : (s(bool,X40) != s(bool,sK8('_i_0_0',bool)) | s(bool,'F_0') = s(bool,X40)) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f6563,plain,(
  ( ! [X39,X40] : (s(bool,X40) != s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X40)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f6487])).
fof(f6487,plain,(
  ( ! [X39,X40] : (s(bool,X40) != s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X40) | s(bool,'T_0') = s(bool,X39)) ) | $spl18),
  inference(superposition,[],[f1864,f5407])).
fof(f5407,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(subsumption_resolution,[],[f5335,f381])).
fof(f5335,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) = s(bool,sK8('_i_0_0',bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f5317,f396])).
fof(f6139,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128,f6130,f6132,f6134,f6136,f6138])).
fof(f6138,plain,(
  ( ! [X85,X86,X84,X82] : (s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl24),
  inference(subsumption_resolution,[],[f6007,f246])).
fof(f6007,plain,(
  ( ! [X85,X86,X84,X82] : (~p(s(bool,'T_0')) | s(X82,X86) = s(X82,happ(s(fun('type.num.num',X82),X84),s('type.num.num',X85)))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f4592])).
fof(f6136,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl24),
  inference(subsumption_resolution,[],[f5989,f246])).
fof(f5989,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f4540])).
fof(f6134,plain,(
  ( ! [X1] : (p(s(bool,X1))) ) | $spl24),
  inference(subsumption_resolution,[],[f5966,f246])).
fof(f5966,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | p(s(bool,X1))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f321])).
fof(f6132,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f5965,f246])).
fof(f5965,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f320])).
fof(f6130,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f6044,f246])).
fof(f6044,plain,(
  ( ! [X0] : (p(s(bool,X0)) | ~p(s(bool,'T_0'))) ) | $spl24),
  inference(condensation,[],[f5954])).
fof(f5954,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | p(s(bool,X0))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f323])).
fof(f6128,plain,(
  ( ! [X0] : (p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f6047,f246])).
fof(f6047,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,X0))) ) | $spl24),
  inference(condensation,[],[f5948])).
fof(f5948,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~p(s(bool,X0))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f326])).
fof(f6126,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl24),
  inference(subsumption_resolution,[],[f5943,f246])).
fof(f5943,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,'T_0')) | s(bool,X60) = s(bool,'|dollar|exists_1'(s(fun(X58,bool),X59))) | s(X58,X61) = s(X58,sK4(X61,X59,X58))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f4508])).
fof(f6098,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl24),
  inference(subsumption_resolution,[],[f5904,f246])).
fof(f5904,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f337])).
fof(f6091,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(subsumption_resolution,[],[f6090,f246])).
fof(f6090,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl24),
  inference(condensation,[],[f6089])).
fof(f6089,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f6088])).
fof(f6088,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl24),
  inference(forward_demodulation,[],[f5867,f5713])).
fof(f5867,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,X25))),s(bool,'T_0')))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f4526])).
fof(f6086,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl24),
  inference(subsumption_resolution,[],[f6085,f246])).
fof(f6085,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | ~p(s(bool,'T_0'))) ) | $spl24),
  inference(condensation,[],[f6084])).
fof(f6084,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X1)) ) | $spl24),
  inference(condensation,[],[f6083])).
fof(f6083,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl24),
  inference(forward_demodulation,[],[f5862,f5713])).
fof(f5862,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,X25)))) | s(bool,X24) = s(bool,X25) | s(bool,X24) = s(bool,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f4494])).
fof(f6059,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl24),
  inference(subsumption_resolution,[],[f5748,f5713])).
fof(f5748,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f255])).
fof(f6137,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128,f6130,f6132,f6134,f6136])).
fof(f6135,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128,f6130,f6132,f6134])).
fof(f6133,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128,f6130,f6132])).
fof(f6131,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128,f6130])).
fof(f6129,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126,f6128])).
fof(f6127,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098,f6126])).
fof(f6099,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091,f6098])).
fof(f6092,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086,f6091])).
fof(f6087,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059,f6086])).
fof(f6082,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6081,f246])).
fof(f6081,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5860,f5713])).
fof(f5860,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | $spl24),
  inference(backward_demodulation,[],[f5713,f4484])).
fof(f6080,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6079,f246])).
fof(f6079,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5859,f5713])).
fof(f5859,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl24),
  inference(backward_demodulation,[],[f5713,f4483])).
fof(f6078,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6077,f246])).
fof(f6077,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5858,f5713])).
fof(f5858,plain,(
  ~p(s(bool,happ(s(fun('type.benchmark.times'(bool),bool),happ(s(fun('type.benchmark.times'(bool),fun('type.benchmark.times'(bool),bool)),'=_0'),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))),s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0')))))) | $spl24),
  inference(backward_demodulation,[],[f5713,f4482])).
fof(f6076,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6075,f246])).
fof(f6075,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5857,f5713])).
fof(f5857,plain,(
  ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'=_0'),s(bool,'T_0'))),s(bool,'T_0')))) | $spl24),
  inference(backward_demodulation,[],[f5713,f4481])).
fof(f6074,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6073,f246])).
fof(f6073,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5841,f5713])).
fof(f5841,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X1))))),s(bool,'T_0'))))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f3747])).
fof(f6072,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f5839,f5713])).
fof(f5839,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0))),s(bool,'T_0')))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f3675])).
fof(f6071,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f6070,f246])).
fof(f6070,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(forward_demodulation,[],[f5837,f5713])).
fof(f5837,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),'_dst_x0x0x1_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X0),s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))))),s(bool,X1))))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f3644])).
fof(f6069,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f5835,f5713])).
fof(f5835,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0)))) ) | $spl24),
  inference(backward_demodulation,[],[f5713,f3572])).
fof(f6060,plain,(
  $false | $spl24),
  inference(global_subsumption,[],[f245,f246,f249,f250,f252,f251,f289,f290,f291,f295,f296,f297,f303,f302,f304,f305,f306,f307,f310,f309,f308,f315,f312,f329,f330,f333,f334,f335,f336,f339,f340,f341,f377,f378,f358,f359,f360,f361,f362,f363,f364,f365,f366,f367,f368,f369,f381,f396,f399,f454,f554,f562,f570,f571,f572,f631,f632,f633,f646,f656,f657,f658,f739,f990,f991,f1001,f1002,f1004,f1010,f1011,f1012,f1013,f1045,f1047,f1050,f1173,f1168,f1289,f1292,f311,f1169,f560,f559,f558,f298,f1159,f1157,f328,f327,f326,f325,f324,f323,f322,f321,f320,f1293,f1300,f338,f337,f318,f317,f1172,f1171,f1170,f299,f1177,f301,f300,f316,f319,f1251,f1161,f1152,f1151,f1150,f1148,f1147,f1132,f1087,f1052,f1049,f1009,f1006,f999,f515,f479,f429,f256,f255,f248,f1513,f1527,f1545,f1596,f1646,f1624,f1670,f1676,f1677,f1738,f1739,f1740,f1759,f1864,f1868,f1870,f1872,f1874,f1799,f1876,f1833,f1891,f1942,f1985,f1987,f1988,f1997,f1998,f2216,f2221,f2240,f2280,f2281,f2282,f2307,f2332,f2333,f2334,f2414,f2416,f2425,f2491,f2492,f2883,f2884,f2521,f2885,f2895,f2896,f2573,f2575,f2584,f2939,f2940,f2941,f2986,f2963,f2964,f2965,f2990,f3015,f3030,f3040,f3069,f3070,f3071,f3212,f3220,f3293,f3296,f3306,f3309,f3310,f3311,f3312,f3316,f3317,f3319,f3321,f3322,f3323,f3324,f3449,f3340,f3342,f3349,f3350,f3351,f3352,f3353,f3355,f3356,f3359,f3360,f3361,f3362,f3368,f3369,f3370,f3371,f3372,f3373,f3381,f3382,f3383,f3384,f3386,f3387,f3450,f3451,f3452,f3453,f3454,f3431,f3433,f3460,f3517,f3523,f3551,f3557,f3564,f3569,f3550,f3581,f3644,f3572,f3672,f3684,f3747,f3675,f3778,f3784,f3799,f3820,f3819,f3884,f3885,f3805,f3913,f3928,f3927,f3929,f3971,f3975,f4030,f4034,f4017,f4018,f4175,f4176,f4177,f4182,f4184,f4190,f4266,f4222,f4273,f4234,f4235,f4237,f4242,f4244,f4484,f4483,f4482,f4481,f4487,f4488,f4489,f4494,f4496,f4498,f4500,f4502,f4508,f4516,f4519,f4520,f4526,f4540,f4592,f4548,f4593,f4791,f4794,f4825,f4831,f4715,f4716,f4717,f4722,f4724,f4726,f4728,f4730,f4736,f4744,f4747,f4748,f4749,f4754,f4756,f4758,f4760,f4762,f4768,f4865,f4776,f4866,f4873,f5308,f5309,f5310,f5311,f5280,f5281,f5282,f5283,f5288,f5290,f5315,f5320,f5306,f5307,f5512,f5513,f5514,f5515,f5498,f5518,f5672,f5708,f5712,f5716,f5728,f5707,f5713,f6059])).
fof(f6058,plain,(
  $false | $spl24),
  inference(subsumption_resolution,[],[f5747,f246])).
fof(f5747,plain,(
  ~p(s(bool,'T_0')) | $spl24),
  inference(backward_demodulation,[],[f5713,f248])).
fof(f6057,plain,(
  $false | $spl24),
  inference(trivial_inequality_removal,[],[f5753])).
fof(f5753,plain,(
  s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) | $spl24),
  inference(backward_demodulation,[],[f5713,f999])).
fof(f6056,plain,(
  $false | $spl24),
  inference(trivial_inequality_removal,[],[f5758])).
fof(f5758,plain,(
  s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) | $spl24),
  inference(backward_demodulation,[],[f5713,f1087])).
fof(f5714,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0))))) ) | $spl26),
  inference(cnf_transformation,[],[f5714_D])).
fof(f5714_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f5716,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f5715])).
fof(f5715,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X37)) | ~p(s(bool,X38)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,'T_0') = s(bool,X39)) )),
  inference(subsumption_resolution,[],[f5686,f399])).
fof(f5686,plain,(
  ( ! [X39,X37,X38] : (~p(s(bool,X37)) | ~p(s(bool,X38)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X38)))) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) )),
  inference(superposition,[],[f322,f396])).
fof(f5712,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0)))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f5711])).
fof(f5711,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | ~p(s(bool,X35)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X35)))) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f5685,f399])).
fof(f5685,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | ~p(s(bool,X35)) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X35)))) | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f322,f396])).
fof(f5319,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | $spl20),
  inference(cnf_transformation,[],[f5319_D])).
fof(f5319_D,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f5326,plain,(
  ~p(s(bool,sK8('_i_0_0',bool))) | $spl23),
  inference(cnf_transformation,[],[f5326_D])).
fof(f5326_D,plain,(
  ~p(s(bool,sK8('_i_0_0',bool))) <=> ~$spl23),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl23])])).
fof(f5306,plain,(
  ~p(s(bool,sK8('_i_0_0',bool))) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0'))))),
  inference(superposition,[],[f317,f290])).
fof(f5317,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) | $spl18),
  inference(cnf_transformation,[],[f5317_D])).
fof(f5317_D,plain,(
  s(bool,'F_0') = s(bool,sK8('_i_0_0',bool)) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f5315,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK8('_i_0_0',bool))),
  inference(subsumption_resolution,[],[f5293,f246])).
fof(f5293,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'!_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK8('_i_0_0',bool))),
  inference(superposition,[],[f317,f429])).
fof(f4033,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | $spl14),
  inference(cnf_transformation,[],[f4033_D])).
fof(f4033_D,plain,(
  p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4017,plain,(
  ( ! [X44] : (~p(s(bool,X44)) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f319,f290])).
fof(f4030,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f4005,f246])).
fof(f4005,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(fun(bool,bool),bool),'?_1'),s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,X0)) )),
  inference(superposition,[],[f319,f429])).
fof(f1986,plain,(
  ( ! [X12,X11] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X12))),s(bool,X11)))) | s(bool,'T_0') = s(bool,X11)) ) | $spl10),
  inference(cnf_transformation,[],[f1986_D])).
fof(f1986_D,plain,(
  ( ! [X12,X11] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X12))),s(bool,X11)))) | s(bool,'T_0') = s(bool,X11)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1987,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X15))),s(bool,X14)))) | p(s(bool,X13)) | s(bool,'T_0') = s(bool,X14)) )),
  inference(subsumption_resolution,[],[f1963,f251])).
fof(f1963,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X15))),s(bool,X14)))) | p(s(bool,X13)) | s(bool,'T_0') = s(bool,X14) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f321,f396])).
fof(f1985,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X12))),s(bool,X11)))) | p(s(bool,X10)) | s(bool,'T_0') = s(bool,X11)) )),
  inference(subsumption_resolution,[],[f1962,f251])).
fof(f1962,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X12))),s(bool,X11)))) | p(s(bool,X10)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f321,f396])).
fof(f1424,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1312,f1418])).
fof(f1418,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f1382,f246])).
fof(f1382,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X1) = s(X0,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f1328,f337])).
fof(f1328,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1290,f252])).
fof(f1312,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f399])).
fof(f1423,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1316,f246])).
fof(f1316,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f315])).
fof(f1422,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1318,f1290])).
fof(f1318,plain,(
  ~p(s(bool,'F_0')) | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f315])).
fof(f1421,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1322,f246])).
fof(f1322,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f315])).
fof(f1420,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1324,f1290])).
fof(f1324,plain,(
  ~p(s(bool,'F_0')) | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f315])).
fof(f1419,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1326,f1418])).
fof(f1326,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl6),
  inference(unit_resulting_resolution,[],[f1290,f255])).
fof(f1417,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1370,f1290])).
fof(f1370,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,'T_0'))),s(bool,X0))))) ) | $spl6),
  inference(backward_demodulation,[],[f1328,f1251])).
fof(f1414,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1413,f1290])).
fof(f1413,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f1352,f1328])).
fof(f1352,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f1328,f255])).
fof(f1412,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f1351,f246])).
fof(f1351,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f1328,f248])).
fof(f1411,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f1357])).
fof(f1357,plain,(
  s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) != s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))) | $spl6),
  inference(backward_demodulation,[],[f1328,f999])).
fof(f1410,plain,(
  $false | $spl6),
  inference(trivial_inequality_removal,[],[f1362])).
fof(f1362,plain,(
  s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) != s('type.benchmark.times'('type.benchmark.times'(bool)),'const.benchmark.Once_1'(s('type.benchmark.times'(bool),'const.benchmark.Once_1'(s(bool,'T_0'))))) | $spl6),
  inference(backward_demodulation,[],[f1328,f1087])).
fof(f1332,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f248,f1290,f320])).
fof(f1329,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f381,f1290,f252])).
fof(f1327,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f290,f1290,f255])).
fof(f1325,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f1290,f381,f1290,f315])).
fof(f1323,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f246,f381,f1290,f315])).
fof(f1319,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f1290,f381,f1290,f315])).
fof(f1317,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f246,f381,f1290,f315])).
fof(f1313,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f290,f381,f1290,f399])).
fof(f1301,plain,(
  $false | $spl6),
  inference(unit_resulting_resolution,[],[f248,f1290])).
fof(f1291,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X7))),s(bool,X8)))) | s(bool,'T_0') = s(bool,X7)) ) | $spl8),
  inference(cnf_transformation,[],[f1291_D])).
fof(f1291_D,plain,(
  ( ! [X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X7))),s(bool,X8)))) | s(bool,'T_0') = s(bool,X7)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1292,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X10))),s(bool,X11)))) | p(s(bool,X9)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(subsumption_resolution,[],[f1255,f251])).
fof(f1255,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X10))),s(bool,X11)))) | p(s(bool,X9)) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f320,f396])).
fof(f1289,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X7))),s(bool,X8)))) | p(s(bool,X6)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1254,f251])).
fof(f1254,plain,(
  ( ! [X6,X8,X7] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(bool,X7))),s(bool,X8)))) | p(s(bool,X6)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f320,f396])).
fof(f1168,plain,(
  ( ! [X20] : (~p(s(bool,sK4(X20,'_i_0_0',bool))) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0'))))) )),
  inference(superposition,[],[f299,f290])).
fof(f1173,plain,(
  ( ! [X0] : (p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(subsumption_resolution,[],[f1162,f246])).
fof(f1162,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,'|dollar|exists_1'(s(fun(bool,bool),'_i_0_0')))) | s(bool,'F_0') = s(bool,sK4(X0,'_i_0_0',bool))) )),
  inference(superposition,[],[f299,f429])).
% SZS output end Proof for thm.benchmark
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 326
% Passive clauses: 5346
% Generated clauses: 59302
% Final active clauses: 103
% Final passive clauses: 2431
% Input formulas: 69
% Initial clauses: 125
% 
% Duplicate literals: 1404
% Trivial inequalities: 305
% Fw subsumption resolutions: 3131
% Fw demodulations: 11133
% Bw demodulations: 2565
% Condensations: 2423
% Global subsumptions: 191
% 
% Simple tautologies: 334
% Equational tautologies: 288
% Forward subsumptions: 33408
% Fw demodulations to eq. taut.: 802
% Bw demodulations to eq. taut.: 98
% 
% Unit resulting resolution: 3956
% Factoring: 1
% Forward superposition: 15992
% Backward superposition: 14255
% Self superposition: 302
% Equality factoring: 110
% Equality resolution: 32
% 
% Split clauses: 151
% Split components: 302
% SAT solver clauses: 6227
% SAT solver unit clauses: 1220
% SAT solver binary clauses: 2458
% 
% Sat splits: 151
% Sat splitting refutations: 386
% 
% Memory used [KB]: 60510
% Time elapsed: 3.474 s
% ------------------------------
% ------------------------------
% Success in time 4.82 s
