Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (86966)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 92
% Passive clauses: 1300
% Generated clauses: 8358
% Final active clauses: 89
% Final passive clauses: 1112
% Input formulas: 21
% Initial clauses: 255
% 
% Duplicate literals: 668
% Trivial inequalities: 109
% Fw subsumption resolutions: 1249
% Fw demodulations: 19
% Bw demodulations: 1
% 
% Simple tautologies: 223
% Equational tautologies: 109
% Forward subsumptions: 3244
% 
% Binary resolution: 88
% Forward superposition: 2906
% Backward superposition: 2305
% Self superposition: 359
% Equality factoring: 326
% Equality resolution: 11
% 
% Split clauses: 500
% Split components: 1005
% SAT solver clauses: 1445
% SAT solver unit clauses: 241
% SAT solver binary clauses: 459
% 
% Sat splits: 500
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1441
% TWLsolver calls for satisfiability: 61
% 
% Memory used [KB]: 4221
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (87019)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 121
% Passive clauses: 611
% Generated clauses: 6359
% Final active clauses: 106
% Final passive clauses: 311
% Input formulas: 21
% Initial clauses: 255
% 
% Duplicate literals: 807
% Trivial inequalities: 54
% Fw subsumption resolutions: 348
% Fw demodulations: 84
% Bw demodulations: 184
% Condensations: 1208
% Global subsumptions: 4
% 
% Simple tautologies: 125
% Equational tautologies: 83
% Forward subsumptions: 1911
% 
% Binary resolution: 56
% Forward superposition: 1287
% Backward superposition: 1263
% Self superposition: 213
% Equality factoring: 198
% Equality resolution: 16
% 
% Split clauses: 72
% Split components: 145
% SAT solver clauses: 1095
% SAT solver unit clauses: 268
% SAT solver binary clauses: 171
% SAT solver learnt clauses: 9
% SAT solver learnt literals: 1
% 
% Sat splits: 72
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 1078
% TWLsolver calls for satisfiability: 5244
% 
% Memory used [KB]: 7036
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (87084)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 514
% Passive clauses: 2638
% Generated clauses: 159859
% Final active clauses: 319
% Final passive clauses: 342
% Input formulas: 21
% Initial clauses: 255
% 
% Duplicate literals: 6324
% Trivial inequalities: 756
% Fw subsumption resolutions: 20912
% Fw demodulations: 15087
% Bw demodulations: 1366
% Condensations: 18118
% Global subsumptions: 477
% 
% Simple tautologies: 1642
% Equational tautologies: 407
% Forward subsumptions: 92530
% Fw demodulations to eq. taut.: 64
% Bw demodulations to eq. taut.: 42
% 
% Unit resulting resolution: 2095
% Forward superposition: 60331
% Backward superposition: 21971
% Self superposition: 582
% Equality factoring: 189
% Equality resolution: 198
% 
% Split clauses: 333
% Split components: 676
% SAT solver clauses: 4237
% SAT solver unit clauses: 16
% SAT solver binary clauses: 670
% 
% Sat splits: 333
% Sat splitting refutations: 454
% 
% Memory used [KB]: 69209
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f460,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f384,f389,f413,f395,f400,f415,f402,f412,f407,f416,f414,f417,f424,f459])).
fof(f459,plain,(
  $false | $spl0),
  inference(trivial_inequality_removal,[],[f458])).
fof(f458,plain,(
  s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) | $spl0),
  inference(equality_resolution,[],[f412])).
fof(f424,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f418,f164])).
fof(f164,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))))))),
  inference(cnf_transformation,[],[f69])).
fof(f69,plain,(
  ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24,sK25])],[f32])).
fof(f32,plain,(
  ? [X0,X1] : ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X1))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X1))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|0','thm.mod_to_conProof.v_rel_rules|split|0')).
fof(f418,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25)))))) | $spl2),
  inference(resolution,[],[f413,f236])).
fof(f236,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~sP7(sK69(X2,X1,X0),sK70(X2,X1,X0),sK71(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | (sP5(X13,sK63(X14,X13,X12,X2,X1,X0),X12,sK65(X14,X13,X12,X2,X1,X0),sK64(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK63(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK64(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK65(X14,X13,X12,X2,X1,X0)))))) | (sP6(X12,sK66(X14,X13,X12,X2,X1,X0),X14,sK68(X14,X13,X12,X2,X1,X0),sK67(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK66(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK67(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK68(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & ((~sP7(sK69(X2,X1,X0),sK70(X2,X1,X0),sK71(X2,X1,X0)) & ! [X9,X10,X11] : (~sP5(sK70(X2,X1,X0),X9,sK69(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK70(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(sK69(X2,X1,X0),X6,sK71(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK71(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK69(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK63,sK64,sK65,sK66,sK67,sK68,sK69,sK70,sK71])],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | ? [X18,X19,X20] : (sP5(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP6(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X9,X10,X11] : (~sP5(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X14,X15,X16] : (~sP5(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(definition_folding,[],[f37,f49,f48,f47,f46,f45,f44,f43,f42])).
fof(f42,plain,(
  ! [X4,X21,X23,X22] : (sP0(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f43,plain,(
  ! [X21,X5,X23,X22] : (sP1(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f44,plain,(
  ! [X21,X5,X23,X22] : (sP2(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f45,plain,(
  ! [X4,X21,X23,X22] : (sP3(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f46,plain,(
  ! [X4,X21,X23,X22] : (sP4(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f47,plain,(
  ! [X4,X14,X3,X16,X15] : (sP5(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f48,plain,(
  ! [X3,X6,X5,X8,X7] : (sP6(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f49,plain,(
  ! [X3,X4,X5] : (sP7(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP3(X4,X21,X23,X22) | sP0(X4,X21,X23,X22) | sP1(X21,X5,X23,X22) | sP2(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP4(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f37,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(flattening,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(ennf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.modSem.v',X8),s('type.conSem.v',X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X7] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) | ? [X16,X17] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17))))) | ? [X18,X19,X20,X16,X17] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X18),s('type.semanticPrimitives.tid_or_exn',X19))))),s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X20),s('type.semanticPrimitives.tid_or_exn',X19))))),s('type.list.list'('type.conSem.v'),X17))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X16))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X18),s('type.semanticPrimitives.tid_or_exn',X19))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17))))) | ? [X21,X22,X23,X24,X25,X26,X27] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.string.char'),X22),s('type.modLang.exp',X23))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24),s('type.list.list'('type.string.char'),X22),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.modLang.exp',X23))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X26),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X21,X28,X22,X25,X24,X26,X27] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X22))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X26),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X29] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X29))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X29)))) | ? [X16,X17] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X30,X31,X32] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X31) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32)) | ? [X33,X16,X34,X17] : (s('type.list.list'('type.modSem.v'),X31) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X33),s('type.list.list'('type.modSem.v'),X16))) & s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X31))),s('type.list.list'('type.conSem.v'),X32))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X22,X33,X21,X38,X34] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X22),s('type.modSem.v',X33))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X22),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v',X8))),s('type.conSem.v',X9))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|0','thm.mod_to_conProof.v_rel2_def')).
fof(f417,plain,(
  $false | $spl2),
  inference(resolution,[],[f413,f366])).
fof(f366,plain,(
  ~sP7(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),sK70('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),sK71('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24))),
  inference(resolution,[],[f164,f236])).
fof(f414,plain,(
  ( ! [X13] : (s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) ) | $spl4),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  ( ! [X13] : (s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f416,plain,(
  ( ! [X41,X40] : (sP23(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X40,X41)) ) | $spl8),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  ( ! [X41,X40] : (sP23(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X40,X41)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f407,plain,(
  ( ! [X52,X53,X51] : (sP23(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X51,X52) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X53))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X53)))) )),
  inference(resolution,[],[f369,f313])).
fof(f313,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | (((s('type.modSem.v',sK119(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK121(X2,X1,X0)))) & s('type.conSem.v',sK120(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK121(X2,X1,X0))))) | sP19(X1,sK118(X2,X1,X0),sK120(X2,X1,X0),sK119(X2,X1,X0)) | sP16(X1,sK118(X2,X1,X0),sK120(X2,X1,X0),sK119(X2,X1,X0)) | sP17(sK118(X2,X1,X0),X2,sK120(X2,X1,X0),sK119(X2,X1,X0)) | sP18(sK118(X2,X1,X0),X2,sK120(X2,X1,X0),sK119(X2,X1,X0)) | (s('type.modSem.v',sK119(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK122(X2,X1,X0)))) & s('type.conSem.v',sK120(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK122(X2,X1,X0))))) | sP20(X1,sK118(X2,X1,X0),sK120(X2,X1,X0),sK119(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X2,X1,X0)))),s('type.modSem.v',sK119(X2,X1,X0)))),s('type.conSem.v',sK120(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP19(X1,X3,X5,X4) & ~sP16(X1,X3,X5,X4) & ~sP17(X3,X2,X5,X4) & ~sP18(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP20(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP23(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK118,sK119,sK120,sK121,sK122])],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP19(X1,X8,X10,X9) | sP16(X1,X8,X10,X9) | sP17(X8,X2,X10,X9) | sP18(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP20(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP19(X1,X3,X5,X4) & ~sP16(X1,X3,X5,X4) & ~sP17(X3,X2,X5,X4) & ~sP18(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP20(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP23(X0,X1,X2)))),
  inference(rectify,[],[f135])).
fof(f135,plain,(
  ! [X3,X4,X5] : ((~sP23(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP19(X4,X21,X23,X22) | sP16(X4,X21,X23,X22) | sP17(X21,X5,X23,X22) | sP18(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP20(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP19(X4,X21,X23,X22) & ~sP16(X4,X21,X23,X22) & ~sP17(X21,X5,X23,X22) & ~sP18(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP20(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP23(X3,X4,X5)))),
  inference(nnf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X3,X4,X5] : (sP23(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP19(X4,X21,X23,X22) | sP16(X4,X21,X23,X22) | sP17(X21,X5,X23,X22) | sP18(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP20(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP23])])).
fof(f369,plain,(
  ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))))))),
  inference(resolution,[],[f164,f239])).
fof(f239,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK69(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f105])).
fof(f412,plain,(
  ( ! [X2] : (s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) ) | $spl0),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  ( ! [X2] : (s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f402,plain,(
  ( ! [X41,X42,X40] : (sP23(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X40,X41) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X42))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X42)))) )),
  inference(resolution,[],[f369,f308])).
fof(f308,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP23(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f137])).
fof(f415,plain,(
  ( ! [X24,X25] : (sP15(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X24,X25)) ) | $spl6),
  inference(cnf_transformation,[],[f415_D])).
fof(f415_D,plain,(
  ( ! [X24,X25] : (sP15(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X24,X25)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f400,plain,(
  ( ! [X37,X35,X36] : (sP15(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X35,X36) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X37))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X37)))) )),
  inference(resolution,[],[f369,f250])).
fof(f250,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2] : ((~sP15(X0,X1,X2) | (((s('type.modSem.v',sK73(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK75(X2,X1,X0)))) & s('type.conSem.v',sK74(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK75(X2,X1,X0))))) | sP11(X1,sK72(X2,X1,X0),sK74(X2,X1,X0),sK73(X2,X1,X0)) | sP8(X1,sK72(X2,X1,X0),sK74(X2,X1,X0),sK73(X2,X1,X0)) | sP9(sK72(X2,X1,X0),X2,sK74(X2,X1,X0),sK73(X2,X1,X0)) | sP10(sK72(X2,X1,X0),X2,sK74(X2,X1,X0),sK73(X2,X1,X0)) | (s('type.modSem.v',sK73(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK76(X2,X1,X0)))) & s('type.conSem.v',sK74(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK76(X2,X1,X0))))) | sP12(X1,sK72(X2,X1,X0),sK74(X2,X1,X0),sK73(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK72(X2,X1,X0)))),s('type.modSem.v',sK73(X2,X1,X0)))),s('type.conSem.v',sK74(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP11(X1,X3,X5,X4) & ~sP8(X1,X3,X5,X4) & ~sP9(X3,X2,X5,X4) & ~sP10(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP12(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP15(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK72,sK73,sK74,sK75,sK76])],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : ((~sP15(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP11(X1,X8,X10,X9) | sP8(X1,X8,X10,X9) | sP9(X8,X2,X10,X9) | sP10(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP12(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP11(X1,X3,X5,X4) & ~sP8(X1,X3,X5,X4) & ~sP9(X3,X2,X5,X4) & ~sP10(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP12(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP15(X0,X1,X2)))),
  inference(rectify,[],[f106])).
fof(f106,plain,(
  ! [X3,X4,X5] : ((~sP15(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP11(X4,X21,X23,X22) | sP8(X4,X21,X23,X22) | sP9(X21,X5,X23,X22) | sP10(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP12(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP11(X4,X21,X23,X22) & ~sP8(X4,X21,X23,X22) & ~sP9(X21,X5,X23,X22) & ~sP10(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP12(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP15(X3,X4,X5)))),
  inference(nnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X3,X4,X5] : (sP15(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP11(X4,X21,X23,X22) | sP8(X4,X21,X23,X22) | sP9(X21,X5,X23,X22) | sP10(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP12(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f395,plain,(
  ( ! [X26,X24,X25] : (sP15(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X24,X25) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X26))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X26)))) )),
  inference(resolution,[],[f369,f245])).
fof(f245,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP15(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f108])).
fof(f413,plain,(
  ( ! [X0,X1] : (sP7(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X0,X1)) ) | $spl2),
  inference(cnf_transformation,[],[f413_D])).
fof(f413_D,plain,(
  ( ! [X0,X1] : (sP7(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X0,X1)) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f389,plain,(
  ( ! [X12,X13,X11] : (sP7(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X11,X12) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X13))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X13)))) )),
  inference(resolution,[],[f369,f187])).
fof(f187,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (((s('type.modSem.v',sK27(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK29(X2,X1,X0)))) & s('type.conSem.v',sK28(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK29(X2,X1,X0))))) | sP3(X1,sK26(X2,X1,X0),sK28(X2,X1,X0),sK27(X2,X1,X0)) | sP0(X1,sK26(X2,X1,X0),sK28(X2,X1,X0),sK27(X2,X1,X0)) | sP1(sK26(X2,X1,X0),X2,sK28(X2,X1,X0),sK27(X2,X1,X0)) | sP2(sK26(X2,X1,X0),X2,sK28(X2,X1,X0),sK27(X2,X1,X0)) | (s('type.modSem.v',sK27(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK30(X2,X1,X0)))) & s('type.conSem.v',sK28(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK30(X2,X1,X0))))) | sP4(X1,sK26(X2,X1,X0),sK28(X2,X1,X0),sK27(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK26(X2,X1,X0)))),s('type.modSem.v',sK27(X2,X1,X0)))),s('type.conSem.v',sK28(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP3(X1,X3,X5,X4) & ~sP0(X1,X3,X5,X4) & ~sP1(X3,X2,X5,X4) & ~sP2(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP4(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP7(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26,sK27,sK28,sK29,sK30])],[f78])).
fof(f78,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP3(X1,X8,X10,X9) | sP0(X1,X8,X10,X9) | sP1(X8,X2,X10,X9) | sP2(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP4(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP3(X1,X3,X5,X4) & ~sP0(X1,X3,X5,X4) & ~sP1(X3,X2,X5,X4) & ~sP2(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP4(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f77])).
fof(f77,plain,(
  ! [X3,X4,X5] : ((~sP7(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP3(X4,X21,X23,X22) | sP0(X4,X21,X23,X22) | sP1(X21,X5,X23,X22) | sP2(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP4(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP3(X4,X21,X23,X22) & ~sP0(X4,X21,X23,X22) & ~sP1(X21,X5,X23,X22) & ~sP2(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP4(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP7(X3,X4,X5)))),
  inference(nnf_transformation,[],[f49])).
fof(f384,plain,(
  ( ! [X2,X0,X1] : (sP7(sK69('const.conSem.Litv_1'(s('type.ast.lit',sK25)),'const.modSem.Litv_1'(s('type.ast.lit',sK25)),sK24),X0,X1) | s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X2))) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK25))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X2)))) )),
  inference(resolution,[],[f369,f182])).
fof(f182,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP7(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f79])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 208
% Passive clauses: 59
% Generated clauses: 95
% Final active clauses: 207
% Final passive clauses: 35
% Input formulas: 21
% Initial clauses: 202
% 
% Selected by SInE selection: 9
% SInE iterations: 1
% 
% Trivial inequalities: 1
% Fw subsumption resolutions: 5
% 
% Simple tautologies: 7
% Forward subsumptions: 20
% 
% Binary resolution: 76
% Forward superposition: 6
% Equality resolution: 1
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 10
% SAT solver unit clauses: 3
% SAT solver binary clauses: 6
% 
% Sat splits: 6
% Sat splitting refutations: 3
% 
% Memory used [KB]: 3326
% Time elapsed: 0.040 s
% ------------------------------
% ------------------------------
% Success in time 11.774 s
