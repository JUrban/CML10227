Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (118464)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 89
% Passive clauses: 3896
% Generated clauses: 15364
% Final active clauses: 85
% Final passive clauses: 3703
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 883
% Trivial inequalities: 118
% Fw subsumption resolutions: 1576
% Fw demodulations: 545
% Bw demodulations: 1
% 
% Simple tautologies: 264
% Equational tautologies: 78
% Forward subsumptions: 6245
% 
% Binary resolution: 165
% Factoring: 2
% Forward superposition: 5992
% Backward superposition: 5375
% Self superposition: 331
% Equality factoring: 202
% Equality resolution: 9
% 
% Split clauses: 422
% Split components: 848
% SAT solver clauses: 1088
% SAT solver unit clauses: 25
% SAT solver binary clauses: 226
% 
% Sat splits: 422
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1086
% TWLsolver calls for satisfiability: 117
% 
% Memory used [KB]: 12025
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (118552)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 55
% Passive clauses: 581
% Generated clauses: 6541
% Final active clauses: 54
% Final passive clauses: 514
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 551
% Trivial inequalities: 40
% Fw subsumption resolutions: 222
% Fw demodulations: 127
% Bw demodulations: 11
% Condensations: 1085
% Global subsumptions: 1
% 
% Simple tautologies: 101
% Equational tautologies: 58
% Forward subsumptions: 2416
% 
% Binary resolution: 117
% Factoring: 2
% Forward superposition: 1948
% Backward superposition: 2080
% Self superposition: 205
% Equality factoring: 142
% Equality resolution: 7
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 950
% SAT solver unit clauses: 48
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 2
% 
% Sat splits: 8
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 946
% TWLsolver calls for satisfiability: 442
% 
% Memory used [KB]: 8187
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f4969,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f100,f73])).
fof(f73,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X4),s('type.conLang.prompt',X5))) != s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),sK2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK1),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK4))))),s('type.modLang.prompt',sK3)))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X4),s('type.conLang.prompt',X5))) != s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),sK2),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK1),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK4))))),s('type.modLang.prompt',sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X4),s('type.conLang.prompt',X5))) != s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X1),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))))),s('type.modLang.prompt',X2)))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X4),s('type.conLang.prompt',X5))) = s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X1),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))))),s('type.modLang.prompt',X2)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X10),s('type.conLang.prompt',X11))) = s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X7),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))))),s('type.modLang.prompt',X8)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.pair.,_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),X10),s('type.conLang.prompt',X11))) = s('type.pair.prod'('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'type.conLang.prompt'),'const.mod_to_con.compile_prompt_2'(s('type.pair.prod'('type.sptree.spt'('type.num.num'),'type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')))),'const.pair.,_2'(s('type.sptree.spt'('type.num.num'),X7),s('type.pair.prod'('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num'))),'const.pair.,_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))))),s('type.modLang.prompt',X8)))),
  file('thm.mod_to_conProof.mod_to_conProof_268_prove_ltb','thm.mod_to_conProof.mod_to_conProof_268_prove_ltb')).
fof(f100,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK16(X2,X1,X0)),s(X1,sK17(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK16(X2,X1,X0)),s(X1,sK17(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16,sK17])],[f40])).
fof(f40,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X12,X38] : ! [X39] : ? [X40,X35] : s('type.pair.prod'(X12,X38),X39) = s('type.pair.prod'(X12,X38),'const.pair.,_2'(s(X12,X40),s(X38,X35)))),
  file('thm.mod_to_conProof.mod_to_conProof_268_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 53
% Passive clauses: 517
% Generated clauses: 4788
% Final active clauses: 49
% Final passive clauses: 444
% Input formulas: 21
% Initial clauses: 36
% 
% Duplicate literals: 455
% Trivial inequalities: 38
% Fw subsumption resolutions: 174
% Fw demodulations: 159
% Bw demodulations: 17
% Condensations: 794
% Global subsumptions: 2
% 
% Simple tautologies: 79
% Equational tautologies: 69
% Forward subsumptions: 2464
% 
% Unit resulting resolution: 132
% Factoring: 1
% Forward superposition: 1395
% Backward superposition: 1338
% Self superposition: 142
% Equality factoring: 94
% Equality resolution: 6
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 594
% SAT solver unit clauses: 50
% SAT solver binary clauses: 106
% 
% Sat splits: 36
% Sat splitting refutations: 1
% 
% Memory used [KB]: 5245
% Time elapsed: 0.576 s
% ------------------------------
% ------------------------------
% Success in time 1.92 s
