Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.evalProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.evalProps
% SZS output start Proof for thm.evalProps
fof(f4046,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4045,f217,f393,f391,f389,f4043,f4044])).
fof(f4044,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f391,f220])).
fof(f220,plain,(
  ( ! [X2] : (s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X2),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0')))) )),
  inference(cnf_transformation,[],[f136])).
fof(f136,plain,(
  (s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK14),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0'))) | s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK15),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0'))) | s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK16),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,sK17)))))) & ! [X4,X5] : s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X4),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,X5))))) & ! [X3] : s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X3),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0'))) & ! [X2] : s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X2),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f135])).
fof(f135,plain,(
  ? [X0,X1] : ((? [X9] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X9),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X8] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X8),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))) | ? [X6,X7] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X6),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X7)))))) & ! [X4,X5] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X4),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X5))))) & ! [X3] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X3),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) & ! [X2] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X2),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))))),
  inference(rectify,[],[f95])).
fof(f95,plain,(
  ? [X0,X1] : ((? [X5] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X5),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X4] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X4),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))) | ? [X2,X3] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X2),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X3)))))) & ! [X8,X9] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X8),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X9))))) & ! [X7] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X7),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) & ! [X6] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X6),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))))),
  inference(flattening,[],[f94])).
fof(f94,plain,(
  ? [X0,X1] : ((? [X5] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X5),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X4] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X4),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))) | ? [X2,X3] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X2),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X3)))))) & (! [X8,X9] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X8),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X9))))) & ! [X7] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X7),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) & ! [X6] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) != s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X6),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0')))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1] : ((? [X5] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X5),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X4] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X4),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))) | ? [X2,X3] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X2),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X3)))))) => (? [X8,X9] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X8),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X9))))) | ? [X7] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X7),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X6] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X6),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0')))))),
  inference(flattening,[],[f38])).
fof(f38,plain,(
  ~! [X0] : ! [X1] : ((? [X5] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X5),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X4] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X4),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0'))) | ? [X2,X3] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X2),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X3)))))) => (? [X8,X9] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X8),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_1'(s(X0,X9))))) | ? [X7] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X7),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.No_match_0'))) | ? [X6] : s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),X1) = s('type.pair.prod'(fun(X0,X0),'type.semanticPrimitives.match_result'(X0)),'const.pair.,_2'(s(fun(X0,X0),X6),s('type.semanticPrimitives.match_result'(X0),'const.semanticPrimitives.Match_type_error_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.No_match_0'))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_type_error_0'))) | ? [X8,X9] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_1'(s(X6,X9)))))) => (? [X8,X9] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_1'(s(X6,X9))))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.No_match_0'))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_type_error_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.No_match_0'))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_type_error_0'))) | ? [X8,X9] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_1'(s(X6,X9)))))) => (? [X8,X9] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_1'(s(X6,X9))))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.No_match_0'))) | ? [X8] : s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),X7) = s('type.pair.prod'(fun(X6,X6),'type.semanticPrimitives.match_result'(X6)),'const.pair.,_2'(s(fun(X6,X6),X8),s('type.semanticPrimitives.match_result'(X6),'const.semanticPrimitives.Match_type_error_0')))))),
  file('thm.evalProps.evalProps_|49||49|8_prove_ltb','thm.evalProps.evalProps_|49||49|8_prove_ltb')).
fof(f4043,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f393,f218])).
fof(f218,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X4),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,X5)))))) )),
  inference(cnf_transformation,[],[f136])).
fof(f389,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK14),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0'))) | $spl0),
  inference(cnf_transformation,[],[f389_D])).
fof(f389_D,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK14),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f391,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK15),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0'))) | $spl2),
  inference(cnf_transformation,[],[f391_D])).
fof(f391_D,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK15),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0'))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f393,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK16),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,sK17))))) | $spl4),
  inference(cnf_transformation,[],[f393_D])).
fof(f393_D,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK16),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,sK17))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f217,plain,(
  s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK16),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_1'(s(sK12,sK17))))) | s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK15),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.Match_type_error_0'))) | s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) = s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),sK14),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0')))),
  inference(cnf_transformation,[],[f136])).
fof(f4045,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f389,f219])).
fof(f219,plain,(
  ( ! [X3] : (s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),sK13) != s('type.pair.prod'(fun(sK12,sK12),'type.semanticPrimitives.match_result'(sK12)),'const.pair.,_2'(s(fun(sK12,sK12),X3),s('type.semanticPrimitives.match_result'(sK12),'const.semanticPrimitives.No_match_0')))) )),
  inference(cnf_transformation,[],[f136])).
% SZS output end Proof for thm.evalProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 311
% Passive clauses: 1211
% Generated clauses: 3822
% Final active clauses: 311
% Final passive clauses: 753
% Input formulas: 36
% Initial clauses: 167
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 255
% 
% Simple tautologies: 139
% Equational tautologies: 20
% Forward subsumptions: 2041
% 
% Binary resolution: 2327
% Factoring: 706
% Forward superposition: 108
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 158
% SAT solver clauses: 155
% SAT solver unit clauses: 9
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 154
% TWLsolver calls for satisfiability: 134
% 
% Memory used [KB]: 1918
% Time elapsed: 0.138 s
% ------------------------------
% ------------------------------
% Success in time 0.139 s
